Filename,Buggy/Deleted,Fixed/Added
ConfigBeanImpl.java,T bean = clazz.newInstance();,if (clazz != null ) T bean = clazz.newInstance();
ConfigFactory.java,ClassLoader loader = parseOptions.getClassLoader();,if (parseOptions != null ) ClassLoader loader = parseOptions.getClassLoader();
DefaultConfigLoadingStrategy.java,ClassLoader loader = parseOptions.getClassLoader();,if (parseOptions != null ) ClassLoader loader = parseOptions.getClassLoader();
SimpleConfig.java,String s = (String) v.unwrapped();,if (v != null ) String s = (String) v.unwrapped();
SimpleConfig.java,String s = (String) v.unwrapped();,if (v != null ) String s = (String) v.unwrapped();
SimpleConfig.java,result = resultDecimal.toBigInteger();,if (resultDecimal != null ) result = resultDecimal.toBigInteger();
SimpleConfig.java,String s = (String) v.unwrapped();,if (v != null ) String s = (String) v.unwrapped();
ConfigImpl.java,String propertyKey = builder.toString();,if (builder != null ) String propertyKey = builder.toString();
EnvFirstConfigLoadingStrategy.java,String propertyKey = builder.toString();,if (builder != null ) String propertyKey = builder.toString();
SerializedConfigValue.java,this.wasConfig = in.readBoolean();,if (in != null ) this.wasConfig = in.readBoolean();
ConfigImpl.java,String key = entry.getKey();,if (entry != null ) String key = entry.getKey();
ConfigFactory.java,ClassLoader loader = parseOptions.getClassLoader();,if (parseOptions != null ) ClassLoader loader = parseOptions.getClassLoader();
ConfigBeanImpl.java,configPropName = beanProp.getName();,if (beanProp != null ) configPropName = beanProp.getName();
ConfigParser.java,ArrayList<AbstractConfigNode> nodes = new ArrayList(n.children());,if (ArrayList(n != null ) ArrayList<AbstractConfigNode> nodes = new ArrayList(n.children());
Parser.java,ListIterator<Token> li = newlines.listIterator(newlines.size());,if (newlines != null ) ListIterator<Token> li = newlines.listIterator(newlines.size());
Parser.java,int newNumber = t.token.lineNumber();,if (t != null ) int newNumber = t.token.lineNumber();
Parser.java,t = tokens.next();,if (tokens != null ) t = tokens.next();
Parser.java,String key = path.first();,if (path != null ) String key = path.first();
Parser.java,Path remaining = path.remainder();,if (path != null ) Path remaining = path.remainder();
Parser.java,key = remaining.first();,if (remaining != null ) key = remaining.first();
Parser.java,remaining = remaining.remainder();,if (remaining != null ) remaining = remaining.remainder();
Parser.java,ListIterator<String> i = keys.listIterator(keys.size());,if (keys != null ) ListIterator<String> i = keys.listIterator(keys.size());
Parser.java,lastPath = pathStack.pop();,if (pathStack != null ) lastPath = pathStack.pop();
Parser.java,String key = path.first();,if (path != null ) String key = path.first();
Parser.java,Path remaining = path.remainder();,if (path != null ) Path remaining = path.remainder();
ConfigNodeComplexValue.java,Path key = node.path().value();,if (node != null ) Path key = node.path().value();
ConfigNodeComplexValue.java,Path remainingPath = desiredPath.subPath(key.length());,if (desiredPath != null ) Path remainingPath = desiredPath.subPath(key.length());
ConfigDocumentParser.java,ArrayList<Token> tokens = new ArrayList(value.tokens());,if (ArrayList(value != null ) ArrayList<Token> tokens = new ArrayList(value.tokens());
ConfigNodeComplexValue.java,key = node.key().value();,if (node != null ) key = node.key().value();
Parser.java,"Path path = parsePathExpression(expression.iterator(), valueToken.origin());","if (valueToken != null ) Path path = parsePathExpression(expression.iterator(), valueToken.origin());"
Parser.java,Token t = expression.next();,if (expression != null ) Token t = expression.next();
ConfigNodeComplexValue.java,ArrayList<ConfigNode> childrenCopy = (ArrayList<ConfigNode>)(children.clone());,if ((ArrayList<ConfigNode>)(children != null ) ArrayList<ConfigNode> childrenCopy = (ArrayList<ConfigNode>)(children.clone());
ConfigNodeComplexValue.java,ArrayList<ConfigNode> childrenCopy = (ArrayList<ConfigNode>)children.clone();,if ((ArrayList<ConfigNode>)children != null ) ArrayList<ConfigNode> childrenCopy = (ArrayList<ConfigNode>)children.clone();
ConfigNodeKeyValue.java,ArrayList<ConfigNode> newChildren = (ArrayList<ConfigNode>)(children.clone());,if ((ArrayList<ConfigNode>)(children != null ) ArrayList<ConfigNode> newChildren = (ArrayList<ConfigNode>)(children.clone());
ConfigNodeComplexValue.java,ArrayList<ConfigNode> childrenCopy = (ArrayList<ConfigNode>)children.clone();,if ((ArrayList<ConfigNode>)children != null ) ArrayList<ConfigNode> childrenCopy = (ArrayList<ConfigNode>)children.clone();
ConfigNodeComplexValue.java,Path key = Path.newPath(child.render());,if (Path != null ) Path key = Path.newPath(child.render());
ConfigNodeComplexValue.java,remainingPath = desiredPath.subPath(key.length());,if (desiredPath != null ) remainingPath = desiredPath.subPath(key.length());
Parseable.java,URLConnection connection = input.openConnection();,if (input != null ) URLConnection connection = input.openConnection();
Parseable.java,contentType = connection.getContentType();,if (connection != null ) contentType = connection.getContentType();
Parseable.java,contentType = contentType.trim();,if (contentType != null ) contentType = contentType.trim();
Parseable.java,InputStream stream = connection.getInputStream();,if (connection != null ) InputStream stream = connection.getInputStream();
Tokenizer.java,renderedText += tokens.next().tokenText();,if (tokens != null ) renderedText += tokens.next().tokenText();
Parser.java,next = tokens.next();,if (tokens != null ) next = tokens.next();
Parser.java,Token t = tokens.next();,if (tokens != null ) Token t = tokens.next();
Parser.java,Token after = tokens.next();,if (tokens != null ) Token after = tokens.next();
Parseable.java,InputStream stream = url.openStream();,if (url != null ) InputStream stream = url.openStream();
ConfigBeanImpl.java,ConfigValue configValue = configProps.get(beanProp.getName());,if (configProps != null ) ConfigValue configValue = configProps.get(beanProp.getName());
ConfigBeanImpl.java,String camelName = ConfigImplUtil.toCamelCase(configProp.getKey());,if (ConfigImplUtil != null ) String camelName = ConfigImplUtil.toCamelCase(configProp.getKey());
ConfigBeanImpl.java,T bean = clazz.newInstance();,if (clazz != null ) T bean = clazz.newInstance();
ConfigBeanImpl.java,Object configValue = configProps.get(beanProp.getName());,if (configProps != null ) Object configValue = configProps.get(beanProp.getName());
ConfigBeanFactory.java,T bean = clazz.newInstance();,if (clazz != null ) T bean = clazz.newInstance();
ConfigBeanFactory.java,Method setter = beanProp.getWriteMethod();,if (beanProp != null ) Method setter = beanProp.getWriteMethod();
ConfigBeanFactory.java,Object configValue = configProps.get(beanProp.getName());,if (configProps != null ) Object configValue = configProps.get(beanProp.getName());
ConfigBeanFactory.java,StringBuilder nameBuilder = new StringBuilder(originalName.length());,if (StringBuilder(originalName != null ) StringBuilder nameBuilder = new StringBuilder(originalName.length());
MemoryUnit.java,String firstUpper = first.toUpperCase();,if (first != null ) String firstUpper = first.toUpperCase();
BeanFactory.java,T bean = clazz.newInstance();,if (clazz != null ) T bean = clazz.newInstance();
BeanFactory.java,Method setter = beanProp.getWriteMethod();,if (beanProp != null ) Method setter = beanProp.getWriteMethod();
BeanFactory.java,Object configValue = configProps.get(beanProp.getName());,if (configProps != null ) Object configValue = configProps.get(beanProp.getName());
BeanFactory.java,"configValue = create(child, beanProp.getPropertyType());","if (beanProp != null ) configValue = create(child, beanProp.getPropertyType());"
BeanFactory.java,StringBuilder nameBuilder = new StringBuilder(originalName.length());,if (StringBuilder(originalName != null ) StringBuilder nameBuilder = new StringBuilder(originalName.length());
SimpleConfig.java,String firstUpper = first.toUpperCase();,if (first != null ) String firstUpper = first.toUpperCase();
ConfigConcatenation.java,List<AbstractConfigValue> values = new ArrayList<AbstractConfigValue>(pieces.size());,if (ArrayList<AbstractConfigValue>(pieces != null ) List<AbstractConfigValue> values = new ArrayList<AbstractConfigValue>(pieces.size());
SimpleConfigObject.java,Path remainder = context.restrictToChild().remainder();,if (context != null ) Path remainder = context.restrictToChild().remainder();
AbstractConfigObject.java,Path next = path.remainder();,if (path != null ) Path next = path.remainder();
AbstractConfigObject.java,AbstractConfigValue v = self.attemptPeekWithPartialResolve(path.first());,if (self != null ) AbstractConfigValue v = self.attemptPeekWithPartialResolve(path.first());
PropertiesParser.java,Path parentPath = path.parent();,if (path != null ) Path parentPath = path.parent();
PropertiesParser.java,String last = path.last();,if (path != null ) String last = path.last();
PropertiesParser.java,"value = new ConfigString(origin, rawValue.toString());","if (rawValue != null ) value = new ConfigString(origin, rawValue.toString());"
PropertiesParser.java,Path parentPath = path.parent();,if (path != null ) Path parentPath = path.parent();
PropertiesParser.java,String last = path.last();,if (path != null ) String last = path.last();
Parser.java,Path prefix = new Path(pathStack.descendingIterator());,if (Path(pathStack != null ) Path prefix = new Path(pathStack.descendingIterator());
Path.java,Iterator<Path> i = pathsToConcat.iterator();,if (pathsToConcat != null ) Iterator<Path> i = pathsToConcat.iterator();
Parseable.java,InputStream stream = input.openStream();,if (input != null ) InputStream stream = input.openStream();
SimpleIncluder.java,failMessage = sb.toString();,if (sb != null ) failMessage = sb.toString();
ConfigImpl.java,ConfigSyntax syntax = options.getSyntax();,if (options != null ) ConfigSyntax syntax = options.getSyntax();
ConfigImpl.java,failMessage = sb.toString();,if (sb != null ) failMessage = sb.toString();
Parser.java,firstOrigin = valueToken.origin();,if (valueToken != null ) firstOrigin = valueToken.origin();
Parser.java,firstOrigin = valueToken.origin();,if (valueToken != null ) firstOrigin = valueToken.origin();
Parser.java,"Path path = parsePathExpression(expression.iterator(), valueToken.origin());","if (valueToken != null ) Path path = parsePathExpression(expression.iterator(), valueToken.origin());"
ResolveContext.java,Set<MemoKey> traversed = traversedStack.peekFirst();,if (traversedStack != null ) Set<MemoKey> traversed = traversedStack.peekFirst();
ResolveContext.java,Set<MemoKey> traversed = traversedStack.peekFirst();,if (traversedStack != null ) Set<MemoKey> traversed = traversedStack.peekFirst();
ResolveContext.java,Set<MemoKey> oldTraversed = traversedStack.removeFirst();,if (traversedStack != null ) Set<MemoKey> oldTraversed = traversedStack.removeFirst();
ResolveSource.java,AbstractConfigValue original = key.value();,if (key != null ) AbstractConfigValue original = key.value();
SubstitutionResolver.java,"restrictedKey = new MemoKey(original, context.restrictToChild());","if (context != null ) restrictedKey = new MemoKey(original, context.restrictToChild());"
AbstractConfigObject.java,Path next = path.remainder();,if (path != null ) Path next = path.remainder();
AbstractConfigObject.java,AbstractConfigValue v = self.attemptPeekWithPartialResolve(path.first());,if (self != null ) AbstractConfigValue v = self.attemptPeekWithPartialResolve(path.first());
SimpleConfig.java,String key = path.first();,if (path != null ) String key = path.first();
SimpleConfig.java,Path next = path.remainder();,if (path != null ) Path next = path.remainder();
SimpleConfigObject.java,Path remainder = restrictToChildOrNull.remainder();,if (restrictToChildOrNull != null ) Path remainder = restrictToChildOrNull.remainder();
AbstractConfigObject.java,String key = path.first();,if (path != null ) String key = path.first();
AbstractConfigObject.java,Path next = path.remainder();,if (path != null ) Path next = path.remainder();
AbstractConfigObject.java,boolean newIgnoresFallbacks = fallback.ignoresFallbacks();,if (fallback != null ) boolean newIgnoresFallbacks = fallback.ignoresFallbacks();
AbstractConfigObject.java,valuesHash += m.get(k).hashCode();,if (m != null ) valuesHash += m.get(k).hashCode();
Parser.java,t = tokens.next();,if (tokens != null ) t = tokens.next();
Parser.java,t = buffer.pop();,if (buffer != null ) t = buffer.pop();
Parser.java,previousFieldName = lastPath.render();,if (lastPath != null ) previousFieldName = lastPath.render();
Parser.java,previousFieldName = pathStack.peek().render();,if (pathStack != null ) previousFieldName = pathStack.peek().render();
AbstractConfigValue.java,ConfigValue other = mergeable.toValue();,if (mergeable != null ) ConfigValue other = mergeable.toValue();
ConfigImpl.java,String next = path.first();,if (path != null ) String next = path.first();
ConfigImpl.java,Path remaining = path.remainder();,if (path != null ) Path remaining = path.remainder();
ConfigImpl.java,next = remaining.first();,if (remaining != null ) next = remaining.first();
ConfigImpl.java,remaining = remaining.remainder();,if (remaining != null ) remaining = remaining.remainder();
Parseable.java,File parent = new File(resource).getParentFile();,if (File(resource) != null ) File parent = new File(resource).getParentFile();
AbstractConfigObject.java,String desc = v.origin().description();,if (v != null ) String desc = v.origin().description();
AbstractConfigObject.java,desc = desc.substring(prefix.length());,if (desc != null ) desc = desc.substring(prefix.length());
SimpleConfig.java,String unitStringLower = unitString.toLowerCase();,if (unitString != null ) String unitStringLower = unitString.toLowerCase();
AbstractConfigObject.java,ConfigValue other = mergeable.toValue();,if (mergeable != null ) ConfigValue other = mergeable.toValue();
ConfigDelayedMerge.java,ConfigValue other = mergeable.toValue();,if (mergeable != null ) ConfigValue other = mergeable.toValue();
ConfigDelayedMergeObject.java,ConfigValue other = mergeable.toValue();,if (mergeable != null ) ConfigValue other = mergeable.toValue();
ConfigSubstitution.java,ConfigValue other = mergeable.toValue();,if (mergeable != null ) ConfigValue other = mergeable.toValue();
RootConfig.java,SimpleConfig resolved = resolvedObject(options).toConfig();,if (resolvedObject(options) != null ) SimpleConfig resolved = resolvedObject(options).toConfig();
AbstractConfigValue.java,merged = merged.withFallback(f.toValue());,if (merged != null ) merged = merged.withFallback(f.toValue());
Config.java,String unitStringLower = unitString.toLowerCase();,if (unitString != null ) String unitStringLower = unitString.toLowerCase();
AbstractConfigObject.java,String key = path.first();,if (path != null ) String key = path.first();
AbstractConfigObject.java,Path next = path.remainder();,if (path != null ) Path next = path.remainder();
AbstractConfigObject.java,String s = (String) v.unwrapped();,if (v != null ) String s = (String) v.unwrapped();
AbstractConfigObject.java,String s = (String) v.unwrapped();,if (v != null ) String s = (String) v.unwrapped();
ConfigImpl.java,Object key = entry.getKey();,if (entry != null ) Object key = entry.getKey();
ConfigInt.java,String s = super.transformToString();,if (super != null ) String s = super.transformToString();
ConfigLong.java,Long l = this.unwrapped();,if (this != null ) Long l = this.unwrapped();
Config.java,"ConfigValue mainFiles = parse(rootPath, ConfigParseOptions.defaults());","if (ConfigParseOptions != null ) ConfigValue mainFiles = parse(rootPath, ConfigParseOptions.defaults());"
Parseable.java,String path = url.getPath();,if (url != null ) String path = url.getPath();
Parseable.java,URI parent = parentURL.toURI();,if (parentURL != null ) URI parent = parentURL.toURI();
ConfigImpl.java,ConfigSyntax syntax = options.getSyntax();,if (options != null ) ConfigSyntax syntax = options.getSyntax();
Parser.java,ConfigSyntax syntax = baseOptions.getSyntax();,if (baseOptions != null ) ConfigSyntax syntax = baseOptions.getSyntax();
Parser.java,syntax = input.guessSyntax();,if (input != null ) syntax = input.guessSyntax();
Parser.java,Reader reader = input.reader();,if (input != null ) Reader reader = input.reader();
PropertiesParser.java,ConfigOrigin origin = new SimpleConfigOrigin(url.toExternalForm());,if (SimpleConfigOrigin(url != null ) ConfigOrigin origin = new SimpleConfigOrigin(url.toExternalForm());
PropertiesParser.java,stream = url.openStream();,if (url != null ) stream = url.openStream();
ConfigImpl.java,ConfigRoot resolved = merged.asRoot().resolve();,if (merged != null ) ConfigRoot resolved = merged.asRoot().resolve();
Parser.java,ConfigOrigin origin = new SimpleConfigOrigin(f.getPath());,if (SimpleConfigOrigin(f != null ) ConfigOrigin origin = new SimpleConfigOrigin(f.getPath());
Parser.java,ConfigOrigin origin = new SimpleConfigOrigin(url.toExternalForm());,if (SimpleConfigOrigin(url != null ) ConfigOrigin origin = new SimpleConfigOrigin(url.toExternalForm());
Parser.java,InputStream stream = url.openStream();,if (url != null ) InputStream stream = url.openStream();
SimpleConfigObject.java,valuesHash += m.get(k).hashCode();,if (m != null ) valuesHash += m.get(k).hashCode();
Config.java,String s = input.trim();,if (input != null ) String s = input.trim();
Config.java,String s = input.trim();,if (input != null ) String s = input.trim();
Parser.java,String s = path.trim();,if (path != null ) String s = path.trim();
Parser.java,InputStream stream = new BufferedInputStream(url.openStream());,if (BufferedInputStream(url != null ) InputStream stream = new BufferedInputStream(url.openStream());
AbstractConfigObject.java,List<AbstractConfigObject> stackForKey = entry.getValue();,if (entry != null ) List<AbstractConfigObject> stackForKey = entry.getValue();
ConfigImpl.java,ConfigOrigin origin = new SimpleConfigOrigin(url.toExternalForm());,if (SimpleConfigOrigin(url != null ) ConfigOrigin origin = new SimpleConfigOrigin(url.toExternalForm());
ConfigImpl.java,stream = url.openStream();,if (url != null ) stream = url.openStream();
Parser.java,ConfigOrigin origin = new SimpleConfigOrigin(f.getPath());,if (SimpleConfigOrigin(f != null ) ConfigOrigin origin = new SimpleConfigOrigin(f.getPath());
Parser.java,"Token consolidated = Tokens.newString(firstOrigin, sb.toString());","if (sb != null ) Token consolidated = Tokens.newString(firstOrigin, sb.toString());"
Tokenizer.java,String s = sb.toString().trim();,if (sb != null ) String s = sb.toString().trim();
Parser.java,Token t = tokens.next();,if (tokens != null ) Token t = tokens.next();
Parser.java,t = tokens.next();,if (tokens != null ) t = tokens.next();
Tokenizer.java,Tokens.Token t = tokens.remove();,if (tokens != null ) Tokens.Token t = tokens.remove();
ConfigFactory.java,ConfigTransformer extraTransformer = configConfig.extraTransformer();,if (configConfig != null ) ConfigTransformer extraTransformer = configConfig.extraTransformer();
