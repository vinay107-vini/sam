Filename,Buggy/Deleted,Fixed/Added
KotlinConfiguredCompilerFactory.java,Optional<BuildRule> abiJarRule = buildRuleResolver.getRuleOptional(abiJarTarget.get());,if (buildRuleResolver != null ) Optional<BuildRule> abiJarRule = buildRuleResolver.getRuleOptional(abiJarTarget.get());
KotlinConfiguredCompilerFactory.java,SourcePath abiJarPath = abiJarRule.get().getSourcePathToOutput();,if (abiJarRule != null ) SourcePath abiJarPath = abiJarRule.get().getSourcePathToOutput();
AndroidBinaryBuildable.java,File[] assetFiles = path.toFile().listFiles();,if (path != null ) File[] assetFiles = path.toFile().listFiles();
AndroidBinaryBuildable.java,File[] modules = assetFile.listFiles();,if (assetFile != null ) File[] modules = assetFile.listFiles();
AndroidBinaryBuildable.java,boolean applyRedex = redexOptions.isPresent();,if (redexOptions != null ) boolean applyRedex = redexOptions.isPresent();
AndroidBinaryBuildable.java,boolean shouldPackageAssetLibraries = packageAssetLibraries || !module.isRootModule();,if (!module != null ) boolean shouldPackageAssetLibraries = packageAssetLibraries || !module.isRootModule();
WorkerProcessPool.java,workerProcess = startWorkerProcess.get();,if (startWorkerProcess != null ) workerProcess = startWorkerProcess.get();
ExoResourcesRewriterTest.java,String expected = filesystem.readFileIfItExists(expectedPath).get();,if (filesystem != null ) String expected = filesystem.readFileIfItExists(expectedPath).get();
ExoResourcesRewriterTest.java,expected = filesystem.readFileIfItExists(expectedPath).get();,if (filesystem != null ) expected = filesystem.readFileIfItExists(expectedPath).get();
ResourceTableTest.java,String expected = filesystem.readFileIfItExists(resourcesOutput).get();,if (filesystem != null ) String expected = filesystem.readFileIfItExists(resourcesOutput).get();
AppleTest.java,Optional<String> snapshotReferenceImagesPath = Optional.empty();,if (Optional != null ) Optional<String> snapshotReferenceImagesPath = Optional.empty();
DalvikStatsCache.java,String name = entry.getRelativePath();,if (entry != null ) String name = entry.getRelativePath();
DefaultJavaLibraryRules.java,result = Objects.requireNonNull(getConfiguredCompilerFactory()).getAbiGenerationMode();,if (Objects != null ) result = Objects.requireNonNull(getConfiguredCompilerFactory()).getAbiGenerationMode();
Machos.java,int valuePosition = map.position();,if (map != null ) int valuePosition = map.position();
Machos.java,int position = map.position();,if (map != null ) int position = map.position();
Machos.java,String replacementPrefix = root.getValue().toString();,if (root != null ) String replacementPrefix = root.getValue().toString();
ObjectFileScrubbersTest.java,"byte[] stringBytes = ""TestString"".getBytes();","if (""TestString"" != null ) byte[] stringBytes = ""TestString"".getBytes();"
ObjectFileScrubbersTest.java,"byte[] stringBytes = ""TestString"".getBytes();","if (""TestString"" != null ) byte[] stringBytes = ""TestString"".getBytes();"
Machos.java,currentStringTableOffset = map.position();,if (map != null ) currentStringTableOffset = map.position();
ObjectFileScrubbers.java,int position = buffer.position();,if (buffer != null ) int position = buffer.position();
DefaultConstructorArgMarshaller.java,attribute = info.getImplicitPreCoercionValue();,if (info != null ) attribute = info.getImplicitPreCoercionValue();
DefaultUnconfiguredTargetNodeFactory.java,String visibilityDefinerDescription = target.getFullyQualifiedName();,if (target != null ) String visibilityDefinerDescription = target.getFullyQualifiedName();
SkylarkDescription.java,BaseFunction implementation = args.getImplementation();,if (args != null ) BaseFunction implementation = args.getImplementation();
ProjectGenerator.java,Set<Path> headerPaths = resolvedContents.keySet();,if (resolvedContents != null ) Set<Path> headerPaths = resolvedContents.keySet();
DefaultConstructorArgMarshaller.java,SelectorListCoercer<T> coercer = new SelectorListCoercer<>(info.getTypeCoercer());,if (SelectorListCoercer<>(info != null ) SelectorListCoercer<T> coercer = new SelectorListCoercer<>(info.getTypeCoercer());
CellConfig.java,Path cellPath = entry.getValue();,if (entry != null ) Path cellPath = entry.getValue();
LocalCellProviderFactory.java,ImmutableSet<Path> allRoots = ImmutableSet.copyOf(cellPathMapping.values());,if (ImmutableSet != null ) ImmutableSet<Path> allRoots = ImmutableSet.copyOf(cellPathMapping.values());
Serializer.java,cellPath = candidate.getKey();,if (candidate != null ) cellPath = candidate.getKey();
IsolationChecker.java,cellPath = candidate.getKey();,if (candidate != null ) cellPath = candidate.getKey();
Cells.java,ImmutableSortedSet<Path> allRoots = getRootCell().getKnownRootsOfAllCells();,if (getRootCell() != null ) ImmutableSortedSet<Path> allRoots = getRootCell().getKnownRootsOfAllCells();
CellPathResolverViewTest.java,ImmutableSortedSet<Path> knownRoots = view.getKnownRoots();,if (view != null ) ImmutableSortedSet<Path> knownRoots = view.getKnownRoots();
UmbrellaDirectoryModuleMap.java,this.generatedModule = st.render();,if (st != null ) this.generatedModule = st.render();
CxxGenruleDescription.java,ImmutableList<String> asflags = cxxPlatform.getAsflags();,if (cxxPlatform != null ) ImmutableList<String> asflags = cxxPlatform.getAsflags();
CxxGenruleDescription.java,ImmutableList<String> cflags = cxxPlatform.getCflags();,if (cxxPlatform != null ) ImmutableList<String> cflags = cxxPlatform.getCflags();
CxxGenruleDescription.java,ImmutableList<String> cxxflags = cxxPlatform.getCxxflags();,if (cxxPlatform != null ) ImmutableList<String> cxxflags = cxxPlatform.getCxxflags();
CxxPlatformXcodeConfigGenerator.java,ArrayList<String> notProcessedCxxFlags = new ArrayList<String>(cxxPlatform.getCxxflags());,if (ArrayList<String>(cxxPlatform != null ) ArrayList<String> notProcessedCxxFlags = new ArrayList<String>(cxxPlatform.getCxxflags());
CxxPlatformXcodeConfigGenerator.java,ArrayList<String> notProcessedCxxFlags = new ArrayList<String>(cxxPlatform.getCxxflags());,if (ArrayList<String>(cxxPlatform != null ) ArrayList<String> notProcessedCxxFlags = new ArrayList<String>(cxxPlatform.getCxxflags());
CxxPlatformBuildConfiguration.java,ArrayList<String> cxxFlags = new ArrayList<String>(cxxPlatform.getCxxflags());,if (ArrayList<String>(cxxPlatform != null ) ArrayList<String> cxxFlags = new ArrayList<String>(cxxPlatform.getCxxflags());
CxxPlatformBuildConfiguration.java,ArrayList<String> cxxFlags = new ArrayList<String>(cxxPlatform.getCxxflags());,if (ArrayList<String>(cxxPlatform != null ) ArrayList<String> cxxFlags = new ArrayList<String>(cxxPlatform.getCxxflags());
NdkCxxPlatformTest.java,ImmutableList<String> cppflags = platform.getCxxPlatform().getCppflags();,if (platform != null ) ImmutableList<String> cppflags = platform.getCxxPlatform().getCppflags();
NdkCxxPlatformTest.java,ImmutableList<String> cflags = platform.getCxxPlatform().getCflags();,if (platform != null ) ImmutableList<String> cflags = platform.getCxxPlatform().getCflags();
NdkCxxPlatformTest.java,ImmutableList<String> cxxppflags = platform.getCxxPlatform().getCxxppflags();,if (platform != null ) ImmutableList<String> cxxppflags = platform.getCxxPlatform().getCxxppflags();
NdkCxxPlatformTest.java,ImmutableList<String> cxxflags = platform.getCxxPlatform().getCxxflags();,if (platform != null ) ImmutableList<String> cxxflags = platform.getCxxPlatform().getCxxflags();
SkylarkParamInfoTest.java,SkylarkUserDefinedRule rule = FakeSkylarkUserDefinedRuleFactory.createSimpleRule();,if (FakeSkylarkUserDefinedRuleFactory != null ) SkylarkUserDefinedRule rule = FakeSkylarkUserDefinedRuleFactory.createSimpleRule();
SkylarkParamInfoTest.java,ProjectFilesystem filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());,if (TestProjectFilesystems != null ) ProjectFilesystem filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());
DefaultConstructorArgMarshaller.java,TypeCoercer<Object> coercer = (TypeCoercer<Object>) info.getTypeCoercer();,if (info != null ) TypeCoercer<Object> coercer = (TypeCoercer<Object>) info.getTypeCoercer();
ImmutableTypeCoercer.java,TypeCoercer<Object> paramTypeCoercer = (TypeCoercer<Object>) paramInfo.getTypeCoercer();,if (paramInfo != null ) TypeCoercer<Object> paramTypeCoercer = (TypeCoercer<Object>) paramInfo.getTypeCoercer();
KnownRuleTypesProviderTest.java,KnownRuleTypes knownRuleTypes = provider.get(cell.getRootCell());,if (provider != null ) KnownRuleTypes knownRuleTypes = provider.get(cell.getRootCell());
KnownRuleTypesProviderTest.java,KnownNativeRuleTypes knownNativeRuleTypes = provider.getNativeRuleTypes(cell.getRootCell());,if (provider != null ) KnownNativeRuleTypes knownNativeRuleTypes = provider.getNativeRuleTypes(cell.getRootCell());
KnownRuleTypesProviderTest.java,KnownRuleTypes knownRuleTypes = provider.get(cell.getRootCell());,if (provider != null ) KnownRuleTypes knownRuleTypes = provider.get(cell.getRootCell());
KnownRuleTypesProviderTest.java,KnownNativeRuleTypes knownNativeRuleTypes = provider.getNativeRuleTypes(cell.getRootCell());,if (provider != null ) KnownNativeRuleTypes knownNativeRuleTypes = provider.getNativeRuleTypes(cell.getRootCell());
PythonDslProjectBuildFileParserTest.java,cell = new TestCellBuilder().build();,if (TestCellBuilder() != null ) cell = new TestCellBuilder().build();
CachingBuildRuleBuilder.java,uploadCompleteFuture = manifestStoreResult.getStoreFuture().get();,if (manifestStoreResult != null ) uploadCompleteFuture = manifestStoreResult.getStoreFuture().get();
AndroidInstrumentationTest.java,Optional<Path> exopackageSymlinkTreePath = Optional.empty();,if (Optional != null ) Optional<Path> exopackageSymlinkTreePath = Optional.empty();
AndroidResourceIndexCollector.java,Path root = projectFilesystem.getRootPath();,if (projectFilesystem != null ) Path root = projectFilesystem.getRootPath();
AuditIncludesCommand.java,Path root = projectFilesystem.getRootPath();,if (projectFilesystem != null ) Path root = projectFilesystem.getRootPath();
AuditRulesCommand.java,Path root = projectFilesystem.getRootPath();,if (projectFilesystem != null ) Path root = projectFilesystem.getRootPath();
BuckQueryEnvironment.java,AbsPath rootPath = AbsPath.of(cellFilesystem.getRootPath());,if (AbsPath != null ) AbsPath rootPath = AbsPath.of(cellFilesystem.getRootPath());
FixCommandHandler.java,Path repositoryRoot = filesystem.getRootPath();,if (filesystem != null ) Path repositoryRoot = filesystem.getRootPath();
OwnersReport.java,ProjectFilesystem rootCellFilesystem = rootCell.getFilesystem();,if (rootCell != null ) ProjectFilesystem rootCellFilesystem = rootCell.getFilesystem();
OwnersReport.java,Path rootPath = rootCellFilesystem.getRootPath();,if (rootCellFilesystem != null ) Path rootPath = rootCellFilesystem.getRootPath();
PathArguments.java,Path normalizedRoot = projectRoot.toRealPath();,if (projectRoot != null ) Path normalizedRoot = projectRoot.toRealPath();
Archive.java,Path rootPath = filesystem.getRootPath();,if (filesystem != null ) Path rootPath = filesystem.getRootPath();
AbstractReport.java,Path rootPath = filesystem.getRootPath();,if (filesystem != null ) Path rootPath = filesystem.getRootPath();
ProjectGenerator.java,basePath = projectFilesystem.getRootPath();,if (projectFilesystem != null ) basePath = projectFilesystem.getRootPath();
OcamlRuleBuilder.java,Path baseDir = projectFilesystem.getRootPath().toAbsolutePath();,if (projectFilesystem != null ) Path baseDir = projectFilesystem.getRootPath().toAbsolutePath();
RustCompileRule.java,Path root = filesystem.getRootPath();,if (filesystem != null ) Path root = filesystem.getRootPath();
AssembleDirectoriesTest.java,Path tmp = filesystem.getRootPath();,if (filesystem != null ) Path tmp = filesystem.getRootPath();
DexProducedFromJavaLibraryTest.java,Path root = filesystem.getRootPath();,if (filesystem != null ) Path root = filesystem.getRootPath();
DexProducedFromJavaLibraryThatContainsClassFilesTest.java,Path root = filesystem.getRootPath();,if (filesystem != null ) Path root = filesystem.getRootPath();
AppleToolchainIntegrationTest.java,Path rootPath = workspace.getProjectFileSystem().getRootPath();,if (workspace != null ) Path rootPath = workspace.getProjectFileSystem().getRootPath();
AppleToolchainIntegrationTest.java,Path rootPath = workspace.getProjectFileSystem().getRootPath();,if (workspace != null ) Path rootPath = workspace.getProjectFileSystem().getRootPath();
AppleToolchainIntegrationTest.java,Path rootPath = workspace.getProjectFileSystem().getRootPath();,if (workspace != null ) Path rootPath = workspace.getProjectFileSystem().getRootPath();
AuditClasspathCommandTest.java,Path root = projectFilesystem.getRootPath();,if (projectFilesystem != null ) Path root = projectFilesystem.getRootPath();
AuditClasspathCommandTest.java,Path root = projectFilesystem.getRootPath();,if (projectFilesystem != null ) Path root = projectFilesystem.getRootPath();
AuditClasspathCommandTest.java,Path root = projectFilesystem.getRootPath();,if (projectFilesystem != null ) Path root = projectFilesystem.getRootPath();
AuditClasspathCommandTest.java,Path root = projectFilesystem.getRootPath();,if (projectFilesystem != null ) Path root = projectFilesystem.getRootPath();
PathArgumentsTest.java,Path projectRoot = tmp.getRoot();,if (tmp != null ) Path projectRoot = tmp.getRoot();
TestRunningTest.java,Path rootPath = javaLibrary.getProjectFilesystem().getRootPath();,if (javaLibrary != null ) Path rootPath = javaLibrary.getProjectFilesystem().getRootPath();
UIMessagesFormatterTest.java,Path tempPath = temporaryFolder.newFolder().toPath();,if (temporaryFolder != null ) Path tempPath = temporaryFolder.newFolder().toPath();
CellMappingsFactoryTest.java,Path root = filesystem.getRootPath();,if (filesystem != null ) Path root = filesystem.getRootPath();
CellMappingsFactoryTest.java,Path root = filesystem.getRootPath();,if (filesystem != null ) Path root = filesystem.getRootPath();
CellMappingsFactoryTest.java,Path root = filesystem.getRootPath();,if (filesystem != null ) Path root = filesystem.getRootPath();
WatchmanBuildPackageComputationTest.java,ImmutableSet<Path> watchedProjects = ImmutableSet.of(filesystem.getRootPath());,if (ImmutableSet != null ) ImmutableSet<Path> watchedProjects = ImmutableSet.of(filesystem.getRootPath());
CxxBinaryIntegrationTest.java,Path basePath = filesystem.getRootPath().toRealPath();,if (filesystem != null ) Path basePath = filesystem.getRootPath().toRealPath();
CxxBinaryIntegrationTest.java,Path basePath = filesystem.getRootPath().toRealPath();,if (filesystem != null ) Path basePath = filesystem.getRootPath().toRealPath();
CxxBinaryIntegrationTest.java,Path basePath = filesystem.getRootPath().toRealPath();,if (filesystem != null ) Path basePath = filesystem.getRootPath().toRealPath();
CxxBinaryIntegrationTest.java,Path basePath = filesystem.getRootPath().toRealPath();,if (filesystem != null ) Path basePath = filesystem.getRootPath().toRealPath();
OCamlIntegrationTest.java,Config rawConfig = Configs.createDefaultConfig(filesystem.getRootPath());,if (Configs != null ) Config rawConfig = Configs.createDefaultConfig(filesystem.getRootPath());
DefaultJavaLibraryTest.java,Path root = libraryOneRule.getProjectFilesystem().getRootPath();,if (libraryOneRule != null ) Path root = libraryOneRule.getProjectFilesystem().getRootPath();
DefaultJavaLibraryTest.java,Path root = parent.getProjectFilesystem().getRootPath();,if (parent != null ) Path root = parent.getProjectFilesystem().getRootPath();
SourcePathTypeCoercerTest.java,Path rootPath = projectFilesystem.getRootPath();,if (projectFilesystem != null ) Path rootPath = projectFilesystem.getRootPath();
BuckFixSpecParserTest.java,BuckFixSpec spec = BuckFixSpecParser.parseFromFixSpecFile(fixSpecPath).getLeft();,if (BuckFixSpecParser != null ) BuckFixSpec spec = BuckFixSpecParser.parseFromFixSpecFile(fixSpecPath).getLeft();
UntarTest.java,Path outDir = filesystem.getRootPath();,if (filesystem != null ) Path outDir = filesystem.getRootPath();
TargetNodeMaybeIncompatible.java,ImmutableList<UnconfiguredBuildTargetView> compatibleWith = ImmutableList.of();,if (ImmutableList != null ) ImmutableList<UnconfiguredBuildTargetView> compatibleWith = ImmutableList.of();
ReflectionParamInfo.java,Type[] parameterTypes = setter.getGenericParameterTypes();,if (setter != null ) Type[] parameterTypes = setter.getGenericParameterTypes();
SkylarkParamInfoTest.java,Type listParamTypes = listInfo.getGenericParameterType();,if (listInfo != null ) Type listParamTypes = listInfo.getGenericParameterType();
SkylarkParamInfoTest.java,Type mapParamTypes = mapInfo.getGenericParameterType();,if (mapInfo != null ) Type mapParamTypes = mapInfo.getGenericParameterType();
ProjectGenerator.java,Path prefixHeaderRelative = resolveSourcePath(prefixHeaderOptional.get());,if (resolveSourcePath(prefixHeaderOptional != null ) Path prefixHeaderRelative = resolveSourcePath(prefixHeaderOptional.get());
DefaultProjectFilesystem.java,Path path = matcher.getPath();,if (matcher != null ) Path path = matcher.getPath();
CopyResourcesStep.java,relativeSymlinkPath = relativePathToResource.getFileName();,if (relativePathToResource != null ) relativeSymlinkPath = relativePathToResource.getFileName();
KnownUserDefinedRuleTypesTest.java,RuleType ruleType = knownRules.getRuleType(rule.getName());,if (knownRules != null ) RuleType ruleType = knownRules.getRuleType(rule.getName());
KnownUserDefinedRuleTypesTest.java,SkylarkUserDefinedRule rule = FakeSkylarkUserDefinedRuleFactory.createSimpleRule();,if (FakeSkylarkUserDefinedRuleFactory != null ) SkylarkUserDefinedRule rule = FakeSkylarkUserDefinedRuleFactory.createSimpleRule();
KnownUserDefinedRuleTypesTest.java,RuleType ruleType = knownRules.getRuleType(rule.getName());,if (knownRules != null ) RuleType ruleType = knownRules.getRuleType(rule.getName());
IjModuleGraphFactory.java,IjModule module = ruleAndModule.getValue();,if (ruleAndModule != null ) IjModule module = ruleAndModule.getValue();
CachingBuildEngine.java,CachingBuildRuleBuilder builder = value.get();,if (value != null ) CachingBuildRuleBuilder builder = value.get();
AbstractCommand.java,UnconfiguredBuildTargetView targetView = target.getUnconfiguredBuildTargetView();,if (target != null ) UnconfiguredBuildTargetView targetView = target.getUnconfiguredBuildTargetView();
AndroidLibraryDescription.java,ImmutableSortedSet<Flavor> flavors = buildTarget.getFlavors();,if (buildTarget != null ) ImmutableSortedSet<Flavor> flavors = buildTarget.getFlavors();
AndroidPrebuiltAarDescription.java,ImmutableSet<Flavor> flavors = buildTarget.getFlavors();,if (buildTarget != null ) ImmutableSet<Flavor> flavors = buildTarget.getFlavors();
AndroidResourceDescription.java,ImmutableSortedSet<Flavor> flavors = buildTarget.getFlavors();,if (buildTarget != null ) ImmutableSortedSet<Flavor> flavors = buildTarget.getFlavors();
AppleBinaryDescription.java,ImmutableSortedSet<Flavor> flavors = buildTarget.getFlavors();,if (buildTarget != null ) ImmutableSortedSet<Flavor> flavors = buildTarget.getFlavors();
AppleDescriptions.java,ImmutableSet<Flavor> flavors = buildTarget.getFlavors();,if (buildTarget != null ) ImmutableSet<Flavor> flavors = buildTarget.getFlavors();
AppleLibraryDescription.java,SortedSet<Flavor> flavors = node.getBuildTarget().getFlavors();,if (node != null ) SortedSet<Flavor> flavors = node.getBuildTarget().getFlavors();
CxxBinaryFactory.java,ImmutableSet<Flavor> flavors = ImmutableSet.copyOf(target.getFlavors());,if (ImmutableSet != null ) ImmutableSet<Flavor> flavors = ImmutableSet.copyOf(target.getFlavors());
CxxLibraryDescription.java,Set<Flavor> flavors = Sets.newHashSet(buildTarget.getFlavors());,if (Sets != null ) Set<Flavor> flavors = Sets.newHashSet(buildTarget.getFlavors());
HalideLibraryDescription.java,ImmutableSet<Flavor> flavors = ImmutableSet.copyOf(buildTarget.getFlavors());,if (ImmutableSet != null ) ImmutableSet<Flavor> flavors = ImmutableSet.copyOf(buildTarget.getFlavors());
JsBundle.java,ImmutableSortedSet<Flavor> flavors = getBuildTarget().getFlavors();,if (getBuildTarget() != null ) ImmutableSortedSet<Flavor> flavors = getBuildTarget().getFlavors();
JsBundleDescription.java,ImmutableSortedSet<Flavor> flavors = buildTarget.getFlavors();,if (buildTarget != null ) ImmutableSortedSet<Flavor> flavors = buildTarget.getFlavors();
JsBundleDescription.java,ImmutableSortedSet<Flavor> bundleFlavors = bundleTarget.getFlavors();,if (bundleTarget != null ) ImmutableSortedSet<Flavor> bundleFlavors = bundleTarget.getFlavors();
JsBundleGenruleDescription.java,ImmutableSortedSet<Flavor> flavors = buildTarget.getFlavors();,if (buildTarget != null ) ImmutableSortedSet<Flavor> flavors = buildTarget.getFlavors();
JsDependenciesFile.java,ImmutableSortedSet<Flavor> flavors = getBuildTarget().getFlavors();,if (getBuildTarget() != null ) ImmutableSortedSet<Flavor> flavors = getBuildTarget().getFlavors();
JsLibrary.java,ImmutableSortedSet<Flavor> flavors = buildTarget.getFlavors();,if (buildTarget != null ) ImmutableSortedSet<Flavor> flavors = buildTarget.getFlavors();
JsLibrary.java,ImmutableSortedSet<Flavor> flavors = buildTarget.getFlavors();,if (buildTarget != null ) ImmutableSortedSet<Flavor> flavors = buildTarget.getFlavors();
JavaLibraryDescription.java,ImmutableSortedSet<Flavor> flavors = buildTarget.getFlavors();,if (buildTarget != null ) ImmutableSortedSet<Flavor> flavors = buildTarget.getFlavors();
KotlinLibraryDescription.java,ImmutableSortedSet<Flavor> flavors = buildTarget.getFlavors();,if (buildTarget != null ) ImmutableSortedSet<Flavor> flavors = buildTarget.getFlavors();
ScalaLibraryDescription.java,ImmutableSortedSet<Flavor> flavors = buildTarget.getFlavors();,if (buildTarget != null ) ImmutableSortedSet<Flavor> flavors = buildTarget.getFlavors();
SwiftLibraryDescription.java,ImmutableSortedSet<Flavor> buildFlavors = buildTarget.getFlavors();,if (buildTarget != null ) ImmutableSortedSet<Flavor> buildFlavors = buildTarget.getFlavors();
SwiftLibraryDescription.java,Set<Flavor> flavors = Sets.newHashSet(buildTarget.getFlavors());,if (Sets != null ) Set<Flavor> flavors = Sets.newHashSet(buildTarget.getFlavors());
WindowsClangCxxIntegrationTest.java,BuckBuildLog buildLog = workspace.getBuildLog();,if (workspace != null ) BuckBuildLog buildLog = workspace.getBuildLog();
DefaultConstructorArgMarshaller.java,coercer = argumentInfo.getTypeCoercer();,if (argumentInfo != null ) coercer = argumentInfo.getTypeCoercer();
SelectorListCoercerTest.java,List<Object> traversedObjects = Lists.newArrayList();,if (Lists != null ) List<Object> traversedObjects = Lists.newArrayList();
SkylarkParamInfoTest.java,Type[] listParamTypes = listInfo.getGenericParameterTypes();,if (listInfo != null ) Type[] listParamTypes = listInfo.getGenericParameterTypes();
SkylarkParamInfoTest.java,Type[] mapParamTypes = mapInfo.getGenericParameterTypes();,if (mapInfo != null ) Type[] mapParamTypes = mapInfo.getGenericParameterTypes();
ParserWithConfigurableAttributes.java,BuildRuleArg argWithTargetCompatible = (BuildRuleArg) targetNode.getConstructorArg();,if (targetNode != null ) BuildRuleArg argWithTargetCompatible = (BuildRuleArg) targetNode.getConstructorArg();
TargetCompatibilityChecker.java,ConstraintResolver constraintResolver = configurationRuleRegistry.getConstraintResolver();,if (configurationRuleRegistry != null ) ConstraintResolver constraintResolver = configurationRuleRegistry.getConstraintResolver();
UnconfiguredTargetNodeToTargetNodeParsePipeline.java,UnconfiguredBuildTarget unconfiguredTarget = from.getBuildTarget();,if (from != null ) UnconfiguredBuildTarget unconfiguredTarget = from.getBuildTarget();
CachingProjectBuildFileParserDecorator.java,Optional<BuildFileManifest> buildFileManifestFromCache = Optional.empty();,if (Optional != null ) Optional<BuildFileManifest> buildFileManifestFromCache = Optional.empty();
HybridCacheStorage.java,timer = Stopwatch.createStarted();,if (Stopwatch != null ) timer = Stopwatch.createStarted();
HybridCacheStorage.java,timer = Stopwatch.createStarted();,if (Stopwatch != null ) timer = Stopwatch.createStarted();
LocalCacheStorage.java,Path localCachePath = parserCacheConfig.getDirCacheLocation().get();,if (parserCacheConfig != null ) Path localCachePath = parserCacheConfig.getDirCacheLocation().get();
LocalCacheStorage.java,timer = Stopwatch.createStarted();,if (Stopwatch != null ) timer = Stopwatch.createStarted();
LocalCacheStorage.java,Path weakFingerprintCachePath = localCachePath.resolve(weakFingerprint.toString());,if (localCachePath != null ) Path weakFingerprintCachePath = localCachePath.resolve(weakFingerprint.toString());
LocalCacheStorage.java,timer = Stopwatch.createStarted();,if (Stopwatch != null ) timer = Stopwatch.createStarted();
LocalCacheStorage.java,Path weakFingerprintCachePath = localCachePath.resolve(weakFingerprint.toString());,if (localCachePath != null ) Path weakFingerprintCachePath = localCachePath.resolve(weakFingerprint.toString());
ParserCacheConfig.java,result = ParserCacheAccessMode.valueOf(cacheMode.toUpperCase());,if (ParserCacheAccessMode != null ) result = ParserCacheAccessMode.valueOf(cacheMode.toUpperCase());
ParserCacheConfig.java,ProjectFilesystem filesystem = getDelegate().getFilesystem();,if (getDelegate() != null ) ProjectFilesystem filesystem = getDelegate().getFilesystem();
CachingProjectBuildFileParserDecoratorTest.java,FakeBuckConfig.Builder builder = FakeBuckConfig.builder();,if (FakeBuckConfig != null ) FakeBuckConfig.Builder builder = FakeBuckConfig.builder();
CachingProjectBuildFileParserDecoratorTest.java,filesystem = FakeProjectFilesystem.createRealTempFilesystem();,if (FakeProjectFilesystem != null ) filesystem = FakeProjectFilesystem.createRealTempFilesystem();
CachingProjectBuildFileParserDecoratorTest.java,BuckConfig emptyBuckConfig = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig emptyBuckConfig = FakeBuckConfig.builder().build();
FingerprinterTest.java,Config config = getConfigForTest().getConfig();,if (getConfigForTest() != null ) Config config = getConfigForTest().getConfig();
FingerprinterTest.java,HashCode expectedHash = hasher.hash();,if (hasher != null ) HashCode expectedHash = hasher.hash();
HybridCacheStorageTest.java,eventBus = BuckEventBusForTests.newInstance();,if (BuckEventBusForTests != null ) eventBus = BuckEventBusForTests.newInstance();
LocalCacheStorageTest.java,FakeBuckConfig.Builder builder = FakeBuckConfig.builder();,if (FakeBuckConfig != null ) FakeBuckConfig.Builder builder = FakeBuckConfig.builder();
LocalCacheStorageTest.java,ImmutableList<GlobSpecWithResult> globSpecMap = globSpecBuilder.build();,if (globSpecBuilder != null ) ImmutableList<GlobSpecWithResult> globSpecMap = globSpecBuilder.build();
ParserCacheTest.java,ImmutableList<GlobSpecWithResult> globSpecs = globSpecsBuilder.build();,if (globSpecsBuilder != null ) ImmutableList<GlobSpecWithResult> globSpecs = globSpecsBuilder.build();
StreamingWebSocketServlet.java,this.connections = Collections.newSetFromMap(Maps.newConcurrentMap());,if (Collections != null ) this.connections = Collections.newSetFromMap(Maps.newConcurrentMap());
StreamingWebSocketServlet.java,subscribedEvents = Sets.newHashSet();,if (Sets != null ) subscribedEvents = Sets.newHashSet();
Cells.java,Path cellRoot = getRootCell().getRoot();,if (getRootCell() != null ) Path cellRoot = getRootCell().getRoot();
Cells.java,Path path = cellRoot.getRoot();,if (cellRoot != null ) Path path = cellRoot.getRoot();
DaemonicCellState.java,this.cellRoot = AbsPath.of(cell.getRoot());,if (AbsPath != null ) this.cellRoot = AbsPath.of(cell.getRoot());
PackagePipeline.java,AbsPath cellRoot = AbsPath.of(cell.getRoot());,if (AbsPath != null ) AbsPath cellRoot = AbsPath.of(cell.getRoot());
ModernBuildRuleRemoteExecutionHelper.java,this.projectRoot = cellPathPrefix.relativize(rootCell.getRoot());,if (cellPathPrefix != null ) this.projectRoot = cellPathPrefix.relativize(rootCell.getRoot());
ManifestRuleKeyServiceImpl.java,path = file.get();,if (file != null ) path = file.get();
RemoteManifestServiceCacheStorage.java,this.cacheAccessMode = parserConfig.getRemoteCacheAccessMode();,if (parserConfig != null ) this.cacheAccessMode = parserConfig.getRemoteCacheAccessMode();
RemoteManifestServiceCacheStorage.java,Stopwatch timer = Stopwatch.createStarted();,if (Stopwatch != null ) Stopwatch timer = Stopwatch.createStarted();
RemoteManifestServiceCacheStorage.java,Stopwatch timer = Stopwatch.createStarted();,if (Stopwatch != null ) Stopwatch timer = Stopwatch.createStarted();
ManifestRuleKeyServiceFactoryTest.java,Capture<Manifest> manifestCapture = EasyMock.newCapture();,if (EasyMock != null ) Capture<Manifest> manifestCapture = EasyMock.newCapture();
ManifestRuleKeyServiceFactoryTest.java,Path artifactPath = getArtifactPath().getUnchecked();,if (getArtifactPath() != null ) Path artifactPath = getArtifactPath().getUnchecked();
ManifestRuleKeyServiceFactoryTest.java,Manifest manifest = manifestCapture.getValue();,if (manifestCapture != null ) Manifest manifest = manifestCapture.getValue();
ManifestRuleKeyServiceFactoryTest.java,Path artifactPath = getArtifactPath().getUnchecked();,if (getArtifactPath() != null ) Path artifactPath = getArtifactPath().getUnchecked();
ManifestRuleKeyServiceFactoryTest.java,Path artifactPath = getArtifactPath().getUnchecked();,if (getArtifactPath() != null ) Path artifactPath = getArtifactPath().getUnchecked();
ThriftManifestServiceTest.java,"service = new ThriftManifestService(innerServiceFake, MoreExecutors.newDirectExecutorService());","if (MoreExecutors != null ) service = new ThriftManifestService(innerServiceFake, MoreExecutors.newDirectExecutorService());"
FakeManifestService.java,storedValues = ImmutableList.of();,if (ImmutableList != null ) storedValues = ImmutableList.of();
HybridCacheStorageTest.java,Clock fakeClock = FakeClock.doNotCare();,if (FakeClock != null ) Clock fakeClock = FakeClock.doNotCare();
HybridCacheStorageTest.java,ImmutableList<GlobSpecWithResult> globSpecs = globSpecsBuilder.build();,if (globSpecsBuilder != null ) ImmutableList<GlobSpecWithResult> globSpecs = globSpecsBuilder.build();
ParserCacheTest.java,storedValues = ImmutableList.of();,if (ImmutableList != null ) storedValues = ImmutableList.of();
RemoteManifestServiceCacheStorageTest.java,storedValues = ImmutableList.of();,if (ImmutableList != null ) storedValues = ImmutableList.of();
RemoteManifestServiceCacheStorageTest.java,eventBus = BuckEventBusForTests.newInstance();,if (BuckEventBusForTests != null ) eventBus = BuckEventBusForTests.newInstance();
RemoteManifestServiceCacheStorageTest.java,ImmutableList<GlobSpecWithResult> globSpecs = globSpecsBuilder.build();,if (globSpecsBuilder != null ) ImmutableList<GlobSpecWithResult> globSpecs = globSpecsBuilder.build();
WebServerBuckEventListener.java,this.streamingWebSocketServlet = webServer.getStreamingWebSocketServlet();,if (webServer != null ) this.streamingWebSocketServlet = webServer.getStreamingWebSocketServlet();
BuckQueryEnvironment.java,Path rootPath = cellFilesystem.getRootPath();,if (cellFilesystem != null ) Path rootPath = cellFilesystem.getRootPath();
FilesystemBackedBuildFileTree.java,Path parent = folderPath.getParent();,if (folderPath != null ) Path parent = folderPath.getParent();
GenruleBuildable.java,OutputLabel outputLabel = OutputLabel.of(outputLabelToOutputs.getKey());,if (OutputLabel != null ) OutputLabel outputLabel = OutputLabel.of(outputLabelToOutputs.getKey());
DaemonicCellState.java,this.cellRoot = cell.getRoot();,if (cell != null ) this.cellRoot = cell.getRoot();
PackagePipeline.java,Path cellRoot = cell.getRoot();,if (cell != null ) Path cellRoot = cell.getRoot();
DirectoryListCache.java,Path folderPath = MorePaths.getParentOrEmpty(event.getPath());,if (MorePaths != null ) Path folderPath = MorePaths.getParentOrEmpty(event.getPath());
FileTreeCache.java,Path folderPath = MorePaths.getParentOrEmpty(event.getPath());,if (MorePaths != null ) Path folderPath = MorePaths.getParentOrEmpty(event.getPath());
DaemonicParserState.java,Path path = event.getPath();,if (event != null ) Path path = event.getPath();
PythonDslProjectBuildFileParser.java,Path cellPath = options.getProjectRoot().toAbsolutePath();,if (options != null ) Path cellPath = options.getProjectRoot().toAbsolutePath();
BuildFileManifestCache.java,Path eventPath = event.getPath();,if (event != null ) Path eventPath = event.getPath();
BuildFileManifestCache.java,Path packagePath = MorePaths.getParentOrEmpty(event.getPath());,if (MorePaths != null ) Path packagePath = MorePaths.getParentOrEmpty(event.getPath());
BuildFileManifestCache.java,Path packagePath = MorePaths.getParentOrEmpty(event.getPath());,if (MorePaths != null ) Path packagePath = MorePaths.getParentOrEmpty(event.getPath());
RuleKeyCacheRecycler.java,Path path = event.getPath().normalize();,if (event != null ) Path path = event.getPath().normalize();
WatchedFileHashCache.java,Path path = event.getPath().normalize();,if (event != null ) Path path = event.getPath().normalize();
WatchmanWatcherIntegrationTest.java,Path eventPath = event.getPath();,if (event != null ) Path eventPath = event.getPath();
LocalCellProviderFactory.java,Path normalizedCellPath = cellPath.toRealPath().normalize();,if (cellPath != null ) Path normalizedCellPath = cellPath.toRealPath().normalize();
IjProjectCommandHelper.java,Path outputPath = Paths.get(outputDir).toAbsolutePath();,if (Paths != null ) Path outputPath = Paths.get(outputDir).toAbsolutePath();
IsolatedBuildableBuilder.java,Path canonicalWorkRoot = workRoot.toRealPath().normalize();,if (workRoot != null ) Path canonicalWorkRoot = workRoot.toRealPath().normalize();
IsolatedBuildableBuilder.java,Path canonicalProjectRoot = canonicalWorkRoot.resolve(projectRoot).normalize();,if (canonicalWorkRoot != null ) Path canonicalProjectRoot = canonicalWorkRoot.resolve(projectRoot).normalize();
Cell.java,Path path = cellRoot.getRoot();,if (cellRoot != null ) Path path = cellRoot.getRoot();
BuildPackagePathToUnconfiguredTargetNodePackageComputation.java,this.superRootPath = cell.getSuperRootPath();,if (cell != null ) this.superRootPath = cell.getSuperRootPath();
BuckGlobalStateFactory.java,"webServer = createWebServer(rootCell.getBuckConfig(), rootCell.getFilesystem());","if (rootCell != null ) webServer = createWebServer(rootCell.getBuckConfig(), rootCell.getFilesystem());"
BuildTargetRawNodeParsePipeline.java,UnconfiguredBuildTargetView targetWithoutFlavors = expectedTarget.withoutFlavors();,if (expectedTarget != null ) UnconfiguredBuildTargetView targetWithoutFlavors = expectedTarget.withoutFlavors();
BuildTargetRawNodeParsePipeline.java,String expectedShortName = expectedTarget.getShortName();,if (expectedTarget != null ) String expectedShortName = expectedTarget.getShortName();
DefaultUnconfiguredTargetNodeFactory.java,String visibilityDefinerDescription = target.getData().getFullyQualifiedName();,if (target != null ) String visibilityDefinerDescription = target.getData().getFullyQualifiedName();
MainRunner.java,Path canonicalRootPath = projectRoot.toRealPath().normalize();,if (projectRoot != null ) Path canonicalRootPath = projectRoot.toRealPath().normalize();
LocalFallbackStrategy.java,this.executedActionMetadata = Optional.empty();,if (Optional != null ) this.executedActionMetadata = Optional.empty();
LocalFallbackStrategy.java,executedActionMetadata = exc.getExecutedActionMetadata();,if (exc != null ) executedActionMetadata = exc.getExecutedActionMetadata();
StepFailedException.java,this.executedActionMetadata = Optional.empty();,if (Optional != null ) this.executedActionMetadata = Optional.empty();
GenruleBuildable.java,this.outputPaths = Optional.of(mapBuilder.build());,if (Optional != null ) this.outputPaths = Optional.of(mapBuilder.build());
GenruleBuildable.java,ImmutableSet<OutputLabel> outputLabels = outputPaths.get().keySet();,if (outputPaths != null ) ImmutableSet<OutputLabel> outputLabels = outputPaths.get().keySet();
PreDexSplitDexMerge.java,primaryDexInputSize += partialDex.getPrimaryDexInputMetadata().getWeight();,if (partialDex != null ) primaryDexInputSize += partialDex.getPrimaryDexInputMetadata().getWeight();
PreDexSplitDexMerge.java,long dexWeightLimit = dexSplitMode.getLinearAllocHardLimit();,if (dexSplitMode != null ) long dexWeightLimit = dexSplitMode.getLinearAllocHardLimit();
SmartDexingStep.java,Path secondaryCompressedBlobOutput = entry.getKey();,if (entry != null ) Path secondaryCompressedBlobOutput = entry.getKey();
SmartDexingStep.java,Collection<Path> secondaryDexJars = entry.getValue();,if (entry != null ) Collection<Path> secondaryDexJars = entry.getValue();
OwnersReport.java,Set<Path> ruleInputs = targetNode.getInputs();,if (targetNode != null ) Set<Path> ruleInputs = targetNode.getInputs();
MissingPathsChecker.java,Set<Path> checkedPaths = pathsCache.getUnchecked(projectFilesystem.getRootPath());,if (pathsCache != null ) Set<Path> checkedPaths = pathsCache.getUnchecked(projectFilesystem.getRootPath());
TargetNodeFactory.java,ImmutableSet<Path> paths = pathsBuilder.build();,if (pathsBuilder != null ) ImmutableSet<Path> paths = pathsBuilder.build();
PerBuildStateFactory.java,Cell rootCell = parsingContext.getCell();,if (parsingContext != null ) Cell rootCell = parsingContext.getCell();
ParsePipelineTest.java,Cell cell = fixture.getCell();,if (fixture != null ) Cell cell = fixture.getCell();
ParsePipelineTest.java,Cell cell = fixture.getCell();,if (fixture != null ) Cell cell = fixture.getCell();
ParsePipelineTest.java,Cell cell = fixture.getCell();,if (fixture != null ) Cell cell = fixture.getCell();
ParsePipelineTest.java,Cell cell = fixture.getCell();,if (fixture != null ) Cell cell = fixture.getCell();
ParsePipelineTest.java,Cell cell = fixture.getCell();,if (fixture != null ) Cell cell = fixture.getCell();
ParsePipelineTest.java,Cell cell = fixture.getCell();,if (fixture != null ) Cell cell = fixture.getCell();
ParsePipelineTest.java,Cell cell = fixture.getCell();,if (fixture != null ) Cell cell = fixture.getCell();
ParsePipelineTest.java,Cell cell = fixture.getCell();,if (fixture != null ) Cell cell = fixture.getCell();
ParsePipelineTest.java,Cell cell = fixture.getCell();,if (fixture != null ) Cell cell = fixture.getCell();
ParsePipelineTest.java,Cell cell = fixture.getCell();,if (fixture != null ) Cell cell = fixture.getCell();
ParsePipelineTest.java,Cell cell = fixture.getCell();,if (fixture != null ) Cell cell = fixture.getCell();
ParsePipelineTest.java,Cell cell = fixture.getCell();,if (fixture != null ) Cell cell = fixture.getCell();
ParsePipelineTest.java,this.cell = this.workspace.asCell();,if (this != null ) this.cell = this.workspace.asCell();
GoProjectCommandHelper.java,this.cell = params.getCells().getRootCell();,if (params != null ) this.cell = params.getCells().getRootCell();
GoProjectCommandHelper.java,ProjectFilesystem projectFilesystem = cell.getFilesystem();,if (cell != null ) ProjectFilesystem projectFilesystem = cell.getFilesystem();
TargetNodeTranslator.java,CellNameResolver cellPathResolver = node.getCellNames().getCellNameResolver();,if (node != null ) CellNameResolver cellPathResolver = node.getCellNames().getCellNameResolver();
AbstractQueryCommand.java,Cell cell = params.getCell();,if (params != null ) Cell cell = params.getCell();
AuditCellCommand.java,CellNameResolver rootCellNameResolver = params.getCell().getCellNameResolver();,if (params != null ) CellNameResolver rootCellNameResolver = params.getCell().getCellNameResolver();
AuditCellCommand.java,NewCellPathResolver pathResolver = params.getCell().getNewCellPathResolver();,if (params != null ) NewCellPathResolver pathResolver = params.getCell().getNewCellPathResolver();
AuditConfigCommand.java,Cell rootCell = params.getCell();,if (params != null ) Cell rootCell = params.getCell();
AuditConfigCommand.java,BuckConfig buckConfig = rootCell.getBuckConfig();,if (rootCell != null ) BuckConfig buckConfig = rootCell.getBuckConfig();
AuditConfigCommand.java,"BuckConfig buckConfig = getCellBuckConfig(rootCell, arg.getCellName());","if (arg != null ) BuckConfig buckConfig = getCellBuckConfig(rootCell, arg.getCellName());"
AuditIncludesCommand.java,ProjectFilesystem projectFilesystem = params.getCell().getFilesystem();,if (params != null ) ProjectFilesystem projectFilesystem = params.getCell().getFilesystem();
AuditRulesCommand.java,ProjectFilesystem projectFilesystem = params.getCell().getFilesystem();,if (params != null ) ProjectFilesystem projectFilesystem = params.getCell().getFilesystem();
BuildCommand.java,ProjectFilesystem filesystem = params.getCell().getFilesystem();,if (params != null ) ProjectFilesystem filesystem = params.getCell().getFilesystem();
BuildCommand.java,ProjectFilesystem projectFilesystem = params.getCell().getFilesystem();,if (params != null ) ProjectFilesystem projectFilesystem = params.getCell().getFilesystem();
DoctorCommand.java,ProjectFilesystem filesystem = params.getCell().getFilesystem();,if (params != null ) ProjectFilesystem filesystem = params.getCell().getFilesystem();
InstallCommand.java,this.root = params.getCell();,if (params != null ) this.root = params.getCell();
PerfMbrPrepareRemoteExecutionCommand.java,Cell rootCell = params.getCell();,if (params != null ) Cell rootCell = params.getCell();
PerfMbrSerializationCommand.java,Cell rootCell = params.getCell();,if (params != null ) Cell rootCell = params.getCell();
GoProjectCommandHelper.java,this.cell = params.getCell();,if (params != null ) this.cell = params.getCell();
CommandRunnerParamsForTesting.java,Cell cell = cellBuilder.build();,if (cellBuilder != null ) Cell cell = cellBuilder.build();
BuildReportTest.java,rootCell = new TestCellBuilder().build();,if (TestCellBuilder() != null ) rootCell = new TestCellBuilder().build();
CellTest.java,Cell cell = new TestCellBuilder().build();,if (TestCellBuilder() != null ) Cell cell = new TestCellBuilder().build();
CellTest.java,Cell cell = new TestCellBuilder().build();,if (TestCellBuilder() != null ) Cell cell = new TestCellBuilder().build();
CellTest.java,ProjectFilesystemView view = cell.getFilesystemViewForSourceFiles();,if (cell != null ) ProjectFilesystemView view = cell.getFilesystemViewForSourceFiles();
CellTest.java,ProjectFilesystemView view = cell.getFilesystemViewForSourceFiles();,if (cell != null ) ProjectFilesystemView view = cell.getFilesystemViewForSourceFiles();
ProjectGeneratorTest.java,projectFilesystem = projectCell.getFilesystem();,if (projectCell != null ) projectFilesystem = projectCell.getFilesystem();
WorkspaceAndProjectGeneratorTest.java,rootCell = (new TestCellBuilder()).build();,if (TestCellBuilder()) != null ) rootCell = (new TestCellBuilder()).build();
WorkspaceAndProjectGeneratorTest.java,rootCell = (new TestCellBuilder()).build();,if (TestCellBuilder()) != null ) rootCell = (new TestCellBuilder()).build();
WorkspaceAndProjectGeneratorTest.java,ProjectFilesystem projectFilesystem = rootCell.getFilesystem();,if (rootCell != null ) ProjectFilesystem projectFilesystem = rootCell.getFilesystem();
XcodeNativeTargetGeneratorTest.java,rootCell = (new TestCellBuilder()).build();,if (TestCellBuilder()) != null ) rootCell = (new TestCellBuilder()).build();
PackageFactoryTest.java,private Cell cell = new TestCellBuilder().build();,if (TestCellBuilder() != null ) private Cell cell = new TestCellBuilder().build();
ProjectBuildFileParserPoolTest.java,Cell cell = new TestCellBuilder().build();,if (TestCellBuilder() != null ) Cell cell = new TestCellBuilder().build();
ProjectBuildFileParserPoolTest.java,Cell cell = new TestCellBuilder().build();,if (TestCellBuilder() != null ) Cell cell = new TestCellBuilder().build();
ProjectBuildFileParserPoolTest.java,Cell cell = new TestCellBuilder().build();,if (TestCellBuilder() != null ) Cell cell = new TestCellBuilder().build();
ProjectBuildFileParserPoolTest.java,Cell cell = new TestCellBuilder().build();,if (TestCellBuilder() != null ) Cell cell = new TestCellBuilder().build();
ProjectBuildFileParserPoolTest.java,Cell cell = new TestCellBuilder().build();,if (TestCellBuilder() != null ) Cell cell = new TestCellBuilder().build();
ProjectBuildFileParserPoolTest.java,Cell cell = new TestCellBuilder().build();,if (TestCellBuilder() != null ) Cell cell = new TestCellBuilder().build();
BuildPackagePathToUnconfiguredTargetNodePackageComputationTest.java,Cell cell = new TestCellBuilder().build();,if (TestCellBuilder() != null ) Cell cell = new TestCellBuilder().build();
UnconfiguredTargetNodeToUnconfiguredTargetNodeWithDepsComputationTest.java,Cell cell = new TestCellBuilder().build();,if (TestCellBuilder() != null ) Cell cell = new TestCellBuilder().build();
PythonUtil.java,NativeLinkableGroup.Linkage linkage = nativeLinkable.getPreferredLinkage();,if (nativeLinkable != null ) NativeLinkableGroup.Linkage linkage = nativeLinkable.getPreferredLinkage();
TargetNodeTranslator.java,CellPathResolver cellPathResolver = node.getCellNames();,if (node != null ) CellPathResolver cellPathResolver = node.getCellNames();
BuildTargetParser.java,CellNameResolver cellNameResolver = legacyCellPathResolver.getCellNameResolver();,if (legacyCellPathResolver != null ) CellNameResolver cellNameResolver = legacyCellPathResolver.getCellNameResolver();
PythonTestDescriptionTest.java,TargetGraph targetGraph = TargetGraphFactory.newInstance(builder.build());,if (TargetGraphFactory != null ) TargetGraph targetGraph = TargetGraphFactory.newInstance(builder.build());
BuildTargetMatcherParser.java,cellPath = cellNames.getCellPathOrThrow(Optional.empty());,if (cellNames != null ) cellPath = cellNames.getCellPathOrThrow(Optional.empty());
TargetSpecResolver.java,ProjectFilesystemView fileSystemView = cell.getFilesystemViewForSourceFiles();,if (cell != null ) ProjectFilesystemView fileSystemView = cell.getFilesystemViewForSourceFiles();
QueryTargetsMacroExpanderTest.java,expander = new QueryTargetsMacroExpander(Optional.empty());,if (QueryTargetsMacroExpander(Optional != null ) expander = new QueryTargetsMacroExpander(Optional.empty());
BuildTargetFactory.java,ImmutableCanonicalCellName cellName = ImmutableCanonicalCellName.of(arg.getCellName());,if (ImmutableCanonicalCellName != null ) ImmutableCanonicalCellName cellName = ImmutableCanonicalCellName.of(arg.getCellName());
UnconfiguredBuildTargetFactoryForTests.java,ImmutableCanonicalCellName cellName = ImmutableCanonicalCellName.of(arg.getCellName());,if (ImmutableCanonicalCellName != null ) ImmutableCanonicalCellName cellName = ImmutableCanonicalCellName.of(arg.getCellName());
HybridCacheStorageTest.java,Clock fakeClock = AbstractFakeClock.doNotCare();,if (AbstractFakeClock != null ) Clock fakeClock = AbstractFakeClock.doNotCare();
AppleDeviceController.java,ImmutableSet<ImmutableAppleDevice> simulators = deviceController.getSimulators();,if (deviceController != null ) ImmutableSet<ImmutableAppleDevice> simulators = deviceController.getSimulators();
InstallCommand.java,ImmutableSet<ImmutableAppleDevice> physicalDevices = appleDeviceController.getPhysicalDevices();,if (appleDeviceController != null ) ImmutableSet<ImmutableAppleDevice> physicalDevices = appleDeviceController.getPhysicalDevices();
InstallCommand.java,Optional<ImmutableAppleDevice> simulatorByUdid = Optional.empty();,if (Optional != null ) Optional<ImmutableAppleDevice> simulatorByUdid = Optional.empty();
InstallCommand.java,Optional<ImmutableAppleDevice> simulatorByName = Optional.empty();,if (Optional != null ) Optional<ImmutableAppleDevice> simulatorByName = Optional.empty();
InstallCommand.java,Optional<ImmutableAppleDevice> bootedSimulator = Optional.empty();,if (Optional != null ) Optional<ImmutableAppleDevice> bootedSimulator = Optional.empty();
InstallCommand.java,Optional<ImmutableAppleDevice> defaultSimulator = Optional.empty();,if (Optional != null ) Optional<ImmutableAppleDevice> defaultSimulator = Optional.empty();
SkylarkPackageFileParser.java,ImmutablePackageMetadata pkg = context.getPackage();,if (context != null ) ImmutablePackageMetadata pkg = context.getPackage();
GenruleDescription.java,executeRemotely = reConfig.shouldUseRemoteExecutionForGenruleIfRequested();,if (reConfig != null ) executeRemotely = reConfig.shouldUseRemoteExecutionForGenruleIfRequested();
Genrule.java,ImmutableSortedSet<SourcePath> sourcePaths = getSourcePathToOutput(OutputLabel.defaultLabel());,if (getSourcePathToOutput(OutputLabel != null ) ImmutableSortedSet<SourcePath> sourcePaths = getSourcePathToOutput(OutputLabel.defaultLabel());
LegacyGenrule.java,this.isWorkerGenrule = this.isWorkerGenrule();,if (this != null ) this.isWorkerGenrule = this.isWorkerGenrule();
LegacyGenrule.java,AndroidSdkLocation androidSdkLocation = tools.getAndroidSdkLocation();,if (tools != null ) AndroidSdkLocation androidSdkLocation = tools.getAndroidSdkLocation();
LegacyGenrule.java,Optional<AndroidNdk> androidNdk = tools.getAndroidNdk();,if (tools != null ) Optional<AndroidNdk> androidNdk = tools.getAndroidNdk();
LegacyGenrule.java,AndroidPlatformTarget androidPlatformTarget = tools.getAndroidPlatformTarget();,if (tools != null ) AndroidPlatformTarget androidPlatformTarget = tools.getAndroidPlatformTarget();
LegacyGenrule.java,TargetConfiguration targetConfiguration = getBuildTarget().getTargetConfiguration();,if (getBuildTarget() != null ) TargetConfiguration targetConfiguration = getBuildTarget().getTargetConfiguration();
LegacyGenrule.java,SourcePathResolverAdapter sourcePathResolverAdapter = context.getSourcePathResolver();,if (context != null ) SourcePathResolverAdapter sourcePathResolverAdapter = context.getSourcePathResolver();
LegacyGenrule.java,SandboxProperties.Builder builder = SandboxProperties.builder();,if (SandboxProperties != null ) SandboxProperties.Builder builder = SandboxProperties.builder();
LegacyGenrule.java,SourcePath inputPath = buildRule.getSourcePathToOutput();,if (buildRule != null ) SourcePath inputPath = buildRule.getSourcePathToOutput();
LegacyGenrule.java,Path canonicalPath = absolutePath.normalize();,if (absolutePath != null ) Path canonicalPath = absolutePath.normalize();
LegacyGenrule.java,localPath = canonicalPath.getFileName();,if (canonicalPath != null ) localPath = canonicalPath.getFileName();
JsBundleGenrule.java,this.jsBundleSourcePath = jsBundle.getSourcePathToOutput();,if (jsBundle != null ) this.jsBundleSourcePath = jsBundle.getSourcePathToOutput();
JsBundleGenrule.java,this.rewriteSourcemap = args.getRewriteSourcemap();,if (args != null ) this.rewriteSourcemap = args.getRewriteSourcemap();
JsBundleGenrule.java,this.rewriteMisc = args.getRewriteMisc();,if (args != null ) this.rewriteMisc = args.getRewriteMisc();
JsBundleGenrule.java,this.rewriteDepsFile = args.getRewriteDepsFile();,if (args != null ) this.rewriteDepsFile = args.getRewriteDepsFile();
JsBundleGenrule.java,this.skipResources = args.getSkipResources();,if (args != null ) this.skipResources = args.getSkipResources();
JsBundleGenrule.java,SourcePathResolverAdapter sourcePathResolverAdapter = context.getSourcePathResolver();,if (context != null ) SourcePathResolverAdapter sourcePathResolverAdapter = context.getSourcePathResolver();
CxxSymlinkTreeHeaders.java,CxxSymlinkTreeHeaders.Builder builder = CxxSymlinkTreeHeaders.builder();,if (CxxSymlinkTreeHeaders != null ) CxxSymlinkTreeHeaders.Builder builder = CxxSymlinkTreeHeaders.builder();
CxxSymlinkTreeHeaders.java,Builder builder = CxxSymlinkTreeHeaders.builder();,if (CxxSymlinkTreeHeaders != null ) Builder builder = CxxSymlinkTreeHeaders.builder();
Omnibus.java,OmnibusLibraries.Builder libs = OmnibusLibraries.builder();,if (OmnibusLibraries != null ) OmnibusLibraries.Builder libs = OmnibusLibraries.builder();
BuildReport.java,ImmutableSortedSet<SourcePath> sourcePaths = labelToSourcePaths.getValue();,if (labelToSourcePaths != null ) ImmutableSortedSet<SourcePath> sourcePaths = labelToSourcePaths.getValue();
RuleAnalysisLegacyBuildRuleView.java,Set<Artifact> artifacts = providerInfoCollection.getDefaultInfo().defaultOutputs();,if (providerInfoCollection != null ) Set<Artifact> artifacts = providerInfoCollection.getDefaultInfo().defaultOutputs();
AbstractLocationMacroExpander.java,Optional<String> stringInSquareBrackets = macro.getSupplementaryOutputIdentifier();,if (macro != null ) Optional<String> stringInSquareBrackets = macro.getSupplementaryOutputIdentifier();
ClasspathAbiMacroExpanderTest.java,ClasspathAbiMacro classpathAbiMacro = ClasspathAbiMacro.of(rule.getBuildTarget());,if (ClasspathAbiMacro != null ) ClasspathAbiMacro classpathAbiMacro = ClasspathAbiMacro.of(rule.getBuildTarget());
ExternallyBuiltApplePackage.java,this.sdkPath = packageConfigAndPlatformInfo.getSdkPath();,if (packageConfigAndPlatformInfo != null ) this.sdkPath = packageConfigAndPlatformInfo.getSdkPath();
ExternallyBuiltApplePackage.java,this.sdkVersion = packageConfigAndPlatformInfo.getSdkVersion();,if (packageConfigAndPlatformInfo != null ) this.sdkVersion = packageConfigAndPlatformInfo.getSdkVersion();
ExternallyBuiltApplePackage.java,this.platformBuildVersion = packageConfigAndPlatformInfo.getPlatformBuildVersion();,if (packageConfigAndPlatformInfo != null ) this.platformBuildVersion = packageConfigAndPlatformInfo.getPlatformBuildVersion();
ExternallyBuiltApplePackageTest.java,params = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) params = TestBuildRuleParams.create();
XcodeNativeTargetGenerator.java,ProjectFilesystem buildTargetFilesystem = buildTargetNode.getFilesystem();,if (buildTargetNode != null ) ProjectFilesystem buildTargetFilesystem = buildTargetNode.getFilesystem();
AppleToolchainIntegrationTest.java,Path rootPath = workspace.getProjectFileSystem().getRootPath();,if (workspace != null ) Path rootPath = workspace.getProjectFileSystem().getRootPath();
RunCommand.java,Tool executable = binaryBuildRule.getExecutableCommand();,if (binaryBuildRule != null ) Tool executable = binaryBuildRule.getExecutableCommand();
GoTestDescription.java,Tool testMainGenerator = testMainGeneratorRule.getExecutableCommand();,if (testMainGeneratorRule != null ) Tool testMainGenerator = testMainGeneratorRule.getExecutableCommand();
RustTestDescription.java,Tool testExe = testExeBuild.getExecutableCommand();,if (testExeBuild != null ) Tool testExe = testExeBuild.getExecutableCommand();
HttpFileBinaryTest.java,Tool tool = binary.getExecutableCommand();,if (binary != null ) Tool tool = binary.getExecutableCommand();
CommandAliasDescriptionTest.java,Tool tool = result.commandAlias().getExecutableCommand();,if (result != null ) Tool tool = result.commandAlias().getExecutableCommand();
MacroFinderAutomaton.java,this.currentResultBuilder = MacroMatchResult.builder();,if (MacroMatchResult != null ) this.currentResultBuilder = MacroMatchResult.builder();
CounterSnapshot.java,CounterSnapshot.Builder builder = CounterSnapshot.builder();,if (CounterSnapshot != null ) CounterSnapshot.Builder builder = CounterSnapshot.builder();
AndroidAppBundleIntegrationTest.java,filesystem = TestProjectFilesystems.createProjectFilesystem(workspace.getDestPath());,if (TestProjectFilesystems != null ) filesystem = TestProjectFilesystems.createProjectFilesystem(workspace.getDestPath());
PBXGroup.java,PBXFileReference ref = key.createFileReference();,if (key != null ) PBXFileReference ref = key.createFileReference();
PBXGroup.java,XCVersionGroup ref = key.createVersionGroup();,if (key != null ) XCVersionGroup ref = key.createVersionGroup();
XCVersionGroup.java,PBXFileReference ref = key.createFileReference();,if (key != null ) PBXFileReference ref = key.createFileReference();
AndroidAarIntegrationTest.java,filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());,if (TestProjectFilesystems != null ) filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());
MultipleResourcePackageIntegrationTest.java,filesystem = TestProjectFilesystems.createProjectFilesystem(workspace.getDestPath());,if (TestProjectFilesystems != null ) filesystem = TestProjectFilesystems.createProjectFilesystem(workspace.getDestPath());
CalculateSourceAbiIntegrationTest.java,filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());,if (TestProjectFilesystems != null ) filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());
CleanClasspathIntegrationTest.java,ProjectFilesystem filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());,if (TestProjectFilesystems != null ) ProjectFilesystem filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());
AndroidBinaryAssetsIntegrationTest.java,filesystem = TestProjectFilesystems.createProjectFilesystem(workspace.getDestPath());,if (TestProjectFilesystems != null ) filesystem = TestProjectFilesystems.createProjectFilesystem(workspace.getDestPath());
AndroidBinaryCxxIntegrationTest.java,filesystem = TestProjectFilesystems.createProjectFilesystem(workspace.getDestPath());,if (TestProjectFilesystems != null ) filesystem = TestProjectFilesystems.createProjectFilesystem(workspace.getDestPath());
AndroidExopackageBinaryIntegrationTest.java,filesystem = TestProjectFilesystems.createProjectFilesystem(workspace.getDestPath());,if (TestProjectFilesystems != null ) filesystem = TestProjectFilesystems.createProjectFilesystem(workspace.getDestPath());
AndroidResourceFilterIntegrationTest.java,filesystem = TestProjectFilesystems.createProjectFilesystem(workspace.getDestPath());,if (TestProjectFilesystems != null ) filesystem = TestProjectFilesystems.createProjectFilesystem(workspace.getDestPath());
AppleBinaryIntegrationTest.java,filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());,if (TestProjectFilesystems != null ) filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());
BuildKeepGoingIntegrationTest.java,filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());,if (TestProjectFilesystems != null ) filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());
SkylarkUserDefinedRuleIntegrationTest.java,ProjectFilesystem filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());,if (TestProjectFilesystems != null ) ProjectFilesystem filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());
SkylarkUserDefinedRuleIntegrationTest.java,ProjectFilesystem filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());,if (TestProjectFilesystems != null ) ProjectFilesystem filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());
SkylarkUserDefinedRuleIntegrationTest.java,ProjectFilesystem filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());,if (TestProjectFilesystems != null ) ProjectFilesystem filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());
CxxPrecompiledHeaderRuleTest.java,filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());,if (TestProjectFilesystems != null ) filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());
AaptPackageResourcesIntegrationTest.java,filesystem = TestProjectFilesystems.createProjectFilesystem(workspace.getDestPath());,if (TestProjectFilesystems != null ) filesystem = TestProjectFilesystems.createProjectFilesystem(workspace.getDestPath());
AndroidBinaryInstallIntegrationTest.java,filesystem = TestProjectFilesystems.createProjectFilesystem(tmpFolder.getRoot());,if (TestProjectFilesystems != null ) filesystem = TestProjectFilesystems.createProjectFilesystem(tmpFolder.getRoot());
AndroidBinaryIntegrationTest.java,filesystem = TestProjectFilesystems.createProjectFilesystem(workspace.getDestPath());,if (TestProjectFilesystems != null ) filesystem = TestProjectFilesystems.createProjectFilesystem(workspace.getDestPath());
AndroidBinaryModularIntegrationTest.java,filesystem = TestProjectFilesystems.createProjectFilesystem(workspace.getDestPath());,if (TestProjectFilesystems != null ) filesystem = TestProjectFilesystems.createProjectFilesystem(workspace.getDestPath());
AndroidBinaryRDotJavaIntegrationTest.java,filesystem = TestProjectFilesystems.createProjectFilesystem(workspace.getDestPath());,if (TestProjectFilesystems != null ) filesystem = TestProjectFilesystems.createProjectFilesystem(workspace.getDestPath());
JsRulesIntegrationTest.java,projectFilesystem = TestProjectFilesystems.createProjectFilesystem(workspace.getDestPath());,if (TestProjectFilesystems != null ) projectFilesystem = TestProjectFilesystems.createProjectFilesystem(workspace.getDestPath());
DefaultJavaLibraryIntegrationTest.java,filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());,if (TestProjectFilesystems != null ) filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());
ModernBuildRuleStrategyIntegrationTest.java,filesystem = TestProjectFilesystems.createProjectFilesystem(workspace.getDestPath());,if (TestProjectFilesystems != null ) filesystem = TestProjectFilesystems.createProjectFilesystem(workspace.getDestPath());
AppleToolchainSetBuildRule.java,AppleToolchainBuildRule platformRule = applePlatformMapping.get(flavor.getName());,if (applePlatformMapping != null ) AppleToolchainBuildRule platformRule = applePlatformMapping.get(flavor.getName());
AppleToolchainSetBuildRule.java,ApplePlatformBuildRule platformRule = applePlatformMapping.get(flavor.getName());,if (applePlatformMapping != null ) ApplePlatformBuildRule platformRule = applePlatformMapping.get(flavor.getName());
CommandLineArgs.java,SourcePath sourcePath = artifact.asBound().getSourcePath();,if (artifact != null ) SourcePath sourcePath = artifact.asBound().getSourcePath();
CommandLineArgs.java,SourcePath sourcePath = artifact.asBound().getSourcePath();,if (artifact != null ) SourcePath sourcePath = artifact.asBound().getSourcePath();
IsolatedBuildableBuilder.java,BuildTarget target = sourcePath.getTarget();,if (sourcePath != null ) BuildTarget target = sourcePath.getTarget();
HttpArtifactCache.java,FetchResult.Builder resultBuilder = FetchResult.builder();,if (FetchResult != null ) FetchResult.Builder resultBuilder = FetchResult.builder();
HttpArtifactCache.java,StoreResult.Builder resultBuilder = StoreResult.builder();,if (StoreResult != null ) StoreResult.Builder resultBuilder = StoreResult.builder();
HttpArtifactCache.java,StoreWriteResult writeResult = storeRequest.write(bufferedSink.outputStream());,if (storeRequest != null ) StoreWriteResult writeResult = storeRequest.write(bufferedSink.outputStream());
HttpArtifactCacheBinaryProtocol.java,StoreWriteResult.Builder result = StoreWriteResult.builder();,if (StoreWriteResult != null ) StoreWriteResult.Builder result = StoreWriteResult.builder();
ThriftArtifactCache.java,FetchResult.Builder resultBuilder = FetchResult.builder();,if (FetchResult != null ) FetchResult.Builder resultBuilder = FetchResult.builder();
ThriftArtifactCache.java,MultiContainsResult.Builder resultBuilder = MultiContainsResult.builder();,if (MultiContainsResult != null ) MultiContainsResult.Builder resultBuilder = MultiContainsResult.builder();
ThriftArtifactCache.java,StoreResult.Builder resultBuilder = StoreResult.builder();,if (StoreResult != null ) StoreResult.Builder resultBuilder = StoreResult.builder();
ArtifactCacheBuckConfig.java,HttpCacheEntry.Builder builder = HttpCacheEntry.builder();,if (HttpCacheEntry != null ) HttpCacheEntry.Builder builder = HttpCacheEntry.builder();
HttpArtifactCacheEventListener.java,HttpArtifactCacheEventFetchData data = event.getFetchData();,if (event != null ) HttpArtifactCacheEventFetchData data = event.getFetchData();
HttpArtifactCacheEventListener.java,HttpArtifactCacheEventStoreData data = event.getStoreData();,if (event != null ) HttpArtifactCacheEventStoreData data = event.getStoreData();
AppleSimulatorProfileParsing.java,AppleSimulatorProfile.Builder profileBuilder = AppleSimulatorProfile.builder();,if (AppleSimulatorProfile != null ) AppleSimulatorProfile.Builder profileBuilder = AppleSimulatorProfile.builder();
ProjectGenerator.java,PBXCopyFilesBuildPhase copyFiles = new PBXCopyFilesBuildPhase(destSpecBuilder.build());,if (PBXCopyFilesBuildPhase(destSpecBuilder != null ) PBXCopyFilesBuildPhase copyFiles = new PBXCopyFilesBuildPhase(destSpecBuilder.build());
PBXBuildPhasesTest.java,CopyFilePhaseDestinationSpec.Builder destSpecBuilder = CopyFilePhaseDestinationSpec.builder();,if (CopyFilePhaseDestinationSpec != null ) CopyFilePhaseDestinationSpec.Builder destSpecBuilder = CopyFilePhaseDestinationSpec.builder();
XcodeNativeTargetProjectWriterTest.java,CopyFilePhaseDestinationSpec.Builder specBuilder = CopyFilePhaseDestinationSpec.builder();,if (CopyFilePhaseDestinationSpec != null ) CopyFilePhaseDestinationSpec.Builder specBuilder = CopyFilePhaseDestinationSpec.builder();
XcodeNativeTargetProjectWriterTest.java,PBXBuildPhase copyPhase = new PBXCopyFilesBuildPhase(specBuilder.build());,if (PBXCopyFilesBuildPhase(specBuilder != null ) PBXBuildPhase copyPhase = new PBXCopyFilesBuildPhase(specBuilder.build());
XcodeNativeTargetProjectWriterTest.java,CopyFilePhaseDestinationSpec.Builder specBuilder = CopyFilePhaseDestinationSpec.builder();,if (CopyFilePhaseDestinationSpec != null ) CopyFilePhaseDestinationSpec.Builder specBuilder = CopyFilePhaseDestinationSpec.builder();
XcodeNativeTargetProjectWriterTest.java,PBXBuildPhase copyFilesPhase = new PBXCopyFilesBuildPhase(specBuilder.build());,if (PBXCopyFilesBuildPhase(specBuilder != null ) PBXBuildPhase copyFilesPhase = new PBXCopyFilesBuildPhase(specBuilder.build());
AndroidBinaryBuildable.java,ModuleInfo.Builder baseModuleInfo = ModuleInfo.builder();,if (ModuleInfo != null ) ModuleInfo.Builder baseModuleInfo = ModuleInfo.builder();
AndroidBinaryInstallGraphEnhancer.java,ApkInfo apkInfo = installableApk.getApkInfo();,if (installableApk != null ) ApkInfo apkInfo = installableApk.getApkInfo();
ExopackageInstallerIntegrationTest.java,resourcesInfo = Optional.of(resourcesInfoBuilder.build());,if (Optional != null ) resourcesInfo = Optional.of(resourcesInfoBuilder.build());
AppleLibraryDescriptionSwiftEnhancer.java,BuildRuleParams paramsWithDeps = params.withExtraDeps(sortedDeps.build());,if (params != null ) BuildRuleParams paramsWithDeps = params.withExtraDeps(sortedDeps.build());
SwiftLibraryDescription.java,BuildRuleParams paramsWithSrcDeps = params.copyAppendingExtraDeps(srcsDepsBuilder.build());,if (params != null ) BuildRuleParams paramsWithSrcDeps = params.copyAppendingExtraDeps(srcsDepsBuilder.build());
ApplePlatformBuildRule.java,SourcePathResolverAdapter pathResolver = actionGraphBuilder.getSourcePathResolver();,if (actionGraphBuilder != null ) SourcePathResolverAdapter pathResolver = actionGraphBuilder.getSourcePathResolver();
ApplePlatformBuildRule.java,this.sdkPath = pathResolver.getAbsolutePath(descriptionArgs.getSdkPath());,if (pathResolver != null ) this.sdkPath = pathResolver.getAbsolutePath(descriptionArgs.getSdkPath());
ApplePlatformBuildRule.java,this.platformPath = pathResolver.getAbsolutePath(descriptionArgs.getPlatformPath());,if (pathResolver != null ) this.platformPath = pathResolver.getAbsolutePath(descriptionArgs.getPlatformPath());
SourcePathResolverTest.java,Iterable<SourcePath> sourcePaths = ImmutableList.of();,if (ImmutableList != null ) Iterable<SourcePath> sourcePaths = ImmutableList.of();
AbstractReport.java,Optional<ExtraInfoResult> extraInfoResultOptional = extraInfoCollector.run();,if (extraInfoCollector != null ) Optional<ExtraInfoResult> extraInfoResultOptional = extraInfoCollector.run();
DefaultDefectReporter.java,DefectSubmitResult.Builder defectSubmitResult = DefectSubmitResult.builder();,if (DefectSubmitResult != null ) DefectSubmitResult.Builder defectSubmitResult = DefectSubmitResult.builder();
DoctorReportHelper.java,DefectSubmitResult submitResult = result.get();,if (result != null ) DefectSubmitResult submitResult = result.get();
AbstractConsoleEventBusListener.java,RemoteArtifactUploadStats uploadStats = networkStatsTracker.getRemoteArtifactUploadStats();,if (networkStatsTracker != null ) RemoteArtifactUploadStats uploadStats = networkStatsTracker.getRemoteArtifactUploadStats();
DefectReporterTest.java,DefectSubmitResult defectSubmitResult = reporter.submitReport(defectReportBuilder.build());,if (reporter != null ) DefectSubmitResult defectSubmitResult = reporter.submitReport(defectReportBuilder.build());
HaskellGhciDescription.java,HaskellGhciOmnibusSpec.Builder builder = HaskellGhciOmnibusSpec.builder();,if (HaskellGhciOmnibusSpec != null ) HaskellGhciOmnibusSpec.Builder builder = HaskellGhciOmnibusSpec.builder();
ExternalJavacProvider.java,version = JavacVersion.of(output).toString();,if (JavacVersion != null ) version = JavacVersion.of(output).toString();
JavacOptions.java,JavacOptions.Builder builder = JavacOptions.builder();,if (JavacOptions != null ) JavacOptions.Builder builder = JavacOptions.builder();
JvmLibraryArg.java,AbstractJavacPluginParams.Builder builder = JavacPluginParams.builder();,if (JavacPluginParams != null ) AbstractJavacPluginParams.Builder builder = JavacPluginParams.builder();
JvmLibraryArg.java,AbstractJavacPluginParams.Builder builder = JavacPluginParams.builder();,if (JavacPluginParams != null ) AbstractJavacPluginParams.Builder builder = JavacPluginParams.builder();
JavaBuckConfigTest.java,AbstractJavacLanguageLevelOptions options = config.getJavacLanguageLevelOptions();,if (config != null ) AbstractJavacLanguageLevelOptions options = config.getJavacLanguageLevelOptions();
JavaBuckConfigTest.java,AbstractJavacLanguageLevelOptions options = config.getJavacLanguageLevelOptions();,if (config != null ) AbstractJavacLanguageLevelOptions options = config.getJavacLanguageLevelOptions();
SourceSet.java,SourceSet.Builder builder = SourceSet.builder();,if (SourceSet != null ) SourceSet.Builder builder = SourceSet.builder();
SourceSortedSet.java,SourceSortedSet.Builder builder = SourceSortedSet.builder();,if (SourceSortedSet != null ) SourceSortedSet.Builder builder = SourceSortedSet.builder();
DependencyFileEntry.java,DependencyFileEntry.Builder builder = DependencyFileEntry.builder();,if (DependencyFileEntry != null ) DependencyFileEntry.Builder builder = DependencyFileEntry.builder();
ProjectGeneratorTest.java,"configsGroup = PBXTestUtils.assertHasSubgroupAndReturnIt(configsGroup, component.toString());","if (component != null ) configsGroup = PBXTestUtils.assertHasSubgroupAndReturnIt(configsGroup, component.toString());"
ApplePlatformDescription.java,BuildRule cxxPlatformRule = actionGraphBuilder.getRule(args.getCxxToolchain());,if (actionGraphBuilder != null ) BuildRule cxxPlatformRule = actionGraphBuilder.getRule(args.getCxxToolchain());
RunShTestAndRecordResultStep.java,boolean isSuccess = executionResult.isSuccess();,if (executionResult != null ) boolean isSuccess = executionResult.isSuccess();
WorkspaceAndProjectGeneratorTest.java,WorkspaceAndProjectGenerator.Result result = generator.generateWorkspaceAndDependentProjects();,if (generator != null ) WorkspaceAndProjectGenerator.Result result = generator.generateWorkspaceAndDependentProjects();
WorkspaceAndProjectGeneratorTest.java,WorkspaceAndProjectGenerator.Result result = generator.generateWorkspaceAndDependentProjects();,if (generator != null ) WorkspaceAndProjectGenerator.Result result = generator.generateWorkspaceAndDependentProjects();
WorkspaceAndProjectGeneratorTest.java,WorkspaceAndProjectGenerator.Result result = generator.generateWorkspaceAndDependentProjects();,if (generator != null ) WorkspaceAndProjectGenerator.Result result = generator.generateWorkspaceAndDependentProjects();
WorkspaceAndProjectGeneratorTest.java,WorkspaceAndProjectGenerator.Result result = generator.generateWorkspaceAndDependentProjects();,if (generator != null ) WorkspaceAndProjectGenerator.Result result = generator.generateWorkspaceAndDependentProjects();
WorkspaceAndProjectGeneratorTest.java,WorkspaceAndProjectGenerator.Result result = generator.generateWorkspaceAndDependentProjects();,if (generator != null ) WorkspaceAndProjectGenerator.Result result = generator.generateWorkspaceAndDependentProjects();
WorkspaceAndProjectGeneratorTest.java,WorkspaceAndProjectGenerator.Result result = generator.generateWorkspaceAndDependentProjects();,if (generator != null ) WorkspaceAndProjectGenerator.Result result = generator.generateWorkspaceAndDependentProjects();
ProjectGenerator.java,this.headerSymlinkTreesBuilder = ImmutableList.builder();,if (ImmutableList != null ) this.headerSymlinkTreesBuilder = ImmutableList.builder();
ProjectGenerator.java,ImmutableList<BuildTarget> dependencies = ImmutableList.of();,if (ImmutableList != null ) ImmutableList<BuildTarget> dependencies = ImmutableList.of();
ProjectGenerator.java,BuildTarget buildTarget = targetNode.getBuildTarget();,if (targetNode != null ) BuildTarget buildTarget = targetNode.getBuildTarget();
ProjectGenerator.java,BuildTarget buildTarget = buildTargetSourcePath.getTarget();,if (buildTargetSourcePath != null ) BuildTarget buildTarget = buildTargetSourcePath.getTarget();
ProjectGenerator.java,BuildTarget buildTarget = targetNode.getBuildTarget();,if (targetNode != null ) BuildTarget buildTarget = targetNode.getBuildTarget();
ProjectGenerator.java,Path scriptPath = halideBuckConfig.getXcodeCompileScriptPath();,if (halideBuckConfig != null ) Path scriptPath = halideBuckConfig.getXcodeCompileScriptPath();
ProjectGenerator.java,AppleTestDescriptionArg args = testTargetNode.getConstructorArg();,if (testTargetNode != null ) AppleTestDescriptionArg args = testTargetNode.getConstructorArg();
ProjectGenerator.java,AppleResourceDescriptionArg arg = resource.getConstructorArg();,if (resource != null ) AppleResourceDescriptionArg arg = resource.getConstructorArg();
ProjectGenerator.java,String platformName = platformSource.getFirst().toString();,if (platformSource != null ) String platformName = platformSource.getFirst().toString();
ProjectGenerator.java,String platformName = platformHeader.getFirst().toString();,if (platformHeader != null ) String platformName = platformHeader.getFirst().toString();
ProjectGenerator.java,Matcher matcher = pattern.matcher(flavor.getName());,if (pattern != null ) Matcher matcher = pattern.matcher(flavor.getName());
ProjectGenerator.java,String platform = applePlatformAndArch.getFirst();,if (applePlatformAndArch != null ) String platform = applePlatformAndArch.getFirst();
ProjectGenerator.java,String arch = applePlatformAndArch.getSecond();,if (applePlatformAndArch != null ) String arch = applePlatformAndArch.getSecond();
ProjectGenerator.java,String platformName = platformFlavor.getName();,if (platformFlavor != null ) String platformName = platformFlavor.getName();
ProjectGenerator.java,GeneratedTargetAttributes targetAttributes = xcodeNativeTargetGenerator.generate();,if (xcodeNativeTargetGenerator != null ) GeneratedTargetAttributes targetAttributes = xcodeNativeTargetGenerator.generate();
ProjectGenerator.java,ProductType productType = targetAttributes.productType().get();,if (targetAttributes != null ) ProductType productType = targetAttributes.productType().get();
ProjectGenerator.java,BuildTarget buildTarget = buildTargetNode.getBuildTarget();,if (buildTargetNode != null ) BuildTarget buildTarget = buildTargetNode.getBuildTarget();
ProjectGenerator.java,ProjectFilesystem buildTargetFilesystem = buildTargetNode.getFilesystem();,if (buildTargetNode != null ) ProjectFilesystem buildTargetFilesystem = buildTargetNode.getFilesystem();
ProjectGenerator.java,CommonArg arg = targetNode.getConstructorArg();,if (targetNode != null ) CommonArg arg = targetNode.getConstructorArg();
ProjectGenerator.java,ImmutableSet<SourcePath> exportedHeaders = exportedHeadersBuilder.build();,if (exportedHeadersBuilder != null ) ImmutableSet<SourcePath> exportedHeaders = exportedHeadersBuilder.build();
ProjectGenerator.java,ImmutableSet<SourcePath> headers = headersBuilder.build();,if (headersBuilder != null ) ImmutableSet<SourcePath> headers = headersBuilder.build();
ProjectGenerator.java,Optional<String> swiftVersion = swiftAttributes.swiftVersion();,if (swiftAttributes != null ) Optional<String> swiftVersion = swiftAttributes.swiftVersion();
ProjectGenerator.java,boolean hasSwiftVersionArg = swiftVersion.isPresent();,if (swiftVersion != null ) boolean hasSwiftVersionArg = swiftVersion.isPresent();
ProjectGenerator.java,swiftVersion = swiftBuckConfig.getVersion();,if (swiftBuckConfig != null ) swiftVersion = swiftBuckConfig.getVersion();
ProjectGenerator.java,String cellRelativeBuildTarget = buildTarget.getCellRelativeName();,if (buildTarget != null ) String cellRelativeBuildTarget = buildTarget.getCellRelativeName();
ProjectGenerator.java,ImmutableSortedSet<SourceWithFlags> nonPlatformSrcs = arg.getSrcs();,if (arg != null ) ImmutableSortedSet<SourceWithFlags> nonPlatformSrcs = arg.getSrcs();
ProjectGenerator.java,ImmutableSortedSet<SourceWithFlags> allSrcs = allSrcsBuilder.build();,if (allSrcsBuilder != null ) ImmutableSortedSet<SourceWithFlags> allSrcs = allSrcsBuilder.build();
ProjectGenerator.java,HasAppleBundleFields bundleArg = bundle.get().getConstructorArg();,if (bundle != null ) HasAppleBundleFields bundleArg = bundle.get().getConstructorArg();
ProjectGenerator.java,"depTargetNodes = swapSharedLibrariesForBundles(depTargetNodes, sharedLibraryToBundle.get());","if (sharedLibraryToBundle != null ) depTargetNodes = swapSharedLibrariesForBundles(depTargetNodes, sharedLibraryToBundle.get());"
ProjectGenerator.java,publicCxxHeaders = ImmutableSortedMap.of();,if (ImmutableSortedMap != null ) publicCxxHeaders = ImmutableSortedMap.of();
ProjectGenerator.java,String targetNodeFlavorPostfix = watchTargetNode.getBuildTarget().getFlavorPostfix();,if (watchTargetNode != null ) String targetNodeFlavorPostfix = watchTargetNode.getBuildTarget().getFlavorPostfix();
ProjectGenerator.java,BuildTarget testTarget = bundleLoaderNode.get().getBuildTarget();,if (bundleLoaderNode != null ) BuildTarget testTarget = bundleLoaderNode.get().getBuildTarget();
ProjectGenerator.java,TargetNode<AppleBundleDescriptionArg> bundleLoader = bundleLoaderNode.get();,if (bundleLoaderNode != null ) TargetNode<AppleBundleDescriptionArg> bundleLoader = bundleLoaderNode.get();
ProjectGenerator.java,Path infoPlistPath = pathRelativizer.outputDirToRootRelative(infoPlistOptional.get());,if (pathRelativizer != null ) Path infoPlistPath = pathRelativizer.outputDirToRootRelative(infoPlistOptional.get());
ProjectGenerator.java,Path prefixHeaderRelative = resolveSourcePath(prefixHeaderOptional.get());,if (resolveSourcePath(prefixHeaderOptional != null ) Path prefixHeaderRelative = resolveSourcePath(prefixHeaderOptional.get());
ProjectGenerator.java,CommonArg arg = binaryNode.get().getConstructorArg();,if (binaryNode != null ) CommonArg arg = binaryNode.get().getConstructorArg();
ProjectGenerator.java,PBXProject project = xcodeProjectWriteOptions.project();,if (xcodeProjectWriteOptions != null ) PBXProject project = xcodeProjectWriteOptions.project();
ProjectGenerator.java,List<String> iOSLdRunpathSearchPaths = Lists.newArrayList();,if (Lists != null ) List<String> iOSLdRunpathSearchPaths = Lists.newArrayList();
ProjectGenerator.java,List<String> macOSLdRunpathSearchPaths = Lists.newArrayList();,if (Lists != null ) List<String> macOSLdRunpathSearchPaths = Lists.newArrayList();
ProjectGenerator.java,PBXProject project = xcodeProjectWriteOptions.project();,if (xcodeProjectWriteOptions != null ) PBXProject project = xcodeProjectWriteOptions.project();
ProjectGenerator.java,NSDictionary rootObject = serializer.toPlist();,if (serializer != null ) NSDictionary rootObject = serializer.toPlist();
ProjectGenerator.java,Path serializedProject = xcodeProjectWriteOptions.projectFilePath();,if (xcodeProjectWriteOptions != null ) Path serializedProject = xcodeProjectWriteOptions.projectFilePath();
ProjectGenerator.java,String contentsToWrite = rootObject.toXMLPropertyList();,if (rootObject != null ) String contentsToWrite = rootObject.toXMLPropertyList();
ProjectGenerator.java,HasAppleBundleFields arg = (HasAppleBundleFields) targetNode.getConstructorArg();,if (targetNode != null ) HasAppleBundleFields arg = (HasAppleBundleFields) targetNode.getConstructorArg();
ProjectGenerator.java,HasAppleBundleFields arg = (HasAppleBundleFields) targetNode.getConstructorArg();,if (targetNode != null ) HasAppleBundleFields arg = (HasAppleBundleFields) targetNode.getConstructorArg();
ProjectGenerator.java,int platFormSourcesSize = platformSources.getValues().size();,if (platformSources != null ) int platFormSourcesSize = platformSources.getValues().size();
ProjectGenerator.java,AppleBundleDescriptionArg arg = (AppleBundleDescriptionArg) targetNode.getConstructorArg();,if (targetNode != null ) AppleBundleDescriptionArg arg = (AppleBundleDescriptionArg) targetNode.getConstructorArg();
ProjectGenerator.java,SourcePath pchPath = arg.getPrecompiledHeader().get();,if (arg != null ) SourcePath pchPath = arg.getPrecompiledHeader().get();
ProjectGenerator.java,BuildTarget pchTarget = pchTargetSourcePath.getTarget();,if (pchTargetSourcePath != null ) BuildTarget pchTarget = pchTargetSourcePath.getTarget();
WorkspaceAndProjectGenerator.java,this.combinedProjectGenerator = Optional.empty();,if (Optional != null ) this.combinedProjectGenerator = Optional.empty();
WorkspaceAndProjectGenerator.java,ProjectGenerator.Result result = generator.createXcodeProjects();,if (generator != null ) ProjectGenerator.Result result = generator.createXcodeProjects();
XcodeNativeTargetGenerator.java,this.buildTarget = targetNode.getBuildTarget();,if (targetNode != null ) this.buildTarget = targetNode.getBuildTarget();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,platformSourcesbuilder = ImmutableList.builder();,if (ImmutableList != null ) platformSourcesbuilder = ImmutableList.builder();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();,if (projectGenerator != null ) List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();,if (projectGenerator != null ) List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();,if (projectGenerator != null ) List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();
ProjectGeneratorTest.java,List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();,if (projectGenerator != null ) List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();
ProjectGeneratorTest.java,List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();,if (projectGenerator != null ) List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();
ProjectGeneratorTest.java,List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();,if (projectGenerator != null ) List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();
ProjectGeneratorTest.java,List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();,if (projectGenerator != null ) List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();
ProjectGeneratorTest.java,List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();,if (projectGenerator != null ) List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();
ProjectGeneratorTest.java,List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();,if (projectGenerator != null ) List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();
ProjectGeneratorTest.java,List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();,if (projectGenerator != null ) List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();
ProjectGeneratorTest.java,headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();,if (projectGenerator != null ) headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();
ProjectGeneratorTest.java,List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();,if (projectGenerator != null ) List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();
ProjectGeneratorTest.java,headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();,if (projectGenerator != null ) headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,ProjectGenerator.Result result = projectGenerator.createXcodeProjects();,if (projectGenerator != null ) ProjectGenerator.Result result = projectGenerator.createXcodeProjects();
ProjectGeneratorTest.java,ProjectGenerator.Result result = projectGenerator.createXcodeProjects();,if (projectGenerator != null ) ProjectGenerator.Result result = projectGenerator.createXcodeProjects();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = generator.getGeneratedProject();,if (generator != null ) PBXProject project = generator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject generatedProject = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject generatedProject = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,ProjectGenerator.Result result = projectGenerator.createXcodeProjects();,if (projectGenerator != null ) ProjectGenerator.Result result = projectGenerator.createXcodeProjects();
ProjectGeneratorTest.java,ProjectGenerator.Result result = projectGenerator.createXcodeProjects();,if (projectGenerator != null ) ProjectGenerator.Result result = projectGenerator.createXcodeProjects();
ProjectGeneratorTest.java,PBXTarget target = Iterables.getOnlyElement(result.buildTargetsToGeneratedTargetMap.values());,if (Iterables != null ) PBXTarget target = Iterables.getOnlyElement(result.buildTargetsToGeneratedTargetMap.values());
ProjectGeneratorTest.java,PBXProject generatedProject = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject generatedProject = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject generatedProject = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject generatedProject = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject pbxProject = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject pbxProject = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject generatedProject = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject generatedProject = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,String filePath = assertFileRefIsRelativeAndResolvePath(file.getFileRef());,if (assertFileRefIsRelativeAndResolvePath(file != null ) String filePath = assertFileRefIsRelativeAndResolvePath(file.getFileRef());
ProjectGeneratorTest.java,NSDictionary buildFileSettings = file.getSettings().get();,if (file != null ) NSDictionary buildFileSettings = file.getSettings().get();
ProjectGeneratorTest.java,String filePath = assertFileRefIsRelativeAndResolvePath(file.getFileRef());,if (assertFileRefIsRelativeAndResolvePath(file != null ) String filePath = assertFileRefIsRelativeAndResolvePath(file.getFileRef());
AndroidBinaryGraphEnhancer.java,int numGroups = dexGroupMap.get(module).size();,if (dexGroupMap != null ) int numGroups = dexGroupMap.get(module).size();
AndroidBinaryGraphEnhancer.java,ImmutableList<PreDexSplitDexGroup> partialDexRules = rulesBuilder.build();,if (rulesBuilder != null ) ImmutableList<PreDexSplitDexGroup> partialDexRules = rulesBuilder.build();
BuildReport.java,ProjectFilesystem projectFilesystem = rule.getProjectFilesystem();,if (rule != null ) ProjectFilesystem projectFilesystem = rule.getProjectFilesystem();
BuildReport.java,ImmutableSet<SourcePath> defaultOutputs = outputsByLabels.get(OutputLabel.defaultLabel());,if (outputsByLabels != null ) ImmutableSet<SourcePath> defaultOutputs = outputsByLabels.get(OutputLabel.defaultLabel());
GenruleBuildableTest.java,Path rootPath = outputPathResolver.getRootPath();,if (outputPathResolver != null ) Path rootPath = outputPathResolver.getRootPath();
MultiarchFileInfosTest.java,MultiarchFileInfo multiarchFileInfo = MultiarchFileInfos.create(fatBuildTarget).get();,if (MultiarchFileInfos != null ) MultiarchFileInfo multiarchFileInfo = MultiarchFileInfos.create(fatBuildTarget).get();
MultiarchFileInfosTest.java,MultiarchFileInfo multiarchFileInfo = MultiarchFileInfos.create(fatBuildTarget).get();,if (MultiarchFileInfos != null ) MultiarchFileInfo multiarchFileInfo = MultiarchFileInfos.create(fatBuildTarget).get();
MultiarchFileInfosTest.java,MultiarchFileInfo multiarchFileInfo = MultiarchFileInfos.create(fatBuildTarget).get();,if (MultiarchFileInfos != null ) MultiarchFileInfo multiarchFileInfo = MultiarchFileInfos.create(fatBuildTarget).get();
AppleBinaryDescription.java,stubBinaryPath = appleCxxPlatform.get().getStubBinary();,if (appleCxxPlatform != null ) stubBinaryPath = appleCxxPlatform.get().getStubBinary();
AppleBundleDescription.java,cxxPlatform = new StaticUnresolvedCxxPlatform(appleCxxPlatform.getCxxPlatform());,if (StaticUnresolvedCxxPlatform(appleCxxPlatform != null ) cxxPlatform = new StaticUnresolvedCxxPlatform(appleCxxPlatform.getCxxPlatform());
AppleDescriptions.java,String platformVersion = appleCxxPlatform.get().getMinVersion();,if (appleCxxPlatform != null ) String platformVersion = appleCxxPlatform.get().getMinVersion();
ApplePlatforms.java,appleCxxPlatform = appleCxxPlatformFlavorDomain.getValue(cxxPlatform.getFlavor());,if (appleCxxPlatformFlavorDomain != null ) appleCxxPlatform = appleCxxPlatformFlavorDomain.getValue(cxxPlatform.getFlavor());
IsolationChecker.java,Builder builder = CachedErrors.builder();,if (CachedErrors != null ) Builder builder = CachedErrors.builder();
LoadBalancerEventsListener.java,LoadBalancerPingEventData data = event.getData();,if (event != null ) LoadBalancerPingEventData data = event.getData();
LoadBalancerEventsListener.java,ServerHealthManagerEventData data = event.getData();,if (event != null ) ServerHealthManagerEventData data = event.getData();
LoadBalancerEventsListener.java,LoadBalancedServiceEventData data = event.getData();,if (event != null ) LoadBalancedServiceEventData data = event.getData();
ClientSideSlb.java,List<PerServerPingData> allServerData = Futures.allAsList(futures).get();,if (Futures != null ) List<PerServerPingData> allServerData = Futures.allAsList(futures).get();
ClientSideSlb.java,LoadBalancerPingEventData.Builder eventData = LoadBalancerPingEventData.builder();,if (LoadBalancerPingEventData != null ) LoadBalancerPingEventData.Builder eventData = LoadBalancerPingEventData.builder();
VerifyCachesCommand.java,FileHashCacheVerificationResult result = cache.verify();,if (cache != null ) FileHashCacheVerificationResult result = cache.verify();
StackedFileHashCache.java,FileHashCacheVerificationResult.Builder builder = FileHashCacheVerificationResult.builder();,if (FileHashCacheVerificationResult != null ) FileHashCacheVerificationResult.Builder builder = FileHashCacheVerificationResult.builder();
StackedFileHashCache.java,FileHashCacheVerificationResult result = cache.verify();,if (cache != null ) FileHashCacheVerificationResult result = cache.verify();
AbstractBuildEnvironmentDescription.java,buckDirty = Optional.empty();,if (Optional != null ) buckDirty = Optional.empty();
FetchRuleKeyLogsRequest.java,struct.distributedBuildModeEnabled = iprot.readBool();,if (iprot != null ) struct.distributedBuildModeEnabled = iprot.readBool();
FetchRuleKeyLogsRequest.java,struct.distributedBuildModeEnabled = iprot.readBool();,if (iprot != null ) struct.distributedBuildModeEnabled = iprot.readBool();
ArtifactMetadata.java,struct.distributedBuildModeEnabled = iprot.readBool();,if (iprot != null ) struct.distributedBuildModeEnabled = iprot.readBool();
ArtifactMetadata.java,struct.distributedBuildModeEnabled = iprot.readBool();,if (iprot != null ) struct.distributedBuildModeEnabled = iprot.readBool();
BuckCacheDeleteRequest.java,struct.distributedBuildModeEnabled = iprot.readBool();,if (iprot != null ) struct.distributedBuildModeEnabled = iprot.readBool();
BuckCacheDeleteRequest.java,struct.distributedBuildModeEnabled = iprot.readBool();,if (iprot != null ) struct.distributedBuildModeEnabled = iprot.readBool();
BuckCacheFetchRequest.java,struct.distributedBuildModeEnabled = iprot.readBool();,if (iprot != null ) struct.distributedBuildModeEnabled = iprot.readBool();
BuckCacheFetchRequest.java,struct.distributedBuildModeEnabled = iprot.readBool();,if (iprot != null ) struct.distributedBuildModeEnabled = iprot.readBool();
BuckCacheMultiContainsRequest.java,struct.distributedBuildModeEnabled = iprot.readBool();,if (iprot != null ) struct.distributedBuildModeEnabled = iprot.readBool();
BuckCacheMultiContainsRequest.java,struct.distributedBuildModeEnabled = iprot.readBool();,if (iprot != null ) struct.distributedBuildModeEnabled = iprot.readBool();
BuckCacheMultiFetchRequest.java,struct.distributedBuildModeEnabled = iprot.readBool();,if (iprot != null ) struct.distributedBuildModeEnabled = iprot.readBool();
BuckCacheMultiFetchRequest.java,struct.distributedBuildModeEnabled = iprot.readBool();,if (iprot != null ) struct.distributedBuildModeEnabled = iprot.readBool();
XcodeNativeTargetGenerator.java,GeneratedTargetAttributes.Builder builder = GeneratedTargetAttributes.builder();,if (GeneratedTargetAttributes != null ) GeneratedTargetAttributes.Builder builder = GeneratedTargetAttributes.builder();
AsyncBackgroundTaskManager.java,Optional<Timeout> timeout = task.getTimeout();,if (task != null ) Optional<Timeout> timeout = task.getTimeout();
HaskellSourceModule.java,HaskellSourceModule.Builder builder = HaskellSourceModule.builder();,if (HaskellSourceModule != null ) HaskellSourceModule.Builder builder = HaskellSourceModule.builder();
HaskellSources.java,HaskellSources.Builder builder = HaskellSources.builder();,if (HaskellSources != null ) HaskellSources.Builder builder = HaskellSources.builder();
HaskellGhciRule.java,SymlinkFileStep.Builder sl = SymlinkFileStep.builder();,if (SymlinkFileStep != null ) SymlinkFileStep.Builder sl = SymlinkFileStep.builder();
AppleBundleDescription.java,cxxPlatform = appleCxxPlatform.getUnresolvedCxxPlatform();,if (appleCxxPlatform != null ) cxxPlatform = appleCxxPlatform.getUnresolvedCxxPlatform();
AppleDescriptions.java,SourcePathResolverAdapter resolver = ruleResolver.getSourcePathResolver();,if (ruleResolver != null ) SourcePathResolverAdapter resolver = ruleResolver.getSourcePathResolver();
AppleDescriptions.java,SourcePathResolverAdapter resolver = ruleResolver.getSourcePathResolver();,if (ruleResolver != null ) SourcePathResolverAdapter resolver = ruleResolver.getSourcePathResolver();
MultiarchFileInfos.java,Flavor platformFlavor = cxxPlatform.getFlavor();,if (cxxPlatform != null ) Flavor platformFlavor = cxxPlatform.getFlavor();
MultiarchFileInfos.java,BuildTarget platformFreeTarget = target.withoutFlavors(appleCxxPlatforms.getFlavors());,if (target != null ) BuildTarget platformFreeTarget = target.withoutFlavors(appleCxxPlatforms.getFlavors());
BuildReport.java,OutputLabel label = labelToSourcePaths.getKey();,if (labelToSourcePaths != null ) OutputLabel label = labelToSourcePaths.getKey();
BuildCommandTest.java,resolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) resolver = graphBuilder.getSourcePathResolver();
BuildCommandTest.java,rootCell = new TestCellBuilder().build();,if (TestCellBuilder() != null ) rootCell = new TestCellBuilder().build();
HeaderSearchPaths.java,boolean containsSwift = !nonSourcePaths.isEmpty();,if (!nonSourcePaths != null ) boolean containsSwift = !nonSourcePaths.isEmpty();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();,if (projectGenerator != null ) List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();,if (projectGenerator != null ) List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();,if (projectGenerator != null ) List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();,if (projectGenerator != null ) List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();,if (projectGenerator != null ) List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();,if (projectGenerator != null ) List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();
MultiarchFileInfosTest.java,MultiarchFileInfo multiarchFileInfo = MultiarchFileInfos.create(fatBuildTarget).get();,if (MultiarchFileInfos != null ) MultiarchFileInfo multiarchFileInfo = MultiarchFileInfos.create(fatBuildTarget).get();
MultiarchFileInfosTest.java,MultiarchFileInfo multiarchFileInfo = MultiarchFileInfos.create(fatBuildTarget).get();,if (MultiarchFileInfos != null ) MultiarchFileInfo multiarchFileInfo = MultiarchFileInfos.create(fatBuildTarget).get();
MultiarchFileInfosTest.java,MultiarchFileInfo multiarchFileInfo = MultiarchFileInfos.create(fatBuildTarget).get();,if (MultiarchFileInfos != null ) MultiarchFileInfo multiarchFileInfo = MultiarchFileInfos.create(fatBuildTarget).get();
AppleBinaryDescription.java,stubBinaryPath = appleCxxPlatform.get().getStubBinary();,if (appleCxxPlatform != null ) stubBinaryPath = appleCxxPlatform.get().getStubBinary();
AppleBundleDescription.java,cxxPlatform = new StaticUnresolvedCxxPlatform(appleCxxPlatform.getCxxPlatform());,if (StaticUnresolvedCxxPlatform(appleCxxPlatform != null ) cxxPlatform = new StaticUnresolvedCxxPlatform(appleCxxPlatform.getCxxPlatform());
AppleDescriptions.java,String platformVersion = appleCxxPlatform.get().getMinVersion();,if (appleCxxPlatform != null ) String platformVersion = appleCxxPlatform.get().getMinVersion();
ApplePlatforms.java,appleCxxPlatform = appleCxxPlatformFlavorDomain.getValue(cxxPlatform.getFlavor());,if (appleCxxPlatformFlavorDomain != null ) appleCxxPlatform = appleCxxPlatformFlavorDomain.getValue(cxxPlatform.getFlavor());
TestCellBuilder.java,cellConfig = CellConfig.of();,if (CellConfig != null ) cellConfig = CellConfig.of();
LocalBackedByteStreamServer.java,ParsedReadResource parsedResource = parseResourceName(request.getResourceName());,if (parseResourceName(request != null ) ParsedReadResource parsedResource = parseResourceName(request.getResourceName());
AbstractConsoleEventBusListener.java,RemoteDownloadStats downloadStats = networkStatsTracker.getRemoteDownloadStats();,if (networkStatsTracker != null ) RemoteDownloadStats downloadStats = networkStatsTracker.getRemoteDownloadStats();
CachingBuildRuleBuilder.java,Optional<RuleKeyAndInputs> manifestKeyAndInputs = manifestBasedKeySupplier.get();,if (manifestBasedKeySupplier != null ) Optional<RuleKeyAndInputs> manifestKeyAndInputs = manifestBasedKeySupplier.get();
GenruleBuildable.java,programRunner = sandboxExecutionStrategy.createSandboxProgramRunner(sandboxProperties.get());,if (sandboxExecutionStrategy != null ) programRunner = sandboxExecutionStrategy.createSandboxProgramRunner(sandboxProperties.get());
DoctorCommand.java,DoctorConfig doctorConfig = ImmutableDoctorConfig.of(params.getBuckConfig());,if (ImmutableDoctorConfig != null ) DoctorConfig doctorConfig = ImmutableDoctorConfig.of(params.getBuckConfig());
PackagePipeline.java,Path parent = buildFile.getParent();,if (buildFile != null ) Path parent = buildFile.getParent();
PackageFactoryTest.java,Cell cell = new TestCellBuilder().build();,if (TestCellBuilder() != null ) Cell cell = new TestCellBuilder().build();
PythonBinaryDescription.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
AndroidBinaryGraphEnhancer.java,int limit = dexSplitMode.getDexGroupLibLimit();,if (dexSplitMode != null ) int limit = dexSplitMode.getDexGroupLibLimit();
AndroidBinaryGraphEnhancer.java,ImmutableList<PreDexSplitDexGroup> dexGroupsExceptRDotJava = groupsBuilder.build();,if (groupsBuilder != null ) ImmutableList<PreDexSplitDexGroup> dexGroupsExceptRDotJava = groupsBuilder.build();
AndroidBinaryGraphEnhancer.java,ImmutableList<PreDexSplitDexGroup> dexGroupRules = dexGroupsBuilder.build();,if (dexGroupsBuilder != null ) ImmutableList<PreDexSplitDexGroup> dexGroupRules = dexGroupsBuilder.build();
DoctorCommand.java,DoctorConfig doctorConfig = new ImmutableDoctorConfig(params.getBuckConfig());,if (ImmutableDoctorConfig(params != null ) DoctorConfig doctorConfig = new ImmutableDoctorConfig(params.getBuckConfig());
GenruleBuildableTest.java,Path outputPath = outputPathResolver.resolvePath(buildable.getOutput());,if (outputPathResolver != null ) Path outputPath = outputPathResolver.resolvePath(buildable.getOutput());
ParsePipelineTest.java,Cell cell = fixture.getCell();,if (fixture != null ) Cell cell = fixture.getCell();
ParsePipelineTest.java,Cell cell = fixture.getCell();,if (fixture != null ) Cell cell = fixture.getCell();
ParsePipelineTest.java,Cell cell = fixture.getCell();,if (fixture != null ) Cell cell = fixture.getCell();
RemoteExecutionStrategyTest.java,this.service = MoreExecutors.listeningDecorator(Executors.newSingleThreadExecutor());,if (MoreExecutors != null ) this.service = MoreExecutors.listeningDecorator(Executors.newSingleThreadExecutor());
RemoteExecutionStrategyTest.java,Path cellPathPrefix = tmp.getRoot();,if (tmp != null ) Path cellPathPrefix = tmp.getRoot();
AndroidBinaryGraphEnhancer.java,int numGroups = dexGroupMap.get(module).size();,if (dexGroupMap != null ) int numGroups = dexGroupMap.get(module).size();
AndroidBinaryGraphEnhancer.java,ImmutableList<PreDexSplitDexGroup> partialDexRules = rulesBuilder.build();,if (rulesBuilder != null ) ImmutableList<PreDexSplitDexGroup> partialDexRules = rulesBuilder.build();
PythonTestDescriptionTest.java,PythonPackageComponents components = binRule.getComponents();,if (binRule != null ) PythonPackageComponents components = binRule.getComponents();
AbstractLocationMacroExpander.java,Optional<String> supplementaryOutputIdentifier = macro.getSupplementaryOutputIdentifier();,if (macro != null ) Optional<String> supplementaryOutputIdentifier = macro.getSupplementaryOutputIdentifier();
AbstractLocationMacroExpander.java,output = rule.getSourcePathToOutput();,if (rule != null ) output = rule.getSourcePathToOutput();
PythonTestDescription.java,"Path baseModule = PythonUtil.getBasePath(buildTarget, args.getBaseModule());","if (args != null ) Path baseModule = PythonUtil.getBasePath(buildTarget, args.getBaseModule());"
PythonLibraryDescription.java,"Path baseModule = PythonUtil.getBasePath(baseTarget, args.getBaseModule());","if (args != null ) Path baseModule = PythonUtil.getBasePath(baseTarget, args.getBaseModule());"
PexStep.java,Path originalDirPath = entry.getValue();,if (entry != null ) Path originalDirPath = entry.getValue();
ProjectGeneratorTest.java,TargetNode<ExportFileDescriptionArg> header = new ExportFileBuilder(headerTarget).build();,if (ExportFileBuilder(headerTarget) != null ) TargetNode<ExportFileDescriptionArg> header = new ExportFileBuilder(headerTarget).build();
ProjectGeneratorTest.java,projectFilesystem = projectCell.getFilesystem();,if (projectCell != null ) projectFilesystem = projectCell.getFilesystem();
BuildTargetMatcherParserTest.java,vfs = filesystem.getRootPath().getFileSystem();,if (filesystem != null ) vfs = filesystem.getRootPath().getFileSystem();
AppleBundleDescription.java,AppleCxxPlatform appleCxxPlatform = fatBinaryInfo.get().getRepresentativePlatform();,if (fatBinaryInfo != null ) AppleCxxPlatform appleCxxPlatform = fatBinaryInfo.get().getRepresentativePlatform();
ApplePlatforms.java,appleCxxPlatform = fatBinaryInfo.get().getRepresentativePlatform();,if (fatBinaryInfo != null ) appleCxxPlatform = fatBinaryInfo.get().getRepresentativePlatform();
AppleTestDescription.java,appleCxxPlatform = multiarchFileInfo.get().getRepresentativePlatform();,if (multiarchFileInfo != null ) appleCxxPlatform = multiarchFileInfo.get().getRepresentativePlatform();
MultiarchFileInfos.java,sdk = platform.getAppleSdk();,if (platform != null ) sdk = platform.getAppleSdk();
MultiarchFileInfos.java,BuildTarget platformFreeTarget = target.withoutFlavors(appleCxxPlatforms.getFlavors());,if (target != null ) BuildTarget platformFreeTarget = target.withoutFlavors(appleCxxPlatforms.getFlavors());
DuplicateResourcesTest.java,filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) filesystem = new FakeProjectFilesystem(tmp.getRoot());
RobolectricTestRuleTest.java,ProjectFilesystem filesystem = new FakeProjectFilesystem(temporaryFolder.getRoot());,if (FakeProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new FakeProjectFilesystem(temporaryFolder.getRoot());
RobolectricTestRuleTest.java,ProjectFilesystem filesystem = new FakeProjectFilesystem(temporaryFolder.getRoot());,if (FakeProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new FakeProjectFilesystem(temporaryFolder.getRoot());
RobolectricTestRuleTest.java,ProjectFilesystem filesystem = new FakeProjectFilesystem(temporaryFolder.getRoot());,if (FakeProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new FakeProjectFilesystem(temporaryFolder.getRoot());
RobolectricTestRuleTest.java,ProjectFilesystem filesystem = new FakeProjectFilesystem(temporaryFolder.getRoot());,if (FakeProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new FakeProjectFilesystem(temporaryFolder.getRoot());
RobolectricTestRuleTest.java,ProjectFilesystem filesystem = new FakeProjectFilesystem(temporaryFolder.getRoot());,if (FakeProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new FakeProjectFilesystem(temporaryFolder.getRoot());
RobolectricTestRuleTest.java,ProjectFilesystem filesystem = new FakeProjectFilesystem(temporaryFolder.getRoot());,if (FakeProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new FakeProjectFilesystem(temporaryFolder.getRoot());
RobolectricTestRuleTest.java,ProjectFilesystem filesystem = new FakeProjectFilesystem(temporaryFolder.getRoot());,if (FakeProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new FakeProjectFilesystem(temporaryFolder.getRoot());
RobolectricTestRuleTest.java,ProjectFilesystem filesystem = new FakeProjectFilesystem(temporaryFolder.getRoot());,if (FakeProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new FakeProjectFilesystem(temporaryFolder.getRoot());
DirectHeaderMapTest.java,projectFilesystem = new FakeProjectFilesystem(tmpDir.getRoot());,if (FakeProjectFilesystem(tmpDir != null ) projectFilesystem = new FakeProjectFilesystem(tmpDir.getRoot());
HeaderSymlinkTreeWithHeaderMapTest.java,projectFilesystem = new FakeProjectFilesystem(tmpDir.getRoot());,if (FakeProjectFilesystem(tmpDir != null ) projectFilesystem = new FakeProjectFilesystem(tmpDir.getRoot());
HeaderSymlinkTreeWithModuleMapTest.java,projectFilesystem = new FakeProjectFilesystem(tmpDir.getRoot());,if (FakeProjectFilesystem(tmpDir != null ) projectFilesystem = new FakeProjectFilesystem(tmpDir.getRoot());
PrebuiltJarTest.java,filesystem = new FakeProjectFilesystem(temp.newFolder());,if (FakeProjectFilesystem(temp != null ) filesystem = new FakeProjectFilesystem(temp.newFolder());
QueryPathsMacroExpanderTest.java,filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) filesystem = new FakeProjectFilesystem(tmp.getRoot());
ModernBuildRuleRemoteExecutionHelperTest.java,filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) filesystem = new FakeProjectFilesystem(tmp.getRoot());
QueryOutputsMacroExpanderTest.java,filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) filesystem = new FakeProjectFilesystem(tmp.getRoot());
QueryTargetsAndOutputsMacroExpanderTest.java,filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) filesystem = new FakeProjectFilesystem(tmp.getRoot());
QueryTargetsMacroExpanderTest.java,filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) filesystem = new FakeProjectFilesystem(tmp.getRoot());
HybridGlobberTest.java,ProjectFilesystem projectFilesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) ProjectFilesystem projectFilesystem = new FakeProjectFilesystem(tmp.getRoot());
WatchmanGlobberTest.java,ProjectFilesystem projectFilesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) ProjectFilesystem projectFilesystem = new FakeProjectFilesystem(tmp.getRoot());
SkylarkUserDefinedRulesParserTest.java,projectFilesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) projectFilesystem = new FakeProjectFilesystem(tmp.getRoot());
SwiftLibraryIntegrationTest.java,ProjectFilesystem projectFilesystem = new FakeProjectFilesystem(tmpDir.getRoot());,if (FakeProjectFilesystem(tmpDir != null ) ProjectFilesystem projectFilesystem = new FakeProjectFilesystem(tmpDir.getRoot());
StackedFileHashCacheTest.java,ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
StackedFileHashCacheTest.java,ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
HybridLocalStrategy.java,future = tracker.stealFromDelegate();,if (tracker != null ) future = tracker.stealFromDelegate();
RemoteExecutionStateRendererTest.java,"testRenderer = createTestRenderer(getEvents(targets), stolenTargets.build());","if (stolenTargets != null ) testRenderer = createTestRenderer(getEvents(targets), stolenTargets.build());"
DefaultProjectFilesystemFactory.java,String buckOut = defaultBuckPaths.getBuckOut().toString();,if (defaultBuckPaths != null ) String buckOut = defaultBuckPaths.getBuckOut().toString();
DefaultProjectFilesystemFactory.java,Path cellBuckOut = embeddedCellBuckOutInfo.get().getCellBuckOut();,if (embeddedCellBuckOutInfo != null ) Path cellBuckOut = embeddedCellBuckOutInfo.get().getCellBuckOut();
BuildCommand.java,Path outputDir = outputPathForSingleBuildTarget.normalize();,if (outputPathForSingleBuildTarget != null ) Path outputDir = outputPathForSingleBuildTarget.normalize();
BuildCommand.java,Path outputFilename = pathResolver.getAbsolutePath(output).getFileName();,if (pathResolver != null ) Path outputFilename = pathResolver.getAbsolutePath(output).getFileName();
BuildCommandIntegrationTest.java,File[] files = outputDir.toFile().listFiles();,if (outputDir != null ) File[] files = outputDir.toFile().listFiles();
AppleDescriptions.java,String platformVersion = appleCxxPlatform.get().getMinVersion();,if (appleCxxPlatform != null ) String platformVersion = appleCxxPlatform.get().getMinVersion();
AppleDescriptions.java,Optional<String> targetVersion = arg.getTargetSdkVersion();,if (arg != null ) Optional<String> targetVersion = arg.getTargetSdkVersion();
CsharpLibrary.java,SourcePath outputPath = Objects.requireNonNull(rule.getSourcePathToOutput());,if (Objects != null ) SourcePath outputPath = Objects.requireNonNull(rule.getSourcePathToOutput());
JavaBinary.java,Stream<BuildTarget> transitiveRuntimeDeps = Stream.of();,if (Stream != null ) Stream<BuildTarget> transitiveRuntimeDeps = Stream.of();
PrebuiltJar.java,Stream<BuildTarget> transitiveRuntimeDeps = Stream.of();,if (Stream != null ) Stream<BuildTarget> transitiveRuntimeDeps = Stream.of();
ImmutableUnconfiguredBuildTargetView.java,this.data = unflavoredBuildTargetView.getData();,if (unflavoredBuildTargetView != null ) this.data = unflavoredBuildTargetView.getData();
ImmutableUnconfiguredBuildTargetView.java,UnconfiguredBuildTarget from = unflavoredBuildTargetView.getData();,if (unflavoredBuildTargetView != null ) UnconfiguredBuildTarget from = unflavoredBuildTargetView.getData();
BuiltTargetVerifier.java,UnflavoredBuildTargetView unflavoredBuildTargetView = target.getUnflavoredBuildTargetView();,if (target != null ) UnflavoredBuildTargetView unflavoredBuildTargetView = target.getUnflavoredBuildTargetView();
UnconfiguredBuildTargetTypeInfo.java,UnflavoredBuildTargetView unflavored = value.getUnflavoredBuildTargetView();,if (value != null ) UnflavoredBuildTargetView unflavored = value.getUnflavoredBuildTargetView();
SwiftLibraryDescription.java,UnflavoredBuildTargetView unflavoredBuildTargetView = buildTarget.getUnflavoredBuildTarget();,if (buildTarget != null ) UnflavoredBuildTargetView unflavoredBuildTargetView = buildTarget.getUnflavoredBuildTarget();
AbstractFlavorSearchTargetNodeFinder.java,UnflavoredBuildTargetView unflavoredTarget = baseTarget.getUnflavoredBuildTarget();,if (baseTarget != null ) UnflavoredBuildTargetView unflavoredTarget = baseTarget.getUnflavoredBuildTarget();
CxxPlatforms.java,SharedLibraryInterfaceParams.Type type = config.getSharedLibraryInterfaces();,if (config != null ) SharedLibraryInterfaceParams.Type type = config.getSharedLibraryInterfaces();
KotlincToJarStepFactory.java,ImmutableSortedSet<Path> sources = sourceBuilder.build();,if (sourceBuilder != null ) ImmutableSortedSet<Path> sources = sourceBuilder.build();
PreDexSplitDexMerge.java,primaryDexPatterns = dexSplitMode.getPrimaryDexPatterns();,if (dexSplitMode != null ) primaryDexPatterns = dexSplitMode.getPrimaryDexPatterns();
PreDexSplitDexMerge.java,SourcePathResolverAdapter sourcePathResolverAdapter = context.getSourcePathResolver();,if (context != null ) SourcePathResolverAdapter sourcePathResolverAdapter = context.getSourcePathResolver();
PreDexSplitDexMerge.java,boolean isRootModule = result.apkModule.equals(apkModuleGraph.getRootAPKModule());,if (result != null ) boolean isRootModule = result.apkModule.equals(apkModuleGraph.getRootAPKModule());
PreDexSplitDexMerge.java,String storeId = result.apkModule.getName();,if (result != null ) String storeId = result.apkModule.getName();
PreDexSplitDexMerge.java,List<String> lines = Lists.newArrayListWithCapacity(metadataTxtEntries.size());,if (Lists != null ) List<String> lines = Lists.newArrayListWithCapacity(metadataTxtEntries.size());
PreDexSplitDexMerge.java,Path pathToSecondaryDex = entry.getKey();,if (entry != null ) Path pathToSecondaryDex = entry.getKey();
PreDexedFilesSorter.java,boolean isRootModule = apkModule.equals(apkModuleGraph.getRootAPKModule());,if (apkModule != null ) boolean isRootModule = apkModule.equals(apkModuleGraph.getRootAPKModule());
HeaderMapStep.java,HashCode hashCode = HASHER.hashBytes(headerMap.getBytes());,if (HASHER != null ) HashCode hashCode = HASHER.hashBytes(headerMap.getBytes());
ActionWrapperDataFactoryTest.java,ImmutableSet<Artifact> inputs = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<Artifact> inputs = ImmutableSet.of();
RuleAnalysisContextImplTest.java,ImmutableSet<Artifact> inputs = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<Artifact> inputs = ImmutableSet.of();
InferNullsafe.java,ImmutableSortedSet<SourcePath> directClasspath = directClasspathBuilder.build();,if (directClasspathBuilder != null ) ImmutableSortedSet<SourcePath> directClasspath = directClasspathBuilder.build();
DaemonicParserState.java,BuckConfig buckConfig = cell.getBuckConfig();,if (cell != null ) BuckConfig buckConfig = cell.getBuckConfig();
DefaultUnconfiguredTargetNodeFactoryTest.java,Cell cell = new TestCellBuilder().build();,if (TestCellBuilder() != null ) Cell cell = new TestCellBuilder().build();
ProjectBuildFileParserPool.java,resourcePools = ImmutableSet.copyOf(parserResourcePools.values());,if (ImmutableSet != null ) resourcePools = ImmutableSet.copyOf(parserResourcePools.values());
ProjectBuildFileParserPool.java,parsers = ImmutableSet.copyOf(nonPooledCells.values());,if (ImmutableSet != null ) parsers = ImmutableSet.copyOf(nonPooledCells.values());
SkylarkProjectBuildFileParser.java,this.astCache = CacheBuilder.newBuilder().build();,if (CacheBuilder != null ) this.astCache = CacheBuilder.newBuilder().build();
SkylarkProjectBuildFileParser.java,this.extensionDataCache = CacheBuilder.newBuilder().build();,if (CacheBuilder != null ) this.extensionDataCache = CacheBuilder.newBuilder().build();
SkylarkProjectBuildFileParser.java,Object symbol = symbols.get(kvp.getValue());,if (symbols != null ) Object symbol = symbols.get(kvp.getValue());
SkylarkProjectBuildFileParser.java,expectedSize += implicitLoadExtensionData.getLoadTransitiveClosure().size();,if (implicitLoadExtensionData != null ) expectedSize += implicitLoadExtensionData.getLoadTransitiveClosure().size();
SkylarkProjectBuildFileParser.java,Label label = loadImport.getLabel();,if (loadImport != null ) Label label = loadImport.getLabel();
SkylarkProjectBuildFileParser.java,Set<SkylarkImport> processed = new HashSet<>(skylarkImports.size());,if (HashSet<>(skylarkImports != null ) Set<SkylarkImport> processed = new HashSet<>(skylarkImports.size());
SkylarkProjectBuildFileParser.java,Set<SkylarkImport> processed = new HashSet<>(skylarkImports.size());,if (HashSet<>(skylarkImports != null ) Set<SkylarkImport> processed = new HashSet<>(skylarkImports.size());
SkylarkProjectBuildFileParser.java,BuildFileAST ast = load.getAST();,if (load != null ) BuildFileAST ast = load.getAST();
SkylarkProjectBuildFileParser.java,ImmutableSet<Identifier> identifiers = ValidationEnvironment.boundIdentifiers(stmt.getLHS());,if (ValidationEnvironment != null ) ImmutableSet<Identifier> identifiers = ValidationEnvironment.boundIdentifiers(stmt.getLHS());
SkylarkProjectBuildFileParser.java,String identifier = Iterables.getOnlyElement(identifiers).getName();,if (Iterables != null ) String identifier = Iterables.getOnlyElement(identifiers).getName();
SkylarkProjectBuildFileParser.java,Label extensionLabel = extensionEnv.getGlobals().getLabel();,if (extensionEnv != null ) Label extensionLabel = extensionEnv.getGlobals().getLabel();
SkylarkProjectBuildFileParser.java,ExtensionLoadState load = work.peek();,if (work != null ) ExtensionLoadState load = work.peek();
SkylarkProjectBuildFileParser.java,PathFragment relativeExtensionPath = containingLabel.toPathFragment();,if (containingLabel != null ) PathFragment relativeExtensionPath = containingLabel.toPathFragment();
SkylarkProjectBuildFileParser.java,RepositoryName repository = containingLabel.getPackageIdentifier().getRepository();,if (containingLabel != null ) RepositoryName repository = containingLabel.getPackageIdentifier().getRepository();
BuildArtifactFactory.java,"this.basePath = BuildPaths.getBaseDir(target, filesystem.getFileSystem());","if (filesystem != null ) this.basePath = BuildPaths.getBaseDir(target, filesystem.getFileSystem());"
AuditActionGraphCommandIntegrationTest.java,Path p = tmp.getRoot();,if (tmp != null ) Path p = tmp.getRoot();
ImmutableUnflavoredBuildTargetView.java,"cmp = MoreStrings.compareStrings(getBaseName(), o.getBaseName());","if (o != null ) cmp = MoreStrings.compareStrings(getBaseName(), o.getBaseName());"
TargetNodeTranslator.java,String targetBaseName = node.getBuildTarget().getBaseName();,if (node != null ) String targetBaseName = node.getBuildTarget().getBaseName();
FocusedTargetMatcher.java,String base = buildTargetPattern.getCellRelativeBasePath().toString();,if (buildTargetPattern != null ) String base = buildTargetPattern.getCellRelativeBasePath().toString();
BuildTargetPatternToBuildPackagePathComputation.java,Path basePath = key.getPattern().getBasePath();,if (key != null ) Path basePath = key.getPattern().getBasePath();
WatchmanBuildPackageComputation.java,Path basePath = targetPattern.getBasePath();,if (targetPattern != null ) Path basePath = targetPattern.getBasePath();
ReflectionParamInfo.java,Method getter = closestGetterOnAbstractClassOrInterface.get();,if (closestGetterOnAbstractClassOrInterface != null ) Method getter = closestGetterOnAbstractClassOrInterface.get();
ReflectionParamInfo.java,Method getter = this.concreteGetter.get();,if (this != null ) Method getter = this.concreteGetter.get();
AbstractQueryCommand.java,String label = toPresentationForm(entry.getKey());,if (toPresentationForm(entry != null ) String label = toPresentationForm(entry.getKey());
BuildCommand.java,ImmutableSet<BuildTarget> buildTargets = targetGraph.getBuildTargets();,if (targetGraph != null ) ImmutableSet<BuildTarget> buildTargets = targetGraph.getBuildTargets();
ProjectGenerator.java,Cell workspaceCell = projectCell.getCell(workspaceTarget.get());,if (projectCell != null ) Cell workspaceCell = projectCell.getCell(workspaceTarget.get());
ProjectGenerator.java,Cell workspaceCell = projectCell.getCell(workspaceTarget.get());,if (projectCell != null ) Cell workspaceCell = projectCell.getCell(workspaceTarget.get());
CellManager.java,Cell currentCell = getCell(node.getBuildTarget());,if (getCell(node != null ) Cell currentCell = getCell(node.getBuildTarget());
ParserWithConfigurableAttributes.java,Cell owningCell = cell.getCell(targetNode.getBuildTarget());,if (cell != null ) Cell owningCell = cell.getCell(targetNode.getBuildTarget());
EntryAccounting.java,byte[] bytes = stream.toByteArray();,if (stream != null ) byte[] bytes = stream.toByteArray();
AndroidBinaryIntegrationTest.java,BuckBuildLog buildLog = workspace.getBuildLog();,if (workspace != null ) BuckBuildLog buildLog = workspace.getBuildLog();
AndroidBinaryIntegrationTest.java,BuckBuildLog buildLog = workspace.getBuildLog();,if (workspace != null ) BuckBuildLog buildLog = workspace.getBuildLog();
BuckTargetCompletionContributor.java,final String doc = insertionContext.getDocument().getText();,if (insertionContext != null ) final String doc = insertionContext.getDocument().getText();
BuckTargetCompletionContributor.java,final int offset = insertionContext.getTailOffset();,if (insertionContext != null ) final int offset = insertionContext.getTailOffset();
BuckTargetCompletionContributor.java,VirtualFile childBuckFile = child.findChild(cell.getBuildfileName());,if (child != null ) VirtualFile childBuckFile = child.findChild(cell.getBuildfileName());
RemoteExecutionStrategy.java,this.prevStateTime = TimeUnit.NANOSECONDS.toMillis(System.nanoTime());,if (TimeUnit != null ) this.prevStateTime = TimeUnit.NANOSECONDS.toMillis(System.nanoTime());
RemoteExecutionStrategy.java,Consumer<Throwable> callback = callbackQueue.poll();,if (callbackQueue != null ) Consumer<Throwable> callback = callbackQueue.poll();
RemoteExecutionStrategy.java,long startMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime());,if (TimeUnit != null ) long startMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime());
RemoteExecutionStrategy.java,prevStateTime = TimeUnit.NANOSECONDS.toMillis(System.nanoTime());,if (TimeUnit != null ) prevStateTime = TimeUnit.NANOSECONDS.toMillis(System.nanoTime());
BuildTargetParser.java,NewCellPathResolver cellPathResolver = legacyCellPathResolver.getNewCellPathResolver();,if (legacyCellPathResolver != null ) NewCellPathResolver cellPathResolver = legacyCellPathResolver.getNewCellPathResolver();
XCodeDescriptionsTest.java,Cell rootCell = (new TestCellBuilder()).build();,if (TestCellBuilder()) != null ) Cell rootCell = (new TestCellBuilder()).build();
XCodeDescriptionsTest.java,Cell rootCell = (new TestCellBuilder()).build();,if (TestCellBuilder()) != null ) Cell rootCell = (new TestCellBuilder()).build();
AppleBinaryIntegrationTest.java,Path inputPath = projectRoot.resolve(buildTarget.getBasePath());,if (projectRoot != null ) Path inputPath = projectRoot.resolve(buildTarget.getBasePath());
AppleTestIntegrationTest.java,Path inputPath = projectRoot.resolve(buildTarget.getBasePath());,if (projectRoot != null ) Path inputPath = projectRoot.resolve(buildTarget.getBasePath());
IjModuleTest.java,Path moduleBasePath = targetNode.getBuildTarget().getBasePath();,if (targetNode != null ) Path moduleBasePath = targetNode.getBuildTarget().getBasePath();
ThrowingPackageBoundaryChecker.java,Path basePath = target.getBasePath();,if (target != null ) Path basePath = target.getBasePath();
RemoteExecutionConsoleLineProvider.java,long remoteMs = statsProvider.getRemoteCpuTimeMs();,if (statsProvider != null ) long remoteMs = statsProvider.getRemoteCpuTimeMs();
WorkspaceAndProjectGenerator.java,outputDirectory = workspaceBuildTarget.getBasePath();,if (workspaceBuildTarget != null ) outputDirectory = workspaceBuildTarget.getBasePath();
WorkspaceAndProjectGenerator.java,Path outputDirectory = workspaceBuildTarget.getBasePath();,if (workspaceBuildTarget != null ) Path outputDirectory = workspaceBuildTarget.getBasePath();
XcodeNativeTargetProjectWriter.java,Path targetPath = targetCellPath.resolve(target.getBasePath());,if (targetCellPath != null ) Path targetPath = targetCellPath.resolve(target.getBasePath());
RustCompileRule.java,Path basePath = buildTarget.getBasePath();,if (buildTarget != null ) Path basePath = buildTarget.getBasePath();
CommandLineTargetNodeSpecParser.java,CanonicalCellName cellName = spec.getBuildFileSpec().getCellName();,if (spec != null ) CanonicalCellName cellName = spec.getBuildFileSpec().getCellName();
CommandLineTargetNodeSpecParser.java,Path basePath = spec.getBuildFileSpec().getBasePath();,if (spec != null ) Path basePath = spec.getBuildFileSpec().getBasePath();
TargetSpecResolver.java,CanonicalCellName cellName = spec.getBuildFileSpec().getCellName();,if (spec != null ) CanonicalCellName cellName = spec.getBuildFileSpec().getCellName();
BuildTargetSpec.java,Path basePath = buildFileSpec.getBasePath();,if (buildFileSpec != null ) Path basePath = buildFileSpec.getBasePath();
TargetNodePredicateSpec.java,Path basePath = buildFileSpec.getBasePath();,if (buildFileSpec != null ) Path basePath = buildFileSpec.getBasePath();
FileBasedWorkerRequirementsProviderTest.java,tmp = Files.createTempDir();,if (Files != null ) tmp = Files.createTempDir();
LegacyGenrule.java,Path basePath = getBuildTarget().getBasePath();,if (getBuildTarget() != null ) Path basePath = getBuildTarget().getBasePath();
TargetNodePredicateSpec.java,String cellName = cell.getCanonicalName().getName();,if (cell != null ) String cellName = cell.getCanonicalName().getName();
ProjectGeneratorTest.java,BuildTargetPattern buildTargetPattern = BuildTargetPatternParser.parse(target.getName());,if (BuildTargetPatternParser != null ) BuildTargetPattern buildTargetPattern = BuildTargetPatternParser.parse(target.getName());
SourcePathResolverTest.java,Path path = outputLabelToSource.get(outputLabel.get());,if (outputLabelToSource != null ) Path path = outputLabelToSource.get(outputLabel.get());
RequestUploader.java,Response httpResponse = httpClient.newCall(request).execute();,if (httpClient != null ) Response httpResponse = httpClient.newCall(request).execute();
TargetsCommand.java,BuckPaths paths = rule.getProjectFilesystem().getBuckPaths();,if (rule != null ) BuckPaths paths = rule.getProjectFilesystem().getBuckPaths();
GenruleBuildable.java,Path basePath = buildTarget.getBasePath();,if (buildTarget != null ) Path basePath = buildTarget.getBasePath();
NdkLibrary.java,this.root = buildTarget.getBasePath();,if (buildTarget != null ) this.root = buildTarget.getBasePath();
NdkLibraryDescription.java,"sources = findSources(projectFilesystem, buildTarget.getBasePath());","if (buildTarget != null ) sources = findSources(projectFilesystem, buildTarget.getBasePath());"
BuckQueryEnvironment.java,Optional<Path> path = buildFileTree.getBasePathOfAncestorTarget(buildTarget.getBasePath());,if (buildFileTree != null ) Optional<Path> path = buildFileTree.getBasePathOfAncestorTarget(buildTarget.getBasePath());
JsLibraryDescription.java,Path directoryOfBuildFile = cellPath.resolve(target.getBasePath());,if (cellPath != null ) Path directoryOfBuildFile = cellPath.resolve(target.getBasePath());
BuildRuleExecutionEvent.java,this.target = buildRule.getBuildTarget();,if (buildRule != null ) this.target = buildRule.getBuildTarget();
RemoteExecutionStrategy.java,BuildTarget buildTarget = rule.getBuildTarget();,if (rule != null ) BuildTarget buildTarget = rule.getBuildTarget();
RemoteExecutionStrategy.java,"RuleContext ruleContext = new RuleContext(eventBus, rule.getBuildTarget());","if (rule != null ) RuleContext ruleContext = new RuleContext(eventBus, rule.getBuildTarget());"
AppleBundle.java,Path variantDirectory = variantFilePath.getParent();,if (variantFilePath != null ) Path variantDirectory = variantFilePath.getParent();
AppleBundle.java,Path bundleDestinationPath = bundleRoot.resolve(destinations.getResourcesPath());,if (bundleRoot != null ) Path bundleDestinationPath = bundleRoot.resolve(destinations.getResourcesPath());
AppleBundle.java,Path destinationPath = bundleVariantDestinationPath.resolve(variantFilePath.getFileName());,if (bundleVariantDestinationPath != null ) Path destinationPath = bundleVariantDestinationPath.resolve(variantFilePath.getFileName());
AppleBundle.java,Path frameworksDestinationPath = bundleRoot.resolve(this.destinations.getFrameworksPath());,if (bundleRoot != null ) Path frameworksDestinationPath = bundleRoot.resolve(this.destinations.getFrameworksPath());
AppleBundle.java,Path pathInBundle = resolver.getRelativePath(path).getFileName();,if (resolver != null ) Path pathInBundle = resolver.getRelativePath(path).getFileName();
AppleBundle.java,Path destinationPath = bundleDestinationPath.resolve(resolvedFilePath.getFileName());,if (bundleDestinationPath != null ) Path destinationPath = bundleDestinationPath.resolve(resolvedFilePath.getFileName());
CriticalPathEventBusListenerIntegrationTest.java,criticalPath.elapsedTime = scanner.nextLong();,if (scanner != null ) criticalPath.elapsedTime = scanner.nextLong();
CriticalPathEventBusListenerIntegrationTest.java,criticalPath.totalElapsedTime = scanner.nextLong();,if (scanner != null ) criticalPath.totalElapsedTime = scanner.nextLong();
CriticalPathEventBusListenerIntegrationTest.java,criticalPath.elapsedTimePercent = scanner.nextDouble();,if (scanner != null ) criticalPath.elapsedTimePercent = scanner.nextDouble();
CriticalPathEventBusListenerIntegrationTest.java,criticalPath.ruleType = scanner.next().trim();,if (scanner != null ) criticalPath.ruleType = scanner.next().trim();
CriticalPathEventBusListenerIntegrationTest.java,criticalPath.buildTarget = scanner.next().trim();,if (scanner != null ) criticalPath.buildTarget = scanner.next().trim();
InferPlatformFactory.java,Optional<String> version = config.getVersion();,if (config != null ) Optional<String> version = config.getVersion();
AndroidAppModularityGraphEnhancer.java,ImmutableCollection<NdkCxxPlatform> platforms = getPlatforms().values();,if (getPlatforms() != null ) ImmutableCollection<NdkCxxPlatform> platforms = getPlatforms().values();
CxxLuaExtensionDescription.java,FlavorDomain<LuaPlatform> luaPlatforms = getLuaPlatformsProvider().getLuaPlatforms();,if (getLuaPlatformsProvider() != null ) FlavorDomain<LuaPlatform> luaPlatforms = getLuaPlatformsProvider().getLuaPlatforms();
OcamlBinaryDescription.java,OcamlPlatform ocamlPlatform = getPlatform(args.getPlatform());,if (getPlatform(args != null ) OcamlPlatform ocamlPlatform = getPlatform(args.getPlatform());
CxxPythonExtensionDescription.java,defaultCxxFlavors = ImmutableSet.of(getDefaultCxxPlatform().getFlavor());,if (ImmutableSet != null ) defaultCxxFlavors = ImmutableSet.of(getDefaultCxxPlatform().getFlavor());
MainRunner.java,Path logDirectoryPath = invocationInfo.getLogDirectoryPath();,if (invocationInfo != null ) Path logDirectoryPath = invocationInfo.getLogDirectoryPath();
CriticalPathEventListener.java,CriticalPathNode criticalPathNode = pair.getSecond();,if (pair != null ) CriticalPathNode criticalPathNode = pair.getSecond();
CriticalPathEventListener.java,long elapsedTime = criticalPathNode.getElapsedTimeMs();,if (criticalPathNode != null ) long elapsedTime = criticalPathNode.getElapsedTimeMs();
AppleTestDescription.java,Flavor defaultCxxFlavor = cxxPlatformsProvider.getDefaultUnresolvedCxxPlatform().getFlavor();,if (cxxPlatformsProvider != null ) Flavor defaultCxxFlavor = cxxPlatformsProvider.getDefaultUnresolvedCxxPlatform().getFlavor();
AppleBundle.java,Path variantDirectory = variantFilePath.getParent();,if (variantFilePath != null ) Path variantDirectory = variantFilePath.getParent();
AppleBundle.java,Path bundleDestinationPath = bundleRoot.resolve(destinations.getResourcesPath());,if (bundleRoot != null ) Path bundleDestinationPath = bundleRoot.resolve(destinations.getResourcesPath());
AppleBundle.java,Path destinationPath = bundleVariantDestinationPath.resolve(variantFilePath.getFileName());,if (bundleVariantDestinationPath != null ) Path destinationPath = bundleVariantDestinationPath.resolve(variantFilePath.getFileName());
AppleBundle.java,Path frameworksDestinationPath = bundleRoot.resolve(this.destinations.getFrameworksPath());,if (bundleRoot != null ) Path frameworksDestinationPath = bundleRoot.resolve(this.destinations.getFrameworksPath());
AppleBundle.java,Path pathInBundle = resolver.getRelativePath(path).getFileName();,if (resolver != null ) Path pathInBundle = resolver.getRelativePath(path).getFileName();
AppleBundle.java,Path destinationPath = bundleDestinationPath.resolve(resolvedFilePath.getFileName());,if (bundleDestinationPath != null ) Path destinationPath = bundleDestinationPath.resolve(resolvedFilePath.getFileName());
UnconfiguredBuildTargetTypeInfo.java,Path cellPath = creator.createPath();,if (creator != null ) Path cellPath = creator.createPath();
AuditInputCommand.java,Cell cell = cellRoot.orElse(params.getCell());,if (cellRoot != null ) Cell cell = cellRoot.orElse(params.getCell());
AuditInputCommand.java,Cell cell = cellRoot.orElse(params.getCell());,if (cellRoot != null ) Cell cell = cellRoot.orElse(params.getCell());
CellManager.java,Cell cell = cells.get(target.getCell());,if (cells != null ) Cell cell = cells.get(target.getCell());
CommandLineTargetNodeSpecParser.java,Path cellPath = spec.getBuildFileSpec().getCellPath();,if (spec != null ) Path cellPath = spec.getBuildFileSpec().getCellPath();
TargetSpecResolver.java,Path cellPath = spec.getBuildFileSpec().getCellPath();,if (spec != null ) Path cellPath = spec.getBuildFileSpec().getCellPath();
AbstractAliasConfig.java,String alias = entry.getKey();,if (entry != null ) String alias = entry.getKey();
AbstractAliasConfig.java,UnconfiguredBuildTargetView buildTarget = entry.getValue();,if (entry != null ) UnconfiguredBuildTargetView buildTarget = entry.getValue();
AbstractAliasConfig.java,Path basePath = buildTarget.getBasePath();,if (buildTarget != null ) Path basePath = buildTarget.getBasePath();
AppleBinaryDescription.java,Flavor defaultCxxFlavor = cxxPlatformsProvider.getDefaultUnresolvedCxxPlatform().getFlavor();,if (cxxPlatformsProvider != null ) Flavor defaultCxxFlavor = cxxPlatformsProvider.getDefaultUnresolvedCxxPlatform().getFlavor();
AppleBinaryDescription.java,Flavor defaultCxxFlavor = cxxPlatformsProvider.getDefaultUnresolvedCxxPlatform().getFlavor();,if (cxxPlatformsProvider != null ) Flavor defaultCxxFlavor = cxxPlatformsProvider.getDefaultUnresolvedCxxPlatform().getFlavor();
AppleTestDescription.java,Flavor defaultCxxFlavor = cxxPlatformsProvider.getDefaultUnresolvedCxxPlatform().getFlavor();,if (cxxPlatformsProvider != null ) Flavor defaultCxxFlavor = cxxPlatformsProvider.getDefaultUnresolvedCxxPlatform().getFlavor();
CellManager.java,Path root = cell.getFilesystem().getRootPath();,if (cell != null ) Path root = cell.getFilesystem().getRootPath();
CellManager.java,Cell cell = cells.get(target.getCellPath());,if (cells != null ) Cell cell = cells.get(target.getCellPath());
DefaultOnDiskBuildInfo.java,String pathString = path.toString();,if (path != null ) String pathString = path.toString();
AndroidBinaryFilesInfo.java,PreDexMerge preDexMerge = enhancementResult.getPreDexMerge().get();,if (enhancementResult != null ) PreDexMerge preDexMerge = enhancementResult.getPreDexMerge().get();
AndroidBinaryFilesInfo.java,PreDexMerge preDexMerge = enhancementResult.getPreDexMerge().get();,if (enhancementResult != null ) PreDexMerge preDexMerge = enhancementResult.getPreDexMerge().get();
PreDexMerge.java,primaryDexPatterns = dexSplitMode.getPrimaryDexPatterns();,if (dexSplitMode != null ) primaryDexPatterns = dexSplitMode.getPrimaryDexPatterns();
PreDexMerge.java,SourcePathResolverAdapter sourcePathResolverAdapter = context.getSourcePathResolver();,if (context != null ) SourcePathResolverAdapter sourcePathResolverAdapter = context.getSourcePathResolver();
PreDexMerge.java,boolean isRootModule = result.apkModule.equals(apkModuleGraph.getRootAPKModule());,if (result != null ) boolean isRootModule = result.apkModule.equals(apkModuleGraph.getRootAPKModule());
PreDexMerge.java,String storeId = result.apkModule.getName();,if (result != null ) String storeId = result.apkModule.getName();
PreDexMerge.java,List<String> lines = Lists.newArrayListWithCapacity(metadataTxtEntries.size());,if (Lists != null ) List<String> lines = Lists.newArrayListWithCapacity(metadataTxtEntries.size());
PreDexMerge.java,Path pathToSecondaryDex = entry.getKey();,if (entry != null ) Path pathToSecondaryDex = entry.getKey();
HeaderSearchPaths.java,Path cellPath = target.get().getCellPath();,if (target != null ) Path cellPath = target.get().getCellPath();
XcodeNativeTargetProjectWriter.java,Path targetRelativeCellRoot = targetPath.relativize(target.getCellPath());,if (targetPath != null ) Path targetRelativeCellRoot = targetPath.relativize(target.getCellPath());
AuditClasspathCommandTest.java,Path root = javaLibraryTarget.getUnflavoredBuildTarget().getCellPath();,if (javaLibraryTarget != null ) Path root = javaLibraryTarget.getUnflavoredBuildTarget().getCellPath();
AuditClasspathCommandTest.java,Path root = javaTarget.getCellPath();,if (javaTarget != null ) Path root = javaTarget.getCellPath();
AuditClasspathCommandTest.java,Path root = javaLibrary.getBuildTarget().getCellPath();,if (javaLibrary != null ) Path root = javaLibrary.getBuildTarget().getCellPath();
UnconfiguredTargetNodeToTargetNodeParsePipeline.java,Cell depCell = cell.getCellIgnoringVisibilityCheck(depTarget.getCellPath());,if (cell != null ) Cell depCell = cell.getCellIgnoringVisibilityCheck(depTarget.getCellPath());
ProjectGenerator.java,Path cellPath = target.get().getCellPath();,if (target != null ) Path cellPath = target.get().getCellPath();
Aapt2Compile.java,SourcePathResolver sourcePathResolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver sourcePathResolver = buildContext.getSourcePathResolver();
AndroidBinaryBuildable.java,SourcePathResolver pathResolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver pathResolver = context.getSourcePathResolver();
AndroidBinaryBuildable.java,SourcePathResolver resolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver resolver = context.getSourcePathResolver();
DexProducedFromJavaLibrary.java,SourcePathResolver sourcePathResolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver sourcePathResolver = buildContext.getSourcePathResolver();
ExopackageResourcesInstaller.java,SourcePathResolver resolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver resolver = buildContext.getSourcePathResolver();
ExopackageSymlinkTreeStep.java,SourcePathResolver pathResolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver pathResolver = buildContext.getSourcePathResolver();
GenerateRDotJava.java,SourcePathResolver pathResolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver pathResolver = buildContext.getSourcePathResolver();
MergeAssets.java,SourcePathResolver pathResolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver pathResolver = context.getSourcePathResolver();
NonPreDexedDexBuildable.java,SourcePathResolver resolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver resolver = buildContext.getSourcePathResolver();
PreDexMerge.java,SourcePathResolver sourcePathResolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver sourcePathResolver = context.getSourcePathResolver();
ProguardTextOutput.java,SourcePathResolver resolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver resolver = buildContext.getSourcePathResolver();
StripLinkable.java,SourcePathResolver sourcePathResolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver sourcePathResolver = buildContext.getSourcePathResolver();
BuildCommand.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
InstallCommand.java,SourcePathResolver pathResolver = build.getGraphBuilder().getSourcePathResolver();,if (build != null ) SourcePathResolver pathResolver = build.getGraphBuilder().getSourcePathResolver();
RunCommand.java,SourcePathResolver resolver = build.getGraphBuilder().getSourcePathResolver();,if (build != null ) SourcePathResolver resolver = build.getGraphBuilder().getSourcePathResolver();
TargetsCommand.java,SourcePathResolver sourcePathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver sourcePathResolver = graphBuilder.getSourcePathResolver();
AbstractSourcePathResolver.java,Path absolutePath = getAbsolutePath(sourcePath).normalize();,if (getAbsolutePath(sourcePath) != null ) Path absolutePath = getAbsolutePath(sourcePath).normalize();
DefaultSourcePathResolver.java,resolvedPath = rule.getSourcePathToOutput();,if (rule != null ) resolvedPath = rule.getSourcePathToOutput();
Archive.java,SourcePathResolver resolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver resolver = buildContext.getSourcePathResolver();
CxxPrecompiledHeader.java,SourcePathResolver resolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver resolver = context.getSourcePathResolver();
CxxPreprocessAndCompile.java,SourcePathResolver resolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver resolver = context.getSourcePathResolver();
CxxThinLTOOpt.java,SourcePathResolver resolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver resolver = context.getSourcePathResolver();
ElfSharedLibraryInterface.java,SourcePathResolver sourcePathResolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver sourcePathResolver = buildContext.getSourcePathResolver();
ElfSharedLibraryInterface.java,SourcePathResolver sourcePathResolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver sourcePathResolver = context.getSourcePathResolver();
ElfSharedLibraryInterface.java,SourcePathResolver sourcePathResolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver sourcePathResolver = context.getSourcePathResolver();
CGoLibrary.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
GoBinary.java,SourcePathResolver resolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver resolver = context.getSourcePathResolver();
GoCompile.java,SourcePathResolver resolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver resolver = context.getSourcePathResolver();
GoTest.java,SourcePathResolver resolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver resolver = buildContext.getSourcePathResolver();
GoTest.java,SourcePathResolver resolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver resolver = buildContext.getSourcePathResolver();
GoTestCoverSource.java,SourcePathResolver pathResolver = ruleFinder.getSourcePathResolver();,if (ruleFinder != null ) SourcePathResolver pathResolver = ruleFinder.getSourcePathResolver();
HaskellGhciRule.java,SourcePathResolver resolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver resolver = context.getSourcePathResolver();
HaskellHaddockLibRule.java,SourcePathResolver resolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver resolver = buildContext.getSourcePathResolver();
HaskellHaddockRule.java,SourcePathResolver resolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver resolver = context.getSourcePathResolver();
HaskellHaddockRule.java,SourcePathResolver resolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver resolver = buildContext.getSourcePathResolver();
JsBundle.java,SourcePathResolver sourcePathResolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver sourcePathResolver = context.getSourcePathResolver();
JsBundleAndroid.java,SourcePathResolver sourcePathResolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver sourcePathResolver = context.getSourcePathResolver();
JsBundleGenrule.java,SourcePathResolver sourcePathResolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver sourcePathResolver = context.getSourcePathResolver();
JsDependenciesFile.java,SourcePathResolver sourcePathResolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver sourcePathResolver = context.getSourcePathResolver();
JsFile.java,SourcePathResolver sourcePathResolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver sourcePathResolver = buildContext.getSourcePathResolver();
JsLibrary.java,SourcePathResolver resolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver resolver = buildContext.getSourcePathResolver();
LuaStandaloneBinary.java,SourcePathResolver resolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver resolver = context.getSourcePathResolver();
PythonPackagedBinary.java,SourcePathResolver resolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver resolver = context.getSourcePathResolver();
RustCompileRule.java,SourcePathResolver resolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver resolver = buildContext.getSourcePathResolver();
RustCompileUtils.java,SourcePathResolver resolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver resolver = graphBuilder.getSourcePathResolver();
Zip.java,SourcePathResolver sourcePathResolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver sourcePathResolver = buildContext.getSourcePathResolver();
InferNullsafe.java,SourcePathResolver sourcePathResolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver sourcePathResolver = buildContext.getSourcePathResolver();
CompareAbis.java,SourcePathResolver sourcePathResolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver sourcePathResolver = context.getSourcePathResolver();
PrebuiltJar.java,SourcePathResolver resolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver resolver = context.getSourcePathResolver();
KotlincToJarStepFactory.java,SourcePathResolver resolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver resolver = buildContext.getSourcePathResolver();
RuleKeyBuilder.java,SourcePathResolver resolver = ruleFinder.getSourcePathResolver();,if (ruleFinder != null ) SourcePathResolver resolver = ruleFinder.getSourcePathResolver();
RuleKeyBuilder.java,SourcePathResolver resolver = ruleFinder.getSourcePathResolver();,if (ruleFinder != null ) SourcePathResolver resolver = ruleFinder.getSourcePathResolver();
IsolatedBuildableBuilder.java,BuildTarget target = sourcePath.getTarget();,if (sourcePath != null ) BuildTarget target = sourcePath.getTarget();
ExportFile.java,SourcePathResolver resolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver resolver = context.getSourcePathResolver();
Genrule.java,SourcePathResolver sourcePathResolver = buildRuleResolver.getSourcePathResolver();,if (buildRuleResolver != null ) SourcePathResolver sourcePathResolver = buildRuleResolver.getSourcePathResolver();
GenruleBuildable.java,SourcePathResolver sourcePathResolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver sourcePathResolver = context.getSourcePathResolver();
LegacyGenrule.java,SourcePathResolver sourcePathResolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver sourcePathResolver = context.getSourcePathResolver();
AndroidBinaryTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
AndroidBinaryTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
AndroidResourceTest.java,SourcePathResolver resolver = ruleFinder.getSourcePathResolver();,if (ruleFinder != null ) SourcePathResolver resolver = ruleFinder.getSourcePathResolver();
AndroidResourceTest.java,SourcePathResolver resolver = ruleFinder.getSourcePathResolver();,if (ruleFinder != null ) SourcePathResolver resolver = ruleFinder.getSourcePathResolver();
AndroidPackageableCollectorTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
AppleAssetCatalogTest.java,private SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();,if (TestActionGraphBuilder() != null ) private SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();
AppleDescriptionsTest.java,SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();,if (TestActionGraphBuilder() != null ) SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();
AppleDescriptionsTest.java,SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();,if (TestActionGraphBuilder() != null ) SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();
AppleDescriptionsTest.java,SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();,if (TestActionGraphBuilder() != null ) SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();
AppleDescriptionsTest.java,SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();,if (TestActionGraphBuilder() != null ) SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();
AppleDescriptionsTest.java,SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();,if (TestActionGraphBuilder() != null ) SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();
AppleDescriptionsTest.java,SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();,if (TestActionGraphBuilder() != null ) SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();
RuleUtilsTest.java,SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();,if (TestActionGraphBuilder() != null ) SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();
RuleUtilsTest.java,SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();,if (TestActionGraphBuilder() != null ) SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();
RuleUtilsTest.java,SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();,if (TestActionGraphBuilder() != null ) SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();
RuleUtilsTest.java,SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();,if (TestActionGraphBuilder() != null ) SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();
RuleUtilsTest.java,SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();,if (TestActionGraphBuilder() != null ) SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();
RuleUtilsTest.java,SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();,if (TestActionGraphBuilder() != null ) SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();
RuleUtilsTest.java,SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();,if (TestActionGraphBuilder() != null ) SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();
RuleUtilsTest.java,SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();,if (TestActionGraphBuilder() != null ) SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();
RuleUtilsTest.java,SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();,if (TestActionGraphBuilder() != null ) SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();
AppleCxxPlatformsTest.java,SourcePathResolver resolver = ruleResolver.getSourcePathResolver();,if (ruleResolver != null ) SourcePathResolver resolver = ruleResolver.getSourcePathResolver();
AppleCxxPlatformsTest.java,SourcePathResolver resolver = ruleResolver.getSourcePathResolver();,if (ruleResolver != null ) SourcePathResolver resolver = ruleResolver.getSourcePathResolver();
AppleCxxPlatformsTest.java,SourcePathResolver resolver = ruleResolver.getSourcePathResolver();,if (ruleResolver != null ) SourcePathResolver resolver = ruleResolver.getSourcePathResolver();
BuildTargetSourcePathTest.java,SourcePathResolver pathResolver = new TestActionGraphBuilder().getSourcePathResolver();,if (TestActionGraphBuilder() != null ) SourcePathResolver pathResolver = new TestActionGraphBuilder().getSourcePathResolver();
BuildTargetSourcePathTest.java,SourcePathResolver pathResolver = new TestActionGraphBuilder().getSourcePathResolver();,if (TestActionGraphBuilder() != null ) SourcePathResolver pathResolver = new TestActionGraphBuilder().getSourcePathResolver();
BuildTargetSourcePathTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
BuildTargetSourcePathTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
ExplicitBuildTargetSourcePathTest.java,SourcePathResolver pathResolver = new TestActionGraphBuilder().getSourcePathResolver();,if (TestActionGraphBuilder() != null ) SourcePathResolver pathResolver = new TestActionGraphBuilder().getSourcePathResolver();
PathSourcePathTest.java,SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();,if (TestActionGraphBuilder() != null ) SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();
CxxLibraryDescriptionTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
CxxLibraryDescriptionTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
CxxLinkableEnhancerTest.java,SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();,if (TestActionGraphBuilder() != null ) SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();
CxxLocationMacroExpanderTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
CxxPreprocessAndCompileTest.java,SourcePathResolver pathResolver = ruleFinder.getSourcePathResolver();,if (ruleFinder != null ) SourcePathResolver pathResolver = ruleFinder.getSourcePathResolver();
CxxSourceRuleFactoryTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
CxxSourceRuleFactoryTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
CxxSourceRuleFactoryTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
CxxSourceRuleFactoryTest.java,private SourcePathResolver sourcePathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) private SourcePathResolver sourcePathResolver = graphBuilder.getSourcePathResolver();
CxxSourceRuleFactoryTest.java,SourcePathResolver sourcePathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver sourcePathResolver = graphBuilder.getSourcePathResolver();
CxxTestDescriptionTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
CxxTestDescriptionTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
CxxToolchainDescriptionTest.java,SourcePathResolver resolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver resolver = graphBuilder.getSourcePathResolver();
CxxWriteArgsToFileStepTest.java,SourcePathResolver sourcePathResolver = new TestActionGraphBuilder().getSourcePathResolver();,if (TestActionGraphBuilder() != null ) SourcePathResolver sourcePathResolver = new TestActionGraphBuilder().getSourcePathResolver();
HeaderPathNormalizerTest.java,SourcePathResolver pathResolver = new TestActionGraphBuilder().getSourcePathResolver();,if (TestActionGraphBuilder() != null ) SourcePathResolver pathResolver = new TestActionGraphBuilder().getSourcePathResolver();
HeaderPathNormalizerTest.java,SourcePathResolver pathResolver = new TestActionGraphBuilder().getSourcePathResolver();,if (TestActionGraphBuilder() != null ) SourcePathResolver pathResolver = new TestActionGraphBuilder().getSourcePathResolver();
HeaderPathNormalizerTest.java,SourcePathResolver pathResolver = new TestActionGraphBuilder().getSourcePathResolver();,if (TestActionGraphBuilder() != null ) SourcePathResolver pathResolver = new TestActionGraphBuilder().getSourcePathResolver();
HeaderPathNormalizerTest.java,SourcePathResolver pathResolver = new TestActionGraphBuilder().getSourcePathResolver();,if (TestActionGraphBuilder() != null ) SourcePathResolver pathResolver = new TestActionGraphBuilder().getSourcePathResolver();
HeaderPathNormalizerTest.java,SourcePathResolver pathResolver = new TestActionGraphBuilder().getSourcePathResolver();,if (TestActionGraphBuilder() != null ) SourcePathResolver pathResolver = new TestActionGraphBuilder().getSourcePathResolver();
OmnibusTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
OmnibusTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
OmnibusTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
OmnibusTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
OmnibusTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
OmnibusTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
OmnibusTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
PrebuiltCxxLibraryDescriptionTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
PrebuiltCxxLibraryDescriptionTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
PrebuiltCxxLibraryDescriptionTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
PrebuiltCxxLibraryDescriptionTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
PrebuiltCxxLibraryDescriptionTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
XcodeNativeTargetProjectWriterTest.java,sourcePathResolver = buildRuleResolver.getSourcePathResolver();,if (buildRuleResolver != null ) sourcePathResolver = buildRuleResolver.getSourcePathResolver();
XcodeNativeTargetProjectWriterTest.java,sourcePathResolver = buildRuleResolver.getSourcePathResolver();,if (buildRuleResolver != null ) sourcePathResolver = buildRuleResolver.getSourcePathResolver();
GoDescriptorsTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
HaskellLibraryDescriptionTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
HaskellPrebuiltLibraryDescriptionTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
JsBundleDescriptionTest.java,SourcePathResolver pathResolver = scenario.graphBuilder.getSourcePathResolver();,if (scenario != null ) SourcePathResolver pathResolver = scenario.graphBuilder.getSourcePathResolver();
DefaultIjLibraryFactoryTest.java,sourcePathResolver = new TestActionGraphBuilder().getSourcePathResolver();,if (TestActionGraphBuilder() != null ) sourcePathResolver = new TestActionGraphBuilder().getSourcePathResolver();
DefaultIjModuleFactoryTest.java,SourcePathResolver sourcePathResolver = buildRuleResolver.getSourcePathResolver();,if (buildRuleResolver != null ) SourcePathResolver sourcePathResolver = buildRuleResolver.getSourcePathResolver();
IjModuleGraphTest.java,SourcePathResolver sourcePathResolver = new TestActionGraphBuilder().getSourcePathResolver();,if (TestActionGraphBuilder() != null ) SourcePathResolver sourcePathResolver = new TestActionGraphBuilder().getSourcePathResolver();
CxxPythonExtensionDescriptionTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
CxxPythonExtensionDescriptionTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
PythonBinaryDescriptionTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
PythonBinaryDescriptionTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
RustPlatformFactoryTest.java,SourcePathResolver pathResolver = resolver.getSourcePathResolver();,if (resolver != null ) SourcePathResolver pathResolver = resolver.getSourcePathResolver();
CalculateClassAbiTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
DefaultJavaLibraryTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
DefaultJavaLibraryTest.java,SourcePathResolver pathResolver = ruleFinder.getSourcePathResolver();,if (ruleFinder != null ) SourcePathResolver pathResolver = ruleFinder.getSourcePathResolver();
DefaultJavaLibraryTest.java,SourcePathResolver pathResolver = ruleFinder.getSourcePathResolver();,if (ruleFinder != null ) SourcePathResolver pathResolver = ruleFinder.getSourcePathResolver();
DefaultJavaLibraryTest.java,SourcePathResolver pathResolver = ruleFinder.getSourcePathResolver();,if (ruleFinder != null ) SourcePathResolver pathResolver = ruleFinder.getSourcePathResolver();
DefaultJavaLibraryTest.java,SourcePathResolver pathResolver = ruleFinder.getSourcePathResolver();,if (ruleFinder != null ) SourcePathResolver pathResolver = ruleFinder.getSourcePathResolver();
DefaultJavaLibraryTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
JavaBinaryTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
JvmLibraryArgInterpreterTest.java,sourcePathResolver = ruleFinder.getSourcePathResolver();,if (ruleFinder != null ) sourcePathResolver = ruleFinder.getSourcePathResolver();
SanitizedArgTest.java,SourcePathResolver pathResolver = new TestActionGraphBuilder().getSourcePathResolver();,if (TestActionGraphBuilder() != null ) SourcePathResolver pathResolver = new TestActionGraphBuilder().getSourcePathResolver();
SourcePathArgTest.java,SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();,if (TestActionGraphBuilder() != null ) SourcePathResolver resolver = new TestActionGraphBuilder().getSourcePathResolver();
DependencyFileRuleKeyFactoryTest.java,SourcePathResolver pathResolver = ruleResolver.getSourcePathResolver();,if (ruleResolver != null ) SourcePathResolver pathResolver = ruleResolver.getSourcePathResolver();
DependencyFileRuleKeyFactoryTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
DependencyFileRuleKeyFactoryTest.java,SourcePathResolver pathResolver = ruleResolver.getSourcePathResolver();,if (ruleResolver != null ) SourcePathResolver pathResolver = ruleResolver.getSourcePathResolver();
DependencyFileRuleKeyFactoryTest.java,SourcePathResolver pathResolver = ruleResolver.getSourcePathResolver();,if (ruleResolver != null ) SourcePathResolver pathResolver = ruleResolver.getSourcePathResolver();
InputBasedRuleKeyFactoryTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
InputBasedRuleKeyFactoryTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
InputBasedRuleKeyFactoryTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
RuleKeyBuilderTest.java,SourcePathResolver pathResolver = ruleResolver.getSourcePathResolver();,if (ruleResolver != null ) SourcePathResolver pathResolver = ruleResolver.getSourcePathResolver();
ClasspathMacroExpanderTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
ClasspathMacroExpanderTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
LocationPlatformMacroExpanderTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
CommandAliasBuilder.java,sourcePathResolver = this.ruleFinder.getSourcePathResolver();,if (this != null ) sourcePathResolver = this.ruleFinder.getSourcePathResolver();
ExportFileTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
ExportFileTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
ExportFileTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
ExportFileTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
GenruleBuildableTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
GenruleBuildableTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
GenruleTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
GenruleTest.java,SourcePathResolver pathResolver = ruleFinder.getSourcePathResolver();,if (ruleFinder != null ) SourcePathResolver pathResolver = ruleFinder.getSourcePathResolver();
GenruleTest.java,SourcePathResolver pathResolver = ruleFinder.getSourcePathResolver();,if (ruleFinder != null ) SourcePathResolver pathResolver = ruleFinder.getSourcePathResolver();
ShTestDescriptionTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
ShTestDescriptionTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
WorkerToolTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
WorkerToolTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
SwiftDescriptionsTest.java,SourcePathResolver pathResolver = resolver.getSourcePathResolver();,if (resolver != null ) SourcePathResolver pathResolver = resolver.getSourcePathResolver();
SwiftNativeLinkableGroupTest.java,sourcePathResolver = buildRuleResolver.getSourcePathResolver();,if (buildRuleResolver != null ) sourcePathResolver = buildRuleResolver.getSourcePathResolver();
BuildTargetMatcherParserTest.java,filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();,if (FakeProjectFilesystem != null ) filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();
BuildTargetMatcherParserTest.java,ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();,if (FakeProjectFilesystem != null ) ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();
CentralDirectory.java,"size += ByteIo.writeShort(out, entry.getRequiredExtractVersion()); // version made by.","if (by != null ) size += ByteIo.writeShort(out, entry.getRequiredExtractVersion()); // version made by."
CentralDirectory.java,"size += ByteIo.writeShort(out, entry.getRequiredExtractVersion()); // version to extract with.","if (with != null ) size += ByteIo.writeShort(out, entry.getRequiredExtractVersion()); // version to extract with."
CentralDirectory.java,"size += ByteIo.writeShort(out, entry.getCompressionMethod()); // Compression.","if (Compression != null ) size += ByteIo.writeShort(out, entry.getCompressionMethod()); // Compression."
CentralDirectory.java,"size += ByteIo.writeInt(out, entry.getTime()); // Modification time.","if (time != null ) size += ByteIo.writeInt(out, entry.getTime()); // Modification time."
CentralDirectory.java,"size += ByteIo.writeInt(out, entry.getCompressedSize());","if (entry != null ) size += ByteIo.writeInt(out, entry.getCompressedSize());"
CentralDirectory.java,"size += ByteIo.writeInt(out, entry.getSize());","if (entry != null ) size += ByteIo.writeInt(out, entry.getSize());"
CentralDirectory.java,"size += ByteIo.writeInt(out, entry.getOffset()); // Offset of local file header.","if (header != null ) size += ByteIo.writeInt(out, entry.getOffset()); // Offset of local file header."
AppleTestDescription.java,Flavor defaultCxxFlavor = cxxPlatformsProvider.getDefaultUnresolvedCxxPlatform().getFlavor();,if (cxxPlatformsProvider != null ) Flavor defaultCxxFlavor = cxxPlatformsProvider.getDefaultUnresolvedCxxPlatform().getFlavor();
AppleTestDescription.java,appleCxxPlatform = appleCxxPlatformFlavorDomain.getValue(cxxPlatform.getFlavor());,if (appleCxxPlatformFlavorDomain != null ) appleCxxPlatform = appleCxxPlatformFlavorDomain.getValue(cxxPlatform.getFlavor());
MainIntegrationTest.java,String stderr = result.getStderr();,if (result != null ) String stderr = result.getStderr();
NativeLibraryMergeEnhancer.java,targetProjectFilesystem = graphBuilder.getRule(target).getProjectFilesystem();,if (graphBuilder != null ) targetProjectFilesystem = graphBuilder.getRule(target).getProjectFilesystem();
AppleBundle.java,Path variantDirectory = variantFilePath.getParent();,if (variantFilePath != null ) Path variantDirectory = variantFilePath.getParent();
AppleBundle.java,Path bundleDestinationPath = bundleRoot.resolve(destinations.getResourcesPath());,if (bundleRoot != null ) Path bundleDestinationPath = bundleRoot.resolve(destinations.getResourcesPath());
AppleBundle.java,Path destinationPath = bundleVariantDestinationPath.resolve(variantFilePath.getFileName());,if (bundleVariantDestinationPath != null ) Path destinationPath = bundleVariantDestinationPath.resolve(variantFilePath.getFileName());
AppleBundle.java,Path frameworksDestinationPath = bundleRoot.resolve(this.destinations.getFrameworksPath());,if (bundleRoot != null ) Path frameworksDestinationPath = bundleRoot.resolve(this.destinations.getFrameworksPath());
AppleBundle.java,Path pathInBundle = resolver.getRelativePath(path).getFileName();,if (resolver != null ) Path pathInBundle = resolver.getRelativePath(path).getFileName();
AppleBundle.java,Path destinationPath = bundleDestinationPath.resolve(resolvedFilePath.getFileName());,if (bundleDestinationPath != null ) Path destinationPath = bundleDestinationPath.resolve(resolvedFilePath.getFileName());
DexWithClasses.java,ImmutableSet<String> classNames = preDex.getClassNames().keySet();,if (preDex != null ) ImmutableSet<String> classNames = preDex.getClassNames().keySet();
PreDexedFilesSorter.java,currentDexSize += canary.getWeightEstimate();,if (canary != null ) currentDexSize += canary.getWeightEstimate();
PreDexedFilesSorter.java,currentDexSize += dexWithClasses.getWeightEstimate();,if (dexWithClasses != null ) currentDexSize += dexWithClasses.getWeightEstimate();
PatternsMatcher.java,hasPatterns = !patterns.isEmpty();,if (!patterns != null ) hasPatterns = !patterns.isEmpty();
PatternsMatcher.java,hasPatterns = !compiledPatterns.isEmpty();,if (!compiledPatterns != null ) hasPatterns = !compiledPatterns.isEmpty();
PatternsMatcherTest.java,PatternsMatcher patternsMatcher = new PatternsMatcher(Collections.emptyList());,if (PatternsMatcher(Collections != null ) PatternsMatcher patternsMatcher = new PatternsMatcher(Collections.emptyList());
Genrule.java,this.isWorkerGenrule = this.isWorkerGenrule();,if (this != null ) this.isWorkerGenrule = this.isWorkerGenrule();
Genrule.java,AndroidSdkLocation androidSdkLocation = tools.getAndroidSdkLocation();,if (tools != null ) AndroidSdkLocation androidSdkLocation = tools.getAndroidSdkLocation();
Genrule.java,Optional<AndroidNdk> androidNdk = tools.getAndroidNdk();,if (tools != null ) Optional<AndroidNdk> androidNdk = tools.getAndroidNdk();
Genrule.java,AndroidPlatformTarget androidPlatformTarget = tools.getAndroidPlatformTarget();,if (tools != null ) AndroidPlatformTarget androidPlatformTarget = tools.getAndroidPlatformTarget();
Genrule.java,TargetConfiguration targetConfiguration = getBuildTarget().getTargetConfiguration();,if (getBuildTarget() != null ) TargetConfiguration targetConfiguration = getBuildTarget().getTargetConfiguration();
Genrule.java,SourcePathResolver sourcePathResolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver sourcePathResolver = context.getSourcePathResolver();
Genrule.java,Path basePath = getBuildTarget().getBasePath();,if (getBuildTarget() != null ) Path basePath = getBuildTarget().getBasePath();
Genrule.java,Path canonicalPath = absolutePath.normalize();,if (absolutePath != null ) Path canonicalPath = absolutePath.normalize();
Genrule.java,localPath = canonicalPath.getFileName();,if (canonicalPath != null ) localPath = canonicalPath.getFileName();
GenruleTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
GenruleTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
GenruleTest.java,ImmutableList<Step> commands = builder.build();,if (builder != null ) ImmutableList<Step> commands = builder.build();
DefaultOnDiskBuildInfo.java,String value = optionalValue.get();,if (optionalValue != null ) String value = optionalValue.get();
Genrule.java,SourcePathResolver sourcePathResolver = buildRuleResolver.getSourcePathResolver();,if (buildRuleResolver != null ) SourcePathResolver sourcePathResolver = buildRuleResolver.getSourcePathResolver();
AppleBinaryDescriptionTest.java,SourcePath outputSourcePath = dep.getSourcePathToOutput();,if (dep != null ) SourcePath outputSourcePath = dep.getSourcePathToOutput();
AppleLibraryDescriptionTest.java,SourcePath outputSourcePath = dep.getSourcePathToOutput();,if (dep != null ) SourcePath outputSourcePath = dep.getSourcePathToOutput();
AppleTestDescriptionTest.java,SourcePath outputSourcePath = dep.getSourcePathToOutput();,if (dep != null ) SourcePath outputSourcePath = dep.getSourcePathToOutput();
CxxBinaryDescriptionTest.java,SourcePath outputSourcePath = dep.getSourcePathToOutput();,if (dep != null ) SourcePath outputSourcePath = dep.getSourcePathToOutput();
CxxBinaryDescriptionTest.java,SourcePath outputSourcePath = dep.getSourcePathToOutput();,if (dep != null ) SourcePath outputSourcePath = dep.getSourcePathToOutput();
CxxBinaryDescriptionTest.java,SourcePath outputSourcePath = dep.getSourcePathToOutput();,if (dep != null ) SourcePath outputSourcePath = dep.getSourcePathToOutput();
CxxLibraryDescriptionTest.java,SourcePath outputSourcePath = dep.getSourcePathToOutput();,if (dep != null ) SourcePath outputSourcePath = dep.getSourcePathToOutput();
CxxTestDescriptionTest.java,SourcePath outputSourcePath = dep.getSourcePathToOutput();,if (dep != null ) SourcePath outputSourcePath = dep.getSourcePathToOutput();
CxxTestDescriptionTest.java,SourcePath outputSourcePath = dep.getSourcePathToOutput();,if (dep != null ) SourcePath outputSourcePath = dep.getSourcePathToOutput();
CxxTestDescriptionTest.java,SourcePath outputSourcePath = dep.getSourcePathToOutput();,if (dep != null ) SourcePath outputSourcePath = dep.getSourcePathToOutput();
CxxTestDescriptionTest.java,SourcePath outputSourcePath = dep.getSourcePathToOutput();,if (dep != null ) SourcePath outputSourcePath = dep.getSourcePathToOutput();
GenruleTest.java,SourcePath outputSourcePath = genrule.getSourcePathToOutput();,if (genrule != null ) SourcePath outputSourcePath = genrule.getSourcePathToOutput();
GenruleBuildableTest.java,Path outputPath = outputPathResolver.resolvePath(buildable.getOutput());,if (outputPathResolver != null ) Path outputPath = outputPathResolver.resolvePath(buildable.getOutput());
DefaultSourcePathResolver.java,SourcePath resolvedPath = ruleFinder.getRule(targetSourcePath).getSourcePathToOutput();,if (ruleFinder != null ) SourcePath resolvedPath = ruleFinder.getRule(targetSourcePath).getSourcePathToOutput();
UnixUserIdFetcher.java,Object unixSystem = cls.newInstance();,if (cls != null ) Object unixSystem = cls.newInstance();
LinkableListFilterFactory.java,final BuildTarget buildTarget = mappingTarget.getBuildTarget();,if (mappingTarget != null ) final BuildTarget buildTarget = mappingTarget.getBuildTarget();
LocationMacroExpander.java,Optional<String> supplementaryOutputIdentifier = macro.getSupplementaryOutputIdentifier();,if (macro != null ) Optional<String> supplementaryOutputIdentifier = macro.getSupplementaryOutputIdentifier();
LocationMacroExpander.java,output = rule.getSourcePathToOutput();,if (rule != null ) output = rule.getSourcePathToOutput();
PerBuildStateFactoryWithConfigurableAttributes.java,Cell rootCell = parsingContext.getCell();,if (parsingContext != null ) Cell rootCell = parsingContext.getCell();
PerBuildStateFactoryWithConfigurableAttributes.java,ListeningExecutorService executorService = parsingContext.getExecutor();,if (parsingContext != null ) ListeningExecutorService executorService = parsingContext.getExecutor();
PerBuildStateFactoryWithConfigurableAttributes.java,int numParsingThreads = parserConfig.getNumParsingThreads();,if (parserConfig != null ) int numParsingThreads = parserConfig.getNumParsingThreads();
AbstractUnusedDependenciesFinder.java,final SourcePath dependencyOutput = dependency.getSourcePathToOutput();,if (dependency != null ) final SourcePath dependencyOutput = dependency.getSourcePathToOutput();
AbstractUnusedDependenciesFinder.java,Optional<BuildTarget> abiJarTarget = dependency.getSourceOnlyAbiJar();,if (dependency != null ) Optional<BuildTarget> abiJarTarget = dependency.getSourceOnlyAbiJar();
AbstractUnusedDependenciesFinder.java,abiJarTarget = dependency.getAbiJar();,if (dependency != null ) abiJarTarget = dependency.getAbiJar();
AbstractUnusedDependenciesFinder.java,SourcePath abiJarOutput = abiJarRule.getSourcePathToOutput();,if (abiJarRule != null ) SourcePath abiJarOutput = abiJarRule.getSourcePathToOutput();
WorkspaceAndProjectGenerator.java,PBXProject project = xcodeProjectWriteOptions.project();,if (xcodeProjectWriteOptions != null ) PBXProject project = xcodeProjectWriteOptions.project();
WorkspaceAndProjectGenerator.java,String schemeName = project.getName();,if (project != null ) String schemeName = project.getName();
WorkspaceAndProjectGenerator.java,Path projectOutputDirectory = xcodeProjectWriteOptions.xcodeProjPath();,if (xcodeProjectWriteOptions != null ) Path projectOutputDirectory = xcodeProjectWriteOptions.xcodeProjPath();
ConfigurationsIntegrationTest.java,Platform platform = Platform.detect();,if (Platform != null ) Platform platform = Platform.detect();
AsyncVersionedTargetGraphBuilder.java,Set<BuildTarget> parseDeps = root.getParseDeps();,if (root != null ) Set<BuildTarget> parseDeps = root.getParseDeps();
FileInputsAdderTest.java,projectFilesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());,if (TestProjectFilesystems != null ) projectFilesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());
Genrule.java,this.isWorkerGenrule = this.isWorkerGenrule();,if (this != null ) this.isWorkerGenrule = this.isWorkerGenrule();
Genrule.java,AndroidSdkLocation androidSdkLocation = tools.getAndroidSdkLocation();,if (tools != null ) AndroidSdkLocation androidSdkLocation = tools.getAndroidSdkLocation();
Genrule.java,Optional<AndroidNdk> androidNdk = tools.getAndroidNdk();,if (tools != null ) Optional<AndroidNdk> androidNdk = tools.getAndroidNdk();
Genrule.java,AndroidPlatformTarget androidPlatformTarget = tools.getAndroidPlatformTarget();,if (tools != null ) AndroidPlatformTarget androidPlatformTarget = tools.getAndroidPlatformTarget();
Genrule.java,TargetConfiguration targetConfiguration = getBuildTarget().getTargetConfiguration();,if (getBuildTarget() != null ) TargetConfiguration targetConfiguration = getBuildTarget().getTargetConfiguration();
Genrule.java,SourcePathResolver sourcePathResolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver sourcePathResolver = context.getSourcePathResolver();
Genrule.java,Path basePath = getBuildTarget().getBasePath();,if (getBuildTarget() != null ) Path basePath = getBuildTarget().getBasePath();
Genrule.java,Path canonicalPath = absolutePath.normalize();,if (absolutePath != null ) Path canonicalPath = absolutePath.normalize();
Genrule.java,localPath = canonicalPath.getFileName();,if (canonicalPath != null ) localPath = canonicalPath.getFileName();
GenruleTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
GenruleTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
GenruleTest.java,ImmutableList<Step> commands = builder.build();,if (builder != null ) ImmutableList<Step> commands = builder.build();
RemoteExecutionStrategy.java,Optional<String> stdout = result.getStdout();,if (result != null ) Optional<String> stdout = result.getStdout();
RemoteExecutionStrategy.java,Optional<String> stderr = result.getStderr();,if (result != null ) Optional<String> stderr = result.getStderr();
MainRunner.java,Optional<ExitCode> result = command.runHelp(console.getStdOut());,if (command != null ) Optional<ExitCode> result = command.runHelp(console.getStdOut());
IjProjectPaths.java,String moduleRelativePath = moduleLocationBasePath.relativize(path).toString();,if (moduleLocationBasePath != null ) String moduleRelativePath = moduleLocationBasePath.relativize(path).toString();
CommandLineTargetNodeSpecParserTest.java,ProjectFilesystem root = FakeProjectFilesystem.createJavaOnlyFilesystem();,if (FakeProjectFilesystem != null ) ProjectFilesystem root = FakeProjectFilesystem.createJavaOnlyFilesystem();
CommandLineTargetNodeSpecParserTest.java,CellPathResolver cellRoots = cell.getCellPathResolver();,if (cell != null ) CellPathResolver cellRoots = cell.getCellPathResolver();
CommandLineTargetNodeSpecParserTest.java,Path cellPath = cellRoots.getCellPathOrThrow(Optional.empty());,if (cellRoots != null ) Path cellPath = cellRoots.getCellPathOrThrow(Optional.empty());
CommandLineTargetNodeSpecParserTest.java,CellPathResolver cellRoots = cell.getCellPathResolver();,if (cell != null ) CellPathResolver cellRoots = cell.getCellPathResolver();
CommandLineTargetNodeSpecParserTest.java,Path cellPath = cellRoots.getCellPathOrThrow(Optional.empty());,if (cellRoots != null ) Path cellPath = cellRoots.getCellPathOrThrow(Optional.empty());
ProjectGenerator.java,"copiedRules = rulesWithoutBundleLoader(copiedRules, bundleLoaderNode.get());","if (bundleLoaderNode != null ) copiedRules = rulesWithoutBundleLoader(copiedRules, bundleLoaderNode.get());"
ProjectGenerator.java,Set<BuildTarget> buildDeps = node.getBuildDeps();,if (node != null ) Set<BuildTarget> buildDeps = node.getBuildDeps();
ProjectGenerator.java,AppleBundleDescriptionArg arg = (AppleBundleDescriptionArg) node.getConstructorArg();,if (node != null ) AppleBundleDescriptionArg arg = (AppleBundleDescriptionArg) node.getConstructorArg();
ProjectGeneratorTest.java,PBXProject generatedProject = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject generatedProject = projectGenerator.getGeneratedProject();
ImmutableTypeCoercer.java,this.builderClass = builderMethod.getReturnType();,if (builderMethod != null ) this.builderClass = builderMethod.getReturnType();
TargetNodeFactory.java,paramInfos = typeCoercerFactory.getAllParamInfo(description.getConstructorArgType());,if (typeCoercerFactory != null ) paramInfos = typeCoercerFactory.getAllParamInfo(description.getConstructorArgType());
DefaultConstructorArgMarshaller.java,T dto = constructorArgBuilder.build();,if (constructorArgBuilder != null ) T dto = constructorArgBuilder.build();
HybridKnownRuleTypesTest.java,SkylarkDescriptionArg built = builder.build();,if (builder != null ) SkylarkDescriptionArg built = builder.build();
HybridKnownRuleTypesTest.java,KnownRuleTestDescriptionArg ret = builder.build();,if (builder != null ) KnownRuleTestDescriptionArg ret = builder.build();
SkylarkDescription.java,BaseFunction implementation = args.getRule().getImplementation();,if (args != null ) BaseFunction implementation = args.getRule().getImplementation();
UnconfiguredTargetNodeToTargetNodeFactory.java,RuleType ruleType = rawTargetNode.getRuleType();,if (rawTargetNode != null ) RuleType ruleType = rawTargetNode.getRuleType();
BuildPackagePathToUnconfiguredTargetNodePackageComputation.java,RawTargetNode rawTargetNode = entry.getValue();,if (entry != null ) RawTargetNode rawTargetNode = entry.getValue();
BuildPackagePathToUnconfiguredTargetNodePackageComputation.java,DependencyStack dependencyStack = DependencyStack.top(rawTargetNode.getBuildTarget());,if (DependencyStack != null ) DependencyStack dependencyStack = DependencyStack.top(rawTargetNode.getBuildTarget());
UnconfiguredTargetNodeToUnconfiguredTargetNodeWithDepsComputation.java,UnconfiguredBuildTarget unconfiguredBuildTarget = key.getRawTargetNode().getBuildTarget();,if (key != null ) UnconfiguredBuildTarget unconfiguredBuildTarget = key.getRawTargetNode().getBuildTarget();
AssumeAndroidPlatform.java,Optional<String> actualVersion = buildToolsResolver.getBuildToolsVersion();,if (buildToolsResolver != null ) Optional<String> actualVersion = buildToolsResolver.getBuildToolsVersion();
BuckQueryIntegrationTest.java,String stderr = processResult.getStderr();,if (processResult != null ) String stderr = processResult.getStderr();
BuckQueryIntegrationTest.java,List<String> cycleCandidates = new ArrayList<>(chain.size());,if (ArrayList<>(chain != null ) List<String> cycleCandidates = new ArrayList<>(chain.size());
BuckQueryIntegrationTest.java,int chainSize = chain.size();,if (chain != null ) int chainSize = chain.size();
ProjectGenerator.java,this.platformCxxBuckConfigs = cxxBuckConfig.getFlavoredConfigs();,if (cxxBuckConfig != null ) this.platformCxxBuckConfigs = cxxBuckConfig.getFlavoredConfigs();
ProjectGenerator.java,BuildTarget locationMacroTarget = input.getTarget();,if (input != null ) BuildTarget locationMacroTarget = input.getTarget();
ProjectGenerator.java,String platform = flavor.toString();,if (flavor != null ) String platform = flavor.toString();
ProjectGenerator.java,String platform = platformFlavor.getName();,if (platformFlavor != null ) String platform = platformFlavor.getName();
ProjectGenerator.java,boolean shouldLimitByForceLoad = options.shouldForceLoadLinkWholeLibraries();,if (options != null ) boolean shouldLimitByForceLoad = options.shouldForceLoadLinkWholeLibraries();
ProjectGenerator.java,AppleTestDescriptionArg testArg = testNode.get().getConstructorArg();,if (testNode != null ) AppleTestDescriptionArg testArg = testNode.get().getConstructorArg();
ProjectGenerator.java,TargetNode<CommonArg> target = library.get();,if (library != null ) TargetNode<CommonArg> target = library.get();
ProjectGenerator.java,CommonArg arg = target.getConstructorArg();,if (target != null ) CommonArg arg = target.getConstructorArg();
ProjectGenerator.java,HasAppleBundleFields arg = (HasAppleBundleFields) targetNode.getConstructorArg();,if (targetNode != null ) HasAppleBundleFields arg = (HasAppleBundleFields) targetNode.getConstructorArg();
ProjectGenerator.java,filtered = FluentIterable.of();,if (FluentIterable != null ) filtered = FluentIterable.of();
ProjectGenerator.java,sourceTreePath = framework.getSourceTreePath().get();,if (framework != null ) sourceTreePath = framework.getSourceTreePath().get();
ProjectGenerator.java,String nameWithoutExtension = MorePaths.getNameWithoutExtension(sourceTreePath.getPath());,if (MorePaths != null ) String nameWithoutExtension = MorePaths.getNameWithoutExtension(sourceTreePath.getPath());
ProjectGenerator.java,CommonArg arg = targetNode.getConstructorArg();,if (targetNode != null ) CommonArg arg = targetNode.getConstructorArg();
AppleBundleDescription.java,Optional<Flavor> platform = args.getDefaultPlatform();,if (args != null ) Optional<Flavor> platform = args.getDefaultPlatform();
ProjectGenerator.java,CommonArg arg = targetNode.getConstructorArg();,if (targetNode != null ) CommonArg arg = targetNode.getConstructorArg();
ProjectGenerator.java,String platform = defaultCxxPlatform.getFlavor().toString();,if (defaultCxxPlatform != null ) String platform = defaultCxxPlatform.getFlavor().toString();
ProjectGenerator.java,CommonArg arg = targetNode.getConstructorArg();,if (targetNode != null ) CommonArg arg = targetNode.getConstructorArg();
ProjectGenerator.java,String platform = defaultCxxPlatform.getFlavor().toString();,if (defaultCxxPlatform != null ) String platform = defaultCxxPlatform.getFlavor().toString();
ProjectGenerator.java,CommonArg arg = targetNode.getConstructorArg();,if (targetNode != null ) CommonArg arg = targetNode.getConstructorArg();
ProjectGenerator.java,basePath = projectFilesystem.getRootPath();,if (projectFilesystem != null ) basePath = projectFilesystem.getRootPath();
ProjectGenerator.java,path = basePath.resolve(entry.getKey());,if (basePath != null ) path = basePath.resolve(entry.getKey());
ProjectGenerator.java,HeaderMap.Builder headerMapBuilder = new HeaderMap.Builder();,if (HeaderMap != null ) HeaderMap.Builder headerMapBuilder = new HeaderMap.Builder();
ProjectGenerator.java,Path link = headerSymlinkTreeRoot.resolve(entry.getKey());,if (headerSymlinkTreeRoot != null ) Path link = headerSymlinkTreeRoot.resolve(entry.getKey());
ProjectGenerator.java,Path link = headerSymlinkTreeRoot.resolve(entry.getKey());,if (headerSymlinkTreeRoot != null ) Path link = headerSymlinkTreeRoot.resolve(entry.getKey());
ProjectGenerator.java,Path link = entry.getKey();,if (entry != null ) Path link = entry.getKey();
ProjectGenerator.java,Path existing = entry.getValue();,if (entry != null ) Path existing = entry.getValue();
ProjectGenerator.java,boolean containsSwift = !nonSourcePaths.isEmpty();,if (!nonSourcePaths != null ) boolean containsSwift = !nonSourcePaths.isEmpty();
ProjectGenerator.java,HeaderMap.Builder headerMapBuilder = new HeaderMap.Builder();,if (HeaderMap != null ) HeaderMap.Builder headerMapBuilder = new HeaderMap.Builder();
ProjectGenerator.java,BuildTarget buildTarget = halideNode.getBuildTarget();,if (halideNode != null ) BuildTarget buildTarget = halideNode.getBuildTarget();
ProjectGenerator.java,AppleLibraryDescriptionArg constructorArg = appleLibNode.get().getConstructorArg();,if (appleLibNode != null ) AppleLibraryDescriptionArg constructorArg = appleLibNode.get().getConstructorArg();
ProjectGenerator.java,BuildTarget buildTarget = buildTargetSourcePath.getTarget();,if (buildTargetSourcePath != null ) BuildTarget buildTarget = buildTargetSourcePath.getTarget();
ProjectGenerator.java,Path cellPath = target.get().getCellPath();,if (target != null ) Path cellPath = target.get().getCellPath();
SwiftAttributeParser.java,SwiftAttributes.Builder builder = SwiftAttributes.builder();,if (SwiftAttributes != null ) SwiftAttributes.Builder builder = SwiftAttributes.builder();
RobolectricTestDescription.java,CellPathResolver cellRoots = context.getCellPathResolver();,if (context != null ) CellPathResolver cellRoots = context.getCellPathResolver();
ApplePlatforms.java,appleCxxPlatform = appleCxxPlatformFlavorDomain.getValue(cxxPlatform.getFlavor());,if (appleCxxPlatformFlavorDomain != null ) appleCxxPlatform = appleCxxPlatformFlavorDomain.getValue(cxxPlatform.getFlavor());
AssumeAndroidPlatform.java,Optional<String> sdkBuildToolsVersion = buildToolsResolver.getBuildToolsVersion();,if (buildToolsResolver != null ) Optional<String> sdkBuildToolsVersion = buildToolsResolver.getBuildToolsVersion();
AbstractSelectorListResolver.java,Selectable selectable = selectableResolver.getSelectable(selectorKey.getBuildTarget());,if (selectableResolver != null ) Selectable selectable = selectableResolver.getSelectable(selectorKey.getBuildTarget());
AbstractParser.java,BuildTarget target = targetAndNode.getFirst();,if (targetAndNode != null ) BuildTarget target = targetAndNode.getFirst();
AcyclicDepthFirstPostOrderTraversalWithPayload.java,Explorable explorable = toExplore.peek();,if (toExplore != null ) Explorable explorable = toExplore.peek();
AcyclicDepthFirstPostOrderTraversalWithPayload.java,int stackSize = toExplore.size();,if (toExplore != null ) int stackSize = toExplore.size();
AcyclicDepthFirstPostOrderTraversalWithPayload.java,T child = iter.next();,if (iter != null ) T child = iter.next();
AbstractParser.java,BuildTarget target = targetAndNode.getKey();,if (targetAndNode != null ) BuildTarget target = targetAndNode.getKey();
PythonTestDescription.java,mainModule = args.getMainModule().get();,if (args != null ) mainModule = args.getMainModule().get();
AndroidResourceDescription.java,AndroidResourceDescriptionArg arg = node.getConstructorArg();,if (node != null ) AndroidResourceDescriptionArg arg = node.getConstructorArg();
AndroidResourceDescription.java,AndroidResourceDescriptionArg arg = node.getConstructorArg();,if (node != null ) AndroidResourceDescriptionArg arg = node.getConstructorArg();
ShallowTargetNodeToBuildRuleTransformer.java,T arg = targetNode.getConstructorArg();,if (targetNode != null ) T arg = targetNode.getConstructorArg();
IjProjectCommandHelper.java,ActionGraphBuilder graphBuilder = result.getActionGraphBuilder();,if (result != null ) ActionGraphBuilder graphBuilder = result.getActionGraphBuilder();
DefaultIjLibraryFactoryResolver.java,BuildRule rule = buildRuleResolver.getRule(targetNode.getBuildTarget());,if (buildRuleResolver != null ) BuildRule rule = buildRuleResolver.getRule(targetNode.getBuildTarget());
RustCompileRule.java,SourcePathResolver resolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver resolver = buildContext.getSourcePathResolver();
RustCompileRule.java,path = resolver.getRelativePath(ent.getKey());,if (resolver != null ) path = resolver.getRelativePath(ent.getKey());
RustCompileRule.java,String metadata = RustCompileUtils.hashForTarget(RustCompileRule.this.getBuildTarget());,if (RustCompileUtils != null ) String metadata = RustCompileUtils.hashForTarget(RustCompileRule.this.getBuildTarget());
RustCompileRule.java,Path root = getProjectFilesystem().getRootPath();,if (getProjectFilesystem() != null ) Path root = getProjectFilesystem().getRootPath();
RustCompileRule.java,Path basePath = getBuildTarget().getBasePath();,if (getBuildTarget() != null ) Path basePath = getBuildTarget().getBasePath();
RustCompileUtils.java,String soname = filename.get();,if (filename != null ) String soname = filename.get();
OsConstraintDetector.java,String name = constraintValue.getBuildTarget().getShortName();,if (constraintValue != null ) String name = constraintValue.getBuildTarget().getShortName();
AcyclicDepthFirstPostOrderTraversal.java,Explorable explorable = toExplore.peek();,if (toExplore != null ) Explorable explorable = toExplore.peek();
AcyclicDepthFirstPostOrderTraversal.java,int stackSize = toExplore.size();,if (toExplore != null ) int stackSize = toExplore.size();
AcyclicDepthFirstPostOrderTraversal.java,T child = iter.next();,if (iter != null ) T child = iter.next();
Genrule.java,SourcePathResolver sourcePathResolver = buildRuleResolver.getSourcePathResolver();,if (buildRuleResolver != null ) SourcePathResolver sourcePathResolver = buildRuleResolver.getSourcePathResolver();
AppleBinaryDescriptionTest.java,SourcePath outputSourcePath = dep.getSourcePathToOutput();,if (dep != null ) SourcePath outputSourcePath = dep.getSourcePathToOutput();
AppleLibraryDescriptionTest.java,SourcePath outputSourcePath = dep.getSourcePathToOutput();,if (dep != null ) SourcePath outputSourcePath = dep.getSourcePathToOutput();
AppleTestDescriptionTest.java,SourcePath outputSourcePath = dep.getSourcePathToOutput();,if (dep != null ) SourcePath outputSourcePath = dep.getSourcePathToOutput();
CxxBinaryDescriptionTest.java,SourcePath outputSourcePath = dep.getSourcePathToOutput();,if (dep != null ) SourcePath outputSourcePath = dep.getSourcePathToOutput();
CxxBinaryDescriptionTest.java,SourcePath outputSourcePath = dep.getSourcePathToOutput();,if (dep != null ) SourcePath outputSourcePath = dep.getSourcePathToOutput();
CxxBinaryDescriptionTest.java,SourcePath outputSourcePath = dep.getSourcePathToOutput();,if (dep != null ) SourcePath outputSourcePath = dep.getSourcePathToOutput();
CxxLibraryDescriptionTest.java,SourcePath outputSourcePath = dep.getSourcePathToOutput();,if (dep != null ) SourcePath outputSourcePath = dep.getSourcePathToOutput();
CxxTestDescriptionTest.java,SourcePath outputSourcePath = dep.getSourcePathToOutput();,if (dep != null ) SourcePath outputSourcePath = dep.getSourcePathToOutput();
CxxTestDescriptionTest.java,SourcePath outputSourcePath = dep.getSourcePathToOutput();,if (dep != null ) SourcePath outputSourcePath = dep.getSourcePathToOutput();
CxxTestDescriptionTest.java,SourcePath outputSourcePath = dep.getSourcePathToOutput();,if (dep != null ) SourcePath outputSourcePath = dep.getSourcePathToOutput();
CxxTestDescriptionTest.java,SourcePath outputSourcePath = dep.getSourcePathToOutput();,if (dep != null ) SourcePath outputSourcePath = dep.getSourcePathToOutput();
GenruleTest.java,SourcePath outputSourcePath = genrule.getSourcePathToOutput();,if (genrule != null ) SourcePath outputSourcePath = genrule.getSourcePathToOutput();
ProjectGenerator.java,String fullTargetName = buildTarget.getFullyQualifiedName();,if (buildTarget != null ) String fullTargetName = buildTarget.getFullyQualifiedName();
ProjectGenerator.java,Path xcodeDir = fs.getBuckPaths().getXcodeDir();,if (fs != null ) Path xcodeDir = fs.getBuckPaths().getXcodeDir();
ProjectGenerator.java,boolean hasSwiftVersionArg = getSwiftVersionForTargetNode(node).isPresent();,if (getSwiftVersionForTargetNode(node) != null ) boolean hasSwiftVersionArg = getSwiftVersionForTargetNode(node).isPresent();
ProjectGenerator.java,BuildTarget buildTarget = appleNode.getBuildTarget();,if (appleNode != null ) BuildTarget buildTarget = appleNode.getBuildTarget();
ProjectGenerator.java,Path link = entry.getKey();,if (entry != null ) Path link = entry.getKey();
ProjectGenerator.java,Path existing = entry.getValue();,if (entry != null ) Path existing = entry.getValue();
ProjectGenerator.java,HeaderMap.Builder headerMapBuilder = new HeaderMap.Builder();,if (HeaderMap != null ) HeaderMap.Builder headerMapBuilder = new HeaderMap.Builder();
ProjectGenerator.java,boolean containsSwift = !nonSourcePaths.isEmpty();,if (!nonSourcePaths != null ) boolean containsSwift = !nonSourcePaths.isEmpty();
ProjectGenerator.java,Path link = headerSymlinkTreeRoot.resolve(entry.getKey());,if (headerSymlinkTreeRoot != null ) Path link = headerSymlinkTreeRoot.resolve(entry.getKey());
ProjectGenerator.java,Path link = headerSymlinkTreeRoot.resolve(entry.getKey());,if (headerSymlinkTreeRoot != null ) Path link = headerSymlinkTreeRoot.resolve(entry.getKey());
ProjectGenerator.java,Path link = entry.getKey();,if (entry != null ) Path link = entry.getKey();
ProjectGenerator.java,Path existing = entry.getValue();,if (entry != null ) Path existing = entry.getValue();
ProjectGenerator.java,HeaderMap.Builder headerMapBuilder = new HeaderMap.Builder();,if (HeaderMap != null ) HeaderMap.Builder headerMapBuilder = new HeaderMap.Builder();
ProjectGenerator.java,boolean containsSwift = !nonSourcePaths.isEmpty();,if (!nonSourcePaths != null ) boolean containsSwift = !nonSourcePaths.isEmpty();
IjModuleGraphFactory.java,CommonDescriptionArg arg = (CommonDescriptionArg) targetNode.getConstructorArg();,if (targetNode != null ) CommonDescriptionArg arg = (CommonDescriptionArg) targetNode.getConstructorArg();
IjModuleGraphFactory.java,CommonDescriptionArg arg = (CommonDescriptionArg) depTargetNode.getConstructorArg();,if (depTargetNode != null ) CommonDescriptionArg arg = (CommonDescriptionArg) depTargetNode.getConstructorArg();
LocalBuildExecutor.java,DefaultProcessExecutor processExecutor = new DefaultProcessExecutor(args.getConsole());,if (DefaultProcessExecutor(args != null ) DefaultProcessExecutor processExecutor = new DefaultProcessExecutor(args.getConsole());
AppendBuildSlaveEventsRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
AppendBuildSlaveEventsResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
BuckVersion.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
BuckVersion.java,struct.gitHash = iprot.readString();,if (iprot != null ) struct.gitHash = iprot.readString();
BuckVersion.java,struct.gitHash = iprot.readString();,if (iprot != null ) struct.gitHash = iprot.readString();
BuildJob.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
BuildJob.java,struct.repository = iprot.readString();,if (iprot != null ) struct.repository = iprot.readString();
BuildJob.java,struct.tenantId = iprot.readString();,if (iprot != null ) struct.tenantId = iprot.readString();
BuildJob.java,struct.statusMessage = iprot.readString();,if (iprot != null ) struct.statusMessage = iprot.readString();
BuildJob.java,struct.buckBuildUuid = iprot.readString();,if (iprot != null ) struct.buckBuildUuid = iprot.readString();
BuildJob.java,struct.username = iprot.readString();,if (iprot != null ) struct.username = iprot.readString();
BuildJob.java,struct.buildLabel = iprot.readString();,if (iprot != null ) struct.buildLabel = iprot.readString();
BuildJob.java,struct.repository = iprot.readString();,if (iprot != null ) struct.repository = iprot.readString();
BuildJob.java,struct.tenantId = iprot.readString();,if (iprot != null ) struct.tenantId = iprot.readString();
BuildJob.java,struct.statusMessage = iprot.readString();,if (iprot != null ) struct.statusMessage = iprot.readString();
BuildJob.java,struct.buckBuildUuid = iprot.readString();,if (iprot != null ) struct.buckBuildUuid = iprot.readString();
BuildJob.java,struct.username = iprot.readString();,if (iprot != null ) struct.username = iprot.readString();
BuildJob.java,struct.buildLabel = iprot.readString();,if (iprot != null ) struct.buildLabel = iprot.readString();
BuildJobState.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
BuildJobStateBuckConfig.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
BuildJobStateBuckConfig.java,struct.architecture = iprot.readString();,if (iprot != null ) struct.architecture = iprot.readString();
BuildJobStateBuckConfig.java,struct.platform = iprot.readString();,if (iprot != null ) struct.platform = iprot.readString();
BuildJobStateBuckConfig.java,struct.architecture = iprot.readString();,if (iprot != null ) struct.architecture = iprot.readString();
BuildJobStateBuckConfig.java,struct.platform = iprot.readString();,if (iprot != null ) struct.platform = iprot.readString();
BuildJobStateBuildTarget.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
BuildJobStateBuildTarget.java,struct.cellName = iprot.readString();,if (iprot != null ) struct.cellName = iprot.readString();
BuildJobStateBuildTarget.java,struct.baseName = iprot.readString();,if (iprot != null ) struct.baseName = iprot.readString();
BuildJobStateBuildTarget.java,struct.shortName = iprot.readString();,if (iprot != null ) struct.shortName = iprot.readString();
BuildJobStateBuildTarget.java,struct.cellName = iprot.readString();,if (iprot != null ) struct.cellName = iprot.readString();
BuildJobStateBuildTarget.java,struct.baseName = iprot.readString();,if (iprot != null ) struct.baseName = iprot.readString();
BuildJobStateBuildTarget.java,struct.shortName = iprot.readString();,if (iprot != null ) struct.shortName = iprot.readString();
BuildJobStateCell.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
BuildJobStateCell.java,struct.nameHint = iprot.readString();,if (iprot != null ) struct.nameHint = iprot.readString();
BuildJobStateCell.java,struct.canonicalName = iprot.readString();,if (iprot != null ) struct.canonicalName = iprot.readString();
BuildJobStateCell.java,struct.nameHint = iprot.readString();,if (iprot != null ) struct.nameHint = iprot.readString();
BuildJobStateCell.java,struct.canonicalName = iprot.readString();,if (iprot != null ) struct.canonicalName = iprot.readString();
BuildJobStateFileHashEntry.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
BuildJobStateFileHashEntry.java,struct.archiveMemberPath = iprot.readString();,if (iprot != null ) struct.archiveMemberPath = iprot.readString();
BuildJobStateFileHashEntry.java,struct.isDirectory = iprot.readBool();,if (iprot != null ) struct.isDirectory = iprot.readBool();
BuildJobStateFileHashEntry.java,struct.pathIsAbsolute = iprot.readBool();,if (iprot != null ) struct.pathIsAbsolute = iprot.readBool();
BuildJobStateFileHashEntry.java,struct.contents = iprot.readBinary();,if (iprot != null ) struct.contents = iprot.readBinary();
BuildJobStateFileHashEntry.java,struct.isExecutable = iprot.readBool();,if (iprot != null ) struct.isExecutable = iprot.readBool();
BuildJobStateFileHashEntry.java,struct.materializeDuringPreloading = iprot.readBool();,if (iprot != null ) struct.materializeDuringPreloading = iprot.readBool();
BuildJobStateFileHashEntry.java,struct.archiveMemberPath = iprot.readString();,if (iprot != null ) struct.archiveMemberPath = iprot.readString();
BuildJobStateFileHashEntry.java,struct.isDirectory = iprot.readBool();,if (iprot != null ) struct.isDirectory = iprot.readBool();
BuildJobStateFileHashEntry.java,struct.pathIsAbsolute = iprot.readBool();,if (iprot != null ) struct.pathIsAbsolute = iprot.readBool();
BuildJobStateFileHashEntry.java,struct.contents = iprot.readBinary();,if (iprot != null ) struct.contents = iprot.readBinary();
BuildJobStateFileHashEntry.java,struct.isExecutable = iprot.readBool();,if (iprot != null ) struct.isExecutable = iprot.readBool();
BuildJobStateFileHashEntry.java,struct.materializeDuringPreloading = iprot.readBool();,if (iprot != null ) struct.materializeDuringPreloading = iprot.readBool();
BuildJobStateFileHashes.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
BuildJobStateTargetGraph.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
BuildJobStateTargetNode.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
BuildJobStateTargetNode.java,struct.rawNode = iprot.readString();,if (iprot != null ) struct.rawNode = iprot.readString();
BuildJobStateTargetNode.java,struct.rawNode = iprot.readString();,if (iprot != null ) struct.rawNode = iprot.readString();
BuildModeInfo.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
BuildModeInfo.java,struct.coordinatorAddress = iprot.readString();,if (iprot != null ) struct.coordinatorAddress = iprot.readString();
BuildModeInfo.java,struct.coordinatorAddress = iprot.readString();,if (iprot != null ) struct.coordinatorAddress = iprot.readString();
BuildRuleFinishedEvent.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
BuildRuleFinishedEvent.java,struct.buildTarget = iprot.readString();,if (iprot != null ) struct.buildTarget = iprot.readString();
BuildRuleFinishedEvent.java,struct.buildTarget = iprot.readString();,if (iprot != null ) struct.buildTarget = iprot.readString();
BuildRuleStartedEvent.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
BuildRuleStartedEvent.java,struct.buildTarget = iprot.readString();,if (iprot != null ) struct.buildTarget = iprot.readString();
BuildRuleStartedEvent.java,struct.buildTarget = iprot.readString();,if (iprot != null ) struct.buildTarget = iprot.readString();
BuildRuleUnlockedEvent.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
BuildRuleUnlockedEvent.java,struct.buildTarget = iprot.readString();,if (iprot != null ) struct.buildTarget = iprot.readString();
BuildRuleUnlockedEvent.java,struct.buildTarget = iprot.readString();,if (iprot != null ) struct.buildTarget = iprot.readString();
BuildSlaveConsoleEvent.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
BuildSlaveConsoleEvent.java,struct.message = iprot.readString();,if (iprot != null ) struct.message = iprot.readString();
BuildSlaveConsoleEvent.java,struct.message = iprot.readString();,if (iprot != null ) struct.message = iprot.readString();
BuildSlaveEvent.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
BuildSlaveEventsQuery.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
BuildSlaveEventsRange.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
BuildSlaveEventsRange.java,struct.success = iprot.readBool();,if (iprot != null ) struct.success = iprot.readBool();
BuildSlaveEventsRange.java,struct.errorMessage = iprot.readString();,if (iprot != null ) struct.errorMessage = iprot.readString();
BuildSlaveEventsRange.java,struct.success = iprot.readBool();,if (iprot != null ) struct.success = iprot.readBool();
BuildSlaveEventsRange.java,struct.errorMessage = iprot.readString();,if (iprot != null ) struct.errorMessage = iprot.readString();
BuildSlaveFinishedStats.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
BuildSlaveFinishedStats.java,struct.hostname = iprot.readString();,if (iprot != null ) struct.hostname = iprot.readString();
BuildSlaveFinishedStats.java,struct.distBuildMode = iprot.readString();,if (iprot != null ) struct.distBuildMode = iprot.readString();
BuildSlaveFinishedStats.java,struct.jobName = iprot.readString();,if (iprot != null ) struct.jobName = iprot.readString();
BuildSlaveFinishedStats.java,struct.hostname = iprot.readString();,if (iprot != null ) struct.hostname = iprot.readString();
BuildSlaveFinishedStats.java,struct.distBuildMode = iprot.readString();,if (iprot != null ) struct.distBuildMode = iprot.readString();
BuildSlaveFinishedStats.java,struct.jobName = iprot.readString();,if (iprot != null ) struct.jobName = iprot.readString();
BuildSlaveInfo.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
BuildSlaveInfo.java,struct.hostname = iprot.readString();,if (iprot != null ) struct.hostname = iprot.readString();
BuildSlaveInfo.java,struct.logDirZipWritten = iprot.readBool();,if (iprot != null ) struct.logDirZipWritten = iprot.readBool();
BuildSlaveInfo.java,struct.hostname = iprot.readString();,if (iprot != null ) struct.hostname = iprot.readString();
BuildSlaveInfo.java,struct.logDirZipWritten = iprot.readBool();,if (iprot != null ) struct.logDirZipWritten = iprot.readBool();
BuildSlavePerStageTimingStats.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
BuildSlaveRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
BuildSlaveResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
BuildSlaveResponse.java,struct.wasSuccessful = iprot.readBool();,if (iprot != null ) struct.wasSuccessful = iprot.readBool();
BuildSlaveResponse.java,struct.errorMessage = iprot.readString();,if (iprot != null ) struct.errorMessage = iprot.readString();
BuildSlaveResponse.java,struct.wasSuccessful = iprot.readBool();,if (iprot != null ) struct.wasSuccessful = iprot.readBool();
BuildSlaveResponse.java,struct.errorMessage = iprot.readString();,if (iprot != null ) struct.errorMessage = iprot.readString();
BuildSlaveRunId.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
BuildSlaveRunId.java,struct.id = iprot.readString();,if (iprot != null ) struct.id = iprot.readString();
BuildSlaveRunId.java,struct.id = iprot.readString();,if (iprot != null ) struct.id = iprot.readString();
BuildSlaveStatus.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
BuildStatusRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
BuildStatusResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
CASContainsRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
CASContainsResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
CacheRateStats.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
CoordinatorBuildProgress.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
CoordinatorBuildProgressEvent.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
CoordinatorIsAliveRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
CoordinatorIsAliveResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
CoordinatorService.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
CoordinatorService.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
CoordinatorService.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
CoordinatorService.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
CreateBuildRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
CreateBuildRequest.java,struct.repository = iprot.readString();,if (iprot != null ) struct.repository = iprot.readString();
CreateBuildRequest.java,struct.tenantId = iprot.readString();,if (iprot != null ) struct.tenantId = iprot.readString();
CreateBuildRequest.java,struct.buckBuildUuid = iprot.readString();,if (iprot != null ) struct.buckBuildUuid = iprot.readString();
CreateBuildRequest.java,struct.username = iprot.readString();,if (iprot != null ) struct.username = iprot.readString();
CreateBuildRequest.java,struct.buildLabel = iprot.readString();,if (iprot != null ) struct.buildLabel = iprot.readString();
CreateBuildRequest.java,struct.repository = iprot.readString();,if (iprot != null ) struct.repository = iprot.readString();
CreateBuildRequest.java,struct.tenantId = iprot.readString();,if (iprot != null ) struct.tenantId = iprot.readString();
CreateBuildRequest.java,struct.buckBuildUuid = iprot.readString();,if (iprot != null ) struct.buckBuildUuid = iprot.readString();
CreateBuildRequest.java,struct.username = iprot.readString();,if (iprot != null ) struct.username = iprot.readString();
CreateBuildRequest.java,struct.buildLabel = iprot.readString();,if (iprot != null ) struct.buildLabel = iprot.readString();
CreateBuildResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
CreateBuildResponse.java,struct.wasAccepted = iprot.readBool();,if (iprot != null ) struct.wasAccepted = iprot.readBool();
CreateBuildResponse.java,struct.rejectionMessage = iprot.readString();,if (iprot != null ) struct.rejectionMessage = iprot.readString();
CreateBuildResponse.java,struct.wasAccepted = iprot.readBool();,if (iprot != null ) struct.wasAccepted = iprot.readBool();
CreateBuildResponse.java,struct.rejectionMessage = iprot.readString();,if (iprot != null ) struct.rejectionMessage = iprot.readString();
Digest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
Digest.java,struct.hash = iprot.readString();,if (iprot != null ) struct.hash = iprot.readString();
Digest.java,struct.hash = iprot.readString();,if (iprot != null ) struct.hash = iprot.readString();
DigestAndContent.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
DigestAndContent.java,struct.content = iprot.readBinary();,if (iprot != null ) struct.content = iprot.readBinary();
DigestAndContent.java,struct.content = iprot.readBinary();,if (iprot != null ) struct.content = iprot.readBinary();
EnqueueMinionsRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
EnqueueMinionsRequest.java,struct.minionQueue = iprot.readString();,if (iprot != null ) struct.minionQueue = iprot.readString();
EnqueueMinionsRequest.java,struct.buildLabel = iprot.readString();,if (iprot != null ) struct.buildLabel = iprot.readString();
EnqueueMinionsRequest.java,struct.region = iprot.readString();,if (iprot != null ) struct.region = iprot.readString();
EnqueueMinionsRequest.java,struct.minionQueue = iprot.readString();,if (iprot != null ) struct.minionQueue = iprot.readString();
EnqueueMinionsRequest.java,struct.buildLabel = iprot.readString();,if (iprot != null ) struct.buildLabel = iprot.readString();
EnqueueMinionsRequest.java,struct.region = iprot.readString();,if (iprot != null ) struct.region = iprot.readString();
EnqueueMinionsResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
FetchBuildGraphRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
FetchBuildGraphResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
FetchBuildGraphResponse.java,struct.buildGraph = iprot.readBinary();,if (iprot != null ) struct.buildGraph = iprot.readBinary();
FetchBuildGraphResponse.java,struct.buildGraph = iprot.readBinary();,if (iprot != null ) struct.buildGraph = iprot.readBinary();
FetchBuildSlaveFinishedStatsRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
FetchBuildSlaveFinishedStatsResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
FetchBuildSlaveFinishedStatsResponse.java,struct.buildSlaveFinishedStats = iprot.readBinary();,if (iprot != null ) struct.buildSlaveFinishedStats = iprot.readBinary();
FetchBuildSlaveFinishedStatsResponse.java,struct.buildSlaveFinishedStats = iprot.readBinary();,if (iprot != null ) struct.buildSlaveFinishedStats = iprot.readBinary();
FetchBuildSlaveStatusRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
FetchBuildSlaveStatusResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
FetchBuildSlaveStatusResponse.java,struct.buildSlaveStatus = iprot.readBinary();,if (iprot != null ) struct.buildSlaveStatus = iprot.readBinary();
FetchBuildSlaveStatusResponse.java,struct.buildSlaveStatus = iprot.readBinary();,if (iprot != null ) struct.buildSlaveStatus = iprot.readBinary();
FetchSourceFilesRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
FetchSourceFilesResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
FileInfo.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
FileInfo.java,struct.contentHash = iprot.readString();,if (iprot != null ) struct.contentHash = iprot.readString();
FileInfo.java,struct.content = iprot.readBinary();,if (iprot != null ) struct.content = iprot.readBinary();
FileInfo.java,struct.contentHash = iprot.readString();,if (iprot != null ) struct.contentHash = iprot.readString();
FileInfo.java,struct.content = iprot.readBinary();,if (iprot != null ) struct.content = iprot.readBinary();
FileMaterializationStats.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
GetAllAvailableCapacityRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
GetAllAvailableCapacityResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
GetAvailableCapacityRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
GetAvailableCapacityResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
GetWorkRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
GetWorkRequest.java,struct.minionId = iprot.readString();,if (iprot != null ) struct.minionId = iprot.readString();
GetWorkRequest.java,struct.minionId = iprot.readString();,if (iprot != null ) struct.minionId = iprot.readString();
GetWorkResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
GetWorkResponse.java,struct.continueBuilding = iprot.readBool();,if (iprot != null ) struct.continueBuilding = iprot.readBool();
GetWorkResponse.java,struct.continueBuilding = iprot.readBool();,if (iprot != null ) struct.continueBuilding = iprot.readBool();
HealthCheckStats.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
HealthCheckStats.java,struct.slowestHeartbeatMinionId = iprot.readString();,if (iprot != null ) struct.slowestHeartbeatMinionId = iprot.readString();
HealthCheckStats.java,struct.slowestHeartbeatMinionId = iprot.readString();,if (iprot != null ) struct.slowestHeartbeatMinionId = iprot.readString();
IAmAliveRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
IAmAliveRequest.java,struct.minionId = iprot.readString();,if (iprot != null ) struct.minionId = iprot.readString();
IAmAliveRequest.java,struct.minionId = iprot.readString();,if (iprot != null ) struct.minionId = iprot.readString();
IAmAliveResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
LogDir.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
LogDir.java,struct.data = iprot.readBinary();,if (iprot != null ) struct.data = iprot.readBinary();
LogDir.java,struct.errorMessage = iprot.readString();,if (iprot != null ) struct.errorMessage = iprot.readString();
LogDir.java,struct.data = iprot.readBinary();,if (iprot != null ) struct.data = iprot.readBinary();
LogDir.java,struct.errorMessage = iprot.readString();,if (iprot != null ) struct.errorMessage = iprot.readString();
LogLineBatch.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
LogLineBatchRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
MinionRequirement.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
MinionRequirements.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
MultiGetBuildSlaveEventsRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
MultiGetBuildSlaveEventsResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
MultiGetBuildSlaveLogDirRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
MultiGetBuildSlaveLogDirResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
MultiGetBuildSlaveRealTimeLogsRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
MultiGetBuildSlaveRealTimeLogsResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ObtainAllAvailableCapacityRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ObtainAllAvailableCapacityResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ObtainAvailableCapacityRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ObtainAvailableCapacityResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ObtainCapacityRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ObtainCapacityResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
OrderedStringMapEntry.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
OrderedStringMapEntry.java,struct.key = iprot.readString();,if (iprot != null ) struct.key = iprot.readString();
OrderedStringMapEntry.java,struct.value = iprot.readString();,if (iprot != null ) struct.value = iprot.readString();
OrderedStringMapEntry.java,struct.key = iprot.readString();,if (iprot != null ) struct.key = iprot.readString();
OrderedStringMapEntry.java,struct.value = iprot.readString();,if (iprot != null ) struct.value = iprot.readString();
PathInfo.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
PathInfo.java,struct.contentHash = iprot.readString();,if (iprot != null ) struct.contentHash = iprot.readString();
PathInfo.java,struct.path = iprot.readString();,if (iprot != null ) struct.path = iprot.readString();
PathInfo.java,struct.contentHash = iprot.readString();,if (iprot != null ) struct.contentHash = iprot.readString();
PathInfo.java,struct.path = iprot.readString();,if (iprot != null ) struct.path = iprot.readString();
PathWithUnixSeparators.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
PathWithUnixSeparators.java,struct.path = iprot.readString();,if (iprot != null ) struct.path = iprot.readString();
PathWithUnixSeparators.java,struct.path = iprot.readString();,if (iprot != null ) struct.path = iprot.readString();
RemoteExecutionContainsRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
RemoteExecutionContainsResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
RemoteExecutionFetchRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
RemoteExecutionFetchResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
RemoteExecutionStoreRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
RemoteExecutionStoreResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ReportCoordinatorAliveRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ReportCoordinatorAliveResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ReportMinionAliveRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ReportMinionAliveRequest.java,struct.minionId = iprot.readString();,if (iprot != null ) struct.minionId = iprot.readString();
ReportMinionAliveRequest.java,struct.minionId = iprot.readString();,if (iprot != null ) struct.minionId = iprot.readString();
ReportMinionAliveResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ReturnCapacityRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ReturnCapacityResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
RuleKeyCalculatedEvent.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
RuleKeyCalculatedEvent.java,struct.buildTarget = iprot.readString();,if (iprot != null ) struct.buildTarget = iprot.readString();
RuleKeyCalculatedEvent.java,struct.defaultRuleKey = iprot.readString();,if (iprot != null ) struct.defaultRuleKey = iprot.readString();
RuleKeyCalculatedEvent.java,struct.buildTarget = iprot.readString();,if (iprot != null ) struct.buildTarget = iprot.readString();
RuleKeyCalculatedEvent.java,struct.defaultRuleKey = iprot.readString();,if (iprot != null ) struct.defaultRuleKey = iprot.readString();
ScribeLine.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ScribeLine.java,struct.line = iprot.readString();,if (iprot != null ) struct.line = iprot.readString();
ScribeLine.java,struct.line = iprot.readString();,if (iprot != null ) struct.line = iprot.readString();
SequencedBuildSlaveEvent.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
SequencedBuildSlaveEvent.java,struct.event = iprot.readBinary();,if (iprot != null ) struct.event = iprot.readBinary();
SequencedBuildSlaveEvent.java,struct.event = iprot.readBinary();,if (iprot != null ) struct.event = iprot.readBinary();
SetBuckDotFilePathsRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
SetBuckVersionRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
SetCoordinatorRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
SetCoordinatorRequest.java,struct.coordinatorHostname = iprot.readString();,if (iprot != null ) struct.coordinatorHostname = iprot.readString();
SetCoordinatorRequest.java,struct.coordinatorHostname = iprot.readString();,if (iprot != null ) struct.coordinatorHostname = iprot.readString();
SetCoordinatorResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
SetFinalBuildStatusRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
SetFinalBuildStatusRequest.java,struct.buildStatusMessage = iprot.readString();,if (iprot != null ) struct.buildStatusMessage = iprot.readString();
SetFinalBuildStatusRequest.java,struct.buildStatusMessage = iprot.readString();,if (iprot != null ) struct.buildStatusMessage = iprot.readString();
SetFinalBuildStatusResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
SlaveStream.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
StampedeId.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
StampedeId.java,struct.id = iprot.readString();,if (iprot != null ) struct.id = iprot.readString();
StampedeId.java,struct.id = iprot.readString();,if (iprot != null ) struct.id = iprot.readString();
StartBuildRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
StartBuildRequest.java,struct.enqueueJob = iprot.readBool();,if (iprot != null ) struct.enqueueJob = iprot.readBool();
StartBuildRequest.java,struct.enqueueJob = iprot.readBool();,if (iprot != null ) struct.enqueueJob = iprot.readBool();
StartBuildResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
StoreBuildGraphRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
StoreBuildGraphRequest.java,struct.buildGraph = iprot.readBinary();,if (iprot != null ) struct.buildGraph = iprot.readBinary();
StoreBuildGraphRequest.java,struct.buildGraph = iprot.readBinary();,if (iprot != null ) struct.buildGraph = iprot.readBinary();
StoreBuildSlaveFinishedStatsRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
StoreBuildSlaveFinishedStatsRequest.java,struct.buildSlaveFinishedStats = iprot.readBinary();,if (iprot != null ) struct.buildSlaveFinishedStats = iprot.readBinary();
StoreBuildSlaveFinishedStatsRequest.java,struct.buildSlaveFinishedStats = iprot.readBinary();,if (iprot != null ) struct.buildSlaveFinishedStats = iprot.readBinary();
StoreBuildSlaveFinishedStatsResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
StoreLocalChangesRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
StreamLogs.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
StreamLogs.java,struct.errorMessage = iprot.readString();,if (iprot != null ) struct.errorMessage = iprot.readString();
StreamLogs.java,struct.errorMessage = iprot.readString();,if (iprot != null ) struct.errorMessage = iprot.readString();
UpdateBuildSlaveBuildStatusRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
UpdateBuildSlaveBuildStatusResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
UpdateBuildSlaveStatusRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
UpdateBuildSlaveStatusRequest.java,struct.buildSlaveStatus = iprot.readBinary();,if (iprot != null ) struct.buildSlaveStatus = iprot.readBinary();
UpdateBuildSlaveStatusRequest.java,struct.buildSlaveStatus = iprot.readBinary();,if (iprot != null ) struct.buildSlaveStatus = iprot.readBinary();
UpdateBuildSlaveStatusResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
WorkUnit.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
FakeFrontendHttpServer.java,this.port = this.server.getAddress().getPort();,if (this != null ) this.port = this.server.getAddress().getPort();
FakeFrontendHttpServer.java,byte[] requestBytes = ByteStreams.toByteArray(httpExchange.getRequestBody());,if (ByteStreams != null ) byte[] requestBytes = ByteStreams.toByteArray(httpExchange.getRequestBody());
RuleBasedMultiPlatformResolverTest.java,ImmutableList<Platform> nestedPlatforms = platform.getNestedPlatforms();,if (platform != null ) ImmutableList<Platform> nestedPlatforms = platform.getNestedPlatforms();
EdenProjectFilesystemDelegate.java,this.bindMounts = mount.getBindMounts();,if (mount != null ) this.bindMounts = mount.getBindMounts();
ReconnectingEdenClient.java,lastSuccessfulRequest = clock.currentTimeMillis();,if (clock != null ) lastSuccessfulRequest = clock.currentTimeMillis();
EdenProjectFilesystemDelegateTest.java,FileSystem fs = Jimfs.newFileSystem(Configuration.unix());,if (Jimfs != null ) FileSystem fs = Jimfs.newFileSystem(Configuration.unix());
MountsCommand.java,List<Path> bindMounts = mount.getBindMounts();,if (mount != null ) List<Path> bindMounts = mount.getBindMounts();
Genrule.java,this.isWorkerGenrule = this.isWorkerGenrule();,if (this != null ) this.isWorkerGenrule = this.isWorkerGenrule();
Genrule.java,AndroidSdkLocation androidSdkLocation = tools.getAndroidSdkLocation();,if (tools != null ) AndroidSdkLocation androidSdkLocation = tools.getAndroidSdkLocation();
Genrule.java,Optional<AndroidNdk> androidNdk = tools.getAndroidNdk();,if (tools != null ) Optional<AndroidNdk> androidNdk = tools.getAndroidNdk();
Genrule.java,AndroidPlatformTarget androidPlatformTarget = tools.getAndroidPlatformTarget();,if (tools != null ) AndroidPlatformTarget androidPlatformTarget = tools.getAndroidPlatformTarget();
Genrule.java,TargetConfiguration targetConfiguration = getBuildTarget().getTargetConfiguration();,if (getBuildTarget() != null ) TargetConfiguration targetConfiguration = getBuildTarget().getTargetConfiguration();
Genrule.java,SourcePathResolver sourcePathResolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver sourcePathResolver = context.getSourcePathResolver();
Genrule.java,Path basePath = getBuildTarget().getBasePath();,if (getBuildTarget() != null ) Path basePath = getBuildTarget().getBasePath();
Genrule.java,Path canonicalPath = absolutePath.normalize();,if (absolutePath != null ) Path canonicalPath = absolutePath.normalize();
Genrule.java,localPath = canonicalPath.getFileName();,if (canonicalPath != null ) localPath = canonicalPath.getFileName();
GenruleTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
GenruleTest.java,SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();,if (graphBuilder != null ) SourcePathResolver pathResolver = graphBuilder.getSourcePathResolver();
GenruleTest.java,ImmutableList<Step> commands = builder.build();,if (builder != null ) ImmutableList<Step> commands = builder.build();
RemoteBuildRuleSynchronizer.java,List<TimestampedBuildRuleCacheSyncFuture> buildRulesReadyForCacheCheck = Lists.newArrayList();,if (Lists != null ) List<TimestampedBuildRuleCacheSyncFuture> buildRulesReadyForCacheCheck = Lists.newArrayList();
RemoteBuildRuleSynchronizer.java,long currentTimeMillis = clock.currentTimeMillis();,if (clock != null ) long currentTimeMillis = clock.currentTimeMillis();
RemoteBuildRuleSynchronizer.java,String buildTarget = buildRule.getFullyQualifiedName();,if (buildRule != null ) String buildTarget = buildRule.getFullyQualifiedName();
RemoteBuildRuleSynchronizer.java,long now = clock.currentTimeMillis();,if (clock != null ) long now = clock.currentTimeMillis();
RemoteBuildRuleSynchronizer.java,SettableFuture<Unit> backOffFuture = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<Unit> backOffFuture = SettableFuture.create();
RemoteBuildRuleSynchronizer.java,remoteBuildFinishedTimestamp = clock.currentTimeMillis();,if (clock != null ) remoteBuildFinishedTimestamp = clock.currentTimeMillis();
CachingBuildEngineInitializableFromDiskTest.java,Object firstState = buildRule.getBuildOutputInitializer().getBuildOutput();,if (buildRule != null ) Object firstState = buildRule.getBuildOutputInitializer().getBuildOutput();
CachingBuildEngineInitializableFromDiskTest.java,Object secondState = buildRule.getBuildOutputInitializer().getBuildOutput();,if (buildRule != null ) Object secondState = buildRule.getBuildOutputInitializer().getBuildOutput();
CachingBuildEngineInitializableFromDiskTest.java,Object firstState = buildRule.getBuildOutputInitializer().getBuildOutput();,if (buildRule != null ) Object firstState = buildRule.getBuildOutputInitializer().getBuildOutput();
CachingBuildEngineInitializableFromDiskTest.java,Object secondState = buildRule.getBuildOutputInitializer().getBuildOutput();,if (buildRule != null ) Object secondState = buildRule.getBuildOutputInitializer().getBuildOutput();
CachingBuildEngineInitializableFromDiskTest.java,Object firstState = buildRule.getBuildOutputInitializer().getBuildOutput();,if (buildRule != null ) Object firstState = buildRule.getBuildOutputInitializer().getBuildOutput();
CachingBuildEngineInitializableFromDiskTest.java,Object secondState = buildRule.getBuildOutputInitializer().getBuildOutput();,if (buildRule != null ) Object secondState = buildRule.getBuildOutputInitializer().getBuildOutput();
CachingBuildEngineInitializableFromDiskTest.java,Object firstState = buildRule.getBuildOutputInitializer().getBuildOutput();,if (buildRule != null ) Object firstState = buildRule.getBuildOutputInitializer().getBuildOutput();
CachingBuildEngineInitializableFromDiskTest.java,Object secondState = buildRule.getBuildOutputInitializer().getBuildOutput();,if (buildRule != null ) Object secondState = buildRule.getBuildOutputInitializer().getBuildOutput();
BuildCommandIntegrationTest.java,ImmutableSet<BuildTarget> targets = workspace.getBuildLog().getAllTargets();,if (workspace != null ) ImmutableSet<BuildTarget> targets = workspace.getBuildLog().getAllTargets();
BuildCommandIntegrationTest.java,Platform platform = Platform.detect();,if (Platform != null ) Platform platform = Platform.detect();
ClientStatsTracker.java,Stopwatch stopwatch = Stopwatch.createStarted();,if (Stopwatch != null ) Stopwatch stopwatch = Stopwatch.createStarted();
DistBuildArtifactCacheImpl.java,"ruleKeys = ruleKeys.subList(numKeysInCurrentRequest, ruleKeys.size());","if (ruleKeys != null ) ruleKeys = ruleKeys.subList(numKeysInCurrentRequest, ruleKeys.size());"
DistBuildArtifactCacheImpl.java,releasedFile = tempFile.release();,if (tempFile != null ) releasedFile = tempFile.release();
DistBuildArtifactCacheImpl.java,Stopwatch stopwatch = Stopwatch.createStarted();,if (Stopwatch != null ) Stopwatch stopwatch = Stopwatch.createStarted();
DistBuildCellIndexer.java,i = index.size();,if (index != null ) i = index.size();
DistBuildConfig.java,RawConfig.Builder rawConfigBuilder = RawConfig.builder();,if (RawConfig != null ) RawConfig.Builder rawConfigBuilder = RawConfig.builder();
DistBuildConfig.java,OkHttpClient.Builder clientBuilder = new OkHttpClient.Builder();,if (OkHttpClient != null ) OkHttpClient.Builder clientBuilder = new OkHttpClient.Builder();
DistBuildConfig.java,Connection connection = chain.connection();,if (chain != null ) Connection connection = chain.connection();
DistBuildConfig.java,Response response = chain.proceed(chain.request());,if (chain != null ) Response response = chain.proceed(chain.request());
DistBuildFileHashes.java,Path fsRootPath = originalCache.getFilesystem().getRootPath();,if (originalCache != null ) Path fsRootPath = originalCache.getFilesystem().getRootPath();
DistBuildPostBuildAnalysis.java,PerRuleCumulativeStats.Builder result = PerRuleCumulativeStats.builder();,if (PerRuleCumulativeStats != null ) PerRuleCumulativeStats.Builder result = PerRuleCumulativeStats.builder();
DistBuildPostBuildAnalysis.java,BuildRuleStats.Builder remoteBuild = BuildRuleStats.builder();,if (BuildRuleStats != null ) BuildRuleStats.Builder remoteBuild = BuildRuleStats.builder();
DistBuildPostBuildAnalysis.java,AnalysisResults.Builder results = AnalysisResults.builder();,if (AnalysisResults != null ) AnalysisResults.Builder results = AnalysisResults.builder();
DistBuildPostBuildAnalysis.java,BuildRuleMachineLogEntry.Builder builder = BuildRuleMachineLogEntry.builder();,if (BuildRuleMachineLogEntry != null ) BuildRuleMachineLogEntry.Builder builder = BuildRuleMachineLogEntry.builder();
DistBuildService.java,CreateBuildResponse createBuildResponse = response.getCreateBuildResponse();,if (response != null ) CreateBuildResponse createBuildResponse = response.getCreateBuildResponse();
DistBuildService.java,BuildJob job = response.getStartBuildResponse().getBuildJob();,if (response != null ) BuildJob job = response.getStartBuildResponse().getBuildJob();
DistBuildService.java,BuildJob job = response.getBuildStatusResponse().getBuildJob();,if (response != null ) BuildJob job = response.getBuildStatusResponse().getBuildJob();
DistBuildService.java,FetchSourceFilesResponse fetchSourceFilesResponse = response.getFetchSourceFilesResponse();,if (response != null ) FetchSourceFilesResponse fetchSourceFilesResponse = response.getFetchSourceFilesResponse();
DistBuildService.java,String fileName = path.getFileName().toString();,if (path != null ) String fileName = path.getFileName().toString();
DistBuildService.java,Stopwatch watch = Stopwatch.createStarted();,if (Stopwatch != null ) Stopwatch watch = Stopwatch.createStarted();
DistBuildService.java,List<BuildSlaveEventWrapper> result = Lists.newArrayList();,if (Lists != null ) List<BuildSlaveEventWrapper> result = Lists.newArrayList();
DistBuildState.java,int cellIndex = input.getCellIndex();,if (input != null ) int cellIndex = input.getCellIndex();
DistBuildState.java,ProjectFilesystem rootCellFilesystem = rootCell.getFilesystem();,if (rootCell != null ) ProjectFilesystem rootCellFilesystem = rootCell.getFilesystem();
DistBuildState.java,BuildJobStateCell remoteCell = remoteCellEntry.getValue();,if (remoteCellEntry != null ) BuildJobStateCell remoteCell = remoteCellEntry.getValue();
DistBuildState.java,Path cellRoot = uniqueBuildRoot.resolve(remoteCell.getNameHint());,if (uniqueBuildRoot != null ) Path cellRoot = uniqueBuildRoot.resolve(remoteCell.getNameHint());
DistBuildState.java,RawConfig.Builder rawConfigBuilder = RawConfig.builder();,if (RawConfig != null ) RawConfig.Builder rawConfigBuilder = RawConfig.builder();
DistBuildState.java,BuildJobStateFileHashes remoteFileHashes = fileHashes.get(decoratedCache.getFilesystem());,if (fileHashes != null ) BuildJobStateFileHashes remoteFileHashes = fileHashes.get(decoratedCache.getFilesystem());
DistBuildState.java,BuildJobStateFileHashes remoteFileHashes = fileHashes.get(decoratedCache.getFilesystem());,if (fileHashes != null ) BuildJobStateFileHashes remoteFileHashes = fileHashes.get(decoratedCache.getFilesystem());
DistBuildState.java,DistBuildConfig remoteConfig = new DistBuildConfig(getRootCell().getBuckConfig());,if (DistBuildConfig(getRootCell() != null ) DistBuildConfig remoteConfig = new DistBuildConfig(getRootCell().getBuckConfig());
DistBuildState.java,boolean materializeAllFilesDuringPreload = !remoteConfig.materializeSourceFilesOnDemand();,if (!remoteConfig != null ) boolean materializeAllFilesDuringPreload = !remoteConfig.materializeSourceFilesOnDemand();
DistBuildTargetGraphCodec.java,serializedTargetNodes = Futures.allAsList(targetNodeFutures).get();,if (Futures != null ) serializedTargetNodes = Futures.allAsList(targetNodeFutures).get();
DistBuildTargetGraphCodec.java,ProjectFilesystem projectFilesystem = targetNode.getFilesystem();,if (targetNode != null ) ProjectFilesystem projectFilesystem = targetNode.getFilesystem();
DistBuildUtil.java,BuildSlaveConsoleEvent consoleEvent = event.getConsoleEvent();,if (event != null ) BuildSlaveConsoleEvent consoleEvent = event.getConsoleEvent();
DistBuildUtil.java,addr = InetAddress.getLocalHost();,if (InetAddress != null ) addr = InetAddress.getLocalHost();
DistBuildUtil.java,hostname = addr.getHostName();,if (addr != null ) hostname = addr.getHostName();
DistributedCellProviderFactory.java,ImmutableSet<String> declaredCellNames = ImmutableSet.copyOf(cellPaths.keySet());,if (ImmutableSet != null ) ImmutableSet<String> declaredCellNames = ImmutableSet.copyOf(cellPaths.keySet());
DistributedCellProviderFactory.java,Path rootCellPath = rootCell.getFilesystem().getRootPath();,if (rootCell != null ) Path rootCellPath = rootCell.getFilesystem().getRootPath();
DistributedCellProviderFactory.java,Path currentCellRoot = cellParam.getFilesystem().getRootPath();,if (cellParam != null ) Path currentCellRoot = cellParam.getFilesystem().getRootPath();
MaterializerDummyFileHashCache.java,this.projectFilesystem = delegate.getFilesystem();,if (delegate != null ) this.projectFilesystem = delegate.getFilesystem();
MaterializerDummyFileHashCache.java,Path relPath = projectFilesystem.getPathRelativeToProjectRoot(absPath).get();,if (projectFilesystem != null ) Path relPath = projectFilesystem.getPathRelativeToProjectRoot(absPath).get();
MaterializerDummyFileHashCache.java,relPath = remainingPaths.pop();,if (remainingPaths != null ) relPath = remainingPaths.pop();
MaterializerDummyFileHashCache.java,Path absPath = projectFilesystem.resolve(relPath).toAbsolutePath();,if (projectFilesystem != null ) Path absPath = projectFilesystem.resolve(relPath).toAbsolutePath();
MaterializerDummyFileHashCache.java,Path relPathToChild = projectFilesystem.getPathRelativeToProjectRoot(absPathToChild).get();,if (projectFilesystem != null ) Path relPathToChild = projectFilesystem.getPathRelativeToProjectRoot(absPathToChild).get();
MaterializerDummyFileHashCache.java,Path absPath = projectFilesystem.resolve(relPath).toAbsolutePath();,if (projectFilesystem != null ) Path absPath = projectFilesystem.resolve(relPath).toAbsolutePath();
MultiSourceContentsProvider.java,Stopwatch remoteMaterializationStopwatch = Stopwatch.createStarted();,if (Stopwatch != null ) Stopwatch remoteMaterializationStopwatch = Stopwatch.createStarted();
RecordingProjectFileHashCache.java,this.allRecordedPathsAreAbsolute = !distBuildConfig.isPresent();,if (!distBuildConfig != null ) this.allRecordedPathsAreAbsolute = !distBuildConfig.isPresent();
RecordingProjectFileHashCache.java,this.projectFilesystem = delegate.getFilesystem();,if (delegate != null ) this.projectFilesystem = delegate.getFilesystem();
RecordingProjectFileHashCache.java,this.cellPaths = cellPaths.build();,if (cellPaths != null ) this.cellPaths = cellPaths.build();
RecordingProjectFileHashCache.java,Path nextPath = remainingPaths.remove();,if (remainingPaths != null ) Path nextPath = remainingPaths.remove();
RecordingProjectFileHashCache.java,Optional<HashCode> hashCode = Optional.empty();,if (Optional != null ) Optional<HashCode> hashCode = Optional.empty();
RecordingProjectFileHashCache.java,List<PathWithUnixSeparators> children = ImmutableList.of();,if (ImmutableList != null ) List<PathWithUnixSeparators> children = ImmutableList.of();
RecordingProjectFileHashCache.java,Path symlinkAbsPath = MorePaths.normalize(symlinkPath.toAbsolutePath());,if (MorePaths != null ) Path symlinkAbsPath = MorePaths.normalize(symlinkPath.toAbsolutePath());
RecordingProjectFileHashCache.java,int projectRootLength = cellRoot.get().getNameCount();,if (cellRoot != null ) int projectRootLength = cellRoot.get().getNameCount();
RecordingProjectFileHashCache.java,int projectPathComponents = projectFilesystem.getRootPath().getNameCount();,if (projectFilesystem != null ) int projectPathComponents = projectFilesystem.getRootPath().getNameCount();
RecordingProjectFileHashCache.java,pathEndIndex <= symlinkPath.getNameCount();,if (symlinkPath != null ) pathEndIndex <= symlinkPath.getNameCount();
RecordingProjectFileHashCache.java,boolean realPathOutsideProject = !getCellRootForAbsolutePath(realSubpath).isPresent();,if (!getCellRootForAbsolutePath(realSubpath) != null ) boolean realPathOutsideProject = !getCellRootForAbsolutePath(realSubpath).isPresent();
RecordingProjectFileHashCache.java,Path absPath = projectFilesystem.resolve(relPath).toAbsolutePath();,if (projectFilesystem != null ) Path absPath = projectFilesystem.resolve(relPath).toAbsolutePath();
RemoteStateBasedFileHashCache.java,this.filesystem = delegate.getFilesystem();,if (delegate != null ) this.filesystem = delegate.getFilesystem();
RuleKeyUtils.java,BuildRule buildRule = rulesToProcess.remove();,if (rulesToProcess != null ) BuildRule buildRule = rulesToProcess.remove();
ServerContentsProvider.java,multiFetchFuture = SettableFuture.create();,if (SettableFuture != null ) multiFetchFuture = SettableFuture.create();
ServerContentsProvider.java,Stopwatch stopwatch = Stopwatch.createStarted();,if (Stopwatch != null ) Stopwatch stopwatch = Stopwatch.createStarted();
ServerContentsProvider.java,Stopwatch stopwatch = Stopwatch.createStarted();,if (Stopwatch != null ) Stopwatch stopwatch = Stopwatch.createStarted();
ServerContentsProvider.java,multiFetchFuture = SettableFuture.create();,if (SettableFuture != null ) multiFetchFuture = SettableFuture.create();
ActiveCoordinatorService.java,String minionId = request.getMinionId();,if (request != null ) String minionId = request.getMinionId();
CacheOptimizedBuildTargetsQueueFactory.java,BuildRule rule = buildRulesToProcess.remove();,if (buildRulesToProcess != null ) BuildRule rule = buildRulesToProcess.remove();
CacheOptimizedBuildTargetsQueueFactory.java,BuildRule buildRule = rulesToProcess.remove();,if (rulesToProcess != null ) BuildRule buildRule = rulesToProcess.remove();
CacheOptimizedBuildTargetsQueueFactory.java,String target = targetsToProcess.remove();,if (targetsToProcess != null ) String target = targetsToProcess.remove();
CacheOptimizedBuildTargetsQueueFactory.java,String target = buildRule.getFullyQualifiedName();,if (buildRule != null ) String target = buildRule.getFullyQualifiedName();
CoordinatorEventListener.java,BuildModeInfo buildModeInfo = buildJob.getBuildModeInfo();,if (buildJob != null ) BuildModeInfo buildModeInfo = buildJob.getBuildModeInfo();
CoordinatorEventListener.java,MinionType minionType = requirement.getMinionType();,if (requirement != null ) MinionType minionType = requirement.getMinionType();
CoordinatorEventListener.java,int requiredCount = requirement.getRequiredCount();,if (requirement != null ) int requiredCount = requirement.getRequiredCount();
CoordinatorEventListener.java,int buildExitCode = exitState.getExitCode();,if (exitState != null ) int buildExitCode = exitState.getExitCode();
CoordinatorModeRunner.java,this.closer = Closer.create();,if (Closer != null ) this.closer = Closer.create();
CoordinatorModeRunner.java,BuildId buildId = clientBuildId.get();,if (clientBuildId != null ) BuildId buildId = clientBuildId.get();
CoordinatorModeRunner.java,URI uploadUri = traceUploadUri.get();,if (traceUploadUri != null ) URI uploadUri = traceUploadUri.get();
DefaultMultiBuildCapacityTracker.java,availableCapacity = service.getAllAvailableCapacity();,if (service != null ) availableCapacity = service.getAllAvailableCapacity();
DelegateAndGraphsInitializer.java,Cell rootCell = args.getState().getRootCell();,if (args != null ) Cell rootCell = args.getState().getRootCell();
DistBuildChromeTraceRenderer.java,RuleTrace ruleTrace = criticalPath.pop();,if (criticalPath != null ) RuleTrace ruleTrace = criticalPath.pop();
DistBuildSlaveExecutor.java,BuildExecutorArgs builderArgs = args.createBuilderArgs();,if (args != null ) BuildExecutorArgs builderArgs = args.createBuilderArgs();
DistBuildTrace.java,List<MinionTrace> minionTraces = new ArrayList<>(rulesByMinionId.size());,if (ArrayList<>(rulesByMinionId != null ) List<MinionTrace> minionTraces = new ArrayList<>(rulesByMinionId.size());
DistBuildTrace.java,List<RuleTrace> traceList = new ArrayList<>(traceMap.values());,if (ArrayList<>(traceMap != null ) List<RuleTrace> traceList = new ArrayList<>(traceMap.values());
DistBuildTrace.java,this.previousRuleInLongestDependencyChain = Optional.empty();,if (Optional != null ) this.previousRuleInLongestDependencyChain = Optional.empty();
DistBuildTrace.java,numberOfDependents = ancestors.size();,if (ancestors != null ) numberOfDependents = ancestors.size();
DistBuildTraceTracker.java,long now = clock.currentTimeMillis();,if (clock != null ) long now = clock.currentTimeMillis();
DistributableBuildGraph.java,this.unsatisfiedDependencies = this.dependenciesRemaining.size();,if (this != null ) this.unsatisfiedDependencies = this.dependenciesRemaining.size();
DistributableBuildGraph.java,transitiveCacheableDependents = Optional.of(cacheableDependents.build());,if (Optional != null ) transitiveCacheableDependents = Optional.of(cacheableDependents.build());
GreedyMultiBuildCapacityTracker.java,capacity = service.obtainAllAvailableCapacity();,if (service != null ) capacity = service.obtainAllAvailableCapacity();
MinionHealthTracker.java,this.minions = Maps.newConcurrentMap();,if (Maps != null ) this.minions = Maps.newConcurrentMap();
MinionHealthTracker.java,this.untrackedMinions = Sets.newConcurrentHashSet();,if (Sets != null ) this.untrackedMinions = Sets.newConcurrentHashSet();
MinionHealthTracker.java,List<MinionTrackingInfo> deadMinionIds = Lists.newArrayList();,if (Lists != null ) List<MinionTrackingInfo> deadMinionIds = Lists.newArrayList();
MinionHealthTracker.java,long currentMillis = clock.currentTimeMillis();,if (clock != null ) long currentMillis = clock.currentTimeMillis();
MinionHealthTracker.java,long lastHeartbeatMillis = minion.getLastHeartbeatMillis();,if (minion != null ) long lastHeartbeatMillis = minion.getLastHeartbeatMillis();
MinionLocalBuildStateTracker.java,int numWorkUnits = newWorkUnits.size();,if (newWorkUnits != null ) int numWorkUnits = newWorkUnits.size();
MinionLocalBuildStateTracker.java,List<String> buildTargetsInWorkUnit = workUnit.getBuildTargets();,if (workUnit != null ) List<String> buildTargetsInWorkUnit = workUnit.getBuildTargets();
MinionLocalBuildStateTracker.java,List<String> targetsToBuild = Lists.newArrayList();,if (Lists != null ) List<String> targetsToBuild = Lists.newArrayList();
MinionLocalBuildStateTracker.java,String target = buildResult.getRule().getFullyQualifiedName();,if (buildResult != null ) String target = buildResult.getRule().getFullyQualifiedName();
MinionLocalBuildStateTracker.java,String target = buildResult.getRule().getFullyQualifiedName();,if (buildResult != null ) String target = buildResult.getRule().getFullyQualifiedName();
MinionModeRunner.java,buildExecutor = buildExecutorFuture.get();,if (buildExecutorFuture != null ) buildExecutor = buildExecutorFuture.get();
MinionModeRunner.java,List<String> targetsToSignal = buildTracker.getTargetsToSignal();,if (buildTracker != null ) List<String> targetsToSignal = buildTracker.getTargetsToSignal();
MinionModeRunner.java,int reservedCapacity = buildTracker.reserveAllAvailableCapacity();,if (buildTracker != null ) int reservedCapacity = buildTracker.reserveAllAvailableCapacity();
MinionModeRunner.java,List<String> targetsToBuild = buildTracker.getTargetsToBuild();,if (buildTracker != null ) List<String> targetsToBuild = buildTracker.getTargetsToBuild();
MinionModeRunner.java,String fullyQualifiedName = result.getRule().getFullyQualifiedName();,if (result != null ) String fullyQualifiedName = result.getRule().getFullyQualifiedName();
MinionModeRunner.java,String fullyQualifiedName = buildResult.getRule().getFullyQualifiedName();,if (buildResult != null ) String fullyQualifiedName = buildResult.getRule().getFullyQualifiedName();
MinionWorkloadAllocator.java,int maxParallelWorkUnitsLeft = queue.getSafeApproxOfRemainingWorkUnitsCount();,if (queue != null ) int maxParallelWorkUnitsLeft = queue.getSafeApproxOfRemainingWorkUnitsCount();
MinionWorkloadAllocator.java,maxWorkUnitsToFetch -= newWorkUnitsForMinion.size();,if (newWorkUnitsForMinion != null ) maxWorkUnitsToFetch -= newWorkUnitsForMinion.size();
MinionWorkloadAllocator.java,WorkUnit workUnitToReAssign = workUnitsFromFailedMinions.remove();,if (workUnitsFromFailedMinions != null ) WorkUnit workUnitToReAssign = workUnitsFromFailedMinions.remove();
MultiSlaveBuildModeRunnerFactory.java,Optional<String> minionQueue = distBuildConfig.getMinionQueue();,if (distBuildConfig != null ) Optional<String> minionQueue = distBuildConfig.getMinionQueue();
MultiSlaveBuildModeRunnerFactory.java,Optional<String> minionRegion = distBuildConfig.getMinionRegion();,if (distBuildConfig != null ) Optional<String> minionRegion = distBuildConfig.getMinionRegion();
MultiSlaveBuildModeRunnerFactory.java,Optional<URI> traceUploadUri = chromeTraceBuckConfig.getTraceUploadUriIfEnabled();,if (chromeTraceBuckConfig != null ) Optional<URI> traceUploadUri = chromeTraceBuckConfig.getTraceUploadUriIfEnabled();
ReverseDepBuildTargetsQueue.java,totalCacheableNodes = distributableBuildGraph.getNumberOfCacheableNodes();,if (distributableBuildGraph != null ) totalCacheableNodes = distributableBuildGraph.getNumberOfCacheableNodes();
ReverseDepBuildTargetsQueue.java,String targetName = uncachableZeroDependencyTargets.iterator().next();,if (uncachableZeroDependencyTargets != null ) String targetName = uncachableZeroDependencyTargets.iterator().next();
ReverseDepBuildTargetsQueue.java,totalBuiltCount += finishedNodes.size();,if (finishedNodes != null ) totalBuiltCount += finishedNodes.size();
ReverseDepBuildTargetsQueue.java,DistributableNode currentNode = nodesToCheck.remove();,if (nodesToCheck != null ) DistributableNode currentNode = nodesToCheck.remove();
RuleKeyDivergenceRunnerFactory.java,DelegateAndGraphs graphs = initializer.getDelegateAndGraphs().get();,if (initializer != null ) DelegateAndGraphs graphs = initializer.getDelegateAndGraphs().get();
ThriftCoordinatorServer.java,this.port = OptionalInt.of(transport.getPort());,if (OptionalInt != null ) this.port = OptionalInt.of(transport.getPort());
ThriftCoordinatorServer.java,MinionHealthStatus minionHealthStatus = minionHealthTracker.checkMinionHealth();,if (minionHealthTracker != null ) MinionHealthStatus minionHealthStatus = minionHealthTracker.checkMinionHealth();
ThriftCoordinatorServer.java,OptionalInt totalMinionCount = minionCountProvider.getTotalMinionCount();,if (minionCountProvider != null ) OptionalInt totalMinionCount = minionCountProvider.getTotalMinionCount();
ThriftCoordinatorServer.java,int deadMinionCount = minionHealthStatus.getDeadMinions().size();,if (minionHealthStatus != null ) int deadMinionCount = minionHealthStatus.getDeadMinions().size();
ThriftCoordinatorServer.java,BuildStatus status = buildJob.getStatus();,if (buildJob != null ) BuildStatus status = buildJob.getStatus();
ThriftCoordinatorServer.java,DistBuildTrace trace = chromeTraceTracker.generateTrace();,if (chromeTraceTracker != null ) DistBuildTrace trace = chromeTraceTracker.generateTrace();
ThriftCoordinatorServer.java,BuildTargetsQueue queue = queueFuture.get();,if (queueFuture != null ) BuildTargetsQueue queue = queueFuture.get();
ClientStatsTrackerTest.java,DistBuildClientStats stats = tracker.generateStats();,if (tracker != null ) DistBuildClientStats stats = tracker.generateStats();
ClientStatsTrackerTest.java,DistBuildClientStats stats = tracker.generateStats();,if (tracker != null ) DistBuildClientStats stats = tracker.generateStats();
ClientStatsTrackerTest.java,DistBuildClientStats stats = tracker.generateStats();,if (tracker != null ) DistBuildClientStats stats = tracker.generateStats();
ClientStatsTrackerTest.java,DistBuildClientStats stats = tracker.generateStats();,if (tracker != null ) DistBuildClientStats stats = tracker.generateStats();
ClientStatsTrackerTest.java,DistBuildClientStats stats = tracker.generateStats();,if (tracker != null ) DistBuildClientStats stats = tracker.generateStats();
ClientStatsTrackerTest.java,DistBuildClientStats stats = tracker.generateStats();,if (tracker != null ) DistBuildClientStats stats = tracker.generateStats();
ClientStatsTrackerTest.java,stats = tracker.generateStats();,if (tracker != null ) stats = tracker.generateStats();
DistBuildArtifactCacheImplTest.java,Capture<LazyPath> fetchPath = EasyMock.newCapture();,if (EasyMock != null ) Capture<LazyPath> fetchPath = EasyMock.newCapture();
DistBuildArtifactCacheImplTest.java,"ArtifactCacheByBuildRule distBuildCache = createTestSubject(remoteCache, Optional.empty());","if (Optional != null ) ArtifactCacheByBuildRule distBuildCache = createTestSubject(remoteCache, Optional.empty());"
DistBuildFileHashesTest.java,javaFs = projectFilesystem.getRootPath().getFileSystem();,if (projectFilesystem != null ) javaFs = projectFilesystem.getRootPath().getFileSystem();
DistBuildFileHashesTest.java,secondJavaFs = secondProjectFilesystem.getRootPath().getFileSystem();,if (secondProjectFilesystem != null ) secondJavaFs = secondProjectFilesystem.getRootPath().getFileSystem();
DistBuildFileHashesTest.java,actionGraph = new ActionGraph(graphBuilder.getBuildRules());,if (ActionGraph(graphBuilder != null ) actionGraph = new ActionGraph(graphBuilder.getBuildRules());
DistBuildFileHashesTest.java,List<BuildJobStateFileHashes> recordedHashes = f.distributedBuildFileHashes.getFileHashes();,if (f != null ) List<BuildJobStateFileHashes> recordedHashes = f.distributedBuildFileHashes.getFileHashes();
DistBuildFileHashesTest.java,List<BuildJobStateFileHashes> fileHashes = f.distributedBuildFileHashes.getFileHashes();,if (f != null ) List<BuildJobStateFileHashes> fileHashes = f.distributedBuildFileHashes.getFileHashes();
DistBuildFileHashesTest.java,List<BuildJobStateFileHashes> fileHashes = f.distributedBuildFileHashes.getFileHashes();,if (f != null ) List<BuildJobStateFileHashes> fileHashes = f.distributedBuildFileHashes.getFileHashes();
DistBuildFileHashesTest.java,List<BuildJobStateFileHashes> fileHashes = f.distributedBuildFileHashes.getFileHashes();,if (f != null ) List<BuildJobStateFileHashes> fileHashes = f.distributedBuildFileHashes.getFileHashes();
DistBuildFileHashesTest.java,List<BuildJobStateFileHashes> fileHashes = f.distributedBuildFileHashes.getFileHashes();,if (f != null ) List<BuildJobStateFileHashes> fileHashes = f.distributedBuildFileHashes.getFileHashes();
DistBuildFileHashesTest.java,List<BuildJobStateFileHashes> recordedHashes = f.distributedBuildFileHashes.getFileHashes();,if (f != null ) List<BuildJobStateFileHashes> recordedHashes = f.distributedBuildFileHashes.getFileHashes();
DistBuildFileHashesTest.java,List<BuildJobStateFileHashes> recordedHashes = f.distributedBuildFileHashes.getFileHashes();,if (f != null ) List<BuildJobStateFileHashes> recordedHashes = f.distributedBuildFileHashes.getFileHashes();
DistBuildFileHashesTest.java,List<BuildJobStateFileHashes> recordedHashes = f.distributedBuildFileHashes.getFileHashes();,if (f != null ) List<BuildJobStateFileHashes> recordedHashes = f.distributedBuildFileHashes.getFileHashes();
DistBuildPostBuildAnalysisTest.java,Config config = Configs.createDefaultConfig(tmpPath.getRoot());,if (Configs != null ) Config config = Configs.createDefaultConfig(tmpPath.getRoot());
DistBuildServiceTest.java,executor = MoreExecutors.listeningDecorator(Executors.newSingleThreadExecutor());,if (MoreExecutors != null ) executor = MoreExecutors.listeningDecorator(Executors.newSingleThreadExecutor());
DistBuildServiceTest.java,Capture<FrontendRequest> request = EasyMock.newCapture();,if (EasyMock != null ) Capture<FrontendRequest> request = EasyMock.newCapture();
DistBuildServiceTest.java,Capture<FrontendRequest> containsRequest = EasyMock.newCapture();,if (EasyMock != null ) Capture<FrontendRequest> containsRequest = EasyMock.newCapture();
DistBuildServiceTest.java,Capture<FrontendRequest> storeRequest = EasyMock.newCapture();,if (EasyMock != null ) Capture<FrontendRequest> storeRequest = EasyMock.newCapture();
DistBuildServiceTest.java,Path path = temporaryFolder.newFile().toAbsolutePath();,if (temporaryFolder != null ) Path path = temporaryFolder.newFile().toAbsolutePath();
DistBuildServiceTest.java,Capture<FrontendRequest> request = EasyMock.newCapture();,if (EasyMock != null ) Capture<FrontendRequest> request = EasyMock.newCapture();
DistBuildServiceTest.java,Capture<FrontendRequest> request = EasyMock.newCapture();,if (EasyMock != null ) Capture<FrontendRequest> request = EasyMock.newCapture();
DistBuildServiceTest.java,Capture<FrontendRequest> request = EasyMock.newCapture();,if (EasyMock != null ) Capture<FrontendRequest> request = EasyMock.newCapture();
DistBuildServiceTest.java,List<FileInfo> fileInfo = new ArrayList<>(hashCodes.size());,if (ArrayList<>(hashCodes != null ) List<FileInfo> fileInfo = new ArrayList<>(hashCodes.size());
DistBuildServiceTest.java,FetchBuildSlaveStatusRequest statusRequest = receivedRequest.getFetchBuildSlaveStatusRequest();,if (receivedRequest != null ) FetchBuildSlaveStatusRequest statusRequest = receivedRequest.getFetchBuildSlaveStatusRequest();
DistBuildServiceTest.java,Capture<FrontendRequest> request = EasyMock.newCapture();,if (EasyMock != null ) Capture<FrontendRequest> request = EasyMock.newCapture();
DistBuildServiceTest.java,SetCoordinatorRequest coordinatorRequest = request.getValue().getSetCoordinatorRequest();,if (request != null ) SetCoordinatorRequest coordinatorRequest = request.getValue().getSetCoordinatorRequest();
DistBuildServiceTest.java,Capture<FrontendRequest> request = EasyMock.newCapture();,if (EasyMock != null ) Capture<FrontendRequest> request = EasyMock.newCapture();
DistBuildServiceTest.java,EnqueueMinionsRequest minionsRequest = request.getValue().getEnqueueMinionsRequest();,if (request != null ) EnqueueMinionsRequest minionsRequest = request.getValue().getEnqueueMinionsRequest();
DistBuildServiceTest.java,Capture<FrontendRequest> request = EasyMock.newCapture();,if (EasyMock != null ) Capture<FrontendRequest> request = EasyMock.newCapture();
FileMaterializationStatsTrackerTest.java,FileMaterializationStats stats = tracker.getFileMaterializationStats();,if (tracker != null ) FileMaterializationStats stats = tracker.getFileMaterializationStats();
LocalFsContentsProviderTest.java,cacheRootDir = tempDir.getRoot().toPath();,if (tempDir != null ) cacheRootDir = tempDir.getRoot().toPath();
MaterializerDummyFileHashCacheTest.java,Path relativeSymlink = projectFilesystem.getPathRelativeToProjectRoot(symlink).get();,if (projectFilesystem != null ) Path relativeSymlink = projectFilesystem.getPathRelativeToProjectRoot(symlink).get();
MaterializerDummyFileHashCacheTest.java,SettableFuture<Boolean> future = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<Boolean> future = SettableFuture.create();
MaterializerDummyFileHashCacheTest.java,SettableFuture<Boolean> failingFuture = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<Boolean> failingFuture = SettableFuture.create();
RecordingFileHashLoaderTest.java,BuildJobStateFileHashes fileHashes = recordedFileHashes.getRemoteFileHashes();,if (recordedFileHashes != null ) BuildJobStateFileHashes fileHashes = recordedFileHashes.getRemoteFileHashes();
RecordingFileHashLoaderTest.java,BuildJobStateFileHashes fileHashes = recordedFileHashes.getRemoteFileHashes();,if (recordedFileHashes != null ) BuildJobStateFileHashes fileHashes = recordedFileHashes.getRemoteFileHashes();
RecordingFileHashLoaderTest.java,BuildJobStateFileHashes fileHashes = recordedFileHashes.getRemoteFileHashes();,if (recordedFileHashes != null ) BuildJobStateFileHashes fileHashes = recordedFileHashes.getRemoteFileHashes();
RecordingFileHashLoaderTest.java,BuildJobStateFileHashes fileHashes = recordedFileHashes.getRemoteFileHashes();,if (recordedFileHashes != null ) BuildJobStateFileHashes fileHashes = recordedFileHashes.getRemoteFileHashes();
RecordingFileHashLoaderTest.java,BuildJobStateFileHashes fileHashes = recordedFileHashes.getRemoteFileHashes();,if (recordedFileHashes != null ) BuildJobStateFileHashes fileHashes = recordedFileHashes.getRemoteFileHashes();
RecordingFileHashLoaderTest.java,BuildJobStateFileHashes fileHashes = recordedFileHashes.getRemoteFileHashes();,if (recordedFileHashes != null ) BuildJobStateFileHashes fileHashes = recordedFileHashes.getRemoteFileHashes();
RecordingFileHashLoaderTest.java,BuildJobStateFileHashes fileHashes = recordedFileHashes.getRemoteFileHashes();,if (recordedFileHashes != null ) BuildJobStateFileHashes fileHashes = recordedFileHashes.getRemoteFileHashes();
RecordingFileHashLoaderTest.java,BuildJobStateFileHashes fileHashes = recordedFileHashes.getRemoteFileHashes();,if (recordedFileHashes != null ) BuildJobStateFileHashes fileHashes = recordedFileHashes.getRemoteFileHashes();
CacheOptimizedBuildTargetsQueueFactoryTest.java,BuildRuleResolver resolver = CustomActionGraphBuilderFactory.createSimpleRuntimeDepsResolver();,if (CustomActionGraphBuilderFactory != null ) BuildRuleResolver resolver = CustomActionGraphBuilderFactory.createSimpleRuntimeDepsResolver();
CacheOptimizedBuildTargetsQueueFactoryTest.java,List<String> targets = workUnit.getBuildTargets();,if (workUnit != null ) List<String> targets = workUnit.getBuildTargets();
CacheOptimizedBuildTargetsQueueFactoryTest.java,BuildRuleResolver resolver = CustomActionGraphBuilderFactory.createDiamondDependencyGraph();,if (CustomActionGraphBuilderFactory != null ) BuildRuleResolver resolver = CustomActionGraphBuilderFactory.createDiamondDependencyGraph();
CacheOptimizedBuildTargetsQueueFactoryTest.java,List<String> targets = workUnit.getBuildTargets();,if (workUnit != null ) List<String> targets = workUnit.getBuildTargets();
CacheOptimizedBuildTargetsQueueFactoryTest.java,BuildRuleResolver resolver = CustomActionGraphBuilderFactory.createGraphWithBuildLocallyDep();,if (CustomActionGraphBuilderFactory != null ) BuildRuleResolver resolver = CustomActionGraphBuilderFactory.createGraphWithBuildLocallyDep();
CapacityServiceTest.java,Capture<BuildSlaveRequest> request = EasyMock.newCapture();,if (EasyMock != null ) Capture<BuildSlaveRequest> request = EasyMock.newCapture();
CapacityServiceTest.java,int availableCapacity = service.getAllAvailableCapacity();,if (service != null ) int availableCapacity = service.getAllAvailableCapacity();
CapacityServiceTest.java,Capture<BuildSlaveRequest> request = EasyMock.newCapture();,if (EasyMock != null ) Capture<BuildSlaveRequest> request = EasyMock.newCapture();
CapacityServiceTest.java,int availableCapacity = service.obtainAllAvailableCapacity();,if (service != null ) int availableCapacity = service.obtainAllAvailableCapacity();
CapacityServiceTest.java,Capture<BuildSlaveRequest> obtainRequest = EasyMock.newCapture();,if (EasyMock != null ) Capture<BuildSlaveRequest> obtainRequest = EasyMock.newCapture();
CapacityServiceTest.java,Capture<BuildSlaveRequest> request = EasyMock.newCapture();,if (EasyMock != null ) Capture<BuildSlaveRequest> request = EasyMock.newCapture();
CoordinatorAndMinionModeRunnerIntegrationTest.java,heartbeatService = MinionModeRunnerIntegrationTest.createFakeHeartbeatService();,if (MinionModeRunnerIntegrationTest != null ) heartbeatService = MinionModeRunnerIntegrationTest.createFakeHeartbeatService();
CoordinatorAndMinionModeRunnerIntegrationTest.java,Path logDirectoryPath = tempDir.getRoot().toPath();,if (tempDir != null ) Path logDirectoryPath = tempDir.getRoot().toPath();
CoordinatorAndMinionModeRunnerIntegrationTest.java,SettableFuture<BuildTargetsQueue> queueFuture = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<BuildTargetsQueue> queueFuture = SettableFuture.create();
DefaultMultiBuildCapacityTrackerTest.java,int availableCapacity = capacityTracker.reserveAllAvailableCapacity();,if (capacityTracker != null ) int availableCapacity = capacityTracker.reserveAllAvailableCapacity();
DefaultMultiBuildCapacityTrackerTest.java,int availableCapacity = capacityTracker.reserveAllAvailableCapacity();,if (capacityTracker != null ) int availableCapacity = capacityTracker.reserveAllAvailableCapacity();
DistBuildTraceTrackerTest.java,DistBuildTrace trace = tracker.generateTrace();,if (tracker != null ) DistBuildTrace trace = tracker.generateTrace();
GreedyMultiBuildCapacityTrackerTest.java,int availableCapacity = capacityTracker.reserveAllAvailableCapacity();,if (capacityTracker != null ) int availableCapacity = capacityTracker.reserveAllAvailableCapacity();
GreedyMultiBuildCapacityTrackerTest.java,int availableCapacity = capacityTracker.reserveAllAvailableCapacity();,if (capacityTracker != null ) int availableCapacity = capacityTracker.reserveAllAvailableCapacity();
HeartbeatServiceTest.java,runnable = EasyMock.newCapture();,if (EasyMock != null ) runnable = EasyMock.newCapture();
MinionHealthTrackerTest.java,HealthCheckStats healthCheckStats = healthCheckStatsTracker.getHealthCheckStats();,if (healthCheckStatsTracker != null ) HealthCheckStats healthCheckStats = healthCheckStatsTracker.getHealthCheckStats();
MinionHealthTrackerTest.java,healthCheckStats = healthCheckStatsTracker.getHealthCheckStats();,if (healthCheckStatsTracker != null ) healthCheckStats = healthCheckStatsTracker.getHealthCheckStats();
ReverseDepBuildTargetsQueueTest.java,ReverseDepBuildTargetsQueue queue = ReverseDepBuildTargetsQueue.newEmptyQueue();,if (ReverseDepBuildTargetsQueue != null ) ReverseDepBuildTargetsQueue queue = ReverseDepBuildTargetsQueue.newEmptyQueue();
ReverseDepBuildTargetsQueueTest.java,"BuildTargetsQueue queue = createQueueWithoutRemoteCache(resolver, ImmutableList.of());","if (ImmutableList != null ) BuildTargetsQueue queue = createQueueWithoutRemoteCache(resolver, ImmutableList.of());"
ReverseDepBuildTargetsQueueTest.java,BuildRuleResolver resolver = CustomActionGraphBuilderFactory.createSimpleBuilder();,if (CustomActionGraphBuilderFactory != null ) BuildRuleResolver resolver = CustomActionGraphBuilderFactory.createSimpleBuilder();
ReverseDepBuildTargetsQueueTest.java,BuildRuleResolver resolver = CustomActionGraphBuilderFactory.createSimpleRuntimeDepsResolver();,if (CustomActionGraphBuilderFactory != null ) BuildRuleResolver resolver = CustomActionGraphBuilderFactory.createSimpleRuntimeDepsResolver();
ReverseDepBuildTargetsQueueTest.java,BuildRuleResolver resolver = CustomActionGraphBuilderFactory.createDiamondDependencyGraph();,if (CustomActionGraphBuilderFactory != null ) BuildRuleResolver resolver = CustomActionGraphBuilderFactory.createDiamondDependencyGraph();
ReverseDepBuildTargetsQueueTest.java,List<String> leafNodeTargets = leafNodeWorkUnit.getBuildTargets();,if (leafNodeWorkUnit != null ) List<String> leafNodeTargets = leafNodeWorkUnit.getBuildTargets();
ReverseDepBuildTargetsQueueTest.java,List<String> workUnitTargets = workUnit.getBuildTargets();,if (workUnit != null ) List<String> workUnitTargets = workUnit.getBuildTargets();
ReverseDepBuildTargetsQueueTest.java,List<String> workUnitTargets = workUnit.getBuildTargets();,if (workUnit != null ) List<String> workUnitTargets = workUnit.getBuildTargets();
ReverseDepBuildTargetsQueueTest.java,workUnitTargets = workUnit.getBuildTargets();,if (workUnit != null ) workUnitTargets = workUnit.getBuildTargets();
ReverseDepBuildTargetsQueueTest.java,List<String> chainTargets = chainWorkUnit.getBuildTargets();,if (chainWorkUnit != null ) List<String> chainTargets = chainWorkUnit.getBuildTargets();
SingleBuildCapacityTrackerTest.java,int availableCapacity = capacityTracker.reserveAllAvailableCapacity();,if (capacityTracker != null ) int availableCapacity = capacityTracker.reserveAllAvailableCapacity();
SingleBuildCapacityTrackerTest.java,int availableCapacity = capacityTracker.reserveAllAvailableCapacity();,if (capacityTracker != null ) int availableCapacity = capacityTracker.reserveAllAvailableCapacity();
SingleBuildCapacityTrackerTest.java,int availableCapacity = capacityTracker.reserveAllAvailableCapacity();,if (capacityTracker != null ) int availableCapacity = capacityTracker.reserveAllAvailableCapacity();
SingleBuildCapacityTrackerTest.java,availableCapacity = capacityTracker.reserveAllAvailableCapacity();,if (capacityTracker != null ) availableCapacity = capacityTracker.reserveAllAvailableCapacity();
ThriftCoordinatorServerIntegrationTest.java,BuildTargetsQueue diamondQueue = ReverseDepBuildTargetsQueueTest.createDiamondDependencyQueue();,if (ReverseDepBuildTargetsQueueTest != null ) BuildTargetsQueue diamondQueue = ReverseDepBuildTargetsQueueTest.createDiamondDependencyQueue();
ThriftCoordinatorServerIntegrationTest.java,Capture<ExitState> exitState = EasyMock.newCapture();,if (EasyMock != null ) Capture<ExitState> exitState = EasyMock.newCapture();
ThriftCoordinatorServerIntegrationTest.java,SettableFuture<BuildTargetsQueue> future = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<BuildTargetsQueue> future = SettableFuture.create();
ThriftCoordinatorServerIntegrationTest.java,SettableFuture<BuildTargetsQueue> queueFuture = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<BuildTargetsQueue> queueFuture = SettableFuture.create();
ThriftCoordinatorServerIntegrationTest.java,SettableFuture<BuildTargetsQueue> future = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<BuildTargetsQueue> future = SettableFuture.create();
ThriftCoordinatorServerIntegrationTest.java,SettableFuture<BuildTargetsQueue> queueFuture = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<BuildTargetsQueue> queueFuture = SettableFuture.create();
ThriftCoordinatorServerIntegrationTest.java,SettableFuture<BuildTargetsQueue> future = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<BuildTargetsQueue> future = SettableFuture.create();
ThriftCoordinatorServerIntegrationTest.java,SettableFuture<BuildTargetsQueue> queueFuture = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<BuildTargetsQueue> queueFuture = SettableFuture.create();
CustomActionGraphBuilderFactory.java,BuildRuleParams ruleParams = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) BuildRuleParams ruleParams = TestBuildRuleParams.create();
BuildPhase.java,DistBuildConfig distBuildConfig = new DistBuildConfig(buildExecutorArgs.getBuckConfig());,if (DistBuildConfig(buildExecutorArgs != null ) DistBuildConfig distBuildConfig = new DistBuildConfig(buildExecutorArgs.getBuckConfig());
BuildPhase.java,long currentTimeMillis = clock.currentTimeMillis();,if (clock != null ) long currentTimeMillis = clock.currentTimeMillis();
BuildPhase.java,JobCompletedException jobCompletedException = (JobCompletedException) e.getCause();,if (e != null ) JobCompletedException jobCompletedException = (JobCompletedException) e.getCause();
BuildPhase.java,finalJob = jobCompletedException.getDistBuildJob();,if (jobCompletedException != null ) finalJob = jobCompletedException.getDistBuildJob();
BuildPhase.java,String remoteBuildTarget = remoteRuleAndKey.getBuildTarget();,if (remoteRuleAndKey != null ) String remoteBuildTarget = remoteRuleAndKey.getBuildTarget();
BuildPhase.java,StampedeId stampedeId = job.getStampedeId();,if (job != null ) StampedeId stampedeId = job.getStampedeId();
BuildPhase.java,String runIdString = slave.getBuildSlaveRunId().getId();,if (slave != null ) String runIdString = slave.getBuildSlaveRunId().getId();
BuildPhase.java,List<BuildSlaveStatus> slaveStatuses = ImmutableList.of();,if (ImmutableList != null ) List<BuildSlaveStatus> slaveStatuses = ImmutableList.of();
BuildPhase.java,slaveStatuses = slaveStatusesFuture.get();,if (slaveStatusesFuture != null ) slaveStatuses = slaveStatusesFuture.get();
BuildPhase.java,StampedeId stampedeId = job.getStampedeId();,if (job != null ) StampedeId stampedeId = job.getStampedeId();
BuildPhase.java,BuildSlaveRunId runId = slave.getBuildSlaveRunId();,if (slave != null ) BuildSlaveRunId runId = slave.getBuildSlaveRunId();
BuildPhase.java,long currentTimeMillis = clock.currentTimeMillis();,if (clock != null ) long currentTimeMillis = clock.currentTimeMillis();
BuildPhase.java,BuildSlaveEvent slaveEvent = wrapper.getEvent();,if (wrapper != null ) BuildSlaveEvent slaveEvent = wrapper.getEvent();
BuildPhase.java,long currentTimeMillis = clock.currentTimeMillis();,if (clock != null ) long currentTimeMillis = clock.currentTimeMillis();
BuildPhase.java,StampedeId stampedeId = job.getStampedeId();,if (job != null ) StampedeId stampedeId = job.getStampedeId();
BuildPhase.java,BuildSlaveRunId runId = info.getBuildSlaveRunId();,if (info != null ) BuildSlaveRunId runId = info.getBuildSlaveRunId();
BuildRuleEventManager.java,List<TimestampedBuildRuleFinishedEvent> eventsToPublish = Lists.newArrayList();,if (Lists != null ) List<TimestampedBuildRuleFinishedEvent> eventsToPublish = Lists.newArrayList();
BuildRuleEventManager.java,long currentTimeMillis = clock.currentTimeMillis();,if (clock != null ) long currentTimeMillis = clock.currentTimeMillis();
BuildRuleEventManager.java,List<TimestampedBuildRuleFinishedEvent> eventsToPublish = Lists.newArrayList();,if (Lists != null ) List<TimestampedBuildRuleFinishedEvent> eventsToPublish = Lists.newArrayList();
BuildRuleEventManager.java,long currentTimeMillis = clock.currentTimeMillis();,if (clock != null ) long currentTimeMillis = clock.currentTimeMillis();
BuildSlaveLogsMaterializer.java,this.materializedRunIds = Lists.newArrayList();,if (Lists != null ) this.materializedRunIds = Lists.newArrayList();
BuildSlaveLogsMaterializer.java,Stopwatch stopwatch = Stopwatch.createStarted();,if (Stopwatch != null ) Stopwatch stopwatch = Stopwatch.createStarted();
ConsoleEventsDispatcher.java,Optional<String> stage = Optional.empty();,if (Optional != null ) Optional<String> stage = Optional.empty();
DistBuildController.java,this.stampedeIdReference = args.getStampedeIdReference();,if (args != null ) this.stampedeIdReference = args.getStampedeIdReference();
DistBuildController.java,this.eventBus = args.getBuckEventBus();,if (args != null ) this.eventBus = args.getBuckEventBus();
DistBuildController.java,this.startedEvent = args.getDistBuildStartedEvent();,if (args != null ) this.startedEvent = args.getDistBuildStartedEvent();
DistBuildController.java,this.asyncJobState = args.getAsyncJobState();,if (args != null ) this.asyncJobState = args.getAsyncJobState();
DistBuildController.java,this.console = args.getBuilderExecutorArgs().getConsole();,if (args != null ) this.console = args.getBuilderExecutorArgs().getConsole();
DistBuildController.java,ListenableFuture<Unit> pendingPrepFuture = stampedeIdAndPendingPrepFuture.getSecond();,if (stampedeIdAndPendingPrepFuture != null ) ListenableFuture<Unit> pendingPrepFuture = stampedeIdAndPendingPrepFuture.getSecond();
DistBuildRunner.java,result = distBuildControllerInvoker.runDistBuildAndReturnExitCode();,if (distBuildControllerInvoker != null ) result = distBuildControllerInvoker.runDistBuildAndReturnExitCode();
DistBuildRunner.java,Throwable exception = result.getException().get();,if (result != null ) Throwable exception = result.getException().get();
DistBuildRunner.java,StampedeId stampedeId = Objects.requireNonNull(stampedeIdReference.get());,if (Objects != null ) StampedeId stampedeId = Objects.requireNonNull(stampedeIdReference.get());
LocalBuildRunner.java,Iterator<Throwable> causeIterator = ThrowableCauseIterable.of(e).iterator();,if (ThrowableCauseIterable != null ) Iterator<Throwable> causeIterator = ThrowableCauseIterable.of(e).iterator();
LocalBuildRunner.java,Throwable cur = causeIterator.next();,if (causeIterator != null ) Throwable cur = causeIterator.next();
LocalBuildRunner.java,Build build = Objects.requireNonNull(buildReference.get());,if (Objects != null ) Build build = Objects.requireNonNull(buildReference.get());
LogStateTracker.java,seenStreamState.seenBatchLineCount = lastReceivedBatch.lines.size();,if (lastReceivedBatch != null ) seenStreamState.seenBatchLineCount = lastReceivedBatch.lines.size();
PostBuildPhase.java,slaveFinishedStatsFutures = new ArrayList<>(job.getBuildSlavesSize());,if (ArrayList<>(job != null ) slaveFinishedStatsFutures = new ArrayList<>(job.getBuildSlavesSize());
PostBuildPhase.java,BuildSlaveRunId runId = info.getBuildSlaveRunId();,if (info != null ) BuildSlaveRunId runId = info.getBuildSlaveRunId();
PostBuildPhase.java,BuildSlaveStats stats = builder.build();,if (builder != null ) BuildSlaveStats stats = builder.build();
PostBuildPhase.java,Optional<BuildSlaveFinishedStats> finishedStats = Optional.empty();,if (Optional != null ) Optional<BuildSlaveFinishedStats> finishedStats = Optional.empty();
PreBuildPhase.java,this.buildLabel = job.getBuildLabel();,if (job != null ) this.buildLabel = job.getBuildLabel();
PreBuildPhase.java,StampedeId stampedeId = job.getStampedeId();,if (job != null ) StampedeId stampedeId = job.getStampedeId();
PreBuildPhase.java,DistBuildConfig distBuildConfig = new DistBuildConfig(buildExecutorArgs.getBuckConfig());,if (DistBuildConfig(buildExecutorArgs != null ) DistBuildConfig distBuildConfig = new DistBuildConfig(buildExecutorArgs.getBuckConfig());
RacingBuildPhase.java,mostBuildRulesFinishedInFailure = !mostBuildRulesFinished.get();,if (!mostBuildRulesFinished != null ) mostBuildRulesFinishedInFailure = !mostBuildRulesFinished.get();
RemoteExecutionBuildTargetsQueue.java,this.completionFuture = SettableFuture.create();,if (SettableFuture != null ) this.completionFuture = SettableFuture.create();
RemoteExecutionBuildTargetsQueue.java,this.targetsWaitingToBeBuilt = Queues.newArrayDeque();,if (Queues != null ) this.targetsWaitingToBeBuilt = Queues.newArrayDeque();
RemoteExecutionBuildTargetsQueue.java,this.targetsBuilding = Maps.newConcurrentMap();,if (Maps != null ) this.targetsBuilding = Maps.newConcurrentMap();
RemoteExecutionBuildTargetsQueue.java,List<WorkUnit> newWorkload = Lists.newArrayList();,if (Lists != null ) List<WorkUnit> newWorkload = Lists.newArrayList();
RemoteExecutionBuildTargetsQueue.java,TargetToBuild target = targetsWaitingToBeBuilt.remove();,if (targetsWaitingToBeBuilt != null ) TargetToBuild target = targetsWaitingToBeBuilt.remove();
StampedeBuildClient.java,this.autoStampedeMessage = Optional.empty();,if (Optional != null ) this.autoStampedeMessage = Optional.empty();
BuildPhaseTest.java,scheduler = Executors.newSingleThreadScheduledExecutor();,if (Executors != null ) scheduler = Executors.newSingleThreadScheduledExecutor();
BuildPhaseTest.java,ActionGraphBuilder graphBuilder = CustomActionGraphBuilderFactory.createSimpleBuilder();,if (CustomActionGraphBuilderFactory != null ) ActionGraphBuilder graphBuilder = CustomActionGraphBuilderFactory.createSimpleBuilder();
BuildPhaseTest.java,FileHashCache fileHashCache = FakeFileHashCache.createFromStrings(ImmutableMap.of());,if (FakeFileHashCache != null ) FileHashCache fileHashCache = FakeFileHashCache.createFromStrings(ImmutableMap.of());
BuildPhaseTest.java,SourcePathRuleFinder ruleFinder = graphs.getActionGraphAndBuilder().getActionGraphBuilder();,if (graphs != null ) SourcePathRuleFinder ruleFinder = graphs.getActionGraphAndBuilder().getActionGraphBuilder();
BuildSlaveLogsMaterializerTest.java,Path logsPath = filesystem.getRootPath();,if (filesystem != null ) Path logsPath = filesystem.getRootPath();
BuildSlaveLogsMaterializerTest.java,List<BuildSlaveRunId> buildSlaveRunIdsToFetch = Lists.newArrayList();,if (Lists != null ) List<BuildSlaveRunId> buildSlaveRunIdsToFetch = Lists.newArrayList();
DistBuildControllerTest.java,invocationInfo = FakeInvocationInfoFactory.create();,if (FakeInvocationInfoFactory != null ) invocationInfo = FakeInvocationInfoFactory.create();
DistBuildControllerTest.java,BuckConfig buckConfig = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig buckConfig = FakeBuckConfig.builder().build();
DistBuildControllerTest.java,job = job.deepCopy(); // new copy,if (copy != null ) job = job.deepCopy(); // new copy
DistBuildControllerTest.java,job = job.deepCopy(); // new copy,if (copy != null ) job = job.deepCopy(); // new copy
DistBuildControllerTest.java,job = job.deepCopy(); // new copy,if (copy != null ) job = job.deepCopy(); // new copy
DistBuildControllerTest.java,job = job.deepCopy(); // new copy,if (copy != null ) job = job.deepCopy(); // new copy
DistBuildControllerTest.java,job = job.deepCopy(); // new copy,if (copy != null ) job = job.deepCopy(); // new copy
PostBuildPhaseTest.java,scheduler = Executors.newSingleThreadScheduledExecutor();,if (Executors != null ) scheduler = Executors.newSingleThreadScheduledExecutor();
PostBuildPhaseTest.java,directExecutor = MoreExecutors.listeningDecorator(MoreExecutors.newDirectExecutorService());,if (MoreExecutors != null ) directExecutor = MoreExecutors.listeningDecorator(MoreExecutors.newDirectExecutorService());
PostBuildPhaseTest.java,Capture<ClientSideBuildSlaveFinishedStatsEvent> capturedEvent = EasyMock.newCapture();,if (EasyMock != null ) Capture<ClientSideBuildSlaveFinishedStatsEvent> capturedEvent = EasyMock.newCapture();
PostBuildPhaseTest.java,BuildSlaveStats capturedStats = capturedEvent.getValue().getBuildSlaveFinishedStats();,if (capturedEvent != null ) BuildSlaveStats capturedStats = capturedEvent.getValue().getBuildSlaveFinishedStats();
RemoteExecutionBuildTargetsQueueTest.java,List<String> finishedNodes = Lists.newArrayList();,if (Lists != null ) List<String> finishedNodes = Lists.newArrayList();
StampedeBuildClientTest.java,mockEventBus = BuckEventBusForTests.newInstance();,if (BuckEventBusForTests != null ) mockEventBus = BuckEventBusForTests.newInstance();
StampedeBuildClientTest.java,executorForLocalBuild = Executors.newSingleThreadExecutor();,if (Executors != null ) executorForLocalBuild = Executors.newSingleThreadExecutor();
StampedeBuildClientTest.java,executorForDistBuildController = Executors.newSingleThreadExecutor();,if (Executors != null ) executorForDistBuildController = Executors.newSingleThreadExecutor();
StampedeBuildClientTest.java,distBuildStartedEvent = BuildEvent.distBuildStarted();,if (BuildEvent != null ) distBuildStartedEvent = BuildEvent.distBuildStarted();
StampedeBuildClientTest.java,buildClientExecutor = Executors.newSingleThreadExecutor();,if (Executors != null ) buildClientExecutor = Executors.newSingleThreadExecutor();
StampedeBuildClientTest.java,Optional<ExitCode> localBuildExitCode = Optional.empty();,if (Optional != null ) Optional<ExitCode> localBuildExitCode = Optional.empty();
DistBuildClientEventListener.java,RuleKeyCacheResult ruleKeyCacheResult = cacheResultEvent.getRuleKeyCacheResult();,if (cacheResultEvent != null ) RuleKeyCacheResult ruleKeyCacheResult = cacheResultEvent.getRuleKeyCacheResult();
DistBuildClientEventListener.java,String ruleKey = ruleKeyCacheResult.ruleKey();,if (ruleKeyCacheResult != null ) String ruleKey = ruleKeyCacheResult.ruleKey();
DistBuildClientEventListener.java,Optional<String> secondLevelContentHashKey = ruleKeyCacheResult.twoLevelContentHashKey();,if (ruleKeyCacheResult != null ) Optional<String> secondLevelContentHashKey = ruleKeyCacheResult.twoLevelContentHashKey();
DistBuildClientEventListener.java,boolean wasTwoLevelRequest = secondLevelContentHashKey.isPresent();,if (secondLevelContentHashKey != null ) boolean wasTwoLevelRequest = secondLevelContentHashKey.isPresent();
DistBuildClientEventListener.java,String ruleKey = ruleKeyLog.getRuleKey();,if (ruleKeyLog != null ) String ruleKey = ruleKeyLog.getRuleKey();
DistBuildClientEventListener.java,Set<String> result = Sets.newHashSet();,if (Sets != null ) Set<String> result = Sets.newHashSet();
DistBuildSlaveEventBusListener.java,hostname = HostnameFetching.getHostname();,if (HostnameFetching != null ) hostname = HostnameFetching.getHostname();
SuperConsoleEventBusListener.java,localBuildLinePrefix = distStatsTracker.getLocalBuildLinePrefix();,if (distStatsTracker != null ) localBuildLinePrefix = distStatsTracker.getLocalBuildLinePrefix();
SuperConsoleEventBusListener.java,DistBuildTrackedStatus distBuildStatus = distStatsTracker.getTrackedStatus();,if (distStatsTracker != null ) DistBuildTrackedStatus distBuildStatus = distStatsTracker.getTrackedStatus();
SuperConsoleEventBusListener.java,totalUploadErrorsCount += slaveCacheStat.getCacheErrorCount();,if (slaveCacheStat != null ) totalUploadErrorsCount += slaveCacheStat.getCacheErrorCount();
SuperConsoleEventBusListener.java,stampedeIdLogLine = Optional.of(event.getConsoleLogLine());,if (Optional != null ) stampedeIdLogLine = Optional.of(event.getConsoleLogLine());
DistBuildStatsTracker.java,CoordinatorBuildProgress buildProgress = event.getBuildProgress();,if (event != null ) CoordinatorBuildProgress buildProgress = event.getBuildProgress();
DistBuildStatsTracker.java,distBuildFinishedRulesCount = buildProgress.getBuiltRulesCount();,if (buildProgress != null ) distBuildFinishedRulesCount = buildProgress.getBuiltRulesCount();
DistBuildStatsTracker.java,distBuildStatus = Optional.of(event.getStatus());,if (Optional != null ) distBuildStatus = Optional.of(event.getStatus());
DistBuildStatsTracker.java,this.distBuildState = event.getJob().getStatus();,if (event != null ) this.distBuildState = event.getJob().getStatus();
DistBuildStatsTracker.java,BuildStatus existingStatus = distBuildSlaveTracker.get(slaveInfo.getBuildSlaveRunId());,if (distBuildSlaveTracker != null ) BuildStatus existingStatus = distBuildSlaveTracker.get(slaveInfo.getBuildSlaveRunId());
DistBuildClientEventListenerTest.java,List<RuleKeyLogEntry> serverSideLogs = Lists.newArrayList();,if (Lists != null ) List<RuleKeyLogEntry> serverSideLogs = Lists.newArrayList();
DistBuildSlaveEventBusListenerTest.java,eventBus = BuckEventBusForTests.newInstance();,if (BuckEventBusForTests != null ) eventBus = BuckEventBusForTests.newInstance();
DistBuildSlaveEventBusListenerTest.java,CacheRateStats cacheRateStats = expectedStatus.getCacheRateStats();,if (expectedStatus != null ) CacheRateStats cacheRateStats = expectedStatus.getCacheRateStats();
DistBuildSlaveEventBusListenerTest.java,CacheRateStats cacheRateStats = expectedStatus.getCacheRateStats();,if (expectedStatus != null ) CacheRateStats cacheRateStats = expectedStatus.getCacheRateStats();
DistBuildSlaveEventBusListenerTest.java,FakeBuildRule fakeRule = new FakeBuildRule(fakeTarget.getFullyQualifiedName());,if (FakeBuildRule(fakeTarget != null ) FakeBuildRule fakeRule = new FakeBuildRule(fakeTarget.getFullyQualifiedName());
DistBuildSlaveEventBusListenerTest.java,HttpArtifactCacheEventStoreData.Builder storeData = finishedEventBuilder.getStoreBuilder();,if (finishedEventBuilder != null ) HttpArtifactCacheEventStoreData.Builder storeData = finishedEventBuilder.getStoreBuilder();
SuperConsoleEventBusListenerTest.java,BuildEvent.DistBuildStarted distBuildStartedEvent = BuildEvent.distBuildStarted();,if (BuildEvent != null ) BuildEvent.DistBuildStarted distBuildStartedEvent = BuildEvent.distBuildStarted();
SuperConsoleEventBusListenerTest.java,ActionGraphEvent.Started actionGraphStarted = ActionGraphEvent.started();,if (ActionGraphEvent != null ) ActionGraphEvent.Started actionGraphStarted = ActionGraphEvent.started();
SuperConsoleEventBusListenerTest.java,"FakeBuildRule fakeRule = new FakeBuildRule(fakeTarget, ImmutableSortedSet.of());","if (ImmutableSortedSet != null ) FakeBuildRule fakeRule = new FakeBuildRule(fakeTarget, ImmutableSortedSet.of());"
SuperConsoleEventBusListenerTest.java,"FakeBuildRule cachedRule = new FakeBuildRule(cachedTarget, ImmutableSortedSet.of());","if (ImmutableSortedSet != null ) FakeBuildRule cachedRule = new FakeBuildRule(cachedTarget, ImmutableSortedSet.of());"
SuperConsoleEventBusListenerTest.java,ActionGraphEvent.Started actionGraphStarted = ActionGraphEvent.started();,if (ActionGraphEvent != null ) ActionGraphEvent.Started actionGraphStarted = ActionGraphEvent.started();
SuperConsoleEventBusListenerTest.java,BuildEvent.DistBuildStarted distBuildStartedEvent = BuildEvent.distBuildStarted();,if (BuildEvent != null ) BuildEvent.DistBuildStarted distBuildStartedEvent = BuildEvent.distBuildStarted();
CacheRateStatsKeeperTest.java,CacheRateStats serializableStats = cacheRateStatsKeeper.getSerializableStats();,if (cacheRateStatsKeeper != null ) CacheRateStats serializableStats = cacheRateStatsKeeper.getSerializableStats();
DistBuildStatsTrackerTest.java,BuckEventBus eventBus = BuckEventBusForTests.newInstance();,if (BuckEventBusForTests != null ) BuckEventBus eventBus = BuckEventBusForTests.newInstance();
DefaultConstructorArgMarshaller.java,T dto = constructorArgBuilder.build();,if (constructorArgBuilder != null ) T dto = constructorArgBuilder.build();
AsyncJobStateFactory.java,DistBuildCellIndexer cellIndexer = new DistBuildCellIndexer(params.getCell());,if (DistBuildCellIndexer(params != null ) DistBuildCellIndexer cellIndexer = new DistBuildCellIndexer(params.getCell());
AsyncJobStateFactory.java,SourcePathRuleFinder ruleFinder = actionGraphAndBuilder.getActionGraphBuilder();,if (actionGraphAndBuilder != null ) SourcePathRuleFinder ruleFinder = actionGraphAndBuilder.getActionGraphBuilder();
DistBuildCommandDelegate.java,DistBuildConfig distBuildConfig = new DistBuildConfig(params.getBuckConfig());,if (DistBuildConfig(params != null ) DistBuildConfig distBuildConfig = new DistBuildConfig(params.getBuckConfig());
DistBuildCommandDelegate.java,BuildEvent.DistBuildStarted started = BuildEvent.distBuildStarted();,if (BuildEvent != null ) BuildEvent.DistBuildStarted started = BuildEvent.distBuildStarted();
DistBuildCommandDelegate.java,ListenableFuture<BuildJobState> asyncJobState = stateAndCells.getAsyncJobState();,if (stateAndCells != null ) ListenableFuture<BuildJobState> asyncJobState = stateAndCells.getAsyncJobState();
DistBuildCommandDelegate.java,DistBuildCellIndexer distBuildCellIndexer = stateAndCells.getDistBuildCellIndexer();,if (stateAndCells != null ) DistBuildCellIndexer distBuildCellIndexer = stateAndCells.getDistBuildCellIndexer();
DistBuildCommandDelegate.java,jobState = asyncJobState.get();,if (asyncJobState != null ) jobState = asyncJobState.get();
DistBuildCommandDelegate.java,StampedeId stampedeId = stampedeBuildClient.getStampedeId();,if (stampedeBuildClient != null ) StampedeId stampedeId = stampedeBuildClient.getStampedeId();
DistBuildCommandDelegate.java,DistributedExitCode distributedBuildExitCode = stampedeBuildClient.getDistBuildExitCode();,if (stampedeBuildClient != null ) DistributedExitCode distributedBuildExitCode = stampedeBuildClient.getDistBuildExitCode();
DistBuildCommandDelegate.java,AnalysisResults results = postBuildAnalysis.runAnalysis();,if (postBuildAnalysis != null ) AnalysisResults results = postBuildAnalysis.runAnalysis();
DistBuildCommandDelegate.java,autoDistBuildMessage = config.getAutoDistributedBuildMessage();,if (config != null ) autoDistBuildMessage = config.getAutoDistributedBuildMessage();
DistBuildFactory.java,DistBuildConfig config = new DistBuildConfig(params.getBuckConfig());,if (DistBuildConfig(params != null ) DistBuildConfig config = new DistBuildConfig(params.getBuckConfig());
DistBuildFactory.java,OkHttpClient client = config.createOkHttpClient();,if (config != null ) OkHttpClient client = config.createOkHttpClient();
DistBuildFactory.java,DistBuildConfig config = new DistBuildConfig(params.getBuckConfig());,if (DistBuildConfig(params != null ) DistBuildConfig config = new DistBuildConfig(params.getBuckConfig());
DistBuildUtil.java,Optional<String> commonPrefix = Optional.empty();,if (Optional != null ) Optional<String> commonPrefix = Optional.empty();
BuildPackagePathToRawTargetNodePackageComputation.java,ImmutableList<ParsingError> translateErrors = errorsBuilder.build();,if (errorsBuilder != null ) ImmutableList<ParsingError> translateErrors = errorsBuilder.build();
BuildPackagePathToRawTargetNodePackageComputation.java,allErrors = buildFileManifest.getErrors();,if (buildFileManifest != null ) allErrors = buildFileManifest.getErrors();
BuckGlobalStateFactory.java,Path cellRoot = cell.getRoot();,if (cell != null ) Path cellRoot = cell.getRoot();
BuckGlobalStateFactory.java,ImmutableSortedSet<Path> allRoots = cell.getKnownRootsOfAllCells();,if (cell != null ) ImmutableSortedSet<Path> allRoots = cell.getKnownRootsOfAllCells();
BuckGlobalStateFactory.java,Path path = cellRoot.getRoot();,if (cellRoot != null ) Path path = cellRoot.getRoot();
ProjectGenerator.java,ModuleMapMode moduleMapMode = appleConfig.moduleMapMode();,if (appleConfig != null ) ModuleMapMode moduleMapMode = appleConfig.moduleMapMode();
ProjectGenerator.java,ModuleMapMode moduleMapMode = appleConfig.moduleMapMode();,if (appleConfig != null ) ModuleMapMode moduleMapMode = appleConfig.moduleMapMode();
MainRunner.java,commandSemaphoreNgClient = Optional.empty();,if (Optional != null ) commandSemaphoreNgClient = Optional.empty();
ModuleMap.java,this.generatedModule = st.render();,if (st != null ) this.generatedModule = st.render();
BuildCommand.java,ImmutableSet<BuildTarget> buildTargets = graphsAndBuildTargets.getBuildTargets();,if (graphsAndBuildTargets != null ) ImmutableSet<BuildTarget> buildTargets = graphsAndBuildTargets.getBuildTargets();
DistBuildKillCommand.java,Console console = params.getConsole();,if (params != null ) Console console = params.getConsole();
DistBuildKillCommand.java,PrintStream stdout = console.getStdOut();,if (console != null ) PrintStream stdout = console.getStdOut();
DistBuildKillCommand.java,Stopwatch stopwatch = Stopwatch.createStarted();,if (Stopwatch != null ) Stopwatch stopwatch = Stopwatch.createStarted();
DistBuildLogsCommand.java,Console console = params.getConsole();,if (params != null ) Console console = params.getConsole();
DistBuildLogsCommand.java,PrintStream stdout = console.getStdOut();,if (console != null ) PrintStream stdout = console.getStdOut();
DistBuildLogsCommand.java,Stopwatch stopwatch = Stopwatch.createStarted();,if (Stopwatch != null ) Stopwatch stopwatch = Stopwatch.createStarted();
DistBuildLogsCommand.java,ProjectFilesystem filesystem = params.getCell().getFilesystem();,if (params != null ) ProjectFilesystem filesystem = params.getCell().getFilesystem();
DistBuildRunCommand.java,Console console = params.getConsole();,if (params != null ) Console console = params.getConsole();
DistBuildRunCommand.java,BuildJobState jobState = jobStateAndBuildName.getFirst();,if (jobStateAndBuildName != null ) BuildJobState jobState = jobStateAndBuildName.getFirst();
DistBuildRunCommand.java,String buildName = jobStateAndBuildName.getSecond();,if (jobStateAndBuildName != null ) String buildName = jobStateAndBuildName.getSecond();
DistBuildRunCommand.java,returnCode = distBuildExecutor.buildAndReturnExitCode();,if (distBuildExecutor != null ) returnCode = distBuildExecutor.buildAndReturnExitCode();
DistBuildSourceFilesCommand.java,Path outputFileAbs = logDir.resolve(outputFilename).normalize();,if (logDir != null ) Path outputFileAbs = logDir.resolve(outputFilename).normalize();
DistBuildSourceFilesCommand.java,ProjectFilesystem fs = params.getCell().getFilesystem();,if (params != null ) ProjectFilesystem fs = params.getCell().getFilesystem();
DistBuildStatusCommand.java,Console console = params.getConsole();,if (params != null ) Console console = params.getConsole();
MainRunner.java,isUsingDistributedBuild = subcommand.isUsingDistributedBuild();,if (subcommand != null ) isUsingDistributedBuild = subcommand.isUsingDistributedBuild();
DistBuildLogsCommandIntegrationTest.java,absPaths = Lists.newArrayList();,if (Lists != null ) absPaths = Lists.newArrayList();
InterCellIntegrationTest.java,String systemBootclasspath = Bootclasspath.getSystemBootclasspath();,if (Bootclasspath != null ) String systemBootclasspath = Bootclasspath.getSystemBootclasspath();
JavaBinaryIntegrationTest.java,String systemBootclasspath = Bootclasspath.getSystemBootclasspath();,if (Bootclasspath != null ) String systemBootclasspath = Bootclasspath.getSystemBootclasspath();
BuckQueryEnvironment.java,SettableFuture<Void> newJob = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<Void> newJob = SettableFuture.create();
RemoteBuildRuleSynchronizer.java,SettableFuture<Void> backOffFuture = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<Void> backOffFuture = SettableFuture.create();
DistBuildController.java,ListenableFuture<Void> pendingPrepFuture = stampedeIdAndPendingPrepFuture.getSecond();,if (stampedeIdAndPendingPrepFuture != null ) ListenableFuture<Void> pendingPrepFuture = stampedeIdAndPendingPrepFuture.getSecond();
GrpcRemoteExecutionClients.java,SettableFuture<Void> future = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<Void> future = SettableFuture.create();
MultiThreadedBlobUploader.java,SettableFuture<Void> future = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<Void> future = SettableFuture.create();
MultiThreadedBlobUploader.java,SettableFuture<Void> innerFuture = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<Void> innerFuture = SettableFuture.create();
OutputsMaterializer.java,SettableFuture<Void> future = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<Void> future = SettableFuture.create();
OutputsMaterializer.java,SettableFuture<Void> future = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<Void> future = SettableFuture.create();
ListeningMultiSemaphore.java,SettableFuture<Void> pendingFuture = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<Void> pendingFuture = SettableFuture.create();
MoreFutures.java,SettableFuture<Void> waiter = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<Void> waiter = SettableFuture.create();
ResourcePool.java,SettableFuture<Void> resourceFuture = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<Void> resourceFuture = SettableFuture.create();
ResourcePool.java,SettableFuture<Void> nextRequest = resourceRequests.pollFirst();,if (resourceRequests != null ) SettableFuture<Void> nextRequest = resourceRequests.pollFirst();
HangMonitorTest.java,SettableFuture<Void> sleepingThreadRunning = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<Void> sleepingThreadRunning = SettableFuture.create();
RemoteExecutionStrategyTest.java,SettableFuture<Void> result = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<Void> result = SettableFuture.create();
RemoteExecutionStrategyTest.java,SettableFuture<Void> result = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<Void> result = SettableFuture.create();
DistBuildTargetGraphCodec.java,Cell cell = cellLookup.apply(remoteNode.getCellIndex());,if (cellLookup != null ) Cell cell = cellLookup.apply(remoteNode.getCellIndex());
DistBuildTargetGraphCodec.java,ProjectFilesystem projectFilesystem = cell.getFilesystem();,if (cell != null ) ProjectFilesystem projectFilesystem = cell.getFilesystem();
DistBuildTargetGraphCodec.java,BuildTarget unflavoredTarget = target.withoutFlavors();,if (target != null ) BuildTarget unflavoredTarget = target.withoutFlavors();
DistBuildSourceFilesCommandIntegrationTest.java,Path outputFile = tmp.newFile();,if (tmp != null ) Path outputFile = tmp.newFile();
DistBuildFileHashesIntegrationTest.java,BuildRuleResolver ruleResolver = actionGraphAndBuilder.getActionGraphBuilder();,if (actionGraphAndBuilder != null ) BuildRuleResolver ruleResolver = actionGraphAndBuilder.getActionGraphBuilder();
DistBuildFileHashesIntegrationTest.java,StackedFileHashCache stackedCache = new StackedFileHashCache(allCaches.build());,if (StackedFileHashCache(allCaches != null ) StackedFileHashCache stackedCache = new StackedFileHashCache(allCaches.build());
DistBuildStateTest.java,pluginManager = BuckPluginManagerFactory.createPluginManager();,if (BuckPluginManagerFactory != null ) pluginManager = BuckPluginManagerFactory.createPluginManager();
DistBuildStateTest.java,Cell cell = projectWorkspace.asCell();,if (projectWorkspace != null ) Cell cell = projectWorkspace.asCell();
DistBuildStateTest.java,ProjectFilesystem projectFilesystem = cell.getFilesystem();,if (cell != null ) ProjectFilesystem projectFilesystem = cell.getFilesystem();
DistBuildStateTest.java,ActionGraph actionGraph = new ActionGraph(ImmutableList.of());,if (ActionGraph(ImmutableList != null ) ActionGraph actionGraph = new ActionGraph(ImmutableList.of());
DistBuildStateTest.java,nodeToRawNode = ignored -> ImmutableMap.of();,if (ImmutableMap != null ) nodeToRawNode = ignored -> ImmutableMap.of();
BuckGlobalStateFactory.java,ImmutableSortedSet<Path> allRoots = cell.getKnownRoots();,if (cell != null ) ImmutableSortedSet<Path> allRoots = cell.getKnownRoots();
SkylarkProjectBuildFileParser.java,"BuildFileAST fileAst = parseSkylarkFile(filePath, loadImport.getContainingLabel());","if (loadImport != null ) BuildFileAST fileAst = parseSkylarkFile(filePath, loadImport.getContainingLabel());"
SkylarkProjectBuildFileParser.java,ImmutableSet<Identifier> identifiers = stmt.getLValue().boundIdentifiers();,if (stmt != null ) ImmutableSet<Identifier> identifiers = stmt.getLValue().boundIdentifiers();
AppleTest.java,Optional<String> deviceUdid = appleDeviceController.getSimulatorUdidForTest();,if (appleDeviceController != null ) Optional<String> deviceUdid = appleDeviceController.getSimulatorUdidForTest();
KotlinMetadataReader.java,Iterator<Object> it = node.values.iterator();,if (node != null ) Iterator<Object> it = node.values.iterator();
KotlinMetadataReader.java,String name = (String) it.next();,if (it != null ) String name = (String) it.next();
KotlinMetadataReader.java,Object value = it.next();,if (it != null ) Object value = it.next();
StubJarClassEntry.java,List<String> inlineFunctions = Collections.emptyList();,if (Collections != null ) List<String> inlineFunctions = Collections.emptyList();
ProviderInfoCollectionImplTest.java,ProviderInfoCollection providerInfoCollection = ProviderInfoCollectionImpl.builder().build();,if (ProviderInfoCollectionImpl != null ) ProviderInfoCollection providerInfoCollection = ProviderInfoCollectionImpl.builder().build();
ProviderInfoCollectionImplTest.java,ProviderInfoCollection providerInfoCollection = ProviderInfoCollectionImpl.builder().build();,if (ProviderInfoCollectionImpl != null ) ProviderInfoCollection providerInfoCollection = ProviderInfoCollectionImpl.builder().build();
ProviderInfoCollectionImplTest.java,ProviderInfoCollection providerInfoCollection = ProviderInfoCollectionImpl.builder().build();,if (ProviderInfoCollectionImpl != null ) ProviderInfoCollection providerInfoCollection = ProviderInfoCollectionImpl.builder().build();
SkylarkRuleContextAttrTest.java,ProviderInfoCollection providerInfos = ProviderInfoCollectionImpl.builder().build();,if (ProviderInfoCollectionImpl != null ) ProviderInfoCollection providerInfos = ProviderInfoCollectionImpl.builder().build();
LegacyRuleAnalysisProviderCompatibleTargetNodeToBuildRuleTransformer.java,providerInfos = ProviderInfoCollectionImpl.builder().build();,if (ProviderInfoCollectionImpl != null ) providerInfos = ProviderInfoCollectionImpl.builder().build();
TargetCompatibilityChecker.java,PlatformResolver platformResolver = configurationRuleRegistry.getPlatformResolver();,if (configurationRuleRegistry != null ) PlatformResolver platformResolver = configurationRuleRegistry.getPlatformResolver();
StubJarClassEntry.java,List<String> methodBodiesToRetain = Collections.emptyList();,if (Collections != null ) List<String> methodBodiesToRetain = Collections.emptyList();
IdbRunTestsStep.java,"testApp = appleDeviceController.installBundle(deviceUdid, appTestBundlePath.get());","if (appTestBundlePath != null ) testApp = appleDeviceController.installBundle(deviceUdid, appTestBundlePath.get());"
IdbRunTestsStep.java,"hostTestApp = appleDeviceController.installBundle(deviceUdid, testHostAppBundlePath.get());","if (testHostAppBundlePath != null ) hostTestApp = appleDeviceController.installBundle(deviceUdid, testHostAppBundlePath.get());"
TargetCompatibilityChecker.java,PlatformResolver platformResolver = configurationRuleRegistry.getPlatformResolver();,if (configurationRuleRegistry != null ) PlatformResolver platformResolver = configurationRuleRegistry.getPlatformResolver();
ProjectGeneratorTest.java,List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();,if (projectGenerator != null ) List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();
ProjectGenerator.java,ProjectFilesystem filesystem = nativeNode.getFilesystem();,if (nativeNode != null ) ProjectFilesystem filesystem = nativeNode.getFilesystem();
ProjectGeneratorTest.java,ImmutableSet<String> expectedResourceSet = expectedResourceSetBuilder.build();,if (expectedResourceSetBuilder != null ) ImmutableSet<String> expectedResourceSet = expectedResourceSetBuilder.build();
ProjectGeneratorTest.java,String source = assertFileRefIsRelativeAndResolvePath(file.getFileRef());,if (assertFileRefIsRelativeAndResolvePath(file != null ) String source = assertFileRefIsRelativeAndResolvePath(file.getFileRef());
ProjectGenerator.java,Cell workspaceCell = projectCell.getCell(workspaceTarget.get());,if (projectCell != null ) Cell workspaceCell = projectCell.getCell(workspaceTarget.get());
ProjectGenerator.java,Cell workspaceCell = projectCell.getCell(workspaceTarget.get());,if (projectCell != null ) Cell workspaceCell = projectCell.getCell(workspaceTarget.get());
ProjectGeneratorTest.java,"ProjectGenerator projectGenerator = createProjectGenerator(ImmutableSet.of(), Optional.empty());","if (Optional != null ) ProjectGenerator projectGenerator = createProjectGenerator(ImmutableSet.of(), Optional.empty());"
ProjectGeneratorTest.java,"ProjectGenerator projectGenerator = createProjectGenerator(ImmutableSet.of(), Optional.empty());","if (Optional != null ) ProjectGenerator projectGenerator = createProjectGenerator(ImmutableSet.of(), Optional.empty());"
ProjectGeneratorTest.java,"ProjectGenerator projectGenerator = createProjectGenerator(ImmutableSet.of(), Optional.empty());","if (Optional != null ) ProjectGenerator projectGenerator = createProjectGenerator(ImmutableSet.of(), Optional.empty());"
ProjectGeneratorTest.java,"ProjectGenerator projectGenerator = createProjectGenerator(ImmutableSet.of(), Optional.empty());","if (Optional != null ) ProjectGenerator projectGenerator = createProjectGenerator(ImmutableSet.of(), Optional.empty());"
ProjectGeneratorTest.java,PBXProject pbxProject = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject pbxProject = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,ProjectGenerator projectGenerator = createProjectGenerator(ImmutableSet.of());,if (createProjectGenerator(ImmutableSet != null ) ProjectGenerator projectGenerator = createProjectGenerator(ImmutableSet.of());
ProjectGeneratorTest.java,ProjectGenerator projectGenerator = createProjectGenerator(ImmutableSet.of());,if (createProjectGenerator(ImmutableSet != null ) ProjectGenerator projectGenerator = createProjectGenerator(ImmutableSet.of());
ProjectGeneratorTest.java,ProjectGenerator projectGenerator = createProjectGenerator(ImmutableSet.of());,if (createProjectGenerator(ImmutableSet != null ) ProjectGenerator projectGenerator = createProjectGenerator(ImmutableSet.of());
ProjectGeneratorTest.java,ProjectGenerator projectGenerator = createProjectGenerator(ImmutableSet.of());,if (createProjectGenerator(ImmutableSet != null ) ProjectGenerator projectGenerator = createProjectGenerator(ImmutableSet.of());
ProjectGenerator.java,Cell workspaceCell = projectCell.getCell(workspaceTarget.get());,if (projectCell != null ) Cell workspaceCell = projectCell.getCell(workspaceTarget.get());
ProjectGenerator.java,ProjectFilesystem filesystem = nativeNode.getFilesystem();,if (nativeNode != null ) ProjectFilesystem filesystem = nativeNode.getFilesystem();
CxxPlatformXcodeConfigGenerator.java,ArrayList<String> notProcessedCxxFlags = new ArrayList<String>(cxxPlatform.getCxxflags());,if (ArrayList<String>(cxxPlatform != null ) ArrayList<String> notProcessedCxxFlags = new ArrayList<String>(cxxPlatform.getCxxflags());
CxxPlatformXcodeConfigGenerator.java,ArrayList<String> notProcessedCxxFlags = new ArrayList<String>(cxxPlatform.getCxxflags());,if (ArrayList<String>(cxxPlatform != null ) ArrayList<String> notProcessedCxxFlags = new ArrayList<String>(cxxPlatform.getCxxflags());
StubJarClassEntry.java,List<String> inlineFunctions = Collections.emptyList();,if (Collections != null ) List<String> inlineFunctions = Collections.emptyList();
SwiftRuntimeNativeLinkableGroup.java,swiftRuntimePaths = swiftPlatform.getSwiftRuntimePaths();,if (swiftPlatform != null ) swiftRuntimePaths = swiftPlatform.getSwiftRuntimePaths();
ExportedDepsClosureResolver.java,exportedDeps = arg.getExportedDeps();,if (arg != null ) exportedDeps = arg.getExportedDeps();
TargetCompatibilityCheckerTest.java,Object targetNodeArg = createTargetNodeArg(ImmutableMap.of());,if (createTargetNodeArg(ImmutableMap != null ) Object targetNodeArg = createTargetNodeArg(ImmutableMap.of());
HostPlatform.java,ConstraintSetting constraintSetting = constraintValue.getConstraintSetting();,if (constraintValue != null ) ConstraintSetting constraintSetting = constraintValue.getConstraintSetting();
BuildCommandIntegrationTest.java,Platform platform = Platform.detect();,if (Platform != null ) Platform platform = Platform.detect();
BuildCommandIntegrationTest.java,Architecture architecture = Architecture.detect();,if (Architecture != null ) Architecture architecture = Architecture.detect();
AabBuilderStep.java,BundleConfig.Builder bundleConfig = BundleConfig.newBuilder();,if (BundleConfig != null ) BundleConfig.Builder bundleConfig = BundleConfig.newBuilder();
ProjectGenerator.java,targetConfigNamesBuilder = ImmutableSet.builder();,if (ImmutableSet != null ) targetConfigNamesBuilder = ImmutableSet.builder();
ProjectGenerator.java,ProjectTargetGenerationResult result = generateProjectTarget(workspaceTargetNode.get());,if (generateProjectTarget(workspaceTargetNode != null ) ProjectTargetGenerationResult result = generateProjectTarget(workspaceTargetNode.get());
WorkspaceAndProjectGenerator.java,ImmutableSet<BuildTarget> requiredBuildTargets = generator.getRequiredBuildTargets();,if (generator != null ) ImmutableSet<BuildTarget> requiredBuildTargets = generator.getRequiredBuildTargets();
ProjectGeneratorTest.java,ImmutableSet<BuildTarget> requiredBuildTargets = projectGenerator.getRequiredBuildTargets();,if (projectGenerator != null ) ImmutableSet<BuildTarget> requiredBuildTargets = projectGenerator.getRequiredBuildTargets();
ProjectGenerator.java,this.targetNodeToGeneratedProjectTargetBuilder = ImmutableMultimap.builder();,if (ImmutableMultimap != null ) this.targetNodeToGeneratedProjectTargetBuilder = ImmutableMultimap.builder();
ProjectGenerator.java,Optional<BinaryTargetGenerationResult> result = Optional.empty();,if (Optional != null ) Optional<BinaryTargetGenerationResult> result = Optional.empty();
ProjectGenerator.java,XCodeNativeTargetAttributes nativeTargetAttributes = nativeTargetBuilder.build();,if (nativeTargetBuilder != null ) XCodeNativeTargetAttributes nativeTargetAttributes = nativeTargetBuilder.build();
WorkspaceAndProjectGenerator.java,ImmutableSet<BuildTarget> requiredBuildTargets = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<BuildTarget> requiredBuildTargets = ImmutableSet.of();
WorkspaceAndProjectGenerator.java,requiredBuildTargets = generator.getRequiredBuildTargets();,if (generator != null ) requiredBuildTargets = generator.getRequiredBuildTargets();
WorkspaceAndProjectGenerator.java,buildTargetToGeneratedTargetMap = generator.getBuildTargetToGeneratedTargetMap();,if (generator != null ) buildTargetToGeneratedTargetMap = generator.getBuildTargetToGeneratedTargetMap();
WorkspaceAndProjectGenerator.java,generatedProjectToGeneratedTargets = generator.getGeneratedProjectToGeneratedTargets();,if (generator != null ) generatedProjectToGeneratedTargets = generator.getGeneratedProjectToGeneratedTargets();
AndroidPlatformTargetFactory.java,Optional<String> target = androidBuckConfig.getAndroidTarget();,if (androidBuckConfig != null ) Optional<String> target = androidBuckConfig.getAndroidTarget();
AndroidPlatformTargetFactory.java,androidPlatformTargetId = target.get();,if (target != null ) androidPlatformTargetId = target.get();
BuckAddDependencyIntention.java,String relativeToBuildFile = targetFile.getRuleName();,if (targetFile != null ) String relativeToBuildFile = targetFile.getRuleName();
BuckAddDependencyIntention.java,VirtualFile editSourceFile = referenceElement.getContainingFile().getVirtualFile();,if (referenceElement != null ) VirtualFile editSourceFile = referenceElement.getContainingFile().getVirtualFile();
BuckAddDependencyIntention.java,Project project = referenceElement.getProject();,if (referenceElement != null ) Project project = referenceElement.getProject();
ProjectGenerator.java,String configTarget = targetLevelConfig.getKey();,if (targetLevelConfig != null ) String configTarget = targetLevelConfig.getKey();
ProjectGenerator.java,String existingSetting = targetLevelInlineSettings.get(entry.getKey());,if (targetLevelInlineSettings != null ) String existingSetting = targetLevelInlineSettings.get(entry.getKey());
ProjectGenerator.java,String existingSetting = targetLevelInlineSettings.get(entry.getKey());,if (targetLevelInlineSettings != null ) String existingSetting = targetLevelInlineSettings.get(entry.getKey());
ProjectGenerator.java,String existingSetting = targetLevelInlineSettings.get(entry.getKey());,if (targetLevelInlineSettings != null ) String existingSetting = targetLevelInlineSettings.get(entry.getKey());
ProjectGenerator.java,"Path xcconfigPath = getConfigurationXcconfigPath(buildTarget, configurationEntry.getKey());","if (configurationEntry != null ) Path xcconfigPath = getConfigurationXcconfigPath(buildTarget, configurationEntry.getKey());"
ProjectGenerator.java,String xcconfigContents = stringBuilder.toString();,if (stringBuilder != null ) String xcconfigContents = stringBuilder.toString();
JavaTestDescription.java,Optional<BuildTarget> runner = args.getRunnerLibrary();,if (args != null ) Optional<BuildTarget> runner = args.getRunnerLibrary();
JavaTestDescription.java,Optional<BuildTarget> runnerLibrary = args.getRunnerLibrary();,if (args != null ) Optional<BuildTarget> runnerLibrary = args.getRunnerLibrary();
JavaTestDescription.java,BuildRule library = graphBuilder.requireRule(runnerLibrary.get());,if (graphBuilder != null ) BuildRule library = graphBuilder.requireRule(runnerLibrary.get());
MainRunner.java,augmentor = new HumanReadableExceptionAugmentor(ImmutableMap.of());,if (HumanReadableExceptionAugmentor(ImmutableMap != null ) augmentor = new HumanReadableExceptionAugmentor(ImmutableMap.of());
KotlincToJarStepFactory.java,Builder<Step> postKotlinCompilationSteps = ImmutableList.builder();,if (ImmutableList != null ) Builder<Step> postKotlinCompilationSteps = ImmutableList.builder();
ProjectGenerator.java,HasAppleBundleFields bundleArg = bundle.get().getConstructorArg();,if (bundle != null ) HasAppleBundleFields bundleArg = bundle.get().getConstructorArg();
ProjectGenerator.java,String targetNodeFlavorPostfix = watchTargetNode.getBuildTarget().getFlavorPostfix();,if (watchTargetNode != null ) String targetNodeFlavorPostfix = watchTargetNode.getBuildTarget().getFlavorPostfix();
ProjectGenerator.java,BuildTarget testTarget = bundleLoaderNode.get().getBuildTarget();,if (bundleLoaderNode != null ) BuildTarget testTarget = bundleLoaderNode.get().getBuildTarget();
ProjectGenerator.java,TargetNode<AppleBundleDescriptionArg> bundleLoader = bundleLoaderNode.get();,if (bundleLoaderNode != null ) TargetNode<AppleBundleDescriptionArg> bundleLoader = bundleLoaderNode.get();
ProjectGenerator.java,Path infoPlistPath = pathRelativizer.outputDirToRootRelative(infoPlistOptional.get());,if (pathRelativizer != null ) Path infoPlistPath = pathRelativizer.outputDirToRootRelative(infoPlistOptional.get());
ProjectGenerator.java,Path prefixHeaderRelative = resolveSourcePath(prefixHeaderOptional.get());,if (resolveSourcePath(prefixHeaderOptional != null ) Path prefixHeaderRelative = resolveSourcePath(prefixHeaderOptional.get());
ProjectGenerator.java,String platform = platformFlavor.getName();,if (platformFlavor != null ) String platform = platformFlavor.getName();
WorkspaceAndProjectGenerator.java,Path workspacePath = workspaceGenerator.writeWorkspace();,if (workspaceGenerator != null ) Path workspacePath = workspaceGenerator.writeWorkspace();
DefaultSelectorListResolver.java,Selectable selectable = selectableResolver.getSelectable(selectorKey.getBuildTarget());,if (selectableResolver != null ) Selectable selectable = selectableResolver.getSelectable(selectorKey.getBuildTarget());
QueryCommand.java,ImmutableSet<String> deprecated = outputAttributesDeprecated.get();,if (outputAttributesDeprecated != null ) ImmutableSet<String> deprecated = outputAttributesDeprecated.get();
QueryCommand.java,ImmutableSet<String> sane = outputAttributesSane.get();,if (outputAttributesSane != null ) ImmutableSet<String> sane = outputAttributesSane.get();
QueryCommand.java,PrintStream printStream = printStreamWrapper.get();,if (printStreamWrapper != null ) PrintStream printStream = printStreamWrapper.get();
QueryCommand.java,int rank = entry.getValue();,if (entry != null ) int rank = entry.getValue();
QueryCommand.java,String name = toPresentationForm(entry.getKey());,if (toPresentationForm(entry != null ) String name = toPresentationForm(entry.getKey());
QueryCommand.java,String label = toPresentationForm(entry.getKey());,if (toPresentationForm(entry != null ) String label = toPresentationForm(entry.getKey());
ProjectGenerator.java,ImmutableSet<SourcePath> filesAdded = filesAddedBuilder.build();,if (filesAddedBuilder != null ) ImmutableSet<SourcePath> filesAdded = filesAddedBuilder.build();
ProjectGenerator.java,ImmutableSet<SourcePath> files = genruleFiles.build();,if (genruleFiles != null ) ImmutableSet<SourcePath> files = genruleFiles.build();
ProjectGenerator.java,PBXProject project = xcodeProjectWriteOptions.project();,if (xcodeProjectWriteOptions != null ) PBXProject project = xcodeProjectWriteOptions.project();
ProjectGenerator.java,Optional<PBXTarget> result = Optional.empty();,if (Optional != null ) Optional<PBXTarget> result = Optional.empty();
ProjectGenerator.java,PBXNativeTarget target = result.getTarget();,if (result != null ) PBXNativeTarget target = result.getTarget();
ProjectGenerator.java,PBXNativeTarget target = result.getTarget();,if (result != null ) PBXNativeTarget target = result.getTarget();
XcodeNativeTargetProjectWriter.java,PBXNativeTarget nativeTarget = new PBXNativeTarget(targetAttributes.targetName());,if (PBXNativeTarget(targetAttributes != null ) PBXNativeTarget nativeTarget = new PBXNativeTarget(targetAttributes.targetName());
XcodeNativeTargetProjectWriter.java,PBXGroup targetGroup = project.getMainGroup();,if (project != null ) PBXGroup targetGroup = project.getMainGroup();
ProjectGenerator.java,PBXProject project = xcodeProjectWriteOptions.project();,if (xcodeProjectWriteOptions != null ) PBXProject project = xcodeProjectWriteOptions.project();
ProjectGenerator.java,String targetNodeFlavorPostfix = targetNode.getBuildTarget().getFlavorPostfix();,if (targetNode != null ) String targetNodeFlavorPostfix = targetNode.getBuildTarget().getFlavorPostfix();
XcodeNativeTargetProjectWriter.java,this.shell = appleConfig.shellPath();,if (appleConfig != null ) this.shell = appleConfig.shellPath();
XcodeNativeTargetProjectWriter.java,this.buildScriptPath = appleConfig.buildScriptPath();,if (appleConfig != null ) this.buildScriptPath = appleConfig.buildScriptPath();
WorkspaceAndProjectGenerator.java,generationResults = Futures.allAsList(projectGeneratorFutures).get();,if (Futures != null ) generationResults = Futures.allAsList(projectGeneratorFutures).get();
WorkspaceAndProjectGenerator.java,Path projectDirectoryName = projectDirectory.getFileName();,if (projectDirectory != null ) Path projectDirectoryName = projectDirectory.getFileName();
WorkspaceAndProjectGenerator.java,projectName = projectDirectoryName.toString();,if (projectDirectoryName != null ) projectName = projectDirectoryName.toString();
WorkspaceAndProjectGenerator.java,String schemeName = project.getName();,if (project != null ) String schemeName = project.getName();
WorkspaceAndProjectGenerator.java,BuildTarget buildTarget = buildTargets.iterator().next();,if (buildTargets != null ) BuildTarget buildTarget = buildTargets.iterator().next();
ProjectGeneratorTest.java,List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();,if (projectGenerator != null ) List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();
WorkspaceAndProjectGeneratorTest.java,Optional<XCScheme> fooScheme = fooSchemeGenerator.getOutputScheme();,if (fooSchemeGenerator != null ) Optional<XCScheme> fooScheme = fooSchemeGenerator.getOutputScheme();
WorkspaceAndProjectGeneratorTest.java,Optional<XCScheme> barScheme = barSchemeGenerator.getOutputScheme();,if (barSchemeGenerator != null ) Optional<XCScheme> barScheme = barSchemeGenerator.getOutputScheme();
ZipFileExtractor.java,Path relativePath = absolutePath.getFileName();,if (absolutePath != null ) Path relativePath = absolutePath.getFileName();
Zip.java,SourcePathResolver sourcePathResolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver sourcePathResolver = buildContext.getSourcePathResolver();
Zip.java,Path scratchDir = outputPathResolver.getTempPath();,if (outputPathResolver != null ) Path scratchDir = outputPathResolver.getTempPath();
ZipFileDescription.java,boolean mergeSourceZips = args.getMergeSourceZips();,if (args != null ) boolean mergeSourceZips = args.getMergeSourceZips();
SrcZipAwareFileBundlerTest.java,ImmutableList<Step> builtStepList = immutableStepList.build();,if (immutableStepList != null ) ImmutableList<Step> builtStepList = immutableStepList.build();
SrcZipAwareFileBundlerTest.java,filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());,if (TestProjectFilesystems != null ) filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());
SrcZipAwareFileBundlerTest.java,filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());,if (TestProjectFilesystems != null ) filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());
RunAction.java,commandLineArgs = builder.build();,if (builder != null ) commandLineArgs = builder.build();
InferNullsafe.java,SourcePathResolver sourcePathResolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver sourcePathResolver = buildContext.getSourcePathResolver();
DistBuildIntegrationTest.java,Cell mainCell = mainCellWorkspace.asCell();,if (mainCellWorkspace != null ) Cell mainCell = mainCellWorkspace.asCell();
DaemonicCellState.java,this.targetsCornucopia = HashMultimap.create();,if (HashMultimap != null ) this.targetsCornucopia = HashMultimap.create();
DaemonicCellState.java,this.typedNodeCaches = Maps.newConcurrentMap();,if (Maps != null ) this.typedNodeCaches = Maps.newConcurrentMap();
ShellStep.java,"int exitCode = launchAndInteractWithProcess(context, builder.build());","if (builder != null ) int exitCode = launchAndInteractWithProcess(context, builder.build());"
HaskellBinaryIntegrationTest.java,HaskellVersion version = HaskellTestUtils.assumeSystemCompiler();,if (HaskellTestUtils != null ) HaskellVersion version = HaskellTestUtils.assumeSystemCompiler();
HaskellLibraryIntegrationTest.java,HaskellVersion version = HaskellTestUtils.assumeSystemCompiler();,if (HaskellTestUtils != null ) HaskellVersion version = HaskellTestUtils.assumeSystemCompiler();
DefaultJavaLibraryRules.java,result = Objects.requireNonNull(getJavaBuckConfig()).getAbiGenerationMode();,if (Objects != null ) result = Objects.requireNonNull(getJavaBuckConfig()).getAbiGenerationMode();
SkylarkProjectBuildFileParser.java,"ParseBuckFileEvent.Started startEvent = ParseBuckFileEvent.started(buildFile, this.getClass());","if (this != null ) ParseBuckFileEvent.Started startEvent = ParseBuckFileEvent.started(buildFile, this.getClass());"
AppleBundle.java,signingEntitlementsTempPath = Optional.empty();,if (Optional != null ) signingEntitlementsTempPath = Optional.empty();
AppleBundle.java,Optional<Path> entitlementsPlist = Optional.empty();,if (Optional != null ) Optional<Path> entitlementsPlist = Optional.empty();
FileBundler.java,Path absolutePath = resolver.getAbsolutePath(sourcePath).normalize();,if (resolver != null ) Path absolutePath = resolver.getAbsolutePath(sourcePath).normalize();
FileBundler.java,Path absoluteFilePath = filesystem.resolve(file).normalize();,if (filesystem != null ) Path absoluteFilePath = filesystem.resolve(file).normalize();
RustCompileRule.java,Path root = getProjectFilesystem().getRootPath();,if (getProjectFilesystem() != null ) Path root = getProjectFilesystem().getRootPath();
RustCompileRule.java,Path basePath = getBuildTarget().getBasePath();,if (getBuildTarget() != null ) Path basePath = getBuildTarget().getBasePath();
NewNativeTargetProjectMutator.java,targetGroup = Optional.of(project.getMainGroup());,if (Optional != null ) targetGroup = Optional.of(project.getMainGroup());
NewNativeTargetProjectMutator.java,targetGroup = Optional.empty();,if (Optional != null ) targetGroup = Optional.empty();
ProjectGenerator.java,String platform = platformFlavor.getName();,if (platformFlavor != null ) String platform = platformFlavor.getName();
ProjectGenerator.java,BuildTarget buildTarget = targetNode.getBuildTarget();,if (targetNode != null ) BuildTarget buildTarget = targetNode.getBuildTarget();
ProjectGenerator.java,BuildTarget buildTarget = targetNode.getBuildTarget();,if (targetNode != null ) BuildTarget buildTarget = targetNode.getBuildTarget();
NewNativeTargetProjectMutatorTest.java,PBXGroup sourcesGroup = result.targetGroup.get();,if (result != null ) PBXGroup sourcesGroup = result.targetGroup.get();
NewNativeTargetProjectMutatorTest.java,PBXGroup sourcesGroup = result.targetGroup.get();,if (result != null ) PBXGroup sourcesGroup = result.targetGroup.get();
ProjectGenerator.java,PBXGroup group = xcodeProjectWriteOptions.project().getMainGroup();,if (xcodeProjectWriteOptions != null ) PBXGroup group = xcodeProjectWriteOptions.project().getMainGroup();
ProjectGenerator.java,ImmutableList<SourcePath> files = genruleFiles.build();,if (genruleFiles != null ) ImmutableList<SourcePath> files = genruleFiles.build();
NewNativeTargetProjectMutator.java,filePathGroup = project.getMainGroup();,if (project != null ) filePathGroup = project.getMainGroup();
NewNativeTargetProjectMutator.java,PBXFileReference fileReference = sourcePathPBXfileReferenceDestination.getFileReference();,if (sourcePathPBXfileReferenceDestination != null ) PBXFileReference fileReference = sourcePathPBXfileReferenceDestination.getFileReference();
NewNativeTargetProjectMutator.java,SourceTreePath sourceTreePath = sourcePathPBXfileReferenceDestination.getSourceTreePath();,if (sourcePathPBXfileReferenceDestination != null ) SourceTreePath sourceTreePath = sourcePathPBXfileReferenceDestination.getSourceTreePath();
NewNativeTargetProjectMutator.java,sourceTreePath = framework.getSourceTreePath().get();,if (framework != null ) sourceTreePath = framework.getSourceTreePath().get();
NewNativeTargetProjectMutator.java,XcodeScriptDescriptionArg arg = (XcodeScriptDescriptionArg) node.getConstructorArg();,if (node != null ) XcodeScriptDescriptionArg arg = (XcodeScriptDescriptionArg) node.getConstructorArg();
NewNativeTargetProjectMutator.java,BuildRule rule = resolver.getRule(targetNode.getBuildTarget());,if (resolver != null ) BuildRule rule = resolver.getRule(targetNode.getBuildTarget());
NewNativeTargetProjectMutator.java,SourcePath jsOutput = bundle.getSourcePathToOutput();,if (bundle != null ) SourcePath jsOutput = bundle.getSourcePathToOutput();
NewNativeTargetProjectMutator.java,SourcePath resOutput = bundle.getSourcePathToResources();,if (bundle != null ) SourcePath resOutput = bundle.getSourcePathToResources();
NewNativeTargetProjectMutator.java,BuildRule rule = resolver.getRule(targetNode.getBuildTarget());,if (resolver != null ) BuildRule rule = resolver.getRule(targetNode.getBuildTarget());
NewNativeTargetProjectMutator.java,SourcePath jsOutput = bundle.getSourcePathToOutput();,if (bundle != null ) SourcePath jsOutput = bundle.getSourcePathToOutput();
NewNativeTargetProjectMutator.java,SourcePath resOutput = bundle.getSourcePathToResources();,if (bundle != null ) SourcePath resOutput = bundle.getSourcePathToResources();
ProjectGenerator.java,PBXCopyFilesBuildPhase copyFiles = new PBXCopyFilesBuildPhase(destSpecBuilder.build());,if (PBXCopyFilesBuildPhase(destSpecBuilder != null ) PBXCopyFilesBuildPhase copyFiles = new PBXCopyFilesBuildPhase(destSpecBuilder.build());
ProjectGenerator.java,AppleBundleDescriptionArg arg = (AppleBundleDescriptionArg) targetNode.getConstructorArg();,if (targetNode != null ) AppleBundleDescriptionArg arg = (AppleBundleDescriptionArg) targetNode.getConstructorArg();
ProjectGenerator.java,ruleByDestinationSpecBuilder = ImmutableSetMultimap.builder();,if (ImmutableSetMultimap != null ) ruleByDestinationSpecBuilder = ImmutableSetMultimap.builder();
NewNativeTargetProjectMutatorTest.java,CopyFilePhaseDestinationSpec.Builder specBuilder = CopyFilePhaseDestinationSpec.builder();,if (CopyFilePhaseDestinationSpec != null ) CopyFilePhaseDestinationSpec.Builder specBuilder = CopyFilePhaseDestinationSpec.builder();
NewNativeTargetProjectMutatorTest.java,PBXBuildPhase copyPhase = new PBXCopyFilesBuildPhase(specBuilder.build());,if (PBXCopyFilesBuildPhase(specBuilder != null ) PBXBuildPhase copyPhase = new PBXCopyFilesBuildPhase(specBuilder.build());
NewNativeTargetProjectMutatorTest.java,CopyFilePhaseDestinationSpec.Builder specBuilder = CopyFilePhaseDestinationSpec.builder();,if (CopyFilePhaseDestinationSpec != null ) CopyFilePhaseDestinationSpec.Builder specBuilder = CopyFilePhaseDestinationSpec.builder();
NewNativeTargetProjectMutatorTest.java,PBXBuildPhase copyFilesPhase = new PBXCopyFilesBuildPhase(specBuilder.build());,if (PBXCopyFilesBuildPhase(specBuilder != null ) PBXBuildPhase copyFilesPhase = new PBXCopyFilesBuildPhase(specBuilder.build());
NewNativeTargetProjectMutatorTest.java,List<PBXBuildPhase> buildPhases = target.getBuildPhases();,if (target != null ) List<PBXBuildPhase> buildPhases = target.getBuildPhases();
NewNativeTargetProjectMutatorTest.java,PBXBuildPhase postBuildScriptPhase = scriptBuildPhases.iterator().next();,if (scriptBuildPhases != null ) PBXBuildPhase postBuildScriptPhase = scriptBuildPhases.iterator().next();
NewNativeTargetProjectMutatorTest.java,PBXShellScriptBuildPhase phase = scriptBuildPhases.iterator().next();,if (scriptBuildPhases != null ) PBXShellScriptBuildPhase phase = scriptBuildPhases.iterator().next();
NewNativeTargetProjectMutatorTest.java,NewNativeTargetProjectMutator mutator = mutator(scenario.graphBuilder.getSourcePathResolver());,if (mutator(scenario != null ) NewNativeTargetProjectMutator mutator = mutator(scenario.graphBuilder.getSourcePathResolver());
NewNativeTargetProjectMutatorTest.java,PBXShellScriptBuildPhase phase = scriptBuildPhases.iterator().next();,if (scriptBuildPhases != null ) PBXShellScriptBuildPhase phase = scriptBuildPhases.iterator().next();
NewNativeTargetProjectMutatorTest.java,String shellScript = phase.getShellScript();,if (phase != null ) String shellScript = phase.getShellScript();
NewNativeTargetProjectMutatorTest.java,NewNativeTargetProjectMutator mutator = mutator(scenario.graphBuilder.getSourcePathResolver());,if (mutator(scenario != null ) NewNativeTargetProjectMutator mutator = mutator(scenario.graphBuilder.getSourcePathResolver());
NewNativeTargetProjectMutatorTest.java,PBXShellScriptBuildPhase phase = scriptBuildPhases.iterator().next();,if (scriptBuildPhases != null ) PBXShellScriptBuildPhase phase = scriptBuildPhases.iterator().next();
NewNativeTargetProjectMutatorTest.java,String shellScript = phase.getShellScript();,if (phase != null ) String shellScript = phase.getShellScript();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXShellScriptBuildPhase shellScriptBuildPhase = shellScriptBuildPhases.iterator().next();,if (shellScriptBuildPhases != null ) PBXShellScriptBuildPhase shellScriptBuildPhase = shellScriptBuildPhases.iterator().next();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXShellScriptBuildPhase shellScriptBuildPhase = shellScriptBuildPhases.iterator().next();,if (shellScriptBuildPhases != null ) PBXShellScriptBuildPhase shellScriptBuildPhase = shellScriptBuildPhases.iterator().next();
ProjectGeneratorTest.java,PBXProject generatedProject = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject generatedProject = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject generatedProject = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject generatedProject = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject generatedProject = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject generatedProject = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject pbxProject = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject pbxProject = projectGenerator.getGeneratedProject();
ParallelVersionedTargetGraphBuilder.java,VersionInfo info = this.versionInfo.get(node.getBuildTarget());,if (this != null ) VersionInfo info = this.versionInfo.get(node.getBuildTarget());
ParallelVersionedTargetGraphBuilder.java,long start = System.currentTimeMillis();,if (System != null ) long start = System.currentTimeMillis();
ParallelVersionedTargetGraphBuilder.java,long end = System.currentTimeMillis();,if (System != null ) long end = System.currentTimeMillis();
AbiFilteringClassVisitorTest.java,"filteringVisitor = new AbiFilteringClassVisitor(mockVisitor, ImmutableSet.of());","if (ImmutableSet != null ) filteringVisitor = new AbiFilteringClassVisitor(mockVisitor, ImmutableSet.of());"
CxxConstructorArgTest.java,ImmutableTestCxxConstructorArg.Builder builder = ImmutableTestCxxConstructorArg.builder();,if (ImmutableTestCxxConstructorArg != null ) ImmutableTestCxxConstructorArg.Builder builder = ImmutableTestCxxConstructorArg.builder();
JavaTest.java,SourcePath outputSourcePath = rule.getSourcePathToOutput();,if (rule != null ) SourcePath outputSourcePath = rule.getSourcePathToOutput();
JavaTest.java,Set<String> sourceClassNames = Sets.newHashSetWithExpectedSize(sources.size());,if (Sets != null ) Set<String> sourceClassNames = Sets.newHashSetWithExpectedSize(sources.size());
OutputMacroExpander.java,this.name = input.getOutputName();,if (input != null ) this.name = input.getOutputName();
WatchmanClientIntegrationTest.java,WatchmanClient client = clientOpt.get();,if (clientOpt != null ) WatchmanClient client = clientOpt.get();
NewNativeTargetProjectMutator.java,PBXGroup targetGroup = project.getMainGroup();,if (project != null ) PBXGroup targetGroup = project.getMainGroup();
NewNativeTargetProjectMutator.java,optTargetGroup = Optional.empty();,if (Optional != null ) optTargetGroup = Optional.empty();
NewNativeTargetProjectMutator.java,String variantDirectoryName = variantDirectory.getFileName().toString();,if (variantDirectory != null ) String variantDirectoryName = variantDirectory.getFileName().toString();
NewNativeTargetProjectMutator.java,String variantFileName = variantFilePath.getFileName().toString();,if (variantFilePath != null ) String variantFileName = variantFilePath.getFileName().toString();
ProjectGenerator.java,PBXGroup group = project.getMainGroup();,if (project != null ) PBXGroup group = project.getMainGroup();
JavaLibraryRuleHelper.java,JavaLibraryDescription.CoreArg arg = targetNode.getConstructorArg();,if (targetNode != null ) JavaLibraryDescription.CoreArg arg = targetNode.getConstructorArg();
JavaLibraryRuleHelper.java,String defaultSourceLevel = languageLevelOptions.getSourceLevel();,if (languageLevelOptions != null ) String defaultSourceLevel = languageLevelOptions.getSourceLevel();
JavaLibraryRuleHelper.java,String defaultTargetLevel = languageLevelOptions.getTargetLevel();,if (languageLevelOptions != null ) String defaultTargetLevel = languageLevelOptions.getTargetLevel();
TargetSpecResolver.java,Path basePath = spec.getBuildFileSpec().getBasePath();,if (spec != null ) Path basePath = spec.getBuildFileSpec().getBasePath();
AbstractParser.java,Cell owningCell = cell.getCell(targetNode.getBuildTarget());,if (cell != null ) Cell owningCell = cell.getCell(targetNode.getBuildTarget());
AbstractParser.java,Cell owningCell = cell.getCell(targetNode.getBuildTarget());,if (cell != null ) Cell owningCell = cell.getCell(targetNode.getBuildTarget());
AbstractParser.java,String shortName = targetNode.getBuildTarget().getShortName();,if (targetNode != null ) String shortName = targetNode.getBuildTarget().getShortName();
TargetsCommand.java,TargetGraph originalTargetGraph = targetGraphAndBuildTargets.getFirst();,if (targetGraphAndBuildTargets != null ) TargetGraph originalTargetGraph = targetGraphAndBuildTargets.getFirst();
AppleBundle.java,Path pathInBundle = resolver.getRelativePath(path).getFileName();,if (resolver != null ) Path pathInBundle = resolver.getRelativePath(path).getFileName();
AppleBundle.java,Path resourcesDestinationPath = bundleRoot.resolve(this.destinations.getResourcesPath());,if (bundleRoot != null ) Path resourcesDestinationPath = bundleRoot.resolve(this.destinations.getResourcesPath());
AppleBundle.java,Path destinationPath = resourcesDestinationPath.resolve(resolvedFilePath.getFileName());,if (resourcesDestinationPath != null ) Path destinationPath = resourcesDestinationPath.resolve(resolvedFilePath.getFileName());
AppleBundle.java,Path destinationPath = resourcesDestinationPath.resolve(resolvedFilePath.getFileName());,if (resourcesDestinationPath != null ) Path destinationPath = resourcesDestinationPath.resolve(resolvedFilePath.getFileName());
AppleBundle.java,Path destinationPath = resourcesDestinationPath.resolve(resolvedFilePath.getFileName());,if (resourcesDestinationPath != null ) Path destinationPath = resourcesDestinationPath.resolve(resolvedFilePath.getFileName());
ShBinary.java,Path rootPath = cellRoots.getCellPathOrThrow(Optional.empty());,if (cellRoots != null ) Path rootPath = cellRoots.getCellPathOrThrow(Optional.empty());
ShBinary.java,Path rootPath = cellRoots.getCellPathOrThrow(Optional.empty());,if (cellRoots != null ) Path rootPath = cellRoots.getCellPathOrThrow(Optional.empty());
ShBinary.java,matchedPath = cellEntry.getValue();,if (cellEntry != null ) matchedPath = cellEntry.getValue();
AndroidNdkHelper.java,androidNdk = Optional.empty();,if (Optional != null ) androidNdk = Optional.empty();
AuditCellCommand.java,CellPathResolver cellPathResolver = params.getCell().getCellPathResolver();,if (params != null ) CellPathResolver cellPathResolver = params.getCell().getCellPathResolver();
ImmutableUnconfiguredBuildTargetView.java,String cell = data.getCell();,if (data != null ) String cell = data.getCell();
IsolatedBuildableBuilder.java,ProjectFilesystem filesystem = filesystemFunction.apply(reconstructed.target.getCell());,if (filesystemFunction != null ) ProjectFilesystem filesystem = filesystemFunction.apply(reconstructed.target.getCell());
BuildTargetFactory.java,Optional<String> cellName = arg.getCellName();,if (arg != null ) Optional<String> cellName = arg.getCellName();
UnconfiguredBuildTargetFactoryForTests.java,Optional<String> cellName = arg.getCellName();,if (arg != null ) Optional<String> cellName = arg.getCellName();
WorkspaceAndProjectGenerator.java,outputDirectory = workspaceBuildTarget.getBasePath();,if (workspaceBuildTarget != null ) outputDirectory = workspaceBuildTarget.getBasePath();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXGroup mainGroup = project.getMainGroup();,if (project != null ) PBXGroup mainGroup = project.getMainGroup();
WorkspaceAndProjectGeneratorTest.java,Optional<ProjectGenerator> projectGeneratorOptional = generator.getCombinedProjectGenerator();,if (generator != null ) Optional<ProjectGenerator> projectGeneratorOptional = generator.getCombinedProjectGenerator();
WorkspaceAndProjectGeneratorTest.java,ProjectGenerator projectGenerator = projectGeneratorOptional.get();,if (projectGeneratorOptional != null ) ProjectGenerator projectGenerator = projectGeneratorOptional.get();
AbstractUnusedDependenciesFinder.java,Optional<BuildTarget> abiJarTarget = hasAbi.getSourceOnlyAbiJar();,if (hasAbi != null ) Optional<BuildTarget> abiJarTarget = hasAbi.getSourceOnlyAbiJar();
AbstractUnusedDependenciesFinder.java,abiJarTarget = hasAbi.getAbiJar();,if (hasAbi != null ) abiJarTarget = hasAbi.getAbiJar();
AbstractUnusedDependenciesFinder.java,SourcePath dependencyOutput = dependency.getSourcePathToOutput();,if (dependency != null ) SourcePath dependencyOutput = dependency.getSourcePathToOutput();
FixCommandHandler.java,Path fixPath = fixSpecPath.get();,if (fixSpecPath != null ) Path fixPath = fixSpecPath.get();
FixCommandHandler.java,Path runPath = commandArgsPath.get();,if (commandArgsPath != null ) Path runPath = commandArgsPath.get();
FilesystemBackedBuildFileTree.java,Path basePath = target.getBasePath();,if (target != null ) Path basePath = target.getBasePath();
FilesystemBackedBuildFileTree.java,ImmutableSet<PathMatcher> ignoredPaths = projectFilesystem.getIgnorePaths();,if (projectFilesystem != null ) ImmutableSet<PathMatcher> ignoredPaths = projectFilesystem.getIgnorePaths();
FilesystemBackedBuildFileTreeTest.java,Path tempDir = tmp.getRoot();,if (tmp != null ) Path tempDir = tmp.getRoot();
MetadataProviderFactory.java,metadata = builder.build();,if (builder != null ) metadata = builder.build();
BuildifierExternalFormatAction.java,Project project = anActionEvent.getProject();,if (anActionEvent != null ) Project project = anActionEvent.getProject();
BuildifierExternalFormatAction.java,DataContext dataContext = anActionEvent.getDataContext();,if (anActionEvent != null ) DataContext dataContext = anActionEvent.getDataContext();
MultiThreadedBlobUploader.java,SettableFuture<Void> future = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<Void> future = SettableFuture.create();
InstrumentationTestRunner.java,final String apk = apkLocationReceiver.getApkLocation();,if (apkLocationReceiver != null ) final String apk = apkLocationReceiver.getApkLocation();
GrpcAsyncBlobFetcher.java,MessageDigest messageDigest = protocol.getMessageDigest();,if (protocol != null ) MessageDigest messageDigest = protocol.getMessageDigest();
ApkGenruleTest.java,ToolchainProvider toolchainProvider = new ToolchainProviderBuilder().build();,if (ToolchainProviderBuilder() != null ) ToolchainProvider toolchainProvider = new ToolchainProviderBuilder().build();
AbstractPrebuiltCxxLibraryGroupDescription.java,CxxPreprocessorInput.Builder builder = CxxPreprocessorInput.builder();,if (CxxPreprocessorInput != null ) CxxPreprocessorInput.Builder builder = CxxPreprocessorInput.builder();
AbstractPrebuiltCxxLibraryGroupDescription.java,NativeLinkableInput.Builder builder = NativeLinkableInput.builder();,if (NativeLinkableInput != null ) NativeLinkableInput.Builder builder = NativeLinkableInput.builder();
PythonDslProjectBuildFileParser.java,buckPyProcessJsonGenerator = ObjectMappers.createGenerator(buckPyProcess.getOutputStream());,if (ObjectMappers != null ) buckPyProcessJsonGenerator = ObjectMappers.createGenerator(buckPyProcess.getOutputStream());
PythonDslProjectBuildFileParser.java,InputStream stderr = buckPyProcess.getErrorStream();,if (buckPyProcess != null ) InputStream stderr = buckPyProcess.getErrorStream();
AndroidDebugger.java,long start = System.currentTimeMillis();,if (System != null ) long start = System.currentTimeMillis();
AndroidDebugger.java,IDevice[] devices = AndroidDebugBridge.getBridge().getDevices();,if (AndroidDebugBridge != null ) IDevice[] devices = AndroidDebugBridge.getBridge().getDevices();
AndroidDebugger.java,String debugPort = String.valueOf(client.getDebuggerListenPort());,if (String != null ) String debugPort = String.valueOf(client.getDebuggerListenPort());
AndroidDebugger.java,final RemoteConfigurationType remoteConfigurationType = RemoteConfigurationType.getInstance();,if (RemoteConfigurationType != null ) final RemoteConfigurationType remoteConfigurationType = RemoteConfigurationType.getInstance();
AndroidDebugger.java,final ConfigurationFactory factory = remoteConfigurationType.getFactory();,if (remoteConfigurationType != null ) final ConfigurationFactory factory = remoteConfigurationType.getFactory();
AndroidDebugger.java,final RemoteConfiguration configuration = (RemoteConfiguration) runSettings.getConfiguration();,if (runSettings != null ) final RemoteConfiguration configuration = (RemoteConfiguration) runSettings.getConfiguration();
ZipFileDescription.java,Optional<Boolean> mergeSourceZips = args.getMergeSourceZips();,if (args != null ) Optional<Boolean> mergeSourceZips = args.getMergeSourceZips();
PythonEnvironmentTest.java,"CellPathResolver cellResolver = ImmutableDefaultCellPathResolver.of(root, ImmutableMap.of());","if (ImmutableMap != null ) CellPathResolver cellResolver = ImmutableDefaultCellPathResolver.of(root, ImmutableMap.of());"
GraphEnhancementQueryEnvironmentTest.java,"cellRoots = DefaultCellPathResolver.of(ROOT, ImmutableMap.of());","if (ImmutableMap != null ) cellRoots = DefaultCellPathResolver.of(ROOT, ImmutableMap.of());"
PrebuiltCxxLibraryDescription.java,CxxPlatform cxxPlatform = key.getCxxPlatform();,if (key != null ) CxxPlatform cxxPlatform = key.getCxxPlatform();
PrebuiltCxxLibraryDescription.java,Linker.LinkableDepType type = key.getType();,if (key != null ) Linker.LinkableDepType type = key.getType();
PrebuiltCxxLibraryDescription.java,boolean forceLinkWhole = key.getForceLinkWhole();,if (key != null ) boolean forceLinkWhole = key.getForceLinkWhole();
DefaultTargetNodeToBuildRuleTransformer.java,T arg = targetNode.getConstructorArg();,if (targetNode != null ) T arg = targetNode.getConstructorArg();
DefaultTargetNodeToBuildRuleTransformer.java,Set<BuildTarget> extraDeps = targetNode.getExtraDeps();,if (targetNode != null ) Set<BuildTarget> extraDeps = targetNode.getExtraDeps();
DefaultTargetNodeToBuildRuleTransformer.java,Set<BuildTarget> targetGraphOnlyDeps = targetNode.getTargetGraphOnlyDeps();,if (targetNode != null ) Set<BuildTarget> targetGraphOnlyDeps = targetNode.getTargetGraphOnlyDeps();
DefaultClassUsageFileReader.java,Path cellName = pathIterator.next();,if (pathIterator != null ) Path cellName = pathIterator.next();
DefaultClassUsageFileWriter.java,Path cellRoot = cellEntry.getValue();,if (cellEntry != null ) Path cellRoot = cellEntry.getValue();
DistBuildTargetGraphCodec.java,cell = cell.withCanonicalName(Optional.empty());,if (cell != null ) cell = cell.withCanonicalName(Optional.empty());
BuckGlobalStateFactory.java,Path cellRoot = cell.getRoot();,if (cell != null ) Path cellRoot = cell.getRoot();
BuckGlobalStateFactory.java,ImmutableSortedSet<Path> allRoots = cell.getKnownRoots();,if (cell != null ) ImmutableSortedSet<Path> allRoots = cell.getKnownRoots();
BuckGlobalStateFactory.java,Path path = cellRoot.getRoot();,if (cellRoot != null ) Path path = cellRoot.getRoot();
OutputsCollector.java,"MerkleTreeNode node = merkleTreeCache.createNode(files, ImmutableMap.of());","if (ImmutableMap != null ) MerkleTreeNode node = merkleTreeCache.createNode(files, ImmutableMap.of());"
LocalContentAddressedStorageTest.java,"MerkleTreeNode node = nodeCache.createNode(files, ImmutableMap.of());","if (ImmutableMap != null ) MerkleTreeNode node = nodeCache.createNode(files, ImmutableMap.of());"
SkylarkDescription.java,outputs = ctx.getOutputs();,if (ctx != null ) outputs = ctx.getOutputs();
ArtifactImpl.java,Path normalizedOuptutPath = outputPath.normalize();,if (outputPath != null ) Path normalizedOuptutPath = outputPath.normalize();
RustCompileUtils.java,rustArch = arch.toString();,if (arch != null ) rustArch = arch.toString();
DefaultConstructorArgMarshaller.java,T dto = constructorArgBuilder.build();,if (constructorArgBuilder != null ) T dto = constructorArgBuilder.build();
QueryCommand.java,String output = stringWriter.getBuffer().toString();,if (stringWriter != null ) String output = stringWriter.getBuffer().toString();
ActionWrapperDataFactoryTest.java,ImmutableSet<Artifact> inputs = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<Artifact> inputs = ImmutableSet.of();
AndroidNativeLibsPackageableGraphEnhancer.java,NativeLinkableGroup nativeLinkableGroup = linkableEntry.getValue();,if (linkableEntry != null ) NativeLinkableGroup nativeLinkableGroup = linkableEntry.getValue();
AndroidNativeLibsPackageableGraphEnhancer.java,nativeLinkablesAssets = enhancement.getMergedLinkablesAssets();,if (enhancement != null ) nativeLinkablesAssets = enhancement.getMergedLinkablesAssets();
NativeLibraryMergeEnhancer.java,ImmutableSet<NativeLinkableGroup> linkableAssetSet = linkableAssetSetBuilder.build();,if (linkableAssetSetBuilder != null ) ImmutableSet<NativeLinkableGroup> linkableAssetSet = linkableAssetSetBuilder.build();
NativeLibraryMergeEnhancer.java,Optional<NativeLinkableGroup> glueLinkable = Optional.empty();,if (Optional != null ) Optional<NativeLinkableGroup> glueLinkable = Optional.empty();
NativeLibraryMergeEnhancer.java,BuildRule rule = graphBuilder.getRule(nativeLibraryMergeGlue.get());,if (graphBuilder != null ) BuildRule rule = graphBuilder.getRule(nativeLibraryMergeGlue.get());
NativeLibraryMergeEnhancer.java,Optional<String> mergedName = entry.getValue().getSoname();,if (entry != null ) Optional<String> mergedName = entry.getValue().getSoname();
NativeLibraryMergeEnhancer.java,String origName = sonameEntry.getKey();,if (sonameEntry != null ) String origName = sonameEntry.getKey();
NativeLibraryMergeEnhancer.java,SourcePath sourcePath = sonameEntry.getValue();,if (sonameEntry != null ) SourcePath sourcePath = sonameEntry.getValue();
NativeLibraryMergeEnhancer.java,boolean isActuallyMerged = entry.getValue().isActuallyMerged();,if (entry != null ) boolean isActuallyMerged = entry.getValue().isActuallyMerged();
NativeLibraryMergeEnhancer.java,ImmutableCollection<NativeLinkableGroup> preMergeLibs = constituents.getLinkables();,if (constituents != null ) ImmutableCollection<NativeLinkableGroup> preMergeLibs = constituents.getLinkables();
NativeLibraryMergeEnhancer.java,ImmutableList<NativeLinkableGroup> usingGlue = ImmutableList.of();,if (ImmutableList != null ) ImmutableList<NativeLinkableGroup> usingGlue = ImmutableList.of();
BuildReportUpload.java,Optional<URL> endpointUrl = buildReportConfig.getEndpointUrl();,if (buildReportConfig != null ) Optional<URL> endpointUrl = buildReportConfig.getEndpointUrl();
BuildReportUploader.java,String buildId = report.getBuildId().toString();,if (report != null ) String buildId = report.getBuildId().toString();
BuildReportUploader.java,FormBody.Builder formBody = new FormBody.Builder();,if (FormBody != null ) FormBody.Builder formBody = new FormBody.Builder();
BuildReportUploader.java,Response httpResponse = httpClient.newCall(request).execute();,if (httpClient != null ) Response httpResponse = httpClient.newCall(request).execute();
BuildReportUploader.java,ResponseBody responseBody = httpResponse.body();,if (httpResponse != null ) ResponseBody responseBody = httpResponse.body();
BuildReportUploader.java,JsonNode root = ObjectMappers.READER.readTree(responseBody.string());,if (ObjectMappers != null ) JsonNode root = ObjectMappers.READER.readTree(responseBody.string());
BuildReportUploader.java,String serverException = root.toString();,if (root != null ) String serverException = root.toString();
BuildReportUploader.java,Response httpResponse = httpClient.newCall(request).execute();,if (httpClient != null ) Response httpResponse = httpClient.newCall(request).execute();
NativeLinkableGroups.java,BuildTarget depTarget = dep.getBuildTarget();,if (dep != null ) BuildTarget depTarget = dep.getBuildTarget();
BuckBuildUtil.java,List<BuckArgument> arguments = argumentList.getArgumentList();,if (argumentList != null ) List<BuckArgument> arguments = argumentList.getArgumentList();
BuckBuildUtil.java,PsiElement lvalue = arg.getIdentifier();,if (arg != null ) PsiElement lvalue = arg.getIdentifier();
BuckBuildUtil.java,PsiElement propertyName = lvalue.getFirstChild();,if (lvalue != null ) PsiElement propertyName = lvalue.getFirstChild();
BuckBuildUtil.java,BuckExpression expression = arg.getExpression();,if (arg != null ) BuckExpression expression = arg.getExpression();
BuckPsiUtils.java,stringElement = stringElement.getParent();,if (stringElement != null ) stringElement = stringElement.getParent();
BuckPsiUtils.java,BuckIdentifier buckIdentifier = buckArgument.getIdentifier();,if (buckArgument != null ) BuckIdentifier buckIdentifier = buckArgument.getIdentifier();
BuckPsiUtils.java,String name = BuckPsiUtils.getStringValueFromExpression(buckArgument.getExpression());,if (BuckPsiUtils != null ) String name = BuckPsiUtils.getStringValueFromExpression(buckArgument.getExpression());
HaskellGhciDescription.java,boolean forceLinkWhole = nativeLinkableGroup.forceLinkWholeForHaskellOmnibus();,if (nativeLinkableGroup != null ) boolean forceLinkWhole = nativeLinkableGroup.forceLinkWholeForHaskellOmnibus();
DefaultConstructorArgMarshaller.java,T dto = dtoAndBuild.build();,if (dtoAndBuild != null ) T dto = dtoAndBuild.build();
DefaultConstructorArgMarshaller.java,T dto = dtoAndBuild.build();,if (dtoAndBuild != null ) T dto = dtoAndBuild.build();
DefaultSelectorListResolver.java,Selectable selectable = selectableResolver.getSelectable(selectorKey.getBuildTarget());,if (selectableResolver != null ) Selectable selectable = selectableResolver.getSelectable(selectorKey.getBuildTarget());
SplitZipStepTest.java,ImmutableSet<APKModule> requires = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<APKModule> requires = ImmutableSet.of();
BuildReportUploader.java,String body = responseBody.string();,if (responseBody != null ) String body = responseBody.string();
BuildReportUploaderTest.java,Optional<String> errorMessage = response.getErrorMessage();,if (response != null ) Optional<String> errorMessage = response.getErrorMessage();
BuildReportUploader.java,ResponseBody responseBody = httpResponse.body();,if (httpResponse != null ) ResponseBody responseBody = httpResponse.body();
BuildReportUploader.java,String body = responseBody.string();,if (responseBody != null ) String body = responseBody.string();
RealAndroidDevice.java,Path destination = entry.getKey();,if (entry != null ) Path destination = entry.getKey();
RealAndroidDevice.java,Path source = entry.getValue();,if (entry != null ) Path source = entry.getValue();
RealAndroidDevice.java,String message = errCode.getMessage();,if (errCode != null ) String message = errCode.getMessage();
NativeLinkableGroups.java,libTargetString = lib.getValue().toString();,if (lib != null ) libTargetString = lib.getValue().toString();
NativeLinkableGroups.java,prevTargetString = prev.toString();,if (prev != null ) prevTargetString = prev.toString();
Omnibus.java,BuildTarget linkableTarget = nativeLinkableGroup.getBuildTarget();,if (nativeLinkableGroup != null ) BuildTarget linkableTarget = nativeLinkableGroup.getBuildTarget();
TopologicalSortTest.java,"ImmutableList<String> sorted = TopologicalSort.snowflakeSort(graph, Ordering.natural());","if (Ordering != null ) ImmutableList<String> sorted = TopologicalSort.snowflakeSort(graph, Ordering.natural());"
NativeLinkableGroups.java,BuildTarget depTarget = dep.getBuildTarget();,if (dep != null ) BuildTarget depTarget = dep.getBuildTarget();
NativeLinkableGroups.java,ImmutableList<BuildTarget> ordered = TopologicalSort.snowflakeSort(graph).reverse();,if (TopologicalSort != null ) ImmutableList<BuildTarget> ordered = TopologicalSort.snowflakeSort(graph).reverse();
NativeLinkableGroups.java,ImmutableList<BuildTarget> ordered = TopologicalSort.sort(graph).reverse();,if (TopologicalSort != null ) ImmutableList<BuildTarget> ordered = TopologicalSort.sort(graph).reverse();
GrpcRemoteExecutionClients.java,MessageDigest messageDigest = PROTOCOL.getMessageDigest();,if (PROTOCOL != null ) MessageDigest messageDigest = PROTOCOL.getMessageDigest();
GrpcRemoteExecutionClients.java,ByteString data = value.getData();,if (value != null ) ByteString data = value.getData();
GrpcRemoteExecutionClients.java,size += data.size();,if (data != null ) size += data.size();
FilterResourcesSteps.java,double factor = targetDensity.value() / density.value();,if (density != null ) double factor = targetDensity.value() / density.value();
ParamInfo.java,Method getter = closestGetterOnAbstractClassOrInterface.get();,if (closestGetterOnAbstractClassOrInterface != null ) Method getter = closestGetterOnAbstractClassOrInterface.get();
ParamInfo.java,this.name = builder.toString();,if (builder != null ) this.name = builder.toString();
ParamInfo.java,Method getter = this.concreteGetter.get();,if (this != null ) Method getter = this.concreteGetter.get();
RealAndroidDevice.java,this.error = Optional.empty();,if (Optional != null ) this.error = Optional.empty();
RealAndroidDevice.java,outToDevice = clientSocket.getOutputStream();,if (clientSocket != null ) outToDevice = clientSocket.getOutputStream();
AndroidBinaryResourcesGraphEnhancer.java,ImmutableSortedSet<BuildRule> compileDeps = ImmutableSortedSet.of(resourceFilterRule.get());,if (ImmutableSortedSet != null ) ImmutableSortedSet<BuildRule> compileDeps = ImmutableSortedSet.of(resourceFilterRule.get());
NativeLinkables.java,BuildTarget depTarget = dep.getBuildTarget();,if (dep != null ) BuildTarget depTarget = dep.getBuildTarget();
NativeLinkables.java,ImmutableList<BuildTarget> ordered = TopologicalSort.sort(graph).reverse();,if (TopologicalSort != null ) ImmutableList<BuildTarget> ordered = TopologicalSort.sort(graph).reverse();
AppleLibraryDescription.java,CxxPreprocessorInput.Builder builder = CxxPreprocessorInput.builder();,if (CxxPreprocessorInput != null ) CxxPreprocessorInput.Builder builder = CxxPreprocessorInput.builder();
AppleLibraryDescription.java,CxxPreprocessorInput input = builder.build();,if (builder != null ) CxxPreprocessorInput input = builder.build();
AppleLibraryDescription.java,CxxPreprocessorInput.Builder builder = CxxPreprocessorInput.builder();,if (CxxPreprocessorInput != null ) CxxPreprocessorInput.Builder builder = CxxPreprocessorInput.builder();
AppleLibraryDescription.java,CxxPreprocessorInput input = builder.build();,if (builder != null ) CxxPreprocessorInput input = builder.build();
JsLibrary.java,SourcePathResolver resolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver resolver = context.getSourcePathResolver();
JsLibrary.java,ImmutableSortedSet<Flavor> flavors = buildTarget.getFlavors();,if (buildTarget != null ) ImmutableSortedSet<Flavor> flavors = buildTarget.getFlavors();
ArtifactFilesystem.java,BuildArtifactApi buildArtifact = boundArtifact.asBuildArtifact();,if (boundArtifact != null ) BuildArtifactApi buildArtifact = boundArtifact.asBuildArtifact();
ActionWrapperDataFactoryTest.java,ActionAnalysisData analysisData = registered.get(builtArtifact.getActionDataKey());,if (registered != null ) ActionAnalysisData analysisData = registered.get(builtArtifact.getActionDataKey());
JsLibrary.java,SourcePathResolver resolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver resolver = context.getSourcePathResolver();
JsLibrary.java,ImmutableSortedSet<Flavor> flavors = getBuildTarget().getFlavors();,if (getBuildTarget() != null ) ImmutableSortedSet<Flavor> flavors = getBuildTarget().getFlavors();
JsLibrary.java,SourcePathResolver resolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver resolver = context.getSourcePathResolver();
JsLibrary.java,SourcePathResolver resolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver resolver = context.getSourcePathResolver();
DexProducedFromJavaLibrary.java,SourcePathResolver sourcePathResolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver sourcePathResolver = context.getSourcePathResolver();
JsLibrary.java,ImmutableSortedSet<Flavor> flavors = getBuildTarget().getFlavors();,if (getBuildTarget() != null ) ImmutableSortedSet<Flavor> flavors = getBuildTarget().getFlavors();
DexProducedFromJavaLibrary.java,this.desugarEnabled = javaLibrary.isDesugarEnabled();,if (javaLibrary != null ) this.desugarEnabled = javaLibrary.isDesugarEnabled();
DexProducedFromJavaLibrary.java,this.javaLibrarySourcePath = javaLibrary.getSourcePathToOutput();,if (javaLibrary != null ) this.javaLibrarySourcePath = javaLibrary.getSourcePathToOutput();
DexProducedFromJavaLibrary.java,SourcePathResolver sourcePathResolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver sourcePathResolver = context.getSourcePathResolver();
DexProducedFromJavaLibrary.java,boolean hasClassesToDx = !classNamesToHashes.isEmpty();,if (!classNamesToHashes != null ) boolean hasClassesToDx = !classNamesToHashes.isEmpty();
HaskellDescriptionUtils.java,ExplicitCxxToolFlags.Builder toolFlagsBuilder = CxxToolFlags.explicitBuilder();,if (CxxToolFlags != null ) ExplicitCxxToolFlags.Builder toolFlagsBuilder = CxxToolFlags.explicitBuilder();
HaskellDescriptionUtils.java,PreprocessorFlags.Builder ppFlagsBuilder = PreprocessorFlags.builder();,if (PreprocessorFlags != null ) PreprocessorFlags.Builder ppFlagsBuilder = PreprocessorFlags.builder();
HaskellDescriptionUtils.java,PreprocessorFlags ppFlags = ppFlagsBuilder.build();,if (ppFlagsBuilder != null ) PreprocessorFlags ppFlags = ppFlagsBuilder.build();
HaskellLibraryDescription.java,HaskellPackage pkg = compileInput.getPackage();,if (compileInput != null ) HaskellPackage pkg = compileInput.getPackage();
HaskellLibraryDescription.java,ExplicitCxxToolFlags.Builder toolFlagsBuilder = CxxToolFlags.explicitBuilder();,if (CxxToolFlags != null ) ExplicitCxxToolFlags.Builder toolFlagsBuilder = CxxToolFlags.explicitBuilder();
HaskellLibraryDescription.java,PreprocessorFlags.Builder ppFlagsBuilder = PreprocessorFlags.builder();,if (PreprocessorFlags != null ) PreprocessorFlags.Builder ppFlagsBuilder = PreprocessorFlags.builder();
BuckCellRootDirMacro.java,cell = buckCellManager.getDefaultCell();,if (buckCellManager != null ) cell = buckCellManager.getDefaultCell();
BuildReportUploaderTest.java,FullBuildReport reportToSend = new ImmutableFullBuildReport(buckConfig.getConfig());,if (ImmutableFullBuildReport(buckConfig != null ) FullBuildReport reportToSend = new ImmutableFullBuildReport(buckConfig.getConfig());
HttpdForTests.java,localhost = getLocalhostAddress(true).getHostAddress();,if (getLocalhostAddress(true) != null ) localhost = getLocalhostAddress(true).getHostAddress();
Configs.java,RawConfig.Builder builder = RawConfig.builder();,if (RawConfig != null ) RawConfig.Builder builder = RawConfig.builder();
DexProducedFromJavaLibraryThatContainsClassFilesTest.java,BuildRuleParams params = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) BuildRuleParams params = TestBuildRuleParams.create();
DexProducedFromJavaLibraryThatContainsClassFilesTest.java,BuildRuleParams params = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) BuildRuleParams params = TestBuildRuleParams.create();
DexProducedFromJavaLibraryThatContainsClassFilesTest.java,BuildRuleParams params = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) BuildRuleParams params = TestBuildRuleParams.create();
DexWithClassesTest.java,BuildRuleParams params = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) BuildRuleParams params = TestBuildRuleParams.create();
DexWithClassesTest.java,BuildRuleParams params = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) BuildRuleParams params = TestBuildRuleParams.create();
DexProducedFromJavaLibrary.java,this.javaLibrarySourcePath = javaLibrary.getSourcePathToOutput();,if (javaLibrary != null ) this.javaLibrarySourcePath = javaLibrary.getSourcePathToOutput();
DexProducedFromJavaLibrary.java,SourcePath sourcePath = rule.getSourcePathToOutput();,if (rule != null ) SourcePath sourcePath = rule.getSourcePathToOutput();
DexProducedFromJavaLibraryTest.java,BuildRuleParams params = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) BuildRuleParams params = TestBuildRuleParams.create();
XCodeProjectCommandHelperTest.java,explicitTests = ImmutableSet.of();,if (ImmutableSet != null ) explicitTests = ImmutableSet.of();
XCodeProjectCommandHelper.java,ImmutableSet<BuildTarget> graphRoots = targetGraphCreationResult.getBuildTargets();,if (targetGraphCreationResult != null ) ImmutableSet<BuildTarget> graphRoots = targetGraphCreationResult.getBuildTargets();
XCodeProjectCommandHelper.java,TargetGraph projectGraph = targetGraphCreationResult.getTargetGraph();,if (targetGraphCreationResult != null ) TargetGraph projectGraph = targetGraphCreationResult.getTargetGraph();
XCodeProjectCommandHelper.java,ImmutableSet<BuildTarget> explicitTestTargets = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<BuildTarget> explicitTestTargets = ImmutableSet.of();
HybridLocalStrategy.java,job = pendingDelegateOrLocalQueue.poll();,if (pendingDelegateOrLocalQueue != null ) job = pendingDelegateOrLocalQueue.poll();
IjProjectCommandHelper.java,ImmutableSet<BuildTarget> explicitTestTargets = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<BuildTarget> explicitTestTargets = ImmutableSet.of();
IjProjectCommandHelper.java,nodes = projectGraph.getSubgraph(projectRoots).getNodes();,if (projectGraph != null ) nodes = projectGraph.getSubgraph(projectRoots).getNodes();
GoProjectCommandHelper.java,ImmutableSet<BuildTarget> explicitTestTargets = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<BuildTarget> explicitTestTargets = ImmutableSet.of();
DelegateAndGraphsInitializer.java,targetGraph = targetGraphCreationResult.getTargetGraph();,if (targetGraphCreationResult != null ) targetGraph = targetGraphCreationResult.getTargetGraph();
BuildCommand.java,Optional<TargetGraphAndBuildTargets> versionedTargetGraph = Optional.empty();,if (Optional != null ) Optional<TargetGraphAndBuildTargets> versionedTargetGraph = Optional.empty();
TargetsCommand.java,TargetGraph targetGraph = targetGraphAndBuildTargets.getTargetGraph();,if (targetGraphAndBuildTargets != null ) TargetGraph targetGraph = targetGraphAndBuildTargets.getTargetGraph();
DelegateAndGraphsInitializer.java,targetGraph = targetGraphAndBuildTargets.getTargetGraph();,if (targetGraphAndBuildTargets != null ) targetGraph = targetGraphAndBuildTargets.getTargetGraph();
AndroidNativeLibsPackageableGraphEnhancer.java,NativeLinkable nativeLinkable = linkableEntry.getValue();,if (linkableEntry != null ) NativeLinkable nativeLinkable = linkableEntry.getValue();
NativeLibraryMergeEnhancer.java,ImmutableSet<NativeLinkable> linkableAssetSet = linkableAssetSetBuilder.build();,if (linkableAssetSetBuilder != null ) ImmutableSet<NativeLinkable> linkableAssetSet = linkableAssetSetBuilder.build();
NativeLibraryMergeEnhancer.java,Optional<NativeLinkable> glueLinkable = Optional.empty();,if (Optional != null ) Optional<NativeLinkable> glueLinkable = Optional.empty();
NativeLibraryMergeEnhancer.java,ImmutableCollection<NativeLinkable> preMergeLibs = constituents.getLinkables();,if (constituents != null ) ImmutableCollection<NativeLinkable> preMergeLibs = constituents.getLinkables();
NativeLibraryMergeEnhancer.java,ImmutableList<NativeLinkable> usingGlue = ImmutableList.of();,if (ImmutableList != null ) ImmutableList<NativeLinkable> usingGlue = ImmutableList.of();
AndroidPackageableCollector.java,APKModule module = apkModuleGraph.findModuleForTarget(nativeLinkable.getBuildTarget());,if (apkModuleGraph != null ) APKModule module = apkModuleGraph.findModuleForTarget(nativeLinkable.getBuildTarget());
AndroidPackageableCollector.java,APKModule module = apkModuleGraph.findModuleForTarget(nativeLinkable.getBuildTarget());,if (apkModuleGraph != null ) APKModule module = apkModuleGraph.findModuleForTarget(nativeLinkable.getBuildTarget());
Omnibus.java,BuildTarget linkableTarget = nativeLinkable.getBuildTarget();,if (nativeLinkable != null ) BuildTarget linkableTarget = nativeLinkable.getBuildTarget();
HaskellDescriptionUtils.java,NativeLinkable.Linkage link = nativeLinkable.getPreferredLinkage(platform.getCxxPlatform());,if (nativeLinkable != null ) NativeLinkable.Linkage link = nativeLinkable.getPreferredLinkage(platform.getCxxPlatform());
RuleAnalysisContextImplTest.java,"RuleAnalysisContextImpl context = new RuleAnalysisContextImpl(buildTarget, ImmutableMap.of());","if (ImmutableMap != null ) RuleAnalysisContextImpl context = new RuleAnalysisContextImpl(buildTarget, ImmutableMap.of());"
RuleAnalysisContextImplTest.java,"RuleAnalysisContextImpl context = new RuleAnalysisContextImpl(buildTarget, ImmutableMap.of());","if (ImmutableMap != null ) RuleAnalysisContextImpl context = new RuleAnalysisContextImpl(buildTarget, ImmutableMap.of());"
RuleAnalysisContextImplTest.java,"RuleAnalysisContextImpl context = new RuleAnalysisContextImpl(target, ImmutableMap.of());","if (ImmutableMap != null ) RuleAnalysisContextImpl context = new RuleAnalysisContextImpl(target, ImmutableMap.of());"
RuleAnalysisContextImplTest.java,RuleAnalysisContextImpl context = new RuleAnalysisContextImpl(ImmutableMap.of());,if (RuleAnalysisContextImpl(ImmutableMap != null ) RuleAnalysisContextImpl context = new RuleAnalysisContextImpl(ImmutableMap.of());
RuleAnalysisContextImplTest.java,RuleAnalysisContextImpl context = new RuleAnalysisContextImpl(ImmutableMap.of());,if (RuleAnalysisContextImpl(ImmutableMap != null ) RuleAnalysisContextImpl context = new RuleAnalysisContextImpl(ImmutableMap.of());
RuleAnalysisContextImplTest.java,RuleAnalysisContextImpl context = new RuleAnalysisContextImpl(ImmutableMap.of());,if (RuleAnalysisContextImpl(ImmutableMap != null ) RuleAnalysisContextImpl context = new RuleAnalysisContextImpl(ImmutableMap.of());
ActionWrapperDataFactoryTest.java,ImmutableSet<Artifact> inputs = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<Artifact> inputs = ImmutableSet.of();
ActionWrapperDataFactoryTest.java,ImmutableSet<Artifact> inputs = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<Artifact> inputs = ImmutableSet.of();
Deserializer.java,String path = stream.readUTF();,if (stream != null ) String path = stream.readUTF();
Deserializer.java,Path path = Paths.get(stream.readUTF());,if (Paths != null ) Path path = Paths.get(stream.readUTF());
Deserializer.java,Path path = Paths.get(stream.readUTF());,if (Paths != null ) Path path = Paths.get(stream.readUTF());
Deserializer.java,Path relativePath = Paths.get(stream.readUTF());,if (Paths != null ) Path relativePath = Paths.get(stream.readUTF());
FileBundler.java,Path absoluteBasePathParent = absoluteBasePath.getParent();,if (absoluteBasePath != null ) Path absoluteBasePathParent = absoluteBasePath.getParent();
ZipFileExtractor.java,Path relativePath = pathEntry.getKey();,if (pathEntry != null ) Path relativePath = pathEntry.getKey();
ZipFileExtractor.java,Path absolutePath = Objects.requireNonNull(pathEntry.getValue());,if (Objects != null ) Path absolutePath = Objects.requireNonNull(pathEntry.getValue());
SrcZipAwareFileBundlerTest.java,filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());,if (TestProjectFilesystems != null ) filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());
SrcZipAwareFileBundlerTest.java,filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());,if (TestProjectFilesystems != null ) filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());
ManifestTest.java,FileHashCache fileHashCache = new FakeFileHashCache(ImmutableMap.of());,if (FakeFileHashCache(ImmutableMap != null ) FileHashCache fileHashCache = new FakeFileHashCache(ImmutableMap.of());
TargetGraphHashingTest.java,FileHashCache cache = new FakeFileHashCache(ImmutableMap.of());,if (FakeFileHashCache(ImmutableMap != null ) FileHashCache cache = new FakeFileHashCache(ImmutableMap.of());
RuleKeyTest.java,FileHashCache hashCache = new FakeFileHashCache(ImmutableMap.of());,if (FakeFileHashCache(ImmutableMap != null ) FileHashCache hashCache = new FakeFileHashCache(ImmutableMap.of());
RuleKeyTest.java,FileHashCache hashCache = new FakeFileHashCache(ImmutableMap.of());,if (FakeFileHashCache(ImmutableMap != null ) FileHashCache hashCache = new FakeFileHashCache(ImmutableMap.of());
DotTest.java,String dotGraph = output.toString();,if (output != null ) String dotGraph = output.toString();
DotTest.java,String dotGraph = output.toString();,if (output != null ) String dotGraph = output.toString();
DotTest.java,String dotGraph = output.toString();,if (output != null ) String dotGraph = output.toString();
DotTest.java,String dotGraph = output.toString();,if (output != null ) String dotGraph = output.toString();
DotTest.java,String dotGraph = output.toString();,if (output != null ) String dotGraph = output.toString();
SkylarkUserDefinedRulesParserTest.java,projectFilesystem = FakeProjectFilesystem.createRealTempFilesystem();,if (FakeProjectFilesystem != null ) projectFilesystem = FakeProjectFilesystem.createRealTempFilesystem();
CxxPlatforms.java,Optional<Tool> configNm = config.getNm();,if (config != null ) Optional<Tool> configNm = config.getNm();
MultiThreadedBlobUploader.java,size += data.uploadData.getDigest().getSize();,if (data != null ) size += data.uploadData.getDigest().getSize();
RemoteExecutionStrategy.java,Optional<Throwable> exception = Optional.empty();,if (Optional != null ) Optional<Throwable> exception = Optional.empty();
RemoteExecutionStrategy.java,exception = Optional.of(e.getCause());,if (Optional != null ) exception = Optional.of(e.getCause());
CachingBuildRuleBuilder.java,AtomicReference<Long> outputSize = Atomics.newReference();,if (Atomics != null ) AtomicReference<Long> outputSize = Atomics.newReference();
BuildInfoRecorderTest.java,"byte[] contents = ""contents"".getBytes();","if (""contents"" != null ) byte[] contents = ""contents"".getBytes();"
DefaultJavaLibraryIntegrationTest.java,ZipFile outputZipFile = new ZipFile(outputFile.toFile());,if (ZipFile(outputFile != null ) ZipFile outputZipFile = new ZipFile(outputFile.toFile());
DefaultJavaLibraryIntegrationTest.java,outputZipFile = new ZipFile(outputFile.toFile());,if (ZipFile(outputFile != null ) outputZipFile = new ZipFile(outputFile.toFile());
GraphEngineFactory.java,"Platform defaultPlatform = new ConstraintBasedPlatform("""", ImmutableSet.of());","if (ImmutableSet != null ) Platform defaultPlatform = new ConstraintBasedPlatform("""", ImmutableSet.of());"
DefaultJavaLibraryIntegrationTest.java,ZipFile outputZipFile = new ZipFile(outputFile.toFile());,if (ZipFile(outputFile != null ) ZipFile outputZipFile = new ZipFile(outputFile.toFile());
CriticalPathEventBusListenerIntegrationTest.java,Path logDir = workspace.getBuckPaths().getLogDir();,if (workspace != null ) Path logDir = workspace.getBuckPaths().getLogDir();
CacheCommand.java,ParseEvent.Started parseStart = ParseEvent.started(ImmutableList.of());,if (ParseEvent != null ) ParseEvent.Started parseStart = ParseEvent.started(ImmutableList.of());
EventSerializationTest.java,ParseEvent.Started event = ParseEvent.started(ImmutableList.of());,if (ParseEvent != null ) ParseEvent.Started event = ParseEvent.started(ImmutableList.of());
ParseStatsTrackerTest.java,Started startedSecondary = ParseEvent.started(ImmutableList.of());,if (ParseEvent != null ) Started startedSecondary = ParseEvent.started(ImmutableList.of());
SkylarkProjectBuildFileParser.java,"ParseBuckFileEvent.Started startEvent = ParseBuckFileEvent.started(buildFile, this.getClass());","if (this != null ) ParseBuckFileEvent.Started startEvent = ParseBuckFileEvent.started(buildFile, this.getClass());"
SkylarkProjectBuildFileParser.java,rules = parseResult.getRawRules();,if (parseResult != null ) rules = parseResult.getRawRules();
PerBuildStateFactoryWithConfigurableAttributes.java,"Platform defaultPlatform = new ConstraintBasedPlatform("""", ImmutableSet.of());","if (ImmutableSet != null ) Platform defaultPlatform = new ConstraintBasedPlatform("""", ImmutableSet.of());"
DefaultTargetPlatformResolverTest.java,"Platform emptyTargetConfigurationPlatform = new ConstraintBasedPlatform("""", ImmutableSet.of());","if (ImmutableSet != null ) Platform emptyTargetConfigurationPlatform = new ConstraintBasedPlatform("""", ImmutableSet.of());"
DefaultTargetPlatformResolverTest.java,"Platform emptyTargetConfigurationPlatform = new ConstraintBasedPlatform("""", ImmutableSet.of());","if (ImmutableSet != null ) Platform emptyTargetConfigurationPlatform = new ConstraintBasedPlatform("""", ImmutableSet.of());"
DefaultTargetPlatformResolverTest.java,"Platform emptyTargetConfigurationPlatform = new ConstraintBasedPlatform("""", ImmutableSet.of());","if (ImmutableSet != null ) Platform emptyTargetConfigurationPlatform = new ConstraintBasedPlatform("""", ImmutableSet.of());"
SkylarkRuleFunctions.java,fieldNames = dict.keySet();,if (dict != null ) fieldNames = dict.keySet();
CachingBuildRuleBuilder.java,AtomicReference<Long> outputSize = Atomics.newReference();,if (Atomics != null ) AtomicReference<Long> outputSize = Atomics.newReference();
BuildInfoRecorderTest.java,"byte[] contents = ""contents"".getBytes();","if (""contents"" != null ) byte[] contents = ""contents"".getBytes();"
DefaultJavaLibraryIntegrationTest.java,ZipFile outputZipFile = new ZipFile(outputFile.toFile());,if (ZipFile(outputFile != null ) ZipFile outputZipFile = new ZipFile(outputFile.toFile());
DefaultJavaLibraryIntegrationTest.java,outputZipFile = new ZipFile(outputFile.toFile());,if (ZipFile(outputFile != null ) outputZipFile = new ZipFile(outputFile.toFile());
HybridLocalStrategy.java,job = pendingDelegateQueue.poll();,if (pendingDelegateQueue != null ) job = pendingDelegateQueue.poll();
HybridLocalStrategy.java,Job job = pendingDelegateQueue.poll();,if (pendingDelegateQueue != null ) Job job = pendingDelegateQueue.poll();
BuildCommand.java,ProjectFilesystem filesystem = params.getCell().getFilesystem();,if (params != null ) ProjectFilesystem filesystem = params.getCell().getFilesystem();
CriticalPathEventListener.java,longestTimeSoFar = criticalPathNode.getTotalElapsedTime();,if (criticalPathNode != null ) longestTimeSoFar = criticalPathNode.getTotalElapsedTime();
CriticalPathEventListener.java,long totalElapsedTime = criticalPathNode.getTotalElapsedTime();,if (criticalPathNode != null ) long totalElapsedTime = criticalPathNode.getTotalElapsedTime();
CriticalPathEventListener.java,long elapsedTime = criticalPathNode.getElapsedTime();,if (criticalPathNode != null ) long elapsedTime = criticalPathNode.getElapsedTime();
ExternalJavacTest.java,Tool tool = identifier.getValue().get();,if (identifier != null ) Tool tool = identifier.getValue().get();
ExternalJavacTest.java,Tool tool = identifier.getValue().get();,if (identifier != null ) Tool tool = identifier.getValue().get();
ExternalJavacTest.java,Tool tool = identifier.getValue().get();,if (identifier != null ) Tool tool = identifier.getValue().get();
MetadataChecker.java,MetadataStorage fromConfig = config.getBuildMetadataStorage();,if (config != null ) MetadataStorage fromConfig = config.getBuildMetadataStorage();
MetadataChecker.java,ProjectFilesystem filesystem = cell.getFilesystem();,if (cell != null ) ProjectFilesystem filesystem = cell.getFilesystem();
MetadataChecker.java,fromFile = Optional.empty();,if (Optional != null ) fromFile = Optional.empty();
AbstractConsoleEventBusListener.java,formattedLine = logEvent.getMessage();,if (logEvent != null ) formattedLine = logEvent.getMessage();
AbstractConsoleEventBusListener.java,formattedLine = ansi.asWarningText(logEvent.getMessage());,if (ansi != null ) formattedLine = ansi.asWarningText(logEvent.getMessage());
AbstractConsoleEventBusListener.java,formattedLine = ansi.asHighlightedFailureText(logEvent.getMessage());,if (ansi != null ) formattedLine = ansi.asHighlightedFailureText(logEvent.getMessage());
CleanCommandTest.java,PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();,if (BuckPluginManagerFactory != null ) PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();
BuckGlobalStateFactory.java,WatchedFileHashCache watchedCache = new WatchedFileHashCache(subCell.getFilesystem());,if (WatchedFileHashCache(subCell != null ) WatchedFileHashCache watchedCache = new WatchedFileHashCache(subCell.getFilesystem());
ActionGraphBuilderTest.java,this.executorService = MoreExecutors.newDirectExecutorService();,if (MoreExecutors != null ) this.executorService = MoreExecutors.newDirectExecutorService();
FileSystemMapFileHashCache.java,Path relativeFilePath = archiveRelativePath.normalize();,if (archiveRelativePath != null ) Path relativeFilePath = archiveRelativePath.normalize();
LoadingCacheFileHashCache.java,Path parent = path.getParent();,if (path != null ) Path parent = path.getParent();
LoadingCacheFileHashCache.java,Path parent = path.getParent();,if (path != null ) Path parent = path.getParent();
LoadingCacheFileHashCache.java,Path relativeFilePath = archiveRelativePath.normalize();,if (archiveRelativePath != null ) Path relativeFilePath = archiveRelativePath.normalize();
AbstractSourcePathResolver.java,Path archiveRelativePath = getRelativePath(archiveMemberSourcePath.getArchiveSourcePath());,if (getRelativePath(archiveMemberSourcePath != null ) Path archiveRelativePath = getRelativePath(archiveMemberSourcePath.getArchiveSourcePath());
FileSystemMapFileHashCache.java,Path relativeFilePath = archiveMemberPath.getArchivePath().normalize();,if (archiveMemberPath != null ) Path relativeFilePath = archiveMemberPath.getArchivePath().normalize();
FileSystemMapFileHashCache.java,Path memberPath = archiveMemberPath.getMemberPath();,if (archiveMemberPath != null ) Path memberPath = archiveMemberPath.getMemberPath();
LimitedFileHashCacheEngine.java,Path relativeFilePath = archiveMemberPath.getArchivePath().normalize();,if (archiveMemberPath != null ) Path relativeFilePath = archiveMemberPath.getArchivePath().normalize();
LimitedFileHashCacheEngine.java,Path memberPath = archiveMemberPath.getMemberPath();,if (archiveMemberPath != null ) Path memberPath = archiveMemberPath.getMemberPath();
LoadingCacheFileHashCache.java,Path relativeFilePath = archiveMemberPath.getArchivePath().normalize();,if (archiveMemberPath != null ) Path relativeFilePath = archiveMemberPath.getArchivePath().normalize();
LoadingCacheFileHashCache.java,Path memberPath = archiveMemberPath.getMemberPath();,if (archiveMemberPath != null ) Path memberPath = archiveMemberPath.getMemberPath();
BuildLogHelper.java,BuildLogEntry.Builder builder = BuildLogEntry.builder();,if (BuildLogEntry != null ) BuildLogEntry.Builder builder = BuildLogEntry.builder();
BuildLogHelper.java,Optional<Long> startTimestampMs = Optional.empty();,if (Optional != null ) Optional<Long> startTimestampMs = Optional.empty();
DoctorCommand.java,DoctorConfig doctorConfig = DoctorConfig.of(params.getBuckConfig());,if (DoctorConfig != null ) DoctorConfig doctorConfig = DoctorConfig.of(params.getBuckConfig());
HybridLocalStrategy.java,Job job = pendingQueue.poll();,if (pendingQueue != null ) Job job = pendingQueue.poll();
HybridLocalStrategy.java,Job job = pendingQueue.poll();,if (pendingQueue != null ) Job job = pendingQueue.poll();
ClientCertificateHandler.java,HandshakeCertificates.Builder hsBuilder = new HandshakeCertificates.Builder();,if (HandshakeCertificates != null ) HandshakeCertificates.Builder hsBuilder = new HandshakeCertificates.Builder();
ArtifactCachesIntegrationTest.java,HandshakeCertificates.Builder hsBuilder = new HandshakeCertificates.Builder();,if (HandshakeCertificates != null ) HandshakeCertificates.Builder hsBuilder = new HandshakeCertificates.Builder();
UIMessagesFormatterTest.java,Optional<String> message = UIMessagesFormatter.configComparisonMessage(ImmutableSet.of());,if (UIMessagesFormatter != null ) Optional<String> message = UIMessagesFormatter.configComparisonMessage(ImmutableSet.of());
GrpcRemoteExecutionServiceClient.java,SettableFuture<ExecutionResult> future = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<ExecutionResult> future = SettableFuture.create();
AssertScopeExclusiveAccess.java,inScopeStack = Optional.empty();,if (Optional != null ) inScopeStack = Optional.empty();
RemoteExecutionStrategy.java,this.remoteExecutionSessionStartedEvent = Optional.empty();,if (Optional != null ) this.remoteExecutionSessionStartedEvent = Optional.empty();
RemoteExecutionStrategy.java,remoteExecutionSessionStartedEvent = Optional.of(RemoteExecutionSessionEvent.started());,if (Optional != null ) remoteExecutionSessionStartedEvent = Optional.of(RemoteExecutionSessionEvent.started());
DaemonicParserState.java,state = cellPathToDaemonicState.get(cell.getRoot());,if (cellPathToDaemonicState != null ) state = cellPathToDaemonicState.get(cell.getRoot());
ExopackageSymlinkTreeStep.java,ProjectFilesystem filesystem = installable.getProjectFilesystem();,if (installable != null ) ProjectFilesystem filesystem = installable.getProjectFilesystem();
CachingBuildRuleBuilder.java,Path path = filesystem.getPath(ent.getKey());,if (filesystem != null ) Path path = filesystem.getPath(ent.getKey());
GrpcRemoteExecutionClientsTest.java,server = serverBuilder.build().start();,if (serverBuilder != null ) server = serverBuilder.build().start();
UnskippedBuildEngineActionTracker.java,AtomicInteger referenceCount = ruleReferenceCounts.getUnchecked(rule.getBuildTarget());,if (ruleReferenceCounts != null ) AtomicInteger referenceCount = ruleReferenceCounts.getUnchecked(rule.getBuildTarget());
IncrementalActionGraphScenarioTest.java,RuleDepsCache depsCache = new DefaultRuleDepsCache(result.getActionGraphBuilder());,if (DefaultRuleDepsCache(result != null ) RuleDepsCache depsCache = new DefaultRuleDepsCache(result.getActionGraphBuilder());
WatchmanWatcher.java,FileSystem fileSystem = cellPath.getFileSystem();,if (cellPath != null ) FileSystem fileSystem = cellPath.getFileSystem();
WatchmanWatcherIntegrationTest.java,ImmutableList<WatchmanEvent> events = watchmanEventCollector.getEvents();,if (watchmanEventCollector != null ) ImmutableList<WatchmanEvent> events = watchmanEventCollector.getEvents();
WatchmanWatcherTest.java,WatchmanPathEvent pathEvent = (WatchmanPathEvent) eventBuffer.getOnlyEvent();,if (eventBuffer != null ) WatchmanPathEvent pathEvent = (WatchmanPathEvent) eventBuffer.getOnlyEvent();
InterCellIntegrationTest.java,Parser parser = TestParserFactory.create(primary.asCell());,if (TestParserFactory != null ) Parser parser = TestParserFactory.create(primary.asCell());
DaemonIntegrationTest.java,PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();,if (BuckPluginManagerFactory != null ) PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();
ProjectWorkspace.java,Platform platform = Platform.detect();,if (Platform != null ) Platform platform = Platform.detect();
ProjectWorkspace.java,PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();,if (BuckPluginManagerFactory != null ) PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();
HaskellLibraryDescription.java,libraries = ImmutableSortedSet.of(library.getSourcePathToOutput());,if (ImmutableSortedSet != null ) libraries = ImmutableSortedSet.of(library.getSourcePathToOutput());
HaskellLibraryDescription.java,interfaces = ImmutableSortedSet.of(compileRule.getInterfaces());,if (ImmutableSortedSet != null ) interfaces = ImmutableSortedSet.of(compileRule.getInterfaces());
HaskellLibraryDescription.java,objects = ImmutableSortedSet.of(compileRule.getObjectsDir());,if (ImmutableSortedSet != null ) objects = ImmutableSortedSet.of(compileRule.getObjectsDir());
CachingBuildEngine.java,ListenableFuture<BuildResult> existingResult = results.get(rule.getBuildTarget());,if (results != null ) ListenableFuture<BuildResult> existingResult = results.get(rule.getBuildTarget());
LocationMacroExpanderTest.java,Path absolutePath = pathResolver.getAbsolutePath(javaRule.getSourcePathToOutput());,if (pathResolver != null ) Path absolutePath = pathResolver.getAbsolutePath(javaRule.getSourcePathToOutput());
GenruleTest.java,SourcePathResolver pathResolver = ruleFinder.getSourcePathResolver();,if (ruleFinder != null ) SourcePathResolver pathResolver = ruleFinder.getSourcePathResolver();
JsBundleGenruleDescriptionTest.java,SourcePathResolver pathResolver = DefaultSourcePathResolver.from(setup.graphBuilder());,if (DefaultSourcePathResolver != null ) SourcePathResolver pathResolver = DefaultSourcePathResolver.from(setup.graphBuilder());
JsBundleGenruleDescriptionTest.java,SourcePathResolver pathResolver = DefaultSourcePathResolver.from(setup.graphBuilder());,if (DefaultSourcePathResolver != null ) SourcePathResolver pathResolver = DefaultSourcePathResolver.from(setup.graphBuilder());
JsBundleGenruleDescriptionTest.java,SourcePathResolver pathResolver = DefaultSourcePathResolver.from(setup.graphBuilder());,if (DefaultSourcePathResolver != null ) SourcePathResolver pathResolver = DefaultSourcePathResolver.from(setup.graphBuilder());
JsBundleGenruleDescriptionTest.java,SourcePathResolver pathResolver = DefaultSourcePathResolver.from(setup.graphBuilder());,if (DefaultSourcePathResolver != null ) SourcePathResolver pathResolver = DefaultSourcePathResolver.from(setup.graphBuilder());
JsBundleGenruleDescriptionTest.java,SourcePathResolver pathResolver = DefaultSourcePathResolver.from(setup.graphBuilder());,if (DefaultSourcePathResolver != null ) SourcePathResolver pathResolver = DefaultSourcePathResolver.from(setup.graphBuilder());
CxxLibraryDescriptionTest.java,Path path = pathResolver.getAbsolutePath(rule.getSourcePathToOutput());,if (pathResolver != null ) Path path = pathResolver.getAbsolutePath(rule.getSourcePathToOutput());
TestRunning.java,Path directory = sourcePathResolver.getAbsolutePath(javaSrcPath).getParent();,if (sourcePathResolver != null ) Path directory = sourcePathResolver.getAbsolutePath(javaSrcPath).getParent();
AssembleDirectoriesTest.java,Path outputFile = pathResolver.getAbsolutePath(assembleDirectories.getSourcePathToOutput());,if (pathResolver != null ) Path outputFile = pathResolver.getAbsolutePath(assembleDirectories.getSourcePathToOutput());
InstallCommand.java,SourcePathResolver pathResolver = DefaultSourcePathResolver.from(build.getGraphBuilder());,if (DefaultSourcePathResolver != null ) SourcePathResolver pathResolver = DefaultSourcePathResolver.from(build.getGraphBuilder());
RunCommand.java,SourcePathResolver resolver = DefaultSourcePathResolver.from(build.getGraphBuilder());,if (DefaultSourcePathResolver != null ) SourcePathResolver resolver = DefaultSourcePathResolver.from(build.getGraphBuilder());
CommandAliasDescriptionTest.java,SourcePathResolver pathResolver = result.sourcePathResolver();,if (result != null ) SourcePathResolver pathResolver = result.sourcePathResolver();
CommandAliasIntegrationTest.java,SourcePathResolver pathResolver = result.sourcePathResolver();,if (result != null ) SourcePathResolver pathResolver = result.sourcePathResolver();
Deserializer.java,Optional<CustomFieldBehavior> behavior = info.getCustomBehavior();,if (info != null ) Optional<CustomFieldBehavior> behavior = info.getCustomBehavior();
InputsMapBuilder.java,CustomFieldInputs<T> customInputs = (CustomFieldInputs<T>) inputsTag.get();,if (inputsTag != null ) CustomFieldInputs<T> customInputs = (CustomFieldInputs<T>) inputsTag.get();
IsolationChecker.java,CustomFieldInputs<T> customFieldInputs = (CustomFieldInputs<T>) serializerTag.get();,if (serializerTag != null ) CustomFieldInputs<T> customFieldInputs = (CustomFieldInputs<T>) serializerTag.get();
ArtifactCaches.java,MultiFetchType multiFetchType = buckConfig.getMultiFetchType();,if (buckConfig != null ) MultiFetchType multiFetchType = buckConfig.getMultiFetchType();
DistBuildFileHashesTest.java,sourcePathResolver = DefaultSourcePathResolver.from(graphBuilder.getSourcePathRuleFinder());,if (DefaultSourcePathResolver != null ) sourcePathResolver = DefaultSourcePathResolver.from(graphBuilder.getSourcePathRuleFinder());
PythonPackagedBinaryTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
PythonEnvironmentTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
RustCompileTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
HttpArchiveTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
HttpFileTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
CalculateClassAbiTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
CalculateClassAbiTest.java,ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) ruleFinder = graphBuilder.getSourcePathRuleFinder();
CalculateClassAbiTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
CalculateClassAbiTest.java,ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) ruleFinder = graphBuilder.getSourcePathRuleFinder();
CopyResourcesStepTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
CopyResourcesStepTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
CopyResourcesStepTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
DefaultJavaLibraryTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
DefaultJavaLibraryTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
DefaultJavaLibraryTest.java,ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) ruleFinder = graphBuilder.getSourcePathRuleFinder();
DefaultJavaLibraryTest.java,ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) ruleFinder = graphBuilder.getSourcePathRuleFinder();
DefaultJavaLibraryTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
DefaultJavaLibraryTest.java,ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) ruleFinder = graphBuilder.getSourcePathRuleFinder();
DefaultJavaLibraryTest.java,ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) ruleFinder = graphBuilder.getSourcePathRuleFinder();
DefaultJavaLibraryTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
DefaultJavaLibraryTest.java,ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) ruleFinder = graphBuilder.getSourcePathRuleFinder();
DefaultJavaLibraryTest.java,ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) ruleFinder = graphBuilder.getSourcePathRuleFinder();
JavaLibraryClasspathProviderTest.java,resolver = DefaultSourcePathResolver.from(graphBuilder.getSourcePathRuleFinder());,if (DefaultSourcePathResolver != null ) resolver = DefaultSourcePathResolver.from(graphBuilder.getSourcePathRuleFinder());
JavacSpecTest.java,sourcePathResolver = DefaultSourcePathResolver.from(graphBuilder.getSourcePathRuleFinder());,if (DefaultSourcePathResolver != null ) sourcePathResolver = DefaultSourcePathResolver.from(graphBuilder.getSourcePathRuleFinder());
JvmLibraryArgInterpreterTest.java,ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) ruleFinder = graphBuilder.getSourcePathRuleFinder();
SanitizedArgTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
DefaultRuleKeyFactoryTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
DefaultRuleKeyFactoryTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
DefaultRuleKeyFactoryTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
DefaultRuleKeyFactoryTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
DefaultRuleKeyFactoryTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
DefaultRuleKeyFactoryTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
DefaultRuleKeyFactoryTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
DefaultRuleKeyFactoryTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
DefaultRuleKeyFactoryTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
DefaultRuleKeyFactoryTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
DefaultRuleKeyFactoryTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
DefaultRuleKeyFactoryTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
DefaultRuleKeyFactoryTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
DefaultRuleKeyFactoryTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
DefaultRuleKeyFactoryTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
RuleKeyDiagnosticsTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
ModernBuildRuleTest.java,SourcePathRuleFinder finder = buildRuleResolver.getSourcePathRuleFinder();,if (buildRuleResolver != null ) SourcePathRuleFinder finder = buildRuleResolver.getSourcePathRuleFinder();
DepsComputingVisitorTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
QueryTargetsAndOutputsMacroExpanderTest.java,pathResolver = DefaultSourcePathResolver.from(graphBuilder.getSourcePathRuleFinder());,if (DefaultSourcePathResolver != null ) pathResolver = DefaultSourcePathResolver.from(graphBuilder.getSourcePathRuleFinder());
CommandAliasBuilder.java,ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) ruleFinder = graphBuilder.getSourcePathRuleFinder();
ExportFileTest.java,pathResolver = DefaultSourcePathResolver.from(graphBuilder.getSourcePathRuleFinder());,if (DefaultSourcePathResolver != null ) pathResolver = DefaultSourcePathResolver.from(graphBuilder.getSourcePathRuleFinder());
ExportFileTest.java,pathResolver = DefaultSourcePathResolver.from(graphBuilder.getSourcePathRuleFinder());,if (DefaultSourcePathResolver != null ) pathResolver = DefaultSourcePathResolver.from(graphBuilder.getSourcePathRuleFinder());
ExportFileTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
ExportFileTest.java,ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
GenruleTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
GenruleTest.java,ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) ruleFinder = graphBuilder.getSourcePathRuleFinder();
GenruleTest.java,ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) ruleFinder = graphBuilder.getSourcePathRuleFinder();
GenruleTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
GenruleTest.java,ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) ruleFinder = graphBuilder.getSourcePathRuleFinder();
GenruleTest.java,ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) ruleFinder = graphBuilder.getSourcePathRuleFinder();
GenruleTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
GenruleTest.java,ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) ruleFinder = graphBuilder.getSourcePathRuleFinder();
GenruleTest.java,ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) ruleFinder = graphBuilder.getSourcePathRuleFinder();
SwiftLibraryIntegrationTest.java,pathResolver = DefaultSourcePathResolver.from(graphBuilder.getSourcePathRuleFinder());,if (DefaultSourcePathResolver != null ) pathResolver = DefaultSourcePathResolver.from(graphBuilder.getSourcePathRuleFinder());
AaptPackageResourcesTest.java,ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) ruleFinder = graphBuilder.getSourcePathRuleFinder();
AndroidResourceTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
AndroidResourceTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
AndroidResourceTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
CopyNativeLibrariesTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
DexWithClassesTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
DummyRDotJavaTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
DummyRDotJavaTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
GenAidlTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
MergeAndroidResourcesStepTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
MergeAndroidResourcesStepTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
MergeAndroidResourcesStepTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
MergeAndroidResourcesStepTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
MergeAndroidResourcesStepTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
MergeAndroidResourcesStepTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
MergeAndroidResourcesStepTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
MergeAndroidResourcesStepTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
MergeAndroidResourcesStepTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
MergeAndroidResourcesSourcesTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
ExopackageSymlinkTreeTest.java,pathResolver = DefaultSourcePathResolver.from(resolver.getSourcePathRuleFinder());,if (DefaultSourcePathResolver != null ) pathResolver = DefaultSourcePathResolver.from(resolver.getSourcePathRuleFinder());
AndroidPackageableCollectorTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
AndroidPackageableCollectorTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
NdkCxxPlatformTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
NdkCxxPlatformTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
AppleCxxPlatformsTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
BuildCommandTest.java,resolver = DefaultSourcePathResolver.from(graphBuilder.getSourcePathRuleFinder());,if (DefaultSourcePathResolver != null ) resolver = DefaultSourcePathResolver.from(graphBuilder.getSourcePathRuleFinder());
TestRunningTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
TestRunningTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
TestRunningTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
CachingBuildEngineTest.java,ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) ruleFinder = graphBuilder.getSourcePathRuleFinder();
RuleKeyTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
RuleKeyTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
RuleKeyTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
RuleKeyTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
RuleKeyTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
RuleKeyTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
RuleKeyTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
RuleKeyTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
RuleKeyTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
RuleKeyTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
RuleKeyTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
RuleKeyTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
RuleKeyTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
RuleKeyTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
RuleKeyTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
RuleKeyTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
RuleKeyTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
RuleKeyTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
RuleKeyTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
RuleKeyTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
RuleKeyTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
RuleKeyTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
RuleKeyTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
RuleKeyTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
RuleKeyTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
RuleKeyTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
RuleKeyTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
RuleKeyTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
RuleKeyTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
RuleKeyTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
RuleKeyTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
DefaultSourcePathRuleFinderTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
DefaultSourcePathRuleFinderTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
SymlinkTreeTest.java,ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) ruleFinder = graphBuilder.getSourcePathRuleFinder();
SymlinkTreeTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
SymlinkTreeTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
ForwardingBuildTargetSourcePathTest.java,pathResolver = DefaultSourcePathResolver.from(graphBuilder.getSourcePathRuleFinder());,if (DefaultSourcePathResolver != null ) pathResolver = DefaultSourcePathResolver.from(graphBuilder.getSourcePathRuleFinder());
CommandToolRuleKeyTest.java,pathResolver = DefaultSourcePathResolver.from(resolver.getSourcePathRuleFinder());,if (DefaultSourcePathResolver != null ) pathResolver = DefaultSourcePathResolver.from(resolver.getSourcePathRuleFinder());
ToolTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
ToolTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
ToolTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
ArchiveTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
CxxHeadersDirTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
CxxLinkTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
CxxLinkTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
CxxLinkableEnhancerTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
CxxPreprocessAndCompileTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
CxxPreprocessAndCompileTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
CxxPreprocessAndCompileTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
CxxPreprocessAndCompileTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
CxxPreprocessAndCompileTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
CxxPreprocessAndCompileTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
CxxPreprocessAndCompileTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
DirectHeaderMapTest.java,pathResolver = DefaultSourcePathResolver.from(graphBuilder.getSourcePathRuleFinder());,if (DefaultSourcePathResolver != null ) pathResolver = DefaultSourcePathResolver.from(graphBuilder.getSourcePathRuleFinder());
DirectHeaderMapTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
DirectHeaderMapTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
HeaderSymlinkTreeWithHeaderMapTest.java,ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) ruleFinder = graphBuilder.getSourcePathRuleFinder();
OmnibusTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
OmnibusTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
OmnibusTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
OmnibusTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
OmnibusTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
OmnibusTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
OmnibusTest.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
PreprocessorFlagsTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
PreprocessorFlagsTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
HeaderSymlinkTreeWithModuleMapTest.java,ruleFinder = ruleResolver.getSourcePathRuleFinder();,if (ruleResolver != null ) ruleFinder = ruleResolver.getSourcePathRuleFinder();
HeaderVerificationTest.java,SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();,if (TestActionGraphBuilder() != null ) SourcePathRuleFinder ruleFinder = new TestActionGraphBuilder().getSourcePathRuleFinder();
JavaBinaryDescription.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
AbstractRuleKeyFactories.java,SourcePathRuleFinder ruleFinder = resolver.getSourcePathRuleFinder();,if (resolver != null ) SourcePathRuleFinder ruleFinder = resolver.getSourcePathRuleFinder();
AbstractGenruleDescription.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
SwiftLibraryDescription.java,DepsBuilder srcsDepsBuilder = new DepsBuilder(graphBuilder.getSourcePathRuleFinder());,if (DepsBuilder(graphBuilder != null ) DepsBuilder srcsDepsBuilder = new DepsBuilder(graphBuilder.getSourcePathRuleFinder());
DDescriptionUtils.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
CGoLibrary.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
GoDescriptors.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
GoDescriptors.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
HalideLibraryDescription.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
JsBundleDescription.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
OcamlRuleBuilder.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
OcamlRuleBuilder.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
AndroidAarDescription.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
AndroidBinaryGraphEnhancer.java,this.ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) this.ruleFinder = graphBuilder.getSourcePathRuleFinder();
AndroidBinaryInstallGraphEnhancer.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
AndroidBinaryResourcesGraphEnhancer.java,this.ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) this.ruleFinder = graphBuilder.getSourcePathRuleFinder();
AndroidBuildConfigDescription.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
AndroidBuildConfigDescription.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
AndroidNativeLibsPackageableGraphEnhancer.java,this.pathResolver = DefaultSourcePathResolver.from(graphBuilder.getSourcePathRuleFinder());,if (DefaultSourcePathResolver != null ) this.pathResolver = DefaultSourcePathResolver.from(graphBuilder.getSourcePathRuleFinder());
AndroidPrebuiltAarDescription.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
AndroidResourceDescription.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
NdkLibraryDescription.java,SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();,if (graphBuilder != null ) SourcePathRuleFinder ruleFinder = graphBuilder.getSourcePathRuleFinder();
ActionGraphProvider.java,SourcePathRuleFinder ruleFinder = buildRuleResolver.getSourcePathRuleFinder();,if (buildRuleResolver != null ) SourcePathRuleFinder ruleFinder = buildRuleResolver.getSourcePathRuleFinder();
IncrementalActionGraphScenarioTest.java,SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(result.getActionGraphBuilder());,if (SourcePathRuleFinder(result != null ) SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(result.getActionGraphBuilder());
SourcePathResolverTest.java,SourcePath sourcePath = DefaultBuildTargetSourcePath.of(rule.getBuildTarget());,if (DefaultBuildTargetSourcePath != null ) SourcePath sourcePath = DefaultBuildTargetSourcePath.of(rule.getBuildTarget());
OcamlLibraryDescription.java,SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(context.getActionGraphBuilder());,if (SourcePathRuleFinder(context != null ) SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(context.getActionGraphBuilder());
ExportFileDescription.java,SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(context.getActionGraphBuilder());,if (SourcePathRuleFinder(context != null ) SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(context.getActionGraphBuilder());
TestCommand.java,SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(build.getGraphBuilder());,if (SourcePathRuleFinder(build != null ) SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(build.getGraphBuilder());
FilegroupDescription.java,SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(context.getActionGraphBuilder());,if (SourcePathRuleFinder(context != null ) SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(context.getActionGraphBuilder());
TargetsCommand.java,SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(result.getActionGraphBuilder());,if (SourcePathRuleFinder(result != null ) SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(result.getActionGraphBuilder());
PrebuiltOcamlLibraryDescription.java,SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(context.getActionGraphBuilder());,if (SourcePathRuleFinder(context != null ) SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(context.getActionGraphBuilder());
ParallelRuleKeyCalculator.java,ListenableFuture<T> fromOurCache = ruleKeys.get(rule.getBuildTarget());,if (ruleKeys != null ) ListenableFuture<T> fromOurCache = ruleKeys.get(rule.getBuildTarget());
AndroidNativeLibsPackageableGraphEnhancer.java,filesystem = ruleFinder.getRule(targetSourcePath).getProjectFilesystem();,if (ruleFinder != null ) filesystem = ruleFinder.getRule(targetSourcePath).getProjectFilesystem();
RustToolchainFactory.java,RustPlatform defaultRustPlatform = rustPlatforms.getValue(defaultCxxPlatform.getFlavor());,if (rustPlatforms != null ) RustPlatform defaultRustPlatform = rustPlatforms.getValue(defaultCxxPlatform.getFlavor());
JsFile.java,SourcePathResolver sourcePathResolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver sourcePathResolver = context.getSourcePathResolver();
JsFile.java,SourcePathResolver sourcePathResolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver sourcePathResolver = context.getSourcePathResolver();
HaskellPlatformsFactory.java,CxxPlatform cxxPlatform = unresolvedCxxPlatform.getLegacyTotallyUnsafe();,if (unresolvedCxxPlatform != null ) CxxPlatform cxxPlatform = unresolvedCxxPlatform.getLegacyTotallyUnsafe();
WorkspaceAndProjectGenerator.java,projectName = projectDirectory.getFileName().toString();,if (projectDirectory != null ) projectName = projectDirectory.getFileName().toString();
MainWithNailgun.java,MainRunner mainRunner = mainWithNailgun.prepareMainRunner();,if (mainWithNailgun != null ) MainRunner mainRunner = mainWithNailgun.prepareMainRunner();
MainWithoutNailgun.java,MainRunner mainRunner = mainWithoutNailgun.prepareMainRunner();,if (mainWithoutNailgun != null ) MainRunner mainRunner = mainWithoutNailgun.prepareMainRunner();
AsyncBackgroundTaskManager.java,futures = new ArrayList<>(scheduledTasks.size());,if (ArrayList<>(scheduledTasks != null ) futures = new ArrayList<>(scheduledTasks.size());
BuckAutoDepsQuickFixProvider.java,String className = intentionAction.getClass().getName();,if (intentionAction != null ) String className = intentionAction.getClass().getName();
DefaultParser.java,ImmutableSortedSet<Flavor> defaultFlavors = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) ImmutableSortedSet<Flavor> defaultFlavors = ImmutableSortedSet.of();
LegacyPerBuildStateFactory.java,Cell rootCell = parsingContext.getCell();,if (parsingContext != null ) Cell rootCell = parsingContext.getCell();
LegacyPerBuildStateFactory.java,ListeningExecutorService executorService = parsingContext.getExecutor();,if (parsingContext != null ) ListeningExecutorService executorService = parsingContext.getExecutor();
LegacyPerBuildStateFactory.java,int numParsingThreads = parserConfig.getNumParsingThreads();,if (parserConfig != null ) int numParsingThreads = parserConfig.getNumParsingThreads();
TargetNodeParsePipeline.java,Cell depCell = cell.getCellIgnoringVisibilityCheck(depTarget.getCellPath());,if (cell != null ) Cell depCell = cell.getCellIgnoringVisibilityCheck(depTarget.getCellPath());
AndroidAppModularityDescription.java,result = graphEnhancer.createAdditionalBuildables();,if (graphEnhancer != null ) result = graphEnhancer.createAdditionalBuildables();
CxxDescriptionEnhancer.java,CommandTool.Builder executableBuilder = new CommandTool.Builder();,if (CommandTool != null ) CommandTool.Builder executableBuilder = new CommandTool.Builder();
CxxLinkableEnhancer.java,ImmutableList<Arg> allArgs = argsBuilder.build();,if (argsBuilder != null ) ImmutableList<Arg> allArgs = argsBuilder.build();
CxxDescriptionEnhancer.java,CommandTool.Builder executableBuilder = new CommandTool.Builder();,if (CommandTool != null ) CommandTool.Builder executableBuilder = new CommandTool.Builder();
RustCompileUtils.java,rustArch = arch.toString();,if (arch != null ) rustArch = arch.toString();
BuckFileUtil.java,FileTypeManager fileTypeManager = FileTypeManagerImpl.getInstance();,if (FileTypeManagerImpl != null ) FileTypeManager fileTypeManager = FileTypeManagerImpl.getInstance();
CxxLibraryImplicitFlavors.java,Optional<Flavor> typeFlavor = Optional.empty();,if (Optional != null ) Optional<Flavor> typeFlavor = Optional.empty();
DefaultParser.java,Optional<Flavor> defaultArgPlatform = Optional.empty();,if (Optional != null ) Optional<Flavor> defaultArgPlatform = Optional.empty();
BuckSettingsUI.java,String name = entry.getKey();,if (entry != null ) String name = entry.getKey();
GoBinary.java,SourcePathResolver resolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver resolver = buildContext.getSourcePathResolver();
DebugSection.java,this.body = body.duplicate();,if (body != null ) this.body = body.duplicate();
DebugSectionFinder.java,ByteBuffer body = buffer.slice();,if (buffer != null ) ByteBuffer body = buffer.slice();
CxxPythonExtensionDescription.java,ImmutableSet<Flavor> defaultCxxFlavors = args.getDefaultFlavors();,if (args != null ) ImmutableSet<Flavor> defaultCxxFlavors = args.getDefaultFlavors();
CxxPythonExtensionDescription.java,defaultCxxFlavors = ImmutableSet.of(getDefaultCxxPlatform().getFlavor());,if (ImmutableSet != null ) defaultCxxFlavors = ImmutableSet.of(getDefaultCxxPlatform().getFlavor());
DefaultParser.java,ImmutableSortedSet<Flavor> defaultFlavors = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) ImmutableSortedSet<Flavor> defaultFlavors = ImmutableSortedSet.of();
AndroidAppModularityDescription.java,AndroidAppModularityGraphEnhancementResult result = graphEnhancer.createAdditionalBuildables();,if (graphEnhancer != null ) AndroidAppModularityGraphEnhancementResult result = graphEnhancer.createAdditionalBuildables();
HybridLocalStrategy.java,job = pendingQueue.poll();,if (pendingQueue != null ) job = pendingQueue.poll();
HybridLocalStrategy.java,job = tracker.stealFromDelegate();,if (tracker != null ) job = tracker.stealFromDelegate();
HybridLocalStrategy.java,Job job = pendingQueue.poll();,if (pendingQueue != null ) Job job = pendingQueue.poll();
ActionRunner.java,"MerkleTreeNode node = merkleTreeCache.createNode(files, ImmutableMap.of());","if (ImmutableMap != null ) MerkleTreeNode node = merkleTreeCache.createNode(files, ImmutableMap.of());"
OutputsMaterializer.java,Path path = root.resolve(file.getPath());,if (root != null ) Path path = root.resolve(file.getPath());
OutputsMaterializer.java,Path dirRoot = root.resolve(directory.getPath());,if (root != null ) Path dirRoot = root.resolve(directory.getPath());
OutputsMaterializer.java,FileOutputStream stream = new FileOutputStream(path.toFile());,if (FileOutputStream(path != null ) FileOutputStream stream = new FileOutputStream(path.toFile());
OutputsMaterializer.java,FileChannel channel = stream.getChannel();,if (stream != null ) FileChannel channel = stream.getChannel();
BuckFoldingBuilder.java,List<BuckArgument> argumentList = functionTrailer.getArgumentList().getArgumentList();,if (functionTrailer != null ) List<BuckArgument> argumentList = functionTrailer.getArgumentList().getArgumentList();
BuckPsiUtils.java,PsiElement quotedElement = buckString.getApostrophedString();,if (buckString != null ) PsiElement quotedElement = buckString.getApostrophedString();
BuckPsiUtils.java,quotedElement = buckString.getQuotedString();,if (buckString != null ) quotedElement = buckString.getQuotedString();
BuckPsiUtils.java,String text = quotedElement.getText();,if (quotedElement != null ) String text = quotedElement.getText();
BuckPsiUtils.java,quotedElement = buckString.getApostrophedRawString();,if (buckString != null ) quotedElement = buckString.getApostrophedRawString();
BuckPsiUtils.java,quotedElement = buckString.getQuotedRawString();,if (buckString != null ) quotedElement = buckString.getQuotedRawString();
BuckPsiUtils.java,String text = quotedElement.getText();,if (quotedElement != null ) String text = quotedElement.getText();
BuckPsiUtils.java,quotedElement = buckString.getTripleApostrophedString();,if (buckString != null ) quotedElement = buckString.getTripleApostrophedString();
BuckPsiUtils.java,quotedElement = buckString.getTripleQuotedString();,if (buckString != null ) quotedElement = buckString.getTripleQuotedString();
BuckPsiUtils.java,String text = quotedElement.getText();,if (quotedElement != null ) String text = quotedElement.getText();
BuckPsiUtils.java,quotedElement = buckString.getTripleApostrophedRawString();,if (buckString != null ) quotedElement = buckString.getTripleApostrophedRawString();
BuckPsiUtils.java,quotedElement = buckString.getTripleQuotedRawString();,if (buckString != null ) quotedElement = buckString.getTripleQuotedRawString();
BuckPsiUtils.java,String text = quotedElement.getText();,if (quotedElement != null ) String text = quotedElement.getText();
AsyncBackgroundTaskManager.java,schedulerDone = scheduler.get().isTerminated();,if (scheduler != null ) schedulerDone = scheduler.get().isTerminated();
AsyncBackgroundTaskManager.java,Optional<Timeout> timeout = task.getTask().getTimeout();,if (task != null ) Optional<Timeout> timeout = task.getTask().getTimeout();
AsyncBackgroundTaskManager.java,ManagedBackgroundTask task = scheduledTasks.remove();,if (scheduledTasks != null ) ManagedBackgroundTask task = scheduledTasks.remove();
MainRunner.java,this.platform = Platform.detect();,if (Platform != null ) this.platform = Platform.detect();
MainRunner.java,pluginManager = BuckPluginManagerFactory.createPluginManager();,if (BuckPluginManagerFactory != null ) pluginManager = BuckPluginManagerFactory.createPluginManager();
MainRunner.java,specifiedBuildId = UUID.randomUUID().toString();,if (UUID != null ) specifiedBuildId = UUID.randomUUID().toString();
ImmutableUnconfiguredBuildTargetView.java,String cell = data.getUnflavoredBuildTarget().getCell();,if (data != null ) String cell = data.getUnflavoredBuildTarget().getCell();
ComputationStageMap.java,mapBuilder = ImmutableMap.builderWithExpectedSize(stages.size());,if (ImmutableMap != null ) mapBuilder = ImmutableMap.builderWithExpectedSize(stages.size());
DirectoryListTransformerTest.java,DirectoryListTransformer transformer = DirectoryListTransformer.of(filesystem.asView());,if (DirectoryListTransformer != null ) DirectoryListTransformer transformer = DirectoryListTransformer.of(filesystem.asView());
FileTreeTransformerTest.java,FileTreeTransformer transformer = FileTreeTransformer.of();,if (FileTreeTransformer != null ) FileTreeTransformer transformer = FileTreeTransformer.of();
TransformationStageMapTest.java,TransformationStageMap map = TransformationStageMap.from(ImmutableList.of());,if (TransformationStageMap != null ) TransformationStageMap map = TransformationStageMap.from(ImmutableList.of());
ParallelActionGraphFactory.java,ForkJoinPool pool = poolSupplier.get();,if (poolSupplier != null ) ForkJoinPool pool = poolSupplier.get();
MultiThreadedActionGraphBuilder.java,Thread current = Thread.currentThread();,if (Thread != null ) Thread current = Thread.currentThread();
AbstractCxxSourceRuleFactory.java,String name = entry.getKey();,if (entry != null ) String name = entry.getKey();
AbstractCxxSourceRuleFactory.java,CxxSource source = entry.getValue();,if (entry != null ) CxxSource source = entry.getValue();
TransitiveCxxPreprocessorInputCache.java,result = Objects.requireNonNull(loadTask.externalCompute());,if (Objects != null ) result = Objects.requireNonNull(loadTask.externalCompute());
FetchCommand.java,buildTargets = ruleGenerator.getDownloadableTargets();,if (ruleGenerator != null ) buildTargets = ruleGenerator.getDownloadableTargets();
FetchTargetNodeToBuildRuleTransformer.java,this.downloadableTargets = ImmutableSet.builder();,if (ImmutableSet != null ) this.downloadableTargets = ImmutableSet.builder();
BuckUnixPath.java,segments[i] = segments[i].intern();,if (segments[i] != null ) segments[i] = segments[i].intern();
BuckUnixPath.java,int n = input.length();,if (input != null ) int n = input.length();
BuckUnixPath.java,StringBuilder sb = new StringBuilder(input.length());,if (StringBuilder(input != null ) StringBuilder sb = new StringBuilder(input.length());
AndroidAppModularityDescription.java,result = graphEnhancer.createAdditionalBuildables();,if (graphEnhancer != null ) result = graphEnhancer.createAdditionalBuildables();
AndroidAppModularityDescription.java,AndroidAppModularityGraphEnhancementResult result = graphEnhancer.createAdditionalBuildables();,if (graphEnhancer != null ) AndroidAppModularityGraphEnhancementResult result = graphEnhancer.createAdditionalBuildables();
BuildPackagePathToRawTargetNodePackageTransformer.java,UnconfiguredBuildTargetData unconfiguredBuildTarget = entry.getKey().getBuildTarget();,if (entry != null ) UnconfiguredBuildTargetData unconfiguredBuildTarget = entry.getKey().getBuildTarget();
BuildTargetToRawTargetNodeTransformer.java,UnconfiguredBuildTargetData buildTarget = key.getBuildTarget();,if (key != null ) UnconfiguredBuildTargetData buildTarget = key.getBuildTarget();
BuildTargetToRawTargetNodeTransformer.java,UnconfiguredBuildTargetData buildTarget = key.getBuildTarget();,if (key != null ) UnconfiguredBuildTargetData buildTarget = key.getBuildTarget();
BuildPackagePathToRawTargetNodePackageTransformerTest.java,UnconfiguredBuildTargetData dep = deps.iterator().next();,if (deps != null ) UnconfiguredBuildTargetData dep = deps.iterator().next();
AbstractAliasConfig.java,UnconfiguredBuildTarget buildTarget = entry.getValue();,if (entry != null ) UnconfiguredBuildTarget buildTarget = entry.getValue();
JsonTargetConfigurationSerializer.java,UnconfiguredBuildTarget platform = buildTargetProvider.apply(targetPlatformNode.textValue());,if (buildTargetProvider != null ) UnconfiguredBuildTarget platform = buildTargetProvider.apply(targetPlatformNode.textValue());
ProjectGenerator.java,UnflavoredBuildTarget buildTarget = targetNode.getBuildTarget().getUnflavoredBuildTarget();,if (targetNode != null ) UnflavoredBuildTarget buildTarget = targetNode.getBuildTarget().getUnflavoredBuildTarget();
BuiltTargetVerifier.java,UnflavoredBuildTarget unflavoredBuildTarget = target.getUnflavoredBuildTarget();,if (target != null ) UnflavoredBuildTarget unflavoredBuildTarget = target.getUnflavoredBuildTarget();
UnconfiguredBuildTargetTypeInfo.java,UnflavoredBuildTarget unflavored = value.getUnflavoredBuildTarget();,if (value != null ) UnflavoredBuildTarget unflavored = value.getUnflavoredBuildTarget();
SwiftLibraryDescription.java,UnflavoredBuildTarget unflavoredBuildTarget = buildTarget.getUnflavoredBuildTarget();,if (buildTarget != null ) UnflavoredBuildTarget unflavoredBuildTarget = buildTarget.getUnflavoredBuildTarget();
AbstractFlavorSearchTargetNodeFinder.java,UnflavoredBuildTarget unflavoredTarget = baseTarget.getUnflavoredBuildTarget();,if (baseTarget != null ) UnflavoredBuildTarget unflavoredTarget = baseTarget.getUnflavoredBuildTarget();
BuildFileSpec.java,long walkStartTimeNanos = System.nanoTime();,if (System != null ) long walkStartTimeNanos = System.nanoTime();
BuildPackagePathToRawTargetNodePackageTransformer.java,UnconfiguredBuildTarget unconfiguredBuildTarget = entry.getKey().getBuildTarget();,if (entry != null ) UnconfiguredBuildTarget unconfiguredBuildTarget = entry.getKey().getBuildTarget();
BuildTargetToRawTargetNodeTransformer.java,UnconfiguredBuildTarget buildTarget = key.getBuildTarget();,if (key != null ) UnconfiguredBuildTarget buildTarget = key.getBuildTarget();
BuildTargetToRawTargetNodeTransformer.java,UnconfiguredBuildTarget buildTarget = key.getBuildTarget();,if (key != null ) UnconfiguredBuildTarget buildTarget = key.getBuildTarget();
BuckBuildUtil.java,PsiElement lvalue = arg.getPropertyLvalue();,if (arg != null ) PsiElement lvalue = arg.getPropertyLvalue();
BuckFoldingBuilder.java,TextRange elementTextRange = element.getTextRange();,if (element != null ) TextRange elementTextRange = element.getTextRange();
BuckFoldingBuilder.java,IElementType type = compositeElement.getElementType();,if (compositeElement != null ) IElementType type = compositeElement.getElementType();
BuckFoldingBuilder.java,PsiElement psiElement = compositeElement.getPsi();,if (compositeElement != null ) PsiElement psiElement = compositeElement.getPsi();
BuckFoldingBuilder.java,element = element.getNextSibling();,if (element != null ) element = element.getNextSibling();
BuckBlock.java,myPsiElement = node.getPsi();,if (node != null ) myPsiElement = node.getPsi();
BuckBlock.java,final IElementType childType = child.getElementType();,if (child != null ) final IElementType childType = child.getElementType();
BuckBlock.java,Indent indent = Indent.getNoneIndent();,if (Indent != null ) Indent indent = Indent.getNoneIndent();
BuckBlock.java,indent = Indent.getNormalIndent();,if (Indent != null ) indent = Indent.getNormalIndent();
BuckBlock.java,final ASTNode lastChildNode = myNode.getLastChildNode();,if (myNode != null ) final ASTNode lastChildNode = myNode.getLastChildNode();
BuckCopyPasteProcessor.java,PsiElement leftValue = property.getFirstChild();,if (property != null ) PsiElement leftValue = property.getFirstChild();
BuckCopyPasteProcessor.java,leftValue = leftValue.getFirstChild();,if (leftValue != null ) leftValue = leftValue.getFirstChild();
BuckFormattingModelBuilder.java,final PsiElement element = elementAtOffset.getPsi();,if (elementAtOffset != null ) final PsiElement element = elementAtOffset.getPsi();
BuckFormattingModelBuilder.java,final PsiElement container = element.getParent();,if (element != null ) final PsiElement container = element.getParent();
BuckFormattingModelBuilder.java,PsiFile file = context.getContainingFile();,if (context != null ) PsiFile file = context.getContainingFile();
DependenciesOptimizer.java,BuckPropertyLvalue lValue = property.getPropertyLvalue();,if (property != null ) BuckPropertyLvalue lValue = property.getPropertyLvalue();
BuckPsiUtils.java,BuckPropertyLvalue propertyLvalue = buckArgument.getPropertyLvalue();,if (buckArgument != null ) BuckPropertyLvalue propertyLvalue = buckArgument.getPropertyLvalue();
BuckFoldingBuilder.java,name = element.getText();,if (element != null ) name = element.getText();
BuckPsiUtils.java,PsiElement quotedElement = buckString.getSingleQuotedString();,if (buckString != null ) PsiElement quotedElement = buckString.getSingleQuotedString();
BuckPsiUtils.java,quotedElement = buckString.getDoubleQuotedString();,if (buckString != null ) quotedElement = buckString.getDoubleQuotedString();
BuckPsiUtils.java,PsiElement tripleQuotedElement = buckString.getSingleQuotedDocString();,if (buckString != null ) PsiElement tripleQuotedElement = buckString.getSingleQuotedDocString();
BuckPsiUtils.java,tripleQuotedElement = buckString.getDoubleQuotedDocString();,if (buckString != null ) tripleQuotedElement = buckString.getDoubleQuotedDocString();
BuckPsiUtils.java,String text = tripleQuotedElement.getText();,if (tripleQuotedElement != null ) String text = tripleQuotedElement.getText();
BuckBuildUtil.java,BuckSimpleExpression expression = arg.getSimpleExpression();,if (arg != null ) BuckSimpleExpression expression = arg.getSimpleExpression();
BuckCodeContexts.java,BuckPrimary primary = buckString.getPrimary();,if (buckString != null ) BuckPrimary primary = buckString.getPrimary();
DependenciesOptimizer.java,List<BuckSimpleExpression> expressionList = buckListElements.getSimpleExpressionList();,if (buckListElements != null ) List<BuckSimpleExpression> expressionList = buckListElements.getSimpleExpressionList();
BuckPsiUtils.java,BuckFunctionCallSuffix buckRuleBody = buckRuleBlock.getFunctionCallSuffix();,if (buckRuleBlock != null ) BuckFunctionCallSuffix buckRuleBody = buckRuleBlock.getFunctionCallSuffix();
BuckPsiUtils.java,BuckFunctionCallSuffix buckRuleBody = buckRuleBlock.getFunctionCallSuffix();,if (buckRuleBlock != null ) BuckFunctionCallSuffix buckRuleBody = buckRuleBlock.getFunctionCallSuffix();
BuckPsiUtils.java,String name = BuckPsiUtils.getStringValueFromExpression(buckArgument.getSimpleExpression());,if (BuckPsiUtils != null ) String name = BuckPsiUtils.getStringValueFromExpression(buckArgument.getSimpleExpression());
QueryParser.java,QueryExpression expr = parser.parseExpression();,if (parser != null ) QueryExpression expr = parser.parseExpression();
BuildPackagePathToRawTargetNodePackageTransformerTest.java,UnconfiguredBuildTarget dep = deps.iterator().next();,if (deps != null ) UnconfiguredBuildTarget dep = deps.iterator().next();
ProjectGeneratorTest.java,UserFlavor iOS = iOSBuilder.build();,if (iOSBuilder != null ) UserFlavor iOS = iOSBuilder.build();
BuildTargetParser.java,UnflavoredBuildTarget unflavoredBuildTarget = unflavoredBuilder.build();,if (unflavoredBuilder != null ) UnflavoredBuildTarget unflavoredBuildTarget = unflavoredBuilder.build();
PerfMbrPrepareRemoteExecutionCommand.java,Set<Digest> containedHashes = Sets.newConcurrentHashSet();,if (Sets != null ) Set<Digest> containedHashes = Sets.newConcurrentHashSet();
RemoteExecutionConsoleLineProvider.java,LocalFallbackStats localFallbackStats = statsProvider.getLocalFallbackStats();,if (statsProvider != null ) LocalFallbackStats localFallbackStats = statsProvider.getLocalFallbackStats();
MainRunner.java,telemetryPlugins = Lists.newArrayList();,if (Lists != null ) telemetryPlugins = Lists.newArrayList();
Serializer.java,Visitor visitor = new Visitor(instance.getClass());,if (Visitor(instance != null ) Visitor visitor = new Visitor(instance.getClass());
ActionRunner.java,outputFiles = ImmutableList.builder();,if (ImmutableList != null ) outputFiles = ImmutableList.builder();
ActionRunner.java,outputDirectories = ImmutableList.builder();,if (ImmutableList != null ) outputDirectories = ImmutableList.builder();
LocalContentAddressedStorage.java,String hash = data.digest.getHash();,if (data != null ) String hash = data.digest.getHash();
MultiThreadedBlobUploader.java,Digest digest = entry.getKey();,if (entry != null ) Digest digest = entry.getKey();
MultiThreadedBlobUploader.java,size += data.uploadData.digest.getSize();,if (data != null ) size += data.uploadData.digest.getSize();
ModernBuildRuleRemoteExecutionHelper.java,Digest inputsRootDigest = nodeCache.getData(mergedMerkleTree).getDigest();,if (nodeCache != null ) Digest inputsRootDigest = nodeCache.getData(mergedMerkleTree).getDigest();
RemoteExecutionStrategy.java,totalInputSizeBytes += digest.getSize();,if (digest != null ) totalInputSizeBytes += digest.getSize();
MerkleTreeNodeCacheTest.java,Directory cat = dataMap.get(catDirNode.getDigest());,if (dataMap != null ) Directory cat = dataMap.get(catDirNode.getDigest());
MerkleTreeNodeCacheTest.java,Directory dog = dataMap.get(dogDirNode.getDigest());,if (dataMap != null ) Directory dog = dataMap.get(dogDirNode.getDigest());
PerfRuleKeyCommand.java,ProjectFilesystem realFilesystem = cell.getFilesystem();,if (cell != null ) ProjectFilesystem realFilesystem = cell.getFilesystem();
DefaultStepRunner.java,String stepShortName = step.getShortName();,if (step != null ) String stepShortName = step.getShortName();
DefaultStepRunner.java,UUID stepUuid = UUID.randomUUID();,if (UUID != null ) UUID stepUuid = UUID.randomUUID();
DefaultStepRunner.java,"StepEvent.Finished finished = StepEvent.finished(started, executionResult.getExitCode());","if (executionResult != null ) StepEvent.Finished finished = StepEvent.finished(started, executionResult.getExitCode());"
CachingBuildRuleBuilder.java,Optional<BuildTarget> optionalTarget = Optional.of(rule.getBuildTarget());,if (Optional != null ) Optional<BuildTarget> optionalTarget = Optional.of(rule.getBuildTarget());
CachingBuildRuleBuilder.java,Optional<BuildTarget> optionalTarget = Optional.of(rule.getBuildTarget());,if (Optional != null ) Optional<BuildTarget> optionalTarget = Optional.of(rule.getBuildTarget());
AbstractSourcePathResolver.java,Path archiveAbsolutePath = getAbsolutePath(archiveMemberSourcePath.getArchiveSourcePath());,if (getAbsolutePath(archiveMemberSourcePath != null ) Path archiveAbsolutePath = getAbsolutePath(archiveMemberSourcePath.getArchiveSourcePath());
AbstractImmutableCell.java,ImmutableList<Path> exceptions = configView.getBuckPackageBoundaryExceptions();,if (configView != null ) ImmutableList<Path> exceptions = configView.getBuckPackageBoundaryExceptions();
BuckGlobalState.java,ImmutableList<Cell> allCells = rootCell.getAllCells();,if (rootCell != null ) ImmutableList<Cell> allCells = rootCell.getAllCells();
BuckGlobalState.java,this.hashCaches = hashCachesBuilder.build();,if (hashCachesBuilder != null ) this.hashCaches = hashCachesBuilder.build();
BuckGlobalState.java,this.actionGraphCache = new ActionGraphCache(buildBuckConfig.getMaxActionGraphCacheEntries());,if (ActionGraphCache(buildBuckConfig != null ) this.actionGraphCache = new ActionGraphCache(buildBuckConfig.getMaxActionGraphCacheEntries());
BuckGlobalState.java,this.daemonicParserState = new DaemonicParserState(parserConfig.getNumParsingThreads());,if (DaemonicParserState(parserConfig != null ) this.daemonicParserState = new DaemonicParserState(parserConfig.getNumParsingThreads());
BuckGlobalState.java,"webServer = createWebServer(rootCell.getBuckConfig(), rootCell.getFilesystem());","if (rootCell != null ) webServer = createWebServer(rootCell.getBuckConfig(), rootCell.getFilesystem());"
BuckGlobalState.java,cursor = watchman.buildClockWatchmanCursorMap();,if (watchman != null ) cursor = watchman.buildClockWatchmanCursorMap();
BuckGlobalState.java,cursor = watchman.buildNamedWatchmanCursorMap();,if (watchman != null ) cursor = watchman.buildNamedWatchmanCursorMap();
BuckGlobalState.java,this.startTime = clock.currentTimeMillis();,if (clock != null ) this.startTime = clock.currentTimeMillis();
BuckGlobalState.java,this.devspeedBuildListenerFactory = devspeedBuildListenerFactorySupplier.get();,if (devspeedBuildListenerFactorySupplier != null ) this.devspeedBuildListenerFactory = devspeedBuildListenerFactorySupplier.get();
BuckGlobalState.java,String rawPort = serverPort.get();,if (serverPort != null ) String rawPort = serverPort.get();
MainRunner.java,TypeCoercerFactory typeCoercerFactory = buckGlobalState.getTypeCoercerFactory();,if (buckGlobalState != null ) TypeCoercerFactory typeCoercerFactory = buckGlobalState.getTypeCoercerFactory();
MainRunner.java,TypeCoercerFactory typeCoercerFactory = buckGlobalState.getTypeCoercerFactory();,if (buckGlobalState != null ) TypeCoercerFactory typeCoercerFactory = buckGlobalState.getTypeCoercerFactory();
MainRunner.java,Optional<String> newDaemonEvent = stateLifecycleStatus.getLifecycleStatusString();,if (stateLifecycleStatus != null ) Optional<String> newDaemonEvent = stateLifecycleStatus.getLifecycleStatusString();
MainRunner.java,BuckGlobalState buckGlobalState = daemonRequest.getFirst();,if (daemonRequest != null ) BuckGlobalState buckGlobalState = daemonRequest.getFirst();
MainRunner.java,DaemonStatus daemonStatus = daemonRequest.getSecond();,if (daemonRequest != null ) DaemonStatus daemonStatus = daemonRequest.getSecond();
MainRunner.java,Optional<String> newDaemonEvent = daemonStatus.newDaemonEvent();,if (daemonStatus != null ) Optional<String> newDaemonEvent = daemonStatus.newDaemonEvent();
ThrowingPackageBoundaryChecker.java,String buildFileName = targetCell.getBuildFileName();,if (targetCell != null ) String buildFileName = targetCell.getBuildFileName();
AbstractImmutableCell.java,ProjectFilesystem targetFilesystem = targetCell.getFilesystem();,if (targetCell != null ) ProjectFilesystem targetFilesystem = targetCell.getFilesystem();
DaemonicParserState.java,Path buildFile = cell.getAbsolutePathToBuildFileUnsafe(target.getUnconfiguredBuildTarget());,if (cell != null ) Path buildFile = cell.getAbsolutePathToBuildFileUnsafe(target.getUnconfiguredBuildTarget());
DaemonicParserState.java,Path buildFile = cell.getAbsolutePathToBuildFileUnsafe(target.getUnconfiguredBuildTarget());,if (cell != null ) Path buildFile = cell.getAbsolutePathToBuildFileUnsafe(target.getUnconfiguredBuildTarget());
ParserWithConfigurableAttributes.java,Platform targetPlatform = stateWithConfigurableAttributes.getTargetPlatform().get();,if (stateWithConfigurableAttributes != null ) Platform targetPlatform = stateWithConfigurableAttributes.getTargetPlatform().get();
ParserWithConfigurableAttributes.java,Platform targetPlatform = stateWithConfigurableAttributes.getTargetPlatform().get();,if (stateWithConfigurableAttributes != null ) Platform targetPlatform = stateWithConfigurableAttributes.getTargetPlatform().get();
JavaBuckConfig.java,Javac.Source javacSource = getJavacSpec().getJavacSource();,if (getJavacSpec() != null ) Javac.Source javacSource = getJavacSpec().getJavacSource();
JavacOptionsProviderFactory.java,JavacOptions defaultJavacOptions = javaConfig.getDefaultJavacOptions();,if (javaConfig != null ) JavacOptions defaultJavacOptions = javaConfig.getDefaultJavacOptions();
JavaBuckConfigTest.java,JavacOptions options = config.getDefaultJavacOptions();,if (config != null ) JavacOptions options = config.getDefaultJavacOptions();
JavaLibraryRuleHelper.java,JavacOptions defaultJavacOptions = projectConfig.getJavaBuckConfig().getDefaultJavacOptions();,if (projectConfig != null ) JavacOptions defaultJavacOptions = projectConfig.getJavaBuckConfig().getDefaultJavacOptions();
JavaLibraryRuleHelper.java,String defaultSourceLevel = defaultJavacOptions.getSourceLevel();,if (defaultJavacOptions != null ) String defaultSourceLevel = defaultJavacOptions.getSourceLevel();
JavaLibraryRuleHelper.java,String defaultTargetLevel = defaultJavacOptions.getTargetLevel();,if (defaultJavacOptions != null ) String defaultTargetLevel = defaultJavacOptions.getTargetLevel();
DefaultJavaLibraryRules.java,String sourceLevel = getJavacOptions().getSourceLevel();,if (getJavacOptions() != null ) String sourceLevel = getJavacOptions().getSourceLevel();
JavaBuckConfigTest.java,JavacOptions options = config.getDefaultJavacOptions();,if (config != null ) JavacOptions options = config.getDefaultJavacOptions();
JavaBuckConfigTest.java,JavacOptions options = config.getDefaultJavacOptions();,if (config != null ) JavacOptions options = config.getDefaultJavacOptions();
JavacOptionsTest.java,JavacOptions copy = JavacOptions.builder(original).build();,if (JavacOptions != null ) JavacOptions copy = JavacOptions.builder(original).build();
InstallCommand.java,Optional<BuildTarget> deviceHelperTarget = appleConfig.getAppleDeviceHelperTarget();,if (appleConfig != null ) Optional<BuildTarget> deviceHelperTarget = appleConfig.getAppleDeviceHelperTarget();
InstallCommand.java,Optional<BuildTarget> helperTarget = appleConfig.getAppleDeviceHelperTarget();,if (appleConfig != null ) Optional<BuildTarget> helperTarget = appleConfig.getAppleDeviceHelperTarget();
AppleTestDescription.java,Optional<BuildTarget> xctoolZipTarget = appleConfig.getXctoolZipTarget();,if (appleConfig != null ) Optional<BuildTarget> xctoolZipTarget = appleConfig.getXctoolZipTarget();
AndroidBinaryDescription.java,Optional<BuildTarget> redexTarget = androidBuckConfig.getRedexTarget();,if (androidBuckConfig != null ) Optional<BuildTarget> redexTarget = androidBuckConfig.getRedexTarget();
AndroidBundleDescription.java,Optional<BuildTarget> redexTarget = androidBuckConfig.getRedexTarget();,if (androidBuckConfig != null ) Optional<BuildTarget> redexTarget = androidBuckConfig.getRedexTarget();
AbstractCxxBridgingHeaders.java,CxxBridgingHeaders.Builder builder = CxxBridgingHeaders.builder();,if (CxxBridgingHeaders != null ) CxxBridgingHeaders.Builder builder = CxxBridgingHeaders.builder();
ExperimentStatsRemoteLogEntry.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ExperimentStatsRemoteLogEntry.java,struct.tag = iprot.readString();,if (iprot != null ) struct.tag = iprot.readString();
ExperimentStatsRemoteLogEntry.java,struct.variant = iprot.readString();,if (iprot != null ) struct.variant = iprot.readString();
ExperimentStatsRemoteLogEntry.java,struct.propertyName = iprot.readString();,if (iprot != null ) struct.propertyName = iprot.readString();
ExperimentStatsRemoteLogEntry.java,struct.content = iprot.readString();,if (iprot != null ) struct.content = iprot.readString();
ExperimentStatsRemoteLogEntry.java,struct.tag = iprot.readString();,if (iprot != null ) struct.tag = iprot.readString();
ExperimentStatsRemoteLogEntry.java,struct.variant = iprot.readString();,if (iprot != null ) struct.variant = iprot.readString();
ExperimentStatsRemoteLogEntry.java,struct.propertyName = iprot.readString();,if (iprot != null ) struct.propertyName = iprot.readString();
ExperimentStatsRemoteLogEntry.java,struct.content = iprot.readString();,if (iprot != null ) struct.content = iprot.readString();
MemoryStatsRemoteLogEntry.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ProcessStatsRemoteLogEntry.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ProcessStatsRemoteLogEntry.java,struct.executable = iprot.readString();,if (iprot != null ) struct.executable = iprot.readString();
ProcessStatsRemoteLogEntry.java,struct.executable = iprot.readString();,if (iprot != null ) struct.executable = iprot.readString();
RemoteLogEntry.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
RemoteLogEntry.java,struct.buildUuid = iprot.readString();,if (iprot != null ) struct.buildUuid = iprot.readString();
RemoteLogEntry.java,struct.buildUuid = iprot.readString();,if (iprot != null ) struct.buildUuid = iprot.readString();
TimeStatsRemoteLogEntry.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
VersionControlStatsRemoteLogEntry.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
VersionControlStatsRemoteLogEntry.java,struct.currentRevisionId = iprot.readString();,if (iprot != null ) struct.currentRevisionId = iprot.readString();
VersionControlStatsRemoteLogEntry.java,struct.pathsChangedSampled = iprot.readBool();,if (iprot != null ) struct.pathsChangedSampled = iprot.readBool();
VersionControlStatsRemoteLogEntry.java,struct.currentRevisionId = iprot.readString();,if (iprot != null ) struct.currentRevisionId = iprot.readString();
VersionControlStatsRemoteLogEntry.java,struct.pathsChangedSampled = iprot.readBool();,if (iprot != null ) struct.pathsChangedSampled = iprot.readBool();
AndroidNdkResolver.java,ndkErrorMessage = Optional.of(e.getMessage());,if (Optional != null ) ndkErrorMessage = Optional.of(e.getMessage());
AndroidNdkResolver.java,ndkErrorMessage = Optional.of(e.getMessage());,if (Optional != null ) ndkErrorMessage = Optional.of(e.getMessage());
AndroidNdkResolver.java,ndkErrorMessage = Optional.of(e.getMessage());,if (Optional != null ) ndkErrorMessage = Optional.of(e.getMessage());
AndroidNdkResolver.java,ndkErrorMessage = Optional.of(e.getMessage());,if (Optional != null ) ndkErrorMessage = Optional.of(e.getMessage());
ProGuardConfigTest.java,Optional<SourcePath> proGuardJarOverride = proGuardConfig.getProguardJarOverride();,if (proGuardConfig != null ) Optional<SourcePath> proGuardJarOverride = proGuardConfig.getProguardJarOverride();
ProGuardConfigTest.java,Optional<SourcePath> proGuardJarOverride = proGuardConfig.getProguardJarOverride();,if (proGuardConfig != null ) Optional<SourcePath> proGuardJarOverride = proGuardConfig.getProguardJarOverride();
AbstractAliasConfig.java,BuildTarget buildTarget = entry.getValue();,if (entry != null ) BuildTarget buildTarget = entry.getValue();
HaskellCompileRule.java,extraArgs = ImmutableList.of();,if (ImmutableList != null ) extraArgs = ImmutableList.of();
HaskellCompileRule.java,SourcePathResolver resolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver resolver = buildContext.getSourcePathResolver();
AbstractAsynchronousCache.java,"FetchResult fetchResult = fetchImpl(request.getRuleKey(), request.getOutput());","if (request != null ) FetchResult fetchResult = fetchImpl(request.getRuleKey(), request.getOutput());"
SkylarkProjectBuildFileParser.java,extension = extensionDataCache.getIfPresent(load.getKey());,if (extensionDataCache != null ) extension = extensionDataCache.getIfPresent(load.getKey());
ServedCacheIntegrationTest.java,targetConfigurationSerializer = TargetConfigurationSerializerForTests.create();,if (TargetConfigurationSerializerForTests != null ) targetConfigurationSerializer = TargetConfigurationSerializerForTests.create();
BuckDaemon.java,idleKillerScope = idleKiller.newCommandExecutionScope();,if (idleKiller != null ) idleKillerScope = idleKiller.newCommandExecutionScope();
MainWithNailgun.java,BuckDaemon daemon = BuckDaemon.getInstance();,if (BuckDaemon != null ) BuckDaemon daemon = BuckDaemon.getInstance();
Main.java,Platform platform = Platform.detect();,if (Platform != null ) Platform platform = Platform.detect();
Main.java,int ret = Libc.INSTANCE.setsid();,if (Libc != null ) int ret = Libc.INSTANCE.setsid();
Main.java,SecurityManager securityManager = System.getSecurityManager();,if (System != null ) SecurityManager securityManager = System.getSecurityManager();
Main.java,int tasks = activeTasks.decrementAndGet();,if (activeTasks != null ) int tasks = activeTasks.decrementAndGet();
BuckBuildUtil.java,BuckSingleExpression expression = arg.getSingleExpression();,if (arg != null ) BuckSingleExpression expression = arg.getSingleExpression();
DependenciesOptimizer.java,List<BuckSingleExpression> expressionList = buckListElements.getSingleExpressionList();,if (buckListElements != null ) List<BuckSingleExpression> expressionList = buckListElements.getSingleExpressionList();
BuckPsiUtils.java,String name = BuckPsiUtils.getStringValueFromExpression(buckArgument.getSingleExpression());,if (BuckPsiUtils != null ) String name = BuckPsiUtils.getStringValueFromExpression(buckArgument.getSingleExpression());
BuildTargetTypeInfo.java,UnflavoredBuildTarget unflavored = value.getUnflavoredBuildTarget();,if (value != null ) UnflavoredBuildTarget unflavored = value.getUnflavoredBuildTarget();
BuildTargetTypeInfo.java,Path cellPath = creator.createPath();,if (creator != null ) Path cellPath = creator.createPath();
BuildTargetTypeInfo.java,String baseName = creator.createString();,if (creator != null ) String baseName = creator.createString();
BuildTargetTypeInfo.java,String shortName = creator.createString();,if (creator != null ) String shortName = creator.createString();
RemoteExecutionConsoleLineProvider.java,LocalFallbackStats localFallbackStats = statsProvider.getLocalFallbackStats();,if (statsProvider != null ) LocalFallbackStats localFallbackStats = statsProvider.getLocalFallbackStats();
Archive.java,SourcePathResolver resolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver resolver = context.getSourcePathResolver();
CxxDescriptionEnhancer.java,basename = staticLibraryBasename.get();,if (staticLibraryBasename != null ) basename = staticLibraryBasename.get();
SkylarkProjectBuildFileParser.java,Label label = loadImport.getLabel();,if (loadImport != null ) Label label = loadImport.getLabel();
SkylarkProjectBuildFileParser.java,ImmutableList<ExtensionData> dependencies = ImmutableList.of();,if (ImmutableList != null ) ImmutableList<ExtensionData> dependencies = ImmutableList.of();
SkylarkProjectBuildFileParser.java,"BuildFileAST extensionAst = parseSkylarkFile(extensionPath, loadImport.getContainingLabel());","if (loadImport != null ) BuildFileAST extensionAst = parseSkylarkFile(extensionPath, loadImport.getContainingLabel());"
SkylarkProjectBuildFileParser.java,"dependencies = loadExtensions(label, extensionAst.getImports());","if (extensionAst != null ) dependencies = loadExtensions(label, extensionAst.getImports());"
DirectoryListCache.java,Path folderPath = event.getPath().getParent();,if (event != null ) Path folderPath = event.getPath().getParent();
FileTreeCache.java,Path folderPath = event.getPath().getParent();,if (event != null ) Path folderPath = event.getPath().getParent();
FileTreeCache.java,folderPath = folderPath.getParent();,if (folderPath != null ) folderPath = folderPath.getParent();
QueryCommand.java,ListeningExecutorService executor = pool.getListeningExecutorService();,if (pool != null ) ListeningExecutorService executor = pool.getListeningExecutorService();
CachingBuildRuleBuilder.java,uploadCompleteFuture = manifestStoreResult.getStoreFuture().get();,if (manifestStoreResult != null ) uploadCompleteFuture = manifestStoreResult.getStoreFuture().get();
DaemonLifecycleManager.java,OptionalInt portFromUpdatedConfig = Daemon.getValidWebServerPort(newCell.getBuckConfig());,if (Daemon != null ) OptionalInt portFromUpdatedConfig = Daemon.getValidWebServerPort(newCell.getBuckConfig());
Main.java,Daemon daemon = daemonRequest.getFirst();,if (daemonRequest != null ) Daemon daemon = daemonRequest.getFirst();
Main.java,Optional<WebServer> webServer = daemon.getWebServer();,if (daemon != null ) Optional<WebServer> webServer = daemon.getWebServer();
Main.java,TypeCoercerFactory typeCoercerFactory = daemon.getTypeCoercerFactory();,if (daemon != null ) TypeCoercerFactory typeCoercerFactory = daemon.getTypeCoercerFactory();
ParserWithConfigurableAttributes.java,Platform targetPlatform = state.getTargetPlatform().get();,if (state != null ) Platform targetPlatform = state.getTargetPlatform().get();
ParserWithConfigurableAttributes.java,ConstraintResolver constraintResolver = state.getConstraintResolver();,if (state != null ) ConstraintResolver constraintResolver = state.getConstraintResolver();
ParserWithConfigurableAttributes.java,Platform targetPlatform = stateWithConfigurableAttributes.getTargetPlatform().get();,if (stateWithConfigurableAttributes != null ) Platform targetPlatform = stateWithConfigurableAttributes.getTargetPlatform().get();
CxxToolProvider.java,ProcessExecutor processExecutor = new DefaultProcessExecutor(Console.createNullConsole());,if (DefaultProcessExecutor(Console != null ) ProcessExecutor processExecutor = new DefaultProcessExecutor(Console.createNullConsole());
CxxToolProvider.java,String commandString = params.getCommand().toString();,if (params != null ) String commandString = params.getCommand().toString();
BuildableSerializerTest.java,int id = dataMap.size();,if (dataMap != null ) int id = dataMap.size();
DebugPathSanitizer.java,String pathToReplace = entry.getKey().toString();,if (entry != null ) String pathToReplace = entry.getKey().toString();
PrefixMapDebugPathSanitizer.java,boolean useUnixPathSeparator = compiler.getUseUnixPathSeparator();,if (compiler != null ) boolean useUnixPathSeparator = compiler.getUseUnixPathSeparator();
PrefixMapDebugPathSanitizer.java,String realPathStr = realPath.toString();,if (realPath != null ) String realPathStr = realPath.toString();
TargetSpecResolver.java,ProjectFilesystem filesystem = cell.getFilesystem();,if (cell != null ) ProjectFilesystem filesystem = cell.getFilesystem();
OwnersReportTest.java,Parser parser = TestParserFactory.create(cell.getBuckConfig());,if (TestParserFactory != null ) Parser parser = TestParserFactory.create(cell.getBuckConfig());
IntraCellIntegrationTest.java,Parser parser = TestParserFactory.create(cell.getBuckConfig());,if (TestParserFactory != null ) Parser parser = TestParserFactory.create(cell.getBuckConfig());
DistBuildStateTest.java,BuckConfig buckConfig = cell.getBuckConfig();,if (cell != null ) BuckConfig buckConfig = cell.getBuckConfig();
WorkThreadTrackingTask.java,workThread = Thread.currentThread();,if (Thread != null ) workThread = Thread.currentThread();
WorkThreadTrackingTask.java,T result = Objects.requireNonNull(work).get();,if (Objects != null ) T result = Objects.requireNonNull(work).get();
MultiThreadedActionGraphBuilder.java,workThread = Thread.currentThread();,if (Thread != null ) workThread = Thread.currentThread();
MultiThreadedActionGraphBuilder.java,V result = Objects.requireNonNull(work).get();,if (Objects != null ) V result = Objects.requireNonNull(work).get();
WorkThreadTrackingFutureDecorator.java,workThread = Thread.currentThread();,if (Thread != null ) workThread = Thread.currentThread();
RemoteExecutionStrategy.java,Digest actionDigest = actionInfo.getActionDigest();,if (actionInfo != null ) Digest actionDigest = actionInfo.getActionDigest();
DaemonLifecycleManager.java,daemonRestartReason = cacheCompat.toHumanReasonableError();,if (cacheCompat != null ) daemonRestartReason = cacheCompat.toHumanReasonableError();
DefaultParser.java,Cell owningCell = cell.getCell(targetNode.getBuildTarget());,if (cell != null ) Cell owningCell = cell.getCell(targetNode.getBuildTarget());
DefaultParser.java,Cell owningCell = cell.getCell(targetNode.getBuildTarget());,if (cell != null ) Cell owningCell = cell.getCell(targetNode.getBuildTarget());
DefaultParser.java,String shortName = targetNode.getBuildTarget().getShortName();,if (targetNode != null ) String shortName = targetNode.getBuildTarget().getShortName();
DefaultParser.java,BuildTarget unflavoredTarget = target.withoutFlavors();,if (target != null ) BuildTarget unflavoredTarget = target.withoutFlavors();
AsyncBackgroundTaskManager.java,ManagedBackgroundTask task = scheduledTasks.remove();,if (scheduledTasks != null ) ManagedBackgroundTask task = scheduledTasks.remove();
Depfiles.java,int inputIndex = prereqs.indexOf(inputPath.toString());,if (prereqs != null ) int inputIndex = prereqs.indexOf(inputPath.toString());
AndroidInstrumentationTest.java,Optional<Path> exopackageSymlinkTreePath = Optional.empty();,if (Optional != null ) Optional<Path> exopackageSymlinkTreePath = Optional.empty();
CacheCommand.java,Optional<Path> outputPath = Optional.empty();,if (Optional != null ) Optional<Path> outputPath = Optional.empty();
GoCompile.java,String extension = MorePaths.getFileExtension(sourceFile).toLowerCase();,if (MorePaths != null ) String extension = MorePaths.getFileExtension(sourceFile).toLowerCase();
GoCompile.java,ImmutableList<Path> rawCompileSrcs = compileSrcListBuilder.build();,if (compileSrcListBuilder != null ) ImmutableList<Path> rawCompileSrcs = compileSrcListBuilder.build();
GoCompile.java,ImmutableList<Path> headerSrcs = headerSrcListBuilder.build();,if (headerSrcListBuilder != null ) ImmutableList<Path> headerSrcs = headerSrcListBuilder.build();
GoCompile.java,ImmutableList<Path> rawAsmSrcs = asmSrcListBuilder.build();,if (asmSrcListBuilder != null ) ImmutableList<Path> rawAsmSrcs = asmSrcListBuilder.build();
GoCompile.java,asmHeaderPath = Optional.empty();,if (Optional != null ) asmHeaderPath = Optional.empty();
GoCompile.java,boolean allowExternalReferences = !rawAsmSrcs.isEmpty() || !extraAsmOutputs.isEmpty();,if (!extraAsmOutputs != null ) boolean allowExternalReferences = !rawAsmSrcs.isEmpty() || !extraAsmOutputs.isEmpty();
JavacToJarStepFactory.java,boolean generatingCode = !javacOptions.getAnnotationProcessingParams().isEmpty();,if (!javacOptions != null ) boolean generatingCode = !javacOptions.getAnnotationProcessingParams().isEmpty();
JvmLibraryArg.java,AbstractAnnotationProcessingParams.Builder builder = AnnotationProcessingParams.builder();,if (AnnotationProcessingParams != null ) AbstractAnnotationProcessingParams.Builder builder = AnnotationProcessingParams.builder();
KotlincToJarStepFactory.java,boolean generatingCode = !javacOptions.getAnnotationProcessingParams().isEmpty();,if (!javacOptions != null ) boolean generatingCode = !javacOptions.getAnnotationProcessingParams().isEmpty();
DefaultJavaLibraryTest.java,ImmutableList<String> parameters = scenario.buildAndGetCompileParameters();,if (scenario != null ) ImmutableList<String> parameters = scenario.buildAndGetCompileParameters();
DefaultJavaLibraryTest.java,ImmutableList<String> parameters = scenario.buildAndGetCompileParameters();,if (scenario != null ) ImmutableList<String> parameters = scenario.buildAndGetCompileParameters();
DefaultJavaLibraryTest.java,annotationProcessingParamsBuilder = AnnotationProcessingParams.builder();,if (AnnotationProcessingParams != null ) annotationProcessingParamsBuilder = AnnotationProcessingParams.builder();
DefaultJavaLibraryTest.java,AnnotationProcessingParams params = annotationProcessingParamsBuilder.build();,if (annotationProcessingParamsBuilder != null ) AnnotationProcessingParams params = annotationProcessingParamsBuilder.build();
AndroidNativeLibsPackageableGraphEnhancer.java,nativePlatforms = ndkCxxPlatformsProvider.getNdkCxxPlatforms();,if (ndkCxxPlatformsProvider != null ) nativePlatforms = ndkCxxPlatformsProvider.getNdkCxxPlatforms();
NdkLibraryDescription.java,CxxPlatform cxxPlatform = entry.getValue().getCxxPlatform();,if (entry != null ) CxxPlatform cxxPlatform = entry.getValue().getCxxPlatform();
PipelineNodeCache.java,SettableFuture<T> resultFutureCandidate = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<T> resultFutureCandidate = SettableFuture.create();
AbstractIjModule.java,Path targetBasePath = target.getBasePath();,if (target != null ) Path targetBasePath = target.getBasePath();
SimpleProcessListener.java,int bytesAvailable = to.remaining();,if (to != null ) int bytesAvailable = to.remaining();
SimpleProcessListener.java,int oldLimit = from.limit();,if (from != null ) int oldLimit = from.limit();
SimpleProcessListener.java,stdInToWrite = nextStdInToWrite.next();,if (nextStdInToWrite != null ) stdInToWrite = nextStdInToWrite.next();
QueryCommand.java,OutputStream outputStream = Files.newOutputStream(outputFile.toPath());,if (Files != null ) OutputStream outputStream = Files.newOutputStream(outputFile.toPath());
QueryCommand.java,PrintStream stdOut = params.getConsole().getStdOut();,if (params != null ) PrintStream stdOut = params.getConsole().getStdOut();
ClientCertificateHandler.java,HandshakeCertificates.Builder hsBuilder = new HandshakeCertificates.Builder();,if (HandshakeCertificates != null ) HandshakeCertificates.Builder hsBuilder = new HandshakeCertificates.Builder();
DaemonLifecycleManager.java,Path rootPath = rootCell.getFilesystem().getRootPath();,if (rootCell != null ) Path rootPath = rootCell.getFilesystem().getRootPath();
DaemonLifecycleManager.java,Path parserRoot = rootCell.getFilesystem().getRootPath();,if (rootCell != null ) Path parserRoot = rootCell.getFilesystem().getRootPath();
DaemonLifecycleManager.java,webServer = daemon.getWebServer();,if (daemon != null ) webServer = daemon.getWebServer();
DaemonLifecycleManager.java,webServer = Optional.empty();,if (Optional != null ) webServer = Optional.empty();
Main.java,Optional<Daemon> daemon = Optional.empty();,if (Optional != null ) Optional<Daemon> daemon = Optional.empty();
Main.java,boolean blocking = cliConfig.getFlushEventsBeforeExit();,if (cliConfig != null ) boolean blocking = cliConfig.getFlushEventsBeforeExit();
Main.java,Daemon daemon = daemonOptional.get();,if (daemonOptional != null ) Daemon daemon = daemonOptional.get();
Main.java,Daemon daemon = daemonOptional.get();,if (daemonOptional != null ) Daemon daemon = daemonOptional.get();
BuckQueryEnvironmentTest.java,executor = MoreExecutors.listeningDecorator(Executors.newSingleThreadExecutor());,if (MoreExecutors != null ) executor = MoreExecutors.listeningDecorator(Executors.newSingleThreadExecutor());
Architecture.java,nameToValueMap = builder.build();,if (builder != null ) nameToValueMap = builder.build();
TargetsCommand.java,BuildTarget target = entry.getKey();,if (entry != null ) BuildTarget target = entry.getKey();
TargetsCommand.java,TargetResult.Builder builder = entry.getValue();,if (entry != null ) TargetResult.Builder builder = entry.getValue();
ExternalJavac.java,String pathString = path.toString();,if (path != null ) String pathString = path.toString();
AbstractRemoteExecutionConfig.java,Path caFile = getCerticateAuthoritiesFile().get();,if (getCerticateAuthoritiesFile() != null ) Path caFile = getCerticateAuthoritiesFile().get();
AbstractModernBuildRuleConfig.java,ModernBuildRuleBuildStrategy strategy = getDefaultStrategyConfig().getBuildStrategy();,if (getDefaultStrategyConfig() != null ) ModernBuildRuleBuildStrategy strategy = getDefaultStrategyConfig().getBuildStrategy();
BuckArgsMethods.java,Path pyScriptPath = argsPath.toAbsolutePath();,if (argsPath != null ) Path pyScriptPath = argsPath.toAbsolutePath();
BuckArgsMethods.java,String pyScriptPathString = pyScriptPath.toString();,if (pyScriptPath != null ) String pyScriptPathString = pyScriptPath.toString();
AuditConfigCommandIntegrationTest.java,JsonNode jsonNode = ObjectMappers.READER.readTree(result.getStdout());,if (ObjectMappers != null ) JsonNode jsonNode = ObjectMappers.READER.readTree(result.getStdout());
BuckArgsMethods.java,ProcessExecutorParams.Builder paramsBuilder = ProcessExecutorParams.builder();,if (ProcessExecutorParams != null ) ProcessExecutorParams.Builder paramsBuilder = ProcessExecutorParams.builder();
BuckArgsMethods.java,ProcessExecutor processExecutor = new DefaultProcessExecutor(Console.createNullConsole());,if (DefaultProcessExecutor(Console != null ) ProcessExecutor processExecutor = new DefaultProcessExecutor(Console.createNullConsole());
BuckArgsMethods.java,OutputStream output = proc.getOutputStream();,if (proc != null ) OutputStream output = proc.getOutputStream();
AppleBinaryDescription.java,FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();,if (cxxPlatformsProvider != null ) FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();
AppleBinaryDescription.java,Flavor defaultCxxFlavor = cxxPlatformsProvider.getDefaultCxxPlatform().getFlavor();,if (cxxPlatformsProvider != null ) Flavor defaultCxxFlavor = cxxPlatformsProvider.getDefaultCxxPlatform().getFlavor();
AppleBinaryDescription.java,FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();,if (cxxPlatformsProvider != null ) FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();
AppleBinaryDescription.java,Flavor defaultCxxFlavor = cxxPlatformsProvider.getDefaultCxxPlatform().getFlavor();,if (cxxPlatformsProvider != null ) Flavor defaultCxxFlavor = cxxPlatformsProvider.getDefaultCxxPlatform().getFlavor();
AppleBundleDescription.java,cxxPlatform = appleCxxPlatform.getCxxPlatform();,if (appleCxxPlatform != null ) cxxPlatform = appleCxxPlatform.getCxxPlatform();
AppleLibraryDescription.java,FlavorDomain<CxxPlatform> cxxPlatforms = getCxxPlatformsProvider().getCxxPlatforms();,if (getCxxPlatformsProvider() != null ) FlavorDomain<CxxPlatform> cxxPlatforms = getCxxPlatformsProvider().getCxxPlatforms();
AppleLibraryDescription.java,FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();,if (cxxPlatformsProvider != null ) FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();
AppleLibraryDescription.java,Flavor defaultCxxFlavor = cxxPlatformsProvider.getDefaultCxxPlatform().getFlavor();,if (cxxPlatformsProvider != null ) Flavor defaultCxxFlavor = cxxPlatformsProvider.getDefaultCxxPlatform().getFlavor();
AppleTestDescription.java,FlavorDomain<CxxPlatform> cxxPlatformFlavorDomain = cxxPlatformsProvider.getCxxPlatforms();,if (cxxPlatformsProvider != null ) FlavorDomain<CxxPlatform> cxxPlatformFlavorDomain = cxxPlatformsProvider.getCxxPlatforms();
AppleTestDescription.java,Flavor defaultCxxFlavor = cxxPlatformsProvider.getDefaultCxxPlatform().getFlavor();,if (cxxPlatformsProvider != null ) Flavor defaultCxxFlavor = cxxPlatformsProvider.getDefaultCxxPlatform().getFlavor();
CxxBinaryFactory.java,FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();,if (cxxPlatformsProvider != null ) FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();
CxxGenruleDescription.java,CxxPlatform cxxPlatform = maybeCxxPlatform.get();,if (maybeCxxPlatform != null ) CxxPlatform cxxPlatform = maybeCxxPlatform.get();
CxxLibraryFactory.java,FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();,if (cxxPlatformsProvider != null ) FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();
CxxLibraryFactory.java,Flavor defaultCxxFlavor = cxxPlatformsProvider.getDefaultCxxPlatform().getFlavor();,if (cxxPlatformsProvider != null ) Flavor defaultCxxFlavor = cxxPlatformsProvider.getDefaultCxxPlatform().getFlavor();
CxxLibraryMetadataFactory.java,CxxPlatform cxxPlatform = platform.getValue();,if (platform != null ) CxxPlatform cxxPlatform = platform.getValue();
CxxTestDescription.java,FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();,if (cxxPlatformsProvider != null ) FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();
CxxTestDescription.java,Optional<CxxPlatform> targetPlatform = cxxPlatforms.getValue(target.getFlavors());,if (cxxPlatforms != null ) Optional<CxxPlatform> targetPlatform = cxxPlatforms.getValue(target.getFlavors());
CxxPlatforms.java,FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();,if (cxxPlatformsProvider != null ) FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();
CxxPlatforms.java,Optional<CxxPlatform> targetPlatform = cxxPlatforms.getValue(target.getFlavors());,if (cxxPlatforms != null ) Optional<CxxPlatform> targetPlatform = cxxPlatforms.getValue(target.getFlavors());
XCodeProjectCommandHelper.java,CxxPlatform defaultCxxPlatform = cxxPlatformsProvider.getDefaultCxxPlatform();,if (cxxPlatformsProvider != null ) CxxPlatform defaultCxxPlatform = cxxPlatformsProvider.getDefaultCxxPlatform();
GoToolchainFactory.java,CxxPlatform defaultCxxPlatform = cxxPlatformsProviderFactory.getDefaultCxxPlatform();,if (cxxPlatformsProviderFactory != null ) CxxPlatform defaultCxxPlatform = cxxPlatformsProviderFactory.getDefaultCxxPlatform();
GoToolchainFactory.java,FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProviderFactory.getCxxPlatforms();,if (cxxPlatformsProviderFactory != null ) FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProviderFactory.getCxxPlatforms();
HalideLibraryDescription.java,FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();,if (cxxPlatformsProvider != null ) FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();
HalideLibraryDescription.java,CxxPlatform hostCxxPlatform = cxxPlatforms.getValue(CxxPlatforms.getHostFlavor());,if (cxxPlatforms != null ) CxxPlatform hostCxxPlatform = cxxPlatforms.getValue(CxxPlatforms.getHostFlavor());
HaskellPlatformsProviderFactory.java,FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProviderFactory.getCxxPlatforms();,if (cxxPlatformsProviderFactory != null ) FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProviderFactory.getCxxPlatforms();
HaskellPlatformsProviderFactory.java,CxxPlatform defaultCxxPlatform = cxxPlatformsProviderFactory.getDefaultCxxPlatform();,if (cxxPlatformsProviderFactory != null ) CxxPlatform defaultCxxPlatform = cxxPlatformsProviderFactory.getDefaultCxxPlatform();
LuaPlatformsProviderFactory.java,FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProviderFactory.getCxxPlatforms();,if (cxxPlatformsProviderFactory != null ) FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProviderFactory.getCxxPlatforms();
LuaPlatformsProviderFactory.java,CxxPlatform defaultCxxPlatform = cxxPlatformsProviderFactory.getDefaultCxxPlatform();,if (cxxPlatformsProviderFactory != null ) CxxPlatform defaultCxxPlatform = cxxPlatformsProviderFactory.getDefaultCxxPlatform();
OcamlToolchainFactory.java,FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProviderFactory.getCxxPlatforms();,if (cxxPlatformsProviderFactory != null ) FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProviderFactory.getCxxPlatforms();
OcamlToolchainFactory.java,CxxPlatform defaultCxxPlatform = cxxPlatformsProviderFactory.getDefaultCxxPlatform();,if (cxxPlatformsProviderFactory != null ) CxxPlatform defaultCxxPlatform = cxxPlatformsProviderFactory.getDefaultCxxPlatform();
PythonBinaryDescription.java,FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();,if (cxxPlatformsProvider != null ) FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();
PythonTestDescription.java,FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();,if (cxxPlatformsProvider != null ) FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();
RustToolchainFactory.java,FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProviderFactory.getCxxPlatforms();,if (cxxPlatformsProviderFactory != null ) FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProviderFactory.getCxxPlatforms();
RustToolchainFactory.java,CxxPlatform defaultCxxPlatform = cxxPlatformsProviderFactory.getDefaultCxxPlatform();,if (cxxPlatformsProviderFactory != null ) CxxPlatform defaultCxxPlatform = cxxPlatformsProviderFactory.getDefaultCxxPlatform();
SwiftLibraryDescription.java,CxxPlatform cxxPlatform = platform.get().getValue();,if (platform != null ) CxxPlatform cxxPlatform = platform.get().getValue();
BcfgFoldingBuilder.java,int end = property.getTextRange().getEndOffset();,if (property != null ) int end = property.getTextRange().getEndOffset();
BcfgPsiImplUtil.java,PsiElement child = property.getFirstChild();,if (property != null ) PsiElement child = property.getFirstChild();
AbstractConsoleEventBusListener.java,distBuildStatus = Optional.of(event.getStatus());,if (Optional != null ) distBuildStatus = Optional.of(event.getStatus());
AbstractConsoleEventBusListener.java,CoordinatorBuildProgress buildProgress = event.getBuildProgress();,if (event != null ) CoordinatorBuildProgress buildProgress = event.getBuildProgress();
AbstractConsoleEventBusListener.java,distBuildFinishedRulesCount = buildProgress.getBuiltRulesCount();,if (buildProgress != null ) distBuildFinishedRulesCount = buildProgress.getBuiltRulesCount();
SimpleConsoleEventBusListener.java,BuildStatus newJobStatus = event.getJob().getStatus();,if (event != null ) BuildStatus newJobStatus = event.getJob().getStatus();
SimpleConsoleEventBusListener.java,BuildStatus existingStatus = distBuildSlaveTracker.get(slaveInfo.getBuildSlaveRunId());,if (distBuildSlaveTracker != null ) BuildStatus existingStatus = distBuildSlaveTracker.get(slaveInfo.getBuildSlaveRunId());
SuperConsoleEventBusListener.java,localBuildLinePrefix = stampedeLocalBuildStatus.getLocalBuildLinePrefix();,if (stampedeLocalBuildStatus != null ) localBuildLinePrefix = stampedeLocalBuildStatus.getLocalBuildLinePrefix();
SuperConsoleEventBusListener.java,totalUploadErrorsCount += slaveStatus.getHttpArtifactUploadsFailureCount();,if (slaveStatus != null ) totalUploadErrorsCount += slaveStatus.getHttpArtifactUploadsFailureCount();
AbstractConsoleEventBusListener.java,CacheRateStatsKeeper.CacheRateStatsUpdateEvent cacheRateStats = cacheRateStatsKeeper.getStats();,if (cacheRateStatsKeeper != null ) CacheRateStatsKeeper.CacheRateStatsUpdateEvent cacheRateStats = cacheRateStatsKeeper.getStats();
AbstractConsoleEventBusListener.java,long bytesUploaded = remoteArtifactTotalBytesUploaded.longValue();,if (remoteArtifactTotalBytesUploaded != null ) long bytesUploaded = remoteArtifactTotalBytesUploaded.longValue();
AbstractConsoleEventBusListener.java,int scheduled = remoteArtifactUploadsScheduledCount.get();,if (remoteArtifactUploadsScheduledCount != null ) int scheduled = remoteArtifactUploadsScheduledCount.get();
AbstractConsoleEventBusListener.java,int complete = remoteArtifactUploadedCount.get();,if (remoteArtifactUploadedCount != null ) int complete = remoteArtifactUploadedCount.get();
AbstractConsoleEventBusListener.java,int failed = remoteArtifactUploadFailedCount.get();,if (remoteArtifactUploadFailedCount != null ) int failed = remoteArtifactUploadFailedCount.get();
CxxLibraryFactory.java,FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();,if (cxxPlatformsProvider != null ) FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();
CxxLibraryFactory.java,Flavor defaultCxxFlavor = cxxPlatformsProvider.getDefaultCxxPlatform().getFlavor();,if (cxxPlatformsProvider != null ) Flavor defaultCxxFlavor = cxxPlatformsProvider.getDefaultCxxPlatform().getFlavor();
AndroidNativeLibsPackageableGraphEnhancer.java,Optional<Path> cxxSharedRuntimePath = platform.getCxxSharedRuntimePath();,if (platform != null ) Optional<Path> cxxSharedRuntimePath = platform.getCxxSharedRuntimePath();
RemoteExecutionConsoleLineProvider.java,this.formatDebugSessionIDString = remoteExecutionConfig.getDebugURLFormatString();,if (remoteExecutionConfig != null ) this.formatDebugSessionIDString = remoteExecutionConfig.getDebugURLFormatString();
RemoteExecutionConsoleLineProvider.java,this.reSessionID = remoteExecutionMetadata.getReSessionId().getId();,if (remoteExecutionMetadata != null ) this.reSessionID = remoteExecutionMetadata.getReSessionId().getId();
RemoteExecutionConsoleLineProviderTest.java,BuckConfig config = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig config = FakeBuckConfig.builder().build();
RemoteExecutionConsoleLineProviderTest.java,BuckConfig config = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig config = FakeBuckConfig.builder().build();
HttpArtifactCacheEvent.java,requestDurationMillis = timestampMillis - startedEvent.getTimestamp();,if (startedEvent != null ) requestDurationMillis = timestampMillis - startedEvent.getTimestamp();
ArtifactCompressionEvent.java,startedTimeStamp = started.getTimestamp();,if (started != null ) startedTimeStamp = started.getTimestamp();
HttpArtifactCacheUploadListener.java,lastUploadStartMillis = event.getTimestamp();,if (event != null ) lastUploadStartMillis = event.getTimestamp();
HttpArtifactCacheUploadListener.java,firstUploadMillis = event.getTimestamp();,if (event != null ) firstUploadMillis = event.getTimestamp();
HttpArtifactCacheUploadListener.java,lastUploadFinishMillis = event.getTimestamp();,if (event != null ) lastUploadFinishMillis = event.getTimestamp();
HttpArtifactCacheUploadListener.java,buildFinishMillis = event.getTimestamp();,if (event != null ) buildFinishMillis = event.getTimestamp();
PerfTimesEventListener.java,long diff = event.getTimestamp() - buildPhasesLastEvent.get();,if (buildPhasesLastEvent != null ) long diff = event.getTimestamp() - buildPhasesLastEvent.get();
SuperConsoleEventBusListener.java,long buildStartedTime = buildStarted.getTimestamp();,if (buildStarted != null ) long buildStartedTime = buildStarted.getTimestamp();
SuperConsoleEventBusListener.java,long durationMs = buildFinished.getTimestamp() - buildStarted.getTimestamp();,if (buildStarted != null ) long durationMs = buildFinished.getTimestamp() - buildStarted.getTimestamp();
CachingBuildEngineTest.java,wallStart = event.getTimestamp();,if (event != null ) wallStart = event.getTimestamp();
EventSerializationTest.java,timestamp = clock.currentTimeMillis();,if (clock != null ) timestamp = clock.currentTimeMillis();
MachineReadableLogJsonViewTest.java,timestamp = clock.currentTimeMillis();,if (clock != null ) timestamp = clock.currentTimeMillis();
BuckUncheckedExecutionException.java,String parentMessage = super.getLocalizedMessage();,if (super != null ) String parentMessage = super.getLocalizedMessage();
GoBinaryDescription.java,FlavorDomain<GoPlatform> platforms = toolchain.getPlatformFlavorDomain();,if (toolchain != null ) FlavorDomain<GoPlatform> platforms = toolchain.getPlatformFlavorDomain();
GoTestDescription.java,FlavorDomain<GoPlatform> platforms = toolchain.getPlatformFlavorDomain();,if (toolchain != null ) FlavorDomain<GoPlatform> platforms = toolchain.getPlatformFlavorDomain();
AndroidInstrumentationTest.java,Optional<Path> apkUnderTestPath = Optional.empty();,if (Optional != null ) Optional<Path> apkUnderTestPath = Optional.empty();
RemoteExecutionStorageServiceTest.java,service = inMemoryService.createRemoteExecutionStorageService();,if (inMemoryService != null ) service = inMemoryService.createRemoteExecutionStorageService();
RemoteExecutionStorageServiceTest.java,List<UploadData> allPayloads = Lists.newArrayList();,if (Lists != null ) List<UploadData> allPayloads = Lists.newArrayList();
InMemoryRemoteExecutionHttpService.java,payloads = Maps.newHashMap();,if (Maps != null ) payloads = Maps.newHashMap();
InMemoryRemoteExecutionHttpService.java,storage = Maps.newHashMap();,if (Maps != null ) storage = Maps.newHashMap();
BuckConfig.java,String sectionName = sectionEnt.getKey();,if (sectionEnt != null ) String sectionName = sectionEnt.getKey();
AbstractImmutableCell.java,ToolchainProvider otherToolchainProvider = other.getToolchainProvider();,if (other != null ) ToolchainProvider otherToolchainProvider = other.getToolchainProvider();
BuildPrehook.java,Optional<String> pathToPrehookScript = buckConfig.getPathToBuildPrehookScript();,if (buckConfig != null ) Optional<String> pathToPrehookScript = buckConfig.getPathToBuildPrehookScript();
BuckConfig.java,threadLimit -= reservedCores.get();,if (reservedCores != null ) threadLimit -= reservedCores.get();
BuckConfig.java,long maxThreadsValue = maxThreads.get();,if (maxThreads != null ) long maxThreadsValue = maxThreads.get();
ConfigRuleKeyConfigurationFactory.java,long inputKeySizeLimit = buckConfig.getBuildInputRuleKeyFileSizeLimit();,if (buckConfig != null ) long inputKeySizeLimit = buckConfig.getBuildInputRuleKeyFileSizeLimit();
BuckConfigTest.java,BuckConfig buckConfig = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig buckConfig = FakeBuckConfig.builder().build();
BuckConfigTest.java,BuckConfig buckConfig = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig buckConfig = FakeBuckConfig.builder().build();
AbstractCommand.java,ImmutableList<String> motd = params.getBuckConfig().getMessageOfTheDay();,if (params != null ) ImmutableList<String> motd = params.getBuckConfig().getMessageOfTheDay();
Main.java,boolean blocking = rootCell.getBuckConfig().getFlushEventsBeforeExit();,if (rootCell != null ) boolean blocking = rootCell.getBuckConfig().getFlushEventsBeforeExit();
Main.java,ImmutableSet<Path> overridesToIgnore = config.getWarnOnConfigFileOverridesIgnoredFiles();,if (config != null ) ImmutableSet<Path> overridesToIgnore = config.getWarnOnConfigFileOverridesIgnoredFiles();
CleanCommand.java,ImmutableList<String> excludedCaches = cell.getBuckConfig().getCleanExcludedCaches();,if (cell != null ) ImmutableList<String> excludedCaches = cell.getBuckConfig().getCleanExcludedCaches();
BuildTargetDurationListener.java,final String buildRuleName = event.getBuildRule().getFullyQualifiedName();,if (event != null ) final String buildRuleName = event.getBuildRule().getFullyQualifiedName();
BuildTargetDurationListener.java,final long startEpochMillis = event.getTimestamp();,if (event != null ) final long startEpochMillis = event.getTimestamp();
BuildTargetDurationListener.java,actionGraph = finished.getActionGraph();,if (finished != null ) actionGraph = finished.getActionGraph();
BuildTargetDurationListener.java,targetBuildRules = Optional.of(ruleCountCalculated.getBuildRules());,if (Optional != null ) targetBuildRules = Optional.of(ruleCountCalculated.getBuildRules());
BuildTargetDurationListener.java,CriticalPathEntry last = path.getLast();,if (path != null ) CriticalPathEntry last = path.getLast();
BuildTargetDurationListener.java,BuildRuleInfoSelectedChain root = topK.poll();,if (topK != null ) BuildRuleInfoSelectedChain root = topK.poll();
BuildTargetDurationListener.java,Collection<BuildRuleInfo> rootBuildRuleInfos = Lists.newArrayList();,if (Lists != null ) Collection<BuildRuleInfo> rootBuildRuleInfos = Lists.newArrayList();
BuildTargetDurationListener.java,Deque<CriticalPathEntry> path = Queues.newArrayDeque();,if (Queues != null ) Deque<CriticalPathEntry> path = Queues.newArrayDeque();
BuildTargetDurationListener.java,longest -= target.getDuration();,if (target != null ) longest -= target.getDuration();
BuildTargetDurationListener.java,target = prev.get();,if (prev != null ) target = prev.get();
BuildTargetDurationListener.java,this.dependents = Sets.newHashSet();,if (Sets != null ) this.dependents = Sets.newHashSet();
BuildTargetDurationListener.java,this.dependencies = Sets.newHashSet();,if (Sets != null ) this.dependencies = Sets.newHashSet();
BuildTargetDurationListener.java,this.intervals = Lists.newArrayList();,if (Lists != null ) this.intervals = Lists.newArrayList();
BuildTargetDurationListenerTest.java,Iterator<String> expectedPrevIterator = expectedPrev.iterator();,if (expectedPrev != null ) Iterator<String> expectedPrevIterator = expectedPrev.iterator();
BuildTargetDurationListenerTest.java,Iterator<Long> expectedLongestIterator = expectedLongest.iterator();,if (expectedLongest != null ) Iterator<Long> expectedLongestIterator = expectedLongest.iterator();
BuildTargetDurationListenerTest.java,Set<Chain> usedChains = Sets.newHashSet();,if (Sets != null ) Set<Chain> usedChains = Sets.newHashSet();
BuildTargetDurationListenerTest.java,final String starting = criticalPathForB.getFirst().ruleName();,if (criticalPathForB != null ) final String starting = criticalPathForB.getFirst().ruleName();
BuildTargetDurationListenerTest.java,BuildRuleInfoSelectedChain selectedChain = topKCriticalNodes.poll();,if (topKCriticalNodes != null ) BuildRuleInfoSelectedChain selectedChain = topKCriticalNodes.poll();
ThriftArtifactCache.java,StoreResult.Builder resultBuilder = StoreResult.builder();,if (StoreResult != null ) StoreResult.Builder resultBuilder = StoreResult.builder();
Main.java,ImmutableSet<String> paths = config.getListenerJars();,if (config != null ) ImmutableSet<String> paths = config.getListenerJars();
Main.java,classInfos = classPath.getTopLevelClasses();,if (classPath != null ) classInfos = classPath.getTopLevelClasses();
Main.java,String className = classInfo.getName();,if (classInfo != null ) String className = classInfo.getName();
BlockingHttpEndpoint.java,InputStream inputStream = connection.getInputStream();,if (connection != null ) InputStream inputStream = connection.getInputStream();
BlockingHttpEndpointTest.java,long start = System.nanoTime();,if (System != null ) long start = System.nanoTime();
BlockingHttpEndpointTest.java,long start = System.nanoTime();,if (System != null ) long start = System.nanoTime();
FineGrainedJavaDependencySuggester.java,JavaFileParser javaFileParser = javaDepsFinder.getJavaFileParser();,if (javaDepsFinder != null ) JavaFileParser javaFileParser = javaDepsFinder.getJavaFileParser();
FineGrainedJavaDependencySuggester.java,String visibilityArg = visibilityBuilder.toString();,if (visibilityBuilder != null ) String visibilityArg = visibilityBuilder.toString();
FineGrainedJavaDependencySuggester.java,ProjectFilesystem filesystem = path.getFilesystem();,if (path != null ) ProjectFilesystem filesystem = path.getFilesystem();
FineGrainedJavaDependencySuggester.java,Optional<String> contents = filesystem.readFileIfItExists(path.getRelativePath());,if (filesystem != null ) Optional<String> contents = filesystem.readFileIfItExists(path.getRelativePath());
FineGrainedJavaDependencySuggester.java,Path basePathForSuggestedTarget = suggestedTarget.getBasePath();,if (suggestedTarget != null ) Path basePathForSuggestedTarget = suggestedTarget.getBasePath();
JavaBuildGraphProcessor.java,ConcurrencyLimit concurrencyLimit = command.getConcurrencyLimit(params.getBuckConfig());,if (command != null ) ConcurrencyLimit concurrencyLimit = command.getConcurrencyLimit(params.getBuckConfig());
JavaBuildGraphProcessor.java,Cell cell = params.getCell();,if (params != null ) Cell cell = params.getCell();
JavaBuildGraphProcessor.java,BuckEventBus eventBus = params.getBuckEventBus();,if (params != null ) BuckEventBus eventBus = params.getBuckEventBus();
SuggestCommand.java,Console console = params.getConsole();,if (params != null ) Console console = params.getConsole();
JavaDepsFinder.java,JavacOptions javacOptions = javaBuckConfig.getDefaultJavacOptions();,if (javaBuckConfig != null ) JavacOptions javacOptions = javaBuckConfig.getDefaultJavacOptions();
JavaDepsFinder.java,BuildTarget buildTarget = node.getBuildTarget();,if (node != null ) BuildTarget buildTarget = node.getBuildTarget();
JavaDepsFinder.java,Object argForNode = node.getConstructorArg();,if (node != null ) Object argForNode = node.getConstructorArg();
JavaDepsFinder.java,symbolsFinder = new PrebuiltJarSymbolsFinder(arg.getBinaryJar());,if (PrebuiltJarSymbolsFinder(arg != null ) symbolsFinder = new PrebuiltJarSymbolsFinder(arg.getBinaryJar());
JavaDepsFinder.java,features = buildRule.getFeatures();,if (buildRule != null ) features = buildRule.getFeatures();
JavaDepsFinder.java,Throwable failure = result.getFailure();,if (result != null ) Throwable failure = result.getFailure();
JavaLibrarySymbolsFinder.java,ProjectFilesystem filesystem = sourcePath.getFilesystem();,if (sourcePath != null ) ProjectFilesystem filesystem = sourcePath.getFilesystem();
JavaLibrarySymbolsFinder.java,Path absolutePath = filesystem.resolve(sourcePath.getRelativePath());,if (filesystem != null ) Path absolutePath = filesystem.resolve(sourcePath.getRelativePath());
PrebuiltJarSymbolsFinder.java,PathSourcePath sourcePath = binaryJar.get();,if (binaryJar != null ) PathSourcePath sourcePath = binaryJar.get();
PrebuiltJarSymbolsFinder.java,ProjectFilesystem filesystem = sourcePath.getFilesystem();,if (sourcePath != null ) ProjectFilesystem filesystem = sourcePath.getFilesystem();
PrebuiltJarSymbolsFinder.java,Path absolutePath = filesystem.resolve(sourcePath.getRelativePath());,if (filesystem != null ) Path absolutePath = filesystem.resolve(sourcePath.getRelativePath());
PrebuiltJarSymbolsFinder.java,String name = zipEntry.getName();,if (zipEntry != null ) String name = zipEntry.getName();
Symbols.java,this.provided = ImmutableList.of();,if (ImmutableList != null ) this.provided = ImmutableList.of();
JavaLibrarySymbolsFinderTest.java,Symbols symbols = finder.extractSymbols();,if (finder != null ) Symbols symbols = finder.extractSymbols();
PrebuiltJarSymbolsFinderTest.java,Symbols symbols = finder.extractSymbols();,if (finder != null ) Symbols symbols = finder.extractSymbols();
PrebuiltJarSymbolsFinderTest.java,Symbols symbols = finder.extractSymbols();,if (finder != null ) Symbols symbols = finder.extractSymbols();
PrebuiltJarSymbolsFinderTest.java,File jarFile = absolutePathToJar.toFile();,if (absolutePathToJar != null ) File jarFile = absolutePathToJar.toFile();
PrebuiltJarSymbolsFinderTest.java,Clock clock = FakeClock.doNotCare();,if (FakeClock != null ) Clock clock = FakeClock.doNotCare();
PrebuiltJarSymbolsFinderTest.java,ProjectFilesystem filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());,if (TestProjectFilesystems != null ) ProjectFilesystem filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());
SwiftStdlibStep.java,ProcessExecutorParams.Builder builder = ProcessExecutorParams.builder();,if (ProcessExecutorParams != null ) ProcessExecutorParams.Builder builder = ProcessExecutorParams.builder();
CxxBinaryDescriptionTest.java,Set<Flavor> flavors = Sets.newHashSet(libTarget.getFlavors());,if (Sets != null ) Set<Flavor> flavors = Sets.newHashSet(libTarget.getFlavors());
BuckConfig.java,int num = numTestThreads.getAsInt();,if (numTestThreads != null ) int num = numTestThreads.getAsInt();
DefaultGraphTransformationEngineStackUseTest.java,MutableGraph<Long> graph = GraphBuilder.directed().build();,if (GraphBuilder != null ) MutableGraph<Long> graph = GraphBuilder.directed().build();
CsharpLibraryIntegrationTest.java,Optional<String> envOut = envResult.getStdout();,if (envResult != null ) Optional<String> envOut = envResult.getStdout();
CsharpLibraryIntegrationTest.java,String envString = envOut.get();,if (envOut != null ) String envString = envOut.get();
BuckConfig.java,BuildTarget target = getBuildTargetForFullyQualifiedTarget(value.get());,if (getBuildTargetForFullyQualifiedTarget(value != null ) BuildTarget target = getBuildTargetForFullyQualifiedTarget(value.get());
AnnotationProcessorFactoryTest.java,ClassLoader baseClassLoader = ToolProvider.getSystemToolClassLoader();,if (ToolProvider != null ) ClassLoader baseClassLoader = ToolProvider.getSystemToolClassLoader();
MorePaths.java,int nameCount = relativePath.getNameCount();,if (relativePath != null ) int nameCount = relativePath.getNameCount();
MorePaths.java,String currentFileName = currentPath.getFileName().toString();,if (currentPath != null ) String currentFileName = currentPath.getFileName().toString();
MorePaths.java,Iterator<Path> it = stream.iterator();,if (stream != null ) Iterator<Path> it = stream.iterator();
CommandLineTargetNodeSpecParser.java,String lineSeparator = System.lineSeparator();,if (System != null ) String lineSeparator = System.lineSeparator();
CommandLineTargetNodeSpecParser.java,String lineSeparator = System.lineSeparator();,if (System != null ) String lineSeparator = System.lineSeparator();
MorePaths.java,int nameCount = relativePath.getNameCount();,if (relativePath != null ) int nameCount = relativePath.getNameCount();
MorePaths.java,String subPathString = subPath.getFileName().toString();,if (subPath != null ) String subPathString = subPath.getFileName().toString();
MorePaths.java,Path candidatePath = candidate.getFirst();,if (candidate != null ) Path candidatePath = candidate.getFirst();
MorePaths.java,int remainingDistanceAllowed = maxDistance - candidate.getSecond();,if (candidate != null ) int remainingDistanceAllowed = maxDistance - candidate.getSecond();
TargetSuggestionUtils.java,BuckConfig config = cell.getBuckConfig();,if (cell != null ) BuckConfig config = cell.getBuckConfig();
TargetSuggestionUtils.java,Path cellPath = cell.getRoot();,if (cell != null ) Path cellPath = cell.getRoot();
NoSuchBuildTargetException.java,String lineSeparator = System.lineSeparator();,if (System != null ) String lineSeparator = System.lineSeparator();
WorkerProcessProtocolZero.java,this.stdErr = Optional.empty();,if (Optional != null ) this.stdErr = Optional.empty();
WorkerProcessProtocolZero.java,String property = processStdoutReader.nextName();,if (processStdoutReader != null ) String property = processStdoutReader.nextName();
WorkerProcessProtocolZero.java,id = processStdoutReader.nextInt();,if (processStdoutReader != null ) id = processStdoutReader.nextInt();
WorkerProcessProtocolZero.java,type = processStdoutReader.nextString();,if (processStdoutReader != null ) type = processStdoutReader.nextString();
WorkerProcessProtocolZero.java,argsPath = processStdoutReader.nextString();,if (processStdoutReader != null ) argsPath = processStdoutReader.nextString();
WorkerProcessProtocolZero.java,stdoutPath = processStdoutReader.nextString();,if (processStdoutReader != null ) stdoutPath = processStdoutReader.nextString();
WorkerProcessProtocolZero.java,stderrPath = processStdoutReader.nextString();,if (processStdoutReader != null ) stderrPath = processStdoutReader.nextString();
BuildIdSampler.java,String buildIdString = buildId.toString();,if (buildId != null ) String buildIdString = buildId.toString();
BuildIdSamplerTest.java,BuildId buildId = new BuildId(uuid.toString());,if (BuildId(uuid != null ) BuildId buildId = new BuildId(uuid.toString());
ParseStatsTracker.java,"parseStartedTime = Math.min(parseStartedTime, started.getTimestamp());","if (started != null ) parseStartedTime = Math.min(parseStartedTime, started.getTimestamp());"
ParseStatsTracker.java,"parseFinishedTime = Math.max(parseFinishedTime, finished.getTimestamp());","if (finished != null ) parseFinishedTime = Math.max(parseFinishedTime, finished.getTimestamp());"
ParseStatsTrackerTest.java,BuckEventBus eventBus = BuckEventBusForTests.newInstance();,if (BuckEventBusForTests != null ) BuckEventBus eventBus = BuckEventBusForTests.newInstance();
ParseStatsTrackerTest.java,EventInterval interval = tracker.getInterval();,if (tracker != null ) EventInterval interval = tracker.getInterval();
ParseStatsTrackerTest.java,interval = tracker.getInterval();,if (tracker != null ) interval = tracker.getInterval();
ParseStatsTrackerTest.java,interval = tracker.getInterval();,if (tracker != null ) interval = tracker.getInterval();
ParseStatsTrackerTest.java,BuckEventBus eventBus = BuckEventBusForTests.newInstance();,if (BuckEventBusForTests != null ) BuckEventBus eventBus = BuckEventBusForTests.newInstance();
ParseStatsTrackerTest.java,EventInterval interval = tracker.getInterval();,if (tracker != null ) EventInterval interval = tracker.getInterval();
ParseStatsTrackerTest.java,interval = tracker.getInterval();,if (tracker != null ) interval = tracker.getInterval();
ParseStatsTrackerTest.java,Started startedSecondary = ParseEvent.started(ImmutableList.of());,if (ParseEvent != null ) Started startedSecondary = ParseEvent.started(ImmutableList.of());
ParseStatsTrackerTest.java,EventInterval newInterval = tracker.getInterval();,if (tracker != null ) EventInterval newInterval = tracker.getInterval();
ParseStatsTrackerTest.java,newInterval = tracker.getInterval();,if (tracker != null ) newInterval = tracker.getInterval();
ParseStatsTrackerTest.java,interval = tracker.getInterval();,if (tracker != null ) interval = tracker.getInterval();
BuildReport.java,outputFile = rule.getSourcePathToOutput();,if (rule != null ) outputFile = rule.getSourcePathToOutput();
BuildReport.java,SourcePath outputFile = rule.getSourcePathToOutput();,if (rule != null ) SourcePath outputFile = rule.getSourcePathToOutput();
Inis.java,Config config = ini.getConfig();,if (ini != null ) Config config = ini.getConfig();
BuckFileTypeFactory.java,String buildFileName = BuckFileUtil.getBuildFileName();,if (BuckFileUtil != null ) String buildFileName = BuckFileUtil.getBuildFileName();
AbstractStringWithMacrosConverter.java,builder = ImmutableMap.builder();,if (ImmutableMap != null ) builder = ImmutableMap.builder();
CxxGenruleDescription.java,Iterator<String> itr = input.iterator();,if (input != null ) Iterator<String> itr = input.iterator();
AabBuilderStep.java,String moduleName = moduleInfo.getModuleName();,if (moduleInfo != null ) String moduleName = moduleInfo.getModuleName();
GenerateAssetsStep.java,Assets.Builder builder = Assets.newBuilder();,if (Assets != null ) Assets.Builder builder = Assets.newBuilder();
GenerateAssetsStep.java,File[] filesInAssets = file.listFiles();,if (file != null ) File[] filesInAssets = file.listFiles();
GenerateAssetsStep.java,File[] subdirectories = assetFile.listFiles();,if (assetFile != null ) File[] subdirectories = assetFile.listFiles();
GenerateAssetsStep.java,File[] assetsDirectories = assetFile.listFiles();,if (assetFile != null ) File[] assetsDirectories = assetFile.listFiles();
GenerateBundleConfigStep.java,Optimizations.Builder optimizations = Optimizations.newBuilder();,if (Optimizations != null ) Optimizations.Builder optimizations = Optimizations.newBuilder();
GenerateBundleConfigStep.java,SplitsConfig.Builder splitsConfig = SplitsConfig.newBuilder();,if (SplitsConfig != null ) SplitsConfig.Builder splitsConfig = SplitsConfig.newBuilder();
GenerateNativeStep.java,NativeLibraries.Builder builder = NativeLibraries.newBuilder();,if (NativeLibraries != null ) NativeLibraries.Builder builder = NativeLibraries.newBuilder();
GenerateNativeStep.java,File[] files = fileInLib.listFiles();,if (fileInLib != null ) File[] files = fileInLib.listFiles();
QueryTargetsMacroExpanderTest.java,dep = graphBuilder.requireRule(depNode.getBuildTarget());,if (graphBuilder != null ) dep = graphBuilder.requireRule(depNode.getBuildTarget());
DefaultDepsAwareWorker.java,CompletableFuture<T> depResult = dep.getFuture();,if (dep != null ) CompletableFuture<T> depResult = dep.getFuture();
DefaultDepsAwareWorkerWithLocalStack.java,CompletableFuture<T> depResult = dep.getFuture();,if (dep != null ) CompletableFuture<T> depResult = dep.getFuture();
DefaultProjectFilesystemFactory.java,Path cellBuckOut = embeddedCellBuckOutInfo.get().getCellBuckOut();,if (embeddedCellBuckOutInfo != null ) Path cellBuckOut = embeddedCellBuckOutInfo.get().getCellBuckOut();
DefaultProjectFilesystemFactory.java,EmbeddedCellBuckOutInfo embeddedCellBuckOutInfo = embeddedCellBuckOutInfoOptional.get();,if (embeddedCellBuckOutInfoOptional != null ) EmbeddedCellBuckOutInfo embeddedCellBuckOutInfo = embeddedCellBuckOutInfoOptional.get();
Main.java,MetadataProvider metadataProvider = MetadataProviderFactory.emptyMetadataProvider();,if (MetadataProviderFactory != null ) MetadataProvider metadataProvider = MetadataProviderFactory.emptyMetadataProvider();
BuildTargetParserTest.java,fullyQualifiedParser = BuildTargetPatternParser.fullyQualified();,if (BuildTargetPatternParser != null ) fullyQualifiedParser = BuildTargetPatternParser.fullyQualified();
Main.java,Optional<TraceInfoProvider> traceInfoProvider = Optional.empty();,if (Optional != null ) Optional<TraceInfoProvider> traceInfoProvider = Optional.empty();
GrpcRemoteExecutionService.java,String traceId = traceInfoProvider.get().getTraceId();,if (traceInfoProvider != null ) String traceId = traceInfoProvider.get().getTraceId();
DefaultConstructorArgMarshaller.java,Object argumentValue = configuredAttributes.get(info.getName());,if (configuredAttributes != null ) Object argumentValue = configuredAttributes.get(info.getName());
DefaultConstructorArgMarshaller.java,String attributeName = rawAttribute.getKey();,if (rawAttribute != null ) String attributeName = rawAttribute.getKey();
DefaultConstructorArgMarshaller.java,Object rawValue = rawAttribute.getValue();,if (rawAttribute != null ) Object rawValue = rawAttribute.getValue();
DefaultConstructorArgMarshaller.java,Object argumentValue = attributes.get(info.getName());,if (attributes != null ) Object argumentValue = attributes.get(info.getName());
DefaultRawTargetNodeFactoryTest.java,RawAttributes attributes = rawTargetNode.getAttributes();,if (rawTargetNode != null ) RawAttributes attributes = rawTargetNode.getAttributes();
AbstractConsoleEventBusListener.java,Optional<BuckEventExternalInterface> start = Optional.empty();,if (Optional != null ) Optional<BuckEventExternalInterface> start = Optional.empty();
AbstractConsoleEventBusListener.java,Optional<BuckEventExternalInterface> end = Optional.empty();,if (Optional != null ) Optional<BuckEventExternalInterface> end = Optional.empty();
AbstractConsoleEventBusListener.java,Optional<BuckEventExternalInterface> candidate = pair.getStart();,if (pair != null ) Optional<BuckEventExternalInterface> candidate = pair.getStart();
AbstractConsoleEventBusListener.java,end = Optional.empty();,if (Optional != null ) end = Optional.empty();
DoctorReportHelper.java,httpResponse = httpClient.newCall(httpRequest).execute();,if (httpClient != null ) httpResponse = httpClient.newCall(httpRequest).execute();
TargetGraphHashing.java,HashCode targetRuleHashCode = node.getRawInputsHashCode();,if (node != null ) HashCode targetRuleHashCode = node.getRawInputsHashCode();
MacroHandler.java,MacroExpander expander = getExpander(entry.getKey());,if (getExpander(entry != null ) MacroExpander expander = getExpander(entry.getKey());
MacroHandler.java,MacroExpander expander = getExpander(matchResult.getMacroType());,if (getExpander(matchResult != null ) MacroExpander expander = getExpander(matchResult.getMacroType());
WorkerMacroArg.java,ImmutableList<BuildTarget> targets = targetsBuilder.build();,if (targetsBuilder != null ) ImmutableList<BuildTarget> targets = targetsBuilder.build();
WorkerMacroArg.java,Tool exe = workerTool.getTool();,if (workerTool != null ) Tool exe = workerTool.getTool();
LocationMacroExpanderTest.java,Path absolutePath = pathResolver.getAbsolutePath(javaBinary.getSourcePathToOutput());,if (pathResolver != null ) Path absolutePath = pathResolver.getAbsolutePath(javaBinary.getSourcePathToOutput());
MacroHandlerTest.java,MacroHandler handler = new MacroHandler(ImmutableMap.of());,if (MacroHandler(ImmutableMap != null ) MacroHandler handler = new MacroHandler(ImmutableMap.of());
MacroHandlerTest.java,MacroHandler handler = new MacroHandler(ImmutableMap.of());,if (MacroHandler(ImmutableMap != null ) MacroHandler handler = new MacroHandler(ImmutableMap.of());
OutputToFileExpanderUtilsTest.java,File root = tmp.newFolder();,if (tmp != null ) File root = tmp.newFolder();
OutputToFileExpanderUtilsTest.java,ProjectFilesystem filesystem = TestProjectFilesystems.createProjectFilesystem(root.toPath());,if (TestProjectFilesystems != null ) ProjectFilesystem filesystem = TestProjectFilesystems.createProjectFilesystem(root.toPath());
QueryPathsMacroExpanderTest.java,BuildRule rule = graphBuilder.requireRule(node.getBuildTarget());,if (graphBuilder != null ) BuildRule rule = graphBuilder.requireRule(node.getBuildTarget());
QueryPathsMacroExpanderTest.java,ImmutableSet<Path> inputs = node.getInputs();,if (node != null ) ImmutableSet<Path> inputs = node.getInputs();
QueryOutputsMacroExpanderTest.java,expander = new QueryOutputsMacroExpander(Optional.empty());,if (QueryOutputsMacroExpander(Optional != null ) expander = new QueryOutputsMacroExpander(Optional.empty());
QueryTargetsAndOutputsMacroExpanderTest.java,expander = new QueryTargetsAndOutputsMacroExpander(Optional.empty());,if (QueryTargetsAndOutputsMacroExpander(Optional != null ) expander = new QueryTargetsAndOutputsMacroExpander(Optional.empty());
QueryTargetsAndOutputsMacroExpanderTest.java,dep = graphBuilder.requireRule(depNode.getBuildTarget());,if (graphBuilder != null ) dep = graphBuilder.requireRule(depNode.getBuildTarget());
ApplePackageDescriptionTest.java,BuildRuleParams params = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) BuildRuleParams params = TestBuildRuleParams.create();
BuckCopyPasteProcessor.java,file = file.getParent();,if (file != null ) file = file.getParent();
BuckAnnotator.java,Project project = targetExpression.getProject();,if (targetExpression != null ) Project project = targetExpression.getProject();
BuckAnnotator.java,PsiFile containingFile = targetExpression.getContainingFile();,if (targetExpression != null ) PsiFile containingFile = targetExpression.getContainingFile();
BuckAnnotator.java,Project project = targetExpression.getProject();,if (targetExpression != null ) Project project = targetExpression.getProject();
BuckAnnotator.java,PsiFile containingFile = targetExpression.getContainingFile();,if (targetExpression != null ) PsiFile containingFile = targetExpression.getContainingFile();
BuckAnnotator.java,VirtualFile sourceFile = containingFile.getVirtualFile();,if (containingFile != null ) VirtualFile sourceFile = containingFile.getVirtualFile();
BuckAnnotator.java,String text = targetExpression.getText();,if (targetExpression != null ) String text = targetExpression.getText();
BuckAnnotator.java,TextRange textRange = targetExpression.getTextRange();,if (targetExpression != null ) TextRange textRange = targetExpression.getTextRange();
BuckAnnotator.java,PsiElement parent = psiElement.getParent();,if (psiElement != null ) PsiElement parent = psiElement.getParent();
BuckAnnotator.java,Project project = loadTargetArgument.getProject();,if (loadTargetArgument != null ) Project project = loadTargetArgument.getProject();
BuckAnnotator.java,String target = BuckPsiUtils.getStringValueFromBuckString(loadTargetArgument.getString());,if (BuckPsiUtils != null ) String target = BuckPsiUtils.getStringValueFromBuckString(loadTargetArgument.getString());
BuckAnnotator.java,VirtualFile sourceFile = loadTargetArgument.getContainingFile().getVirtualFile();,if (loadTargetArgument != null ) VirtualFile sourceFile = loadTargetArgument.getContainingFile().getVirtualFile();
DependenciesOptimizer.java,BuckList buckList = value.getPrimary().getList();,if (value != null ) BuckList buckList = value.getPrimary().getList();
BuckPsiUtils.java,List<BuckPrimaryWithSuffix> values = expression.getPrimaryWithSuffixList();,if (expression != null ) List<BuckPrimaryWithSuffix> values = expression.getPrimaryWithSuffixList();
BuckPsiUtils.java,BuckPrimary buckPrimary = buckPrimaryWithSuffix.getPrimary();,if (buckPrimaryWithSuffix != null ) BuckPrimary buckPrimary = buckPrimaryWithSuffix.getPrimary();
BuckTargetCompletionContributor.java,VirtualFile childBuckFile = child.findChild(buckCell.getBuildFileName());,if (child != null ) VirtualFile childBuckFile = child.findChild(buckCell.getBuildFileName());
TargetGraphHashingTest.java,ruleKeyConfiguration = TestRuleKeyConfigurationFactory.create();,if (TestRuleKeyConfigurationFactory != null ) ruleKeyConfiguration = TestRuleKeyConfigurationFactory.create();
TargetGraphHashingTest.java,Cell cell = workspace.asCell();,if (workspace != null ) Cell cell = workspace.asCell();
TargetGraphHashingTest.java,projectFilesystem = cell.getFilesystem();,if (cell != null ) projectFilesystem = cell.getFilesystem();
RunCommand.java,String targetName = getTarget(params.getBuckConfig());,if (getTarget(params != null ) String targetName = getTarget(params.getBuckConfig());
BuckCellFinder.java,String root = pathMacroExpander.apply(cell.getRoot());,if (pathMacroExpander != null ) String root = pathMacroExpander.apply(cell.getRoot());
BuckCellFinder.java,String cellRoot = pathMacroExpander.apply(cell.getRoot());,if (pathMacroExpander != null ) String cellRoot = pathMacroExpander.apply(cell.getRoot());
BuckCellFinder.java,int cellRootLength = cellRoot.length();,if (cellRoot != null ) int cellRootLength = cellRoot.length();
BuckCellFinder.java,String buildFilename = cell.getBuildFileName();,if (cell != null ) String buildFilename = cell.getBuildFileName();
BuckCellFinder.java,parent = parent.getParentFile();,if (parent != null ) parent = parent.getParentFile();
BuckCellFinder.java,String cellRoot = pathMacroExpander.apply(cell.getRoot());,if (pathMacroExpander != null ) String cellRoot = pathMacroExpander.apply(cell.getRoot());
BuckCellFinder.java,int cellRootLength = cellRoot.length();,if (cellRoot != null ) int cellRootLength = cellRoot.length();
BuckCellFinder.java,String buildFilename = cell.getBuildFileName();,if (cell != null ) String buildFilename = cell.getBuildFileName();
BuckCellFinder.java,parent = parent.getParent();,if (parent != null ) parent = parent.getParent();
BuckTargetLocatorImpl.java,VirtualFile buckFile = packageDir.findChild(cell.getBuildfileName());,if (packageDir != null ) VirtualFile buckFile = packageDir.findChild(cell.getBuildfileName());
KotlinBuckConfig.java,kotlinc = new JarBackedReflectedKotlinc(kotlinHomeSourcePath.get());,if (JarBackedReflectedKotlinc(kotlinHomeSourcePath != null ) kotlinc = new JarBackedReflectedKotlinc(kotlinHomeSourcePath.get());
KotlinBuckConfig.java,kotlinHome = Paths.get(home).normalize();,if (Paths != null ) kotlinHome = Paths.get(home).normalize();
SuperConsoleEventBusListener.java,ImmutableList<String> lines = createRenderLinesAtTime(clock.currentTimeMillis());,if (createRenderLinesAtTime(clock != null ) ImmutableList<String> lines = createRenderLinesAtTime(clock.currentTimeMillis());
SuperConsoleEventBusListener.java,lastNumLinesPrinted = lines.size();,if (lines != null ) lastNumLinesPrinted = lines.size();
SuperConsoleEventBusListener.java,stderrDirty = console.getStdErr().isDirty();,if (console != null ) stderrDirty = console.getStdErr().isDirty();
SuperConsoleEventBusListener.java,stdoutDirty = console.getStdOut().isDirty();,if (console != null ) stdoutDirty = console.getStdOut().isDirty();
SuperConsoleEventBusListener.java,int currentNumLines = lines.size();,if (lines != null ) int currentNumLines = lines.size();
SuperConsoleEventBusListenerTest.java,String beforeStderrWrite = console.getTextWrittenToStdErr();,if (console != null ) String beforeStderrWrite = console.getTextWrittenToStdErr();
BuildReport.java,failure = failure.getCause();,if (failure != null ) failure = failure.getCause();
KotlinBuckConfigTest.java,String command = kotlinBuckConfig.getPathToCompilerBinary().toString();,if (kotlinBuckConfig != null ) String command = kotlinBuckConfig.getPathToCompilerBinary().toString();
KotlinBuckConfigTest.java,String command = kotlinBuckConfig.getPathToCompilerBinary().toString();,if (kotlinBuckConfig != null ) String command = kotlinBuckConfig.getPathToCompilerBinary().toString();
KotlinBuckConfigTest.java,String command = kotlinBuckConfig.getPathToCompilerBinary().toString();,if (kotlinBuckConfig != null ) String command = kotlinBuckConfig.getPathToCompilerBinary().toString();
KotlinBuckConfigTest.java,String command = kotlinBuckConfig.getPathToCompilerBinary().toString();,if (kotlinBuckConfig != null ) String command = kotlinBuckConfig.getPathToCompilerBinary().toString();
KotlinBuckConfigTest.java,String command = kotlinBuckConfig.getPathToCompilerBinary().toString();,if (kotlinBuckConfig != null ) String command = kotlinBuckConfig.getPathToCompilerBinary().toString();
KotlinBuckConfigTest.java,Path compilerJar = kotlinBuckConfig.getPathToCompilerJar();,if (kotlinBuckConfig != null ) Path compilerJar = kotlinBuckConfig.getPathToCompilerJar();
KotlinBuckConfigTest.java,Path compilerJar = kotlinBuckConfig.getPathToCompilerJar();,if (kotlinBuckConfig != null ) Path compilerJar = kotlinBuckConfig.getPathToCompilerJar();
KotlinBuckConfigTest.java,Path compilerJar = kotlinBuckConfig.getPathToCompilerJar();,if (kotlinBuckConfig != null ) Path compilerJar = kotlinBuckConfig.getPathToCompilerJar();
KotlinBuckConfigTest.java,Path runtimeJar = kotlinBuckConfig.getPathToStdlibJar();,if (kotlinBuckConfig != null ) Path runtimeJar = kotlinBuckConfig.getPathToStdlibJar();
KotlinBuckConfigTest.java,Path runtimeJar = kotlinBuckConfig.getPathToStdlibJar();,if (kotlinBuckConfig != null ) Path runtimeJar = kotlinBuckConfig.getPathToStdlibJar();
KotlinBuckConfigTest.java,Path runtimeJar = kotlinBuckConfig.getPathToStdlibJar();,if (kotlinBuckConfig != null ) Path runtimeJar = kotlinBuckConfig.getPathToStdlibJar();
Main.java,commandSemaphoreNgClient = Optional.empty();,if (Optional != null ) commandSemaphoreNgClient = Optional.empty();
TargetGraphHashing.java,HashCode targetRuleHashCode = node.getRawInputsHashCode();,if (node != null ) HashCode targetRuleHashCode = node.getRawInputsHashCode();
TargetsCommand.java,Path sameFsPath = rootPath.resolve(path.toString());,if (rootPath != null ) Path sameFsPath = rootPath.resolve(path.toString());
GwtBinaryDescription.java,gwtModule = Optional.empty();,if (Optional != null ) gwtModule = Optional.empty();
GwtBinaryDescription.java,ImmutableSortedSet<BuildRule> deps = depsBuilder.build();,if (depsBuilder != null ) ImmutableSortedSet<BuildRule> deps = depsBuilder.build();
BuckExecutableSettingsProvider.java,executable = buckExecutableDetector.getBuckExecutable();,if (buckExecutableDetector != null ) executable = buckExecutableDetector.getBuckExecutable();
BuckExecutableSettingsProvider.java,executable = buckExecutableDetector.getAdbExecutable();,if (buckExecutableDetector != null ) executable = buckExecutableDetector.getAdbExecutable();
BuckBuildManager.java,String exec = BuckProjectSettingsProvider.getInstance(project).resolveBuckExecutable();,if (BuckProjectSettingsProvider != null ) String exec = BuckProjectSettingsProvider.getInstance(project).resolveBuckExecutable();
BuckWSServerPortUtils.java,String exec = BuckProjectSettingsProvider.getInstance(project).resolveBuckExecutable();,if (BuckProjectSettingsProvider != null ) String exec = BuckProjectSettingsProvider.getInstance(project).resolveBuckExecutable();
TestProgramRunner.java,String exec = BuckProjectSettingsProvider.getInstance(project).resolveBuckExecutable();,if (BuckProjectSettingsProvider != null ) String exec = BuckProjectSettingsProvider.getInstance(project).resolveBuckExecutable();
BuckProjectSettingsProvider.java,executable = buckExecutableDetector.getBuckExecutable();,if (buckExecutableDetector != null ) executable = buckExecutableDetector.getBuckExecutable();
BuckProjectSettingsProvider.java,executable = buckExecutableDetector.getAdbExecutable();,if (buckExecutableDetector != null ) executable = buckExecutableDetector.getAdbExecutable();
NativeLibraryMergeEnhancer.java,UnflavoredBuildTarget baseUnflavored = baseBuildTarget.getUnflavoredBuildTarget();,if (baseBuildTarget != null ) UnflavoredBuildTarget baseUnflavored = baseBuildTarget.getUnflavoredBuildTarget();
FilesystemBackedBuildFileTree.java,Path parent = filePath.getParent();,if (filePath != null ) Path parent = filePath.getParent();
FilesystemBackedBuildFileTree.java,Path sameFsBuckCache = projectFilesystem.getBuckPaths().getCacheDir();,if (projectFilesystem != null ) Path sameFsBuckCache = projectFilesystem.getBuckPaths().getCacheDir();
LocalCacheStorage.java,Path weakFingerprintCachePath = localCachePath.resolve(weakFingerprint.toString());,if (localCachePath != null ) Path weakFingerprintCachePath = localCachePath.resolve(weakFingerprint.toString());
ThrowingPackageBoundaryChecker.java,Path basePath = target.getBasePath();,if (target != null ) Path basePath = target.getBasePath();
JsonObjectHashing.java,List<Object> elements = selectorList.getElements();,if (selectorList != null ) List<Object> elements = selectorList.getElements();
ShBinary.java,ImmutableList<String> cellsNames = cellsNamesBuilder.build();,if (cellsNamesBuilder != null ) ImmutableList<String> cellsNames = cellsNamesBuilder.build();
ShBinary.java,ImmutableList<String> cellsPathsStrings = cellsPathsStringsBuilder.build();,if (cellsPathsStringsBuilder != null ) ImmutableList<String> cellsPathsStrings = cellsPathsStringsBuilder.build();
ShBinaryRuleIntegrationTest.java,String expectedPlatform = executionEnvironment.getPlatform().getPrintableName();,if (executionEnvironment != null ) String expectedPlatform = executionEnvironment.getPlatform().getPrintableName();
CxxLibraryDescriptionTest.java,TargetGraph targetGraph = TargetGraphFactory.newInstance(libBuilder.build());,if (TargetGraphFactory != null ) TargetGraph targetGraph = TargetGraphFactory.newInstance(libBuilder.build());
BaseIjModuleRule.java,Path abiAnnotationOutputPath = abiAnnotationOutput.get();,if (abiAnnotationOutput != null ) Path abiAnnotationOutputPath = abiAnnotationOutput.get();
DefaultIjModuleFactoryResolver.java,Optional<BuildRule> buildRule = graphBuilder.getRuleOptional(targetNode.getBuildTarget());,if (graphBuilder != null ) Optional<BuildRule> buildRule = graphBuilder.getRuleOptional(targetNode.getBuildTarget());
BuckTargetLocatorImpl.java,packageDir = packageDir.getParent();,if (packageDir != null ) packageDir = packageDir.getParent();
BuckTargetLocatorImpl.java,rulePiece = normalizedPath.getFileName().toString();,if (normalizedPath != null ) rulePiece = normalizedPath.getFileName().toString();
BuckTargetLocatorImpl.java,packageDir = packageDir.getParent();,if (packageDir != null ) packageDir = packageDir.getParent();
MoreAtomics.java,long current = atomicValue.get();,if (atomicValue != null ) long current = atomicValue.get();
DaemonLifecycleManagerTest.java,PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();,if (BuckPluginManagerFactory != null ) PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();
AbstractBuildFileSpec.java,long walkStartTimeNanos = System.nanoTime();,if (System != null ) long walkStartTimeNanos = System.nanoTime();
GroovyBuckConfig.java,groovyHomePath = path.get();,if (path != null ) groovyHomePath = path.get();
BuildFileManifestObjectConverter.java,JsonParser targetsParser = targetsNode.traverse();,if (targetsNode != null ) JsonParser targetsParser = targetsNode.traverse();
BuildFileManifestObjectConverter.java,JsonParser includesParser = includesNode.traverse();,if (includesNode != null ) JsonParser includesParser = includesNode.traverse();
BuildFileManifestObjectConverter.java,JsonParser configsParser = configsNode.traverse();,if (configsNode != null ) JsonParser configsParser = configsNode.traverse();
BuildFileManifestObjectConverter.java,JsonParser globSpecIncludeParser = globSpecIncludeNode.traverse();,if (globSpecIncludeNode != null ) JsonParser globSpecIncludeParser = globSpecIncludeNode.traverse();
BuildFileManifestObjectConverter.java,JsonParser globSpecExcludeParser = globSpecExcludeNode.traverse();,if (globSpecExcludeNode != null ) JsonParser globSpecExcludeParser = globSpecExcludeNode.traverse();
BuildFileManifestObjectConverter.java,JsonParser globSpecFilePathsParser = globSpecFilePathsNode.traverse();,if (globSpecFilePathsNode != null ) JsonParser globSpecFilePathsParser = globSpecFilePathsNode.traverse();
BuildFileManifestObjectConverter.java,TreeNode treeNode = jsonParser.readValueAsTree();,if (jsonParser != null ) TreeNode treeNode = jsonParser.readValueAsTree();
BuildFileManifestObjectConverterTest.java,ImmutableList<GlobSpecWithResult> globSpecs = globSpecBuilder.build();,if (globSpecBuilder != null ) ImmutableList<GlobSpecWithResult> globSpecs = globSpecBuilder.build();
SkylarkNestedSetSerializer.java,Collection<Object> objects = skylarkNestedSet.toCollection();,if (skylarkNestedSet != null ) Collection<Object> objects = skylarkNestedSet.toCollection();
FileTreeBuilder.java,byte[] data = dataSupplier.get();,if (dataSupplier != null ) byte[] data = dataSupplier.get();
FileTreeBuilder.java,Protocol.Digest child = super.build();,if (super != null ) Protocol.Digest child = super.build();
ModernBuildRuleRemoteExecutionHelper.java,"ImmutableList<String> command = getBuilderCommand(projectRoot, hash.toString());","if (hash != null ) ImmutableList<String> command = getBuilderCommand(projectRoot, hash.toString());"
ModernBuildRuleRemoteExecutionHelper.java,Path resolved = pathResolver.getAbsolutePath(inputSourcePath).normalize();,if (pathResolver != null ) Path resolved = pathResolver.getAbsolutePath(inputSourcePath).normalize();
FileInputsAdderTest.java,Path root = tmp.getRoot();,if (tmp != null ) Path root = tmp.getRoot();
ModernBuildRuleRemoteExecutionHelper.java,this.classPath = prepareClassPath(BuckClasspath.getClasspath());,if (prepareClassPath(BuckClasspath != null ) this.classPath = prepareClassPath(BuckClasspath.getClasspath());
ModernBuildRuleRemoteExecutionHelper.java,this.bootstrapClassPath = prepareClassPath(BuckClasspath.getBootstrapClasspath());,if (prepareClassPath(BuckClasspath != null ) this.bootstrapClassPath = prepareClassPath(BuckClasspath.getBootstrapClasspath());
ModernBuildRuleRemoteExecutionHelper.java,pluginFiles = ImmutableMap.of();,if (ImmutableMap != null ) pluginFiles = ImmutableMap.of();
ModernBuildRuleRemoteExecutionHelper.java,Path path = entry.getKey();,if (entry != null ) Path path = entry.getKey();
InputsVisitor.java,CustomFieldInputs<T> customInputs = (CustomFieldInputs<T>) inputsTag.get();,if (inputsTag != null ) CustomFieldInputs<T> customInputs = (CustomFieldInputs<T>) inputsTag.get();
RemoteExecutionStrategy.java,ListeningExecutorService service = executorService.orElse(strategyContext.getExecutorService());,if (executorService != null ) ListeningExecutorService service = executorService.orElse(strategyContext.getExecutorService());
HybridLocalStrategy.java,Job job = pendingQueue.poll();,if (pendingQueue != null ) Job job = pendingQueue.poll();
RemoteExecutionStrategy.java,ListeningExecutorService service = executorService.orElse(strategyContext.getExecutorService());,if (executorService != null ) ListeningExecutorService service = executorService.orElse(strategyContext.getExecutorService());
RobolectricTestDescription.java,ImmutableList<String> vmArgs = args.getVmArgs();,if (args != null ) ImmutableList<String> vmArgs = args.getVmArgs();
BundledExternalProcessLauncher.java,classPath = BuckClasspath.getBuckClasspathFromEnvVarOrThrow();,if (BuckClasspath != null ) classPath = BuckClasspath.getBuckClasspathFromEnvVarOrThrow();
ExternalStepExecutorMain.java,int messageId = messageCounter.getAndIncrement();,if (messageCounter != null ) int messageId = messageCounter.getAndIncrement();
Main.java,ImmutableSet<Path> overridesToIgnore = config.getWarnOnConfigFileOverridesIgnoredFiles();,if (config != null ) ImmutableSet<Path> overridesToIgnore = config.getWarnOnConfigFileOverridesIgnoredFiles();
RemoteExecutionStrategy.java,BuildTarget buildTarget = rule.getBuildTarget();,if (rule != null ) BuildTarget buildTarget = rule.getBuildTarget();
GrpcRemoteExecutionService.java,Operation operation = future.get();,if (future != null ) Operation operation = future.get();
GrpcRemoteExecutionService.java,ByteString stderrRaw = actionResult.getStderrRaw();,if (actionResult != null ) ByteString stderrRaw = actionResult.getStderrRaw();
GrpcRemoteExecutionServiceImpl.java,BatchUpdateBlobsResponse.Builder responseBuilder = BatchUpdateBlobsResponse.newBuilder();,if (BatchUpdateBlobsResponse != null ) BatchUpdateBlobsResponse.Builder responseBuilder = BatchUpdateBlobsResponse.newBuilder();
GrpcRemoteExecutionServiceImpl.java,Builder statusBuilder = com.google.rpc.Status.newBuilder();,if (com != null ) Builder statusBuilder = com.google.rpc.Status.newBuilder();
GrpcRemoteExecutionServiceImpl.java,ParsedReadResource parsedResource = parseResourceName(request.getResourceName());,if (parseResourceName(request != null ) ParsedReadResource parsedResource = parseResourceName(request.getResourceName());
IsolatedExecutionStrategy.java,this.hasher = executionStrategy.getProtocol().getHashFunction();,if (executionStrategy != null ) this.hasher = executionStrategy.getProtocol().getHashFunction();
IsolatedExecutionStrategy.java,Buildable original = converted.getBuildable();,if (converted != null ) Buildable original = converted.getBuildable();
RemoteExecution.java,this.classPath = prepareClassPath(BuckClasspath.getClasspath());,if (prepareClassPath(BuckClasspath != null ) this.classPath = prepareClassPath(BuckClasspath.getClasspath());
RemoteExecution.java,this.bootstrapClassPath = prepareClassPath(BuckClasspath.getBootstrapClasspath());,if (prepareClassPath(BuckClasspath != null ) this.bootstrapClassPath = prepareClassPath(BuckClasspath.getBootstrapClasspath());
RemoteExecution.java,pluginFiles = ImmutableMap.of();,if (ImmutableMap != null ) pluginFiles = ImmutableMap.of();
RemoteExecution.java,String rootString = projectRoot.toString();,if (projectRoot != null ) String rootString = projectRoot.toString();
RemoteExecution.java,Path path = entry.getKey();,if (entry != null ) Path path = entry.getKey();
ReconstructingStrategy.java,Buildable original = converted.getBuildable();,if (converted != null ) Buildable original = converted.getBuildable();
CachingBuildRuleBuilder.java,long start = System.nanoTime();,if (System != null ) long start = System.nanoTime();
CachingBuildRuleBuilder.java,long end = System.nanoTime();,if (System != null ) long end = System.nanoTime();
ReconstructingStrategy.java,Buildable original = converted.getBuildable();,if (converted != null ) Buildable original = converted.getBuildable();
CachingBuildRuleBuilder.java,long start = System.currentTimeMillis();,if (System != null ) long start = System.currentTimeMillis();
CachingBuildEngineTest.java,Object firstState = buildRule.getBuildOutputInitializer().getBuildOutput();,if (buildRule != null ) Object firstState = buildRule.getBuildOutputInitializer().getBuildOutput();
CachingBuildEngineTest.java,Object secondState = buildRule.getBuildOutputInitializer().getBuildOutput();,if (buildRule != null ) Object secondState = buildRule.getBuildOutputInitializer().getBuildOutput();
CachingBuildEngineTest.java,Object firstState = buildRule.getBuildOutputInitializer().getBuildOutput();,if (buildRule != null ) Object firstState = buildRule.getBuildOutputInitializer().getBuildOutput();
CachingBuildEngineTest.java,Object secondState = buildRule.getBuildOutputInitializer().getBuildOutput();,if (buildRule != null ) Object secondState = buildRule.getBuildOutputInitializer().getBuildOutput();
CachingBuildEngineTest.java,Object firstState = buildRule.getBuildOutputInitializer().getBuildOutput();,if (buildRule != null ) Object firstState = buildRule.getBuildOutputInitializer().getBuildOutput();
CachingBuildEngineTest.java,Object secondState = buildRule.getBuildOutputInitializer().getBuildOutput();,if (buildRule != null ) Object secondState = buildRule.getBuildOutputInitializer().getBuildOutput();
CachingBuildEngineTest.java,Object firstState = buildRule.getBuildOutputInitializer().getBuildOutput();,if (buildRule != null ) Object firstState = buildRule.getBuildOutputInitializer().getBuildOutput();
CachingBuildEngineTest.java,Object secondState = buildRule.getBuildOutputInitializer().getBuildOutput();,if (buildRule != null ) Object secondState = buildRule.getBuildOutputInitializer().getBuildOutput();
CachingBuildEngineTest.java,Object firstState = buildRule.getBuildOutputInitializer().getBuildOutput();,if (buildRule != null ) Object firstState = buildRule.getBuildOutputInitializer().getBuildOutput();
CachingBuildEngineTest.java,Object secondState = buildRule.getBuildOutputInitializer().getBuildOutput();,if (buildRule != null ) Object secondState = buildRule.getBuildOutputInitializer().getBuildOutput();
CachingBuildEngineTest.java,Object firstState = buildRule.getBuildOutputInitializer().getBuildOutput();,if (buildRule != null ) Object firstState = buildRule.getBuildOutputInitializer().getBuildOutput();
CachingBuildEngineTest.java,Object secondState = buildRule.getBuildOutputInitializer().getBuildOutput();,if (buildRule != null ) Object secondState = buildRule.getBuildOutputInitializer().getBuildOutput();
CachingBuildEngineTest.java,Object firstState = buildRule.getBuildOutputInitializer().getBuildOutput();,if (buildRule != null ) Object firstState = buildRule.getBuildOutputInitializer().getBuildOutput();
CachingBuildEngineTest.java,Object secondState = buildRule.getBuildOutputInitializer().getBuildOutput();,if (buildRule != null ) Object secondState = buildRule.getBuildOutputInitializer().getBuildOutput();
CachingBuildEngineTest.java,Object firstState = buildRule.getBuildOutputInitializer().getBuildOutput();,if (buildRule != null ) Object firstState = buildRule.getBuildOutputInitializer().getBuildOutput();
CachingBuildEngineTest.java,Object secondState = buildRule.getBuildOutputInitializer().getBuildOutput();,if (buildRule != null ) Object secondState = buildRule.getBuildOutputInitializer().getBuildOutput();
CachingBuildEngineTest.java,Object firstState = buildRule.getBuildOutputInitializer().getBuildOutput();,if (buildRule != null ) Object firstState = buildRule.getBuildOutputInitializer().getBuildOutput();
CachingBuildEngineTest.java,Object secondState = buildRule.getBuildOutputInitializer().getBuildOutput();,if (buildRule != null ) Object secondState = buildRule.getBuildOutputInitializer().getBuildOutput();
CachingBuildEngineTest.java,Object firstState = buildRule.getBuildOutputInitializer().getBuildOutput();,if (buildRule != null ) Object firstState = buildRule.getBuildOutputInitializer().getBuildOutput();
CachingBuildEngineTest.java,Object secondState = buildRule.getBuildOutputInitializer().getBuildOutput();,if (buildRule != null ) Object secondState = buildRule.getBuildOutputInitializer().getBuildOutput();
CachingBuildEngineTest.java,Object firstState = buildRule.getBuildOutputInitializer().getBuildOutput();,if (buildRule != null ) Object firstState = buildRule.getBuildOutputInitializer().getBuildOutput();
CachingBuildEngineTest.java,Object secondState = buildRule.getBuildOutputInitializer().getBuildOutput();,if (buildRule != null ) Object secondState = buildRule.getBuildOutputInitializer().getBuildOutput();
CachingBuildEngineTest.java,lastSuccessType = result.getSuccess();,if (result != null ) lastSuccessType = result.getSuccess();
ConstructorArgMarshaller.java,Object argumentValue = attributes.get(info.getName());,if (attributes != null ) Object argumentValue = attributes.get(info.getName());
ConstructorArgMarshaller.java,String attributeName = rawAttribute.getKey();,if (rawAttribute != null ) String attributeName = rawAttribute.getKey();
ConstructorArgMarshaller.java,Object rawValue = rawAttribute.getValue();,if (rawAttribute != null ) Object rawValue = rawAttribute.getValue();
ConstructorArgMarshaller.java,coercer = argumentInfo.getTypeCoercer();,if (argumentInfo != null ) coercer = argumentInfo.getTypeCoercer();
SkylarkProjectBuildFileParserTest.java,ImmutableList<String> includes = buildFileManifest.getIncludes();,if (buildFileManifest != null ) ImmutableList<String> includes = buildFileManifest.getIncludes();
BuckSettingsUI.java,Project project = optionsProvider.getProject();,if (optionsProvider != null ) Project project = optionsProvider.getProject();
BuckSettingsUI.java,Project project = optionsProvider.getProject();,if (optionsProvider != null ) Project project = optionsProvider.getProject();
BuckProjectSettingsProvider.java,this.state.cells = builder.build();,if (builder != null ) this.state.cells = builder.build();
RawTargetNodeToTargetNodeFactoryTest.java,Cell cell = new TestCellBuilder().build();,if (TestCellBuilder() != null ) Cell cell = new TestCellBuilder().build();
BuckAnnotator.java,VirtualFile sourceFile = targetExpression.getContainingFile().getVirtualFile();,if (targetExpression != null ) VirtualFile sourceFile = targetExpression.getContainingFile().getVirtualFile();
TargetNodeFactory.java,ImmutableSet<Path> paths = pathsBuilder.build();,if (pathsBuilder != null ) ImmutableSet<Path> paths = pathsBuilder.build();
LocalCacheStorageTest.java,"HashCode strongFingerprint = Fingerprinter.getStrongFingerprint(filesystem, ImmutableList.of());","if (ImmutableList != null ) HashCode strongFingerprint = Fingerprinter.getStrongFingerprint(filesystem, ImmutableList.of());"
LocalCacheStorageTest.java,"HashCode strongFingerprint = Fingerprinter.getStrongFingerprint(filesystem, ImmutableList.of());","if (ImmutableList != null ) HashCode strongFingerprint = Fingerprinter.getStrongFingerprint(filesystem, ImmutableList.of());"
LocalCacheStorage.java,Path cachePath = parserCacheConfig.getDirCacheLocation().get();,if (parserCacheConfig != null ) Path cachePath = parserCacheConfig.getDirCacheLocation().get();
LocalCacheStorage.java,Path weakFingerprintCachePath = localCachePath.resolve(weakFingerprint.toString());,if (localCachePath != null ) Path weakFingerprintCachePath = localCachePath.resolve(weakFingerprint.toString());
RawTargetNodeToTargetNodeFactoryTest.java,Cell cell = new TestCellBuilder().build();,if (TestCellBuilder() != null ) Cell cell = new TestCellBuilder().build();
FakeProjectFilesystem.java,Path subPath = iterator.next();,if (iterator != null ) Path subPath = iterator.next();
FakeProjectFilesystem.java,Path subPath = iterator.next();,if (iterator != null ) Path subPath = iterator.next();
RunSelectedTestAction.java,psiClass = method.getContainingClass();,if (method != null ) psiClass = method.getContainingClass();
RunSelectedTestAction.java,final Project project = event.getProject();,if (event != null ) final Project project = event.getProject();
RunSelectedTestAction.java,Editor editor = FileEditorManager.getInstance(project).getSelectedTextEditor();,if (FileEditorManager != null ) Editor editor = FileEditorManager.getInstance(project).getSelectedTextEditor();
RunSelectedTestAction.java,final Document document = editor.getDocument();,if (editor != null ) final Document document = editor.getDocument();
RunSelectedTestAction.java,Optional<String> testSelectors = Optional.empty();,if (Optional != null ) Optional<String> testSelectors = Optional.empty();
RunSelectedTestAction.java,"name = psiClass.getName() + ""#"" + method.getName();","if (method != null ) name = psiClass.getName() + ""#"" + method.getName();"
RunSelectedTestAction.java,name = element.getContainingFile().getName();,if (element != null ) name = element.getContainingFile().getName();
RunSelectedTestAction.java,testSelectors = Optional.of(psiClass.getQualifiedName());,if (Optional != null ) testSelectors = Optional.of(psiClass.getQualifiedName());
RunSelectedTestAction.java,executor = DefaultDebugExecutor.getDebugExecutorInstance();,if (DefaultDebugExecutor != null ) executor = DefaultDebugExecutor.getDebugExecutorInstance();
SelectedTestRunLineMarkerContributor.java,PsiElement parent = psiElement.getParent();,if (psiElement != null ) PsiElement parent = psiElement.getParent();
SelectedTestRunLineMarkerContributor.java,PsiElement parent = psiElement.getParent();,if (psiElement != null ) PsiElement parent = psiElement.getParent();
SelectedTestRunLineMarkerContributor.java,PsiAnnotation[] annotations = method.getModifierList().getAnnotations();,if (method != null ) PsiAnnotation[] annotations = method.getModifierList().getAnnotations();
SelectedTestRunLineMarkerContributor.java,Project project = method.getProject();,if (method != null ) Project project = method.getProject();
SelectedTestRunLineMarkerContributor.java,VirtualFile file = method.getContainingFile().getVirtualFile();,if (method != null ) VirtualFile file = method.getContainingFile().getVirtualFile();
TestConfigurationEditor.java,configuration.data.target = mTarget.getText().trim();,if (mTarget != null ) configuration.data.target = mTarget.getText().trim();
CachingBuildRuleBuilder.java,long start = System.currentTimeMillis();,if (System != null ) long start = System.currentTimeMillis();
CachingBuildRuleBuilder.java,long start = System.nanoTime();,if (System != null ) long start = System.nanoTime();
CachingBuildRuleBuilder.java,long end = System.nanoTime();,if (System != null ) long end = System.nanoTime();
ReconstructingStrategy.java,Buildable original = converted.getBuildable();,if (converted != null ) Buildable original = converted.getBuildable();
LocalCacheStorage.java,Stopwatch timer = Stopwatch.createStarted();,if (Stopwatch != null ) Stopwatch timer = Stopwatch.createStarted();
LocalCacheStorage.java,Stopwatch timer = Stopwatch.createStarted();,if (Stopwatch != null ) Stopwatch timer = Stopwatch.createStarted();
LocalCacheStorage.java,Path weakFingerprintCachePath = localCachePath.resolve(weakFingerprint.toString());,if (localCachePath != null ) Path weakFingerprintCachePath = localCachePath.resolve(weakFingerprint.toString());
BuckGotoProvider.java,Project project = editor.getProject();,if (editor != null ) Project project = editor.getProject();
ParserCacheTest.java,FakeBuckConfig.Builder builder = FakeBuckConfig.builder();,if (FakeBuckConfig != null ) FakeBuckConfig.Builder builder = FakeBuckConfig.builder();
ParserCache.java,this.config = buckConfig.getConfig();,if (buckConfig != null ) this.config = buckConfig.getConfig();
CachingProjectBuildFileParserDecoratorTest.java,buckEventBus = BuckEventBusForTests.newInstance();,if (BuckEventBusForTests != null ) buckEventBus = BuckEventBusForTests.newInstance();
HybridCacheStorageTest.java,storedValues = ImmutableList.of();,if (ImmutableList != null ) storedValues = ImmutableList.of();
ApkInstallStep.java,AndroidDevicesHelper adbHelper = context.getAndroidDevicesHelper().get();,if (context != null ) AndroidDevicesHelper adbHelper = context.getAndroidDevicesHelper().get();
DirArtifactCacheTest.java,Path cacheDir = tmpDir.newFolder();,if (tmpDir != null ) Path cacheDir = tmpDir.newFolder();
DirArtifactCacheTest.java,Path cacheDir = tmpDir.newFolder();,if (tmpDir != null ) Path cacheDir = tmpDir.newFolder();
DirArtifactCacheTest.java,Path cacheDir = tmpDir.newFolder();,if (tmpDir != null ) Path cacheDir = tmpDir.newFolder();
DirArtifactCacheTest.java,Path cacheDir = tmpDir.newFolder();,if (tmpDir != null ) Path cacheDir = tmpDir.newFolder();
DirArtifactCacheTest.java,Path cacheDir = tmpDir.newFolder();,if (tmpDir != null ) Path cacheDir = tmpDir.newFolder();
DirArtifactCacheTest.java,Path cacheDir = tmpDir.newFolder();,if (tmpDir != null ) Path cacheDir = tmpDir.newFolder();
DirArtifactCacheTest.java,Path cacheDir = tmpDir.newFolder();,if (tmpDir != null ) Path cacheDir = tmpDir.newFolder();
DirArtifactCacheTest.java,Path cacheDir = tmpDir.newFolder();,if (tmpDir != null ) Path cacheDir = tmpDir.newFolder();
DirArtifactCacheTest.java,Path cacheDir = tmpDir.newFolder();,if (tmpDir != null ) Path cacheDir = tmpDir.newFolder();
DirArtifactCacheTest.java,Path cacheDir = tmpDir.newFolder();,if (tmpDir != null ) Path cacheDir = tmpDir.newFolder();
DirArtifactCacheTest.java,Path cacheDir = tmpDir.newFolder();,if (tmpDir != null ) Path cacheDir = tmpDir.newFolder();
DirArtifactCacheTest.java,Path cacheDir = tmpDir.newFolder();,if (tmpDir != null ) Path cacheDir = tmpDir.newFolder();
DirArtifactCacheTest.java,Path cacheDir = tmpDir.newFolder();,if (tmpDir != null ) Path cacheDir = tmpDir.newFolder();
DirArtifactCacheTest.java,Path cacheDir = tmpDir.newFolder();,if (tmpDir != null ) Path cacheDir = tmpDir.newFolder();
DirArtifactCacheTest.java,Path cacheDir = tmpDir.newFolder();,if (tmpDir != null ) Path cacheDir = tmpDir.newFolder();
DirArtifactCacheTest.java,Path cacheDir = tmpDir.newFolder();,if (tmpDir != null ) Path cacheDir = tmpDir.newFolder();
DirArtifactCacheTest.java,Path cacheDir = tmpDir.newFolder();,if (tmpDir != null ) Path cacheDir = tmpDir.newFolder();
ZipFileDescription.java,ImmutableSortedSet<SourcePath> zipSources = args.getZipSrcs();,if (args != null ) ImmutableSortedSet<SourcePath> zipSources = args.getZipSrcs();
SourcePathToPathResolver.java,Path absoluteBasePathParent = absoluteBasePath.getParent();,if (absoluteBasePath != null ) Path absoluteBasePathParent = absoluteBasePath.getParent();
Zip.java,CustomZipEntry zipOutEntry = new CustomZipEntry(entry.getName());,if (CustomZipEntry(entry != null ) CustomZipEntry zipOutEntry = new CustomZipEntry(entry.getName());
UnarchiveAndZipStep.java,Path generatedDirectory = filesystem.getBuckPaths().getGenDir();,if (filesystem != null ) Path generatedDirectory = filesystem.getBuckPaths().getGenDir();
UnarchiveAndZipStep.java,Path relativePath = pathEntry.getKey();,if (pathEntry != null ) Path relativePath = pathEntry.getKey();
UnarchiveAndZipStep.java,Path filesystemRoot = filesystem.getRootPath();,if (filesystem != null ) Path filesystemRoot = filesystem.getRootPath();
UnarchiveAndZipStep.java,Path archiveFile = Objects.requireNonNull(pathEntry.getValue());,if (Objects != null ) Path archiveFile = Objects.requireNonNull(pathEntry.getValue());
UnarchiveAndZipStepTest.java,filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());,if (TestProjectFilesystems != null ) filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());
UnarchiveAndZipStepTest.java,"byte[] contents = ""hello world"".getBytes();","if (world"" != null ) byte[] contents = ""hello world"".getBytes();"
UnarchiveAndZipStepTest.java,Enumeration<ZipArchiveEntry> entries = zipFile.getEntries();,if (zipFile != null ) Enumeration<ZipArchiveEntry> entries = zipFile.getEntries();
UnarchiveAndZipStepTest.java,ExecutionContext context = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext context = TestExecutionContext.newInstance();
UnarchiveAndZipStepTest.java,context = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) context = TestExecutionContext.newInstance();
SourcePathToPathResolver.java,relativePathMap = relativePathMapBuilder.build();,if (relativePathMapBuilder != null ) relativePathMap = relativePathMapBuilder.build();
Zip.java,ZipEntryHolder.Builder builder = ZipEntryHolder.builder();,if (ZipEntryHolder != null ) ZipEntryHolder.Builder builder = ZipEntryHolder.builder();
UnarchiveAndZipStep.java,Path sourceFile = holder.getSourceFile().get();,if (holder != null ) Path sourceFile = holder.getSourceFile().get();
ZipRuleIntegrationTest.java,Enumeration<ZipArchiveEntry> e = zipFile.getEntries();,if (zipFile != null ) Enumeration<ZipArchiveEntry> e = zipFile.getEntries();
LegacyGlobMatcher.java,this.globPatternMatcher = Optional.empty();,if (Optional != null ) this.globPatternMatcher = Optional.empty();
LegacyGlobMatcher.java,this.pathPrefixMatcher = Optional.empty();,if (Optional != null ) this.pathPrefixMatcher = Optional.empty();
PathOrGlobMatcher.java,this.globPattern = Optional.empty();,if (Optional != null ) this.globPattern = Optional.empty();
PathOrGlobMatcher.java,this.globMatcher = Optional.empty();,if (Optional != null ) this.globMatcher = Optional.empty();
FilesystemBackedBuildFileTree.java,ImmutableSet<PathOrGlobMatcher> ignoredPaths = projectFilesystem.getIgnorePaths();,if (projectFilesystem != null ) ImmutableSet<PathOrGlobMatcher> ignoredPaths = projectFilesystem.getIgnorePaths();
DefaultProjectFilesystem.java,Path path = matcher.getPath();,if (matcher != null ) Path path = matcher.getPath();
SrcZipAwareFileBundlerTest.java,ImmutableList<Step> builtStepList = immutableStepList.build();,if (immutableStepList != null ) ImmutableList<Step> builtStepList = immutableStepList.build();
SrcZipAwareFileBundlerTest.java,filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());,if (TestProjectFilesystems != null ) filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());
SrcZipAwareFileBundlerTest.java,filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());,if (TestProjectFilesystems != null ) filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());
SrcZipAwareFileBundlerTest.java,filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());,if (TestProjectFilesystems != null ) filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());
SrcZipAwareFileBundlerTest.java,filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());,if (TestProjectFilesystems != null ) filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());
FileBundler.java,Path absoluteBasePathParent = absoluteBasePath.getParent();,if (absoluteBasePath != null ) Path absoluteBasePathParent = absoluteBasePath.getParent();
ZipFileExtractor.java,Path relativePath = pathEntry.getKey();,if (pathEntry != null ) Path relativePath = pathEntry.getKey();
ZipFileExtractor.java,Path absolutePath = Objects.requireNonNull(pathEntry.getValue());,if (Objects != null ) Path absolutePath = Objects.requireNonNull(pathEntry.getValue());
Zip.java,Path scratchDir = outputPathResolver.getTempPath();,if (outputPathResolver != null ) Path scratchDir = outputPathResolver.getTempPath();
CachingBuildRuleBuilder.java,long start = System.nanoTime();,if (System != null ) long start = System.nanoTime();
CachingBuildRuleBuilder.java,long end = System.nanoTime();,if (System != null ) long end = System.nanoTime();
ReconstructingStrategy.java,Buildable original = converted.getBuildable();,if (converted != null ) Buildable original = converted.getBuildable();
CachingBuildRuleBuilder.java,long start = System.currentTimeMillis();,if (System != null ) long start = System.currentTimeMillis();
PBXShellScriptBuildPhase.java,NSArray inputPathsArray = new NSArray(inputPaths.size());,if (NSArray(inputPaths != null ) NSArray inputPathsArray = new NSArray(inputPaths.size());
PBXShellScriptBuildPhase.java,NSArray outputPathsArray = new NSArray(outputPaths.size());,if (NSArray(outputPaths != null ) NSArray outputPathsArray = new NSArray(outputPaths.size());
GoToBuckFile.java,Editor editor = FileEditorManager.getInstance(project).getSelectedTextEditor();,if (FileEditorManager != null ) Editor editor = FileEditorManager.getInstance(project).getSelectedTextEditor();
GoToBuckFile.java,final Document document = editor.getDocument();,if (editor != null ) final Document document = editor.getDocument();
BuckGotoProvider.java,final Project project = editor.getProject();,if (editor != null ) final Project project = editor.getProject();
BuckGotoProvider.java,PsiFile sourcePsiFile = source.getContainingFile();,if (source != null ) PsiFile sourcePsiFile = source.getContainingFile();
BuckTargetLocatorImplTest.java,virtualFileManager = VirtualFileManager.getInstance();,if (VirtualFileManager != null ) virtualFileManager = VirtualFileManager.getInstance();
BuckTargetLocatorImplTest.java,VirtualFile root = getTempDir().createTempVDir();,if (getTempDir() != null ) VirtualFile root = getTempDir().createTempVDir();
BuckTargetLocatorImplTest.java,Path path = Paths.get(root.getCanonicalPath());,if (Paths != null ) Path path = Paths.get(root.getCanonicalPath());
BuckTargetLocatorImplTest.java,Path expectedPathToDir = expectedPathToFile.getParent();,if (expectedPathToFile != null ) Path expectedPathToDir = expectedPathToFile.getParent();
BuckTargetLocatorImplTest.java,VirtualFile expectedVirtualFileToDir = expectedVirtualFileToFile.getParent();,if (expectedVirtualFileToFile != null ) VirtualFile expectedVirtualFileToDir = expectedVirtualFileToFile.getParent();
BuckTargetLocatorImplTest.java,Path expectedPathToDir = expectedPathToFile.getParent();,if (expectedPathToFile != null ) Path expectedPathToDir = expectedPathToFile.getParent();
BuckTargetLocatorImplTest.java,VirtualFile expectedVirtualFileToDir = expectedVirtualFileToFile.getParent();,if (expectedVirtualFileToFile != null ) VirtualFile expectedVirtualFileToDir = expectedVirtualFileToFile.getParent();
ParallelVersionedTargetGraphBuilder.java,BuildTarget originalTarget = node.getBuildTarget();,if (node != null ) BuildTarget originalTarget = node.getBuildTarget();
ParallelVersionedTargetGraphBuilder.java,BuildTarget newTarget = node.getBuildTarget();,if (node != null ) BuildTarget newTarget = node.getBuildTarget();
ParallelVersionedTargetGraphBuilder.java,Collection<BuildTarget> versionedDeps = info.getVersionDomain().keySet();,if (info != null ) Collection<BuildTarget> versionedDeps = info.getVersionDomain().keySet();
VersionedTargetGraphBuilder.java,VersionInfo info = this.versionInfo.get(node.getBuildTarget());,if (this != null ) VersionInfo info = this.versionInfo.get(node.getBuildTarget());
VersionedTargetGraphBuilder.java,BuildTarget originalTarget = node.getBuildTarget();,if (node != null ) BuildTarget originalTarget = node.getBuildTarget();
VersionedTargetGraphBuilder.java,BuildTarget newTarget = node.getBuildTarget();,if (node != null ) BuildTarget newTarget = node.getBuildTarget();
VersionedTargetGraphBuilder.java,Collection<BuildTarget> versionedDeps = info.getVersionDomain().keySet();,if (info != null ) Collection<BuildTarget> versionedDeps = info.getVersionDomain().keySet();
VersionedTargetGraphBuilder.java,long start = System.currentTimeMillis();,if (System != null ) long start = System.currentTimeMillis();
VersionedTargetGraphBuilder.java,long end = System.currentTimeMillis();,if (System != null ) long end = System.currentTimeMillis();
BuildCommand.java,autoDistBuildMessage = config.getAutoDistributedBuildMessage();,if (config != null ) autoDistBuildMessage = config.getAutoDistributedBuildMessage();
BuildCommand.java,DistBuildConfig distBuildConfig = new DistBuildConfig(params.getBuckConfig());,if (DistBuildConfig(params != null ) DistBuildConfig distBuildConfig = new DistBuildConfig(params.getBuckConfig());
BuildCommand.java,BuildEvent.DistBuildStarted started = BuildEvent.distBuildStarted();,if (BuildEvent != null ) BuildEvent.DistBuildStarted started = BuildEvent.distBuildStarted();
BuildCommand.java,ListenableFuture<BuildJobState> asyncJobState = stateAndCells.getAsyncJobState();,if (stateAndCells != null ) ListenableFuture<BuildJobState> asyncJobState = stateAndCells.getAsyncJobState();
BuildCommand.java,DistBuildCellIndexer distBuildCellIndexer = stateAndCells.getDistBuildCellIndexer();,if (stateAndCells != null ) DistBuildCellIndexer distBuildCellIndexer = stateAndCells.getDistBuildCellIndexer();
BuildCommand.java,jobState = asyncJobState.get();,if (asyncJobState != null ) jobState = asyncJobState.get();
BuildCommand.java,StampedeId stampedeId = stampedeBuildClient.getStampedeId();,if (stampedeBuildClient != null ) StampedeId stampedeId = stampedeBuildClient.getStampedeId();
BuildCommand.java,DistributedExitCode distributedBuildExitCode = stampedeBuildClient.getDistBuildExitCode();,if (stampedeBuildClient != null ) DistributedExitCode distributedBuildExitCode = stampedeBuildClient.getDistBuildExitCode();
BuildCommand.java,AnalysisResults results = postBuildAnalysis.runAnalysis();,if (postBuildAnalysis != null ) AnalysisResults results = postBuildAnalysis.runAnalysis();
BuildCommand.java,DistBuildCellIndexer cellIndexer = new DistBuildCellIndexer(params.getCell());,if (DistBuildCellIndexer(params != null ) DistBuildCellIndexer cellIndexer = new DistBuildCellIndexer(params.getCell());
PerBuildStateFactory.java,int numParsingThreads = parserConfig.getNumParsingThreads();,if (parserConfig != null ) int numParsingThreads = parserConfig.getNumParsingThreads();
GrpcRemoteExecutionClients.java,SettableFuture<Operation> future = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<Operation> future = SettableFuture.create();
GrpcRemoteExecutionClients.java,Operation operation = future.get();,if (future != null ) Operation operation = future.get();
GrpcRemoteExecutionClients.java,ByteString stderrRaw = actionResult.getStderrRaw();,if (actionResult != null ) ByteString stderrRaw = actionResult.getStderrRaw();
TargetNodeWrapper.java,this.hashCode = targetNode.hashCode();,if (targetNode != null ) this.hashCode = targetNode.hashCode();
DefaultBuildRuleInfoProvider.java,clazz = clazz.getSuperclass();,if (clazz != null ) clazz = clazz.getSuperclass();
BuildRuleContextWithEnvironmentTest.java,toolchainProvider = new ToolchainProviderBuilder().build();,if (ToolchainProviderBuilder() != null ) toolchainProvider = new ToolchainProviderBuilder().build();
BuildRuleContextWithEnvironmentTest.java,BuildRule returnedRule = new FakeBuildRuleWithProviders(providerCollectionBuilder.build());,if (FakeBuildRuleWithProviders(providerCollectionBuilder != null ) BuildRule returnedRule = new FakeBuildRuleWithProviders(providerCollectionBuilder.build());
BuildRuleInfoProviderCollectionTest.java,"BuildRule buildRule = new FakeBuildRule(buildTarget, ImmutableSortedSet.of());","if (ImmutableSortedSet != null ) BuildRule buildRule = new FakeBuildRule(buildTarget, ImmutableSortedSet.of());"
BuildRuleInfoProviderCollectionTest.java,BuildRule buildRule = new FakeBuildRuleWithProviders(providers.build());,if (FakeBuildRuleWithProviders(providers != null ) BuildRule buildRule = new FakeBuildRuleWithProviders(providers.build());
BuildRuleInfoProviderCollectionTest.java,BuildRuleInfoProviderCollection providerCollection = buildRule.getProviderCollection();,if (buildRule != null ) BuildRuleInfoProviderCollection providerCollection = buildRule.getProviderCollection();
Memoizer.java,T t = Objects.requireNonNull(delegate.get());,if (Objects != null ) T t = Objects.requireNonNull(delegate.get());
HttpdForTests.java,localhost = getLocalhostAddress().getHostAddress();,if (getLocalhostAddress() != null ) localhost = getLocalhostAddress().getHostAddress();
DaemonicCellState.java,Path root = cell.getRoot();,if (cell != null ) Path root = cell.getRoot();
ParserCacheCommand.java,ZipEntry entry = zipis.getNextEntry();,if (zipis != null ) ZipEntry entry = zipis.getNextEntry();
ParserCacheCommand.java,state = (RemoteDaemonicParserState) ois.readObject();,if (ois != null ) state = (RemoteDaemonicParserState) ois.readObject();
ParserCacheCommand.java,Iterator<JsonNode> iterator = responseNode.elements();,if (responseNode != null ) Iterator<JsonNode> iterator = responseNode.elements();
ParserCacheCommand.java,JsonNode item = iterator.next();,if (iterator != null ) JsonNode item = iterator.next();
DaemonicParserState.java,Cell cell = state.getCell();,if (state != null ) Cell cell = state.getCell();
ActionResult.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ActionResult.java,struct.stdoutRaw = iprot.readBinary();,if (iprot != null ) struct.stdoutRaw = iprot.readBinary();
ActionResult.java,struct.stderrRaw = iprot.readBinary();,if (iprot != null ) struct.stderrRaw = iprot.readBinary();
ActionResult.java,struct.stdoutRaw = iprot.readBinary();,if (iprot != null ) struct.stdoutRaw = iprot.readBinary();
ActionResult.java,struct.stderrRaw = iprot.readBinary();,if (iprot != null ) struct.stderrRaw = iprot.readBinary();
Command.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
Digest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
Digest.java,struct.hash = iprot.readString();,if (iprot != null ) struct.hash = iprot.readString();
Digest.java,struct.hash = iprot.readString();,if (iprot != null ) struct.hash = iprot.readString();
Directory.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
DirectoryNode.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
DirectoryNode.java,struct.name = iprot.readString();,if (iprot != null ) struct.name = iprot.readString();
DirectoryNode.java,struct.name = iprot.readString();,if (iprot != null ) struct.name = iprot.readString();
EnvironmentVariable.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
EnvironmentVariable.java,struct.name = iprot.readString();,if (iprot != null ) struct.name = iprot.readString();
EnvironmentVariable.java,struct.value = iprot.readString();,if (iprot != null ) struct.value = iprot.readString();
EnvironmentVariable.java,struct.name = iprot.readString();,if (iprot != null ) struct.name = iprot.readString();
EnvironmentVariable.java,struct.value = iprot.readString();,if (iprot != null ) struct.value = iprot.readString();
FileNode.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
FileNode.java,struct.name = iprot.readString();,if (iprot != null ) struct.name = iprot.readString();
FileNode.java,struct.isExecutable = iprot.readBool();,if (iprot != null ) struct.isExecutable = iprot.readBool();
FileNode.java,struct.name = iprot.readString();,if (iprot != null ) struct.name = iprot.readString();
FileNode.java,struct.isExecutable = iprot.readBool();,if (iprot != null ) struct.isExecutable = iprot.readBool();
OutputDirectory.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
OutputDirectory.java,struct.path = iprot.readString();,if (iprot != null ) struct.path = iprot.readString();
OutputDirectory.java,struct.path = iprot.readString();,if (iprot != null ) struct.path = iprot.readString();
OutputFile.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
OutputFile.java,struct.path = iprot.readString();,if (iprot != null ) struct.path = iprot.readString();
OutputFile.java,struct.content = iprot.readBinary();,if (iprot != null ) struct.content = iprot.readBinary();
OutputFile.java,struct.isExecutable = iprot.readBool();,if (iprot != null ) struct.isExecutable = iprot.readBool();
OutputFile.java,struct.path = iprot.readString();,if (iprot != null ) struct.path = iprot.readString();
OutputFile.java,struct.content = iprot.readBinary();,if (iprot != null ) struct.content = iprot.readBinary();
OutputFile.java,struct.isExecutable = iprot.readBool();,if (iprot != null ) struct.isExecutable = iprot.readBool();
Status.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
Status.java,struct.message = iprot.readString();,if (iprot != null ) struct.message = iprot.readString();
Status.java,struct.message = iprot.readString();,if (iprot != null ) struct.message = iprot.readString();
SymlinkNode.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
SymlinkNode.java,struct.name = iprot.readString();,if (iprot != null ) struct.name = iprot.readString();
SymlinkNode.java,struct.target = iprot.readString();,if (iprot != null ) struct.target = iprot.readString();
SymlinkNode.java,struct.name = iprot.readString();,if (iprot != null ) struct.name = iprot.readString();
SymlinkNode.java,struct.target = iprot.readString();,if (iprot != null ) struct.target = iprot.readString();
Tree.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
BatchReadBlobsRequest.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
BatchReadBlobsResponse.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
BatchUpdateBlobsRequest.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
BatchUpdateBlobsResponse.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ContentAddressableStorage.java,ContextStack ctx = this.getContextStack();,if (this != null ) ContextStack ctx = this.getContextStack();
ContentAddressableStorage.java,ContextStack ctx = super.getContextStack();,if (super != null ) ContextStack ctx = super.getContextStack();
ContentAddressableStorage.java,ContextStack ctx = this.getContextStack();,if (this != null ) ContextStack ctx = this.getContextStack();
ContentAddressableStorage.java,ContextStack ctx = super.getContextStack();,if (super != null ) ContextStack ctx = super.getContextStack();
ContentAddressableStorage.java,ContextStack ctx = this.getContextStack();,if (this != null ) ContextStack ctx = this.getContextStack();
ContentAddressableStorage.java,ContextStack ctx = super.getContextStack();,if (super != null ) ContextStack ctx = super.getContextStack();
ContentAddressableStorage.java,ContextStack ctx = this.getContextStack();,if (this != null ) ContextStack ctx = this.getContextStack();
ContentAddressableStorage.java,ContextStack ctx = super.getContextStack();,if (super != null ) ContextStack ctx = super.getContextStack();
ContentAddressableStorage.java,ContextStack ctx = this.getContextStack();,if (this != null ) ContextStack ctx = this.getContextStack();
ContentAddressableStorage.java,ContextStack ctx = super.getContextStack();,if (super != null ) ContextStack ctx = super.getContextStack();
ContentAddressableStorage.java,ContextStack ctx = this.getContextStack();,if (this != null ) ContextStack ctx = this.getContextStack();
ContentAddressableStorage.java,ContextStack ctx = super.getContextStack();,if (super != null ) ContextStack ctx = super.getContextStack();
ContentAddressableStorage.java,TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());,if (TMemoryInputTransport(getFrameBuffer() != null ) TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
ContentAddressableStorage.java,TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());,if (TMemoryInputTransport(getFrameBuffer() != null ) TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
ContentAddressableStorage.java,TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());,if (TMemoryInputTransport(getFrameBuffer() != null ) TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
ContentAddressableStorage.java,TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());,if (TMemoryInputTransport(getFrameBuffer() != null ) TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
ContentAddressableStorage.java,TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());,if (TMemoryInputTransport(getFrameBuffer() != null ) TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
ContentAddressableStorage.java,TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());,if (TMemoryInputTransport(getFrameBuffer() != null ) TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
ContentAddressableStorage.java,TMessage msg = iprot.readMessageBegin();,if (iprot != null ) TMessage msg = iprot.readMessageBegin();
ContentAddressableStorage.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ContentAddressableStorage.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ContentAddressableStorage.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ContentAddressableStorage.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ContentAddressableStorage.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ContentAddressableStorage.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ContentAddressableStorage.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ContentAddressableStorage.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ContentAddressableStorage.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ContentAddressableStorage.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ContentAddressableStorage.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ContentAddressableStorage.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ContentAddressableStorageException.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ContentAddressableStorageException.java,this.message = iprot.readString();,if (iprot != null ) this.message = iprot.readString();
Digest.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
Digest.java,this.hash = iprot.readString();,if (iprot != null ) this.hash = iprot.readString();
Directory.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
DirectoryNode.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
DirectoryNode.java,this.name = iprot.readString();,if (iprot != null ) this.name = iprot.readString();
FileNode.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
FileNode.java,this.name = iprot.readString();,if (iprot != null ) this.name = iprot.readString();
FindMissingBlobsRequest.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
FindMissingBlobsResponse.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
GetTreeRequest.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
GetTreeResponse.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ReadBlobRequest.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ReadBlobResponse.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ReadBlobResponse.java,this.data = iprot.readBinary();,if (iprot != null ) this.data = iprot.readBinary();
SymlinkNode.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
SymlinkNode.java,this.name = iprot.readString();,if (iprot != null ) this.name = iprot.readString();
SymlinkNode.java,this.target = iprot.readString();,if (iprot != null ) this.target = iprot.readString();
UpdateBlobRequest.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
UpdateBlobRequest.java,this.data = iprot.readBinary();,if (iprot != null ) this.data = iprot.readBinary();
UpdateBlobResponse.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
Action.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ActionResult.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
Command.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
EnvironmentVariable.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
EnvironmentVariable.java,this.name = iprot.readString();,if (iprot != null ) this.name = iprot.readString();
EnvironmentVariable.java,this.value = iprot.readString();,if (iprot != null ) this.value = iprot.readString();
ExecuteOperation.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ExecuteOperation.java,this.done = iprot.readBool();,if (iprot != null ) this.done = iprot.readBool();
ExecuteOperationMetadata.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ExecuteRequest.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ExecuteRequestMetadata.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ExecuteResponse.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ExecutedActionMetadata.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ExecutedActionMetadata.java,this.worker = iprot.readString();,if (iprot != null ) this.worker = iprot.readString();
ExecutionEngine.java,ContextStack ctx = this.getContextStack();,if (this != null ) ContextStack ctx = this.getContextStack();
ExecutionEngine.java,ContextStack ctx = super.getContextStack();,if (super != null ) ContextStack ctx = super.getContextStack();
ExecutionEngine.java,ContextStack ctx = this.getContextStack();,if (this != null ) ContextStack ctx = this.getContextStack();
ExecutionEngine.java,ContextStack ctx = super.getContextStack();,if (super != null ) ContextStack ctx = super.getContextStack();
ExecutionEngine.java,TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());,if (TMemoryInputTransport(getFrameBuffer() != null ) TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
ExecutionEngine.java,TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());,if (TMemoryInputTransport(getFrameBuffer() != null ) TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
ExecutionEngine.java,TMessage msg = iprot.readMessageBegin();,if (iprot != null ) TMessage msg = iprot.readMessageBegin();
ExecutionEngine.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ExecutionEngine.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ExecutionEngine.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ExecutionEngine.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ExecutionEngineException.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ExecutionEngineException.java,this.message = iprot.readString();,if (iprot != null ) this.message = iprot.readString();
ExecutionPolicy.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
GetExecuteOperationMultiResponse.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
GetExecuteOperationRequest.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
LogFile.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
OutputDirectory.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
OutputDirectory.java,this.path = iprot.readString();,if (iprot != null ) this.path = iprot.readString();
OutputFile.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
OutputFile.java,this.path = iprot.readString();,if (iprot != null ) this.path = iprot.readString();
Platform.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
Property.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
Property.java,this.name = iprot.readString();,if (iprot != null ) this.name = iprot.readString();
Property.java,this.value = iprot.readString();,if (iprot != null ) this.value = iprot.readString();
ResultsCachePolicy.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
Tree.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
DefaultClientPool.java,ClientType clientFromPool = clientPool.poll();,if (clientPool != null ) ClientType clientFromPool = clientPool.poll();
DefaultClientPool.java,int clientCreationAttempt = clientCreationAttempts.incrementAndGet();,if (clientCreationAttempts != null ) int clientCreationAttempt = clientCreationAttempts.incrementAndGet();
RetryingSynchronizedThriftHelper.java,currentClient = clientSupplier.get();,if (clientSupplier != null ) currentClient = clientSupplier.get();
ThriftProtocol.java,TSerializer deserializer = new TSerializer(new TCompactProtocol.Factory());,if (TCompactProtocol != null ) TSerializer deserializer = new TSerializer(new TCompactProtocol.Factory());
ThriftProtocol.java,TDeserializer deserializer = new TDeserializer(new TCompactProtocol.Factory());,if (TCompactProtocol != null ) TDeserializer deserializer = new TDeserializer(new TCompactProtocol.Factory());
ThriftUtil.java,TSerializer serializer = new TSerializer(new TCompactJSONProtocol.Factory());,if (TCompactJSONProtocol != null ) TSerializer serializer = new TSerializer(new TCompactJSONProtocol.Factory());
ThriftUtil.java,typeString = Integer.toString(exception.getType());,if (Integer != null ) typeString = Integer.toString(exception.getType());
ThriftExecutionEngineTest.java,Capture<ExecuteRequest> requestCapture = EasyMock.newCapture();,if (EasyMock != null ) Capture<ExecuteRequest> requestCapture = EasyMock.newCapture();
ThriftRemoteExecutionClientsFactoryIntegrationTest.java,ContentAddressableStorage.Iface client = clientsFactory.createCasClient();,if (clientsFactory != null ) ContentAddressableStorage.Iface client = clientsFactory.createCasClient();
AndroidLibrary.java,JavaLibraryDeps deps = Preconditions.checkNotNull(delegateBuilder.getDeps());,if (Preconditions != null ) JavaLibraryDeps deps = Preconditions.checkNotNull(delegateBuilder.getDeps());
BuildReport.java,Throwable failure = Preconditions.checkNotNull(failureResult.getFailure());,if (Preconditions != null ) Throwable failure = Preconditions.checkNotNull(failureResult.getFailure());
BuildReport.java,Throwable failure = Preconditions.checkNotNull(failureResult.getFailure());,if (Preconditions != null ) Throwable failure = Preconditions.checkNotNull(failureResult.getFailure());
MultiThreadedActionGraphBuilder.java,V result = Preconditions.checkNotNull(work).get();,if (Preconditions != null ) V result = Preconditions.checkNotNull(work).get();
DistBuildRunner.java,StampedeId stampedeId = Preconditions.checkNotNull(stampedeIdReference.get());,if (Preconditions != null ) StampedeId stampedeId = Preconditions.checkNotNull(stampedeIdReference.get());
LocalBuildRunner.java,Build build = Preconditions.checkNotNull(buildReference.get());,if (Preconditions != null ) Build build = Preconditions.checkNotNull(buildReference.get());
CsharpLibrary.java,SourcePath outputPath = Preconditions.checkNotNull(rule.getSourcePathToOutput());,if (Preconditions != null ) SourcePath outputPath = Preconditions.checkNotNull(rule.getSourcePathToOutput());
FileBundler.java,Path absolutePath = Preconditions.checkNotNull(pathEntry.getValue());,if (Preconditions != null ) Path absolutePath = Preconditions.checkNotNull(pathEntry.getValue());
ZipFileExtractor.java,Path absolutePath = Preconditions.checkNotNull(pathEntry.getValue());,if (Preconditions != null ) Path absolutePath = Preconditions.checkNotNull(pathEntry.getValue());
StackedDownloader.java,String repo = Preconditions.checkNotNull(kv.getValue());,if (Preconditions != null ) String repo = Preconditions.checkNotNull(kv.getValue());
DefaultJavaLibraryRules.java,result = Preconditions.checkNotNull(getJavaBuckConfig()).getAbiGenerationMode();,if (Preconditions != null ) result = Preconditions.checkNotNull(getJavaBuckConfig()).getAbiGenerationMode();
ZipArchiveDependencySupplier.java,SourcePath ruleOutput = Preconditions.checkNotNull(rule.getSourcePathToOutput());,if (Preconditions != null ) SourcePath ruleOutput = Preconditions.checkNotNull(rule.getSourcePathToOutput());
MoreElements.java,walker = Preconditions.checkNotNull(walker.getEnclosingElement());,if (Preconditions != null ) walker = Preconditions.checkNotNull(walker.getEnclosingElement());
MoreElements.java,walker = Preconditions.checkNotNull(walker.getEnclosingElement());,if (Preconditions != null ) walker = Preconditions.checkNotNull(walker.getEnclosingElement());
MoreElements.java,walker = Preconditions.checkNotNull(walker.getEnclosingElement());,if (Preconditions != null ) walker = Preconditions.checkNotNull(walker.getEnclosingElement());
Pom.java,Model constructed = Preconditions.checkNotNull(modelBuildingResult.getRawModel());,if (Preconditions != null ) Model constructed = Preconditions.checkNotNull(modelBuildingResult.getRawModel());
ClientSideSlb.java,this.pingEndpoint = Preconditions.checkNotNull(config.getPingEndpoint());,if (Preconditions != null ) this.pingEndpoint = Preconditions.checkNotNull(config.getPingEndpoint());
ClientSideSlb.java,this.serverPool = Preconditions.checkNotNull(config.getServerPool());,if (Preconditions != null ) this.serverPool = Preconditions.checkNotNull(config.getServerPool());
ClientSideSlb.java,this.eventBus = Preconditions.checkNotNull(config.getEventBus());,if (Preconditions != null ) this.eventBus = Preconditions.checkNotNull(config.getEventBus());
Memoizer.java,T t = Preconditions.checkNotNull(delegate.get());,if (Preconditions != null ) T t = Preconditions.checkNotNull(delegate.get());
ResourcePool.java,R resource = Preconditions.checkNotNull(resourceSupplier.get());,if (Preconditions != null ) R resource = Preconditions.checkNotNull(resourceSupplier.get());
BuckGotoProvider.java,String target = unwrapString(source.getText());,if (unwrapString(source != null ) String target = unwrapString(source.getText());
BuckAnnotator.java,String target = psiElement.getText();,if (psiElement != null ) String target = psiElement.getText();
BuckAnnotator.java,final Project project = psiElement.getProject();,if (psiElement != null ) final Project project = psiElement.getProject();
BuckAnnotator.java,String target = loadTargetArgument.getText();,if (loadTargetArgument != null ) String target = loadTargetArgument.getText();
BuckAnnotator.java,PsiElement parent = psiElement.getParent();,if (psiElement != null ) PsiElement parent = psiElement.getParent();
BuckPsiUtils.java,String text = value.getFirstChild().getText();,if (value != null ) String text = value.getFirstChild().getText();
BuckGotoProvider.java,psiTarget = Optional.empty();,if (Optional != null ) psiTarget = Optional.empty();
BuckGotoProvider.java,BuckFunctionCallSuffix buckRuleBody = buckRuleBlock.getFunctionCallSuffix();,if (buckRuleBlock != null ) BuckFunctionCallSuffix buckRuleBody = buckRuleBlock.getFunctionCallSuffix();
GrpcRemoteExecutionClients.java,SettableFuture<Void> future = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<Void> future = SettableFuture.create();
BuildTargetRawNodeParsePipeline.java,Path pathToCheck = buildTarget.getBasePath();,if (buildTarget != null ) Path pathToCheck = buildTarget.getBasePath();
BuildFileRawNodeParsePipeline.java,Path pathToCheck = buildTarget.getBasePath();,if (buildTarget != null ) Path pathToCheck = buildTarget.getBasePath();
BuckConfig.java,String alias = aliasEntry.getKey();,if (aliasEntry != null ) String alias = aliasEntry.getKey();
BuckConfig.java,String alias = entry.getKey();,if (entry != null ) String alias = entry.getKey();
BuckConfig.java,BuildTarget buildTarget = entry.getValue();,if (entry != null ) BuildTarget buildTarget = entry.getValue();
BuckConfig.java,Path basePath = buildTarget.getBasePath();,if (buildTarget != null ) Path basePath = buildTarget.getBasePath();
BuckConfigTest.java,BuckConfig emptyConfig = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig emptyConfig = FakeBuckConfig.builder().build();
MultiThreadedBlobUploader.java,Protocol.Digest digest = entry.getKey();,if (entry != null ) Protocol.Digest digest = entry.getKey();
AuditRulesCommand.java,rawRules = parser.getBuildFileManifest(path).getTargets();,if (parser != null ) rawRules = parser.getBuildFileManifest(path).getTargets();
GrpcRemoteExecutionClients.java,SettableFuture<ByteString> future = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<ByteString> future = SettableFuture.create();
GrpcRemoteExecutionClients.java,data = data.concat(value.getData());,if (data != null ) data = data.concat(value.getData());
BuckAnnotator.java,final Project project = psiElement.getProject();,if (psiElement != null ) final Project project = psiElement.getProject();
BuckAnnotator.java,Project project = loadTargetArgument.getProject();,if (loadTargetArgument != null ) Project project = loadTargetArgument.getProject();
BuckBuildUtil.java,PsiElement ruleName = child.getFirstChild();,if (child != null ) PsiElement ruleName = child.getFirstChild();
BuckBuildUtil.java,PsiElement[] children = body.getChildren();,if (body != null ) PsiElement[] children = body.getChildren();
BuckBuildUtil.java,PsiElement lvalue = child.getFirstChild();,if (child != null ) PsiElement lvalue = child.getFirstChild();
DependenciesOptimizer.java,BuckArrayElements arrayElements = array.getArrayElements();,if (array != null ) BuckArrayElements arrayElements = array.getArrayElements();
DependenciesOptimizer.java,PsiElement[] arrayValues = arrayElements.getChildren();,if (arrayElements != null ) PsiElement[] arrayValues = arrayElements.getChildren();
DependenciesOptimizer.java,copiedValues[index] = newValue.copy();,if (newValue != null ) copiedValues[index] = newValue.copy();
DependenciesOptimizer.java,BuckArrayElements arrayElements = array.getArrayElements();,if (array != null ) BuckArrayElements arrayElements = array.getArrayElements();
DependenciesOptimizer.java,PsiElement[] arrayValues = arrayElements.getChildren();,if (arrayElements != null ) PsiElement[] arrayValues = arrayElements.getChildren();
DependenciesOptimizer.java,String elementText = element.getText();,if (element != null ) String elementText = element.getText();
DependenciesOptimizer.java,List<BuckValue> values = property.getExpression().getValueList();,if (property != null ) List<BuckValue> values = property.getExpression().getValueList();
DependenciesOptimizer.java,BuckValueArray array = value.getValueArray();,if (value != null ) BuckValueArray array = value.getValueArray();
BuckPsiUtils.java,List<BuckValue> values = expression.getValueList();,if (expression != null ) List<BuckValue> values = expression.getValueList();
BuckGotoProvider.java,BuckRuleBody buckRuleBody = buckRuleBlock.getRuleBody();,if (buckRuleBlock != null ) BuckRuleBody buckRuleBody = buckRuleBlock.getRuleBody();
BuckAutoDepsContributor.java,PsiFile psiFile = psiClass.getContainingFile();,if (psiClass != null ) PsiFile psiFile = psiClass.getContainingFile();
BuckAutoDepsContributor.java,CharSequence fragment = documentEvent.getNewFragment();,if (documentEvent != null ) CharSequence fragment = documentEvent.getNewFragment();
BuckAutoDepsContributor.java,String currentClassPath = currentClass.getPath();,if (currentClass != null ) String currentClassPath = currentClass.getPath();
ZipScrubberStepIntegrationTest.java,ExecutionContext executionContext = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext executionContext = TestExecutionContext.newInstance();
ZipScrubberStepIntegrationTest.java,ExecutionContext executionContext = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext executionContext = TestExecutionContext.newInstance();
ThriftRemoteExecutionClientsFactoryIntegrationTest.java,ContentAddressableStorage.Iface client = clients.createCasClient();,if (clients != null ) ContentAddressableStorage.Iface client = clients.createCasClient();
BuiltinApplePackageIntegrationTest.java,Path destination = workspace.getDestPath();,if (workspace != null ) Path destination = workspace.getDestPath();
FileBundler.java,String entryPath = MorePaths.pathWithUnixSeparators(filePath.toString());,if (MorePaths != null ) String entryPath = MorePaths.pathWithUnixSeparators(filePath.toString());
Untar.java,Path destFile = Paths.get(entry.getName());,if (Paths != null ) Path destFile = Paths.get(entry.getName());
BuckQueryEnvironmentTest.java,executor = MoreExecutors.listeningDecorator(Executors.newSingleThreadExecutor());,if (MoreExecutors != null ) executor = MoreExecutors.listeningDecorator(Executors.newSingleThreadExecutor());
RemoteExecutionConsoleLineProviderImpl.java,List<String> states = Lists.newArrayList();,if (Lists != null ) List<String> states = Lists.newArrayList();
RemoteExecutionConsoleLineProviderImpl.java,String stateName = state.getAbbreviateName();,if (state != null ) String stateName = state.getAbbreviateName();
AuditIncludesCommand.java,Iterable<String> includes = parser.getBuildFileManifest(path).getIncludes();,if (parser != null ) Iterable<String> includes = parser.getBuildFileManifest(path).getIncludes();
SkylarkProjectBuildFileParser.java,expectedSize += dependencies.get(i).getLoadTransitiveClosureSize();,if (dependencies != null ) expectedSize += dependencies.get(i).getLoadTransitiveClosureSize();
SkylarkProjectBuildFileParser.java,expectedSize += dependencies.get(i).getLoadTransitiveClosureSize();,if (dependencies != null ) expectedSize += dependencies.get(i).getLoadTransitiveClosureSize();
ProjectGenerator.java,ImmutableSet<FrameworkPath> systemFwkOrLibs = frameworksBuilder.build();,if (frameworksBuilder != null ) ImmutableSet<FrameworkPath> systemFwkOrLibs = frameworksBuilder.build();
ThriftRemoteExecutionClients.java,currentClient = clientSupplier.get();,if (clientSupplier != null ) currentClient = clientSupplier.get();
SmartDexingStep.java,Path store = entry.getKey();,if (entry != null ) Path store = entry.getKey();
CxxDescriptionEnhancer.java,BuildTarget targetWithoutFlavor = ImmutableBuildTarget.of(target.getUnflavoredBuildTarget());,if (ImmutableBuildTarget != null ) BuildTarget targetWithoutFlavor = ImmutableBuildTarget.of(target.getUnflavoredBuildTarget());
JavaLibraryDescription.java,BuildTarget unflavored = ImmutableBuildTarget.of(buildTarget.getUnflavoredBuildTarget());,if (ImmutableBuildTarget != null ) BuildTarget unflavored = ImmutableBuildTarget.of(buildTarget.getUnflavoredBuildTarget());
DefaultParser.java,BuildTarget unflavoredTarget = ImmutableBuildTarget.of(target.getUnflavoredBuildTarget());,if (ImmutableBuildTarget != null ) BuildTarget unflavoredTarget = ImmutableBuildTarget.of(target.getUnflavoredBuildTarget());
EndToEndTestDescriptor.java,name = stringBuilder.toString();,if (stringBuilder != null ) name = stringBuilder.toString();
DirectHeaderMapTest.java,Path includeRoot = projectFilesystem.resolve(buildRule.getIncludeRoot());,if (projectFilesystem != null ) Path includeRoot = projectFilesystem.resolve(buildRule.getIncludeRoot());
CxxLibraryFactory.java,FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();,if (cxxPlatformsProvider != null ) FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();
CxxLibraryFactory.java,Flavor defaultCxxFlavor = cxxPlatformsProvider.getDefaultCxxPlatform().getFlavor();,if (cxxPlatformsProvider != null ) Flavor defaultCxxFlavor = cxxPlatformsProvider.getDefaultCxxPlatform().getFlavor();
PrebuiltAppleFrameworkDescription.java,Builder<SourcePath> frameworksBuilder = ImmutableSet.builder();,if (ImmutableSet != null ) Builder<SourcePath> frameworksBuilder = ImmutableSet.builder();
QueryCommand.java,ListeningExecutorService executor = pool.getListeningExecutorService();,if (pool != null ) ListeningExecutorService executor = pool.getListeningExecutorService();
BuckQueryEnvironmentTest.java,executor = MoreExecutors.listeningDecorator(Executors.newSingleThreadExecutor());,if (MoreExecutors != null ) executor = MoreExecutors.listeningDecorator(Executors.newSingleThreadExecutor());
InstallCommand.java,"installHelperTargets = getInstallHelperTargets(params, pool.getListeningExecutorService());","if (pool != null ) installHelperTargets = getInstallHelperTargets(params, pool.getListeningExecutorService());"
TargetsCommand.java,ListeningExecutorService executor = pool.getListeningExecutorService();,if (pool != null ) ListeningExecutorService executor = pool.getListeningExecutorService();
AndroidBinaryResourcesGraphEnhancer.java,realManifest = rawManifest.get();,if (rawManifest != null ) realManifest = rawManifest.get();
AndroidBinaryResourcesGraphEnhancer.java,realManifest = manifestMergeRule.getSourcePathToOutput();,if (manifestMergeRule != null ) realManifest = manifestMergeRule.getSourcePathToOutput();
AndroidBinaryResourcesGraphEnhancer.java,aaptOutputInfo = aaptPackageResources.getAaptOutputInfo();,if (aaptPackageResources != null ) aaptOutputInfo = aaptPackageResources.getAaptOutputInfo();
AndroidBinaryResourcesGraphEnhancer.java,Optional<PackageStringAssets> packageStringAssets = Optional.empty();,if (Optional != null ) Optional<PackageStringAssets> packageStringAssets = Optional.empty();
AndroidBinaryResourcesGraphEnhancer.java,InternalFlavor moduleFlavor = InternalFlavor.of(module.getName());,if (InternalFlavor != null ) InternalFlavor moduleFlavor = InternalFlavor.of(module.getName());
AndroidBinaryResourcesGraphEnhancer.java,moduleAaptOutputInfo = aaptModule.getAaptOutputInfo();,if (aaptModule != null ) moduleAaptOutputInfo = aaptModule.getAaptOutputInfo();
AndroidBinaryResourcesGraphEnhancer.java,SourcePath moduleResourceApk = moduleAaptOutputInfo.getPrimaryResourcesApkPath();,if (moduleAaptOutputInfo != null ) SourcePath moduleResourceApk = moduleAaptOutputInfo.getPrimaryResourcesApkPath();
AndroidBinaryResourcesGraphEnhancer.java,Optional<GenerateRDotJava> generateRDotJava = Optional.empty();,if (Optional != null ) Optional<GenerateRDotJava> generateRDotJava = Optional.empty();
GenerateRDotJava.java,this.pathToOverrideSymbolsFile = resourcesProvider.getOverrideSymbolsPath();,if (resourcesProvider != null ) this.pathToOverrideSymbolsFile = resourcesProvider.getOverrideSymbolsPath();
GenerateStringResources.java,this.filteredResources = filteredResourcesProvider.getResDirectories();,if (filteredResourcesProvider != null ) this.filteredResources = filteredResourcesProvider.getResDirectories();
MergeAndroidResourcesStep.java,Iterator<JsonNode> rDotTxtLines = jsonData.get(packageName).elements();,if (jsonData != null ) Iterator<JsonNode> rDotTxtLines = jsonData.get(packageName).elements();
MergeAndroidResourcesStep.java,String rDotTxtLine = rDotTxtLines.next().asText();,if (rDotTxtLines != null ) String rDotTxtLine = rDotTxtLines.next().asText();
AndroidBinaryResourcesGraphEnhancer.java,Optional<PackageStringAssets> packageStringAssets = Optional.empty();,if (Optional != null ) Optional<PackageStringAssets> packageStringAssets = Optional.empty();
AndroidBinaryResourcesGraphEnhancer.java,pathToRDotTxt = splitResources.getPathToRDotTxt();,if (splitResources != null ) pathToRDotTxt = splitResources.getPathToRDotTxt();
AndroidBinaryResourcesGraphEnhancer.java,pathToRDotTxt = aaptOutputInfo.getPathToRDotTxt();,if (aaptOutputInfo != null ) pathToRDotTxt = aaptOutputInfo.getPathToRDotTxt();
AndroidBinaryResourcesGraphEnhancer.java,exoResources = ImmutableList.of();,if (ImmutableList != null ) exoResources = ImmutableList.of();
JavaBuckConfig.java,File file = path.get().toFile();,if (path != null ) File file = path.get().toFile();
DefaultParser.java,Cell owningCell = cell.getCell(targetNode.getBuildTarget());,if (cell != null ) Cell owningCell = cell.getCell(targetNode.getBuildTarget());
DefaultParser.java,String shortName = targetNode.getBuildTarget().getShortName();,if (targetNode != null ) String shortName = targetNode.getBuildTarget().getShortName();
PythonDslProjectBuildFileParser.java,buckPyProcessInput = new CountingInputStream(buckPyProcess.getInputStream());,if (CountingInputStream(buckPyProcess != null ) buckPyProcessInput = new CountingInputStream(buckPyProcess.getInputStream());
IsolatedBuildableBuilder.java,Optional<EmbeddedCellBuckOutInfo> embeddedCellBuckOutInfo = Optional.empty();,if (Optional != null ) Optional<EmbeddedCellBuckOutInfo> embeddedCellBuckOutInfo = Optional.empty();
RelativeLinkArgTest.java,ProjectFilesystem filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());,if (TestProjectFilesystems != null ) ProjectFilesystem filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());
BuildPhaseTest.java,ActionGraphBuilder graphBuilder = CustomActiongGraphBuilderFactory.createSimpleBuilder();,if (CustomActiongGraphBuilderFactory != null ) ActionGraphBuilder graphBuilder = CustomActiongGraphBuilderFactory.createSimpleBuilder();
CacheOptimizedBuildTargetsQueueFactoryTest.java,BuildRuleResolver resolver = CustomActiongGraphBuilderFactory.createSimpleRuntimeDepsResolver();,if (CustomActiongGraphBuilderFactory != null ) BuildRuleResolver resolver = CustomActiongGraphBuilderFactory.createSimpleRuntimeDepsResolver();
CacheOptimizedBuildTargetsQueueFactoryTest.java,BuildRuleResolver resolver = CustomActiongGraphBuilderFactory.createDiamondDependencyGraph();,if (CustomActiongGraphBuilderFactory != null ) BuildRuleResolver resolver = CustomActiongGraphBuilderFactory.createDiamondDependencyGraph();
CacheOptimizedBuildTargetsQueueFactoryTest.java,BuildRuleResolver resolver = CustomActiongGraphBuilderFactory.createGraphWithBuildLocallyDep();,if (CustomActiongGraphBuilderFactory != null ) BuildRuleResolver resolver = CustomActiongGraphBuilderFactory.createGraphWithBuildLocallyDep();
ReverseDepBuildTargetsQueueTest.java,BuildRuleResolver resolver = CustomActiongGraphBuilderFactory.createSimpleBuilder();,if (CustomActiongGraphBuilderFactory != null ) BuildRuleResolver resolver = CustomActiongGraphBuilderFactory.createSimpleBuilder();
ReverseDepBuildTargetsQueueTest.java,BuildRuleResolver resolver = CustomActiongGraphBuilderFactory.createSimpleRuntimeDepsResolver();,if (CustomActiongGraphBuilderFactory != null ) BuildRuleResolver resolver = CustomActiongGraphBuilderFactory.createSimpleRuntimeDepsResolver();
ReverseDepBuildTargetsQueueTest.java,BuildRuleResolver resolver = CustomActiongGraphBuilderFactory.createDiamondDependencyGraph();,if (CustomActiongGraphBuilderFactory != null ) BuildRuleResolver resolver = CustomActiongGraphBuilderFactory.createDiamondDependencyGraph();
BuckSettingsUI.java,BuckExecutableDetector executableDetector = BuckExecutableDetector.newInstance();,if (BuckExecutableDetector != null ) BuckExecutableDetector executableDetector = BuckExecutableDetector.newInstance();
BuckSettingsUI.java,"emptyTextForBuckExecutable = ""Default: "" + executableDetector.getBuckExecutable();","if (executableDetector != null ) emptyTextForBuckExecutable = ""Default: "" + executableDetector.getBuckExecutable();"
BuckSettingsUI.java,"emptyTextForAdbExecutable = ""Default: "" + executableDetector.getAdbExecutable();","if (executableDetector != null ) emptyTextForAdbExecutable = ""Default: "" + executableDetector.getAdbExecutable();"
ConvertingPipeline.java,Path pathToCheck = buildTarget.getBasePath();,if (buildTarget != null ) Path pathToCheck = buildTarget.getBasePath();
BuckGotoProvider.java,VirtualFile sourceFile = source.getContainingFile().getVirtualFile();,if (source != null ) VirtualFile sourceFile = source.getContainingFile().getVirtualFile();
BuckGotoProvider.java,String target = source.getText();,if (source != null ) String target = source.getText();
BuckGotoProvider.java,targetFile = Optional.empty();,if (Optional != null ) targetFile = Optional.empty();
BuckCellFinder.java,String root = cell.getRoot();,if (cell != null ) String root = cell.getRoot();
BuckCellFinder.java,int cellRootLength = cell.getRoot().length();,if (cell != null ) int cellRootLength = cell.getRoot().length();
BuckCellFinder.java,int cellRootLength = cell.getRoot().length();,if (cell != null ) int cellRootLength = cell.getRoot().length();
BuckSettingsUI.java,Project project = optionsProvider.getProject();,if (optionsProvider != null ) Project project = optionsProvider.getProject();
HostInfoTest.java,ProjectFilesystem projectFilesystem = FakeProjectFilesystem.createRealTempFilesystem();,if (FakeProjectFilesystem != null ) ProjectFilesystem projectFilesystem = FakeProjectFilesystem.createRealTempFilesystem();
AndroidBinaryResourcesGraphEnhancer.java,InternalFlavor moduleFlavor = InternalFlavor.of(module.getName());,if (InternalFlavor != null ) InternalFlavor moduleFlavor = InternalFlavor.of(module.getName());
AndroidBinaryResourcesGraphEnhancer.java,manifestPath = moduleManifestMergeRule.getSourcePathToOutput();,if (moduleManifestMergeRule != null ) manifestPath = moduleManifestMergeRule.getSourcePathToOutput();
AndroidBinaryResourcesGraphEnhancer.java,aaptOutputInfo = aaptPackageResources.getAaptOutputInfo();,if (aaptPackageResources != null ) aaptOutputInfo = aaptPackageResources.getAaptOutputInfo();
AndroidBinaryResourcesGraphEnhancer.java,Optional<PackageStringAssets> packageStringAssets = Optional.empty();,if (Optional != null ) Optional<PackageStringAssets> packageStringAssets = Optional.empty();
AndroidBinaryResourcesGraphEnhancer.java,Optional<GenerateRDotJava> generateRDotJava = Optional.empty();,if (Optional != null ) Optional<GenerateRDotJava> generateRDotJava = Optional.empty();
AndroidBinaryResourcesGraphEnhancer.java,realManifest = rawManifest.get();,if (rawManifest != null ) realManifest = rawManifest.get();
AndroidBinaryResourcesGraphEnhancer.java,realManifest = manifestMergeRule.getSourcePathToOutput();,if (manifestMergeRule != null ) realManifest = manifestMergeRule.getSourcePathToOutput();
MergeAndroidResourcesStep.java,Iterator<JsonNode> rDotTxtLines = jsonData.get(packageName).elements();,if (jsonData != null ) Iterator<JsonNode> rDotTxtLines = jsonData.get(packageName).elements();
MergeAndroidResourcesStep.java,String rDotTxtLine = rDotTxtLines.next().asText();,if (rDotTxtLines != null ) String rDotTxtLine = rDotTxtLines.next().asText();
InputsVisitor.java,CustomFieldInputs<T> customInputs = (CustomFieldInputs<T>) inputsTag.get();,if (inputsTag != null ) CustomFieldInputs<T> customInputs = (CustomFieldInputs<T>) inputsTag.get();
AbstractAnnotationProcessingParams.java,JavacPluginProperties legacyUnsafeProcessors = legacyUnsafeProcessorsBuilder.build();,if (legacyUnsafeProcessorsBuilder != null ) JavacPluginProperties legacyUnsafeProcessors = legacyUnsafeProcessorsBuilder.build();
JvmLibraryArg.java,AnnotationProcessingParams.Builder builder = AnnotationProcessingParams.builder();,if (AnnotationProcessingParams != null ) AnnotationProcessingParams.Builder builder = AnnotationProcessingParams.builder();
AsyncBackgroundTaskManager.java,ManagedBackgroundTask task = scheduledTasks.remove();,if (scheduledTasks != null ) ManagedBackgroundTask task = scheduledTasks.remove();
ApkBuilder.java,File[] files = sourceFolder.listFiles();,if (sourceFolder != null ) File[] files = sourceFolder.listFiles();
ApkBuilder.java,File[] abiList = nativeFolder.listFiles();,if (nativeFolder != null ) File[] abiList = nativeFolder.listFiles();
ApkBuilder.java,File[] libs = abi.listFiles();,if (abi != null ) File[] libs = abi.listFiles();
ApkBuilder.java,path = file.getName();,if (file != null ) path = file.getName();
ApkBuilder.java,"path = path + ""/"" + file.getName();","if (file != null ) path = path + ""/"" + file.getName();"
ApkBuilder.java,File[] files = file.listFiles();,if (file != null ) File[] files = file.listFiles();
ApkBuilder.java,path = file.getName();,if (file != null ) path = file.getName();
ApkBuilder.java,"path = path + ""/"" + file.getName();","if (file != null ) path = path + ""/"" + file.getName();"
SignedJarBuilder.java,Attributes main = mManifest.getMainAttributes();,if (mManifest != null ) Attributes main = mManifest.getMainAttributes();
SignedJarBuilder.java,String name = entry.getName();,if (entry != null ) String name = entry.getName();
SignedJarBuilder.java,Attributes attr = mManifest.getAttributes(entry.getName());,if (mManifest != null ) Attributes attr = mManifest.getAttributes(entry.getName());
SignedJarBuilder.java,Attributes main = sf.getMainAttributes();,if (sf != null ) Attributes main = sf.getMainAttributes();
ThriftRemoteExecutionClientsIntegrationTest.java,ContentAddressableStorage.Client client = clients.createCasClient();,if (clients != null ) ContentAddressableStorage.Client client = clients.createCasClient();
ThriftBlobFetcher.java,SettableFuture<ByteBuffer> future = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<ByteBuffer> future = SettableFuture.create();
BuckSettingsUI.java,Project project = optionsProvider.getProject();,if (optionsProvider != null ) Project project = optionsProvider.getProject();
BuckSettingsUI.java,String buckExecutable = buckPathField.getText().trim();,if (buckPathField != null ) String buckExecutable = buckPathField.getText().trim();
AbstractAnnotationProcessingParams.java,JavacPluginProperties legacySafeProcessors = legacySafeProcessorsBuilder.build();,if (legacySafeProcessorsBuilder != null ) JavacPluginProperties legacySafeProcessors = legacySafeProcessorsBuilder.build();
BuckGotoProvider.java,final Project project = editor.getProject();,if (editor != null ) final Project project = editor.getProject();
BuckGotoProvider.java,String target = source.getText();,if (source != null ) String target = source.getText();
AndroidBinaryResourcesGraphEnhancer.java,realManifest = rawManifest.get();,if (rawManifest != null ) realManifest = rawManifest.get();
AndroidBinaryResourcesGraphEnhancer.java,realManifest = manifestMergeRule.getSourcePathToOutput();,if (manifestMergeRule != null ) realManifest = manifestMergeRule.getSourcePathToOutput();
AndroidBinaryResourcesGraphEnhancer.java,aaptOutputInfo = aaptPackageResources.getAaptOutputInfo();,if (aaptPackageResources != null ) aaptOutputInfo = aaptPackageResources.getAaptOutputInfo();
AndroidBinaryResourcesGraphEnhancer.java,Optional<PackageStringAssets> packageStringAssets = Optional.empty();,if (Optional != null ) Optional<PackageStringAssets> packageStringAssets = Optional.empty();
AndroidBinaryResourcesGraphEnhancer.java,InternalFlavor moduleFlavor = InternalFlavor.of(module.getName());,if (InternalFlavor != null ) InternalFlavor moduleFlavor = InternalFlavor.of(module.getName());
AndroidBinaryResourcesGraphEnhancer.java,moduleAaptOutputInfo = aaptModule.getAaptOutputInfo();,if (aaptModule != null ) moduleAaptOutputInfo = aaptModule.getAaptOutputInfo();
AndroidBinaryResourcesGraphEnhancer.java,SourcePath moduleResourceApk = moduleAaptOutputInfo.getPrimaryResourcesApkPath();,if (moduleAaptOutputInfo != null ) SourcePath moduleResourceApk = moduleAaptOutputInfo.getPrimaryResourcesApkPath();
AndroidBinaryResourcesGraphEnhancer.java,Optional<GenerateRDotJava> generateRDotJava = Optional.empty();,if (Optional != null ) Optional<GenerateRDotJava> generateRDotJava = Optional.empty();
GenerateRDotJava.java,this.pathToOverrideSymbolsFile = resourcesProvider.getOverrideSymbolsPath();,if (resourcesProvider != null ) this.pathToOverrideSymbolsFile = resourcesProvider.getOverrideSymbolsPath();
GenerateStringResources.java,this.filteredResources = filteredResourcesProvider.getResDirectories();,if (filteredResourcesProvider != null ) this.filteredResources = filteredResourcesProvider.getResDirectories();
MergeAndroidResourcesStep.java,Iterator<JsonNode> rDotTxtLines = jsonData.get(packageName).elements();,if (jsonData != null ) Iterator<JsonNode> rDotTxtLines = jsonData.get(packageName).elements();
MergeAndroidResourcesStep.java,String rDotTxtLine = rDotTxtLines.next().asText();,if (rDotTxtLines != null ) String rDotTxtLine = rDotTxtLines.next().asText();
AndroidBinaryResourcesGraphEnhancer.java,Optional<PackageStringAssets> packageStringAssets = Optional.empty();,if (Optional != null ) Optional<PackageStringAssets> packageStringAssets = Optional.empty();
AndroidBinaryResourcesGraphEnhancer.java,pathToRDotTxt = splitResources.getPathToRDotTxt();,if (splitResources != null ) pathToRDotTxt = splitResources.getPathToRDotTxt();
AndroidBinaryResourcesGraphEnhancer.java,pathToRDotTxt = aaptOutputInfo.getPathToRDotTxt();,if (aaptOutputInfo != null ) pathToRDotTxt = aaptOutputInfo.getPathToRDotTxt();
AndroidBinaryResourcesGraphEnhancer.java,exoResources = ImmutableList.of();,if (ImmutableList != null ) exoResources = ImmutableList.of();
RecursiveFileMatcherTest.java,Path root = temporaryFolder.getRoot();,if (temporaryFolder != null ) Path root = temporaryFolder.getRoot();
RecursiveFileMatcherTest.java,Path root = temporaryFolder.getRoot();,if (temporaryFolder != null ) Path root = temporaryFolder.getRoot();
RecursiveFileMatcherTest.java,Path root = temporaryFolder.getRoot();,if (temporaryFolder != null ) Path root = temporaryFolder.getRoot();
BuckBuildManager.java,final ProgressManager manager = ProgressManager.getInstance();,if (ProgressManager != null ) final ProgressManager manager = ProgressManager.getInstance();
FatJar.java,Unmarshaller unmarshaller = context.createUnmarshaller();,if (context != null ) Unmarshaller unmarshaller = context.createUnmarshaller();
FatJar.java,Marshaller marshaller = context.createMarshaller();,if (context != null ) Marshaller marshaller = context.createMarshaller();
BuckBuildUtil.java,Project project = loadTarget.getProject();,if (loadTarget != null ) Project project = loadTarget.getProject();
BuckBuildUtil.java,file = file.getParent();,if (file != null ) file = file.getParent();
BuildTargetDurationListener.java,Collection<BuildRuleInfo> rootBuildRuleInfos = Lists.newArrayList();,if (Lists != null ) Collection<BuildRuleInfo> rootBuildRuleInfos = Lists.newArrayList();
ClearTreeViewPanelAction.java,BuckUIManager buckUIManager = BuckUIManager.getInstance(anActionEvent.getProject());,if (BuckUIManager != null ) BuckUIManager buckUIManager = BuckUIManager.getInstance(anActionEvent.getProject());
BuckEventsConsumer.java,mCurrentBuildRootElement = mBuckUIManager.getBuckTreeViewPanel().getRoot();,if (mBuckUIManager != null ) mCurrentBuildRootElement = mBuckUIManager.getBuckTreeViewPanel().getRoot();
Daemon.java,boolean blocking = rootCell.getBuckConfig().getFlushEventsBeforeExit();,if (rootCell != null ) boolean blocking = rootCell.getBuckConfig().getFlushEventsBeforeExit();
Main.java,boolean blocking = rootCell.getBuckConfig().getFlushEventsBeforeExit();,if (rootCell != null ) boolean blocking = rootCell.getBuckConfig().getFlushEventsBeforeExit();
SynchronousBackgroundTaskManager.java,ManagedBackgroundTask task = scheduledTasks.poll();,if (scheduledTasks != null ) ManagedBackgroundTask task = scheduledTasks.poll();
SimpleConsoleEventBusListener.java,ImmutableList<String> stringList = lines.build();,if (lines != null ) ImmutableList<String> stringList = lines.build();
AsyncBackgroundTaskManager.java,ManagedBackgroundTask task = scheduledTasks.remove();,if (scheduledTasks != null ) ManagedBackgroundTask task = scheduledTasks.remove();
AsyncBackgroundTaskManager.java,ManagedBackgroundTask task = scheduledTasks.remove();,if (scheduledTasks != null ) ManagedBackgroundTask task = scheduledTasks.remove();
BuckInstallAction.java,BuckSettingsProvider settingsProvider = BuckSettingsProvider.getInstance();,if (BuckSettingsProvider != null ) BuckSettingsProvider settingsProvider = BuckSettingsProvider.getInstance();
BuckBuildManager.java,String exec = BuckSettingsProvider.getInstance().resolveBuckExecutable();,if (BuckSettingsProvider != null ) String exec = BuckSettingsProvider.getInstance().resolveBuckExecutable();
BuckCommandHandler.java,String buckExecutable = BuckSettingsProvider.getInstance().resolveBuckExecutable();,if (BuckSettingsProvider != null ) String buckExecutable = BuckSettingsProvider.getInstance().resolveBuckExecutable();
BuckExecutableDetector.java,path += androidAdkPlatformTools.toAbsolutePath().toString();,if (androidAdkPlatformTools != null ) path += androidAdkPlatformTools.toAbsolutePath().toString();
BuckSettingsProvider.java,executable = executableDetector.getBuckExecutable();,if (executableDetector != null ) executable = executableDetector.getBuckExecutable();
BuckSettingsProvider.java,executable = executableDetector.getAdbExecutable();,if (executableDetector != null ) executable = executableDetector.getAdbExecutable();
BuckWSServerPortUtils.java,String exec = BuckSettingsProvider.getInstance().resolveBuckExecutable();,if (BuckSettingsProvider != null ) String exec = BuckSettingsProvider.getInstance().resolveBuckExecutable();
TestProgramRunner.java,String exec = BuckSettingsProvider.getInstance().resolveBuckExecutable();,if (BuckSettingsProvider != null ) String exec = BuckSettingsProvider.getInstance().resolveBuckExecutable();
BuckSettingsUI.java,optionsProvider = BuckSettingsProvider.getInstance();,if (BuckSettingsProvider != null ) optionsProvider = BuckSettingsProvider.getInstance();
BuckToolWindowFactory.java,BuckSettingsProvider settingsProvider = BuckSettingsProvider.getInstance();,if (BuckSettingsProvider != null ) BuckSettingsProvider settingsProvider = BuckSettingsProvider.getInstance();
BuckClient.java,int port = BuckWSServerPortUtils.getPort(mProject.getBasePath());,if (BuckWSServerPortUtils != null ) int port = BuckWSServerPortUtils.getPort(mProject.getBasePath());
ChooseTargetAction.java,BuckSettingsProvider buckSettingsProvider = BuckSettingsProvider.getInstance();,if (BuckSettingsProvider != null ) BuckSettingsProvider buckSettingsProvider = BuckSettingsProvider.getInstance();
ActionRunner.java,requiredData = ImmutableMap.builder();,if (ImmutableMap != null ) requiredData = ImmutableMap.builder();
ArtifactCacheHandler.java,String method = baseRequest.getMethod();,if (baseRequest != null ) String method = baseRequest.getMethod();
WebServer.java,this.port = OptionalInt.empty();,if (OptionalInt != null ) this.port = OptionalInt.empty();
ServerStatusCommandTest.java,webServerPort = OptionalInt.empty();,if (OptionalInt != null ) webServerPort = OptionalInt.empty();
SynchronousBackgroundTaskManager.java,ManagedBackgroundTask task = scheduledTasks.poll();,if (scheduledTasks != null ) ManagedBackgroundTask task = scheduledTasks.poll();
BuckToolWindow.java,final ContentManager contentManager = mainToolWindow.getContentManager();,if (mainToolWindow != null ) final ContentManager contentManager = mainToolWindow.getContentManager();
BuckToolWindow.java,UISettings uiSettings = UISettings.getInstance();,if (UISettings != null ) UISettings uiSettings = UISettings.getInstance();
BuckToolWindow.java,ActionManager actionManager = ActionManager.getInstance();,if (ActionManager != null ) ActionManager actionManager = ActionManager.getInstance();
BuckTreeViewPanel.java,scrollPane = new JBScrollPane(mModifiableModel.getTree());,if (JBScrollPane(mModifiableModel != null ) scrollPane = new JBScrollPane(mModifiableModel.getTree());
BuckTreeViewPanel.java,TreeNode parentNode = node.getParent();,if (node != null ) TreeNode parentNode = node.getParent();
BuckTreeViewPanel.java,DataContext dataContext = DataManager.getInstance().getDataContext();,if (DataManager != null ) DataContext dataContext = DataManager.getInstance().getDataContext();
BuckTreeViewPanel.java,Tree tree = (Tree) e.getComponent();,if (e != null ) Tree tree = (Tree) e.getComponent();
BuckTreeViewPanel.java,TreeNode node = (TreeNode) selPath.getLastPathComponent();,if (selPath != null ) TreeNode node = (TreeNode) selPath.getLastPathComponent();
BuckTreeViewPanel.java,indexs[i] = parent.getChildCount();,if (parent != null ) indexs[i] = parent.getChildCount();
IjProjectPaths.java,String moduleRelativePath = moduleLocationBasePath.relativize(path).toString();,if (moduleLocationBasePath != null ) String moduleRelativePath = moduleLocationBasePath.relativize(path).toString();
IjProjectTemplateDataPreparer.java,Path moduleBasePath = module.getModuleBasePath();,if (module != null ) Path moduleBasePath = module.getModuleBasePath();
IjProjectTemplateDataPreparer.java,Path moduleLocation = module.getModuleImlFilePath();,if (module != null ) Path moduleLocation = module.getModuleImlFilePath();
IjProjectTemplateDataPreparer.java,Path moduleOutputFilePath = module.getModuleImlFilePath();,if (module != null ) Path moduleOutputFilePath = module.getModuleImlFilePath();
IjProjectTemplateDataPreparer.java,Path moduleBase = module.getModuleBasePath();,if (module != null ) Path moduleBase = module.getModuleBasePath();
IjProjectTemplateDataPreparer.java,Path genPath = moduleBasePath.relativize(androidFacet.getGeneratedSourcePath());,if (moduleBasePath != null ) Path genPath = moduleBasePath.relativize(androidFacet.getGeneratedSourcePath());
IjProjectTemplateDataPreparer.java,Path moduleBase = module.getModuleBasePath();,if (module != null ) Path moduleBase = module.getModuleBasePath();
IjProjectTemplateDataPreparer.java,moduleBasePath = module.getModuleBasePath();,if (module != null ) moduleBasePath = module.getModuleBasePath();
IjProjectWriter.java,IjProjectPaths projectPaths = projectConfig.getProjectPaths();,if (projectConfig != null ) IjProjectPaths projectPaths = projectConfig.getProjectPaths();
CancelExecutionRequest.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
CancelExecutionResponse.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
Device.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
Device.java,this.name = iprot.readString();,if (iprot != null ) this.name = iprot.readString();
ExecutionEngine.java,ContextStack ctx = this.getContextStack();,if (this != null ) ContextStack ctx = this.getContextStack();
ExecutionEngine.java,ContextStack ctx = super.getContextStack();,if (super != null ) ContextStack ctx = super.getContextStack();
ExecutionEngine.java,TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());,if (TMemoryInputTransport(getFrameBuffer() != null ) TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
ExecutionEngine.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ExecutionEngine.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ExecutionResult.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
GetExecutionStateResponse.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
LogFile.java,this.name = iprot.readString();,if (iprot != null ) this.name = iprot.readString();
LogFile.java,this.value = iprot.readDouble();,if (iprot != null ) this.value = iprot.readDouble();
NonUniqueExecutionIdException.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
NonUniqueExecutionIdException.java,this.message = iprot.readString();,if (iprot != null ) this.message = iprot.readString();
OutputFile.java,this.content = iprot.readBinary();,if (iprot != null ) this.content = iprot.readBinary();
RejectedActionException.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
RejectedActionException.java,this.message = iprot.readString();,if (iprot != null ) this.message = iprot.readString();
RequiredWorkerHost.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ServiceOverloadedException.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
ServiceOverloadedException.java,this.message = iprot.readString();,if (iprot != null ) this.message = iprot.readString();
UnknownExecutionIdException.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
UnknownExecutionIdException.java,this.message = iprot.readString();,if (iprot != null ) this.message = iprot.readString();
WorkerHost.java,field = iprot.readFieldBegin();,if (iprot != null ) field = iprot.readFieldBegin();
OutputsMaterializer.java,ByteBuffer content = file.getContent();,if (file != null ) ByteBuffer content = file.getContent();
GrpcRemoteExecution.java,Builder actionBuilder = Action.newBuilder();,if (Action != null ) Builder actionBuilder = Action.newBuilder();
GrpcRemoteExecution.java,ActionResult actionResult = future.get();,if (future != null ) ActionResult actionResult = future.get();
GrpcRemoteExecution.java,Any response = operation.getResponse();,if (operation != null ) Any response = operation.getResponse();
GrpcRemoteExecutionServiceImpl.java,Action action = request.getAction();,if (request != null ) Action action = request.getAction();
JsBundleGenruleDescriptionTest.java,AppleBundleResources.Builder genruleBuilder = AppleBundleResources.builder();,if (AppleBundleResources != null ) AppleBundleResources.Builder genruleBuilder = AppleBundleResources.builder();
JsBundleGenruleDescriptionTest.java,AppleBundleResources expected = AppleBundleResources.builder().build();,if (AppleBundleResources != null ) AppleBundleResources expected = AppleBundleResources.builder().build();
RemoteExecution.java,classPathValue = prepareClassPath(BuckClasspath.getClasspath());,if (prepareClassPath(BuckClasspath != null ) classPathValue = prepareClassPath(BuckClasspath.getClasspath());
RemoteExecution.java,bootstrapClassPathValue = prepareClassPath(BuckClasspath.getBootstrapClasspath());,if (prepareClassPath(BuckClasspath != null ) bootstrapClassPathValue = prepareClassPath(BuckClasspath.getBootstrapClasspath());
BuckToolWindowFactory.java,UISettings uiSettings = UISettings.getInstance();,if (UISettings != null ) UISettings uiSettings = UISettings.getInstance();
BuckToolWindowFactory.java,return toolWindow == null || toolWindow.isVisible();,if (toolWindow != null ) return toolWindow == null || toolWindow.isVisible();
BuckToolWindowFactory.java,final ContentManager contentManager = toolWindow.getContentManager();,if (toolWindow != null ) final ContentManager contentManager = toolWindow.getContentManager();
BuckToolWindowFactory.java,ActionManager actionManager = ActionManager.getInstance();,if (ActionManager != null ) ActionManager actionManager = ActionManager.getInstance();
BuckToolWindowFactory.java,Tree tree = (Tree) e.getComponent();,if (e != null ) Tree tree = (Tree) e.getComponent();
BuckToolWindowFactory.java,TreeNode node = (TreeNode) selPath.getLastPathComponent();,if (selPath != null ) TreeNode node = (TreeNode) selPath.getLastPathComponent();
BuckToolWindowFactory.java,TreeNode parentNode = node.getParent();,if (node != null ) TreeNode parentNode = node.getParent();
BuckToolWindowFactory.java,DataContext dataContext = DataManager.getInstance().getDataContext();,if (DataManager != null ) DataContext dataContext = DataManager.getInstance().getDataContext();
BuckTreeCellRenderer.java,BuildElementRenderer renderer = mRenderers.get(value.getClass());,if (mRenderers != null ) BuildElementRenderer renderer = mRenderers.get(value.getClass());
BuckAutoDepsContributor.java,String currentClassPath = currentClass.getPath();,if (currentClass != null ) String currentClassPath = currentClass.getPath();
ResultCallbackBuckHandler.java,String result = stdout.toString();,if (stdout != null ) String result = stdout.toString();
InterCellIntegrationTest.java,BuckEventBus eventBus = BuckEventBusForTests.newInstance();,if (BuckEventBusForTests != null ) BuckEventBus eventBus = BuckEventBusForTests.newInstance();
DistBuildStateTest.java,BuckEventBus eventBus = BuckEventBusForTests.newInstance();,if (BuckEventBusForTests != null ) BuckEventBus eventBus = BuckEventBusForTests.newInstance();
ParserBenchmark.java,eventBus = BuckEventBusForTests.newInstance();,if (BuckEventBusForTests != null ) eventBus = BuckEventBusForTests.newInstance();
OwnersReportTest.java,PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();,if (BuckPluginManagerFactory != null ) PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();
InterCellIntegrationTest.java,PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();,if (BuckPluginManagerFactory != null ) PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();
IntraCellIntegrationTest.java,PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();,if (BuckPluginManagerFactory != null ) PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();
DistBuildFileHashesIntegrationTest.java,PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();,if (BuckPluginManagerFactory != null ) PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();
DistBuildFileHashesIntegrationTest.java,PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();,if (BuckPluginManagerFactory != null ) PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();
ParserBenchmark.java,PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();,if (BuckPluginManagerFactory != null ) PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();
DefaultJavaLibraryBuildable.java,this.rootOutputPath = new PublicOutputPath(outputPaths.getOutputJarDirPath());,if (PublicOutputPath(outputPaths != null ) this.rootOutputPath = new PublicOutputPath(outputPaths.getOutputJarDirPath());
DefaultJavaLibraryBuildable.java,this.annotationsOutputPath = new PublicOutputPath(outputPaths.getAnnotationPath());,if (PublicOutputPath(outputPaths != null ) this.annotationsOutputPath = new PublicOutputPath(outputPaths.getAnnotationPath());
PipelinedModernBuildRule.java,ImmutableList<Path> outputs = outputsBuilder.build();,if (outputsBuilder != null ) ImmutableList<Path> outputs = outputsBuilder.build();
AndroidLibraryDescriptionTest.java,BuildRule bottomRule = graphBuilder.requireRule(bottomNode.getBuildTarget());,if (graphBuilder != null ) BuildRule bottomRule = graphBuilder.requireRule(bottomNode.getBuildTarget());
AndroidLibraryDescriptionTest.java,BuildRule sublibRule = graphBuilder.requireRule(sublibNode.getBuildTarget());,if (graphBuilder != null ) BuildRule sublibRule = graphBuilder.requireRule(sublibNode.getBuildTarget());
AndroidLibraryDescriptionTest.java,BuildRule libRule = graphBuilder.requireRule(libNode.getBuildTarget());,if (graphBuilder != null ) BuildRule libRule = graphBuilder.requireRule(libNode.getBuildTarget());
SkylarkProjectBuildFileParserTest.java,ImmutableSet<String> includes = buildFileManifest.getIncludes();,if (buildFileManifest != null ) ImmutableSet<String> includes = buildFileManifest.getIncludes();
ActionGraphProvider.java,out = freshActionGraph.getSecond();,if (freshActionGraph != null ) out = freshActionGraph.getSecond();
TestActionGraphProviderFactory.java,BuckEventBus eventBus = BuckEventBusForTests.newInstance();,if (BuckEventBusForTests != null ) BuckEventBus eventBus = BuckEventBusForTests.newInstance();
TestActionGraphProviderFactory.java,BuckEventBus eventBus = BuckEventBusForTests.newInstance();,if (BuckEventBusForTests != null ) BuckEventBus eventBus = BuckEventBusForTests.newInstance();
TestActionGraphProviderFactory.java,BuckEventBus eventBus = BuckEventBusForTests.newInstance();,if (BuckEventBusForTests != null ) BuckEventBus eventBus = BuckEventBusForTests.newInstance();
TestActionGraphProviderFactory.java,BuckEventBus eventBus = BuckEventBusForTests.newInstance();,if (BuckEventBusForTests != null ) BuckEventBus eventBus = BuckEventBusForTests.newInstance();
DelegateAndGraphsInitializer.java,int threadCount = args.getMaxActionGraphParallelism();,if (args != null ) int threadCount = args.getMaxActionGraphParallelism();
AbstractDeprecatedPrebuiltCxxLibraryPaths.java,dep = Optional.empty();,if (Optional != null ) dep = Optional.empty();
AbstractDeprecatedPrebuiltCxxLibraryPaths.java,Path path = getTarget().getBasePath();,if (getTarget() != null ) Path path = getTarget().getBasePath();
AbstractDeprecatedPrebuiltCxxLibraryPaths.java,MacroHandler macroHandler = getMacroHandler(Optional.empty());,if (getMacroHandler(Optional != null ) MacroHandler macroHandler = getMacroHandler(Optional.empty());
MiniAapt.java,resourceType = typeNode.getNodeValue();,if (typeNode != null ) resourceType = typeNode.getNodeValue();
ThriftRemoteExecutionClientsIntegrationTest.java,ContentAddressableStorage.Client client = clients.getCasClient();,if (clients != null ) ContentAddressableStorage.Client client = clients.getCasClient();
ThriftRemoteExecutionClientsIntegrationTest.java,ContentAddressableStorage.AsyncClient asyncClient = clients.getAsyncCasClient();,if (clients != null ) ContentAddressableStorage.AsyncClient asyncClient = clients.getAsyncCasClient();
DefaultClassInfo.java,Field[] declaredFields = clazz.getDeclaredFields();,if (clazz != null ) Field[] declaredFields = clazz.getDeclaredFields();
DefaultClassInfo.java,Field classField = clazz.getDeclaredField(field.getName());,if (clazz != null ) Field classField = clazz.getDeclaredField(field.getName());
MainIntegrationTest.java,String stdout = result.getStdout();,if (result != null ) String stdout = result.getStdout();
MainIntegrationTest.java,"stdout = withoutSuffix(stdout, System.lineSeparator());","if (System != null ) stdout = withoutSuffix(stdout, System.lineSeparator());"
AbstractCellConfig.java,RelativeCellName cellRelativeName = entry.getKey();,if (entry != null ) RelativeCellName cellRelativeName = entry.getKey();
BatchReadBlobsRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
BatchReadBlobsResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
BatchUpdateBlobsRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
BatchUpdateBlobsResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ContentAddressableStorage.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ContentAddressableStorage.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ContentAddressableStorage.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ContentAddressableStorage.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ContentAddressableStorage.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ContentAddressableStorage.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ContentAddressableStorage.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ContentAddressableStorage.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ContentAddressableStorage.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ContentAddressableStorage.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ContentAddressableStorage.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ContentAddressableStorage.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
Digest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
Digest.java,struct.hash = iprot.readString();,if (iprot != null ) struct.hash = iprot.readString();
Digest.java,struct.hash = iprot.readString();,if (iprot != null ) struct.hash = iprot.readString();
Directory.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
DirectoryNode.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
DirectoryNode.java,struct.name = iprot.readString();,if (iprot != null ) struct.name = iprot.readString();
DirectoryNode.java,struct.name = iprot.readString();,if (iprot != null ) struct.name = iprot.readString();
FileNode.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
FileNode.java,struct.name = iprot.readString();,if (iprot != null ) struct.name = iprot.readString();
FileNode.java,struct.name = iprot.readString();,if (iprot != null ) struct.name = iprot.readString();
FindMissingBlobsRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
FindMissingBlobsResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
GetTreeRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
GetTreeResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
InvalidDigest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
InvalidDigest.java,struct.message = iprot.readString();,if (iprot != null ) struct.message = iprot.readString();
InvalidDigest.java,struct.message = iprot.readString();,if (iprot != null ) struct.message = iprot.readString();
MissingDigest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
MissingDigest.java,struct.message = iprot.readString();,if (iprot != null ) struct.message = iprot.readString();
MissingDigest.java,struct.message = iprot.readString();,if (iprot != null ) struct.message = iprot.readString();
ReadBlobRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ReadBlobResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ReadBlobResponse.java,struct.data = iprot.readBinary();,if (iprot != null ) struct.data = iprot.readBinary();
ReadBlobResponse.java,struct.data = iprot.readBinary();,if (iprot != null ) struct.data = iprot.readBinary();
SymlinkNode.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
SymlinkNode.java,struct.name = iprot.readString();,if (iprot != null ) struct.name = iprot.readString();
SymlinkNode.java,struct.target = iprot.readString();,if (iprot != null ) struct.target = iprot.readString();
SymlinkNode.java,struct.name = iprot.readString();,if (iprot != null ) struct.name = iprot.readString();
SymlinkNode.java,struct.target = iprot.readString();,if (iprot != null ) struct.target = iprot.readString();
Tree.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
UpdateBlobRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
UpdateBlobRequest.java,struct.data = iprot.readBinary();,if (iprot != null ) struct.data = iprot.readBinary();
UpdateBlobRequest.java,struct.data = iprot.readBinary();,if (iprot != null ) struct.data = iprot.readBinary();
UpdateBlobResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
Action.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ActionResult.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
CancelExecutionRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
CancelExecutionResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
Capabilities.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
Command.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
Device.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
Device.java,struct.name = iprot.readString();,if (iprot != null ) struct.name = iprot.readString();
Device.java,struct.name = iprot.readString();,if (iprot != null ) struct.name = iprot.readString();
EnvironmentVariable.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
EnvironmentVariable.java,struct.name = iprot.readString();,if (iprot != null ) struct.name = iprot.readString();
EnvironmentVariable.java,struct.value = iprot.readString();,if (iprot != null ) struct.value = iprot.readString();
EnvironmentVariable.java,struct.name = iprot.readString();,if (iprot != null ) struct.name = iprot.readString();
EnvironmentVariable.java,struct.value = iprot.readString();,if (iprot != null ) struct.value = iprot.readString();
ExecuteRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ExecuteResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ExecutionEngine.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ExecutionEngine.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ExecutionEngine.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ExecutionEngine.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ExecutionEngine.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ExecutionEngine.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ExecutionMetadata.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ExecutionResult.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ExecutionState.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ExecutionState.java,struct.done = iprot.readBool();,if (iprot != null ) struct.done = iprot.readBool();
ExecutionState.java,struct.done = iprot.readBool();,if (iprot != null ) struct.done = iprot.readBool();
GetExecutionStateRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
GetExecutionStateResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
NonUniqueExecutionIdException.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
NonUniqueExecutionIdException.java,struct.message = iprot.readString();,if (iprot != null ) struct.message = iprot.readString();
NonUniqueExecutionIdException.java,struct.message = iprot.readString();,if (iprot != null ) struct.message = iprot.readString();
OutputDirectory.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
OutputDirectory.java,struct.path = iprot.readString();,if (iprot != null ) struct.path = iprot.readString();
OutputDirectory.java,struct.path = iprot.readString();,if (iprot != null ) struct.path = iprot.readString();
OutputFile.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
OutputFile.java,struct.path = iprot.readString();,if (iprot != null ) struct.path = iprot.readString();
OutputFile.java,struct.content = iprot.readBinary();,if (iprot != null ) struct.content = iprot.readBinary();
OutputFile.java,struct.path = iprot.readString();,if (iprot != null ) struct.path = iprot.readString();
OutputFile.java,struct.content = iprot.readBinary();,if (iprot != null ) struct.content = iprot.readBinary();
Property.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
Property.java,struct.name = iprot.readString();,if (iprot != null ) struct.name = iprot.readString();
Property.java,struct.value = iprot.readString();,if (iprot != null ) struct.value = iprot.readString();
Property.java,struct.name = iprot.readString();,if (iprot != null ) struct.name = iprot.readString();
Property.java,struct.value = iprot.readString();,if (iprot != null ) struct.value = iprot.readString();
RejectedActionException.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
RejectedActionException.java,struct.message = iprot.readString();,if (iprot != null ) struct.message = iprot.readString();
RejectedActionException.java,struct.message = iprot.readString();,if (iprot != null ) struct.message = iprot.readString();
RequiredDevice.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
RequiredWorkerHost.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
Requirements.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
Resource.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
Resource.java,struct.name = iprot.readString();,if (iprot != null ) struct.name = iprot.readString();
Resource.java,struct.value = iprot.readDouble();,if (iprot != null ) struct.value = iprot.readDouble();
Resource.java,struct.name = iprot.readString();,if (iprot != null ) struct.name = iprot.readString();
Resource.java,struct.value = iprot.readDouble();,if (iprot != null ) struct.value = iprot.readDouble();
ServiceOverloadedException.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ServiceOverloadedException.java,struct.message = iprot.readString();,if (iprot != null ) struct.message = iprot.readString();
ServiceOverloadedException.java,struct.message = iprot.readString();,if (iprot != null ) struct.message = iprot.readString();
UnknownExecutionIdException.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
UnknownExecutionIdException.java,struct.message = iprot.readString();,if (iprot != null ) struct.message = iprot.readString();
UnknownExecutionIdException.java,struct.message = iprot.readString();,if (iprot != null ) struct.message = iprot.readString();
WorkerHost.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
ThriftRemoteExecutionClients.java,TProtocolFactory protocolFactory = new TBinaryProtocol.Factory();,if (TBinaryProtocol != null ) TProtocolFactory protocolFactory = new TBinaryProtocol.Factory();
MergeAndroidResourcesStep.java,uberRDotTxtIds = Optional.empty();,if (Optional != null ) uberRDotTxtIds = Optional.empty();
AndroidPackageableCollector.java,ImmutableSet<BuildTarget> resources = ImmutableSet.copyOf(resourcesWithNonEmptyResDir.build());,if (ImmutableSet != null ) ImmutableSet<BuildTarget> resources = ImmutableSet.copyOf(resourcesWithNonEmptyResDir.build());
AbstractCommand.java,filename = filenameArg.getArg();,if (filenameArg != null ) filename = filenameArg.getArg();
Daemon.java,cursor = rootCell.getWatchman().buildClockWatchmanCursorMap();,if (rootCell != null ) cursor = rootCell.getWatchman().buildClockWatchmanCursorMap();
Daemon.java,cursor = rootCell.getWatchman().buildNamedWatchmanCursorMap();,if (rootCell != null ) cursor = rootCell.getWatchman().buildNamedWatchmanCursorMap();
XCVersionGroup.java,currentVersion = Optional.empty();,if (Optional != null ) currentVersion = Optional.empty();
CommandThreadFactory.java,this.state = GlobalStateManager.singleton().getThreadToCommandRegister();,if (GlobalStateManager != null ) this.state = GlobalStateManager.singleton().getThreadToCommandRegister();
PathOrGlobMatcher.java,this.basePath = Optional.empty();,if (Optional != null ) this.basePath = Optional.empty();
CxxToolFlags.java,Iterable<Arg> platformFlags = ImmutableList.of();,if (ImmutableList != null ) Iterable<Arg> platformFlags = ImmutableList.of();
CxxToolFlags.java,Iterable<Arg> ruleFlags = ImmutableList.of();,if (ImmutableList != null ) Iterable<Arg> ruleFlags = ImmutableList.of();
CxxToolFlags.java,"platformFlags = Iterables.concat(platformFlags, part.getPlatformFlags());","if (part != null ) platformFlags = Iterables.concat(platformFlags, part.getPlatformFlags());"
CxxToolFlags.java,"ruleFlags = Iterables.concat(ruleFlags, part.getRuleFlags());","if (part != null ) ruleFlags = Iterables.concat(ruleFlags, part.getRuleFlags());"
GoBinary.java,ImmutableList<String> cxxLinkerCommand = ImmutableList.of();,if (ImmutableList != null ) ImmutableList<String> cxxLinkerCommand = ImmutableList.of();
GoCompile.java,SourcePathResolver pathResolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver pathResolver = context.getSourcePathResolver();
GoDescriptors.java,treeMap = treeMapBuilder.build();,if (treeMapBuilder != null ) treeMap = treeMapBuilder.build();
BuckUnixPath.java,int otherNameCount = other.getNameCount();,if (other != null ) int otherNameCount = other.getNameCount();
ServerHealthManager.java,ServerHealthManagerEventData.Builder data = ServerHealthManagerEventData.builder();,if (ServerHealthManagerEventData != null ) ServerHealthManagerEventData.Builder data = ServerHealthManagerEventData.builder();
DistBuildControllerTest.java,scheduler = Executors.newSingleThreadScheduledExecutor();,if (Executors != null ) scheduler = Executors.newSingleThreadScheduledExecutor();
AbstractCommand.java,Path path = new File(filename).toPath();,if (File(filename) != null ) Path path = new File(filename).toPath();
AbstractCommand.java,String value = config.getSecond();,if (config != null ) String value = config.getSecond();
AbstractCommand.java,Path path = new File(filename).toPath();,if (File(filename) != null ) Path path = new File(filename).toPath();
AbstractCommand.java,String section = entry.getKey();,if (entry != null ) String section = entry.getKey();
AbstractCommand.java,String field = sectionEntry.getKey();,if (sectionEntry != null ) String field = sectionEntry.getKey();
AbstractCommand.java,String value = sectionEntry.getValue();,if (sectionEntry != null ) String value = sectionEntry.getValue();
AbstractCommand.java,CellConfig.Builder builder = CellConfig.builder();,if (CellConfig != null ) CellConfig.Builder builder = CellConfig.builder();
GenerateAssetsStep.java,File[] subdirectories = assetFile.listFiles();,if (assetFile != null ) File[] subdirectories = assetFile.listFiles();
HybridThriftOverHttpServiceImpl.java,ThriftResponse thriftResponse = responseHandler.getThriftResponse();,if (responseHandler != null ) ThriftResponse thriftResponse = responseHandler.getThriftResponse();
HybridThriftOverHttpServiceImpl.java,int thriftDataSizeBytes = bodyStream.readInt();,if (bodyStream != null ) int thriftDataSizeBytes = bodyStream.readInt();
ApkBuilderStep.java,KeystoreProperties keystoreProperties = keystorePropertiesSupplier.get();,if (keystorePropertiesSupplier != null ) KeystoreProperties keystoreProperties = keystorePropertiesSupplier.get();
ApkBuilderStep.java,char[] keystorePassword = keystoreProperties.getStorepass().toCharArray();,if (keystoreProperties != null ) char[] keystorePassword = keystoreProperties.getStorepass().toCharArray();
ApkBuilderStep.java,String alias = keystoreProperties.getAlias();,if (keystoreProperties != null ) String alias = keystoreProperties.getAlias();
ApkBuilderStep.java,char[] keyPassword = keystoreProperties.getKeypass().toCharArray();,if (keystoreProperties != null ) char[] keyPassword = keystoreProperties.getKeypass().toCharArray();
OcamlBinaryDescription.java,ImmutableList<OcamlSource> srcs = args.getSrcs();,if (args != null ) ImmutableList<OcamlSource> srcs = args.getSrcs();
OcamlLibraryDescription.java,ImmutableList<OcamlSource> srcs = args.getSrcs();,if (args != null ) ImmutableList<OcamlSource> srcs = args.getSrcs();
AppleBuildRulesTest.java,Cell rootCell = (new TestCellBuilder()).build();,if (TestCellBuilder()) != null ) Cell rootCell = (new TestCellBuilder()).build();
AppleBuildRulesTest.java,Cell rootCell = (new TestCellBuilder()).build();,if (TestCellBuilder()) != null ) Cell rootCell = (new TestCellBuilder()).build();
MachOUtilsCommand.java,return subcommand == null || subcommand.isReadOnly();,if (subcommand != null ) return subcommand == null || subcommand.isReadOnly();
AbstractLinkEditDataCommand.java,UnsignedInteger cmd = getLoadCommandCommonFields().getCmd();,if (getLoadCommandCommonFields() != null ) UnsignedInteger cmd = getLoadCommandCommonFields().getCmd();
CompDirReplacer.java,int offset = section.getOffset().intValue();,if (section != null ) int offset = section.getOffset().intValue();
LoadCommandUtils.java,int position = buffer.position();,if (buffer != null ) int position = buffer.position();
LoadCommandUtils.java,UnsignedInteger cmd = UnsignedInteger.fromIntBits(buffer.getInt());,if (UnsignedInteger != null ) UnsignedInteger cmd = UnsignedInteger.fromIntBits(buffer.getInt());
MachoHeaderUtils.java,int position = buffer.position();,if (buffer != null ) int position = buffer.position();
MachoHeaderUtils.java,UnsignedInteger magic = UnsignedInteger.fromIntBits(buffer.getInt());,if (UnsignedInteger != null ) UnsignedInteger magic = UnsignedInteger.fromIntBits(buffer.getInt());
MachoMagicInfoUtils.java,ByteOrder order = buffer.order();,if (buffer != null ) ByteOrder order = buffer.order();
ObjectPathsAbsolutifier.java,UUIDCommand updatedCommand = uuidCommand.withUuid(UUID.randomUUID());,if (uuidCommand != null ) UUIDCommand updatedCommand = uuidCommand.withUuid(UUID.randomUUID());
ObjectPathsAbsolutifier.java,LinkEditDataCommand command = codeSignatureData.get().getFirst();,if (codeSignatureData != null ) LinkEditDataCommand command = codeSignatureData.get().getFirst();
ObjectPathsAbsolutifier.java,ByteBuffer contents = codeSignatureData.get().getSecond();,if (codeSignatureData != null ) ByteBuffer contents = codeSignatureData.get().getSecond();
ObjectPathsAbsolutifier.java,LinkEditDataCommand codeSignCommand = updatedCodeSignatureCommand.get();,if (updatedCodeSignatureCommand != null ) LinkEditDataCommand codeSignCommand = updatedCodeSignatureCommand.get();
ObjectPathsAbsolutifier.java,fileSize -= original.getFileoff().intValue();,if (original != null ) fileSize -= original.getFileoff().intValue();
ObjectPathsAbsolutifier.java,UnsignedInteger originalStringTableSize = symTabCommand.getStrsize();,if (symTabCommand != null ) UnsignedInteger originalStringTableSize = symTabCommand.getStrsize();
ObjectPathsAbsolutifier.java,absolutePathString = absolutePath.toString();,if (absolutePath != null ) absolutePathString = absolutePath.toString();
ObjectPathsAbsolutifier.java,absolutePathString = unsanitizedAbsolutePath.toString();,if (unsanitizedAbsolutePath != null ) absolutePathString = unsanitizedAbsolutePath.toString();
ObjectPathsAbsolutifier.java,Path source = entry.getKey();,if (entry != null ) Path source = entry.getKey();
ObjectPathsAbsolutifier.java,Path destination = entry.getValue();,if (entry != null ) Path destination = entry.getValue();
ObjectPathsAbsolutifier.java,ByteOrder order = buffer.order();,if (buffer != null ) ByteOrder order = buffer.order();
ObjectPathsAbsolutifier.java,int position = buffer.position();,if (buffer != null ) int position = buffer.position();
ObjectPathsAbsolutifier.java,String string = path.toString();,if (path != null ) String string = path.toString();
ObjectPathsAbsolutifier.java,String string = path.toString();,if (path != null ) String string = path.toString();
ObjectPathsAbsolutifier.java,absolutePath = absolutePath.toRealPath();,if (absolutePath != null ) absolutePath = absolutePath.toRealPath();
ObjectPathsAbsolutifier.java,absolutePath = otherCellPath.toRealPath();,if (otherCellPath != null ) absolutePath = otherCellPath.toRealPath();
ObjectPathsAbsolutifier.java,absolutePath = Paths.get(absolutePath + archiveEntryName.get());,if (archiveEntryName != null ) absolutePath = Paths.get(absolutePath + archiveEntryName.get());
SectionUtils.java,int offset = buffer.position();,if (buffer != null ) int offset = buffer.position();
SymTabCommandUtils.java,byte value = buffer.get();,if (buffer != null ) byte value = buffer.get();
SymTabCommandUtils.java,lastValue = buffer.get();,if (buffer != null ) lastValue = buffer.get();
SymTabCommandUtils.java,byte value = buffer.get();,if (buffer != null ) byte value = buffer.get();
UUIDCommandUtils.java,ByteOrder order = buffer.order();,if (buffer != null ) ByteOrder order = buffer.order();
UUIDCommandUtils.java,long high = buffer.getLong();,if (buffer != null ) long high = buffer.getLong();
UUIDCommandUtils.java,long low = buffer.getLong();,if (buffer != null ) long low = buffer.getLong();
UnixArchive.java,long start = entry.getFileOffset();,if (entry != null ) long start = entry.getFileOffset();
UnixArchive.java,long len = entry.getFileSize();,if (entry != null ) long len = entry.getFileSize();
UnixArchive.java,offset = buffer.position();,if (buffer != null ) offset = buffer.position();
UnixArchive.java,int oldLimit = buffer.limit();,if (buffer != null ) int oldLimit = buffer.limit();
UnixArchive.java,String result = charsetDecoder.decode(buffer).toString();,if (charsetDecoder != null ) String result = charsetDecoder.decode(buffer).toString();
UnixArchive.java,int offset = buffer.position();,if (buffer != null ) int offset = buffer.position();
UnixArchive.java,int offset = buffer.position();,if (buffer != null ) int offset = buffer.position();
CompDirReplacerIntegrationTest.java,filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());,if (TestProjectFilesystems != null ) filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());
CompDirReplacerIntegrationTest.java,String oldCompDirValue = sanitizer.getCompilationDirectory();,if (sanitizer != null ) String oldCompDirValue = sanitizer.getCompilationDirectory();
CompDirReplacerIntegrationTest.java,String newCompDirValue = workspace.getDestPath().toString();,if (workspace != null ) String newCompDirValue = workspace.getDestPath().toString();
LoadCommandUtilsTest.java,byte[] symtabBytes = SymTabCommandTestData.getBigEndian();,if (SymTabCommandTestData != null ) byte[] symtabBytes = SymTabCommandTestData.getBigEndian();
LoadCommandUtilsTest.java,byte[] symtabBytes = SymTabCommandTestData.getBigEndian();,if (SymTabCommandTestData != null ) byte[] symtabBytes = SymTabCommandTestData.getBigEndian();
LoadCommandUtilsTest.java,byte[] uuidBytes = UUIDCommandTestData.getBigEndian();,if (UUIDCommandTestData != null ) byte[] uuidBytes = UUIDCommandTestData.getBigEndian();
LoadCommandUtilsTest.java,byte[] linkEditBytes = LinkEditCommandTestData.getCodeSignBigEndian();,if (LinkEditCommandTestData != null ) byte[] linkEditBytes = LinkEditCommandTestData.getCodeSignBigEndian();
ObjectPathsAbsolutifierIntegrationTest.java,filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());,if (TestProjectFilesystems != null ) filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());
ObjectPathsAbsolutifierIntegrationTest.java,String oldCompDirValue = sanitizer.getCompilationDirectory();,if (sanitizer != null ) String oldCompDirValue = sanitizer.getCompilationDirectory();
ObjectPathsAbsolutifierIntegrationTest.java,String newCompDirValue = workspace.getDestPath().toString();,if (workspace != null ) String newCompDirValue = workspace.getDestPath().toString();
ObjectPathsAbsolutifierIntegrationTest.java,Path sanitizedBinaryPath = appPath.resolve(target.getShortName());,if (appPath != null ) Path sanitizedBinaryPath = appPath.resolve(target.getShortName());
ObjectPathsAbsolutifierIntegrationTest.java,String oldCompDirValue = sanitizer.getCompilationDirectory();,if (sanitizer != null ) String oldCompDirValue = sanitizer.getCompilationDirectory();
ObjectPathsAbsolutifierIntegrationTest.java,String newCompDirValue = workspace.getDestPath().toString();,if (workspace != null ) String newCompDirValue = workspace.getDestPath().toString();
SymTabCommandUtilsTest.java,commandBytes = SymTabCommandTestData.getLittleEndian();,if (SymTabCommandTestData != null ) commandBytes = SymTabCommandTestData.getLittleEndian();
SymTabCommandUtilsTest.java,commandBytes = SymTabCommandTestData.getBigEndian();,if (SymTabCommandTestData != null ) commandBytes = SymTabCommandTestData.getBigEndian();
SymTabCommandUtilsTest.java,byte[] commandBytes = SymTabCommandTestData.getBigEndian();,if (SymTabCommandTestData != null ) byte[] commandBytes = SymTabCommandTestData.getBigEndian();
SymTabCommandUtilsTest.java,byte[] commandBytes = SymTabCommandTestData.getBigEndian();,if (SymTabCommandTestData != null ) byte[] commandBytes = SymTabCommandTestData.getBigEndian();
SymTabCommandUtilsTest.java,byte[] commandBytes = SymTabCommandTestData.getBigEndian();,if (SymTabCommandTestData != null ) byte[] commandBytes = SymTabCommandTestData.getBigEndian();
SymTabCommandUtilsTest.java,byte[] commandBytes = SymTabCommandTestData.getBigEndian();,if (SymTabCommandTestData != null ) byte[] commandBytes = SymTabCommandTestData.getBigEndian();
SymTabCommandUtilsTest.java,byte[] commandBytes = SymTabCommandTestData.getBigEndian();,if (SymTabCommandTestData != null ) byte[] commandBytes = SymTabCommandTestData.getBigEndian();
SymTabCommandUtilsTest.java,byte[] commandBytes = SymTabCommandTestData.getBigEndian();,if (SymTabCommandTestData != null ) byte[] commandBytes = SymTabCommandTestData.getBigEndian();
UUIDCommandUtilsTest.java,UUID newValue = UUID.randomUUID();,if (UUID != null ) UUID newValue = UUID.randomUUID();
UnixArchiveTest.java,FileWriter writer = new FileWriter(path.toFile());,if (FileWriter(path != null ) FileWriter writer = new FileWriter(path.toFile());
JavaBinaryDescription.java,SourcePath innerJar = innerJarRule.getSourcePathToOutput();,if (innerJarRule != null ) SourcePath innerJar = innerJarRule.getSourcePathToOutput();
Build.java,ProjectFilesystem filesystem = cell.getFilesystem();,if (cell != null ) ProjectFilesystem filesystem = cell.getFilesystem();
Build.java,BuckPaths buckPaths = filesystem.getBuckPaths();,if (filesystem != null ) BuckPaths buckPaths = filesystem.getBuckPaths();
IjProjectWriter.java,Path projectIdeaConfigDir = projectConfig.getProjectPaths().getIdeaConfigDir();,if (projectConfig != null ) Path projectIdeaConfigDir = projectConfig.getProjectPaths().getIdeaConfigDir();
IjProjectWriter.java,Path indexFile = writeModulesIndex(projectDataPreparer.getModuleIndexEntries());,if (writeModulesIndex(projectDataPreparer != null ) Path indexFile = writeModulesIndex(projectDataPreparer.getModuleIndexEntries());
IjProjectWriter.java,Path path = module.getModuleImlFilePath();,if (module != null ) Path path = module.getModuleImlFilePath();
IjProjectWriter.java,Path projectIdeaConfigDir = projectConfig.getProjectPaths().getIdeaConfigDir();,if (projectConfig != null ) Path projectIdeaConfigDir = projectConfig.getProjectPaths().getIdeaConfigDir();
ExternallyBuiltApplePackageTest.java,private BuildRuleParams params = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) private BuildRuleParams params = TestBuildRuleParams.create();
SkylarkProjectBuildFileParser.java,int expectedSize = dependencies.size(); // extension paths,if (paths != null ) int expectedSize = dependencies.size(); // extension paths
JavacToJarStepFactory.java,boolean generatingCode = !javacOptions.getAnnotationProcessingParams().isEmpty();,if (!javacOptions != null ) boolean generatingCode = !javacOptions.getAnnotationProcessingParams().isEmpty();
JavacToJarStepFactory.java,boolean generatingCode = !buildTimeOptions.getAnnotationProcessingParams().isEmpty();,if (!buildTimeOptions != null ) boolean generatingCode = !buildTimeOptions.getAnnotationProcessingParams().isEmpty();
GroovycToJarStepFactory.java,Path outputDirectory = parameters.getOutputDirectory();,if (parameters != null ) Path outputDirectory = parameters.getOutputDirectory();
GroovycToJarStepFactory.java,Path pathToSrcsList = parameters.getPathToSourcesList();,if (parameters != null ) Path pathToSrcsList = parameters.getPathToSourcesList();
KotlincToJarStepFactory.java,Path outputDirectory = parameters.getOutputDirectory();,if (parameters != null ) Path outputDirectory = parameters.getOutputDirectory();
KotlincToJarStepFactory.java,Path pathToSrcsList = parameters.getPathToSourcesList();,if (parameters != null ) Path pathToSrcsList = parameters.getPathToSourcesList();
ScalacToJarStepFactory.java,Path outputDirectory = parameters.getOutputDirectory();,if (parameters != null ) Path outputDirectory = parameters.getOutputDirectory();
BuildCommand.java,int distributedBuildExitCode = stampedeBuildClient.getDistBuildExitCode();,if (stampedeBuildClient != null ) int distributedBuildExitCode = stampedeBuildClient.getDistBuildExitCode();
AbstractBuckGlobals.java,BuiltinFunction readConfigFunction = ReadConfig.create();,if (ReadConfig != null ) BuiltinFunction readConfigFunction = ReadConfig.create();
AndroidBinaryBuildable.java,boolean shouldPackageAssetLibraries = packageAssetLibraries || !module.isRootModule();,if (!module != null ) boolean shouldPackageAssetLibraries = packageAssetLibraries || !module.isRootModule();
CachingBuildEngineTest.java,CustomZipEntry entry = new CustomZipEntry(mapEntry.getKey());,if (CustomZipEntry(mapEntry != null ) CustomZipEntry entry = new CustomZipEntry(mapEntry.getKey());
LazyPath.java,Path result = path.get();,if (path != null ) Path result = path.get();
LazyPath.java,Path result = path.get();,if (path != null ) Path result = path.get();
KnownBuildRuleDescriptionsFactory.java,KnownBuildRuleTypes.Builder builder = KnownBuildRuleTypes.builder();,if (KnownBuildRuleTypes != null ) KnownBuildRuleTypes.Builder builder = KnownBuildRuleTypes.builder();
KnownBuildRuleTypesTest.java,PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();,if (BuckPluginManagerFactory != null ) PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();
KnownBuildRuleTypesTest.java,BuckConfig buckConfig = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig buckConfig = FakeBuckConfig.builder().build();
KnownBuildRuleTypesTest.java,Path javac = temporaryFolder.newExecutableFile();,if (temporaryFolder != null ) Path javac = temporaryFolder.newExecutableFile();
KnownBuildRuleTypesTest.java,BuckConfig buckConfig = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig buckConfig = FakeBuckConfig.builder().build();
KnownRuleTypesTest.java,KnownBuildRuleTypes.Builder buildRuleTypesBuilder = KnownBuildRuleTypes.builder();,if (KnownBuildRuleTypes != null ) KnownBuildRuleTypes.Builder buildRuleTypesBuilder = KnownBuildRuleTypes.builder();
KnownRuleTypesTestUtil.java,PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();,if (BuckPluginManagerFactory != null ) PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();
KnownBuildRuleTypesTest.java,Path javac = temporaryFolder.newExecutableFile();,if (temporaryFolder != null ) Path javac = temporaryFolder.newExecutableFile();
KnownRuleTypesTest.java,Path javac = temporaryFolder.newExecutableFile();,if (temporaryFolder != null ) Path javac = temporaryFolder.newExecutableFile();
KnownBuildRuleTypesTest.java,KnownBuildRuleTypes.Builder buildRuleTypesBuilder = KnownBuildRuleTypes.builder();,if (KnownBuildRuleTypes != null ) KnownBuildRuleTypes.Builder buildRuleTypesBuilder = KnownBuildRuleTypes.builder();
DaemonLifecycleManagerTest.java,FakeProcessExecutor fakeProcessExecutor = new FakeProcessExecutor(fakeProcessesBuilder.build());,if (FakeProcessExecutor(fakeProcessesBuilder != null ) FakeProcessExecutor fakeProcessExecutor = new FakeProcessExecutor(fakeProcessesBuilder.build());
DaemonLifecycleManagerTest.java,FakeProcessExecutor fakeProcessExecutor = new FakeProcessExecutor(fakeProcessesBuilder.build());,if (FakeProcessExecutor(fakeProcessesBuilder != null ) FakeProcessExecutor fakeProcessExecutor = new FakeProcessExecutor(fakeProcessesBuilder.build());
DistBuildStateTest.java,Config config = new Config(ConfigBuilder.rawFromLines());,if (Config(ConfigBuilder != null ) Config config = new Config(ConfigBuilder.rawFromLines());
AuditCellCommand.java,CellPathResolver cellPathResolver = params.getBuckConfig().getCellPathResolver();,if (params != null ) CellPathResolver cellPathResolver = params.getBuckConfig().getCellPathResolver();
XCodeProjectCommandHelper.java,ProjectTestsMode parameterMode = buckConfig.xcodeProjectTestsMode();,if (buckConfig != null ) ProjectTestsMode parameterMode = buckConfig.xcodeProjectTestsMode();
ArtifactUploaderTest.java,archiveContents = TarInspector.readTarZst(output.getPath());,if (TarInspector != null ) archiveContents = TarInspector.readTarZst(output.getPath());
DefaultJavaLibraryIntegrationTest.java,String fileName = mapEntry.getKey();,if (mapEntry != null ) String fileName = mapEntry.getKey();
DefaultJavaLibraryIntegrationTest.java,byte[] fileContents = mapEntry.getValue();,if (mapEntry != null ) byte[] fileContents = mapEntry.getValue();
DefaultTargetNodeToBuildRuleTransformer.java,DescriptionWithTargetGraph<T> description = targetNode.getDescription();,if (targetNode != null ) DescriptionWithTargetGraph<T> description = targetNode.getDescription();
AndroidBinaryIntegrationTest.java,BuckBuildLog buildLog = workspace.getBuildLog();,if (workspace != null ) BuckBuildLog buildLog = workspace.getBuildLog();
AndroidBinaryIntegrationTest.java,buildLog = workspace.getBuildLog();,if (workspace != null ) buildLog = workspace.getBuildLog();
AndroidBinaryIntegrationTest.java,BuckBuildLog buildLog = workspace.getBuildLog();,if (workspace != null ) BuckBuildLog buildLog = workspace.getBuildLog();
BuildTargetDurationListener.java,Optional<BuildRuleInfo> critical = findCriticalNode(buildRuleInfos.values());,if (findCriticalNode(buildRuleInfos != null ) Optional<BuildRuleInfo> critical = findCriticalNode(buildRuleInfos.values());
BuildTargetDurationListener.java,Optional<BuildRuleInfo> lastNodeOfCriticalPath = Optional.empty();,if (Optional != null ) Optional<BuildRuleInfo> lastNodeOfCriticalPath = Optional.empty();
BuildTargetDurationListener.java,Deque<BuildRuleInfo> criticalPath = Queues.newArrayDeque();,if (Queues != null ) Deque<BuildRuleInfo> criticalPath = Queues.newArrayDeque();
BuildTargetDurationListener.java,Optional<BuildRuleInfo> longestDependencyChain = Optional.empty();,if (Optional != null ) Optional<BuildRuleInfo> longestDependencyChain = Optional.empty();
BuildTargetDurationListener.java,this.previousRuleInLongestDependencyChain = Optional.empty();,if (Optional != null ) this.previousRuleInLongestDependencyChain = Optional.empty();
BuildTargetDurationListenerTest.java,buildRuleInfos = Maps.newConcurrentMap();,if (Maps != null ) buildRuleInfos = Maps.newConcurrentMap();
AbstractCxxSourceRuleFactory.java,SymlinkTree tree = getSandboxTree().get();,if (getSandboxTree() != null ) SymlinkTree tree = getSandboxTree().get();
AbstractCxxSourceRuleFactory.java,SymlinkTree sandboxTree = getSandboxTree().get();,if (getSandboxTree() != null ) SymlinkTree sandboxTree = getSandboxTree().get();
CxxDescriptionEnhancer.java,Optional<SymlinkTree> sandboxTree = Optional.empty();,if (Optional != null ) Optional<SymlinkTree> sandboxTree = Optional.empty();
CxxDescriptionEnhancer.java,SourcePath sourcePath = source.getPath();,if (source != null ) SourcePath sourcePath = source.getPath();
CxxInferEnhancer.java,Optional<SymlinkTree> sandboxTree = Optional.empty();,if (Optional != null ) Optional<SymlinkTree> sandboxTree = Optional.empty();
CxxLibraryFactory.java,Optional<SymlinkTree> sandboxTree = Optional.empty();,if (Optional != null ) Optional<SymlinkTree> sandboxTree = Optional.empty();
CxxLuaExtensionDescription.java,Optional<SymlinkTree> sandboxTree = Optional.empty();,if (Optional != null ) Optional<SymlinkTree> sandboxTree = Optional.empty();
CxxPythonExtensionDescription.java,Optional<SymlinkTree> sandboxTree = Optional.empty();,if (Optional != null ) Optional<SymlinkTree> sandboxTree = Optional.empty();
HalideLibraryDescription.java,CxxPlatform hostCxxPlatform = cxxPlatforms.getValue(CxxPlatforms.getHostFlavor());,if (cxxPlatforms != null ) CxxPlatform hostCxxPlatform = cxxPlatforms.getValue(CxxPlatforms.getHostFlavor());
AbstractCxxSandboxInclude.java,CxxSandboxInclude.Builder builder = CxxSandboxInclude.builder();,if (CxxSandboxInclude != null ) CxxSandboxInclude.Builder builder = CxxSandboxInclude.builder();
CachingBuildEngineTest.java,CustomZipEntry entry = new CustomZipEntry(mapEntry.getKey());,if (CustomZipEntry(mapEntry != null ) CustomZipEntry entry = new CustomZipEntry(mapEntry.getKey());
Genrule.java,Path basePath = getBuildTarget().getBasePath();,if (getBuildTarget() != null ) Path basePath = getBuildTarget().getBasePath();
Genrule.java,Path canonicalPath = absolutePath.normalize();,if (absolutePath != null ) Path canonicalPath = absolutePath.normalize();
Genrule.java,localPath = canonicalPath.getFileName();,if (canonicalPath != null ) localPath = canonicalPath.getFileName();
AbstractSourceSortedSet.java,SourceList.Builder builder = SourceList.builder();,if (SourceList != null ) SourceList.Builder builder = SourceList.builder();
BuildTargetDurationListener.java,final String testRuleName = testRule.getFullyQualifiedName();,if (testRule != null ) final String testRuleName = testRule.getFullyQualifiedName();
WatchmanWatcher.java,Path ignorePath = ignorePathOrGlob.getPath();,if (ignorePathOrGlob != null ) Path ignorePath = ignorePathOrGlob.getPath();
WatchmanWatcher.java,String ignoreGlob = ignorePathOrGlob.getGlob();,if (ignorePathOrGlob != null ) String ignoreGlob = ignorePathOrGlob.getGlob();
AbstractCommand.java,CellConfig.Builder builder = CellConfig.builder();,if (CellConfig != null ) CellConfig.Builder builder = CellConfig.builder();
AbstractCommand.java,String value = entry.getValue();,if (entry != null ) String value = entry.getValue();
ChromeTraceBuildListener.java,Optional<URI> traceUploadUri = config.getTraceUploadUriIfEnabled();,if (config != null ) Optional<URI> traceUploadUri = config.getTraceUploadUriIfEnabled();
AndroidBinaryDescription.java,primaryDexPatterns = args.getPrimaryDexPatterns();,if (args != null ) primaryDexPatterns = args.getPrimaryDexPatterns();
ServerHealthManagerTest.java,URI server = manager.getBestServer();,if (manager != null ) URI server = manager.getBestServer();
DistBuildRunner.java,Throwable exception = result.exception.get();,if (result != null ) Throwable exception = result.exception.get();
DefaultTargetNodeToBuildRuleTransformer.java,U description = targetNode.getDescription();,if (targetNode != null ) U description = targetNode.getDescription();
WorkspaceAndProjectGenerator.java,schemeNameToSrcTargetNodeBuilder = ImmutableSetMultimap.builder();,if (ImmutableSetMultimap != null ) schemeNameToSrcTargetNodeBuilder = ImmutableSetMultimap.builder();
CellPathResolverViewTest.java,ImmutableSet<Path> knownRoots = view.getKnownRoots();,if (view != null ) ImmutableSet<Path> knownRoots = view.getKnownRoots();
DefaultSelectorListResolver.java,SelectorKey selectorKey = entry.getKey();,if (entry != null ) SelectorKey selectorKey = entry.getKey();
DefaultSelectorListResolver.java,Selectable selectable = selectableResolver.getSelectable(selectorKey.getBuildTarget());,if (selectableResolver != null ) Selectable selectable = selectableResolver.getSelectable(selectorKey.getBuildTarget());
GoProjectCommandHelper.java,vendorPath = Paths.get(vendorConfig.get());,if (Paths != null ) vendorPath = Paths.get(vendorConfig.get());
ProjectGenerator.java,AppleTestDescriptionArg testArg = testNode.get().getConstructorArg();,if (testNode != null ) AppleTestDescriptionArg testArg = testNode.get().getConstructorArg();
ProjectGenerator.java,BuildTarget buildTarget = targetNode.getBuildTarget();,if (targetNode != null ) BuildTarget buildTarget = targetNode.getBuildTarget();
ProjectGenerator.java,CxxLibraryDescription.CommonArg arg = targetNode.getConstructorArg();,if (targetNode != null ) CxxLibraryDescription.CommonArg arg = targetNode.getConstructorArg();
AuditBuildRuleTypeCommand.java,String name = DescriptionCache.getBuildRuleType(description).getName();,if (DescriptionCache != null ) String name = DescriptionCache.getBuildRuleType(description).getName();
RuleFunctionFactory.java,String name = DescriptionCache.getBuildRuleType(ruleClass).getName();,if (DescriptionCache != null ) String name = DescriptionCache.getBuildRuleType(ruleClass).getName();
DistBuildRunner.java,exitCode = distBuildControllerInvoker.runDistBuildAndReturnExitCode();,if (distBuildControllerInvoker != null ) exitCode = distBuildControllerInvoker.runDistBuildAndReturnExitCode();
GenerateBundleConfigStepTest.java,ExecutionContext executionContext = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext executionContext = TestExecutionContext.newInstance();
OfflineScribeLogger.java,logFile = logPath.toFile();,if (logPath != null ) logFile = logPath.toFile();
OfflineScribeLogger.java,totalBytesToSend += logFile.length();,if (logFile != null ) totalBytesToSend += logFile.length();
OfflineScribeLogger.java,ScribeData newData = it.next();,if (it != null ) ScribeData newData = it.next();
OfflineScribeLogger.java,CategoryData categoryData = logReadData.get(newData.getCategory());,if (logReadData != null ) CategoryData categoryData = logReadData.get(newData.getCategory());
FileClassPathRunner.java,ClassLoader sysLoader = ClassLoader.getSystemClassLoader();,if (ClassLoader != null ) ClassLoader sysLoader = ClassLoader.getSystemClassLoader();
FileClassPathRunner.java,List<Path> paths = getClasspathFiles(urlClassLoader.getURLs());,if (getClasspathFiles(urlClassLoader != null ) List<Path> paths = getClasspathFiles(urlClassLoader.getURLs());
FileClassPathRunner.java,String path = url.getPath();,if (url != null ) String path = url.getPath();
FileClassPathRunner.java,Iterator<String> iterator = classPathEntries.iterator();,if (classPathEntries != null ) Iterator<String> iterator = classPathEntries.iterator();
FileClassPathRunnerTest.java,Path urlsAreHere = tmp.newFile().toPath();,if (tmp != null ) Path urlsAreHere = tmp.newFile().toPath();
FileClassPathRunnerTest.java,Path urlsAreHere = tmp.newFile().toPath();,if (tmp != null ) Path urlsAreHere = tmp.newFile().toPath();
FileClassPathRunnerTest.java,List<URL> allUrls = Arrays.asList(loader.getURLs());,if (Arrays != null ) List<URL> allUrls = Arrays.asList(loader.getURLs());
AbstractImmutableUnflavoredBuildTarget.java,"cmp = StringsUtils.compareStrings(getBaseName(), o.getBaseName());","if (o != null ) cmp = StringsUtils.compareStrings(getBaseName(), o.getBaseName());"
FileClassPathRunner.java,URLClassLoader urlClassLoader = (URLClassLoader) ClassLoader.getSystemClassLoader();,if (ClassLoader != null ) URLClassLoader urlClassLoader = (URLClassLoader) ClassLoader.getSystemClassLoader();
FileClassPathRunner.java,ClassLoader sysLoader = ClassLoader.getSystemClassLoader();,if (ClassLoader != null ) ClassLoader sysLoader = ClassLoader.getSystemClassLoader();
FileClassPathRunner.java,List<Path> paths = getClasspathFiles(urlClassLoader.getURLs());,if (getClasspathFiles(urlClassLoader != null ) List<Path> paths = getClasspathFiles(urlClassLoader.getURLs());
FileClassPathRunner.java,String path = url.getPath();,if (url != null ) String path = url.getPath();
FileClassPathRunner.java,Iterator<String> iterator = classPathEntries.iterator();,if (classPathEntries != null ) Iterator<String> iterator = classPathEntries.iterator();
FileClassPathRunnerTest.java,Path urlsAreHere = tmp.newFile().toPath();,if (tmp != null ) Path urlsAreHere = tmp.newFile().toPath();
FileClassPathRunnerTest.java,Path urlsAreHere = tmp.newFile().toPath();,if (tmp != null ) Path urlsAreHere = tmp.newFile().toPath();
FileClassPathRunnerTest.java,List<URL> allUrls = Arrays.asList(loader.getURLs());,if (Arrays != null ) List<URL> allUrls = Arrays.asList(loader.getURLs());
RustCompileUtils.java,ret = linkStyle.get();,if (linkStyle != null ) ret = linkStyle.get();
Untar.java,Set<Path> directories = creator.recordedDirectories();,if (creator != null ) Set<Path> directories = creator.recordedDirectories();
SupportsPipelining.java,result = result.getPreviousRuleInPipeline();,if (result != null ) result = result.getPreviousRuleInPipeline();
AndroidBinaryGraphEnhancer.java,ImmutableList<SourcePath> proguardConfigs = proguardConfigsBuilder.build();,if (proguardConfigsBuilder != null ) ImmutableList<SourcePath> proguardConfigs = proguardConfigsBuilder.build();
ApkGenruleTest.java,ProjectFilesystem projectFilesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();,if (FakeProjectFilesystem != null ) ProjectFilesystem projectFilesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();
ProjectCommand.java,ProjectSubCommand subCommand = subcommands.get(projectIde.getName());,if (subcommands != null ) ProjectSubCommand subCommand = subcommands.get(projectIde.getName());
AuditConfigCommand.java,"BuckConfig buckConfig = getCellBuckConfig(rootCell, arg.getCellName());","if (arg != null ) BuckConfig buckConfig = getCellBuckConfig(rootCell, arg.getCellName());"
AuditConfigCommand.java,DirtyPrintStreamDecorator stdErr = params.getConsole().getStdErr();,if (params != null ) DirtyPrintStreamDecorator stdErr = params.getConsole().getStdErr();
GoCompile.java,String filename = src.getFileName().toString();,if (src != null ) String filename = src.getFileName().toString();
ProjectCommand.java,ListeningExecutorService executor = pool.getListeningExecutorService();,if (pool != null ) ListeningExecutorService executor = pool.getListeningExecutorService();
AdditionalOptionsCmdLineParser.java,Object fieldValue = f.getType().newInstance();,if (f != null ) Object fieldValue = f.getType().newInstance();
Main.java,pluginManager = BuckPluginManagerFactory.createPluginManager();,if (BuckPluginManagerFactory != null ) pluginManager = BuckPluginManagerFactory.createPluginManager();
SkylarkProjectBuildFileParser.java,Environment extensionEnv = envBuilder.useDefaultSemantics().build();,if (envBuilder != null ) Environment extensionEnv = envBuilder.useDefaultSemantics().build();
DefaultJavaAbiInfo.java,contents = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) contents = ImmutableSortedSet.of();
DefaultJavaAbiInfo.java,contentPaths = ImmutableSet.of();,if (ImmutableSet != null ) contentPaths = ImmutableSet.of();
JarContentsSupplier.java,contents = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) contents = ImmutableSortedSet.of();
HasJavaAbi.java,contents = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) contents = ImmutableSortedSet.of();
BuildOutputInitializer.java,buildOutput = initializableFromDisk.initializeFromDisk();,if (initializableFromDisk != null ) buildOutput = initializableFromDisk.initializeFromDisk();
CopyResourcesStep.java,BuildTarget underlyingTarget = underlyingRule.get().getBuildTarget();,if (underlyingRule != null ) BuildTarget underlyingTarget = underlyingRule.get().getBuildTarget();
AndroidBinaryInstallGraphEnhancer.java,ApkInfo apkInfo = androidBinary.getApkInfo();,if (androidBinary != null ) ApkInfo apkInfo = androidBinary.getApkInfo();
Main.java,exceptionHandlerRegistry = ExceptionHandlerRegistryFactory.create();,if (ExceptionHandlerRegistryFactory != null ) exceptionHandlerRegistry = ExceptionHandlerRegistryFactory.create();
ExceptionHandlerRegistryTest.java,String text = console.getTextWrittenToStdErr();,if (console != null ) String text = console.getTextWrittenToStdErr();
ExceptionHandlerRegistryTest.java,String consoleText = console.getTextWrittenToStdErr();,if (console != null ) String consoleText = console.getTextWrittenToStdErr();
ExceptionHandlerRegistryTest.java,String consoleText = console.getTextWrittenToStdErr();,if (console != null ) String consoleText = console.getTextWrittenToStdErr();
ExceptionHandlerRegistryTest.java,String consoleText = console.getTextWrittenToStdErr();,if (console != null ) String consoleText = console.getTextWrittenToStdErr();
ErrorLogger.java,String augmentedError = errorAugmentor.getAugmentedError(messageBuilder.toString());,if (errorAugmentor != null ) String augmentedError = errorAugmentor.getAugmentedError(messageBuilder.toString());
WindowsFS.java,int lastError = WindowsFSLibrary.INSTANCE.GetLastError();,if (WindowsFSLibrary != null ) int lastError = WindowsFSLibrary.INSTANCE.GetLastError();
RealAndroidDevice.java,name = device.getSerialNumber();,if (device != null ) name = device.getSerialNumber();
RealAndroidDevice.java,name = device.getSerialNumber();,if (device != null ) name = device.getSerialNumber();
AdbHelper.java,Optional<ExopackageInfo> exopackageInfo = hasInstallableApk.getApkInfo().getExopackageInfo();,if (hasInstallableApk != null ) Optional<ExopackageInfo> exopackageInfo = hasInstallableApk.getApkInfo().getExopackageInfo();
BuildInfoRecorderTest.java,"byte[] contents = ""contents"".getBytes();","if (""contents"" != null ) byte[] contents = ""contents"".getBytes();"
CacheOptimizedBuildTargetsQueueFactoryTest.java,BuildRuleResolver resolver = CustomActiongGraphBuilderFactory.createSimpleBuilder();,if (CustomActiongGraphBuilderFactory != null ) BuildRuleResolver resolver = CustomActiongGraphBuilderFactory.createSimpleBuilder();
BuildCommand.java,ProjectFilesystem projectFilesystem = rule.getProjectFilesystem();,if (rule != null ) ProjectFilesystem projectFilesystem = rule.getProjectFilesystem();
AndroidBinaryFactory.java,boolean redexRequested = arg.getRedex();,if (arg != null ) boolean redexRequested = arg.getRedex();
DelegatingClassLoader.java,ClassLoader appClassLoader = getClass().getClassLoader();,if (getClass() != null ) ClassLoader appClassLoader = getClass().getClassLoader();
DelegatingClassLoader.java,final DelegatingClassLoader instance = DelegatingClassLoader.getInstance();,if (DelegatingClassLoader != null ) final DelegatingClassLoader instance = DelegatingClassLoader.getInstance();
HaskellHaddockDescription.java,Iterable<BuildRule> deps = graphBuilder.getAllRules(args.getDeps());,if (graphBuilder != null ) Iterable<BuildRule> deps = graphBuilder.getAllRules(args.getDeps());
AndroidBinaryDescription.java,ImmutableSortedSet<BuildRule> buildRulesToExcludeFromDex = builder.build();,if (builder != null ) ImmutableSortedSet<BuildRule> buildRulesToExcludeFromDex = builder.build();
AndroidBinaryDescription.java,exopackageModes = EnumSet.copyOf(args.getExopackageModes());,if (EnumSet != null ) exopackageModes = EnumSet.copyOf(args.getExopackageModes());
AndroidBinaryDescription.java,BuildRule keystore = graphBuilder.getRule(args.getKeystore());,if (graphBuilder != null ) BuildRule keystore = graphBuilder.getRule(args.getKeystore());
AndroidBinaryDescription.java,AndroidGraphEnhancementResult result = graphEnhancer.createAdditionalBuildables();,if (graphEnhancer != null ) AndroidGraphEnhancementResult result = graphEnhancer.createAdditionalBuildables();
AndroidBinaryDescription.java,moduleVerification = Optional.empty();,if (Optional != null ) moduleVerification = Optional.empty();
AndroidBinaryDescription.java,boolean redexRequested = arg.getRedex();,if (arg != null ) boolean redexRequested = arg.getRedex();
TargetNodeParsePipeline.java,Cell depCell = cell.getCellIgnoringVisibilityCheck(depTarget.getCellPath());,if (cell != null ) Cell depCell = cell.getCellIgnoringVisibilityCheck(depTarget.getCellPath());
MinionModeRunner.java,addr = InetAddress.getLocalHost();,if (InetAddress != null ) addr = InetAddress.getLocalHost();
MinionModeRunner.java,hostname = addr.getHostName();,if (addr != null ) hostname = addr.getHostName();
MinionWorkloadAllocator.java,maxWorkUnits -= newWorkUnitsForMinion.size();,if (newWorkUnitsForMinion != null ) maxWorkUnits -= newWorkUnitsForMinion.size();
MinionWorkloadAllocatorTest.java,List<String> actualWorkUnit = minionOneWorkUnits.get(workUnitIndex).getBuildTargets();,if (minionOneWorkUnits != null ) List<String> actualWorkUnit = minionOneWorkUnits.get(workUnitIndex).getBuildTargets();
AppleCxxPlatforms.java,Optional<String> swiftVersion = swiftBuckConfig.getVersion();,if (swiftBuckConfig != null ) Optional<String> swiftVersion = swiftBuckConfig.getVersion();
AppleCxxPlatforms.java,swiftToolChain = Optional.empty();,if (Optional != null ) swiftToolChain = Optional.empty();
AppleCxxPlatformsTest.java,Optional<SwiftPlatform> swiftPlatformOptional = platformWithConfiguredSwift.getSwiftPlatform();,if (platformWithConfiguredSwift != null ) Optional<SwiftPlatform> swiftPlatformOptional = platformWithConfiguredSwift.getSwiftPlatform();
AppleCxxPlatformsTest.java,Tool swiftcTool = swiftPlatformOptional.get().getSwiftc();,if (swiftPlatformOptional != null ) Tool swiftcTool = swiftPlatformOptional.get().getSwiftc();
BuildTargetDurationListener.java,OptionalLong firstStartEpochMillis = OptionalLong.empty();,if (OptionalLong != null ) OptionalLong firstStartEpochMillis = OptionalLong.empty();
BuildTargetDurationListener.java,BuildRuleInfo buildRuleInfo = criticalPath.pop();,if (criticalPath != null ) BuildRuleInfo buildRuleInfo = criticalPath.pop();
BuildTargetDurationListener.java,BuildRuleInfo ruleInfo = buildRuleInfos.get(testRule.getFullyQualifiedName());,if (buildRuleInfos != null ) BuildRuleInfo ruleInfo = buildRuleInfos.get(testRule.getFullyQualifiedName());
BuildTargetDurationListenerTest.java,BuildRuleInfo buildRuleInfo = criticalPath.pop();,if (criticalPath != null ) BuildRuleInfo buildRuleInfo = criticalPath.pop();
DefaultParserTargetNodeFactory.java,UnflavoredBuildTarget unflavoredBuildTarget = target.getUnflavoredBuildTarget();,if (target != null ) UnflavoredBuildTarget unflavoredBuildTarget = target.getUnflavoredBuildTarget();
DefaultParserTargetNodeFactory.java,Path basePath = target.getBasePath();,if (target != null ) Path basePath = target.getBasePath();
DefaultParserTargetNodeFactory.java,String buildFileName = targetCell.getBuildFileName();,if (targetCell != null ) String buildFileName = targetCell.getBuildFileName();
PythonBinaryIntegrationTest.java,ProjectFilesystem filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());,if (TestProjectFilesystems != null ) ProjectFilesystem filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());
LimitedFileHashCacheEngine.java,data.hashCode = value.getHashCode();,if (value != null ) data.hashCode = value.getHashCode();
LimitedFileHashCacheEngine.java,data.fileType = value.getType();,if (value != null ) data.fileType = value.getType();
JsBundleDescription.java,"String bundleName = getBundleName(args, buildTarget.getFlavors());","if (buildTarget != null ) String bundleName = getBundleName(args, buildTarget.getFlavors());"
WorkerProcessPoolTest.java,FakeWorkerProcess worker = new FakeWorkerProcess(ImmutableMap.of());,if (FakeWorkerProcess(ImmutableMap != null ) FakeWorkerProcess worker = new FakeWorkerProcess(ImmutableMap.of());
WorkerProcessPoolTest.java,WorkerProcess workerProcess = worker.get();,if (worker != null ) WorkerProcess workerProcess = worker.get();
WorkerShellStep.java,WorkerProcess process = pool.borrowWorkerProcess();,if (pool != null ) WorkerProcess process = pool.borrowWorkerProcess();
WorkerProcessPoolTest.java,WorkerProcess process = pool.borrowWorkerProcess();,if (pool != null ) WorkerProcess process = pool.borrowWorkerProcess();
WorkerProcessPoolTest.java,WorkerProcess process = pool.borrowWorkerProcess();,if (pool != null ) WorkerProcess process = pool.borrowWorkerProcess();
WorkerProcessPoolTest.java,WorkerProcess workerProcess = pool.borrowWorkerProcess();,if (pool != null ) WorkerProcess workerProcess = pool.borrowWorkerProcess();
WorkerProcessPoolTest.java,WorkerProcess workerProcess = startWorkerProcess.get();,if (startWorkerProcess != null ) WorkerProcess workerProcess = startWorkerProcess.get();
WorkerProcessPoolTest.java,WorkerProcess process = pool.borrowWorkerProcess();,if (pool != null ) WorkerProcess process = pool.borrowWorkerProcess();
WorkerProcessPoolTest.java,WorkerProcess workerProcess = pool.borrowWorkerProcess();,if (pool != null ) WorkerProcess workerProcess = pool.borrowWorkerProcess();
WorkerProcessPoolTest.java,WorkerProcess workerProcess = pool.borrowWorkerProcess();,if (pool != null ) WorkerProcess workerProcess = pool.borrowWorkerProcess();
AssumptionTestBeforeClassJunit412.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
PreprocessorDelegate.java,SourcePath headerPath = preprocessorFlags.getPrefixHeader().get();,if (preprocessorFlags != null ) SourcePath headerPath = preprocessorFlags.getPrefixHeader().get();
DefaultTypeCoercerFactory.java,Type rawType = parameterizedType.getRawType();,if (parameterizedType != null ) Type rawType = parameterizedType.getRawType();
TargetsCommand.java,TargetResult targetResult = targetResults.get(targetNode.getBuildTarget());,if (targetResults != null ) TargetResult targetResult = targetResults.get(targetNode.getBuildTarget());
JsBundleDescription.java,ImmutableSortedSet<JsLibrary> libraryDeps = libsResolver.collect(args.getDeps());,if (libsResolver != null ) ImmutableSortedSet<JsLibrary> libraryDeps = libsResolver.collect(args.getDeps());
AppleBinaryDescription.java,FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();,if (cxxPlatformsProvider != null ) FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();
AppleBinaryDescription.java,Flavor defaultCxxFlavor = cxxPlatformsProvider.getDefaultCxxPlatform().getFlavor();,if (cxxPlatformsProvider != null ) Flavor defaultCxxFlavor = cxxPlatformsProvider.getDefaultCxxPlatform().getFlavor();
AppleLibraryDescription.java,TargetGraph targetGraph = context.getTargetGraph();,if (context != null ) TargetGraph targetGraph = context.getTargetGraph();
AndroidAarDescription.java,ToolchainProvider toolchainProvider = context.getToolchainProvider();,if (context != null ) ToolchainProvider toolchainProvider = context.getToolchainProvider();
AndroidBinaryDescription.java,ToolchainProvider toolchainProvider = context.getToolchainProvider();,if (context != null ) ToolchainProvider toolchainProvider = context.getToolchainProvider();
AndroidInstrumentationApkDescription.java,ToolchainProvider toolchainProvider = context.getToolchainProvider();,if (context != null ) ToolchainProvider toolchainProvider = context.getToolchainProvider();
AndroidPrebuiltAarDescription.java,ToolchainProvider toolchainProvider = context.getToolchainProvider();,if (context != null ) ToolchainProvider toolchainProvider = context.getToolchainProvider();
JavacFactory.java,spec = config.getJavacSpec();,if (config != null ) spec = config.getJavacSpec();
KnownBuildRuleTypesTest.java,buildRuleParams = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) buildRuleParams = TestBuildRuleParams.create();
KnownBuildRuleTypesTest.java,javac = temporaryFolder.newExecutableFile();,if (temporaryFolder != null ) javac = temporaryFolder.newExecutableFile();
JsBundleDescriptionTest.java,scenarioBuilder = JsTestScenario.builder();,if (JsTestScenario != null ) scenarioBuilder = JsTestScenario.builder();
JsBundleDescriptionTest.java,scenario = scenarioBuilder.build();,if (scenarioBuilder != null ) scenario = scenarioBuilder.build();
DefaultTargetNodeToBuildRuleTransformer.java,Cell targetCell = cellProvider.getBuildTargetCell(targetNode.getBuildTarget());,if (cellProvider != null ) Cell targetCell = cellProvider.getBuildTargetCell(targetNode.getBuildTarget());
JsLibraryDescription.java,Stream<BuildTarget> deps = args.getDeps().stream();,if (args != null ) Stream<BuildTarget> deps = args.getDeps().stream();
ExternalOrJarBackedJavacProvider.java,SourcePath javacJarPath = possibleRule.get().getSourcePathToOutput();,if (possibleRule != null ) SourcePath javacJarPath = possibleRule.get().getSourcePathToOutput();
JavacFactory.java,spec = args.getJavacSpec();,if (args != null ) spec = args.getJavacSpec();
JavacSpecTest.java,Path externalJavac = tmp.newExecutableFile();,if (tmp != null ) Path externalJavac = tmp.newExecutableFile();
JavacSpecTest.java,SourcePath sourcePath = FakeSourcePath.of(externalJavac.toString());,if (FakeSourcePath != null ) SourcePath sourcePath = FakeSourcePath.of(externalJavac.toString());
JavacSpecTest.java,Path externalJavacPath = tmp.newExecutableFile();,if (tmp != null ) Path externalJavacPath = tmp.newExecutableFile();
JavacSpecTest.java,SourcePath sourcePath = FakeSourcePath.of(externalJavacPath.toString());,if (FakeSourcePath != null ) SourcePath sourcePath = FakeSourcePath.of(externalJavacPath.toString());
ExternalJavacFactory.java,BuildTargetSourcePath buildTargetPath = (BuildTargetSourcePath) pathToJavac.getRight();,if (pathToJavac != null ) BuildTargetSourcePath buildTargetPath = (BuildTargetSourcePath) pathToJavac.getRight();
ExternalJavac.java,BuildTargetSourcePath buildTargetPath = (BuildTargetSourcePath) pathToJavac.getRight();,if (pathToJavac != null ) BuildTargetSourcePath buildTargetPath = (BuildTargetSourcePath) pathToJavac.getRight();
ExternalJavac.java,this.shortName = buildTargetPath.getTarget().toString();,if (buildTargetPath != null ) this.shortName = buildTargetPath.getTarget().toString();
ExternalJavac.java,this.shortName = actualPath.toString();,if (actualPath != null ) this.shortName = actualPath.toString();
ExternalJavac.java,Optional<String> stderr = result.getStderr();,if (result != null ) Optional<String> stderr = result.getStderr();
ExternalJavac.java,"String output = stderr.orElse("""").trim();","if (stderr != null ) String output = stderr.orElse("""").trim();"
ExternalJavac.java,version = actualPath.toString();,if (actualPath != null ) version = actualPath.toString();
ExternalJavac.java,version = JavacVersion.of(output).toString();,if (JavacVersion != null ) version = JavacVersion.of(output).toString();
JavacSpecTest.java,PathSourcePath actualPath = javac.getActualPath().getLeft();,if (javac != null ) PathSourcePath actualPath = javac.getActualPath().getLeft();
BuildCommand.java,DistLocalBuildMode localMode = distBuildConfig.getLocalBuildMode();,if (distBuildConfig != null ) DistLocalBuildMode localMode = distBuildConfig.getLocalBuildMode();
AbstractBuckGlobals.java,BuiltinFunction glob = Glob.create();,if (Glob != null ) BuiltinFunction glob = Glob.create();
TwoLevelArtifactCacheDecorator.java,long fileSize = projectFilesystem.getFileSize(output.getPath());,if (projectFilesystem != null ) long fileSize = projectFilesystem.getFileSize(output.getPath());
TwoLevelArtifactCacheDecorator.java,long hashComputationStart = System.currentTimeMillis();,if (System != null ) long hashComputationStart = System.currentTimeMillis();
TwoLevelArtifactCacheDecorator.java,long hashComputationEnd = System.currentTimeMillis();,if (System != null ) long hashComputationEnd = System.currentTimeMillis();
QueryCommand.java,PatternsMatcher patternsMatcher = new PatternsMatcher(outputAttributes.get());,if (PatternsMatcher(outputAttributes != null ) PatternsMatcher patternsMatcher = new PatternsMatcher(outputAttributes.get());
QueryCommand.java,PatternsMatcher patternsMatcher = new PatternsMatcher(outputAttributes.get());,if (PatternsMatcher(outputAttributes != null ) PatternsMatcher patternsMatcher = new PatternsMatcher(outputAttributes.get());
QueryCommandTest.java,queryCommand.outputAttributes = Suppliers.ofInstance(ImmutableSet.of());,if (Suppliers != null ) queryCommand.outputAttributes = Suppliers.ofInstance(ImmutableSet.of());
QueryCommand.java,PatternsMatcher patternsMatcher = new PatternsMatcher(outputAttributes.get());,if (PatternsMatcher(outputAttributes != null ) PatternsMatcher patternsMatcher = new PatternsMatcher(outputAttributes.get());
ParseContext.java,this.rawRuleBuilder = ImmutableMap.builder();,if (ImmutableMap != null ) this.rawRuleBuilder = ImmutableMap.builder();
HttpArtifactCacheEvent.java,this.target = Optional.empty();,if (Optional != null ) this.target = Optional.empty();
DaemonLifecycleManager.java,Optional<Integer> portFromUpdatedConfig = Daemon.getValidWebServerPort(newCell.getBuckConfig());,if (Daemon != null ) Optional<Integer> portFromUpdatedConfig = Daemon.getValidWebServerPort(newCell.getBuckConfig());
TargetGraph.java,cachedHashCode = Optional.of(targetsToNodes.hashCode());,if (Optional != null ) cachedHashCode = Optional.of(targetsToNodes.hashCode());
ThriftCoordinatorServer.java,Optional<Integer> totalMinionCount = minionCountProvider.getTotalMinionCount();,if (minionCountProvider != null ) Optional<Integer> totalMinionCount = minionCountProvider.getTotalMinionCount();
AbstractConsoleEventBusListener.java,ruleCount = Optional.of(calculated.getNumRules());,if (Optional != null ) ruleCount = Optional.of(calculated.getNumRules());
AbstractConsoleEventBusListener.java,ruleCount = Optional.of(updated.getNumRules());,if (Optional != null ) ruleCount = Optional.of(updated.getNumRules());
SuperConsoleEventBusListener.java,outputMaxColumns = config.getThreadLineOutputMaxColumns().get();,if (config != null ) outputMaxColumns = config.getThreadLineOutputMaxColumns().get();
WebServer.java,this.port = Optional.empty();,if (Optional != null ) this.port = Optional.empty();
AggregationMode.java,minimumDepth = Optional.empty();,if (Optional != null ) minimumDepth = Optional.empty();
ServerStatusCommandTest.java,webServerPort = Optional.empty();,if (Optional != null ) webServerPort = Optional.empty();
ExecutionOrderAwareFakeStep.java,this.executionBeginOrder = Optional.empty();,if (Optional != null ) this.executionBeginOrder = Optional.empty();
ExecutionOrderAwareFakeStep.java,this.executionEndOrder = Optional.empty();,if (Optional != null ) this.executionEndOrder = Optional.empty();
ExecutionOrderAwareFakeStep.java,executionBeginOrder = Optional.of(atomicExecutionOrder.getAndIncrement());,if (Optional != null ) executionBeginOrder = Optional.of(atomicExecutionOrder.getAndIncrement());
ExecutionOrderAwareFakeStep.java,executionEndOrder = Optional.of(atomicExecutionOrder.getAndIncrement());,if (Optional != null ) executionEndOrder = Optional.of(atomicExecutionOrder.getAndIncrement());
FakeListeningProcessExecutor.java,exitCode = state.getExitCode().get();,if (state != null ) exitCode = state.getExitCode().get();
KotlincToJarStepFactory.java,boolean generatingCode = !javacOptions.getAnnotationProcessingParams().isEmpty();,if (!javacOptions != null ) boolean generatingCode = !javacOptions.getAnnotationProcessingParams().isEmpty();
AndroidAarDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
AndroidBinaryDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
AndroidBinaryDescription.java,BuildRule keystore = resolver.getRule(args.getKeystore());,if (resolver != null ) BuildRule keystore = resolver.getRule(args.getKeystore());
AndroidBinaryGraphEnhancer.java,BuildRule generatorRule = ruleResolver.getRule(nativeLibraryMergeCodeGenerator.get());,if (ruleResolver != null ) BuildRule generatorRule = ruleResolver.getRule(nativeLibraryMergeCodeGenerator.get());
AndroidBuildConfigDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
AndroidInstrumentationApkDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
AndroidInstrumentationApkDescription.java,BuildRule installableApk = resolver.getRule(args.getApk());,if (resolver != null ) BuildRule installableApk = resolver.getRule(args.getApk());
AndroidPrebuiltAarDescription.java,BuildRuleResolver buildRuleResolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver buildRuleResolver = context.getBuildRuleResolver();
AndroidResourceDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
ApkGenruleDescription.java,BuildRule apk = resolver.getRule(args.getApk());,if (resolver != null ) BuildRule apk = resolver.getRule(args.getApk());
NativeLibraryMergeEnhancer.java,BuildRule rule = ruleResolver.getRule(nativeLibraryMergeGlue.get());,if (ruleResolver != null ) BuildRule rule = ruleResolver.getRule(nativeLibraryMergeGlue.get());
NativeLibraryMergeEnhancer.java,targetProjectFilesystem = ruleResolver.getRule(target).getProjectFilesystem();,if (ruleResolver != null ) targetProjectFilesystem = ruleResolver.getRule(target).getProjectFilesystem();
RobolectricTestDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
AppleBundleDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
AppleLibraryDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
ApplePackageDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
AppleTestDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
MultiarchFileInfos.java,Optional<BuildRule> existingRule = resolver.getRuleOptional(info.getFatTarget());,if (resolver != null ) Optional<BuildRule> existingRule = resolver.getRuleOptional(info.getFatTarget());
InstallCommand.java,BuildRuleResolver resolver = getBuild().getRuleResolver();,if (getBuild() != null ) BuildRuleResolver resolver = getBuild().getRuleResolver();
InstallCommand.java,BuildRule buildRule = resolver.requireRule(helperTarget.get());,if (resolver != null ) BuildRule buildRule = resolver.requireRule(helperTarget.get());
TargetsCommand.java,SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(result.getResolver());,if (SourcePathRuleFinder(result != null ) SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(result.getResolver());
TargetsCommand.java,buildRuleResolver = Optional.of(result.getResolver());,if (Optional != null ) buildRuleResolver = Optional.of(result.getResolver());
TargetsCommand.java,SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(result.getResolver());,if (SourcePathRuleFinder(result != null ) SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(result.getResolver());
TargetsCommand.java,buildRuleResolver = Optional.empty();,if (Optional != null ) buildRuleResolver = Optional.empty();
TestCommand.java,SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(build.getRuleResolver());,if (SourcePathRuleFinder(build != null ) SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(build.getRuleResolver());
CxxPrecompiledHeaderDescription.java,BuildRuleResolver ruleResolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver ruleResolver = context.getBuildRuleResolver();
CxxTestDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
PrebuiltCxxLibraryDescription.java,BuildRuleResolver ruleResolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver ruleResolver = context.getBuildRuleResolver();
DBinaryDescription.java,BuildRuleResolver buildRuleResolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver buildRuleResolver = context.getBuildRuleResolver();
DLibraryDescription.java,BuildRuleResolver buildRuleResolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver buildRuleResolver = context.getBuildRuleResolver();
DTestDescription.java,BuildRuleResolver buildRuleResolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver buildRuleResolver = context.getBuildRuleResolver();
CsharpLibraryDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
FilegroupDescription.java,SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(context.getBuildRuleResolver());,if (SourcePathRuleFinder(context != null ) SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(context.getBuildRuleResolver());
CgoLibraryDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
GoLibraryDescription.java,SourcePath output = resolver.requireRule(buildTarget).getSourcePathToOutput();,if (resolver != null ) SourcePath output = resolver.requireRule(buildTarget).getSourcePathToOutput();
GoTestDescription.java,SourcePath output = resolver.requireRule(buildTarget).getSourcePathToOutput();,if (resolver != null ) SourcePath output = resolver.requireRule(buildTarget).getSourcePathToOutput();
GoTestDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
GwtBinaryDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
GwtBinaryDescription.java,ImmutableSortedSet<BuildRule> moduleDependencies = resolver.getAllRules(args.getModuleDeps());,if (resolver != null ) ImmutableSortedSet<BuildRule> moduleDependencies = resolver.getAllRules(args.getModuleDeps());
HaskellBinaryDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
HaskellHaddockDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
HaskellHaddockDescription.java,Iterable<BuildRule> deps = resolver.getAllRules(args.getDeps());,if (resolver != null ) Iterable<BuildRule> deps = resolver.getAllRules(args.getDeps());
HaskellLibraryDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
HaskellLibraryDescription.java,"ImmutableSet<BuildRule> deps = allDeps.get(resolver, platform.getCxxPlatform());","if (platform != null ) ImmutableSet<BuildRule> deps = allDeps.get(resolver, platform.getCxxPlatform());"
HaskellPrebuiltLibraryDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
CxxLuaExtensionDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
LuaBinaryDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
OcamlLibraryDescription.java,SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(context.getBuildRuleResolver());,if (SourcePathRuleFinder(context != null ) SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(context.getBuildRuleResolver());
PrebuiltOcamlLibraryDescription.java,SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(context.getBuildRuleResolver());,if (SourcePathRuleFinder(context != null ) SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(context.getBuildRuleResolver());
CxxPythonExtensionDescription.java,BuildRuleResolver ruleResolverLocal = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver ruleResolverLocal = context.getBuildRuleResolver();
PythonBinaryDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
PythonTestDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
PythonTestDescription.java,BuildRule buildRule = resolver.getRule(coverageSpec.getBuildTarget());,if (resolver != null ) BuildRule buildRule = resolver.getRule(coverageSpec.getBuildTarget());
RustLibraryDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
RustTestDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
HalideLibraryDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
IjProjectCommandHelper.java,BuildRuleResolver ruleResolver = result.getResolver();,if (result != null ) BuildRuleResolver ruleResolver = result.getResolver();
JsBundleDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
JsLibraryDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
GroovyLibraryDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
GroovyTestDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
GroovyTestDescription.java,JavaLibrary testsLibrary = resolver.addToIndex(defaultJavaLibraryRules.buildLibrary());,if (resolver != null ) JavaLibrary testsLibrary = resolver.addToIndex(defaultJavaLibraryRules.buildLibrary());
JavaBinaryDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
JavaLibraryDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
JavaLibraryRules.java,BuildRule abiJarRule = resolver.requireRule(abiJarTarget.get());,if (resolver != null ) BuildRule abiJarRule = resolver.requireRule(abiJarTarget.get());
JavaLibraryRules.java,BuildRule abiJarRule = resolver.requireRule(abiJarTarget.get());,if (resolver != null ) BuildRule abiJarRule = resolver.requireRule(abiJarTarget.get());
JavaTestDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
JavaTestDescription.java,JavaLibrary testsLibrary = resolver.addToIndex(defaultJavaLibraryRules.buildLibrary());,if (resolver != null ) JavaLibrary testsLibrary = resolver.addToIndex(defaultJavaLibraryRules.buildLibrary());
PrebuiltJarDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
KotlinLibraryDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
KotlinTestDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
KotlinTestDescription.java,DefaultJavaLibrary testsLibrary = resolver.addToIndex(defaultJavaLibraryRules.buildLibrary());,if (resolver != null ) DefaultJavaLibrary testsLibrary = resolver.addToIndex(defaultJavaLibraryRules.buildLibrary());
ScalaTestDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
ScalaTestDescription.java,JavaLibrary testsLibrary = resolver.addToIndex(scalaLibraryBuilder.buildLibrary());,if (resolver != null ) JavaLibrary testsLibrary = resolver.addToIndex(scalaLibraryBuilder.buildLibrary());
BuildTargetMacroExpander.java,Optional<BuildRule> rule = resolver.getRuleOptional(input.getTarget());,if (resolver != null ) Optional<BuildRule> rule = resolver.getRuleOptional(input.getTarget());
AbstractGenruleDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
CommandAliasDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
ExportFileDescription.java,SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(context.getBuildRuleResolver());,if (SourcePathRuleFinder(context != null ) SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(context.getBuildRuleResolver());
ShTestDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
WorkerToolDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
SwiftLibraryDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
AndroidBinaryDescriptionTest.java,BuildRule transitiveDep = ruleResolver.requireRule(transitiveDepNode.getBuildTarget());,if (ruleResolver != null ) BuildRule transitiveDep = ruleResolver.requireRule(transitiveDepNode.getBuildTarget());
AndroidBinaryTest.java,BuildRule libraryOneRule = ruleResolver.getRule(libraryOne.getBuildTarget());,if (ruleResolver != null ) BuildRule libraryOneRule = ruleResolver.getRule(libraryOne.getBuildTarget());
AndroidBinaryTest.java,BuildRule libraryTwoRule = ruleResolver.getRule(libraryTwo.getBuildTarget());,if (ruleResolver != null ) BuildRule libraryTwoRule = ruleResolver.getRule(libraryTwo.getBuildTarget());
AndroidInstrumentationApkDescriptionTest.java,BuildRule transitiveDep = ruleResolver.requireRule(transitiveDepNode.getBuildTarget());,if (ruleResolver != null ) BuildRule transitiveDep = ruleResolver.requireRule(transitiveDepNode.getBuildTarget());
AndroidLibraryDescriptionTest.java,BuildRule androidLibRule = resolver.requireRule(androidLibNode.getBuildTarget());,if (resolver != null ) BuildRule androidLibRule = resolver.requireRule(androidLibNode.getBuildTarget());
AndroidLibraryDescriptionTest.java,BuildRule exportedRule = resolver.requireRule(exportedNode.getBuildTarget());,if (resolver != null ) BuildRule exportedRule = resolver.requireRule(exportedNode.getBuildTarget());
AndroidLibraryDescriptionTest.java,BuildRule androidLibRule = resolver.requireRule(androidLibNode.getBuildTarget());,if (resolver != null ) BuildRule androidLibRule = resolver.requireRule(androidLibNode.getBuildTarget());
AndroidLibraryDescriptionTest.java,BuildRule exportedRule = resolver.requireRule(exportedNode.getBuildTarget());,if (resolver != null ) BuildRule exportedRule = resolver.requireRule(exportedNode.getBuildTarget());
ApkGenruleDescriptionTest.java,BuildRule transitiveDep = resolver.requireRule(transitiveDepNode.getBuildTarget());,if (resolver != null ) BuildRule transitiveDep = resolver.requireRule(transitiveDepNode.getBuildTarget());
ApkGenruleDescriptionTest.java,BuildRule dep = resolver.requireRule(depNode.getBuildTarget());,if (resolver != null ) BuildRule dep = resolver.requireRule(depNode.getBuildTarget());
ApkGenruleDescriptionTest.java,BuildRule genrule = resolver.requireRule(genruleNode.getBuildTarget());,if (resolver != null ) BuildRule genrule = resolver.requireRule(genruleNode.getBuildTarget());
RobolectricTestDescriptionTest.java,BuildRule exportedRule = resolver.requireRule(exportedNode.getBuildTarget());,if (resolver != null ) BuildRule exportedRule = resolver.requireRule(exportedNode.getBuildTarget());
RobolectricTestDescriptionTest.java,BuildRule exportedRule = resolver.requireRule(exportedNode.getBuildTarget());,if (resolver != null ) BuildRule exportedRule = resolver.requireRule(exportedNode.getBuildTarget());
IncrementalActionGraphGeneratorTest.java,BuildRule buildRule = ruleResolver.requireRule(node.getBuildTarget());,if (ruleResolver != null ) BuildRule buildRule = ruleResolver.requireRule(node.getBuildTarget());
IncrementalActionGraphGeneratorTest.java,BuildRule buildRule = ruleResolver.requireRule(node.getBuildTarget());,if (ruleResolver != null ) BuildRule buildRule = ruleResolver.requireRule(node.getBuildTarget());
IncrementalActionGraphGeneratorTest.java,BuildRule childBuildRule = ruleResolver.requireRule(childNode.getBuildTarget());,if (ruleResolver != null ) BuildRule childBuildRule = ruleResolver.requireRule(childNode.getBuildTarget());
IncrementalActionGraphGeneratorTest.java,BuildRule parentBuildRule = ruleResolver.requireRule(parentNode.getBuildTarget());,if (ruleResolver != null ) BuildRule parentBuildRule = ruleResolver.requireRule(parentNode.getBuildTarget());
IncrementalActionGraphGeneratorTest.java,BuildRule originalBuildRule = ruleResolver.requireRule(originalNode.getBuildTarget());,if (ruleResolver != null ) BuildRule originalBuildRule = ruleResolver.requireRule(originalNode.getBuildTarget());
IncrementalActionGraphGeneratorTest.java,BuildRule newBuildRule = ruleResolver.requireRule(newNode.getBuildTarget());,if (ruleResolver != null ) BuildRule newBuildRule = ruleResolver.requireRule(newNode.getBuildTarget());
IncrementalActionGraphGeneratorTest.java,BuildRule originalBuildRule = ruleResolver.requireRule(originalNode.getBuildTarget());,if (ruleResolver != null ) BuildRule originalBuildRule = ruleResolver.requireRule(originalNode.getBuildTarget());
IncrementalActionGraphGeneratorTest.java,BuildRule newBuildRule = ruleResolver.requireRule(newNode.getBuildTarget());,if (ruleResolver != null ) BuildRule newBuildRule = ruleResolver.requireRule(newNode.getBuildTarget());
IncrementalActionGraphGeneratorTest.java,BuildRule originalParentRule = ruleResolver.requireRule(originalParentNode.getBuildTarget());,if (ruleResolver != null ) BuildRule originalParentRule = ruleResolver.requireRule(originalParentNode.getBuildTarget());
IncrementalActionGraphGeneratorTest.java,BuildRule originalParentRule = ruleResolver.requireRule(originalParentNode.getBuildTarget());,if (ruleResolver != null ) BuildRule originalParentRule = ruleResolver.requireRule(originalParentNode.getBuildTarget());
IncrementalActionGraphGeneratorTest.java,BuildRule originalParentBuildRule = ruleResolver.requireRule(node.getBuildTarget());,if (ruleResolver != null ) BuildRule originalParentBuildRule = ruleResolver.requireRule(node.getBuildTarget());
IncrementalActionGraphScenarioTest.java,RuleDepsCache depsCache = new DefaultRuleDepsCache(result.getResolver());,if (DefaultRuleDepsCache(result != null ) RuleDepsCache depsCache = new DefaultRuleDepsCache(result.getResolver());
IncrementalActionGraphScenarioTest.java,SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(result.getResolver());,if (SourcePathRuleFinder(result != null ) SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(result.getResolver());
CxxBinaryDescriptionTest.java,BuildRule binary = builder.build(resolver).getLinkRule();,if (builder != null ) BuildRule binary = builder.build(resolver).getLinkRule();
CxxBinaryDescriptionTest.java,BuildRule binary = builder.build(resolver).getLinkRule();,if (builder != null ) BuildRule binary = builder.build(resolver).getLinkRule();
CxxBinaryDescriptionTest.java,BuildRule binary = builder.build(resolver).getLinkRule();,if (builder != null ) BuildRule binary = builder.build(resolver).getLinkRule();
DistBuildArtifactCacheImplTest.java,resolver = CustomBuildRuleResolverFactory.createDiamondDependencyResolverWithChainFromLeaf();,if (CustomBuildRuleResolverFactory != null ) resolver = CustomBuildRuleResolverFactory.createDiamondDependencyResolverWithChainFromLeaf();
DistBuildFileHashesIntegrationTest.java,BuildRuleResolver ruleResolver = actionGraphAndResolver.getResolver();,if (actionGraphAndResolver != null ) BuildRuleResolver ruleResolver = actionGraphAndResolver.getResolver();
DistBuildFileHashesTest.java,actionGraph = new ActionGraph(buildRuleResolver.getBuildRules());,if (ActionGraph(buildRuleResolver != null ) actionGraph = new ActionGraph(buildRuleResolver.getBuildRules());
BuildPhaseTest.java,BuildRuleResolver resolver = CustomBuildRuleResolverFactory.createSimpleResolver();,if (CustomBuildRuleResolverFactory != null ) BuildRuleResolver resolver = CustomBuildRuleResolverFactory.createSimpleResolver();
CacheOptimizedBuildTargetsQueueFactoryTest.java,BuildRuleResolver resolver = CustomBuildRuleResolverFactory.createSimpleRuntimeDepsResolver();,if (CustomBuildRuleResolverFactory != null ) BuildRuleResolver resolver = CustomBuildRuleResolverFactory.createSimpleRuntimeDepsResolver();
CacheOptimizedBuildTargetsQueueFactoryTest.java,BuildRuleResolver resolver = CustomBuildRuleResolverFactory.createSimpleResolver();,if (CustomBuildRuleResolverFactory != null ) BuildRuleResolver resolver = CustomBuildRuleResolverFactory.createSimpleResolver();
CacheOptimizedBuildTargetsQueueFactoryTest.java,BuildRuleResolver resolver = CustomBuildRuleResolverFactory.createResolverWithBuildLocallyDep();,if (CustomBuildRuleResolverFactory != null ) BuildRuleResolver resolver = CustomBuildRuleResolverFactory.createResolverWithBuildLocallyDep();
ReverseDepBuildTargetsQueueTest.java,BuildRuleResolver resolver = CustomBuildRuleResolverFactory.createSimpleResolver();,if (CustomBuildRuleResolverFactory != null ) BuildRuleResolver resolver = CustomBuildRuleResolverFactory.createSimpleResolver();
ReverseDepBuildTargetsQueueTest.java,BuildRuleResolver resolver = CustomBuildRuleResolverFactory.createSimpleRuntimeDepsResolver();,if (CustomBuildRuleResolverFactory != null ) BuildRuleResolver resolver = CustomBuildRuleResolverFactory.createSimpleRuntimeDepsResolver();
ReverseDepBuildTargetsQueueTest.java,BuildRuleResolver resolver = CustomBuildRuleResolverFactory.createDiamondDependencyResolver();,if (CustomBuildRuleResolverFactory != null ) BuildRuleResolver resolver = CustomBuildRuleResolverFactory.createDiamondDependencyResolver();
HaskellLibraryDescriptionTest.java,BuildRuleResolver resolver = new TestBuildRuleResolver(TargetGraphFactory.newInstance());,if (TestBuildRuleResolver(TargetGraphFactory != null ) BuildRuleResolver resolver = new TestBuildRuleResolver(TargetGraphFactory.newInstance());
HaskellLibraryDescriptionTest.java,BuildRuleResolver resolver = new TestBuildRuleResolver(TargetGraphFactory.newInstance());,if (TestBuildRuleResolver(TargetGraphFactory != null ) BuildRuleResolver resolver = new TestBuildRuleResolver(TargetGraphFactory.newInstance());
PythonBinaryDescriptionTest.java,BuildRuleResolver resolver = new TestBuildRuleResolver(TargetGraphFactory.newInstance());,if (TestBuildRuleResolver(TargetGraphFactory != null ) BuildRuleResolver resolver = new TestBuildRuleResolver(TargetGraphFactory.newInstance());
DefaultJavaLibraryTest.java,BuildRule notIncluded = ruleResolver.requireRule(notIncludedNode.getBuildTarget());,if (ruleResolver != null ) BuildRule notIncluded = ruleResolver.requireRule(notIncludedNode.getBuildTarget());
DefaultJavaLibraryTest.java,BuildRule included = ruleResolver.requireRule(includedNode.getBuildTarget());,if (ruleResolver != null ) BuildRule included = ruleResolver.requireRule(includedNode.getBuildTarget());
JarShapeTest.java,BuildRule dep = resolver.requireRule(depNode.getBuildTarget());,if (resolver != null ) BuildRule dep = resolver.requireRule(depNode.getBuildTarget());
JarShapeTest.java,BuildRule lib = resolver.requireRule(libNode.getBuildTarget());,if (resolver != null ) BuildRule lib = resolver.requireRule(libNode.getBuildTarget());
JarShapeTest.java,BuildRule dep = resolver.requireRule(depNode.getBuildTarget());,if (resolver != null ) BuildRule dep = resolver.requireRule(depNode.getBuildTarget());
JarShapeTest.java,BuildRule lib = resolver.requireRule(libNode.getBuildTarget());,if (resolver != null ) BuildRule lib = resolver.requireRule(libNode.getBuildTarget());
JarShapeTest.java,BuildRule dep = resolver.requireRule(depNode.getBuildTarget());,if (resolver != null ) BuildRule dep = resolver.requireRule(depNode.getBuildTarget());
JarShapeTest.java,BuildRule mavenDep = resolver.requireRule(mavenDepNode.getBuildTarget());,if (resolver != null ) BuildRule mavenDep = resolver.requireRule(mavenDepNode.getBuildTarget());
JarShapeTest.java,BuildRule lib = resolver.requireRule(libNode.getBuildTarget());,if (resolver != null ) BuildRule lib = resolver.requireRule(libNode.getBuildTarget());
JarShapeTest.java,BuildRule deepMavenDep = resolver.requireRule(deepMavenDepNode.getBuildTarget());,if (resolver != null ) BuildRule deepMavenDep = resolver.requireRule(deepMavenDepNode.getBuildTarget());
JarShapeTest.java,BuildRule mavenDep = resolver.requireRule(mavenDepNode.getBuildTarget());,if (resolver != null ) BuildRule mavenDep = resolver.requireRule(mavenDepNode.getBuildTarget());
JarShapeTest.java,BuildRule lib = resolver.requireRule(libNode.getBuildTarget());,if (resolver != null ) BuildRule lib = resolver.requireRule(libNode.getBuildTarget());
JavaBinaryTest.java,BuildRule libraryRule = ruleResolver.requireRule(libraryNode.getBuildTarget());,if (ruleResolver != null ) BuildRule libraryRule = ruleResolver.requireRule(libraryNode.getBuildTarget());
JavaLibraryClasspathProviderTest.java,a = ruleResolver.requireRule(aNode.getBuildTarget());,if (ruleResolver != null ) a = ruleResolver.requireRule(aNode.getBuildTarget());
JavaLibraryClasspathProviderTest.java,b = ruleResolver.requireRule(bNode.getBuildTarget());,if (ruleResolver != null ) b = ruleResolver.requireRule(bNode.getBuildTarget());
JavaLibraryClasspathProviderTest.java,c = ruleResolver.requireRule(cNode.getBuildTarget());,if (ruleResolver != null ) c = ruleResolver.requireRule(cNode.getBuildTarget());
JavaLibraryClasspathProviderTest.java,d = ruleResolver.requireRule(dNode.getBuildTarget());,if (ruleResolver != null ) d = ruleResolver.requireRule(dNode.getBuildTarget());
JavaLibraryClasspathProviderTest.java,e = ruleResolver.requireRule(eNode.getBuildTarget());,if (ruleResolver != null ) e = ruleResolver.requireRule(eNode.getBuildTarget());
JavaLibraryClasspathProviderTest.java,z = ruleResolver.requireRule(zNode.getBuildTarget());,if (ruleResolver != null ) z = ruleResolver.requireRule(zNode.getBuildTarget());
JavaLibraryDescriptionTest.java,exportedRule = resolver.requireRule(exportedNode.getBuildTarget());,if (resolver != null ) exportedRule = resolver.requireRule(exportedNode.getBuildTarget());
JavaLibraryDescriptionTest.java,exportingRule = resolver.requireRule(exportingNode.getBuildTarget());,if (resolver != null ) exportingRule = resolver.requireRule(exportingNode.getBuildTarget());
JavaTestDescriptionTest.java,BuildRule exportedRule = resolver.requireRule(exportedNode.getBuildTarget());,if (resolver != null ) BuildRule exportedRule = resolver.requireRule(exportedNode.getBuildTarget());
JavaTestDescriptionTest.java,BuildRule exportedRule = resolver.requireRule(exportedNode.getBuildTarget());,if (resolver != null ) BuildRule exportedRule = resolver.requireRule(exportedNode.getBuildTarget());
ClasspathAbiMacroExpanderTest.java,BuildRule rule = ruleResolver.requireRule(ruleNode.getBuildTarget());,if (ruleResolver != null ) BuildRule rule = ruleResolver.requireRule(ruleNode.getBuildTarget());
ClasspathAbiMacroExpanderTest.java,BuildRule rule = ruleResolver.requireRule(ruleNode.getBuildTarget());,if (ruleResolver != null ) BuildRule rule = ruleResolver.requireRule(ruleNode.getBuildTarget());
ClasspathMacroExpanderTest.java,BuildRule rule = ruleResolver.requireRule(ruleNode.getBuildTarget());,if (ruleResolver != null ) BuildRule rule = ruleResolver.requireRule(ruleNode.getBuildTarget());
ClasspathMacroExpanderTest.java,BuildRule dep = ruleResolver.requireRule(depNode.getBuildTarget());,if (ruleResolver != null ) BuildRule dep = ruleResolver.requireRule(depNode.getBuildTarget());
ClasspathMacroExpanderTest.java,BuildRule rule = ruleResolver.requireRule(ruleNode.getBuildTarget());,if (ruleResolver != null ) BuildRule rule = ruleResolver.requireRule(ruleNode.getBuildTarget());
ClasspathMacroExpanderTest.java,BuildRule dep = ruleResolver.requireRule(depNode.getBuildTarget());,if (ruleResolver != null ) BuildRule dep = ruleResolver.requireRule(depNode.getBuildTarget());
QueryPathsMacroExpanderTest.java,BuildRule rule = resolver.requireRule(node.getBuildTarget());,if (resolver != null ) BuildRule rule = resolver.requireRule(node.getBuildTarget());
QueryPathsMacroExpanderTest.java,BuildRule depRule = resolver.requireRule(dep.getBuildTarget());,if (resolver != null ) BuildRule depRule = resolver.requireRule(dep.getBuildTarget());
QueryPathsMacroExpanderTest.java,BuildRule rule = resolver.requireRule(target.getBuildTarget());,if (resolver != null ) BuildRule rule = resolver.requireRule(target.getBuildTarget());
ModernBuildRuleStrategyIntegrationTest.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
QueryOutputsMacroExpanderTest.java,dep = ruleResolver.requireRule(depNode.getBuildTarget());,if (ruleResolver != null ) dep = ruleResolver.requireRule(depNode.getBuildTarget());
QueryOutputsMacroExpanderTest.java,rule = ruleResolver.requireRule(ruleNode.getBuildTarget());,if (ruleResolver != null ) rule = ruleResolver.requireRule(ruleNode.getBuildTarget());
QueryTargetsAndOutputsMacroExpanderTest.java,dep = ruleResolver.requireRule(depNode.getBuildTarget());,if (ruleResolver != null ) dep = ruleResolver.requireRule(depNode.getBuildTarget());
QueryTargetsAndOutputsMacroExpanderTest.java,rule = ruleResolver.requireRule(ruleNode.getBuildTarget());,if (ruleResolver != null ) rule = ruleResolver.requireRule(ruleNode.getBuildTarget());
QueryTargetsMacroExpanderTest.java,dep = ruleResolver.requireRule(depNode.getBuildTarget());,if (ruleResolver != null ) dep = ruleResolver.requireRule(depNode.getBuildTarget());
QueryTargetsMacroExpanderTest.java,rule = ruleResolver.requireRule(ruleNode.getBuildTarget());,if (ruleResolver != null ) rule = ruleResolver.requireRule(ruleNode.getBuildTarget());
GenruleDescriptionTest.java,BuildRule dep = resolver.requireRule(depNode.getBuildTarget());,if (resolver != null ) BuildRule dep = resolver.requireRule(depNode.getBuildTarget());
GenruleDescriptionTest.java,BuildRule transitiveDep = resolver.requireRule(transitiveDepNode.getBuildTarget());,if (resolver != null ) BuildRule transitiveDep = resolver.requireRule(transitiveDepNode.getBuildTarget());
GenruleDescriptionTest.java,BuildRule genrule = resolver.requireRule(genruleNode.getBuildTarget());,if (resolver != null ) BuildRule genrule = resolver.requireRule(genruleNode.getBuildTarget());
GwtBinary.java,ImmutableList<String> javaArgs = javaArgsBuilder.build();,if (javaArgsBuilder != null ) ImmutableList<String> javaArgs = javaArgsBuilder.build();
DistributableBuildGraph.java,transitiveCachableDependents = Optional.of(cachableDependents.build());,if (Optional != null ) transitiveCachableDependents = Optional.of(cachableDependents.build());
ReverseDepBuildTargetsQueue.java,totalCacheableNodes = distributableBuildGraph.getNumCachableNodes();,if (distributableBuildGraph != null ) totalCacheableNodes = distributableBuildGraph.getNumCachableNodes();
BuildTargetsQueue.java,totalCacheableNodes = distributableBuildGraph.getNumCachableNodes();,if (distributableBuildGraph != null ) totalCacheableNodes = distributableBuildGraph.getNumCachableNodes();
BuildTargetsQueue.java,String targetName = uncachableZeroDependencyTargets.iterator().next();,if (uncachableZeroDependencyTargets != null ) String targetName = uncachableZeroDependencyTargets.iterator().next();
BuildTargetsQueue.java,totalBuiltCount += finishedNodes.size();,if (finishedNodes != null ) totalBuiltCount += finishedNodes.size();
BuildTargetsQueue.java,DistributableNode currentNode = nodesToCheck.remove();,if (nodesToCheck != null ) DistributableNode currentNode = nodesToCheck.remove();
MinionModeRunnerIntegrationTest.java,BuildTargetsQueue queue = BuildTargetsQueueTest.createDiamondDependencyQueueWithChainFromLeaf();,if (BuildTargetsQueueTest != null ) BuildTargetsQueue queue = BuildTargetsQueueTest.createDiamondDependencyQueueWithChainFromLeaf();
ReverseDepBuildTargetsQueueTest.java,BuildTargetsQueue queue = BuildTargetsQueue.newEmptyQueue();,if (BuildTargetsQueue != null ) BuildTargetsQueue queue = BuildTargetsQueue.newEmptyQueue();
ThriftCoordinatorServerIntegrationTest.java,BuildTargetsQueue diamondQueue = BuildTargetsQueueTest.createDiamondDependencyQueue();,if (BuildTargetsQueueTest != null ) BuildTargetsQueue diamondQueue = BuildTargetsQueueTest.createDiamondDependencyQueue();
LimitedFileHashCacheEngine.java,data.hashCode = value.getHashCode();,if (value != null ) data.hashCode = value.getHashCode();
LimitedFileHashCacheEngine.java,data.fileType = value.getType();,if (value != null ) data.fileType = value.getType();
HaskellLibraryDescriptionTest.java,ProjectFilesystem fs = FakeProjectFilesystem.createRealTempFilesystem();,if (FakeProjectFilesystem != null ) ProjectFilesystem fs = FakeProjectFilesystem.createRealTempFilesystem();
HaskellLibraryDescriptionTest.java,List<String> flags = shellStep.getShellCommand(TestExecutionContext.newInstance());,if (shellStep != null ) List<String> flags = shellStep.getShellCommand(TestExecutionContext.newInstance());
LuaBinaryDescription.java,LuaPackageComponents components = packageable.getLuaPackageComponents();,if (packageable != null ) LuaPackageComponents components = packageable.getLuaPackageComponents();
LuaLibraryDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
AbstractStringWithMacrosConverter.java,Arg arg = expand(macroContainer.getMacro());,if (expand(macroContainer != null ) Arg arg = expand(macroContainer.getMacro());
WorkerShellStep.java,WorkerJobParams paramsToUse = getWorkerJobParamsToUse(context.getPlatform());,if (getWorkerJobParamsToUse(context != null ) WorkerJobParams paramsToUse = getWorkerJobParamsToUse(context.getPlatform());
WorkerShellStep.java,"pool = factory.getWorkerProcessPool(context, paramsToUse.getWorkerProcessParams());","if (paramsToUse != null ) pool = factory.getWorkerProcessPool(context, paramsToUse.getWorkerProcessParams());"
WorkerShellStep.java,process = pool.borrowWorkerProcess();,if (pool != null ) process = pool.borrowWorkerProcess();
WorkerShellStep.java,Verbosity verbosity = context.getVerbosity();,if (context != null ) Verbosity verbosity = context.getVerbosity();
RandomizedTrial.java,remainder -= value.getProbability();,if (value != null ) remainder -= value.getProbability();
ParseContext.java,rawRuleBuilder = ImmutableMap.builder();,if (ImmutableMap != null ) rawRuleBuilder = ImmutableMap.builder();
HttpArtifactCacheEventListenerTest.java,Capture<String> logLineCapture = Capture.newInstance();,if (Capture != null ) Capture<String> logLineCapture = Capture.newInstance();
HttpArtifactCacheEventListenerTest.java,String actualLogLine = logLineCapture.getValue();,if (logLineCapture != null ) String actualLogLine = logLineCapture.getValue();
ParsingJavaPackageFinder.java,Path javaPackagePath = findPackageFolderWithJavaPackage(packageNameFromSource.get());,if (findPackageFolderWithJavaPackage(packageNameFromSource != null ) Path javaPackagePath = findPackageFolderWithJavaPackage(packageNameFromSource.get());
SuperConsoleEventBusListenerTest.java,"FakeBuildRule cachedRule = new FakeBuildRule(dirCachedTarget, ImmutableSortedSet.of());","if (ImmutableSortedSet != null ) FakeBuildRule cachedRule = new FakeBuildRule(dirCachedTarget, ImmutableSortedSet.of());"
CxxPlatformsProviderFactory.java,ImmutableSet<Flavor> possibleHostFlavors = CxxPlatforms.getAllPossibleHostFlavors();,if (CxxPlatforms != null ) ImmutableSet<Flavor> possibleHostFlavors = CxxPlatforms.getAllPossibleHostFlavors();
CxxPlatformsProviderFactory.java,Flavor hostFlavor = CxxPlatforms.getHostFlavor();,if (CxxPlatforms != null ) Flavor hostFlavor = CxxPlatforms.getHostFlavor();
CxxPlatformsProviderFactory.java,cxxSystemPlatformsMap = cxxSystemPlatformsBuilder.build();,if (cxxSystemPlatformsBuilder != null ) cxxSystemPlatformsMap = cxxSystemPlatformsBuilder.build();
Omnibus.java,BuildTarget linkableTarget = entry.getKey();,if (entry != null ) BuildTarget linkableTarget = entry.getKey();
Omnibus.java,NativeLinkable nativeLinkable = entry.getValue();,if (entry != null ) NativeLinkable nativeLinkable = entry.getValue();
NativeLinkables.java,Iterable<BuildTarget> ordered = TopologicalSort.sort(graph).reverse();,if (TopologicalSort != null ) Iterable<BuildTarget> ordered = TopologicalSort.sort(graph).reverse();
ActionRunner.java,Builder paramsBuilder = ProcessExecutorParams.builder();,if (ProcessExecutorParams != null ) Builder paramsBuilder = ProcessExecutorParams.builder();
IsolatedExecutionStrategy.java,Buildable original = converted.getBuildable();,if (converted != null ) Buildable original = converted.getBuildable();
CommonThreadStateRenderer.java,String buildTargetStr = buildTarget.get().toString();,if (buildTarget != null ) String buildTargetStr = buildTarget.get().toString();
SuperConsoleEventBusListener.java,outputMaxColumns = Integer.parseInt(columnsStr.get());,if (Integer != null ) outputMaxColumns = Integer.parseInt(columnsStr.get());
PublishCommandIntegrationTest.java,List<String> putRequestsPaths = publisher.getPutRequestsHandler().getPutRequestsPaths();,if (publisher != null ) List<String> putRequestsPaths = publisher.getPutRequestsHandler().getPutRequestsPaths();
PublishCommandIntegrationTest.java,List<String> putRequestsPaths = publisher.getPutRequestsHandler().getPutRequestsPaths();,if (publisher != null ) List<String> putRequestsPaths = publisher.getPutRequestsHandler().getPutRequestsPaths();
BuckUnixPath.java,internedSegments[i] = segments[i].intern();,if (segments[i] != null ) internedSegments[i] = segments[i].intern();
MinionHealthTracker.java,List<String> deadMinionIds = Lists.newArrayList();,if (Lists != null ) List<String> deadMinionIds = Lists.newArrayList();
MinionHealthTracker.java,long currentHealthCheckMillis = clock.currentTimeMillis();,if (clock != null ) long currentHealthCheckMillis = clock.currentTimeMillis();
MinionHealthTrackerTest.java,List<String> deadMinions = tracker.checkMinionHealth().getDeadMinions();,if (tracker != null ) List<String> deadMinions = tracker.checkMinionHealth().getDeadMinions();
MinionHealthTrackerTest.java,List<String> deadMinions = tracker.checkMinionHealth().getDeadMinions();,if (tracker != null ) List<String> deadMinions = tracker.checkMinionHealth().getDeadMinions();
MinionHealthTrackerTest.java,List<String> deadMinions = tracker.checkMinionHealth().getDeadMinions();,if (tracker != null ) List<String> deadMinions = tracker.checkMinionHealth().getDeadMinions();
MinionHealthTrackerTest.java,List<String> deadMinions = tracker.checkMinionHealth().getDeadMinions();,if (tracker != null ) List<String> deadMinions = tracker.checkMinionHealth().getDeadMinions();
MinionHealthTrackerTest.java,deadMinions = tracker.checkMinionHealth().getDeadMinions();,if (tracker != null ) deadMinions = tracker.checkMinionHealth().getDeadMinions();
Serializer.java,this.cellMap = builder.build();,if (builder != null ) this.cellMap = builder.build();
ProjectCommand.java,Optional<String> pathToPreProcessScript = getPathToPreProcessScript(params.getBuckConfig());,if (getPathToPreProcessScript(params != null ) Optional<String> pathToPreProcessScript = getPathToPreProcessScript(params.getBuckConfig());
ProjectCommand.java,String pathToScript = pathToPreProcessScript.get();,if (pathToPreProcessScript != null ) String pathToScript = pathToPreProcessScript.get();
ParsingJavaPackageFinder.java,Path normalizedSourcePath = sourcePath.normalize();,if (sourcePath != null ) Path normalizedSourcePath = sourcePath.normalize();
ParsingJavaPackageFinder.java,Path sourceDirectoryPath = normalizedSourcePath.getParent();,if (normalizedSourcePath != null ) Path sourceDirectoryPath = normalizedSourcePath.getParent();
MavenUberJar.java,TraversedDeps traversedDeps = TraversedDeps.traverse(params.getBuildDeps());,if (TraversedDeps != null ) TraversedDeps traversedDeps = TraversedDeps.traverse(params.getBuildDeps());
SkylarkExceptionHandlingTest.java,Event event = errors.next();,if (errors != null ) Event event = errors.next();
AbstractProvisioningProfileStore.java,String profileBundleID = appID.getSecond();,if (appID != null ) String profileBundleID = appID.getSecond();
AbstractProvisioningProfileStore.java,Optional<String> platformName = platform.getProvisioningProfileName();,if (platform != null ) Optional<String> platformName = platform.getProvisioningProfileName();
AbstractProvisioningProfileStore.java,NSObject profileEntitlement = profileEntitlements.get(entry.getKey());,if (profileEntitlements != null ) NSObject profileEntitlement = profileEntitlements.get(entry.getKey());
AbstractProvisioningProfileStore.java,ImmutableSet<HashCode> validFingerprints = profile.getDeveloperCertificateFingerprints();,if (profile != null ) ImmutableSet<HashCode> validFingerprints = profile.getDeveloperCertificateFingerprints();
AbstractProvisioningProfileStore.java,Optional<HashCode> fingerprint = identity.getFingerprint();,if (identity != null ) Optional<HashCode> fingerprint = identity.getFingerprint();
AbstractProvisioningProfileStore.java,bestMatchLength = profileBundleID.length();,if (profileBundleID != null ) bestMatchLength = profileBundleID.length();
Deserializer.java,this.stream = new DataInputStream(provider.getData());,if (DataInputStream(provider != null ) this.stream = new DataInputStream(provider.getData());
CxxLink.java,boolean requiresPostprocessing = postprocessor.isPresent();,if (postprocessor != null ) boolean requiresPostprocessing = postprocessor.isPresent();
DefaultParser.java,buildFileSearchMethod = parserConfig.getBuildFileSearchMethod().get();,if (parserConfig != null ) buildFileSearchMethod = parserConfig.getBuildFileSearchMethod().get();
IncrementalActionGraphScenarioTest.java,RuleDepsCache depsCache = new RuleDepsCache(result.getResolver());,if (RuleDepsCache(result != null ) RuleDepsCache depsCache = new RuleDepsCache(result.getResolver());
CounterRegistryImplTest.java,this.countersEvent = EasyMock.newCapture();,if (EasyMock != null ) this.countersEvent = EasyMock.newCapture();
CounterRegistryImplTest.java,this.flushCountersRunnable = EasyMock.newCapture();,if (EasyMock != null ) this.flushCountersRunnable = EasyMock.newCapture();
CounterRegistryImplTest.java,CountersSnapshotEvent event = (CountersSnapshotEvent) countersEvent.getValue();,if (countersEvent != null ) CountersSnapshotEvent event = (CountersSnapshotEvent) countersEvent.getValue();
CacheCommand.java,String typeString = type.toString();,if (type != null ) String typeString = type.toString();
ParsingJavaPackageFinder.java,Path javaPackagePath = findPackageFolderWithJavaPackage(packageNameFromSource.get());,if (findPackageFolderWithJavaPackage(packageNameFromSource != null ) Path javaPackagePath = findPackageFolderWithJavaPackage(packageNameFromSource.get());
ProjectGenerator.java,PBXGroup group = project.getMainGroup();,if (project != null ) PBXGroup group = project.getMainGroup();
AuditBuildRuleTypeCommand.java,String name = Description.getBuildRuleType(description).getName();,if (Description != null ) String name = Description.getBuildRuleType(description).getName();
RuleFunctionFactory.java,String name = Description.getBuildRuleType(ruleClass).getName();,if (Description != null ) String name = Description.getBuildRuleType(ruleClass).getName();
EventReportingProjectBuildFileParserTest.java,allRules = ImmutableList.of();,if (ImmutableList != null ) allRules = ImmutableList.of();
DistBuildRunCommand.java,returnCode = distBuildExecutor.buildAndReturnExitCode();,if (distBuildExecutor != null ) returnCode = distBuildExecutor.buildAndReturnExitCode();
MinionLocalBuildStateTracker.java,availableWorkUnitCapacity -= newWorkUnits.size();,if (newWorkUnits != null ) availableWorkUnitCapacity -= newWorkUnits.size();
MultiSlaveBuildModeRunnerFactory.java,availableBuildCapacity = availableCapacityDouble.intValue();,if (availableCapacityDouble != null ) availableBuildCapacity = availableCapacityDouble.intValue();
EventReportingProjectBuildFileParserTest.java,allRulesAndMetadata = ImmutableList.of();,if (ImmutableList != null ) allRulesAndMetadata = ImmutableList.of();
CachingBuildRuleBuilder.java,RuleKeyDiagnosticsMode mode = executionContext.getRuleKeyDiagnosticsMode();,if (executionContext != null ) RuleKeyDiagnosticsMode mode = executionContext.getRuleKeyDiagnosticsMode();
CachingBuildRuleBuilder.java,ruleKeyFactory = ruleKeyFactories.getDefaultRuleKeyFactory();,if (ruleKeyFactories != null ) ruleKeyFactory = ruleKeyFactories.getDefaultRuleKeyFactory();
CachingBuildRuleBuilder.java,currentBuildRuleScopeThread = Thread.currentThread();,if (Thread != null ) currentBuildRuleScopeThread = Thread.currentThread();
MetadataChecker.java,CachingBuildEngine.MetadataStorage fromConfig = config.getBuildMetadataStorage();,if (config != null ) CachingBuildEngine.MetadataStorage fromConfig = config.getBuildMetadataStorage();
RobolectricTestDescription.java,ToolchainProvider toolchainProvider = context.getToolchainProvider();,if (context != null ) ToolchainProvider toolchainProvider = context.getToolchainProvider();
FileSystemMap.java,Path relPath = parent.getKey();,if (parent != null ) Path relPath = parent.getKey();
FileSystemMap.java,entry = entry.subLevels.get(p.toString());,if (entry != null ) entry = entry.subLevels.get(p.toString());
FileSystemMap.java,Entry<T> leaf = stack.pop();,if (stack != null ) Entry<T> leaf = stack.pop();
FileSystemMap.java,path = Preconditions.checkNotNull(path).getParent();,if (Preconditions != null ) path = Preconditions.checkNotNull(path).getParent();
FileSystemMap.java,Entry<T> current = stack.pop();,if (stack != null ) Entry<T> current = stack.pop();
SuperConsoleEventBusListener.java,Optional<Integer> port = webServer.get().getPort();,if (webServer != null ) Optional<Integer> port = webServer.get().getPort();
BuckQueryEnvironmentTest.java,BuckEventBus eventBus = BuckEventBusForTests.newInstance();,if (BuckEventBusForTests != null ) BuckEventBus eventBus = BuckEventBusForTests.newInstance();
ParseContext.java,rawRuleBuilder = ImmutableList.builder();,if (ImmutableList != null ) rawRuleBuilder = ImmutableList.builder();
Parser.java,Cell owningCell = cell.getCell(targetNode.getBuildTarget());,if (cell != null ) Cell owningCell = cell.getCell(targetNode.getBuildTarget());
Parser.java,String shortName = targetNode.getBuildTarget().getShortName();,if (targetNode != null ) String shortName = targetNode.getBuildTarget().getShortName();
Parser.java,BuildTarget unflavoredTarget = ImmutableBuildTarget.of(target.getUnflavoredBuildTarget());,if (ImmutableBuildTarget != null ) BuildTarget unflavoredTarget = ImmutableBuildTarget.of(target.getUnflavoredBuildTarget());
Parser.java,buildFileSearchMethod = parserConfig.getBuildFileSearchMethod().get();,if (parserConfig != null ) buildFileSearchMethod = parserConfig.getBuildFileSearchMethod().get();
Parser.java,ImmutableSortedSet<Flavor> defaultFlavors = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) ImmutableSortedSet<Flavor> defaultFlavors = ImmutableSortedSet.of();
BuildLogHelper.java,Optional<String> commandArgs = Optional.empty();,if (Optional != null ) Optional<String> commandArgs = Optional.empty();
Configs.java,ImmutableList<Path> configFiles = configFileBuilder.build();,if (configFileBuilder != null ) ImmutableList<Path> configFiles = configFileBuilder.build();
GenAidlTest.java,ProjectFilesystem stubFilesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();,if (FakeProjectFilesystem != null ) ProjectFilesystem stubFilesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();
GenAidlTest.java,BuildRuleParams params = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) BuildRuleParams params = TestBuildRuleParams.create();
Manifest.java,String input = inputs.get(hashEntry.getFirst());,if (inputs != null ) String input = inputs.get(hashEntry.getFirst());
Manifest.java,HashCode inputHash = hashEntry.getSecond();,if (hashEntry != null ) HashCode inputHash = hashEntry.getSecond();
ProjectGeneratorTest.java,ProjectGenerator projectGenerator = createProjectGeneratorForCombinedProject(ImmutableSet.of());,if (createProjectGeneratorForCombinedProject(ImmutableSet != null ) ProjectGenerator projectGenerator = createProjectGeneratorForCombinedProject(ImmutableSet.of());
ProjectGeneratorTest.java,ProjectGenerator projectGenerator = createProjectGeneratorForCombinedProject(ImmutableSet.of());,if (createProjectGeneratorForCombinedProject(ImmutableSet != null ) ProjectGenerator projectGenerator = createProjectGeneratorForCombinedProject(ImmutableSet.of());
ProjectGeneratorTest.java,ProjectGenerator projectGenerator = createProjectGeneratorForCombinedProject(ImmutableSet.of());,if (createProjectGeneratorForCombinedProject(ImmutableSet != null ) ProjectGenerator projectGenerator = createProjectGeneratorForCombinedProject(ImmutableSet.of());
ProjectGeneratorTest.java,ProjectGenerator projectGenerator = createProjectGeneratorForCombinedProject(ImmutableSet.of());,if (createProjectGeneratorForCombinedProject(ImmutableSet != null ) ProjectGenerator projectGenerator = createProjectGeneratorForCombinedProject(ImmutableSet.of());
HeaderMap.java,numEntries = buffer.getInt();,if (buffer != null ) numEntries = buffer.getInt();
HeaderMap.java,numBuckets = buffer.getInt();,if (buffer != null ) numBuckets = buffer.getInt();
HeaderMap.java,maxValueLength = buffer.getInt();,if (buffer != null ) maxValueLength = buffer.getInt();
CxxLinkableEnhancer.java,ImmutableList<Arg> allArgs = argsBuilder.build();,if (argsBuilder != null ) ImmutableList<Arg> allArgs = argsBuilder.build();
PerBuildState.java,int numParsingThreads = parserConfig.getNumParsingThreads();,if (parserConfig != null ) int numParsingThreads = parserConfig.getNumParsingThreads();
PerBuildState.java,Path root = cell.getFilesystem().getRootPath();,if (cell != null ) Path root = cell.getFilesystem().getRootPath();
PerBuildState.java,Cell cell = cells.get(target.getCellPath());,if (cells != null ) Cell cell = cells.get(target.getCellPath());
PerBuildState.java,Cell currentCell = getCell(node.getBuildTarget());,if (getCell(node != null ) Cell currentCell = getCell(node.getBuildTarget());
ProjectBuildFileParserFactory.java,Optional<String> pythonModuleSearchPath = parserConfig.getPythonModuleSearchPath();,if (parserConfig != null ) Optional<String> pythonModuleSearchPath = parserConfig.getPythonModuleSearchPath();
ProjectBuildFileParserFactory.java,Syntax defaultBuildFileSyntax = parserConfig.getDefaultBuildFileSyntax();,if (parserConfig != null ) Syntax defaultBuildFileSyntax = parserConfig.getDefaultBuildFileSyntax();
PerBuildState.java,this.console = Console.createNullConsole();,if (Console != null ) this.console = Console.createNullConsole();
AbstractPreprocessorFlags.java,boolean precompiled = pch.get().canPrecompile();,if (pch != null ) boolean precompiled = pch.get().canPrecompile();
StreamingWebSocketServlet.java,subscribedEvents = Sets.newHashSet();,if (Sets != null ) subscribedEvents = Sets.newHashSet();
CoordinatorModeRunner.java,BuildId buildId = clientBuildId.get();,if (clientBuildId != null ) BuildId buildId = clientBuildId.get();
CoordinatorModeRunner.java,URI uploadUri = traceUploadUri.get();,if (traceUploadUri != null ) URI uploadUri = traceUploadUri.get();
WorkerProcessPoolTest.java,FakeWorkerProcess worker = new FakeWorkerProcess(ImmutableMap.of());,if (FakeWorkerProcess(ImmutableMap != null ) FakeWorkerProcess worker = new FakeWorkerProcess(ImmutableMap.of());
CxxSharedLibraryInterfaceIntegrationTest.java,Path ndkDir = androidNdk.get().getNdkRootPath();,if (androidNdk != null ) Path ndkDir = androidNdk.get().getNdkRootPath();
CxxSharedLibraryInterfaceIntegrationTest.java,String ndkVersion = androidNdk.get().getNdkVersion();,if (androidNdk != null ) String ndkVersion = androidNdk.get().getNdkVersion();
IsolatedExecutionStrategy.java,HashCode hash = hasher.hash();,if (hasher != null ) HashCode hash = hasher.hash();
GrpcRemoteExecution.java,SettableFuture<ByteBuffer> future = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<ByteBuffer> future = SettableFuture.create();
GrpcRemoteExecution.java,data = value.getData();,if (value != null ) data = value.getData();
GrpcRemoteExecution.java,data = data.concat(value.getData());,if (data != null ) data = data.concat(value.getData());
RemoteExecution.java,classPathValue = prepareClassPath(BuckClasspath.getClasspath());,if (prepareClassPath(BuckClasspath != null ) classPathValue = prepareClassPath(BuckClasspath.getClasspath());
RemoteExecution.java,bootstrapClassPathValue = prepareClassPath(BuckClasspath.getBootstrapClasspath());,if (prepareClassPath(BuckClasspath != null ) bootstrapClassPathValue = prepareClassPath(BuckClasspath.getBootstrapClasspath());
LocalContentAddressedStorage.java,Path path = getPath(file.getDigest().getHash());,if (getPath(file != null ) Path path = getPath(file.getDigest().getHash());
LocalContentAddressedStorage.java,Stream<Digest> missing = findMissing(data.keySet());,if (findMissing(data != null ) Stream<Digest> missing = findMissing(data.keySet());
LocalContentAddressedStorage.java,String hash = entry.getKey().getHash();,if (entry != null ) String hash = entry.getKey().getHash();
LocalContentAddressedStorage.java,Path path = root.resolve(file.getPath());,if (root != null ) Path path = root.resolve(file.getPath());
LocalContentAddressedStorage.java,Path dirRoot = root.resolve(directory.getPath());,if (root != null ) Path dirRoot = root.resolve(directory.getPath());
LocalContentAddressedStorage.java,Tree tree = readTree(directory.getTreeDigest());,if (readTree(directory != null ) Tree tree = readTree(directory.getTreeDigest());
LocalContentAddressedStorage.java,Path path = getPath(digest.getHash());,if (getPath(digest != null ) Path path = getPath(digest.getHash());
OutOfProcessIsolatedExecution.java,Builder paramsBuilder = ProcessExecutorParams.builder();,if (ProcessExecutorParams != null ) Builder paramsBuilder = ProcessExecutorParams.builder();
OutOfProcessIsolatedExecution.java,requiredDataBuilder = ImmutableMap.builder();,if (ImmutableMap != null ) requiredDataBuilder = ImmutableMap.builder();
RemoteExecution.java,ImmutableList<Path> classpath = BuckClasspath.getClasspath();,if (BuckClasspath != null ) ImmutableList<Path> classpath = BuckClasspath.getClasspath();
RemoteExecution.java,ImmutableList<Path> bootstrapClasspath = BuckClasspath.getBootstrapClasspath();,if (BuckClasspath != null ) ImmutableList<Path> bootstrapClasspath = BuckClasspath.getBootstrapClasspath();
InProcessIsolatedExecution.java,Inputs inputs = inputsBuilder.build();,if (inputsBuilder != null ) Inputs inputs = inputsBuilder.build();
InputsDigestBuilder.java,byte[] rootData = protocol.toByteArray(tree.getRoot());,if (protocol != null ) byte[] rootData = protocol.toByteArray(tree.getRoot());
OutOfProcessIsolatedExecution.java,Inputs inputs = builder.build();,if (builder != null ) Inputs inputs = builder.build();
RemoteExecution.java,Inputs inputs = inputsBuilder.build();,if (inputsBuilder != null ) Inputs inputs = inputsBuilder.build();
FileTreeBuilderTest.java,Inputs inputs = digestBuilder.build();,if (digestBuilder != null ) Inputs inputs = digestBuilder.build();
FileTreeBuilderTest.java,Inputs inputs = digestBuilder.build();,if (digestBuilder != null ) Inputs inputs = digestBuilder.build();
FileTreeBuilderTest.java,Inputs inputs = digestBuilder.build();,if (digestBuilder != null ) Inputs inputs = digestBuilder.build();
FileTreeBuilderTest.java,Inputs inputs = digestBuilder.build();,if (digestBuilder != null ) Inputs inputs = digestBuilder.build();
LocalContentAddressedStorageTest.java,Inputs inputs = inputsBuilder.build();,if (inputsBuilder != null ) Inputs inputs = inputsBuilder.build();
AuditCellCommand.java,cellList = getCells(params.getBuckConfig());,if (getCells(params != null ) cellList = getCells(params.getBuckConfig());
AuditCellCommand.java,cellList = outputBuilder.build();,if (outputBuilder != null ) cellList = outputBuilder.build();
CxxDescriptionEnhancer.java,BuildTarget targetWithoutFlavor = BuildTarget.of(target.getUnflavoredBuildTarget());,if (BuildTarget != null ) BuildTarget targetWithoutFlavor = BuildTarget.of(target.getUnflavoredBuildTarget());
DistBuildTargetGraphCodec.java,BuildTarget unflavoredTarget = BuildTarget.of(target.getUnflavoredBuildTarget());,if (BuildTarget != null ) BuildTarget unflavoredTarget = BuildTarget.of(target.getUnflavoredBuildTarget());
JavaLibraryDescription.java,BuildTarget unflavored = BuildTarget.of(buildTarget.getUnflavoredBuildTarget());,if (BuildTarget != null ) BuildTarget unflavored = BuildTarget.of(buildTarget.getUnflavoredBuildTarget());
Parser.java,BuildTarget unflavoredTarget = BuildTarget.of(target.getUnflavoredBuildTarget());,if (BuildTarget != null ) BuildTarget unflavoredTarget = BuildTarget.of(target.getUnflavoredBuildTarget());
WindowsCxxIntegrationTest.java,Optional<String> vcvarsallbat = windowsUtils.getVcvarsallbat();,if (windowsUtils != null ) Optional<String> vcvarsallbat = windowsUtils.getVcvarsallbat();
WindowsCxxIntegrationTest.java,Optional<String> envOut = envResult.getStdout();,if (envResult != null ) Optional<String> envOut = envResult.getStdout();
WindowsCxxIntegrationTest.java,String envString = envOut.get();,if (envOut != null ) String envString = envOut.get();
MoreSuppliers.java,T t = Preconditions.checkNotNull(delegate.get());,if (Preconditions != null ) T t = Preconditions.checkNotNull(delegate.get());
AbstractUnflavoredBuildTarget.java,"cmp = StringsUtils.compareStrings(getBaseName(), o.getBaseName());","if (o != null ) cmp = StringsUtils.compareStrings(getBaseName(), o.getBaseName());"
CoordinatorEventListener.java,totalMinionCount = Optional.of(buildModeInfo.getNumberOfMinions());,if (Optional != null ) totalMinionCount = Optional.of(buildModeInfo.getNumberOfMinions());
ActionGraphNodeCache.java,CacheEntry cacheEntry = buildRuleSubgraphCache.getIfPresent(targetNode.getBuildTarget());,if (buildRuleSubgraphCache != null ) CacheEntry cacheEntry = buildRuleSubgraphCache.getIfPresent(targetNode.getBuildTarget());
ActionGraphNodeCache.java,BuildRule newBuildRule = ruleResolver.requireRule(targetNode.getBuildTarget());,if (ruleResolver != null ) BuildRule newBuildRule = ruleResolver.requireRule(targetNode.getBuildTarget());
ActionGraphNodeCache.java,CacheEntry cacheEntry = buildRuleSubgraphCache.getIfPresent(targetNode.getBuildTarget());,if (buildRuleSubgraphCache != null ) CacheEntry cacheEntry = buildRuleSubgraphCache.getIfPresent(targetNode.getBuildTarget());
ActionGraphNodeCache.java,Stopwatch stopwatch = Stopwatch.createStarted();,if (Stopwatch != null ) Stopwatch stopwatch = Stopwatch.createStarted();
ActionGraphNodeCache.java,CacheEntry cacheEntry = buildRuleSubgraphCache.getIfPresent(targetNode.getBuildTarget());,if (buildRuleSubgraphCache != null ) CacheEntry cacheEntry = buildRuleSubgraphCache.getIfPresent(targetNode.getBuildTarget());
ActionGraphNodeCache.java,Stopwatch stopwatch = Stopwatch.createStarted();,if (Stopwatch != null ) Stopwatch stopwatch = Stopwatch.createStarted();
RustLibraryDescription.java,RustPlatform platform = rustPlatform.orElse(rustToolchain.getDefaultRustPlatform());,if (rustPlatform != null ) RustPlatform platform = rustPlatform.orElse(rustToolchain.getDefaultRustPlatform());
RustCompileUtils.java,SortedSet<BuildRule> ruledeps = params.getBuildDeps();,if (params != null ) SortedSet<BuildRule> ruledeps = params.getBuildDeps();
RustCompileUtils.java,SortedSet<BuildRule> deps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) SortedSet<BuildRule> deps = ImmutableSortedSet.of();
RustCompileUtils.java,deps = rule.getBuildDeps();,if (rule != null ) deps = rule.getBuildDeps();
RustCompileUtils.java,Set<BuildRule> deps = ImmutableSet.of();,if (ImmutableSet != null ) Set<BuildRule> deps = ImmutableSet.of();
RustCompileUtils.java,deps = rule.getBuildDeps();,if (rule != null ) deps = rule.getBuildDeps();
RustCompileUtils.java,checkArgs = rustConfig.getRustCheckFlags().stream();,if (rustConfig != null ) checkArgs = rustConfig.getRustCheckFlags().stream();
RustBinaryDescription.java,ToolProvider compiler = rustBuckConfig.getRustCompiler();,if (rustBuckConfig != null ) ToolProvider compiler = rustBuckConfig.getRustCompiler();
RustTestDescription.java,ToolProvider compiler = rustBuckConfig.getRustCompiler();,if (rustBuckConfig != null ) ToolProvider compiler = rustBuckConfig.getRustCompiler();
RustToolchainFactoryTest.java,ToolchainProvider toolchainProvider = new ToolchainProviderBuilder().build();,if (ToolchainProviderBuilder() != null ) ToolchainProvider toolchainProvider = new ToolchainProviderBuilder().build();
HgCmdLineInterface.java,hgRoot = Optional.empty();,if (Optional != null ) hgRoot = Optional.empty();
HgCmdLineInterfaceIntegrationTest.java,Path result = hgCmdLineInterface.getHgRoot();,if (hgCmdLineInterface != null ) Path result = hgCmdLineInterface.getHgRoot();
HgCmdLineInterfaceIntegrationTest.java,Path result = hgCmdLineInterface.getHgRoot();,if (hgCmdLineInterface != null ) Path result = hgCmdLineInterface.getHgRoot();
BuildCommand.java,ActionGraphAndResolver actionGraphAndResolver = graphs.getActionGraphAndResolver();,if (graphs != null ) ActionGraphAndResolver actionGraphAndResolver = graphs.getActionGraphAndResolver();
BuildCommand.java,buildTargets = targetGraphAndBuildTargets.getBuildTargets();,if (targetGraphAndBuildTargets != null ) buildTargets = targetGraphAndBuildTargets.getBuildTargets();
ArtifactCacheHandler.java,String path = baseRequest.getUri().getPath();,if (baseRequest != null ) String path = baseRequest.getUri().getPath();
StaticResourcesHandler.java,String path = baseRequest.getUri().getPath();,if (baseRequest != null ) String path = baseRequest.getUri().getPath();
GlobTest.java,Event event = handler.getLastEvent();,if (handler != null ) Event event = handler.getLastEvent();
GlobTest.java,Location loc = event.getLocation();,if (event != null ) Location loc = event.getLocation();
ActionGraphNodeCacheTest.java,SortedSet<BuildTarget> runtimeDeps = ImmutableSortedSet.of(childBuildRule.getBuildTarget());,if (ImmutableSortedSet != null ) SortedSet<BuildTarget> runtimeDeps = ImmutableSortedSet.of(childBuildRule.getBuildTarget());
ActionGraphNodeCacheTest.java,SortedSet<BuildTarget> runtimeDeps = ImmutableSortedSet.of(childBuildRule.getBuildTarget());,if (ImmutableSortedSet != null ) SortedSet<BuildTarget> runtimeDeps = ImmutableSortedSet.of(childBuildRule.getBuildTarget());
HttpCacheUploadStats.java,Optional<Long> artifactSizeBytes = event.getStoreData().getArtifactSizeBytes();,if (event != null ) Optional<Long> artifactSizeBytes = event.getStoreData().getArtifactSizeBytes();
DefaultBuckEventBus.java,long startWaitTime = System.nanoTime();,if (System != null ) long startWaitTime = System.nanoTime();
GoToolchainFactory.java,GoBuckConfig goBuckConfig = new GoBuckConfig(context.getBuckConfig());,if (GoBuckConfig(context != null ) GoBuckConfig goBuckConfig = new GoBuckConfig(context.getBuckConfig());
GoToolchainFactory.java,Optional<String> configValue = goBuckConfig.getDefaultPlatform();,if (goBuckConfig != null ) Optional<String> configValue = goBuckConfig.getDefaultPlatform();
GoToolchainFactory.java,Platform platform = goBuckConfig.getDelegate().getPlatform();,if (goBuckConfig != null ) Platform platform = goBuckConfig.getDelegate().getPlatform();
GoToolchainFactory.java,Architecture architecture = goBuckConfig.getDelegate().getArchitecture();,if (goBuckConfig != null ) Architecture architecture = goBuckConfig.getDelegate().getArchitecture();
IjProjectCommandHelper.java,this.console = projectViewParameters.getConsole();,if (projectViewParameters != null ) this.console = projectViewParameters.getConsole();
IjProjectCommandHelper.java,this.parser = projectViewParameters.getParser();,if (projectViewParameters != null ) this.parser = projectViewParameters.getParser();
IjProjectCommandHelper.java,projectGraph = targetGraphAndTargets.getTargetGraph();,if (targetGraphAndTargets != null ) projectGraph = targetGraphAndTargets.getTargetGraph();
ProjectView.java,this.repository = projectViewParameters.getPath().toString();,if (projectViewParameters != null ) this.repository = projectViewParameters.getPath().toString();
ProjectView.java,this.stdErr = projectViewParameters.getStdErr();,if (projectViewParameters != null ) this.stdErr = projectViewParameters.getStdErr();
ProjectView.java,this.viewPath = Preconditions.checkNotNull(projectViewParameters.getViewPath());,if (Preconditions != null ) this.viewPath = Preconditions.checkNotNull(projectViewParameters.getViewPath());
ProjectView.java,this.dryRun = projectViewParameters.isDryRun();,if (projectViewParameters != null ) this.dryRun = projectViewParameters.isDryRun();
ProjectView.java,this.withTests = projectViewParameters.isWithTests();,if (projectViewParameters != null ) this.withTests = projectViewParameters.isWithTests();
ProjectView.java,this.config = projectViewParameters.getConfig();,if (projectViewParameters != null ) this.config = projectViewParameters.getConfig();
ProjectView.java,this.verbosity = projectViewParameters.getVerbosity();,if (projectViewParameters != null ) this.verbosity = projectViewParameters.getVerbosity();
ProjectView.java,BuildRuleResolver buildRuleResolver = actionGraph.getResolver();,if (actionGraph != null ) BuildRuleResolver buildRuleResolver = actionGraph.getResolver();
ProjectView.java,BuckPaths buckPaths = buildRule.getProjectFilesystem().getBuckPaths();,if (buildRule != null ) BuckPaths buckPaths = buildRule.getProjectFilesystem().getBuckPaths();
ProjectView.java,configuredBuckOut = buckPaths.getBuckOut();,if (buckPaths != null ) configuredBuckOut = buckPaths.getBuckOut();
ProjectView.java,configuredBuckOutGen = buckPaths.getGenDir();,if (buckPaths != null ) configuredBuckOutGen = buckPaths.getGenDir();
ProjectView.java,"int warnings = nameCollisions.size(); // We don't count ""Can't handle"" messages as warnings","if (warnings != null ) int warnings = nameCollisions.size(); // We don't count ""Can't handle"" messages as warnings"
ProjectView.java,List<String> candidateList = mapping.getValue();,if (mapping != null ) List<String> candidateList = mapping.getValue();
ProjectView.java,Stream<String> candidateStream = candidateList.stream();,if (candidateList != null ) Stream<String> candidateStream = candidateList.stream();
ProjectView.java,candidateStream = candidateStream.sorted();,if (candidateStream != null ) candidateStream = candidateStream.sorted();
ProjectView.java,List<String> paths = helper.getSortedSourcePaths();,if (helper != null ) List<String> paths = helper.getSortedSourcePaths();
ProjectView.java,Format prettyFormat = Format.getPrettyFormat();,if (Format != null ) Format prettyFormat = Format.getPrettyFormat();
ProjectView.java,SourcePath sourcePath = rule.getSourcePathToOutput();,if (rule != null ) SourcePath sourcePath = rule.getSourcePathToOutput();
ProjectView.java,String dirname = path.getParent().toString();,if (path != null ) String dirname = path.getParent().toString();
ProjectView.java,String basename = path.getFileName().toString();,if (path != null ) String basename = path.getFileName().toString();
ProjectView.java,SourcePath sourcePath = sourceRule.getSourcePathToOutput();,if (sourceRule != null ) SourcePath sourcePath = sourceRule.getSourcePathToOutput();
ProjectView.java,String configuredBuckOutAsString = configuredBuckOut.toString();,if (configuredBuckOut != null ) String configuredBuckOutAsString = configuredBuckOut.toString();
ProjectView.java,"String genFolder = fileJoin(File.separator, configuredBuckOutGen.toString());","if (configuredBuckOutGen != null ) String genFolder = fileJoin(File.separator, configuredBuckOutGen.toString());"
ProjectView.java,BuildRuleResolver ruleResolver = actionGraph.getResolver();,if (actionGraph != null ) BuildRuleResolver ruleResolver = actionGraph.getResolver();
ProjectView.java,SourcePath sourcePathToOutput = rule.getSourcePathToOutput();,if (rule != null ) SourcePath sourcePathToOutput = rule.getSourcePathToOutput();
ProjectView.java,ProjectFilesystem filesystem = node.getFilesystem();,if (node != null ) ProjectFilesystem filesystem = node.getFilesystem();
ProjectView.java,Set<BuildTarget> buildDeps = node.getBuildDeps();,if (node != null ) Set<BuildTarget> buildDeps = node.getBuildDeps();
ProjectView.java,Object constructorArg = node.getConstructorArg();,if (node != null ) Object constructorArg = node.getConstructorArg();
ProjectView.java,int buckOutNameCount = configuredBuckOut.getNameCount();,if (configuredBuckOut != null ) int buckOutNameCount = configuredBuckOut.getNameCount();
ProjectView.java,int length = join.length();,if (join != null ) int length = join.length();
ProjectView.java,Path linkPath = link.toPath();,if (link != null ) Path linkPath = link.toPath();
ProjectView.java,Path directory = newPath.getParent();,if (newPath != null ) Path directory = newPath.getParent();
ProjectView.java,"Path tail = oldPath.subpath(locationIndex, oldPath.getNameCount());","if (oldPath != null ) Path tail = oldPath.subpath(locationIndex, oldPath.getNameCount());"
ProjectView.java,return s == null || s.isEmpty();,if (s != null ) return s == null || s.isEmpty();
ProjectViewIntegrationTest.java,String[] children = dotIdeaDirectory.toFile().list();,if (dotIdeaDirectory != null ) String[] children = dotIdeaDirectory.toFile().list();
BulkFileListenerDispatcher.java,Module[] modules = moduleManager.getModules();,if (moduleManager != null ) Module[] modules = moduleManager.getModules();
BulkFileListenerDispatcher.java,Facet[] facets = facetManager.getAllFacets();,if (facetManager != null ) Facet[] facets = facetManager.getAllFacets();
BulkFileListenerDispatcher.java,Object requestor = event.getRequestor();,if (event != null ) Object requestor = event.getRequestor();
HandlePackageCreation.java,String newFile = event.getPath();,if (event != null ) String newFile = event.getPath();
HandlePackageCreation.java,Module module = facet.getModule();,if (facet != null ) Module module = facet.getModule();
HandlePackageCreation.java,ModifiableRootModel rootModel = ModuleRootManager.getInstance(module).getModifiableModel();,if (ModuleRootManager != null ) ModifiableRootModel rootModel = ModuleRootManager.getInstance(module).getModifiableModel();
MoveResourceFiles.java,Project project = facet.getModule().getProject();,if (facet != null ) Project project = facet.getModule().getProject();
MoveResourceFiles.java,VirtualFile[] selectedFiles = fileEditorManager.getSelectedFiles();,if (fileEditorManager != null ) VirtualFile[] selectedFiles = fileEditorManager.getSelectedFiles();
MoveResourceFiles.java,Editor editor = fileEditorManager.getSelectedTextEditor();,if (fileEditorManager != null ) Editor editor = fileEditorManager.getSelectedTextEditor();
MoveResourceFiles.java,PsiElement value = expression.getFirstChild();,if (expression != null ) PsiElement value = expression.getFirstChild();
MoveResourceFiles.java,PsiElement array = value.getFirstChild();,if (value != null ) PsiElement array = value.getFirstChild();
MoveResourceFiles.java,String target = dependency.getText();,if (dependency != null ) String target = dependency.getText();
MoveResourceFiles.java,Path resourceFilePath = Paths.get(newFile).getFileName();,if (Paths != null ) Path resourceFilePath = Paths.get(newFile).getFileName();
MoveResourceFiles.java,String basePath = project.getBasePath();,if (project != null ) String basePath = project.getBasePath();
MoveResourceFiles.java,String newFileSuffix = newFile.substring(basePath.length());,if (newFile != null ) String newFileSuffix = newFile.substring(basePath.length());
MoveResourceFiles.java,VirtualFileManager virtualFileManager = VirtualFileManager.getInstance();,if (VirtualFileManager != null ) VirtualFileManager virtualFileManager = VirtualFileManager.getInstance();
MoveResourceFiles.java,String basePath = project.getBasePath();,if (project != null ) String basePath = project.getBasePath();
MoveResourceFiles.java,String selectionName = selection.getPath();,if (selection != null ) String selectionName = selection.getPath();
MoveResourceFiles.java,String selectionSuffix = selectionName.substring(basePath.length());,if (selectionName != null ) String selectionSuffix = selectionName.substring(basePath.length());
MoveResourceFiles.java,realSelectionPath = selectionPath.toRealPath().toString();,if (selectionPath != null ) realSelectionPath = selectionPath.toRealPath().toString();
MoveResourceFiles.java,PsiElement child = element.getFirstChild();,if (element != null ) PsiElement child = element.getFirstChild();
CgoLibraryDescription.java,BuildRuleResolver resolver = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolver = context.getBuildRuleResolver();
GoCompile.java,this.compiler = goToolchain.getCompiler();,if (goToolchain != null ) this.compiler = goToolchain.getCompiler();
GoCompile.java,this.assemblerIncludeDirs = goToolchain.getAssemblerIncludeDirs();,if (goToolchain != null ) this.assemblerIncludeDirs = goToolchain.getAssemblerIncludeDirs();
GoCompile.java,this.assembler = goToolchain.getAssembler();,if (goToolchain != null ) this.assembler = goToolchain.getAssembler();
GoCompile.java,this.packer = goToolchain.getPacker();,if (goToolchain != null ) this.packer = goToolchain.getPacker();
GoToolchainFactory.java,Optional<Path> configValue = goBuckConfig.getGoRoot();,if (goBuckConfig != null ) Optional<Path> configValue = goBuckConfig.getGoRoot();
GoToolchainFactory.java,Optional<Path> goTool = goBuckConfig.getTool();,if (goBuckConfig != null ) Optional<Path> goTool = goBuckConfig.getTool();
GoToolchainFactory.java,Optional<Path> goRoot = goBuckConfig.getGoRoot();,if (goBuckConfig != null ) Optional<Path> goRoot = goBuckConfig.getGoRoot();
BuildRuleContextWithEnvironmentTest.java,BuildRule returnedRule = new FakeBuildRuleWithProviders(providerCollectionBuilder.build());,if (FakeBuildRuleWithProviders(providerCollectionBuilder != null ) BuildRule returnedRule = new FakeBuildRuleWithProviders(providerCollectionBuilder.build());
FileSystemMap.java,PathFragment relPath = parent.getKey();,if (parent != null ) PathFragment relPath = parent.getKey();
Main.java,pluginManager = BuckPluginManagerFactory.createPluginManager();,if (BuckPluginManagerFactory != null ) pluginManager = BuckPluginManagerFactory.createPluginManager();
Main.java,isUsingDistributedBuild = subcommand.isUsingDistributedBuild();,if (subcommand != null ) isUsingDistributedBuild = subcommand.isUsingDistributedBuild();
DefaultAsyncTransformationEngineTest.java,graph = GraphBuilder.directed().build();,if (GraphBuilder != null ) graph = GraphBuilder.directed().build();
SkylarkProjectBuildFileParser.java,String name = Description.getBuildRuleType(ruleClass).getName();,if (Description != null ) String name = Description.getBuildRuleType(ruleClass).getName();
SkylarkProjectBuildFileParser.java,BuiltinFunction readConfigFunction = ReadConfig.create();,if (ReadConfig != null ) BuiltinFunction readConfigFunction = ReadConfig.create();
SkylarkProjectBuildFileParser.java,BuiltinFunction glob = Glob.create();,if (Glob != null ) BuiltinFunction glob = Glob.create();
SkylarkProjectBuildFileParser.java,buckGlobals = globalEnv.getGlobals();,if (globalEnv != null ) buckGlobals = globalEnv.getGlobals();
BuildRules.java,Iterable<BuildRule> exported = exporter.getExportedDeps();,if (exporter != null ) Iterable<BuildRule> exported = exporter.getExportedDeps();
AndroidBinaryDescription.java,params = params.withoutExtraDeps();,if (params != null ) params = params.withoutExtraDeps();
AndroidBinaryDescription.java,BuildRule keystore = resolver.getRule(args.getKeystore());,if (resolver != null ) BuildRule keystore = resolver.getRule(args.getKeystore());
AndroidBinaryDescription.java,exopackageModes = EnumSet.copyOf(args.getExopackageModes());,if (EnumSet != null ) exopackageModes = EnumSet.copyOf(args.getExopackageModes());
AndroidBinaryDescription.java,ImmutableSortedSet<BuildRule> buildRulesToExcludeFromDex = builder.build();,if (builder != null ) ImmutableSortedSet<BuildRule> buildRulesToExcludeFromDex = builder.build();
AndroidBinaryDescription.java,ToolchainProvider toolchainProvider = context.getToolchainProvider();,if (context != null ) ToolchainProvider toolchainProvider = context.getToolchainProvider();
AndroidBinaryDescription.java,CellPathResolver cellRoots = context.getCellPathResolver();,if (context != null ) CellPathResolver cellRoots = context.getCellPathResolver();
AndroidBinaryDescription.java,ResourceFilter resourceFilter = new ResourceFilter(args.getResourceFilter());,if (ResourceFilter(args != null ) ResourceFilter resourceFilter = new ResourceFilter(args.getResourceFilter());
AndroidBinaryDescription.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
AndroidBinaryDescription.java,AndroidGraphEnhancementResult result = graphEnhancer.createAdditionalBuildables();,if (graphEnhancer != null ) AndroidGraphEnhancementResult result = graphEnhancer.createAdditionalBuildables();
AndroidBinaryDescription.java,moduleVerification = Optional.empty();,if (Optional != null ) moduleVerification = Optional.empty();
OcamlBinaryDescription.java,OcamlPlatform ocamlPlatform = ocamlToolchain.getDefaultOcamlPlatform();,if (ocamlToolchain != null ) OcamlPlatform ocamlPlatform = ocamlToolchain.getDefaultOcamlPlatform();
OcamlLibraryDescription.java,OcamlPlatform ocamlPlatform = ocamlToolchain.getDefaultOcamlPlatform();,if (ocamlToolchain != null ) OcamlPlatform ocamlPlatform = ocamlToolchain.getDefaultOcamlPlatform();
JdkProvidedInMemoryJavac.java,compiler = ToolProvider.getSystemJavaCompiler();,if (ToolProvider != null ) compiler = ToolProvider.getSystemJavaCompiler();
Jsr199JavacInvocation.java,boolean success = javacTask.call();,if (javacTask != null ) boolean success = javacTask.call();
OcamlStaticLibrary.java,UnflavoredBuildTarget staticBuildTarget = staticLibraryTarget.getUnflavoredBuildTarget();,if (staticLibraryTarget != null ) UnflavoredBuildTarget staticBuildTarget = staticLibraryTarget.getUnflavoredBuildTarget();
OcamlLibraryDescription.java,SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(context.getBuildRuleResolver());,if (SourcePathRuleFinder(context != null ) SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(context.getBuildRuleResolver());
OcamlLibraryDescription.java,ImmutableList<OcamlSource> srcs = args.getSrcs();,if (args != null ) ImmutableList<OcamlSource> srcs = args.getSrcs();
OcamlRuleBuilder.java,NativeLinkableInput nativeLinkableInput = getNativeLinkableInput(params.getBuildDeps());,if (getNativeLinkableInput(params != null ) NativeLinkableInput nativeLinkableInput = getNativeLinkableInput(params.getBuildDeps());
OcamlRuleBuilder.java,NativeLinkableInput bytecodeLinkableInput = getBytecodeLinkableInput(params.getBuildDeps());,if (getBytecodeLinkableInput(params != null ) NativeLinkableInput bytecodeLinkableInput = getBytecodeLinkableInput(params.getBuildDeps());
OcamlRuleBuilder.java,NativeLinkableInput nativeLinkableInput = getNativeLinkableInput(params.getBuildDeps());,if (getNativeLinkableInput(params != null ) NativeLinkableInput nativeLinkableInput = getNativeLinkableInput(params.getBuildDeps());
OcamlRuleBuilder.java,NativeLinkableInput bytecodeLinkableInput = getBytecodeLinkableInput(params.getBuildDeps());,if (getBytecodeLinkableInput(params != null ) NativeLinkableInput bytecodeLinkableInput = getBytecodeLinkableInput(params.getBuildDeps());
OcamlLibraryDescription.java,ImmutableList<Arg> flags = flagsBuilder.build();,if (flagsBuilder != null ) ImmutableList<Arg> flags = flagsBuilder.build();
OcamlBinaryDescription.java,ImmutableList<String> linkerFlags = args.getLinkerFlags();,if (args != null ) ImmutableList<String> linkerFlags = args.getLinkerFlags();
OcamlLibraryDescription.java,ImmutableList<String> linkerflags = args.getLinkerFlags();,if (args != null ) ImmutableList<String> linkerflags = args.getLinkerFlags();
OcamlLibraryDescription.java,boolean bytecodeOnly = args.getBytecodeOnly();,if (args != null ) boolean bytecodeOnly = args.getBytecodeOnly();
OcamlLibraryDescription.java,boolean nativePlugin = !bytecodeOnly && args.getNativePlugin();,if (args != null ) boolean nativePlugin = !bytecodeOnly && args.getNativePlugin();
OcamlRuleBuilder.java,OcamlGeneratedBuildRules result = generator.generate();,if (generator != null ) OcamlGeneratedBuildRules result = generator.generate();
OcamlDescriptionsProvider.java,BuckConfig config = context.getBuckConfig();,if (context != null ) BuckConfig config = context.getBuckConfig();
OcamlRuleBuilder.java,OcamlPlatform ocamlPlatform = ocamlToolchain.getDefaultOcamlPlatform();,if (ocamlToolchain != null ) OcamlPlatform ocamlPlatform = ocamlToolchain.getDefaultOcamlPlatform();
OcamlRuleBuilder.java,OcamlPlatform ocamlPlatform = ocamlToolchain.getDefaultOcamlPlatform();,if (ocamlToolchain != null ) OcamlPlatform ocamlPlatform = ocamlToolchain.getDefaultOcamlPlatform();
BuildCommand.java,this.autoDistBuildMessage = config.getAutoDistributedBuildMessage();,if (config != null ) this.autoDistBuildMessage = config.getAutoDistributedBuildMessage();
Main.java,isUsingDistributedBuild = subcommand.isUseDistributedBuild();,if (subcommand != null ) isUsingDistributedBuild = subcommand.isUseDistributedBuild();
PreprocessorDelegate.java,SourcePath headerPath = preprocessorFlags.getPrefixHeader().get();,if (preprocessorFlags != null ) SourcePath headerPath = preprocessorFlags.getPrefixHeader().get();
PreprocessorDelegate.java,headerPathNormalizer = Optional.of(builder.build());,if (Optional != null ) headerPathNormalizer = Optional.of(builder.build());
MoreSuppliers.java,value = valueRef.get();,if (valueRef != null ) value = valueRef.get();
MoreSuppliers.java,value = delegate.get();,if (delegate != null ) value = delegate.get();
AbstractPrebuiltCxxLibraryGroupDescription.java,BuildRuleResolver resolverLocal = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver resolverLocal = context.getBuildRuleResolver();
PrebuiltCxxLibraryDescription.java,BuildRuleResolver ruleResolverLocal = context.getBuildRuleResolver();,if (context != null ) BuildRuleResolver ruleResolverLocal = context.getBuildRuleResolver();
HaskellDescriptionUtils.java,NativeLinkable.Linkage link = nativeLinkable.getPreferredLinkage(platform.getCxxPlatform());,if (nativeLinkable != null ) NativeLinkable.Linkage link = nativeLinkable.getPreferredLinkage(platform.getCxxPlatform());
LuaBinaryDescription.java,"OmnibusRoots.Builder omnibusRoots = OmnibusRoots.builder(cxxPlatform, ImmutableSet.of());","if (ImmutableSet != null ) OmnibusRoots.Builder omnibusRoots = OmnibusRoots.builder(cxxPlatform, ImmutableSet.of());"
GoCompile.java,ImmutableList<Path> compileSrcs = compileSrcListBuilder.build();,if (compileSrcListBuilder != null ) ImmutableList<Path> compileSrcs = compileSrcListBuilder.build();
GoCompile.java,ImmutableList<Path> asmSrcs = asmSrcListBuilder.build();,if (asmSrcListBuilder != null ) ImmutableList<Path> asmSrcs = asmSrcListBuilder.build();
GoCompile.java,boolean allowExternalReferences = !asmSrcs.isEmpty() || !extraAsmOutputs.isEmpty();,if (!extraAsmOutputs != null ) boolean allowExternalReferences = !asmSrcs.isEmpty() || !extraAsmOutputs.isEmpty();
GoDescriptors.java,ImmutableSet<SourcePath> compileSrcs = compileSrcBuilder.build();,if (compileSrcBuilder != null ) ImmutableSet<SourcePath> compileSrcs = compileSrcBuilder.build();
App.java,String message = new Hello().getHelloString();,if (Hello() != null ) String message = new Hello().getHelloString();
StampedeBuildClientTest.java,int localBuildExitCode = result.get();,if (result != null ) int localBuildExitCode = result.get();
PreprocessorDelegate.java,SourcePath headerPath = preprocessorFlags.getPrefixHeader().get();,if (preprocessorFlags != null ) SourcePath headerPath = preprocessorFlags.getPrefixHeader().get();
ThriftCoordinatorServer.java,List<String> deadMinions = minionHealthTracker.getDeadMinions();,if (minionHealthTracker != null ) List<String> deadMinions = minionHealthTracker.getDeadMinions();
MinionHealthTrackerTest.java,List<String> deadMinions = tracker.getDeadMinions();,if (tracker != null ) List<String> deadMinions = tracker.getDeadMinions();
MinionHealthTrackerTest.java,List<String> deadMinions = tracker.getDeadMinions();,if (tracker != null ) List<String> deadMinions = tracker.getDeadMinions();
MinionHealthTrackerTest.java,List<String> deadMinions = tracker.getDeadMinions();,if (tracker != null ) List<String> deadMinions = tracker.getDeadMinions();
MinionHealthTrackerTest.java,List<String> deadMinions = tracker.getDeadMinions();,if (tracker != null ) List<String> deadMinions = tracker.getDeadMinions();
MinionHealthTrackerTest.java,deadMinions = tracker.getDeadMinions();,if (tracker != null ) deadMinions = tracker.getDeadMinions();
MinionWorkloadAllocatorTest.java,BuildRuleResolver resolver = CustomBuildRuleResolverFactory.createDiamondDependencyResolver();,if (CustomBuildRuleResolverFactory != null ) BuildRuleResolver resolver = CustomBuildRuleResolverFactory.createDiamondDependencyResolver();
AbstractBuildRuleWithProviders.java,clazz = clazz.getSuperclass();,if (clazz != null ) clazz = clazz.getSuperclass();
DistBuildTrace.java,List<MinionTrace> minionTraces = new ArrayList<>(rulesByMinionId.size());,if (ArrayList<>(rulesByMinionId != null ) List<MinionTrace> minionTraces = new ArrayList<>(rulesByMinionId.size());
ThriftCoordinatorServer.java,MinionWorkloadAllocator allocator = new MinionWorkloadAllocator(queue.get());,if (MinionWorkloadAllocator(queue != null ) MinionWorkloadAllocator allocator = new MinionWorkloadAllocator(queue.get());
LuaBinaryDescription.java,OmnibusRoots roots = omnibusRoots.build();,if (omnibusRoots != null ) OmnibusRoots roots = omnibusRoots.build();
PythonUtil.java,OmnibusRoots roots = omnibusRoots.build();,if (omnibusRoots != null ) OmnibusRoots roots = omnibusRoots.build();
OmnibusRootsTest.java,OmnibusRoots roots = builder.build();,if (builder != null ) OmnibusRoots roots = builder.build();
OmnibusRootsTest.java,OmnibusRoots roots = builder.build();,if (builder != null ) OmnibusRoots roots = builder.build();
PathFragments.java,Path root = path.getRoot();,if (path != null ) Path root = path.getRoot();
PathFragments.java,String rootString = root.toString();,if (root != null ) String rootString = root.toString();
PathFragments.java,char driveLetter = fragment.getDriveLetter();,if (fragment != null ) char driveLetter = fragment.getDriveLetter();
CxxLink.java,Path cellPath = cellResolver.getCellPath(cell).get();,if (cellResolver != null ) Path cellPath = cellResolver.getCellPath(cell).get();
ShBinary.java,Optional<Path> rootPath = cellRoots.getCellPath(Optional.empty());,if (cellRoots != null ) Optional<Path> rootPath = cellRoots.getCellPath(Optional.empty());
ShBinary.java,Optional<Path> rootPath = cellRoots.getCellPath(Optional.empty());,if (cellRoots != null ) Optional<Path> rootPath = cellRoots.getCellPath(Optional.empty());
ShBinary.java,matchedPath = rootPath.get();,if (rootPath != null ) matchedPath = rootPath.get();
OutOfProcessIsolatedExecution.java,ImmutableList<Path> classpath = BuckClasspath.getClasspath();,if (BuckClasspath != null ) ImmutableList<Path> classpath = BuckClasspath.getClasspath();
OutOfProcessIsolatedExecution.java,ImmutableList<Path> bootstrapClasspath = BuckClasspath.getBootstrapClasspath();,if (BuckClasspath != null ) ImmutableList<Path> bootstrapClasspath = BuckClasspath.getBootstrapClasspath();
OutOfProcessIsolatedExecution.java,Inputs inputs = inputsBuilder.build();,if (inputsBuilder != null ) Inputs inputs = inputsBuilder.build();
OutOfProcessIsolatedExecution.java,Builder paramsBuilder = ProcessExecutorParams.builder();,if (ProcessExecutorParams != null ) Builder paramsBuilder = ProcessExecutorParams.builder();
OutOfProcessIsolatedExecution.java,String rootString = projectRoot.toString();,if (projectRoot != null ) String rootString = projectRoot.toString();
MoreThrowables.java,Throwable cause = throwable.getCause();,if (throwable != null ) Throwable cause = throwable.getCause();
ActionGraphCacheTest.java,BuildRuleResolver originalResolver = originalResult.getResolver();,if (originalResult != null ) BuildRuleResolver originalResolver = originalResult.getResolver();
ActionGraphCacheTest.java,BuildRuleResolver newResolver = newResult.getResolver();,if (newResult != null ) BuildRuleResolver newResolver = newResult.getResolver();
TargetGraphHashing.java,BuildTarget buildTarget = node.getBuildTarget();,if (node != null ) BuildTarget buildTarget = node.getBuildTarget();
TargetGraphHashing.java,BuildTarget target = workQueue.poll();,if (workQueue != null ) BuildTarget target = workQueue.poll();
TargetGraphHashing.java,HashCode targetRuleHashCode = node.getRawInputsHashCode();,if (node != null ) HashCode targetRuleHashCode = node.getRawInputsHashCode();
TargetGraphHashing.java,ProjectFilesystem cellFilesystem = node.getFilesystem();,if (node != null ) ProjectFilesystem cellFilesystem = node.getFilesystem();
TargetGraphHashing.java,HashCode result = hasher.hash();,if (hasher != null ) HashCode result = hasher.hash();
BuildTargetFactory.java,Optional<String> cellName = Optional.empty();,if (Optional != null ) Optional<String> cellName = Optional.empty();
EndToEndRunner.java,String command = testEnvironment.getCommand();,if (testEnvironment != null ) String command = testEnvironment.getCommand();
EndToEndRunner.java,String[] buildTargets = testEnvironment.getBuildTargets();,if (testEnvironment != null ) String[] buildTargets = testEnvironment.getBuildTargets();
EndToEndRunner.java,String[] arguments = testEnvironment.getArguments();,if (testEnvironment != null ) String[] arguments = testEnvironment.getArguments();
EndToEndTestDescriptor.java,private PlatformUtils platformUtils = PlatformUtils.getForPlatform();,if (PlatformUtils != null ) private PlatformUtils platformUtils = PlatformUtils.getForPlatform();
EndToEndRunner.java,ToggleState toggleState = testEnvironment.getBuckdToggled();,if (testEnvironment != null ) ToggleState toggleState = testEnvironment.getBuckdToggled();
EndToEndRunner.java,String command = testEnvironment.getCommand();,if (testEnvironment != null ) String command = testEnvironment.getCommand();
EndToEndRunner.java,String[] buildTargets = testEnvironment.getBuildTargets();,if (testEnvironment != null ) String[] buildTargets = testEnvironment.getBuildTargets();
EndToEndRunner.java,String[] arguments = testEnvironment.getArguments();,if (testEnvironment != null ) String[] arguments = testEnvironment.getArguments();
WorkerProcessPoolTest.java,WorkerProcess workerProcess = pool.borrowWorkerProcess();,if (pool != null ) WorkerProcess workerProcess = pool.borrowWorkerProcess();
BundledExternalProcessLauncher.java,"Path cwd = Paths.get("""").toAbsolutePath();","if (Paths != null ) Path cwd = Paths.get("""").toAbsolutePath();"
BundledExternalProcessLauncher.java,classpathLine = classpathLine.trim();,if (classpathLine != null ) classpathLine = classpathLine.trim();
Serializer.java,ImmutableList<HashCode> children = visitor.children.build();,if (visitor != null ) ImmutableList<HashCode> children = visitor.children.build();
CachingBuildRuleBuilder.java,long end = System.nanoTime();,if (System != null ) long end = System.nanoTime();
LocalCellProviderFactory.java,ImmutableSet<String> declaredCellNames = ImmutableSet.copyOf(cellPaths.keySet());,if (ImmutableSet != null ) ImmutableSet<String> declaredCellNames = ImmutableSet.copyOf(cellPaths.keySet());
LocalCellProviderFactory.java,Path rootCellPath = rootCell.getFilesystem().getRootPath();,if (rootCell != null ) Path rootCellPath = rootCell.getFilesystem().getRootPath();
LocalCellProviderFactory.java,Path currentCellRoot = cellParam.getFilesystem().getRootPath();,if (cellParam != null ) Path currentCellRoot = cellParam.getFilesystem().getRootPath();
BuildTargetsQueue.java,EnqueuedTarget target = uncachableZeroDependencyTargets.iterator().next();,if (uncachableZeroDependencyTargets != null ) EnqueuedTarget target = uncachableZeroDependencyTargets.iterator().next();
BuildTargetsQueue.java,ImmutableList<String> dependents = target.getDependentTargets();,if (target != null ) ImmutableList<String> dependents = target.getDependentTargets();
BuildTargetsQueue.java,EnqueuedTarget currentNode = nodesToCheck.remove();,if (nodesToCheck != null ) EnqueuedTarget currentNode = nodesToCheck.remove();
SuperConsoleEventBusListener.java,this.stampedeLocalBuildStatus = event.getStatus();,if (event != null ) this.stampedeLocalBuildStatus = event.getStatus();
EndToEndTestDescriptor.java,Optional<String> platformFlavorName = platformUtils.getFlavor();,if (platformUtils != null ) Optional<String> platformFlavorName = platformUtils.getFlavor();
DistBuildChromeTraceRenderer.java,MinionTraceIntermediate minionTraceIntermediate = new MinionTraceIntermediate(entry.getKey());,if (MinionTraceIntermediate(entry != null ) MinionTraceIntermediate minionTraceIntermediate = new MinionTraceIntermediate(entry.getKey());
DistBuildTraceTrackerTest.java,DistBuildTrace snapshot = tracker.snapshot();,if (tracker != null ) DistBuildTrace snapshot = tracker.snapshot();
DistBuildTraceRandom.java,long start = System.currentTimeMillis();,if (System != null ) long start = System.currentTimeMillis();
Machos.java,int segmentFileSizePosition = map.position();,if (map != null ) int segmentFileSizePosition = map.position();
DistBuildRunCommand.java,int returnCode = distBuildExecutor.buildAndReturnExitCode();,if (distBuildExecutor != null ) int returnCode = distBuildExecutor.buildAndReturnExitCode();
EscaperTest.java,final String str = builder.toString();,if (builder != null ) final String str = builder.toString();
EscaperTest.java,final String str = builder.toString();,if (builder != null ) final String str = builder.toString();
EscaperTest.java,final String str = builder.toString();,if (builder != null ) final String str = builder.toString();
EscaperTest.java,final String str = builder.toString();,if (builder != null ) final String str = builder.toString();
EscaperTest.java,final String str = builder.toString();,if (builder != null ) final String str = builder.toString();
EscaperTest.java,final String str = builder.toString();,if (builder != null ) final String str = builder.toString();
OfflineScribeLoggerTest.java,final Path logDir = filesystem.getBuckPaths().getOfflineLogDir();,if (filesystem != null ) final Path logDir = filesystem.getBuckPaths().getOfflineLogDir();
OfflineScribeLoggerTest.java,final Path logDir = filesystem.getBuckPaths().getOfflineLogDir();,if (filesystem != null ) final Path logDir = filesystem.getBuckPaths().getOfflineLogDir();
WorkerProcessPoolTest.java,final WorkerProcess process = pool.borrowWorkerProcess();,if (pool != null ) final WorkerProcess process = pool.borrowWorkerProcess();
WorkerProcessPoolTest.java,final WorkerProcess process = pool.borrowWorkerProcess();,if (pool != null ) final WorkerProcess process = pool.borrowWorkerProcess();
TestSelectorListBuilderTest.java,final TestSelectorList list = builder.build();,if (builder != null ) final TestSelectorList list = builder.build();
TestSelectorListBuilderTest.java,final TestSelectorList list = builder.build();,if (builder != null ) final TestSelectorList list = builder.build();
KnownBuildRuleTypesTest.java,final Path javac = temporaryFolder.newExecutableFile();,if (temporaryFolder != null ) final Path javac = temporaryFolder.newExecutableFile();
BuildTargetPatternParserTest.java,final ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();,if (FakeProjectFilesystem != null ) final ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();
ParsePipelineTest.java,final Cell cell = fixture.getCell();,if (fixture != null ) final Cell cell = fixture.getCell();
ParsePipelineTest.java,final Cell cell = fixture.getCell();,if (fixture != null ) final Cell cell = fixture.getCell();
ParsePipelineTest.java,final Cell cell = fixture.getCell();,if (fixture != null ) final Cell cell = fixture.getCell();
DefaultClassUsageFileWriterTest.java,final String escapedExpectedAwayCellPath = quoter.quote(expectedAwayCellPath.toString());,if (quoter != null ) final String escapedExpectedAwayCellPath = quoter.quote(expectedAwayCellPath.toString());
DefaultJavaLibraryIntegrationTest.java,"Path outputInZip = zipFs.getPath(""/"" + outputPath.toString());","if (outputPath != null ) Path outputInZip = zipFs.getPath(""/"" + outputPath.toString());"
DefaultJavaLibraryIntegrationTest.java,final BuckBuildLog cleanBuildLog = workspace.getBuildLog();,if (workspace != null ) final BuckBuildLog cleanBuildLog = workspace.getBuildLog();
DefaultJavaLibraryIntegrationTest.java,final BuckBuildLog depFileHitLog = workspace.getBuildLog();,if (workspace != null ) final BuckBuildLog depFileHitLog = workspace.getBuildLog();
DefaultJavaLibraryIntegrationTest.java,final BuckBuildLog depFileMissLog = workspace.getBuildLog();,if (workspace != null ) final BuckBuildLog depFileMissLog = workspace.getBuildLog();
FrontendOnlyJavacTaskTest.java,final Elements elements = testCompiler.getElements();,if (testCompiler != null ) final Elements elements = testCompiler.getElements();
InterCellIntegrationTest.java,final Path tmpSubfolder = tmp.newFolder();,if (tmp != null ) final Path tmpSubfolder = tmp.newFolder();
SourcePathResolutionIntegrationTest.java,final Path tmpSubfolder = tmp.newFolder();,if (tmp != null ) final Path tmpSubfolder = tmp.newFolder();
CxxBinaryIntegrationTest.java,final Path rootWorkspacePath = tmp.getRoot();,if (tmp != null ) final Path rootWorkspacePath = tmp.getRoot();
PreprocessorFlagsTest.java,final FakeFileHashCache hashCache = FakeFileHashCache.createFromStrings(ImmutableMap.of());,if (FakeFileHashCache != null ) final FakeFileHashCache hashCache = FakeFileHashCache.createFromStrings(ImmutableMap.of());
HttpArtifactCacheBinaryProtocolTest.java,final String value = valueBuilder.toString();,if (valueBuilder != null ) final String value = valueBuilder.toString();
AndroidBinaryFilesInfoTest.java,final ExopackageInfo info = androidBinaryFilesInfo.getExopackageInfo().get();,if (androidBinaryFilesInfo != null ) final ExopackageInfo info = androidBinaryFilesInfo.getExopackageInfo().get();
InstallLimitingAndroidDevice.java,final Path fileName = relativePath.getFileName();,if (relativePath != null ) final Path fileName = relativePath.getFileName();
RealAndroidDeviceTest.java,final String command = runDeviceCommand.get();,if (runDeviceCommand != null ) final String command = runDeviceCommand.get();
WorkerProcessPoolFactory.java,final Path workerTmpDir = paramsToUse.getTempDir();,if (paramsToUse != null ) final Path workerTmpDir = paramsToUse.getTempDir();
TargetGraphHashing.java,final BuildTarget buildTarget = node.getBuildTarget();,if (node != null ) final BuildTarget buildTarget = node.getBuildTarget();
DefaultRuleKeyScopedHasher.java,final long hasherCount = hasher.getCount();,if (hasher != null ) final long hasherCount = hasher.getCount();
DefaultRuleKeyScopedHasher.java,final long hasherCount = hasher.getCount();,if (hasher != null ) final long hasherCount = hasher.getCount();
DefaultRuleKeyScopedHasher.java,final long hasherCount = hasher.getCount();,if (hasher != null ) final long hasherCount = hasher.getCount();
MacroHandler.java,final MacroExpander expander = getExpander(entry.getKey());,if (getExpander(entry != null ) final MacroExpander expander = getExpander(entry.getKey());
RustCompileUtils.java,final CommandTool executable = executableBuilder.build();,if (executableBuilder != null ) final CommandTool executable = executableBuilder.build();
GlobalStateManager.java,final long threadId = Thread.currentThread().getId();,if (Thread != null ) final long threadId = Thread.currentThread().getId();
GlobalStateManager.java,final String commandId = info.getCommandId();,if (info != null ) final String commandId = info.getCommandId();
FilesystemBackedBuildFileTree.java,final Path basePath = target.getBasePath();,if (target != null ) final Path basePath = target.getBasePath();
PrebuiltOcamlLibraryDescription.java,final boolean bytecodeOnly = args.getBytecodeOnly();,if (args != null ) final boolean bytecodeOnly = args.getBytecodeOnly();
PrebuiltOcamlLibraryDescription.java,final String libDir = args.getLibDir();,if (args != null ) final String libDir = args.getLibDir();
PrebuiltOcamlLibraryDescription.java,final String nativeLib = args.getNativeLib();,if (args != null ) final String nativeLib = args.getNativeLib();
PrebuiltOcamlLibraryDescription.java,final String bytecodeLib = args.getBytecodeLib();,if (args != null ) final String bytecodeLib = args.getBytecodeLib();
PrebuiltOcamlLibraryDescription.java,final Path includeDir = libPath.resolve(args.getIncludeDir());,if (libPath != null ) final Path includeDir = libPath.resolve(args.getIncludeDir());
JsBundle.java,final SourcePathResolver sourcePathResolver = context.getSourcePathResolver();,if (context != null ) final SourcePathResolver sourcePathResolver = context.getSourcePathResolver();
JsBundleAndroid.java,final SourcePathResolver sourcePathResolver = context.getSourcePathResolver();,if (context != null ) final SourcePathResolver sourcePathResolver = context.getSourcePathResolver();
JsDependenciesFile.java,final SourcePathResolver sourcePathResolver = context.getSourcePathResolver();,if (context != null ) final SourcePathResolver sourcePathResolver = context.getSourcePathResolver();
JsFile.java,final SourcePathResolver sourcePathResolver = context.getSourcePathResolver();,if (context != null ) final SourcePathResolver sourcePathResolver = context.getSourcePathResolver();
JsFile.java,final SourcePathResolver sourcePathResolver = context.getSourcePathResolver();,if (context != null ) final SourcePathResolver sourcePathResolver = context.getSourcePathResolver();
JsUtil.java,final Tool tool = worker.getTool();,if (worker != null ) final Tool tool = worker.getTool();
DefaultClassUsageFileReader.java,final Path cellName = pathIterator.next();,if (pathIterator != null ) final Path cellName = pathIterator.next();
DefaultClassUsageFileWriter.java,final Path cellRoot = cellEntry.getValue();,if (cellEntry != null ) final Path cellRoot = cellEntry.getValue();
TestType.java,this.defaultRunner = defaultRunner.toString();,if (defaultRunner != null ) this.defaultRunner = defaultRunner.toString();
FileLikeCharSource.java,final InputStream is = fileLike.getInput();,if (fileLike != null ) final InputStream is = fileLike.getInput();
PluginLoader.java,final ClassLoader compilerClassLoader = compiler.getClass().getClassLoader();,if (compiler != null ) final ClassLoader compilerClassLoader = compiler.getClass().getClassLoader();
AuditRulesCommand.java,PrintStream out = params.getConsole().getStdOut();,if (params != null ) PrintStream out = params.getConsole().getStdOut();
AuditRulesCommand.java,Path root = projectFilesystem.getRootPath();,if (projectFilesystem != null ) Path root = projectFilesystem.getRootPath();
AuditRulesCommand.java,PrintStream stdOut = params.getConsole().getStdOut();,if (params != null ) PrintStream stdOut = params.getConsole().getStdOut();
ProjectGenerator.java,final BuildTarget buildTarget = targetNode.getBuildTarget();,if (targetNode != null ) final BuildTarget buildTarget = targetNode.getBuildTarget();
ProjectGenerator.java,final BuildTarget buildTarget = buildTargetNode.getBuildTarget();,if (buildTargetNode != null ) final BuildTarget buildTarget = buildTargetNode.getBuildTarget();
ProjectGenerator.java,final boolean hasSwiftVersionArg = swiftVersion.isPresent();,if (swiftVersion != null ) final boolean hasSwiftVersionArg = swiftVersion.isPresent();
AdbHelper.java,deviceCount = getDevices(true).size();,if (getDevices(true) != null ) deviceCount = getDevices(true).size();
ApkGenruleDescription.java,final BuildRule apk = resolver.getRule(args.getApk());,if (resolver != null ) final BuildRule apk = resolver.getRule(args.getApk());
CopyNativeLibraries.java,final Path libSourceDir = sourceDir.resolve(abiDirectoryComponent.get());,if (sourceDir != null ) final Path libSourceDir = sourceDir.resolve(abiDirectoryComponent.get());
DexProducedFromJavaLibrary.java,final boolean hasClassesToDx = !classNamesToHashes.isEmpty();,if (!classNamesToHashes != null ) final boolean hasClassesToDx = !classNamesToHashes.isEmpty();
DexWithClasses.java,final SourcePath sourcePathToDex = preDex.getSourcePathToDex();,if (preDex != null ) final SourcePath sourcePathToDex = preDex.getSourcePathToDex();
DexWithClasses.java,final int weightEstimate = preDex.getWeightEstimate();,if (preDex != null ) final int weightEstimate = preDex.getWeightEstimate();
FilterResourcesSteps.java,final boolean localeFilterEnabled = !locales.isEmpty();,if (!locales != null ) final boolean localeFilterEnabled = !locales.isEmpty();
PreDexMerge.java,final boolean isRootModule = result.apkModule.equals(apkModuleGraph.getRootAPKModule());,if (result != null ) final boolean isRootModule = result.apkModule.equals(apkModuleGraph.getRootAPKModule());
PreDexMerge.java,final String storeId = result.apkModule.getName();,if (result != null ) final String storeId = result.apkModule.getName();
PreDexedFilesSorter.java,final String relativePathToClassFile = fileLike.getRelativePath();,if (fileLike != null ) final String relativePathToClassFile = fileLike.getRelativePath();
APKModuleGraph.java,final String seedModuleName = seedConfig.getKey();,if (seedConfig != null ) final String seedModuleName = seedConfig.getKey();
ModuleExoHelper.java,final Path metadataFile = pathResolver.getAbsolutePath(dexInfo.getMetadata());,if (pathResolver != null ) final Path metadataFile = pathResolver.getAbsolutePath(dexInfo.getMetadata());
BuckTracing.java,final BuckTracingInterface tracingInterface = curThreadTracingInterface.get();,if (curThreadTracingInterface != null ) final BuckTracingInterface tracingInterface = curThreadTracingInterface.get();
BuckTracing.java,final BuckTracingInterface tracingInterface = curThreadTracingInterface.get();,if (curThreadTracingInterface != null ) final BuckTracingInterface tracingInterface = curThreadTracingInterface.get();
DistBuildClientEventListener.java,String ruleKey = ruleKeyCacheResult.ruleKey().toString();,if (ruleKeyCacheResult != null ) String ruleKey = ruleKeyCacheResult.ruleKey().toString();
HttpArtifactCacheEventListener.java,final String buildIdString = event.getBuildId().toString();,if (event != null ) final String buildIdString = event.getBuildId().toString();
AuditConfigCommand.java,final Cell rootCell = params.getCell();,if (params != null ) final Cell rootCell = params.getCell();
BuckQueryEnvironment.java,final ProjectFilesystem cellFilesystem = rootCell.getFilesystem();,if (rootCell != null ) final ProjectFilesystem cellFilesystem = rootCell.getFilesystem();
BuckQueryEnvironment.java,final Path rootPath = cellFilesystem.getRootPath();,if (cellFilesystem != null ) final Path rootPath = cellFilesystem.getRootPath();
FineGrainedJavaDependencySuggester.java,final Path basePathForSuggestedTarget = suggestedTarget.getBasePath();,if (suggestedTarget != null ) final Path basePathForSuggestedTarget = suggestedTarget.getBasePath();
InstallCommand.java,Build build = super.getBuild();,if (super != null ) Build build = super.getBuild();
InstallCommand.java,final AndroidDevicesHelper adbHelper = executionContext.getAndroidDevicesHelper().get();,if (executionContext != null ) final AndroidDevicesHelper adbHelper = executionContext.getAndroidDevicesHelper().get();
InstallCommand.java,BuildRuleResolver resolver = super.getBuild().getRuleResolver();,if (super != null ) BuildRuleResolver resolver = super.getBuild().getRuleResolver();
JavaBuildGraphProcessor.java,final ConcurrencyLimit concurrencyLimit = command.getConcurrencyLimit(params.getBuckConfig());,if (command != null ) final ConcurrencyLimit concurrencyLimit = command.getConcurrencyLimit(params.getBuckConfig());
OwnersReport.java,final Path rootPath = rootCellFilesystem.getRootPath();,if (rootCellFilesystem != null ) final Path rootPath = rootCellFilesystem.getRootPath();
SuggestCommand.java,final Console console = params.getConsole();,if (params != null ) final Console console = params.getConsole();
TestRunning.java,final ListeningExecutorService directExecutorService = MoreExecutors.newDirectExecutorService();,if (MoreExecutors != null ) final ListeningExecutorService directExecutorService = MoreExecutors.newDirectExecutorService();
SwiftLibraryDescription.java,final UnflavoredBuildTarget unflavoredBuildTarget = buildTarget.getUnflavoredBuildTarget();,if (buildTarget != null ) final UnflavoredBuildTarget unflavoredBuildTarget = buildTarget.getUnflavoredBuildTarget();
SwiftLibraryDescription.java,final CxxPlatform cxxPlatform = platform.get().getValue();,if (platform != null ) final CxxPlatform cxxPlatform = platform.get().getValue();
LocalBuildExecutor.java,final DefaultProcessExecutor processExecutor = new DefaultProcessExecutor(args.getConsole());,if (DefaultProcessExecutor(args != null ) final DefaultProcessExecutor processExecutor = new DefaultProcessExecutor(args.getConsole());
HaskellBinaryDescription.java,final CommandTool executable = executableBuilder.build();,if (executableBuilder != null ) final CommandTool executable = executableBuilder.build();
IjProjectTemplateDataPreparer.java,final Path moduleBasePath = module.getModuleBasePath();,if (module != null ) final Path moduleBasePath = module.getModuleBasePath();
IjProjectWriter.java,final IjProjectPaths projectPaths = projectConfig.getProjectPaths();,if (projectConfig != null ) final IjProjectPaths projectPaths = projectConfig.getProjectPaths();
ProjectView.java,final String configuredBuckOutAsString = configuredBuckOut.toString();,if (configuredBuckOut != null ) final String configuredBuckOutAsString = configuredBuckOut.toString();
ProjectView.java,final int buckOutNameCount = configuredBuckOut.getNameCount();,if (configuredBuckOut != null ) final int buckOutNameCount = configuredBuckOut.getNameCount();
MorePaths.java,final Path normalizedRoot = root.toAbsolutePath().normalize();,if (root != null ) final Path normalizedRoot = root.toAbsolutePath().normalize();
WindowsFS.java,"String symlinkPathString = (symlink.isAbsolute() ? ""\\\\?\\"" : """") + symlink.toString();","if (symlink != null ) String symlinkPathString = (symlink.isAbsolute() ? ""\\\\?\\"" : """") + symlink.toString();"
WindowsFS.java,"String targetPathString = (target.isAbsolute() ? ""\\\\?\\"" : """") + target.toString();","if (target != null ) String targetPathString = (target.isAbsolute() ? ""\\\\?\\"" : """") + target.toString();"
BuildPhase.java,final StampedeId stampedeId = job.getStampedeId();,if (job != null ) final StampedeId stampedeId = job.getStampedeId();
PreBuildPhase.java,final StampedeId stampedeId = job.getStampedeId();,if (job != null ) final StampedeId stampedeId = job.getStampedeId();
MinionModeRunner.java,final String fullyQualifiedName = result.getRule().getFullyQualifiedName();,if (result != null ) final String fullyQualifiedName = result.getRule().getFullyQualifiedName();
MinionModeRunner.java,final String fullyQualifiedName = buildResult.getRule().getFullyQualifiedName();,if (buildResult != null ) final String fullyQualifiedName = buildResult.getRule().getFullyQualifiedName();
CxxLibraryFactory.java,Optional<SharedLibraryInterfaceParams> params = cxxPlatform.getSharedLibraryInterfaceParams();,if (cxxPlatform != null ) Optional<SharedLibraryInterfaceParams> params = cxxPlatform.getSharedLibraryInterfaceParams();
DefaultSourcePathResolver.java,Path archiveAbsolutePath = getAbsolutePath(archiveMemberSourcePath.getArchiveSourcePath());,if (getAbsolutePath(archiveMemberSourcePath != null ) Path archiveAbsolutePath = getAbsolutePath(archiveMemberSourcePath.getArchiveSourcePath());
DefaultSourcePathResolver.java,Path archiveRelativePath = getRelativePath(archiveMemberSourcePath.getArchiveSourcePath());,if (getRelativePath(archiveMemberSourcePath != null ) Path archiveRelativePath = getRelativePath(archiveMemberSourcePath.getArchiveSourcePath());
DefaultSourcePathResolver.java,SourcePath path = ruleFinder.getRule(targetSourcePath).getSourcePathToOutput();,if (ruleFinder != null ) SourcePath path = ruleFinder.getRule(targetSourcePath).getSourcePathToOutput();
MostFilesTest.java,"boolean collected = MoreFiles.concatenateFiles(outputPath, ImmutableList.of());","if (ImmutableList != null ) boolean collected = MoreFiles.concatenateFiles(outputPath, ImmutableList.of());"
ZipWriteTest.java,ZipEntry entry = entries.nextElement();,if (entries != null ) ZipEntry entry = entries.nextElement();
EndToEndRunner.java,String[] commandSet = testEnvironment.getCommand();,if (testEnvironment != null ) String[] commandSet = testEnvironment.getCommand();
Main.java,Optional<String> autoDistBuildMessage = Optional.empty();,if (Optional != null ) Optional<String> autoDistBuildMessage = Optional.empty();
Main.java,autoDistBuildMessage = distBuildConfig.getAutoDistributedBuildMessage();,if (distBuildConfig != null ) autoDistBuildMessage = distBuildConfig.getAutoDistributedBuildMessage();
DexWithClasses.java,final Path pathToDex = preDex.getPathToDex();,if (preDex != null ) final Path pathToDex = preDex.getPathToDex();
AbstractWorkspace.java,String fileName = path.getFileName().toString();,if (path != null ) String fileName = path.getFileName().toString();
GenerateManifestStepTest.java,String output = filesystem.readFileIfItExists(manifestPath).get();,if (filesystem != null ) String output = filesystem.readFileIfItExists(manifestPath).get();
AndroidManifestTest.java,ProjectFilesystem filesystem = androidManifest.getProjectFilesystem();,if (androidManifest != null ) ProjectFilesystem filesystem = androidManifest.getProjectFilesystem();
AndroidManifestTest.java,SourcePathResolver pathResolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver pathResolver = buildContext.getSourcePathResolver();
AndroidManifestTest.java,BuildRuleParams buildRuleParams = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) BuildRuleParams buildRuleParams = TestBuildRuleParams.create();
DefaultClassInfo.java,Type type = field.getGenericType();,if (field != null ) Type type = field.getGenericType();
AndroidInstrumentationTestDescription.java,BuildRule apk = resolver.getRule(args.getApk());,if (resolver != null ) BuildRule apk = resolver.getRule(args.getApk());
ActionGraphNodeCache.java,BuildRule newBuildRule = resolver.requireRule(targetNode.getBuildTarget());,if (resolver != null ) BuildRule newBuildRule = resolver.requireRule(targetNode.getBuildTarget());
DistBuildTargetGraphCodec.java,ProjectFilesystem projectFilesystem = targetNode.getFilesystem();,if (targetNode != null ) ProjectFilesystem projectFilesystem = targetNode.getFilesystem();
DistBuildTargetGraphCodec.java,Cell cell = cellLookup.apply(remoteNode.getCellIndex());,if (cellLookup != null ) Cell cell = cellLookup.apply(remoteNode.getCellIndex());
DistBuildTargetGraphCodec.java,cell = cell.withCanonicalName(Optional.empty());,if (cell != null ) cell = cell.withCanonicalName(Optional.empty());
DistBuildTargetGraphCodec.java,ProjectFilesystem projectFilesystem = cell.getFilesystem();,if (cell != null ) ProjectFilesystem projectFilesystem = cell.getFilesystem();
DistBuildTargetGraphCodec.java,BuildTarget unflavoredTarget = BuildTarget.of(target.getUnflavoredBuildTarget());,if (BuildTarget != null ) BuildTarget unflavoredTarget = BuildTarget.of(target.getUnflavoredBuildTarget());
DistBuildTargetGraphCodec.java,ImmutableSet<BuildTarget> buildTargets = buildTargetsBuilder.build();,if (buildTargetsBuilder != null ) ImmutableSet<BuildTarget> buildTargets = buildTargetsBuilder.build();
CacheOptimizedBuildTargetsQueueFactory.java,ImmutableSet<BuildRule> allDeps = allDependencies.build();,if (allDependencies != null ) ImmutableSet<BuildRule> allDeps = allDependencies.build();
PerBuildState.java,this.buildInputPathsUnderSymlink = Sets.newConcurrentHashSet();,if (Sets != null ) this.buildInputPathsUnderSymlink = Sets.newConcurrentHashSet();
PerBuildState.java,Path symlinkTarget = projectFilesystem.resolve(subpath).toRealPath();,if (projectFilesystem != null ) Path symlinkTarget = projectFilesystem.resolve(subpath).toRealPath();
ValueTypeInfoFactory.java,Type[] typeArguments = parameterizedType.getActualTypeArguments();,if (parameterizedType != null ) Type[] typeArguments = parameterizedType.getActualTypeArguments();
ValueTypeInfoFactory.java,Type rawType = parameterizedType.getRawType();,if (parameterizedType != null ) Type rawType = parameterizedType.getRawType();
ValueTypeInfosTest.java,"BuildRule rule = new FakeBuildRule(target, ImmutableSortedSet.of());","if (ImmutableSortedSet != null ) BuildRule rule = new FakeBuildRule(target, ImmutableSortedSet.of());"
ValueTypeInfosTest.java,"BuildRule rule = new FakeBuildRule(target, ImmutableSortedSet.of());","if (ImmutableSortedSet != null ) BuildRule rule = new FakeBuildRule(target, ImmutableSortedSet.of());"
ValueTypeInfosTest.java,Optional<SourcePath> value = Optional.empty();,if (Optional != null ) Optional<SourcePath> value = Optional.empty();
ValueTypeInfosTest.java,"BuildRule rule = new FakeBuildRule(target, ImmutableSortedSet.of());","if (ImmutableSortedSet != null ) BuildRule rule = new FakeBuildRule(target, ImmutableSortedSet.of());"
BuildCommand.java,Path absolutePath = outputPath.get();,if (outputPath != null ) Path absolutePath = outputPath.get();
BuildCommand.java,Path linkPath = lastOutputDirPath.resolve(absolutePath.getFileName());,if (lastOutputDirPath != null ) Path linkPath = lastOutputDirPath.resolve(absolutePath.getFileName());
DefaultClassUsageFileReader.java,final Path recordedPath = Paths.get(jarUsedClassesEntry.getKey());,if (Paths != null ) final Path recordedPath = Paths.get(jarUsedClassesEntry.getKey());
AcyclicDepthFirstPostOrderTraversal.java,T child = iter.next();,if (iter != null ) T child = iter.next();
SymlinkTreeTest.java,projectFilesystem = new FakeProjectFilesystem(tmpDir.getRoot());,if (FakeProjectFilesystem(tmpDir != null ) projectFilesystem = new FakeProjectFilesystem(tmpDir.getRoot());
SuperConsoleEventBusListener.java,stderrDirty = console.getStdErr().isDirty();,if (console != null ) stderrDirty = console.getStdErr().isDirty();
SuperConsoleEventBusListenerTest.java,String beforeStdOutWrite = console.getTextWrittenToStdErr();,if (console != null ) String beforeStdOutWrite = console.getTextWrittenToStdErr();
CxxGenruleDescription.java,CxxGenruleDescriptionArg.Builder newConstructorArgBuilder = CxxGenruleDescriptionArg.builder();,if (CxxGenruleDescriptionArg != null ) CxxGenruleDescriptionArg.Builder newConstructorArgBuilder = CxxGenruleDescriptionArg.builder();
CxxGenruleDescription.java,CxxGenruleDescriptionArg newIntermediate = newConstructorArgBuilder.build();,if (newConstructorArgBuilder != null ) CxxGenruleDescriptionArg newIntermediate = newConstructorArgBuilder.build();
CxxGenruleDescription.java,Optional<CxxPlatform> platform = cxxPlatforms.getValue(target.getFlavors());,if (cxxPlatforms != null ) Optional<CxxPlatform> platform = cxxPlatforms.getValue(target.getFlavors());
CxxGenruleDescription.java,ImmutableList<String> args = input.getMacroInput();,if (input != null ) ImmutableList<String> args = input.getMacroInput();
AbstractGenruleDescription.java,MacroHandler macroHandler = maybeMacroHandler.get();,if (maybeMacroHandler != null ) MacroHandler macroHandler = maybeMacroHandler.get();
TreeBackedEnter.java,Tree parentTree = parentPath.getLeaf();,if (parentPath != null ) Tree parentTree = parentPath.getLeaf();
TreeBackedEnter.java,Name simpleName = element.getSimpleName();,if (element != null ) Name simpleName = element.getSimpleName();
SuperConsoleEventBusListener.java,stdoutDirty = console.getStdOut().isDirty();,if (console != null ) stdoutDirty = console.getStdOut().isDirty();
SuperConsoleEventBusListener.java,stderrDirty = console.getStdErr().isDirty();,if (console != null ) stderrDirty = console.getStdErr().isDirty();
NdkCxxPlatforms.java,HeaderVerification headerVerification = config.getHeaderVerification();,if (config != null ) HeaderVerification headerVerification = config.getHeaderVerification();
AbstractStringWithMacrosArg.java,builder = ImmutableMap.builder();,if (ImmutableMap != null ) builder = ImmutableMap.builder();
MultiSlaveBuildModeRunnerFactory.java,Optional<URI> traceUploadUri = chromeTraceBuckConfig.getTraceUploadUri();,if (chromeTraceBuckConfig != null ) Optional<URI> traceUploadUri = chromeTraceBuckConfig.getTraceUploadUri();
ChromeTraceBuildListener.java,Optional<URI> traceUploadUri = config.getTraceUploadUri();,if (config != null ) Optional<URI> traceUploadUri = config.getTraceUploadUri();
StringWithMacrosTypeCoercer.java,MacroContainer.Builder macroContainer = MacroContainer.builder();,if (MacroContainer != null ) MacroContainer.Builder macroContainer = MacroContainer.builder();
StringWithMacrosTypeCoercer.java,String name = matchResult.getMacroType();,if (matchResult != null ) String name = matchResult.getMacroType();
StringWithMacrosTypeCoercer.java,ImmutableList<String> args = matchResult.getMacroInput();,if (matchResult != null ) ImmutableList<String> args = matchResult.getMacroInput();
WorkerMacroArg.java,Tool exe = this.workerTool.getTool();,if (this != null ) Tool exe = this.workerTool.getTool();
AppleDescriptions.java,optimization = arg.getOptimization();,if (arg != null ) optimization = arg.getOptimization();
DistBuildState.java,CellProvider cellProvider = CellProviderFactory.createForDistributedBuild(cellParams.build());,if (CellProviderFactory != null ) CellProvider cellProvider = CellProviderFactory.createForDistributedBuild(cellParams.build());
PythonInterpreterFromConfig.java,Path configPath = Paths.get(config.get());,if (Paths != null ) Path configPath = Paths.get(config.get());
CellProviderFactory.java,ImmutableSet<String> declaredCellNames = ImmutableSet.copyOf(cellPaths.keySet());,if (ImmutableSet != null ) ImmutableSet<String> declaredCellNames = ImmutableSet.copyOf(cellPaths.keySet());
CellProviderFactory.java,Path currentCellRoot = cellParam.getFilesystem().getRootPath();,if (cellParam != null ) Path currentCellRoot = cellParam.getFilesystem().getRootPath();
IjProjectTemplateDataPreparer.java,ImmutableSet<Path> androidManifestPaths = androidFacet.getManifestPaths();,if (androidFacet != null ) ImmutableSet<Path> androidManifestPaths = androidFacet.getManifestPaths();
IjProjectTemplateDataPreparer.java,Optional<String> packageName = androidFacet.getPackageName();,if (androidFacet != null ) Optional<String> packageName = androidFacet.getPackageName();
PregeneratedCodeWriter.java,Optional<String> packageName = androidFacet.get().getPackageName();,if (androidFacet != null ) Optional<String> packageName = androidFacet.get().getPackageName();
CxxBuckConfig.java,"Optional<CxxToolProviderParams> params = getCxxToolProviderParams(field, Optional.empty());","if (Optional != null ) Optional<CxxToolProviderParams> params = getCxxToolProviderParams(field, Optional.empty());"
DistBuildState.java,CellProvider cellProvider = CellProviderFactory.createForDistributedBuild(cellParams.build());,if (CellProviderFactory != null ) CellProvider cellProvider = CellProviderFactory.createForDistributedBuild(cellParams.build());
FieldTypeInfosTest.java,Optional<InputPath> value = Optional.empty();,if (Optional != null ) Optional<InputPath> value = Optional.empty();
DefaultInputRuleResolver.java,Optional<SourcePath> sp = data.getSourcePath();,if (data != null ) Optional<SourcePath> sp = data.getSourcePath();
GoTest.java,Optional<String> currentTest = Optional.empty();,if (Optional != null ) Optional<String> currentTest = Optional.empty();
GoTest.java,currentTest = Optional.empty();,if (Optional != null ) currentTest = Optional.empty();
AppleBundleDescription.java,Optional<SourcePath> entitlementsFile = Optional.empty();,if (Optional != null ) Optional<SourcePath> entitlementsFile = Optional.empty();
AppleBundleDescription.java,entitlementsFile = entitlementsFileFromBinary.get().getEntitlementsFile();,if (entitlementsFileFromBinary != null ) entitlementsFile = entitlementsFileFromBinary.get().getEntitlementsFile();
XCodeProjectCommandHelper.java,result = Optional.ofNullable(bufferedStdinReader.readLine());,if (Optional != null ) result = Optional.ofNullable(bufferedStdinReader.readLine());
AbstractConsoleEventBusListener.java,Optional<Long> artifactSizeBytes = event.getStoreData().getArtifactSizeBytes();,if (event != null ) Optional<Long> artifactSizeBytes = event.getStoreData().getArtifactSizeBytes();
BuildCommand.java,lastBuild = builder.getBuild();,if (builder != null ) lastBuild = builder.getBuild();
UnzipStep.java,Path out = filesystem.getPathForRelativeExistingPath(destinationDirectory).toAbsolutePath();,if (filesystem != null ) Path out = filesystem.getPathForRelativeExistingPath(destinationDirectory).toAbsolutePath();
OutputToFileExpanderUtils.java,ProjectFilesystem filesystem = rule.get().getProjectFilesystem();,if (rule != null ) ProjectFilesystem filesystem = rule.get().getProjectFilesystem();
QueryTargetsAndOutputsMacroExpander.java,SourcePath sourcePath = rule.getSourcePathToOutput();,if (rule != null ) SourcePath sourcePath = rule.getSourcePathToOutput();
LocationMacroExpanderTest.java,BuildRule rule = resolver.requireRule(node.getBuildTarget());,if (resolver != null ) BuildRule rule = resolver.requireRule(node.getBuildTarget());
GoCompile.java,String extension = MorePaths.getFileExtension(srcPath).toLowerCase();,if (MorePaths != null ) String extension = MorePaths.getFileExtension(srcPath).toLowerCase();
Unzip.java,target = target.getParent();,if (target != null ) target = target.getParent();
SkylarkProjectBuildFileParser.java,ImmutableList<ExtensionData> dependencies = loadExtensions(buildFileAst.getImports());,if (loadExtensions(buildFileAst != null ) ImmutableList<ExtensionData> dependencies = loadExtensions(buildFileAst.getImports());
SkylarkProjectBuildFileParser.java,dependencies = loadExtensions(extensionAst.getImports());,if (loadExtensions(extensionAst != null ) dependencies = loadExtensions(extensionAst.getImports());
SkylarkProjectBuildFileParser.java,PathFragment relativeExtensionPath = extensionLabel.toPathFragment();,if (extensionLabel != null ) PathFragment relativeExtensionPath = extensionLabel.toPathFragment();
SkylarkProjectBuildFileParser.java,RepositoryName repository = extensionLabel.getPackageIdentifier().getRepository();,if (extensionLabel != null ) RepositoryName repository = extensionLabel.getPackageIdentifier().getRepository();
BuildTargetsQueue.java,totalBuilt += finishedNodes.size();,if (finishedNodes != null ) totalBuilt += finishedNodes.size();
AbstractConsoleEventBusListener.java,totalRuleCount += status.getTotalRulesCount();,if (status != null ) totalRuleCount += status.getTotalRulesCount();
AbstractConsoleEventBusListener.java,finishedRuleCount += status.getRulesFinishedCount();,if (status != null ) finishedRuleCount += status.getRulesFinishedCount();
AbstractConsoleEventBusListener.java,approximateDistBuildProgress = Optional.empty();,if (Optional != null ) approximateDistBuildProgress = Optional.empty();
CacheRateStatsKeeper.java,ruleCount = Optional.of(calculated.getNumRules());,if (Optional != null ) ruleCount = Optional.of(calculated.getNumRules());
CacheRateStatsKeeper.java,ruleCount = Optional.of(updated.getNumRules());,if (Optional != null ) ruleCount = Optional.of(updated.getNumRules());
DistBuildSlaveEventBusListener.java,ruleCount = calculated.getNumRules();,if (calculated != null ) ruleCount = calculated.getNumRules();
DistBuildSlaveEventBusListener.java,ruleCount = updated.getNumRules();,if (updated != null ) ruleCount = updated.getNumRules();
DistBuildSlaveEventBusListenerTest.java,CacheRateStats cacheRateStats = expectedStatus.getCacheRateStats();,if (expectedStatus != null ) CacheRateStats cacheRateStats = expectedStatus.getCacheRateStats();
DistBuildSlaveEventBusListenerTest.java,CacheRateStats cacheRateStats = expectedStatus.getCacheRateStats();,if (expectedStatus != null ) CacheRateStats cacheRateStats = expectedStatus.getCacheRateStats();
AbstractConsoleEventBusListener.java,Optional<Long> artifactSizeBytes = event.getStoreData().getArtifactSizeBytes();,if (event != null ) Optional<Long> artifactSizeBytes = event.getStoreData().getArtifactSizeBytes();
SuperConsoleEventBusListenerTest.java,"FakeBuildRule cachedRule = new FakeBuildRule(cachedTarget, ImmutableSortedSet.of());","if (ImmutableSortedSet != null ) FakeBuildRule cachedRule = new FakeBuildRule(cachedTarget, ImmutableSortedSet.of());"
BuildPhase.java,BuildSlaveEvent slaveEvent = sequenceIdAndEvent.getSecond();,if (sequenceIdAndEvent != null ) BuildSlaveEvent slaveEvent = sequenceIdAndEvent.getSecond();
AbstractConsoleEventBusListener.java,long bytesUploaded = httpArtifactTotalBytesUploaded.longValue();,if (httpArtifactTotalBytesUploaded != null ) long bytesUploaded = httpArtifactTotalBytesUploaded.longValue();
AbstractConsoleEventBusListener.java,int scheduled = httpArtifactUploadsScheduledCount.get();,if (httpArtifactUploadsScheduledCount != null ) int scheduled = httpArtifactUploadsScheduledCount.get();
AbstractConsoleEventBusListener.java,int complete = httpArtifactUploadedCount.get();,if (httpArtifactUploadedCount != null ) int complete = httpArtifactUploadedCount.get();
AbstractConsoleEventBusListener.java,int failed = httpArtifactUploadFailedCount.get();,if (httpArtifactUploadFailedCount != null ) int failed = httpArtifactUploadFailedCount.get();
TestNGRunner.java,String methodName = result.getMethod().getMethodName();,if (result != null ) String methodName = result.getMethod().getMethodName();
Main.java,processManager = Optional.empty();,if (Optional != null ) processManager = Optional.empty();
Main.java,Optional<Path> eventsOutputPath = subcommand.getEventsOutputPath();,if (subcommand != null ) Optional<Path> eventsOutputPath = subcommand.getEventsOutputPath();
DefaultBuckEventBus.java,long waitTime = timeoutTime - System.currentTimeMillis();,if (System != null ) long waitTime = timeoutTime - System.currentTimeMillis();
AbstractPreprocessorFlags.java,boolean precompiled = pch.get().canPrecompile();,if (pch != null ) boolean precompiled = pch.get().canPrecompile();
DefaultRuleKeyCache.java,long start = clock.nanoTime();,if (clock != null ) long start = clock.nanoTime();
DefaultRuleKeyCache.java,long end = clock.nanoTime();,if (clock != null ) long end = clock.nanoTime();
DefaultRuleKeyCache.java,long missCount = this.missCount.longValue();,if (this != null ) long missCount = this.missCount.longValue();
EventPostingRuleKeyCacheScope.java,startStats = cache.getStats();,if (cache != null ) startStats = cache.getStats();
CachingBuildRuleBuilder.java,Optional<RuleKey> calculatedRuleKey = inputBasedKey.get();,if (inputBasedKey != null ) Optional<RuleKey> calculatedRuleKey = inputBasedKey.get();
ProjectWorkspace.java,String fileName = path.getFileName().toString();,if (path != null ) String fileName = path.getFileName().toString();
CacheStatsTracker.java,private long startTime = clock.currentTimeMillis();,if (clock != null ) private long startTime = clock.currentTimeMillis();
CacheStatsTracker.java,startLoadTime = clock.currentTimeMillis();,if (clock != null ) startLoadTime = clock.currentTimeMillis();
CacheStatsTracker.java,startLoadTime = clock.currentTimeMillis();,if (clock != null ) startLoadTime = clock.currentTimeMillis();
CacheStatsTracker.java,long endTime = clock.currentTimeMillis();,if (clock != null ) long endTime = clock.currentTimeMillis();
CacheStatsTracker.java,long endTime = clock.currentTimeMillis();,if (clock != null ) long endTime = clock.currentTimeMillis();
CacheStatsTrackerTest.java,CacheRequest request = tracker.startRequest();,if (tracker != null ) CacheRequest request = tracker.startRequest();
CacheStatsTrackerTest.java,CacheRequest request = tracker.startRequest();,if (tracker != null ) CacheRequest request = tracker.startRequest();
CacheStatsTrackerTest.java,CacheRequest request = tracker.startRequest();,if (tracker != null ) CacheRequest request = tracker.startRequest();
CacheStatsTrackerTest.java,CacheRequest request = tracker.startRequest();,if (tracker != null ) CacheRequest request = tracker.startRequest();
CacheStatsTrackerTest.java,CacheRequest request = tracker.startRequest();,if (tracker != null ) CacheRequest request = tracker.startRequest();
CacheStatsTrackerTest.java,CacheRequest request = tracker.startRequest();,if (tracker != null ) CacheRequest request = tracker.startRequest();
CacheStatsTrackerTest.java,CacheRequest request = tracker.startRequest();,if (tracker != null ) CacheRequest request = tracker.startRequest();
CacheStatsTrackerTest.java,CacheRequest request = tracker.startRequest();,if (tracker != null ) CacheRequest request = tracker.startRequest();
CacheStatsTrackerTest.java,CacheRequest request = tracker.startRequest();,if (tracker != null ) CacheRequest request = tracker.startRequest();
CacheStatsTrackerTest.java,CacheRequest request = tracker.startRequest();,if (tracker != null ) CacheRequest request = tracker.startRequest();
CacheStatsTrackerTest.java,CacheRequest request = tracker.startRequest();,if (tracker != null ) CacheRequest request = tracker.startRequest();
CacheStatsTrackerTest.java,CacheRequest request = tracker.startRequest();,if (tracker != null ) CacheRequest request = tracker.startRequest();
CacheStatsTrackerTest.java,CacheRequest request = tracker.startRequest();,if (tracker != null ) CacheRequest request = tracker.startRequest();
CacheStatsTrackerTest.java,CacheRequest request = tracker.startRequest();,if (tracker != null ) CacheRequest request = tracker.startRequest();
CacheStatsTrackerTest.java,CacheRequest request = tracker.startRequest();,if (tracker != null ) CacheRequest request = tracker.startRequest();
CachingBuildRuleBuilder.java,ManifestStoreResult.Builder resultBuilder = ManifestStoreResult.builder();,if (ManifestStoreResult != null ) ManifestStoreResult.Builder resultBuilder = ManifestStoreResult.builder();
CachingBuildRuleBuilder.java,Manifest manifest = new Manifest(manifestKey.getRuleKey());,if (Manifest(manifestKey != null ) Manifest manifest = new Manifest(manifestKey.getRuleKey());
CachingBuildRuleBuilder.java,ManifestLoadResult existingManifest = loadManifest(manifestKey.getRuleKey());,if (loadManifest(manifestKey != null ) ManifestLoadResult existingManifest = loadManifest(manifestKey.getRuleKey());
CachingBuildRuleBuilder.java,manifest = existingManifest.getManifest().get();,if (existingManifest != null ) manifest = existingManifest.getManifest().get();
CachingBuildRuleBuilder.java,manifest = new Manifest(manifestKey.getRuleKey());,if (Manifest(manifestKey != null ) manifest = new Manifest(manifestKey.getRuleKey());
CachingBuildRuleBuilder.java,RuleKey manifestRuleKey = originalRuleKeyAndInputs.getRuleKey();,if (originalRuleKeyAndInputs != null ) RuleKey manifestRuleKey = originalRuleKeyAndInputs.getRuleKey();
CachingBuildRuleBuilder.java,ManifestFetchResult.Builder manifestFetchResult = ManifestFetchResult.builder();,if (ManifestFetchResult != null ) ManifestFetchResult.Builder manifestFetchResult = ManifestFetchResult.builder();
CachingBuildRuleBuilder.java,ManifestLoadResult loadResult = loadManifest(keyAndInputs.getRuleKey());,if (loadManifest(keyAndInputs != null ) ManifestLoadResult loadResult = loadManifest(keyAndInputs.getRuleKey());
CachingBuildRuleBuilder.java,Manifest manifest = loadResult.getManifest().get();,if (loadResult != null ) Manifest manifest = loadResult.getManifest().get();
CachingBuildRuleBuilder.java,ruleKey = inputBasedKey.get();,if (inputBasedKey != null ) ruleKey = inputBasedKey.get();
CachingBuildRuleBuilder.java,Path zipPath = lazyZipPath.getUnchecked();,if (lazyZipPath != null ) Path zipPath = lazyZipPath.getUnchecked();
CachingBuildRuleBuilder.java,RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getRuleKey();,if (depFileRuleKeyAndInputs != null ) RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getRuleKey();
Main.java,commandSemaphoreAcquired = commandSemaphore.tryAcquire();,if (commandSemaphore != null ) commandSemaphoreAcquired = commandSemaphore.tryAcquire();
Main.java,commandSemaphoreNgClient = Optional.empty();,if (Optional != null ) commandSemaphoreNgClient = Optional.empty();
Main.java,commandSemaphoreNgClient = Optional.empty();,if (Optional != null ) commandSemaphoreNgClient = Optional.empty();
Main.java,AsyncCloseable asyncCloseable = new AsyncCloseable(diskIoExecutorService.get());,if (AsyncCloseable(diskIoExecutorService != null ) AsyncCloseable asyncCloseable = new AsyncCloseable(diskIoExecutorService.get());
AsyncCloseableTest.java,ListeningExecutorService directExecutor = MoreExecutors.newDirectExecutorService();,if (MoreExecutors != null ) ListeningExecutorService directExecutor = MoreExecutors.newDirectExecutorService();
CachingBuildEngine.java,this.fileHashCache = cachingBuildEngineDelegate.getFileHashCache();,if (cachingBuildEngineDelegate != null ) this.fileHashCache = cachingBuildEngineDelegate.getFileHashCache();
CachingBuildEngine.java,this.defaultRuleKeyDiagnostics = RuleKeyDiagnostics.nop();,if (RuleKeyDiagnostics != null ) this.defaultRuleKeyDiagnostics = RuleKeyDiagnostics.nop();
MainIntegrationTest.java,ProjectWorkspace.ProcessResult result = workspace.runBuckCommand();,if (workspace != null ) ProjectWorkspace.ProcessResult result = workspace.runBuckCommand();
MainIntegrationTest.java,ProjectWorkspace.ProcessResult result = workspace.runBuckCommand();,if (workspace != null ) ProjectWorkspace.ProcessResult result = workspace.runBuckCommand();
PrebuiltJarIntegrationTest.java,ProjectWorkspace.ProcessResult result = workspace.runBuckBuild(target.getFullyQualifiedName());,if (workspace != null ) ProjectWorkspace.ProcessResult result = workspace.runBuckBuild(target.getFullyQualifiedName());
AbstractCxxSymlinkTreeHeaders.java,ImmutableList<BuildRule> rules = cachedBuilder.build();,if (cachedBuilder != null ) ImmutableList<BuildRule> rules = cachedBuilder.build();
JsBundleGenrule.java,jsBundleSourcePath = jsBundle.getSourcePathToOutput();,if (jsBundle != null ) jsBundleSourcePath = jsBundle.getSourcePathToOutput();
LineIterating.java,CharBuffer subBuffer = buffer.duplicate();,if (buffer != null ) CharBuffer subBuffer = buffer.duplicate();
LineIterating.java,ByteBuffer subBuffer = buffer.duplicate();,if (buffer != null ) ByteBuffer subBuffer = buffer.duplicate();
LineIterating.java,int lineStartPos = lineBuffer.position();,if (lineBuffer != null ) int lineStartPos = lineBuffer.position();
LineIterating.java,int oldPosition = buffer.position();,if (buffer != null ) int oldPosition = buffer.position();
LineIterating.java,int oldLimit = buffer.limit();,if (buffer != null ) int oldLimit = buffer.limit();
LineIterating.java,int neededCapacity = lineHandler.buffer.remaining() + buffer.remaining();,if (buffer != null ) int neededCapacity = lineHandler.buffer.remaining() + buffer.remaining();
LineIterating.java,int newCapacity = lineHandler.buffer.capacity();,if (lineHandler != null ) int newCapacity = lineHandler.buffer.capacity();
BuildSlaveInfo.java,struct.command = iprot.readString();,if (iprot != null ) struct.command = iprot.readString();
BuildSlaveInfo.java,struct.command = iprot.readString();,if (iprot != null ) struct.command = iprot.readString();
PostBuildPhase.java,slaveFinishedStatsFutures = new ArrayList<>(job.getSlaveInfoByRunIdSize());,if (ArrayList<>(job != null ) slaveFinishedStatsFutures = new ArrayList<>(job.getSlaveInfoByRunIdSize());
PostBuildPhase.java,String runIdStr = entry.getKey();,if (entry != null ) String runIdStr = entry.getKey();
PostBuildPhase.java,BuildSlaveRunId runId = entry.getValue().getBuildSlaveRunId();,if (entry != null ) BuildSlaveRunId runId = entry.getValue().getBuildSlaveRunId();
SuperConsoleEventBusListener.java,totalFilesMaterialized += slaveStatus.getFilesMaterializedCount();,if (slaveStatus != null ) totalFilesMaterialized += slaveStatus.getFilesMaterializedCount();
AbstractCxxSourceRuleFactory.java,Preprocessor preprocessor = preprocessorDelegateForCxxRule.getPreprocessor();,if (preprocessorDelegateForCxxRule != null ) Preprocessor preprocessor = preprocessorDelegateForCxxRule.getPreprocessor();
AbstractCxxSourceRuleFactory.java,CxxPrecompiledHeaderTemplate pchTemplate = pchTemplateRuleOpt.get();,if (pchTemplateRuleOpt != null ) CxxPrecompiledHeaderTemplate pchTemplate = pchTemplateRuleOpt.get();
PreInclude.java,UnflavoredBuildTarget pchBaseTarget = getBuildTarget().getUnflavoredBuildTarget();,if (getBuildTarget() != null ) UnflavoredBuildTarget pchBaseTarget = getBuildTarget().getUnflavoredBuildTarget();
BuildPhase.java,TimestampedEvent<BuildRuleFinishedEvent> timestampedEvent = eventsIterator.next();,if (eventsIterator != null ) TimestampedEvent<BuildRuleFinishedEvent> timestampedEvent = eventsIterator.next();
BuildPhase.java,String buildTarget = timestampedEvent.event.getBuildTarget();,if (timestampedEvent != null ) String buildTarget = timestampedEvent.event.getBuildTarget();
QueryCommand.java,int rank = entry.getValue();,if (entry != null ) int rank = entry.getValue();
QueryCommand.java,String name = toPresentationForm(entry.getKey());,if (toPresentationForm(entry != null ) String name = toPresentationForm(entry.getKey());
CommandAliasDescription.java,CommandTool commandTool = toolBuilder.build();,if (toolBuilder != null ) CommandTool commandTool = toolBuilder.build();
CommandAliasDescription.java,tool = Optional.of(entry.getValue());,if (Optional != null ) tool = Optional.of(entry.getValue());
AbstractCxxSourceRuleFactory.java,Preprocessor preprocessor = preprocessorDelegateForCxxRule.getPreprocessor();,if (preprocessorDelegateForCxxRule != null ) Preprocessor preprocessor = preprocessorDelegateForCxxRule.getPreprocessor();
AbstractCxxSourceRuleFactory.java,CxxPrecompiledHeaderTemplate pchTemplate = pchTemplateRuleOpt.get();,if (pchTemplateRuleOpt != null ) CxxPrecompiledHeaderTemplate pchTemplate = pchTemplateRuleOpt.get();
BuildPhase.java,long currentTimestampMillis = clock.currentTimeMillis();,if (clock != null ) long currentTimestampMillis = clock.currentTimeMillis();
QueryCommand.java,String label = toPresentationForm(entry.getKey());,if (toPresentationForm(entry != null ) String label = toPresentationForm(entry.getKey());
AbstractCxxSymlinkTreeHeaders.java,ImmutableList<BuildRule> rules = cachedBuilder.build();,if (cachedBuilder != null ) ImmutableList<BuildRule> rules = cachedBuilder.build();
QueryCommand.java,int rank = entry.getValue();,if (entry != null ) int rank = entry.getValue();
QueryCommand.java,String name = toPresentationForm(entry.getKey());,if (toPresentationForm(entry != null ) String name = toPresentationForm(entry.getKey());
Main.java,Path canonicalRootPath = projectRoot.toRealPath().normalize();,if (projectRoot != null ) Path canonicalRootPath = projectRoot.toRealPath().normalize();
BuildCommand.java,started = BuildEvent.distBuildStarted();,if (BuildEvent != null ) started = BuildEvent.distBuildStarted();
BuildCommand.java,exitCode = localBuildExitCode.get();,if (localBuildExitCode != null ) exitCode = localBuildExitCode.get();
BuildController.java,StampedeId stampedeId = stampedeIdAndPendingPrepFuture.getFirst();,if (stampedeIdAndPendingPrepFuture != null ) StampedeId stampedeId = stampedeIdAndPendingPrepFuture.getFirst();
QueryCommand.java,int rank = entry.getValue();,if (entry != null ) int rank = entry.getValue();
QueryCommand.java,String output = stringWriter.getBuffer().toString();,if (stringWriter != null ) String output = stringWriter.getBuffer().toString();
CxxPrecompiledHeaderTest.java,BuildRuleParams params = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) BuildRuleParams params = TestBuildRuleParams.create();
CxxPreprocessAndCompileTest.java,BuildRuleParams params = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) BuildRuleParams params = TestBuildRuleParams.create();
CxxPreprocessAndCompileTest.java,final BuildRuleParams params = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) final BuildRuleParams params = TestBuildRuleParams.create();
CxxPreprocessAndCompileTest.java,BuildRuleParams params = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) BuildRuleParams params = TestBuildRuleParams.create();
CxxPreprocessAndCompileTest.java,BuildRuleParams params = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) BuildRuleParams params = TestBuildRuleParams.create();
CxxPreprocessAndCompileTest.java,BuildRuleParams params = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) BuildRuleParams params = TestBuildRuleParams.create();
CxxPreprocessAndCompileTest.java,BuildRuleParams params = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) BuildRuleParams params = TestBuildRuleParams.create();
FixCommand.java,int code = processExecutor.launchAndExecute(processParams).getExitCode();,if (processExecutor != null ) int code = processExecutor.launchAndExecute(processParams).getExitCode();
AndroidBuildToolsResolver.java,final Path sdkDir = sdkPath.get();,if (sdkPath != null ) final Path sdkDir = sdkPath.get();
AndroidBuildToolsResolver.java,buildToolsErrorMessage = unableToFindTargetBuildTools(sdkPath.get());,if (unableToFindTargetBuildTools(sdkPath != null ) buildToolsErrorMessage = unableToFindTargetBuildTools(sdkPath.get());
AndroidBuildToolsResolver.java,buildToolsErrorMessage = unableToFindTargetBuildTools(sdkPath.get());,if (unableToFindTargetBuildTools(sdkPath != null ) buildToolsErrorMessage = unableToFindTargetBuildTools(sdkPath.get());
AndroidPlatformTargetProducer.java,Path androidSdkDir = androidDirectoryResolver.getSdkOrThrow();,if (androidDirectoryResolver != null ) Path androidSdkDir = androidDirectoryResolver.getSdkOrThrow();
AndroidPlatformTargetProducer.java,Path androidSdkDir = androidDirectoryResolver.getSdkOrThrow();,if (androidDirectoryResolver != null ) Path androidSdkDir = androidDirectoryResolver.getSdkOrThrow();
DefaultAndroidDirectoryResolver.java,this.targetBuildToolsVersion = config.getBuildToolsVersion();,if (config != null ) this.targetBuildToolsVersion = config.getBuildToolsVersion();
DefaultAndroidDirectoryResolver.java,this.buildToolsErrorMessage = Optional.empty();,if (Optional != null ) this.buildToolsErrorMessage = Optional.empty();
DefaultAndroidDirectoryResolver.java,this.discoveredBuildToolsVersion = Optional.empty();,if (Optional != null ) this.discoveredBuildToolsVersion = Optional.empty();
DefaultAndroidDirectoryResolver.java,final Path sdkDir = sdkPath.get();,if (sdkPath != null ) final Path sdkDir = sdkPath.get();
DefaultAndroidDirectoryResolver.java,String version = stripBuildToolsPrefix(pathname.getName());,if (stripBuildToolsPrefix(pathname != null ) String version = stripBuildToolsPrefix(pathname.getName());
DefaultAndroidDirectoryResolver.java,buildToolsErrorMessage = Optional.of(e.getHumanReadableErrorMessage());,if (Optional != null ) buildToolsErrorMessage = Optional.of(e.getHumanReadableErrorMessage());
DefaultAndroidDirectoryResolver.java,buildToolsErrorMessage = unableToFindTargetBuildTools(sdkPath.get());,if (unableToFindTargetBuildTools(sdkPath != null ) buildToolsErrorMessage = unableToFindTargetBuildTools(sdkPath.get());
DefaultAndroidDirectoryResolver.java,String currentDirVersion = stripBuildToolsPrefix(directory.getName());,if (stripBuildToolsPrefix(directory != null ) String currentDirVersion = stripBuildToolsPrefix(directory.getName());
DefaultAndroidDirectoryResolver.java,buildToolsErrorMessage = unableToFindTargetBuildTools(sdkPath.get());,if (unableToFindTargetBuildTools(sdkPath != null ) buildToolsErrorMessage = unableToFindTargetBuildTools(sdkPath.get());
AssumeAndroidPlatform.java,Optional<String> sdkBuildToolsVersion = androidDirectoryResolver.getBuildToolsVersion();,if (androidDirectoryResolver != null ) Optional<String> sdkBuildToolsVersion = androidDirectoryResolver.getBuildToolsVersion();
DefaultAndroidDirectoryResolverTest.java,ret[i] = folder.toPath();,if (folder != null ) ret[i] = folder.toPath();
AndroidPlatformTargetProducer.java,Path buildToolsDir = androidDirectoryResolver.getBuildToolsOrThrow();,if (androidDirectoryResolver != null ) Path buildToolsDir = androidDirectoryResolver.getBuildToolsOrThrow();
AndroidPlatformTargetSupplier.java,Optional<String> target = androidBuckConfig.getAndroidTarget();,if (androidBuckConfig != null ) Optional<String> target = androidBuckConfig.getAndroidTarget();
AndroidPlatformTargetSupplier.java,androidPlatformTargetId = target.get();,if (target != null ) androidPlatformTargetId = target.get();
AdbHelper.java,"adb = createAdb(androidLegacyToolchain, contextSupplier.get());","if (contextSupplier != null ) adb = createAdb(androidLegacyToolchain, contextSupplier.get());"
AidlStep.java,AndroidPlatformTarget androidPlatformTarget = androidLegacyToolchain.getAndroidPlatformTarget();,if (androidLegacyToolchain != null ) AndroidPlatformTarget androidPlatformTarget = androidLegacyToolchain.getAndroidPlatformTarget();
Genrule.java,android = androidLegacyToolchain.getAndroidPlatformTarget();,if (androidLegacyToolchain != null ) android = androidLegacyToolchain.getAndroidPlatformTarget();
AaptStep.java,AndroidPlatformTarget androidPlatformTarget = androidLegacyToolchain.getAndroidPlatformTarget();,if (androidLegacyToolchain != null ) AndroidPlatformTarget androidPlatformTarget = androidLegacyToolchain.getAndroidPlatformTarget();
DxStep.java,AndroidPlatformTarget androidPlatformTarget = androidLegacyToolchain.getAndroidPlatformTarget();,if (androidLegacyToolchain != null ) AndroidPlatformTarget androidPlatformTarget = androidLegacyToolchain.getAndroidPlatformTarget();
ZipalignStep.java,AndroidPlatformTarget androidPlatformTarget = androidLegacyToolchain.getAndroidPlatformTarget();,if (androidLegacyToolchain != null ) AndroidPlatformTarget androidPlatformTarget = androidLegacyToolchain.getAndroidPlatformTarget();
AndroidPlatformTarget.java,Path androidSdkDir = androidDirectoryResolver.getSdkOrThrow();,if (androidDirectoryResolver != null ) Path androidSdkDir = androidDirectoryResolver.getSdkOrThrow();
AndroidPlatformTarget.java,additionalJarPaths = additionalJars.build();,if (additionalJars != null ) additionalJarPaths = additionalJars.build();
AndroidPlatformTarget.java,Path buildToolsDir = androidDirectoryResolver.getBuildToolsOrThrow();,if (androidDirectoryResolver != null ) Path buildToolsDir = androidDirectoryResolver.getBuildToolsOrThrow();
AndroidPlatformTarget.java,Path androidSdkDir = androidDirectoryResolver.getSdkOrThrow();,if (androidDirectoryResolver != null ) Path androidSdkDir = androidDirectoryResolver.getSdkOrThrow();
DefaultAndroidDirectoryResolver.java,this.targetNdkVersion = config.getNdkVersion();,if (config != null ) this.targetNdkVersion = config.getNdkVersion();
DefaultAndroidDirectoryResolver.java,this.ndkErrorMessage = Optional.empty();,if (Optional != null ) this.ndkErrorMessage = Optional.empty();
DefaultAndroidDirectoryResolver.java,ndkErrorMessage = Optional.of(e.getMessage());,if (Optional != null ) ndkErrorMessage = Optional.of(e.getMessage());
DefaultAndroidDirectoryResolver.java,ndkErrorMessage = Optional.of(e.getMessage());,if (Optional != null ) ndkErrorMessage = Optional.of(e.getMessage());
DefaultAndroidDirectoryResolver.java,ndkErrorMessage = Optional.of(e.getMessage());,if (Optional != null ) ndkErrorMessage = Optional.of(e.getMessage());
DefaultAndroidDirectoryResolver.java,ndkErrorMessage = Optional.of(e.getMessage());,if (Optional != null ) ndkErrorMessage = Optional.of(e.getMessage());
DefaultAndroidDirectoryResolver.java,ndkErrorMessage = Optional.of(e.getHumanReadableErrorMessage());,if (Optional != null ) ndkErrorMessage = Optional.of(e.getHumanReadableErrorMessage());
AndroidNdkFactory.java,ndkRoot = androidDirectoryResolver.getNdkOrThrow();,if (androidDirectoryResolver != null ) ndkRoot = androidDirectoryResolver.getNdkOrThrow();
AndroidNdkHelper.java,String ndkVersion = DefaultAndroidDirectoryResolver.findNdkVersionFromDirectory(ndkPath).get();,if (DefaultAndroidDirectoryResolver != null ) String ndkVersion = DefaultAndroidDirectoryResolver.findNdkVersionFromDirectory(ndkPath).get();
NdkCxxPlatformIntegrationTest.java,Path ndkDir = resolver.getNdkOrThrow();,if (resolver != null ) Path ndkDir = resolver.getNdkOrThrow();
AndroidNdkHelper.java,Path ndkPath = androidResolver.getNdkOrThrow();,if (androidResolver != null ) Path ndkPath = androidResolver.getNdkOrThrow();
CxxSharedLibraryInterfaceIntegrationTest.java,ndkDir = resolver.getNdkOrThrow();,if (resolver != null ) ndkDir = resolver.getNdkOrThrow();
CxxSharedLibraryInterfaceIntegrationTest.java,String ndkVersion = resolver.getNdkVersion().get();,if (resolver != null ) String ndkVersion = resolver.getNdkVersion().get();
NdkCxxPlatforms.java,int ndkMajorVersion = getNdkMajorVersion(ndkVersion.get());,if (getNdkMajorVersion(ndkVersion != null ) int ndkMajorVersion = getNdkMajorVersion(ndkVersion.get());
NdkCxxPlatformsProviderFactory.java,Optional<String> ndkVersion = androidConfig.getNdkVersion();,if (androidConfig != null ) Optional<String> ndkVersion = androidConfig.getNdkVersion();
NdkCxxPlatformsProviderFactory.java,ndkVersion = Optional.of(androidNdk.getNdkVersion());,if (Optional != null ) ndkVersion = Optional.of(androidNdk.getNdkVersion());
CxxSharedLibraryInterfaceIntegrationTest.java,Optional<String> ndkVersion = resolver.getNdkVersion();,if (resolver != null ) Optional<String> ndkVersion = resolver.getNdkVersion();
CxxCompilationDatabaseTest.java,Iterable<CxxCompilationDatabaseEntry> observedEntries = step.createEntries();,if (step != null ) Iterable<CxxCompilationDatabaseEntry> observedEntries = step.createEntries();
JarParametersSerializer.java,Optional<String> mainClass = Optional.empty();,if (Optional != null ) Optional<String> mainClass = Optional.empty();
JarParametersSerializer.java,Optional<Path> manifestFile = Optional.empty();,if (Optional != null ) Optional<Path> manifestFile = Optional.empty();
JavaPackageFinderSerializerTest.java,JavaPackageFinder chainedFinder = outResFinder.getFallbackFinder();,if (outResFinder != null ) JavaPackageFinder chainedFinder = outResFinder.getFallbackFinder();
TargetsCommand.java,SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(result.getResolver());,if (SourcePathRuleFinder(result != null ) SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(result.getResolver());
CompletionSimulator.java,enclosingType = complete(element.getEnclosingElement());,if (complete(element != null ) enclosingType = complete(element.getEnclosingElement());
CompletionSimulator.java,superclass = complete(element.getSuperclass());,if (complete(element != null ) superclass = complete(element.getSuperclass());
BuildController.java,StampedeId stampedeId = stampedeIdAndPendingPrepFuture.getFirst();,if (stampedeIdAndPendingPrepFuture != null ) StampedeId stampedeId = stampedeIdAndPendingPrepFuture.getFirst();
AndroidNdkHelper.java,Optional<Path> ndkPath = androidResolver.getNdkOrAbsent();,if (androidResolver != null ) Optional<Path> ndkPath = androidResolver.getNdkOrAbsent();
NdkCxxPlatformIntegrationTest.java,Optional<Path> ndkDir = resolver.getNdkOrAbsent();,if (resolver != null ) Optional<Path> ndkDir = resolver.getNdkOrAbsent();
CxxSharedLibraryInterfaceIntegrationTest.java,Optional<Path> ndkDir = resolver.getNdkOrAbsent();,if (resolver != null ) Optional<Path> ndkDir = resolver.getNdkOrAbsent();
AbstractCxxSymlinkTreeHeaders.java,computedDeps = Optional.of(cachedBuilder.build());,if (Optional != null ) computedDeps = Optional.of(cachedBuilder.build());
BuildCommand.java,lastBuild = builder.getBuild();,if (builder != null ) lastBuild = builder.getBuild();
AuditConfigCommand.java,final BuckConfig buckConfig = params.getBuckConfig();,if (params != null ) final BuckConfig buckConfig = params.getBuckConfig();
Jsr199JavacInvocation.java,JavaCompiler compiler = compilerConstructor.get();,if (compilerConstructor != null ) JavaCompiler compiler = compilerConstructor.get();
Jsr199JavacInvocation.java,List<String> classNamesForAnnotationProcessing = ImmutableList.of();,if (ImmutableList != null ) List<String> classNamesForAnnotationProcessing = ImmutableList.of();
Jsr199JavacInvocation.java,Writer compilerOutputWriter = new PrintWriter(context.getStdErr()); // NOPMD required by API,if (API != null ) Writer compilerOutputWriter = new PrintWriter(context.getStdErr()); // NOPMD required by API
Jsr199JavacInvocation.java,"phaseEventLogger = new JavacPhaseEventLogger(invokingRule, context.getEventSink());","if (context != null ) phaseEventLogger = new JavacPhaseEventLogger(invokingRule, context.getEventSink());"
BuildTargetsQueueFactory.java,"ruleKeys = ruleKeys.subList(numKeysInCurrentRequest, ruleKeys.size());","if (ruleKeys != null ) ruleKeys = ruleKeys.subList(numKeysInCurrentRequest, ruleKeys.size());"
BuildTargetsQueueFactory.java,Stopwatch stopwatch = Stopwatch.createStarted();,if (Stopwatch != null ) Stopwatch stopwatch = Stopwatch.createStarted();
BuildTargetsQueueFactory.java,BuildRule rule = buildRulesToProcess.remove();,if (buildRulesToProcess != null ) BuildRule rule = buildRulesToProcess.remove();
BuildTargetsQueueFactory.java,ImmutableSet<BuildRule> allDeps = allDependencies.build();,if (allDependencies != null ) ImmutableSet<BuildRule> allDeps = allDependencies.build();
BuildTargetsQueueTest.java,BuildTargetsQueue queue = BuildTargetsQueueFactory.newEmptyQueue();,if (BuildTargetsQueueFactory != null ) BuildTargetsQueue queue = BuildTargetsQueueFactory.newEmptyQueue();
BuildTargetsQueueTest.java,BuildRuleResolver resolver = CustomBuildRuleResolverFactory.createSimpleRuntimeDepsResolver();,if (CustomBuildRuleResolverFactory != null ) BuildRuleResolver resolver = CustomBuildRuleResolverFactory.createSimpleRuntimeDepsResolver();
BuildTargetsQueueTest.java,List<String> targets = workUnit.getBuildTargets();,if (workUnit != null ) List<String> targets = workUnit.getBuildTargets();
BuildTargetsQueueTest.java,BuildRuleResolver resolver = CustomBuildRuleResolverFactory.createSimpleResolver();,if (CustomBuildRuleResolverFactory != null ) BuildRuleResolver resolver = CustomBuildRuleResolverFactory.createSimpleResolver();
ParserTest.java,RemoteDaemonicParserState remote = parser.storeParserState();,if (parser != null ) RemoteDaemonicParserState remote = parser.storeParserState();
BuildPhase.java,final StampedeId stampedeId = job.getStampedeId();,if (job != null ) final StampedeId stampedeId = job.getStampedeId();
BuildPhase.java,Stopwatch stopwatch = Stopwatch.createStarted();,if (Stopwatch != null ) Stopwatch stopwatch = Stopwatch.createStarted();
AbstractCxxSourceRuleFactory.java,PreprocessorDelegate preprocessorDelegate = preprocessorDelegateValue.getPreprocessorDelegate();,if (preprocessorDelegateValue != null ) PreprocessorDelegate preprocessorDelegate = preprocessorDelegateValue.getPreprocessorDelegate();
AbstractCxxSourceRuleFactory.java,Preprocessor preprocessor = preprocessorDelegate.getPreprocessor();,if (preprocessorDelegate != null ) Preprocessor preprocessor = preprocessorDelegate.getPreprocessor();
Genrule.java,Optional<Path> sdkDirectory = android.getSdkDirectory();,if (android != null ) Optional<Path> sdkDirectory = android.getSdkDirectory();
Genrule.java,Optional<Path> ndkDirectory = android.getNdkDirectory();,if (android != null ) Optional<Path> ndkDirectory = android.getNdkDirectory();
JsBundle.java,ImmutableSortedSet<Flavor> flavors = target.getFlavors();,if (target != null ) ImmutableSortedSet<Flavor> flavors = target.getFlavors();
JsLibrary.java,ImmutableSortedSet<Flavor> flavors = target.getFlavors();,if (target != null ) ImmutableSortedSet<Flavor> flavors = target.getFlavors();
AbstractCxxSourceRuleFactory.java,this.preprocessorFullHash = computeHash(preprocessorDelegate.getIncludePathFlags());,if (computeHash(preprocessorDelegate != null ) this.preprocessorFullHash = computeHash(preprocessorDelegate.getIncludePathFlags());
BuildTargetsQueueTest.java,ProjectFilesystem filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());,if (TestProjectFilesystems != null ) ProjectFilesystem filesystem = TestProjectFilesystems.createProjectFilesystem(tmp.getRoot());
BuildTargetsQueueTest.java,BuildRuleParams ruleParams = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) BuildRuleParams ruleParams = TestBuildRuleParams.create();
BuildPhase.java,long currentTimestampMillis = clock.currentTimeMillis();,if (clock != null ) long currentTimestampMillis = clock.currentTimeMillis();
BuildPhase.java,TimestampedEvent<BuildRuleFinishedEvent> timestampedEvent = eventsIterator.next();,if (eventsIterator != null ) TimestampedEvent<BuildRuleFinishedEvent> timestampedEvent = eventsIterator.next();
BuildControllerTest.java,directExecutor = MoreExecutors.listeningDecorator(MoreExecutors.newDirectExecutorService());,if (MoreExecutors != null ) directExecutor = MoreExecutors.listeningDecorator(MoreExecutors.newDirectExecutorService());
BuildPhaseTest.java,directExecutor = MoreExecutors.listeningDecorator(MoreExecutors.newDirectExecutorService());,if (MoreExecutors != null ) directExecutor = MoreExecutors.listeningDecorator(MoreExecutors.newDirectExecutorService());
MinionWorkloadAllocatorTest.java,BuildRuleResolver resolver = BuildTargetsQueueTest.createDiamondDependencyResolver();,if (BuildTargetsQueueTest != null ) BuildRuleResolver resolver = BuildTargetsQueueTest.createDiamondDependencyResolver();
BuildTargetsQueue.java,ImmutableList<String> dependents = target.getDependentTargets();,if (target != null ) ImmutableList<String> dependents = target.getDependentTargets();
BuildCommand.java,DistBuildCellIndexer cellIndexer = new DistBuildCellIndexer(params.getCell());,if (DistBuildCellIndexer(params != null ) DistBuildCellIndexer cellIndexer = new DistBuildCellIndexer(params.getCell());
BuildCommand.java,BuildJobState jobState = stateAndCells.getFirst();,if (stateAndCells != null ) BuildJobState jobState = stateAndCells.getFirst();
BuildCommand.java,DistBuildCellIndexer distBuildCellIndexer = stateAndCells.getSecond();,if (stateAndCells != null ) DistBuildCellIndexer distBuildCellIndexer = stateAndCells.getSecond();
BuildCommand.java,BuildEvent.DistBuildStarted started = BuildEvent.distBuildStarted();,if (BuildEvent != null ) BuildEvent.DistBuildStarted started = BuildEvent.distBuildStarted();
BuckModuleJarHashProvider.java,ClassLoader classLoader = cls.getClassLoader();,if (cls != null ) ClassLoader classLoader = cls.getClassLoader();
SuggestCommand.java,final Console console = params.getConsole();,if (params != null ) final Console console = params.getConsole();
CxxLibraryDescription.java,BuildTarget baseTarget = buildTarget.withoutFlavors(type.getKey());,if (buildTarget != null ) BuildTarget baseTarget = buildTarget.withoutFlavors(type.getKey());
CxxLibraryDescription.java,Optional<CxxHeaders> symlinkTree = Optional.empty();,if (Optional != null ) Optional<CxxHeaders> symlinkTree = Optional.empty();
CxxLibraryDescription.java,baseTarget = baseTarget.withoutFlavors(mode.getFlavor());,if (baseTarget != null ) baseTarget = baseTarget.withoutFlavors(mode.getFlavor());
CxxLibraryDescription.java,CxxPreprocessorInput.Builder cxxPreprocessorInputBuilder = CxxPreprocessorInput.builder();,if (CxxPreprocessorInput != null ) CxxPreprocessorInput.Builder cxxPreprocessorInputBuilder = CxxPreprocessorInput.builder();
CxxLibraryDescription.java,CxxPreprocessorInput cxxPreprocessorInput = cxxPreprocessorInputBuilder.build();,if (cxxPreprocessorInputBuilder != null ) CxxPreprocessorInput cxxPreprocessorInput = cxxPreprocessorInputBuilder.build();
CxxLibraryDescription.java,Optional<SymlinkTree> sandboxTree = Optional.empty();,if (Optional != null ) Optional<SymlinkTree> sandboxTree = Optional.empty();
CxxLibraryDescription.java,Optional<SharedLibraryInterfaceParams> params = cxxPlatform.getSharedLibraryInterfaceParams();,if (cxxPlatform != null ) Optional<SharedLibraryInterfaceParams> params = cxxPlatform.getSharedLibraryInterfaceParams();
CxxLibraryDescription.java,FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();,if (cxxPlatformsProvider != null ) FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();
CxxLibraryDescription.java,Flavor defaultCxxFlavor = cxxPlatformsProvider.getDefaultCxxPlatform().getFlavor();,if (cxxPlatformsProvider != null ) Flavor defaultCxxFlavor = cxxPlatformsProvider.getDefaultCxxPlatform().getFlavor();
CxxLibraryDescription.java,boolean hasObjectsForAnyPlatform = !args.getSrcs().isEmpty();,if (!args != null ) boolean hasObjectsForAnyPlatform = !args.getSrcs().isEmpty();
CxxLibraryDescription.java,this.declaredPlatforms = cxxBuckConfig.getDeclaredPlatforms();,if (cxxBuckConfig != null ) this.declaredPlatforms = cxxBuckConfig.getDeclaredPlatforms();
CxxBinaryDescription.java,this.declaredPlatforms = cxxBuckConfig.getDeclaredPlatforms();,if (cxxBuckConfig != null ) this.declaredPlatforms = cxxBuckConfig.getDeclaredPlatforms();
CxxBinaryDescription.java,ImmutableSet<Flavor> flavors = ImmutableSet.copyOf(target.getFlavors());,if (ImmutableSet != null ) ImmutableSet<Flavor> flavors = ImmutableSet.copyOf(target.getFlavors());
CxxBinaryDescription.java,FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();,if (cxxPlatformsProvider != null ) FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();
CxxBinaryDescription.java,FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();,if (cxxPlatformsProvider != null ) FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();
CxxBinaryDescription.java,Optional<CxxPlatform> targetPlatform = cxxPlatforms.getValue(target.getFlavors());,if (cxxPlatforms != null ) Optional<CxxPlatform> targetPlatform = cxxPlatforms.getValue(target.getFlavors());
CxxBinaryDescription.java,"CxxPlatform cxxPlatform = getCxxPlatform(target, args.getDefaultPlatform());","if (args != null ) CxxPlatform cxxPlatform = getCxxPlatform(target, args.getDefaultPlatform());"
MinionHealthTracker.java,long lastHealthCheckMillis = minion.getLastHealthCheckMillis();,if (minion != null ) long lastHealthCheckMillis = minion.getLastHealthCheckMillis();
MinionHealthTracker.java,lastHealthCheckMillis = clock.currentTimeMillis();,if (clock != null ) lastHealthCheckMillis = clock.currentTimeMillis();
MacroFinder.java,MacroReplacer replacer = replacers.get(matchResult.getMacroType());,if (replacers != null ) MacroReplacer replacer = replacers.get(matchResult.getMacroType());
AbstractCxxSourceRuleFactory.java,"CxxToolFlags flags = computeCompilerFlags(source.getType(), source.getFlags());","if (source != null ) CxxToolFlags flags = computeCompilerFlags(source.getType(), source.getFlags());"
AbstractCxxSourceRuleFactory.java,this.baseFlags = builder.build();,if (builder != null ) this.baseFlags = builder.build();
AbstractCxxSourceRuleFactory.java,this.fullFlags = builder.build();,if (builder != null ) this.fullFlags = builder.build();
PreprocessorDelegate.java,String workingDirString = workingDir.toString();,if (workingDir != null ) String workingDirString = workingDir.toString();
CxxLink.java,Path currentRuleCellRoot = getProjectFilesystem().getRootPath();,if (getProjectFilesystem() != null ) Path currentRuleCellRoot = getProjectFilesystem().getRootPath();
MacroHandler.java,MacroExpander expander = getExpander(matchResult.getMacroType());,if (getExpander(matchResult != null ) MacroExpander expander = getExpander(matchResult.getMacroType());
CommandAliasDescription.java,tool = this.tool.get();,if (this != null ) tool = this.tool.get();
ClasspathMacroExpanderTest.java,BuildRule dep = ruleResolver.requireRule(depNode.getBuildTarget());,if (ruleResolver != null ) BuildRule dep = ruleResolver.requireRule(depNode.getBuildTarget());
ClasspathMacroExpanderTest.java,BuildRule rule = ruleResolver.requireRule(ruleNode.getBuildTarget());,if (ruleResolver != null ) BuildRule rule = ruleResolver.requireRule(ruleNode.getBuildTarget());
ScubaBuildListenerCacheMissTest.java,ruleKeyLogEntry.storeLogEntries = Collections.emptyList();,if (Collections != null ) ruleKeyLogEntry.storeLogEntries = Collections.emptyList();
AndroidManifestDescription.java,ImmutableSet<SourcePath> manifestFiles = transitiveDependencyGraph.findManifestFiles();,if (transitiveDependencyGraph != null ) ImmutableSet<SourcePath> manifestFiles = transitiveDependencyGraph.findManifestFiles();
AbstractKnownBuildRuleTypes.java,JavacOptions defaultJavacOptions = javaConfig.getDefaultJavacOptions();,if (javaConfig != null ) JavacOptions defaultJavacOptions = javaConfig.getDefaultJavacOptions();
AbstractKnownBuildRuleTypes.java,JavaOptions defaultJavaOptionsForTests = javaConfig.getDefaultJavaOptionsForTests();,if (javaConfig != null ) JavaOptions defaultJavaOptionsForTests = javaConfig.getDefaultJavaOptionsForTests();
MergeAndroidResourcesStep.java,RDotTxtEntry resource = resourceAndSymbolsFiles.getKey();,if (resourceAndSymbolsFiles != null ) RDotTxtEntry resource = resourceAndSymbolsFiles.getKey();
AbstractKnownBuildRuleTypes.java,JavaOptions defaultJavaOptions = javaConfig.getDefaultJavaOptions();,if (javaConfig != null ) JavaOptions defaultJavaOptions = javaConfig.getDefaultJavaOptions();
AbstractKnownBuildRuleTypes.java,FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProviderFactory.getCxxPlatforms();,if (cxxPlatformsProviderFactory != null ) FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProviderFactory.getCxxPlatforms();
AbstractKnownBuildRuleTypes.java,CxxPlatform defaultCxxPlatform = cxxPlatformsProviderFactory.getDefaultCxxPlatform();,if (cxxPlatformsProviderFactory != null ) CxxPlatform defaultCxxPlatform = cxxPlatformsProviderFactory.getDefaultCxxPlatform();
PerBuildState.java,this.stdout = new PrintStream(ByteStreams.nullOutputStream());,if (PrintStream(ByteStreams != null ) this.stdout = new PrintStream(ByteStreams.nullOutputStream());
PerBuildState.java,this.stderr = new PrintStream(ByteStreams.nullOutputStream());,if (PrintStream(ByteStreams != null ) this.stderr = new PrintStream(ByteStreams.nullOutputStream());
Console.java,PrintStream stdout = new PrintStream(ByteStreams.nullOutputStream());,if (PrintStream(ByteStreams != null ) PrintStream stdout = new PrintStream(ByteStreams.nullOutputStream());
Console.java,PrintStream stderr = new PrintStream(ByteStreams.nullOutputStream());,if (PrintStream(ByteStreams != null ) PrintStream stderr = new PrintStream(ByteStreams.nullOutputStream());
NetworkStatsKeeper.java,long currentTime = clock.currentTimeMillis();,if (clock != null ) long currentTime = clock.currentTimeMillis();
NetworkStatsKeeper.java,lastDownloadFinishedTimeMs = event.getTimestamp();,if (event != null ) lastDownloadFinishedTimeMs = event.getTimestamp();
NetworkStatsKeeper.java,firstDownloadStartTimestamp = event.getTimestamp();,if (event != null ) firstDownloadStartTimestamp = event.getTimestamp();
PythonBuckConfig.java,Path configPath = Paths.get(config.get());,if (Paths != null ) Path configPath = Paths.get(config.get());
FileSystemMap.java,Path relPath = parent.getKey();,if (parent != null ) Path relPath = parent.getKey();
FileSystemMap.java,parent = parent.subLevels.get(p.toString());,if (parent != null ) parent = parent.subLevels.get(p.toString());
BuckQueryEnvironmentTest.java,executor = MoreExecutors.listeningDecorator(Executors.newSingleThreadExecutor());,if (MoreExecutors != null ) executor = MoreExecutors.listeningDecorator(Executors.newSingleThreadExecutor());
FileSystemMap.java,path = path.getParent();,if (path != null ) path = path.getParent();
AbstractConsoleEventBusListener.java,String failureDetails = failed.getFailureDetails();,if (failed != null ) String failureDetails = failed.getFailureDetails();
AbstractAutoSparseFactory.java,Path hgRoot = hgCmdLine.getHgRoot();,if (hgCmdLine != null ) Path hgRoot = hgCmdLine.getHgRoot();
AbstractAutoSparseFactory.java,hgRevisionId = hgCmdLine.currentRevisionId();,if (hgCmdLine != null ) hgRevisionId = hgCmdLine.currentRevisionId();
AbstractAutoSparseFactory.java,AutoSparseState entry = perSCRoot.get(hgRoot).get();,if (perSCRoot != null ) AutoSparseState entry = perSCRoot.get(hgRoot).get();
AutoSparseProjectFilesystemDelegate.java,this.scRoot = autoSparseState.getSCRoot();,if (autoSparseState != null ) this.scRoot = autoSparseState.getSCRoot();
AutoSparseProjectFilesystemDelegate.java,SparseSummary sparseSummary = SparseSummary.of();,if (SparseSummary != null ) SparseSummary sparseSummary = SparseSummary.of();
AutoSparseProjectFilesystemDelegate.java,sparseSummary = autoSparseState.materialiseSparseProfile();,if (autoSparseState != null ) sparseSummary = autoSparseState.materialiseSparseProfile();
AutoSparseStateEvents.java,String trimmed = output.trim();,if (output != null ) String trimmed = output.trim();
HgAutoSparseState.java,this.ignoredPaths = autoSparseConfig.ignoredPaths();,if (autoSparseConfig != null ) this.ignoredPaths = autoSparseConfig.ignoredPaths();
HgAutoSparseState.java,"ignoredPaths = union(ignoredPaths, config.ignoredPaths());","if (config != null ) ignoredPaths = union(ignoredPaths, config.ignoredPaths());"
HgAutoSparseState.java,Path relativePath = hgRoot.relativize(path.toAbsolutePath());,if (hgRoot != null ) Path relativePath = hgRoot.relativize(path.toAbsolutePath());
HgAutoSparseState.java,parent = parent.getParent();,if (parent != null ) parent = parent.getParent();
HgAutoSparseState.java,Path rawManifestPath = hgCmdLine.extractRawManifest();,if (hgCmdLine != null ) Path rawManifestPath = hgCmdLine.extractRawManifest();
HgAutoSparseState.java,Path directory = relativePath.getParent();,if (relativePath != null ) Path directory = relativePath.getParent();
ManifestTrie.java,TrieNode node = root.get(path.iterator());,if (root != null ) TrieNode node = root.get(path.iterator());
ManifestTrie.java,TrieNode node = root.get(path.iterator());,if (root != null ) TrieNode node = root.get(path.iterator());
ManifestTrie.java,TrieNode node = root.get(path.iterator());,if (root != null ) TrieNode node = root.get(path.iterator());
ManifestTrie.java,TrieNode node = root.get(path.iterator());,if (root != null ) TrieNode node = root.get(path.iterator());
ManifestTrie.java,added = manifest == null && children.isEmpty();,if (children != null ) added = manifest == null && children.isEmpty();
ManifestTrie.java,boolean lastSegment = !segments.hasNext();,if (!segments != null ) boolean lastSegment = !segments.hasNext();
MmappedHgManifest.java,long longSize = fileChannel.size();,if (fileChannel != null ) long longSize = fileChannel.size();
MmappedHgManifest.java,lastIndex = sizeAndDeleted.getFirst().intValue();,if (sizeAndDeleted != null ) lastIndex = sizeAndDeleted.getFirst().intValue();
MmappedHgManifest.java,deletedPaths = sizeAndDeleted.getSecond();,if (sizeAndDeleted != null ) deletedPaths = sizeAndDeleted.getSecond();
MmappedHgManifest.java,chunkIndex = indexBuilder.build();,if (indexBuilder != null ) chunkIndex = indexBuilder.build();
MmappedHgManifest.java,ImmutableSet<String> deleted = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<String> deleted = ImmutableSet.of();
MmappedHgManifest.java,Iterator<ManifestEntry> deletedIterator = Collections.emptyIterator();,if (Collections != null ) Iterator<ManifestEntry> deletedIterator = Collections.emptyIterator();
SuperConsoleEventBusListenerTest.java,sparseRefreshStarted = new AutoSparseStateEvents.SparseRefreshStarted();,if (AutoSparseStateEvents != null ) sparseRefreshStarted = new AutoSparseStateEvents.SparseRefreshStarted();
AutoSparseIntegrationTest.java,List<AutoSparseStateEvents> events = listener.getLoggedEvents();,if (listener != null ) List<AutoSparseStateEvents> events = listener.getLoggedEvents();
HgCmdLineInterfaceIntegrationTest.java,Path path = hgCmdLineInterface.extractRawManifest();,if (hgCmdLineInterface != null ) Path path = hgCmdLineInterface.extractRawManifest();
HgCmdLineInterfaceIntegrationTest.java,Path path = hgCmdLineInterface.extractRawManifest();,if (hgCmdLineInterface != null ) Path path = hgCmdLineInterface.extractRawManifest();
XctestRunTestsStep.java,Optional<Path> xcodeDeveloperDir = xcodeDeveloperDirSupplier.get();,if (xcodeDeveloperDirSupplier != null ) Optional<Path> xcodeDeveloperDir = xcodeDeveloperDirSupplier.get();
XctoolRunTestsStep.java,Optional<Path> xcodeDeveloperDir = xcodeDeveloperDirSupplier.get();,if (xcodeDeveloperDirSupplier != null ) Optional<Path> xcodeDeveloperDir = xcodeDeveloperDirSupplier.get();
AppleBundle.java,this.codeSignIdentityStore = CodeSignIdentityStore.fromIdentities(ImmutableList.of());,if (CodeSignIdentityStore != null ) this.codeSignIdentityStore = CodeSignIdentityStore.fromIdentities(ImmutableList.of());
ProvisioningProfileCopyStep.java,identities = Optional.of(codeSignIdentityStore.getIdentities());,if (Optional != null ) identities = Optional.of(codeSignIdentityStore.getIdentities());
ProvisioningProfileCopyStepTest.java,codeSignIdentityStore = CodeSignIdentityStore.fromIdentities(ImmutableList.of());,if (CodeSignIdentityStore != null ) codeSignIdentityStore = CodeSignIdentityStore.fromIdentities(ImmutableList.of());
BuckQueryEnvironmentTest.java,executor = MoreExecutors.listeningDecorator(Executors.newSingleThreadExecutor());,if (MoreExecutors != null ) executor = MoreExecutors.listeningDecorator(Executors.newSingleThreadExecutor());
GoCompile.java,ImmutableList<Path> extraLibs = extraLibsListBuilder.build();,if (extraLibsListBuilder != null ) ImmutableList<Path> extraLibs = extraLibsListBuilder.build();
GoCompile.java,boolean allowExternalReferences = !asmSrcs.isEmpty() || !extraLibs.isEmpty();,if (!extraLibs != null ) boolean allowExternalReferences = !asmSrcs.isEmpty() || !extraLibs.isEmpty();
GoDescriptors.java,Optional<CGoCompileRules> cgoCompile = Optional.empty();,if (Optional != null ) Optional<CGoCompileRules> cgoCompile = Optional.empty();
MachineReadableLoggerListener.java,private OptionalInt exitCode = OptionalInt.empty();,if (OptionalInt != null ) private OptionalInt exitCode = OptionalInt.empty();
MachineReadableLoggerListener.java,exitCode = OptionalInt.of(event.getExitCode());,if (OptionalInt != null ) exitCode = OptionalInt.of(event.getExitCode());
MachineReadableLoggerListener.java,exitCode = OptionalInt.of(event.getExitCode());,if (OptionalInt != null ) exitCode = OptionalInt.of(event.getExitCode());
Main.java,PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();,if (BuckPluginManagerFactory != null ) PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();
AppleBundle.java,this.codeSignIdentityStore = CodeSignIdentityStoreFactory.fromIdentities(ImmutableList.of());,if (CodeSignIdentityStoreFactory != null ) this.codeSignIdentityStore = CodeSignIdentityStoreFactory.fromIdentities(ImmutableList.of());
ProvisioningProfileCopyStepTest.java,codeSignIdentityStore = CodeSignIdentityStoreFactory.fromIdentities(ImmutableList.of());,if (CodeSignIdentityStoreFactory != null ) codeSignIdentityStore = CodeSignIdentityStoreFactory.fromIdentities(ImmutableList.of());
AppleBundle.java,this.codeSignIdentityStore = CodeSignIdentityStore.fromIdentities(ImmutableList.of());,if (CodeSignIdentityStore != null ) this.codeSignIdentityStore = CodeSignIdentityStore.fromIdentities(ImmutableList.of());
CodeSignIdentityStore.java,Builder<CodeSignIdentity> builder = ImmutableList.builder();,if (ImmutableList != null ) Builder<CodeSignIdentity> builder = ImmutableList.builder();
CodeSignIdentityStore.java,ImmutableList<CodeSignIdentity> allValidIdentities = builder.build();,if (builder != null ) ImmutableList<CodeSignIdentity> allValidIdentities = builder.build();
ProvisioningProfileCopyStepTest.java,codeSignIdentityStore = CodeSignIdentityStore.fromIdentities(ImmutableList.of());,if (CodeSignIdentityStore != null ) codeSignIdentityStore = CodeSignIdentityStore.fromIdentities(ImmutableList.of());
AppleConfigTest.java,ImmutableList<Path> extraToolchainPaths = config.getExtraToolchainPaths();,if (config != null ) ImmutableList<Path> extraToolchainPaths = config.getExtraToolchainPaths();
QueryMacroExpander.java,this.results = results.collect(MoreCollectors.toImmutableList());,if (results != null ) this.results = results.collect(MoreCollectors.toImmutableList());
BuildTargetsQueue.java,BuildRule rule = buildRulesToProcess.remove();,if (buildRulesToProcess != null ) BuildRule rule = buildRulesToProcess.remove();
BuildTargetsQueueTest.java,BuildTargetsQueue queue = BuildTargetsQueue.newEmptyQueue();,if (BuildTargetsQueue != null ) BuildTargetsQueue queue = BuildTargetsQueue.newEmptyQueue();
BuildTargetsQueueTest.java,"BuildTargetsQueue queue = BuildTargetsQueue.newQueue(resolver, ImmutableList.of());","if (ImmutableList != null ) BuildTargetsQueue queue = BuildTargetsQueue.newQueue(resolver, ImmutableList.of());"
DistBuildRunCommand.java,DistBuildConfig distBuildConfig = new DistBuildConfig(params.getBuckConfig());,if (DistBuildConfig(params != null ) DistBuildConfig distBuildConfig = new DistBuildConfig(params.getBuckConfig());
DistBuildSlaveExecutor.java,delegateAndGraphs = initializer.getDelegateAndGraphs().get();,if (initializer != null ) delegateAndGraphs = initializer.getDelegateAndGraphs().get();
DistBuildStateTest.java,PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();,if (BuckPluginManagerFactory != null ) PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();
GoBinaryDescription.java,Optional<CxxPlatform> cxxPlatform = goPlatform.getCxxPlatform();,if (goPlatform != null ) Optional<CxxPlatform> cxxPlatform = goPlatform.getCxxPlatform();
GoCompile.java,boolean allowExternalReferences = !asmSrcs.isEmpty();,if (!asmSrcs != null ) boolean allowExternalReferences = !asmSrcs.isEmpty();
GoDescriptors.java,ImmutableList<BuildRule> linkableDeps = linkableDepsBuilder.build();,if (linkableDepsBuilder != null ) ImmutableList<BuildRule> linkableDeps = linkableDepsBuilder.build();
GoTestDescription.java,Optional<CxxPlatform> cxxPlatform = goPlatform.getCxxPlatform();,if (goPlatform != null ) Optional<CxxPlatform> cxxPlatform = goPlatform.getCxxPlatform();
PatternsMatcher.java,hasPatterns = rawPatterns.iterator().hasNext();,if (rawPatterns != null ) hasPatterns = rawPatterns.iterator().hasNext();
MinionModeRunnerIntegrationTest.java,BuildTargetsQueue queue = BuildTargetsQueueTest.createDiamondDependencyQueue();,if (BuildTargetsQueueTest != null ) BuildTargetsQueue queue = BuildTargetsQueueTest.createDiamondDependencyQueue();
InnerClassesTableTest.java,Elements elements = compiler.getElements();,if (compiler != null ) Elements elements = compiler.getElements();
FrontendOnlyJavacTask.java,types = new TreeBackedTypes(javacTask.getTypes());,if (TreeBackedTypes(javacTask != null ) types = new TreeBackedTypes(javacTask.getTypes());
SkylarkProjectBuildFileParser.java,String pythonName = paramInfoEntry.getValue().getPythonName();,if (paramInfoEntry != null ) String pythonName = paramInfoEntry.getValue().getPythonName();
BuckJavacTask.java,elements = new ElementsExtendedImpl(super.getElements());,if (ElementsExtendedImpl(super != null ) elements = new ElementsExtendedImpl(super.getElements());
AbstractKnownBuildRuleTypes.java,LuaPlatform defaultLuaPlatform = luaPlatforms.getValue(defaultCxxPlatform.getFlavor());,if (luaPlatforms != null ) LuaPlatform defaultLuaPlatform = luaPlatforms.getValue(defaultCxxPlatform.getFlavor());
DefaultAndroidDirectoryResolver.java,ndkErrorMessage = Optional.of(e.getMessage());,if (Optional != null ) ndkErrorMessage = Optional.of(e.getMessage());
DefaultAndroidDirectoryResolver.java,ndkErrorMessage = Optional.of(e.getMessage());,if (Optional != null ) ndkErrorMessage = Optional.of(e.getMessage());
SkylarkProjectBuildFileParser.java,this.readConfigFunction = ReadConfig.create();,if (ReadConfig != null ) this.readConfigFunction = ReadConfig.create();
RustLibraryArg.java,int result = resolver.hashCode();,if (resolver != null ) int result = resolver.hashCode();
CommandAliasDescription.java,tool = this.tool.get();,if (this != null ) tool = this.tool.get();
RemoteFileDescriptionTest.java,SourcePath input = Iterables.getOnlyElement(executableCommand.getInputs());,if (Iterables != null ) SourcePath input = Iterables.getOnlyElement(executableCommand.getInputs());
ParseContext.java,loadedPathsBuilder = ImmutableSortedSet.naturalOrder();,if (ImmutableSortedSet != null ) loadedPathsBuilder = ImmutableSortedSet.naturalOrder();
SkylarkProjectBuildFileParser.java,Environment extensionEnv = envBuilder.useDefaultSemantics().build();,if (envBuilder != null ) Environment extensionEnv = envBuilder.useDefaultSemantics().build();
Main.java,ImmutableList<BuckEventListener> eventListeners = ImmutableList.of();,if (ImmutableList != null ) ImmutableList<BuckEventListener> eventListeners = ImmutableList.of();
Main.java,StackedFileHashCache fileHashCache = new StackedFileHashCache(allCaches.build());,if (StackedFileHashCache(allCaches != null ) StackedFileHashCache fileHashCache = new StackedFileHashCache(allCaches.build());
Main.java,Locale locale = Locale.getDefault();,if (Locale != null ) Locale locale = Locale.getDefault();
Main.java,processManager = Optional.empty();,if (Optional != null ) processManager = Optional.empty();
Main.java,Optional<Path> eventsOutputPath = subcommand.getEventsOutputPath();,if (subcommand != null ) Optional<Path> eventsOutputPath = subcommand.getEventsOutputPath();
Main.java,commandSemaphoreNgClient = Optional.empty();,if (Optional != null ) commandSemaphoreNgClient = Optional.empty();
WatchmanFactory.java,Optional<WatchmanClient> watchmanClient = Optional.empty();,if (Optional != null ) Optional<WatchmanClient> watchmanClient = Optional.empty();
WatchmanFactory.java,long versionQueryStartTimeNanos = clock.nanoTime();,if (clock != null ) long versionQueryStartTimeNanos = clock.nanoTime();
WatchmanFactory.java,ImmutableSet<Capability> capabilities = capabilitiesBuilder.build();,if (capabilitiesBuilder != null ) ImmutableSet<Capability> capabilities = capabilitiesBuilder.build();
CxxInferCapture.java,Predicate<SourcePath> depfilePredicate = preprocessorDelegate.getCoveredByDepfilePredicate();,if (preprocessorDelegate != null ) Predicate<SourcePath> depfilePredicate = preprocessorDelegate.getCoveredByDepfilePredicate();
PreprocessorDelegate.java,SourcePath headerPath = preprocessorFlags.getPrefixHeader().get();,if (preprocessorFlags != null ) SourcePath headerPath = preprocessorFlags.getPrefixHeader().get();
OnDiskMavenDownloader.java,DownloadEvent.Started started = DownloadEvent.started(target.toUri());,if (DownloadEvent != null ) DownloadEvent.Started started = DownloadEvent.started(target.toUri());
NativeModule.java,buckRuleFunctionRegistry = registryBuilder.build();,if (registryBuilder != null ) buckRuleFunctionRegistry = registryBuilder.build();
DistBuildState.java,CellProvider cellProvider = CellProvider.createForDistributedBuild(cellParams.build());,if (CellProvider != null ) CellProvider cellProvider = CellProvider.createForDistributedBuild(cellParams.build());
CellProvider.java,ImmutableSet<Path> allRoots = ImmutableSet.copyOf(cellPathMapping.values());,if (ImmutableSet != null ) ImmutableSet<Path> allRoots = ImmutableSet.copyOf(cellPathMapping.values());
CellProvider.java,Path normalizedCellPath = cellPath.toRealPath().normalize();,if (cellPath != null ) Path normalizedCellPath = cellPath.toRealPath().normalize();
CellProvider.java,Optional<EmbeddedCellBuckOutInfo> embeddedCellBuckOutInfo = Optional.empty();,if (Optional != null ) Optional<EmbeddedCellBuckOutInfo> embeddedCellBuckOutInfo = Optional.empty();
AbstractCell.java,Optional<String> pythonModuleSearchPath = parserConfig.getPythonModuleSearchPath();,if (parserConfig != null ) Optional<String> pythonModuleSearchPath = parserConfig.getPythonModuleSearchPath();
AbstractSdkEnvironment.java,androidSdkRoot = Optional.of(androidSdkLocation.getSdkRootPath());,if (Optional != null ) androidSdkRoot = Optional.of(androidSdkLocation.getSdkRootPath());
AbstractSdkEnvironment.java,androidSdkRoot = Optional.empty();,if (Optional != null ) androidSdkRoot = Optional.empty();
AbstractSdkEnvironment.java,androidNdkRoot = Optional.of(androidNdk.getNdkRootPath());,if (Optional != null ) androidNdkRoot = Optional.of(androidNdk.getNdkRootPath());
AbstractSdkEnvironment.java,androidNdkVersion = Optional.of(androidNdk.getNdkVersion());,if (Optional != null ) androidNdkVersion = Optional.of(androidNdk.getNdkVersion());
AbstractSdkEnvironment.java,androidNdkRoot = Optional.empty();,if (Optional != null ) androidNdkRoot = Optional.empty();
AbstractSdkEnvironment.java,androidNdkVersion = Optional.empty();,if (Optional != null ) androidNdkVersion = Optional.empty();
AndroidNdkFactory.java,androidNdk = Optional.empty();,if (Optional != null ) androidNdk = Optional.empty();
StackedDownloader.java,Path androidSdkRootPath = androidToolchain.getAndroidSdk().getSdkRootPath();,if (androidToolchain != null ) Path androidSdkRootPath = androidToolchain.getAndroidSdk().getSdkRootPath();
AbstractSdkEnvironment.java,androidSdkRoot = Optional.empty();,if (Optional != null ) androidSdkRoot = Optional.empty();
AppleTest.java,Optional<Path> testHostAppPath = Optional.empty();,if (Optional != null ) Optional<Path> testHostAppPath = Optional.empty();
AppleTestDescription.java,testHostInfo = Optional.empty();,if (Optional != null ) testHostInfo = Optional.empty();
TargetGraphHashing.java,HashCode targetRuleHashCode = node.getRawInputsHashCode();,if (node != null ) HashCode targetRuleHashCode = node.getRawInputsHashCode();
TargetGraphHashing.java,ProjectFilesystem cellFilesystem = node.getFilesystem();,if (node != null ) ProjectFilesystem cellFilesystem = node.getFilesystem();
TargetGraphHashing.java,HashCode dependencyHashCode = dependencyHashCodeTask.join();,if (dependencyHashCodeTask != null ) HashCode dependencyHashCode = dependencyHashCodeTask.join();
TargetGraphHashing.java,HashCode result = hasher.hash();,if (hasher != null ) HashCode result = hasher.hash();
BuildCommandErrorsIntegrationTest.java,KnownBuildRuleTypes.Builder buildRuleTypesBuilder = KnownBuildRuleTypes.builder();,if (KnownBuildRuleTypes != null ) KnownBuildRuleTypes.Builder buildRuleTypesBuilder = KnownBuildRuleTypes.builder();
InstallTriggerIntegrationTest.java,KnownBuildRuleTypes.Builder buildRuleTypesBuilder = KnownBuildRuleTypes.builder();,if (KnownBuildRuleTypes != null ) KnownBuildRuleTypes.Builder buildRuleTypesBuilder = KnownBuildRuleTypes.builder();
AbstractKnownBuildRuleTypes.java,FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();,if (cxxPlatformsProvider != null ) FlavorDomain<CxxPlatform> cxxPlatforms = cxxPlatformsProvider.getCxxPlatforms();
AbstractKnownBuildRuleTypes.java,CxxPlatform defaultCxxPlatform = cxxPlatformsProvider.getDefaultCxxPlatform();,if (cxxPlatformsProvider != null ) CxxPlatform defaultCxxPlatform = cxxPlatformsProvider.getDefaultCxxPlatform();
ExternalJavac.java,this.externalInput = Optional.empty();,if (Optional != null ) this.externalInput = Optional.empty();
OutOfProcessConnectionFactory.java,WorkerProcess workerProcess = processPool.borrowWorkerProcess();,if (processPool != null ) WorkerProcess workerProcess = processPool.borrowWorkerProcess();
OutOfProcessJarBackedJavac.java,OutOfProcessJavacConnectionInterface proxy = getConnection().getRemoteObjectProxy();,if (getConnection() != null ) OutOfProcessJavacConnectionInterface proxy = getConnection().getRemoteObjectProxy();
OutOfProcessJdkProvidedInMemoryJavac.java,OutOfProcessJavacConnectionInterface proxy = getConnection().getRemoteObjectProxy();,if (getConnection() != null ) OutOfProcessJavacConnectionInterface proxy = getConnection().getRemoteObjectProxy();
MainOutOfProcessJavac.java,this.receiver = new OutOfProcessInvocationReceiver(Console.createNullConsole());,if (OutOfProcessInvocationReceiver(Console != null ) this.receiver = new OutOfProcessInvocationReceiver(Console.createNullConsole());
MainOutOfProcessJavac.java,Method[] methods = OutOfProcessJavacConnectionInterface.class.getMethods();,if (OutOfProcessJavacConnectionInterface != null ) Method[] methods = OutOfProcessJavacConnectionInterface.class.getMethods();
OutOfProcessInvocationReceiver.java,CellPathResolver cellPathResolver = javacExecutionContext.getCellPathResolver();,if (javacExecutionContext != null ) CellPathResolver cellPathResolver = javacExecutionContext.getCellPathResolver();
OutOfProcessInvocationReceiver.java,int invocationId = nextInvocationId.getAndIncrement();,if (nextInvocationId != null ) int invocationId = nextInvocationId.getAndIncrement();
AppleCxxPlatformsProviderFactoryTest.java,PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();,if (BuckPluginManagerFactory != null ) PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();
AgentMain.java,input = connectionSocket.getInputStream();,if (connectionSocket != null ) input = connectionSocket.getInputStream();
AgentMain.java,Socket connectionSocket = serverSocket.accept();,if (serverSocket != null ) Socket connectionSocket = serverSocket.accept();
AgentMain.java,InputStream input = connectionSocket.getInputStream();,if (connectionSocket != null ) InputStream input = connectionSocket.getInputStream();
AgentMain.java,Socket connectionSocket = serverSocket.accept();,if (serverSocket != null ) Socket connectionSocket = serverSocket.accept();
AgentMain.java,InputStream input = connectionSocket.getInputStream();,if (connectionSocket != null ) InputStream input = connectionSocket.getInputStream();
RealAndroidDevice.java,Path destination = entry.getKey();,if (entry != null ) Path destination = entry.getKey();
RealAndroidDevice.java,Path source = entry.getValue();,if (entry != null ) Path source = entry.getValue();
CachingBuildRuleBuilder.java,HashCode hashCode = HashCode.fromString(ent.getValue());,if (HashCode != null ) HashCode hashCode = HashCode.fromString(ent.getValue());
Main.java,typeCoercerFactory = pair.getFirst();,if (pair != null ) typeCoercerFactory = pair.getFirst();
Main.java,parser = pair.getSecond();,if (pair != null ) parser = pair.getSecond();
Main.java,versionedTargetGraphCache = daemon.get().getVersionedTargetGraphCache();,if (daemon != null ) versionedTargetGraphCache = daemon.get().getVersionedTargetGraphCache();
Main.java,actionGraphCache = daemon.get().getActionGraphCache();,if (daemon != null ) actionGraphCache = daemon.get().getActionGraphCache();
Main.java,actionGraphCache = new ActionGraphCache(buckConfig.getMaxActionGraphCacheEntries());,if (ActionGraphCache(buckConfig != null ) actionGraphCache = new ActionGraphCache(buckConfig.getMaxActionGraphCacheEntries());
Watchman.java,Optional<WatchmanClient> watchmanClient = Optional.empty();,if (Optional != null ) Optional<WatchmanClient> watchmanClient = Optional.empty();
Watchman.java,long versionQueryStartTimeNanos = clock.nanoTime();,if (clock != null ) long versionQueryStartTimeNanos = clock.nanoTime();
Watchman.java,ImmutableSet<Capability> capabilities = capabilitiesBuilder.build();,if (capabilitiesBuilder != null ) ImmutableSet<Capability> capabilities = capabilitiesBuilder.build();
Watchman.java,Path absoluteRootPath = rootPath.toAbsolutePath();,if (rootPath != null ) Path absoluteRootPath = rootPath.toAbsolutePath();
Watchman.java,long projectWatchTimeNanos = clock.nanoTime();,if (clock != null ) long projectWatchTimeNanos = clock.nanoTime();
Watchman.java,Optional<String> clockId = Optional.empty();,if (Optional != null ) Optional<String> clockId = Optional.empty();
Watchman.java,long clockStartTimeNanos = clock.nanoTime();,if (clock != null ) long clockStartTimeNanos = clock.nanoTime();
Watchman.java,long startTimeNanos = clock.nanoTime();,if (clock != null ) long startTimeNanos = clock.nanoTime();
AbstractSdkEnvironment.java,appleToolchains = Optional.of(appleToolchainProvider.getAppleToolchains());,if (Optional != null ) appleToolchains = Optional.of(appleToolchainProvider.getAppleToolchains());
AppleCxxPlatforms.java,Optional<Path> appleDeveloperDirectory = appleDeveloperDirectorySupplier.get();,if (appleDeveloperDirectorySupplier != null ) Optional<Path> appleDeveloperDirectory = appleDeveloperDirectorySupplier.get();
DaemonLifecycleManagerTest.java,FakeProcessExecutor fakeProcessExecutor = new FakeProcessExecutor(fakeProcessesBuilder.build());,if (FakeProcessExecutor(fakeProcessesBuilder != null ) FakeProcessExecutor fakeProcessExecutor = new FakeProcessExecutor(fakeProcessesBuilder.build());
DefaultAndroidLegacyToolchainFactory.java,"AndroidBuckConfig androidBuckConfig = new AndroidBuckConfig(buckConfig, Platform.detect());","if (Platform != null ) AndroidBuckConfig androidBuckConfig = new AndroidBuckConfig(buckConfig, Platform.detect());"
DefaultAndroidToolchainFactory.java,"AndroidBuckConfig androidBuckConfig = new AndroidBuckConfig(buckConfig, Platform.detect());","if (Platform != null ) AndroidBuckConfig androidBuckConfig = new AndroidBuckConfig(buckConfig, Platform.detect());"
CxxPreprocessAndCompile.java,CxxPrecompiledHeader pch = precompiledHeaderRule.get();,if (precompiledHeaderRule != null ) CxxPrecompiledHeader pch = precompiledHeaderRule.get();
PreprocessorDelegate.java,SourcePath headerPath = preprocessorFlags.getPrefixHeader().get();,if (preprocessorFlags != null ) SourcePath headerPath = preprocessorFlags.getPrefixHeader().get();
CxxLibraryDescription.java,ImmutableList<StringWithMacros> extraLdFlags = extraLdFlagsBuilder.build();,if (extraLdFlagsBuilder != null ) ImmutableList<StringWithMacros> extraLdFlags = extraLdFlagsBuilder.build();
HaskellGhciDescription.java,ImmutableSet<BuildRule> deps = depsBuilder.build();,if (depsBuilder != null ) ImmutableSet<BuildRule> deps = depsBuilder.build();
HaskellGhciDescription.java,ImmutableSet<BuildRule> preloadDeps = preloadDepsBuilder.build();,if (preloadDepsBuilder != null ) ImmutableSet<BuildRule> preloadDeps = preloadDepsBuilder.build();
CoordinatorAndMinionModeRunnerIntegrationTest.java,int exitCode = jointRunner.runAndReturnExitCode();,if (jointRunner != null ) int exitCode = jointRunner.runAndReturnExitCode();
MinionModeRunnerIntegrationTest.java,int exitCode = minion.runAndReturnExitCode();,if (minion != null ) int exitCode = minion.runAndReturnExitCode();
MinionModeRunnerIntegrationTest.java,int exitCode = minion.runAndReturnExitCode();,if (minion != null ) int exitCode = minion.runAndReturnExitCode();
RemoteBuildModeRunnerTest.java,int actualExitCode = runner.runAndReturnExitCode();,if (runner != null ) int actualExitCode = runner.runAndReturnExitCode();
ExternalJavac.java,Optional<String> stderr = result.getStderr();,if (result != null ) Optional<String> stderr = result.getStderr();
ExternalJavac.java,"String output = stderr.orElse("""").trim();","if (stderr != null ) String output = stderr.orElse("""").trim();"
FakeBinaryBuildRuleBuilder.java,ImmutableSortedSet<BuildRule> deps = resolver.getAllRules(args.getDeps());,if (resolver != null ) ImmutableSortedSet<BuildRule> deps = resolver.getAllRules(args.getDeps());
HashedFileTool.java,Path path = this.path.get();,if (this != null ) Path path = this.path.get();
FakeAppleRuleDescriptions.java,filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();,if (FakeProjectFilesystem != null ) filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();
CxxPreprocessAndCompileTest.java,ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();,if (FakeProjectFilesystem != null ) ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();
CxxBinaryTest.java,BuildRuleParams linkParams = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) BuildRuleParams linkParams = TestBuildRuleParams.create();
CxxLinkTest.java,BuildRuleParams params = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) BuildRuleParams params = TestBuildRuleParams.create();
CxxLinkTest.java,BuildRuleParams params = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) BuildRuleParams params = TestBuildRuleParams.create();
HalideLibraryDescription.java,ImmutableList<StringWithMacros> preprocessorFlags = ImmutableList.of();,if (ImmutableList != null ) ImmutableList<StringWithMacros> preprocessorFlags = ImmutableList.of();
HalideLibraryDescription.java,ImmutableSortedSet<FrameworkPath> frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) ImmutableSortedSet<FrameworkPath> frameworks = ImmutableSortedSet.of();
HalideLibraryDescription.java,ImmutableSortedSet<FrameworkPath> libraries = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) ImmutableSortedSet<FrameworkPath> libraries = ImmutableSortedSet.of();
HalideLibraryDescription.java,Optional<SourcePath> prefixHeader = Optional.empty();,if (Optional != null ) Optional<SourcePath> prefixHeader = Optional.empty();
HalideLibraryDescription.java,Optional<SourcePath> precompiledHeader = Optional.empty();,if (Optional != null ) Optional<SourcePath> precompiledHeader = Optional.empty();
HaskellGhciRule.java,Path dest = symlinkDir.resolve(ent.getKey());,if (symlinkDir != null ) Path dest = symlinkDir.resolve(ent.getKey());
JsBundle.java,ImmutableSortedSet<Flavor> flavors = getBuildTarget().getFlavors();,if (getBuildTarget() != null ) ImmutableSortedSet<Flavor> flavors = getBuildTarget().getFlavors();
CustomJarOutputStreamTest.java,JarEntry manifestEntry = jar.getNextJarEntry();,if (jar != null ) JarEntry manifestEntry = jar.getNextJarEntry();
CustomJarOutputStreamTest.java,String expectedHash = hashingContents.hash().toString();,if (hashingContents != null ) String expectedHash = hashingContents.hash().toString();
MacroFinder.java,this.currentResultBuilder = MacroMatchResult.builder();,if (MacroMatchResult != null ) this.currentResultBuilder = MacroMatchResult.builder();
MacroFinder.java,String result = buffer.toString();,if (buffer != null ) String result = buffer.toString();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
CxxDescriptionEnhancer.java,CxxLinkOptions linkOptions = CxxLinkOptions.of(args.getThinLto());,if (CxxLinkOptions != null ) CxxLinkOptions linkOptions = CxxLinkOptions.of(args.getThinLto());
CxxLibraryDescription.java,CxxLinkOptions linkOptions = CxxLinkOptions.of(args.getThinLto());,if (CxxLinkOptions != null ) CxxLinkOptions linkOptions = CxxLinkOptions.of(args.getThinLto());
LocationMacroExpander.java,SourcePath output = rule.getSourcePathToOutput();,if (rule != null ) SourcePath output = rule.getSourcePathToOutput();
ChromeTraceBuildListener.java,String buckClasspath = BuckClasspath.getBuckClasspathFromEnvVarOrNull();,if (BuckClasspath != null ) String buckClasspath = BuckClasspath.getBuckClasspathFromEnvVarOrNull();
CachingBuildEngineTest.java,BuildRuleParams params = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) BuildRuleParams params = TestBuildRuleParams.create();
CachingBuildEngineTest.java,BuildRuleParams params = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) BuildRuleParams params = TestBuildRuleParams.create();
CachingBuildEngineTest.java,BuildRuleParams params = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) BuildRuleParams params = TestBuildRuleParams.create();
CachingBuildEngineTest.java,BuildRuleParams params = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) BuildRuleParams params = TestBuildRuleParams.create();
CachingBuildEngineTest.java,BuildRuleParams params = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) BuildRuleParams params = TestBuildRuleParams.create();
JsLibrary.java,final SourcePathResolver sourcePathResolver = context.getSourcePathResolver();,if (context != null ) final SourcePathResolver sourcePathResolver = context.getSourcePathResolver();
JsLibraryDescription.java,this.sourceFiles = builder.build();,if (builder != null ) this.sourceFiles = builder.build();
RustCompileUtils.java,deps = rule.getBuildDeps();,if (rule != null ) deps = rule.getBuildDeps();
BuildCommand.java,RuleKeyFieldLoader fieldLoader = new RuleKeyFieldLoader(params.getRuleKeyConfiguration());,if (RuleKeyFieldLoader(params != null ) RuleKeyFieldLoader fieldLoader = new RuleKeyFieldLoader(params.getRuleKeyConfiguration());
WriteAppModuleMetadataStep.java,ImmutableList<String> moduleMetadata = metadataLines.build();,if (metadataLines != null ) ImmutableList<String> moduleMetadata = metadataLines.build();
AdbHelper.java,int adbThreadCount = options.getAdbThreadCount();,if (options != null ) int adbThreadCount = options.getAdbThreadCount();
AdbHelper.java,adbThreadCount = devices.size();,if (devices != null ) adbThreadCount = devices.size();
ActionGraphCache.java,out = lastActionGraph.getSecond();,if (lastActionGraph != null ) out = lastActionGraph.getSecond();
JsLibrary.java,SourcePathResolver resolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver resolver = context.getSourcePathResolver();
JsLibraryDescriptionTest.java,JsTestScenario scenario = scenarioBuilder.library(target).build();,if (scenarioBuilder != null ) JsTestScenario scenario = scenarioBuilder.library(target).build();
JsLibraryDescriptionTest.java,JsTestScenario scenario = scenarioBuilder.library(withFlavors).build();,if (scenarioBuilder != null ) JsTestScenario scenario = scenarioBuilder.library(withFlavors).build();
JsLibraryDescriptionTest.java,JsTestScenario scenario = scenarioBuilder.library(target).build();,if (scenarioBuilder != null ) JsTestScenario scenario = scenarioBuilder.library(target).build();
PostEnterCanonicalizer.java,Name identifier = memberSelectTree.getIdentifier();,if (memberSelectTree != null ) Name identifier = memberSelectTree.getIdentifier();
NdkCxxPlatforms.java,NdkCxxPlatformCompiler.Type compilerType = targetConfiguration.getCompiler().getType();,if (targetConfiguration != null ) NdkCxxPlatformCompiler.Type compilerType = targetConfiguration.getCompiler().getType();
ExopackageDexLoader.java,File[] files = containingDirectory.listFiles();,if (containingDirectory != null ) File[] files = containingDirectory.listFiles();
PostEnterCanonicalizer.java,TypeElement parentElement = (TypeElement) parentType.asElement();,if (parentType != null ) TypeElement parentElement = (TypeElement) parentType.asElement();
JsLibrary.java,final SourcePathResolver sourcePathResolver = context.getSourcePathResolver();,if (context != null ) final SourcePathResolver sourcePathResolver = context.getSourcePathResolver();
JsLibraryDescription.java,this.sourceFiles = builder.build();,if (builder != null ) this.sourceFiles = builder.build();
HaskellGhciDescription.java,NativeLinkableInput nli = NativeLinkableInput.concat(nativeLinkableInputs.build());,if (NativeLinkableInput != null ) NativeLinkableInput nli = NativeLinkableInput.concat(nativeLinkableInputs.build());
NativeLinkables.java,BuildTarget depTarget = dep.getBuildTarget();,if (dep != null ) BuildTarget depTarget = dep.getBuildTarget();
NativeLinkables.java,BuildTarget target = ent.getKey();,if (ent != null ) BuildTarget target = ent.getKey();
NativeLinkables.java,NativeLinkable nativeLinkable = ent.getValue();,if (ent != null ) NativeLinkable nativeLinkable = ent.getValue();
NativeLinkables.java,libTargetString = lib.getValue().toString();,if (lib != null ) libTargetString = lib.getValue().toString();
NativeLinkables.java,prevTargetString = prev.toString();,if (prev != null ) prevTargetString = prev.toString();
DxStep.java,String stdErrOutput = stderr.toString();,if (stderr != null ) String stdErrOutput = stderr.toString();
DxStep.java,resourcesReferencedInCode = dexer.getReferencedResourceNames();,if (dexer != null ) resourcesReferencedInCode = dexer.getReferencedResourceNames();
BuildCommandErrorsIntegrationTest.java,KnownBuildRuleTypes.Builder buildRuleTypesBuilder = KnownBuildRuleTypes.builder();,if (KnownBuildRuleTypes != null ) KnownBuildRuleTypes.Builder buildRuleTypesBuilder = KnownBuildRuleTypes.builder();
InstallTriggerIntegrationTest.java,KnownBuildRuleTypes.Builder buildRuleTypesBuilder = KnownBuildRuleTypes.builder();,if (KnownBuildRuleTypes != null ) KnownBuildRuleTypes.Builder buildRuleTypesBuilder = KnownBuildRuleTypes.builder();
AbstractKnownBuildRuleTypes.java,this.descriptions = Maps.newConcurrentMap();,if (Maps != null ) this.descriptions = Maps.newConcurrentMap();
AbstractKnownBuildRuleTypes.java,this.types = Maps.newConcurrentMap();,if (Maps != null ) this.types = Maps.newConcurrentMap();
KnownBuildRuleTypesTest.java,KnownBuildRuleTypes buildRuleTypes = buildRuleTypesBuilder.build();,if (buildRuleTypesBuilder != null ) KnownBuildRuleTypes buildRuleTypes = buildRuleTypesBuilder.build();
RecordingProjectFileHashCache.java,int projectRootLength = projectFilesystem.getRootPath().getNameCount();,if (projectFilesystem != null ) int projectRootLength = projectFilesystem.getRootPath().getNameCount();
NewNativeTargetProjectMutator.java,CoreReactNativeLibraryArg args = (CoreReactNativeLibraryArg) targetNode.getConstructorArg();,if (targetNode != null ) CoreReactNativeLibraryArg args = (CoreReactNativeLibraryArg) targetNode.getConstructorArg();
NewNativeTargetProjectMutator.java,ProjectFilesystem filesystem = targetNode.getFilesystem();,if (targetNode != null ) ProjectFilesystem filesystem = targetNode.getFilesystem();
NewNativeTargetProjectMutator.java,BuildTarget buildTarget = targetNode.getBuildTarget();,if (targetNode != null ) BuildTarget buildTarget = targetNode.getBuildTarget();
NewNativeTargetProjectMutator.java,CoreReactNativeLibraryArg args = (CoreReactNativeLibraryArg) targetNode.getConstructorArg();,if (targetNode != null ) CoreReactNativeLibraryArg args = (CoreReactNativeLibraryArg) targetNode.getConstructorArg();
NewNativeTargetProjectMutator.java,ProjectFilesystem filesystem = targetNode.getFilesystem();,if (targetNode != null ) ProjectFilesystem filesystem = targetNode.getFilesystem();
NewNativeTargetProjectMutator.java,BuildTarget buildTarget = targetNode.getBuildTarget();,if (targetNode != null ) BuildTarget buildTarget = targetNode.getBuildTarget();
IosReactNativeLibraryDescription.java,BuildTarget buildTarget = targetNode.getBuildTarget();,if (targetNode != null ) BuildTarget buildTarget = targetNode.getBuildTarget();
NewNativeTargetProjectMutatorTest.java,String shellScript = phase.getShellScript();,if (phase != null ) String shellScript = phase.getShellScript();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
AndroidReactNativeLibraryIntegrationTest.java,filesystem = TestProjectFilesystems.createProjectFilesystem(workspace.getDestPath());,if (TestProjectFilesystems != null ) filesystem = TestProjectFilesystems.createProjectFilesystem(workspace.getDestPath());
AndroidReactNativeLibraryIntegrationTest.java,BuckBuildLog buildLog = workspace.getBuildLog();,if (workspace != null ) BuckBuildLog buildLog = workspace.getBuildLog();
AndroidReactNativeLibraryIntegrationTest.java,BuckBuildLog buildLog = workspace.getBuildLog();,if (workspace != null ) BuckBuildLog buildLog = workspace.getBuildLog();
AndroidReactNativeLibraryIntegrationTest.java,BuckBuildLog buildLog = workspace.getBuildLog();,if (workspace != null ) BuckBuildLog buildLog = workspace.getBuildLog();
AndroidReactNativeLibraryIntegrationTest.java,BuckBuildLog buildLog = workspace.getBuildLog();,if (workspace != null ) BuckBuildLog buildLog = workspace.getBuildLog();
AndroidReactNativeLibraryIntegrationTest.java,BuckBuildLog buildLog = workspace.getBuildLog();,if (workspace != null ) BuckBuildLog buildLog = workspace.getBuildLog();
IosReactNativeLibraryIntegrationTest.java,filesystem = TestProjectFilesystems.createProjectFilesystem(workspace.getDestPath());,if (TestProjectFilesystems != null ) filesystem = TestProjectFilesystems.createProjectFilesystem(workspace.getDestPath());
TargetsCommand.java,Optional<DefaultRuleKeyFactory> ruleKeyFactory = Optional.empty();,if (Optional != null ) Optional<DefaultRuleKeyFactory> ruleKeyFactory = Optional.empty();
TargetsCommand.java,TargetResult.Builder showOptionsBuilder = resultBuilders.getOrCreate(r.getBuildTarget());,if (resultBuilders != null ) TargetResult.Builder showOptionsBuilder = resultBuilders.getOrCreate(r.getBuildTarget());
CachingBuildEngine.java,ListenableFuture<RuleKey> fromOurCache = ruleKeys.get(rule.getBuildTarget());,if (ruleKeys != null ) ListenableFuture<RuleKey> fromOurCache = ruleKeys.get(rule.getBuildTarget());
BuildTargetPatternParser.java,cellPath = cellNames.getCellPath(Optional.empty());,if (cellNames != null ) cellPath = cellNames.getCellPath(Optional.empty());
CommandLineTargetNodeSpecParserTest.java,Path cellPath = cellRoots.getCellPath(Optional.empty());,if (cellRoots != null ) Path cellPath = cellRoots.getCellPath(Optional.empty());
CommandLineTargetNodeSpecParserTest.java,Path cellPath = cellRoots.getCellPath(Optional.empty());,if (cellRoots != null ) Path cellPath = cellRoots.getCellPath(Optional.empty());
DebugInfo.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
LogRecord.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
LogRecord.java,struct.name = iprot.readString();,if (iprot != null ) struct.name = iprot.readString();
LogRecord.java,struct.name = iprot.readString();,if (iprot != null ) struct.name = iprot.readString();
EventSender.java,Optional<String> lastLine = Optional.empty();,if (Optional != null ) Optional<String> lastLine = Optional.empty();
XCodeProjectCommandHelper.java,CxxPlatform defaultCxxPlatform = cell.getKnownBuildRuleTypes().getDefaultCxxPlatforms();,if (cell != null ) CxxPlatform defaultCxxPlatform = cell.getKnownBuildRuleTypes().getDefaultCxxPlatforms();
DaemonLifecycleManager.java,"daemon = new Daemon(rootCell, Optional.empty());","if (Optional != null ) daemon = new Daemon(rootCell, Optional.empty());"
ProjectWorkspace.java,PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();,if (BuckPluginManagerFactory != null ) PluginManager pluginManager = BuckPluginManagerFactory.createPluginManager();
Build.java,Throwable thrown = result.getFailure();,if (result != null ) Throwable thrown = result.getFailure();
CachingBuildRuleBuilder.java,BuildRuleSuccessType success = Preconditions.checkNotNull(input.getSuccess());,if (Preconditions != null ) BuildRuleSuccessType success = Preconditions.checkNotNull(input.getSuccess());
CachingBuildRuleBuilder.java,BuildRuleSuccessType success = Preconditions.checkNotNull(input.getSuccess());,if (Preconditions != null ) BuildRuleSuccessType success = Preconditions.checkNotNull(input.getSuccess());
InnerClassesTable.java,TypeElement element = (TypeElement) t.asElement();,if (t != null ) TypeElement element = (TypeElement) t.asElement();
Manifest.java,String header = input.readUTF();,if (input != null ) String header = input.readUTF();
Manifest.java,int headerIndex = input.readInt();,if (input != null ) int headerIndex = input.readInt();
Manifest.java,HashCode headerHash = HashCode.fromString(input.readUTF());,if (HashCode != null ) HashCode headerHash = HashCode.fromString(input.readUTF());
Manifest.java,String header = headers.get(hashEntry.getFirst());,if (headers != null ) String header = headers.get(hashEntry.getFirst());
Manifest.java,HashCode headerHash = hashEntry.getSecond();,if (hashEntry != null ) HashCode headerHash = hashEntry.getSecond();
Manifest.java,String header = headers.get(hashEntry.getFirst());,if (headers != null ) String header = headers.get(hashEntry.getFirst());
Manifest.java,HashCode headerHash = hashEntry.getSecond();,if (hashEntry != null ) HashCode headerHash = hashEntry.getSecond();
CxxBinaryDescription.java,"Set<Flavor> platformFlavors = Sets.intersection(flavors, cxxPlatforms.getFlavors());","if (cxxPlatforms != null ) Set<Flavor> platformFlavors = Sets.intersection(flavors, cxxPlatforms.getFlavors());"
DistBuildSlaveExecutor.java,Optional<String> minionQueue = args.getDistBuildConfig().getMinionQueue();,if (args != null ) Optional<String> minionQueue = args.getDistBuildConfig().getMinionQueue();
CoordinatorAndMinionModeRunnerIntegrationTest.java,int port = ThriftCoordinatorServerIntegrationTest.findRandomOpenPortOnAllLocalInterfaces();,if (ThriftCoordinatorServerIntegrationTest != null ) int port = ThriftCoordinatorServerIntegrationTest.findRandomOpenPortOnAllLocalInterfaces();
FakeFrontendHttpServer.java,this.port = DistBuildSlaveExecutor.getFreePortForCoordinator();,if (DistBuildSlaveExecutor != null ) this.port = DistBuildSlaveExecutor.getFreePortForCoordinator();
SkylarkFilesystemTest.java,projectFilesystem = FakeProjectFilesystem.createRealTempFilesystem();,if (FakeProjectFilesystem != null ) projectFilesystem = FakeProjectFilesystem.createRealTempFilesystem();
SkylarkFilesystemTest.java,projectFilesystem = FakeProjectFilesystem.createRealTempFilesystem();,if (FakeProjectFilesystem != null ) projectFilesystem = FakeProjectFilesystem.createRealTempFilesystem();
SkylarkFilesystemTest.java,projectFilesystem = FakeProjectFilesystem.createRealTempFilesystem();,if (FakeProjectFilesystem != null ) projectFilesystem = FakeProjectFilesystem.createRealTempFilesystem();
GlobTest.java,root = fileSystem.getRootDirectory();,if (fileSystem != null ) root = fileSystem.getRootDirectory();
ReadConfigTest.java,root = fileSystem.getRootDirectory();,if (fileSystem != null ) root = fileSystem.getRootDirectory();
SkylarkProjectBuildFileParser.java,Environment extensionEnv = envBuilder.build();,if (envBuilder != null ) Environment extensionEnv = envBuilder.build();
SimpleGlobberTest.java,root = fileSystem.getRootDirectory();,if (fileSystem != null ) root = fileSystem.getRootDirectory();
RuleKeyDiagnostics.java,RuleKeyAppendable appendable = appendableQueue.remove();,if (appendableQueue != null ) RuleKeyAppendable appendable = appendableQueue.remove();
PythonDslProjectBuildFileParser.java,projectBuildFileParseEventStarted = new ProjectBuildFileParseEvents.Started();,if (ProjectBuildFileParseEvents != null ) projectBuildFileParseEventStarted = new ProjectBuildFileParseEvents.Started();
BuildContextTest.java,BuildContext.Builder builder = BuildContext.builder();,if (BuildContext != null ) BuildContext.Builder builder = BuildContext.builder();
BuildContextTest.java,BuildContext context = builder.build();,if (builder != null ) BuildContext context = builder.build();
BuildContextTest.java,Supplier<AndroidPlatformTarget> supplier = context.getAndroidPlatformTargetSupplier();,if (context != null ) Supplier<AndroidPlatformTarget> supplier = context.getAndroidPlatformTargetSupplier();
Dot.java,nodesToFilter = Optional.absent();,if (Optional != null ) nodesToFilter = Optional.absent();
PostEnterCanonicalizer.java,TypeElement parentElement = (TypeElement) parentType.asElement();,if (parentType != null ) TypeElement parentElement = (TypeElement) parentType.asElement();
DistBuildSlaveExecutor.java,BuilderArgs builderArgs = args.createBuilderArgs();,if (args != null ) BuilderArgs builderArgs = args.createBuilderArgs();
AdbHelper.java,adb = createAdb(contextSupplier.get());,if (createAdb(contextSupplier != null ) adb = createAdb(contextSupplier.get());
ZipalignStep.java,AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget();,if (context != null ) AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget();
NonPreDexedDexBuildable.java,AndroidPlatformTarget platformTarget = context.getAndroidPlatformTarget();,if (context != null ) AndroidPlatformTarget platformTarget = context.getAndroidPlatformTarget();
ProGuardObfuscateStep.java,AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget();,if (context != null ) AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget();
ProGuardObfuscateStep.java,AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget();,if (context != null ) AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget();
Genrule.java,android = context.getAndroidPlatformTarget();,if (context != null ) android = context.getAndroidPlatformTarget();
JsBundleGenruleDescriptionTest.java,ExecutionContext context = TestExecutionContext.newBuilder().build();,if (TestExecutionContext != null ) ExecutionContext context = TestExecutionContext.newBuilder().build();
JsBundleGenruleDescriptionTest.java,ExecutionContext context = TestExecutionContext.newBuilder().build();,if (TestExecutionContext != null ) ExecutionContext context = TestExecutionContext.newBuilder().build();
DxStep.java,AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget();,if (context != null ) AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget();
Aapt2Link.java,AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget();,if (context != null ) AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget();
AaptStep.java,AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget();,if (context != null ) AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget();
AidlStep.java,AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget();,if (context != null ) AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget();
Aapt2Compile.java,AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget();,if (context != null ) AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget();
DefaultAndroidToolchainFactory.java,"AndroidBuckConfig androidBuckConfig = new AndroidBuckConfig(buckConfig, Platform.detect());","if (Platform != null ) AndroidBuckConfig androidBuckConfig = new AndroidBuckConfig(buckConfig, Platform.detect());"
AndroidBinaryIntegrationTest.java,unstrippedPath = line.trim();,if (line != null ) unstrippedPath = line.trim();
AndroidBinaryInstallGraphEnhancer.java,ExopackageInfo exopackageInfo = apkInfo.getExopackageInfo().get();,if (apkInfo != null ) ExopackageInfo exopackageInfo = apkInfo.getExopackageInfo().get();
ExopackageResourcesInstaller.java,SourcePathResolver resolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver resolver = buildContext.getSourcePathResolver();
AndroidBinary.java,this.manifestPath = enhancementResult.getAndroidManifestPath();,if (enhancementResult != null ) this.manifestPath = enhancementResult.getAndroidManifestPath();
TreeBackedTypeResolutionSimulatorTest.java,ImportTree importTree = (ImportTree) importTreePath.getLeaf();,if (importTreePath != null ) ImportTree importTree = (ImportTree) importTreePath.getLeaf();
TreeBackedTypeResolutionSimulatorTest.java,MemberSelectTree importedExpression = (MemberSelectTree) importTree.getQualifiedIdentifier();,if (importTree != null ) MemberSelectTree importedExpression = (MemberSelectTree) importTree.getQualifiedIdentifier();
TreeBackedTypeResolutionSimulatorTest.java,Name simpleName = importedExpression.getIdentifier();,if (importedExpression != null ) Name simpleName = importedExpression.getIdentifier();
TreeBackedTypeResolutionSimulatorTest.java,ExpressionTree containingElementExpression = importedExpression.getExpression();,if (importedExpression != null ) ExpressionTree containingElementExpression = importedExpression.getExpression();
SwiftLibraryIntegrationTest.java,Arg objArg = buildRule.getFileListLinkArg();,if (buildRule != null ) Arg objArg = buildRule.getFileListLinkArg();
AdbHelper.java,deviceCount = getDevices(true).size();,if (getDevices(true) != null ) deviceCount = getDevices(true).size();
AdbHelper.java,int adbThreadCount = options.getAdbThreadCount();,if (options != null ) int adbThreadCount = options.getAdbThreadCount();
AdbHelper.java,int adbThreadCount = options.getAdbThreadCount();,if (options != null ) int adbThreadCount = options.getAdbThreadCount();
AdbHelper.java,adbThreadCount = devices.size();,if (devices != null ) adbThreadCount = devices.size();
CachingBuildRuleBuilder.java,HashCode hashCode = HashCode.fromString(ent.getValue());,if (HashCode != null ) HashCode hashCode = HashCode.fromString(ent.getValue());
CachingBuildRuleBuilder.java,Path path = filesystem.getPath(ent.getKey());,if (filesystem != null ) Path path = filesystem.getPath(ent.getKey());
CachingBuildRuleBuilder.java,HashCode cachedHashCode = HashCode.fromString(ent.getValue());,if (HashCode != null ) HashCode cachedHashCode = HashCode.fromString(ent.getValue());
CachingBuildRuleBuilder.java,boolean clearExistingMetadata = success.shouldClearAndOverwriteMetadataOnDisk();,if (success != null ) boolean clearExistingMetadata = success.shouldClearAndOverwriteMetadataOnDisk();
CachingBuildRuleBuilder.java,HashCode hashCode = HashCode.fromString(ent.getValue());,if (HashCode != null ) HashCode hashCode = HashCode.fromString(ent.getValue());
CachingBuildRuleBuilder.java,BuildRuleSuccessType success = Preconditions.checkNotNull(input.getSuccess());,if (Preconditions != null ) BuildRuleSuccessType success = Preconditions.checkNotNull(input.getSuccess());
CachingBuildRuleBuilder.java,outputSize = Optional.of(buildInfoRecorder.getOutputSize());,if (Optional != null ) outputSize = Optional.of(buildInfoRecorder.getOutputSize());
Main.java,Optional<ParsedFile> originalFile = Optional.empty();,if (Optional != null ) Optional<ParsedFile> originalFile = Optional.empty();
Main.java,Optional<ParsedFile> newFile = Optional.empty();,if (Optional != null ) Optional<ParsedFile> newFile = Optional.empty();
RuleKeyFileParser.java,int length = lengthBuf.getInt();,if (lengthBuf != null ) int length = lengthBuf.getInt();
RuleKeyFileParser.java,TDeserializer deserializer = new TDeserializer(new TCompactProtocol.Factory());,if (TCompactProtocol != null ) TDeserializer deserializer = new TDeserializer(new TCompactProtocol.Factory());
RealAndroidDevice.java,String targetFileName = targetDevicePath.toString();,if (targetDevicePath != null ) String targetFileName = targetDevicePath.toString();
DistBuildSlaveExecutor.java,targetGraph = targetGraphAndBuildTargets.getTargetGraph();,if (targetGraphAndBuildTargets != null ) targetGraph = targetGraphAndBuildTargets.getTargetGraph();
DistBuildSlaveExecutor.java,Cell rootCell = args.getState().getRootCell();,if (args != null ) Cell rootCell = args.getState().getRootCell();
DistBuildSlaveExecutor.java,DistBuildConfig remoteConfig = new DistBuildConfig(args.getRemoteRootCellConfig());,if (DistBuildConfig(args != null ) DistBuildConfig remoteConfig = new DistBuildConfig(args.getRemoteRootCellConfig());
InterfaceValidator.java,TypeElement typeElement = (TypeElement) declaredType.asElement();,if (declaredType != null ) TypeElement typeElement = (TypeElement) declaredType.asElement();
InterfaceValidator.java,walker = walker.getEnclosingElement();,if (walker != null ) walker = walker.getEnclosingElement();
InterfaceValidator.java,Name canonicalSimpleName = canonicalTypeElement.getSimpleName();,if (canonicalTypeElement != null ) Name canonicalSimpleName = canonicalTypeElement.getSimpleName();
InterfaceValidator.java,Name referencedSimpleName = node.getIdentifier();,if (node != null ) Name referencedSimpleName = node.getIdentifier();
InterfaceValidator.java,return enclosingPackage == referencedTypeElement.getEnclosingElement();,if (referencedTypeElement != null ) return enclosingPackage == referencedTypeElement.getEnclosingElement();
InterfaceValidator.java,IdentifierTree identifierTree = (IdentifierTree) referencingPath.getLeaf();,if (referencingPath != null ) IdentifierTree identifierTree = (IdentifierTree) referencingPath.getLeaf();
InterfaceValidator.java,walker = (QualifiedNameable) walker.getEnclosingElement();,if (walker != null ) walker = (QualifiedNameable) walker.getEnclosingElement();
InterfaceValidator.java,Name canonicalSimpleName = canonicalTypeElement.getSimpleName();,if (canonicalTypeElement != null ) Name canonicalSimpleName = canonicalTypeElement.getSimpleName();
InterfaceValidator.java,Name referencedSimpleName = node.getIdentifier();,if (node != null ) Name referencedSimpleName = node.getIdentifier();
InterfaceScanner.java,MemberSelectTree typeNameTree = (MemberSelectTree) node.getQualifiedIdentifier();,if (node != null ) MemberSelectTree typeNameTree = (MemberSelectTree) node.getQualifiedIdentifier();
TargetsCommand.java,TargetResult targetResult = targetResults.get(targetNode.getBuildTarget());,if (targetResults != null ) TargetResult targetResult = targetResults.get(targetNode.getBuildTarget());
TemplateHandler.java,SoyFileSet.Builder builder = SoyFileSet.builder();,if (SoyFileSet != null ) SoyFileSet.Builder builder = SoyFileSet.builder();
BuildRulePipelinesRunner.java,this.pipelineState = pipeline.getState();,if (pipeline != null ) this.pipelineState = pipeline.getState();
MinionLocalBuildStateTracker.java,availableWorkUnitCapacity -= workUnitsToBuild.size();,if (workUnitsToBuild != null ) availableWorkUnitCapacity -= workUnitsToBuild.size();
SkylarkProjectBuildFileParser.java,rawRuleBuilder = ImmutableList.builder();,if (ImmutableList != null ) rawRuleBuilder = ImmutableList.builder();
SkylarkProjectBuildFileParser.java,loadedPathsBuilder = ImmutableSortedSet.naturalOrder();,if (ImmutableSortedSet != null ) loadedPathsBuilder = ImmutableSortedSet.naturalOrder();
SkylarkProjectBuildFileParser.java,buckRuleFunctionRegistry = registryBuilder.build();,if (registryBuilder != null ) buckRuleFunctionRegistry = registryBuilder.build();
JavacToJarStepFactory.java,CompilerParameters parameters = pipeline.getCompilerParameters();,if (pipeline != null ) CompilerParameters parameters = pipeline.getCompilerParameters();
ProjectView.java,"Path tail = oldPath.subpath(assetsIndex, oldPath.getNameCount());","if (oldPath != null ) Path tail = oldPath.subpath(assetsIndex, oldPath.getNameCount());"
LocalBuilder.java,this.distBuildConfig = args.getRemoteRootCellConfig();,if (args != null ) this.distBuildConfig = args.getRemoteRootCellConfig();
LocalBuilder.java,final DefaultProcessExecutor processExecutor = new DefaultProcessExecutor(args.getConsole());,if (DefaultProcessExecutor(args != null ) final DefaultProcessExecutor processExecutor = new DefaultProcessExecutor(args.getConsole());
NumThreadsIntegrationTest.java,int numThreads = Runtime.getRuntime().availableProcessors();,if (Runtime != null ) int numThreads = Runtime.getRuntime().availableProcessors();
MinionModeRunner.java,List<String> targetsToBuild = Lists.newArrayList();,if (Lists != null ) List<String> targetsToBuild = Lists.newArrayList();
MinionModeRunner.java,List<String> buildTargetsInWorkUnit = workUnit.getBuildTargets();,if (workUnit != null ) List<String> buildTargetsInWorkUnit = workUnit.getBuildTargets();
Build.java,List<BuildResult> buildResults = buildFuture.get();,if (buildFuture != null ) List<BuildResult> buildResults = buildFuture.get();
MinionModeRunner.java,List<String> targetsToBuild = Lists.newArrayList();,if (Lists != null ) List<String> targetsToBuild = Lists.newArrayList();
MinionModeRunner.java,targetsToBuild = Lists.newArrayList();,if (Lists != null ) targetsToBuild = Lists.newArrayList();
InterfaceValidator.java,return enclosingPackage == referencedTypeElement.getEnclosingElement();,if (referencedTypeElement != null ) return enclosingPackage == referencedTypeElement.getEnclosingElement();
InterfaceValidator.java,walker = (QualifiedNameable) walker.getEnclosingElement();,if (walker != null ) walker = (QualifiedNameable) walker.getEnclosingElement();
InterfaceValidator.java,ClassTree classTree = (ClassTree) path.getLeaf();,if (path != null ) ClassTree classTree = (ClassTree) path.getLeaf();
InterfaceValidator.java,Tree extendsClause = classTree.getExtendsClause();,if (classTree != null ) Tree extendsClause = classTree.getExtendsClause();
InterfaceValidator.java,TypeElement typeElement = (TypeElement) declaredType.asElement();,if (declaredType != null ) TypeElement typeElement = (TypeElement) declaredType.asElement();
InterfaceValidator.java,TypeElement constantEnclosingType = (TypeElement) constant.getEnclosingElement();,if (constant != null ) TypeElement constantEnclosingType = (TypeElement) constant.getEnclosingElement();
InterfaceValidator.java,TypeElement typeElement = (TypeElement) declaredType.asElement();,if (declaredType != null ) TypeElement typeElement = (TypeElement) declaredType.asElement();
InterfaceValidator.java,return enclosingPackage == referencedTypeElement.getEnclosingElement();,if (referencedTypeElement != null ) return enclosingPackage == referencedTypeElement.getEnclosingElement();
InterfaceValidator.java,walker = (QualifiedNameable) walker.getEnclosingElement();,if (walker != null ) walker = (QualifiedNameable) walker.getEnclosingElement();
InterfaceValidator.java,walker = walker.getEnclosingElement();,if (walker != null ) walker = walker.getEnclosingElement();
InterfaceScanner.java,"TreePath enclosingTypePath = new TreePath(importedTypePath, typeNameTree.getExpression());","if (typeNameTree != null ) TreePath enclosingTypePath = new TreePath(importedTypePath, typeNameTree.getExpression());"
ClassUsageTracker.java,result = resultBuilder.build();,if (resultBuilder != null ) result = resultBuilder.build();
JavacStep.java,declaredDepsBuildResult = invocation.buildSourceAbiJar();,if (invocation != null ) declaredDepsBuildResult = invocation.buildSourceAbiJar();
JavacStep.java,declaredDepsBuildResult = invocation.buildClasses();,if (invocation != null ) declaredDepsBuildResult = invocation.buildClasses();
JavacStep.java,returnedStderr = Optional.empty();,if (Optional != null ) returnedStderr = Optional.empty();
JavacStep.java,Optional<Path> manifestFile = libraryJarParameters.getManifestFile();,if (libraryJarParameters != null ) Optional<Path> manifestFile = libraryJarParameters.getManifestFile();
JavacStep.java,ImmutableSortedSet<Path> entriesToJar = libraryJarParameters.getEntriesToJar();,if (libraryJarParameters != null ) ImmutableSortedSet<Path> entriesToJar = libraryJarParameters.getEntriesToJar();
GenStringSourceMapStep.java,String stringsPathName = stringsPath.toString();,if (stringsPath != null ) String stringsPathName = stringsPath.toString();
Jsr199JavacInvocation.java,Diagnostic.Kind kind = diagnostic.getKind();,if (diagnostic != null ) Diagnostic.Kind kind = diagnostic.getKind();
Jsr199JavacInvocation.java,String pathString = path.toString();,if (path != null ) String pathString = path.toString();
Jsr199JavacInvocation.java,ZipEntry entry = entries.nextElement();,if (entries != null ) ZipEntry entry = entries.nextElement();
SimpleConsoleEventBusListener.java,long now = System.currentTimeMillis();,if (System != null ) long now = System.currentTimeMillis();
SimpleConsoleEventBusListener.java,this.startTime = startEvent.getTimestamp();,if (startEvent != null ) this.startTime = startEvent.getTimestamp();
ArtifactCaches.java,ArtifactCacheBuckConfig.MultiFetchType multiFetchType = buckConfig.getMultiFetchType();,if (buckConfig != null ) ArtifactCacheBuckConfig.MultiFetchType multiFetchType = buckConfig.getMultiFetchType();
ClassUsageFileWriterSerializerTest.java,NoOpClassUsageFileWriter instance = NoOpClassUsageFileWriter.instance();,if (NoOpClassUsageFileWriter != null ) NoOpClassUsageFileWriter instance = NoOpClassUsageFileWriter.instance();
JavacExecutionContextSerializerTest.java,NoOpClassUsageFileWriter classUsageFileWriter = NoOpClassUsageFileWriter.instance();,if (NoOpClassUsageFileWriter != null ) NoOpClassUsageFileWriter classUsageFileWriter = NoOpClassUsageFileWriter.instance();
JavacStep.java,JarParameters jarParameters = this.jarParameters.get();,if (this != null ) JarParameters jarParameters = this.jarParameters.get();
JavacStep.java,Optional<Path> manifestFile = jarParameters.getManifestFile();,if (jarParameters != null ) Optional<Path> manifestFile = jarParameters.getManifestFile();
JavacStep.java,ImmutableSortedSet<Path> entriesToJar = jarParameters.getEntriesToJar();,if (jarParameters != null ) ImmutableSortedSet<Path> entriesToJar = jarParameters.getEntriesToJar();
JavacExecutionContextSerializer.java,Optional<JarParameters> directToJarParameters = Optional.empty();,if (Optional != null ) Optional<JarParameters> directToJarParameters = Optional.empty();
DefaultAndroidDirectoryResolver.java,final Path sdkDir = sdk.get();,if (sdk != null ) final Path sdkDir = sdk.get();
DefaultAndroidDirectoryResolver.java,Optional<Path> repository = Optional.empty();,if (Optional != null ) Optional<Path> repository = Optional.empty();
DefaultAndroidDirectoryResolver.java,Optional<Path> directory = Optional.empty();,if (Optional != null ) Optional<Path> directory = Optional.empty();
AppleDescriptions.java,BuildTarget baseTarget = strippedBinaryRule.getBuildTarget();,if (strippedBinaryRule != null ) BuildTarget baseTarget = strippedBinaryRule.getBuildTarget();
DistBuildIntegrationTest.java,this.port = ThriftCoordinatorServerIntegrationTest.findRandomOpenPortOnAllLocalInterfaces();,if (ThriftCoordinatorServerIntegrationTest != null ) this.port = ThriftCoordinatorServerIntegrationTest.findRandomOpenPortOnAllLocalInterfaces();
DistBuildIntegrationTest.java,byte[] requestBytes = ByteStreams.toByteArray(httpExchange.getRequestBody());,if (ByteStreams != null ) byte[] requestBytes = ByteStreams.toByteArray(httpExchange.getRequestBody());
MultiSourceContentsProvider.java,Stopwatch remoteMaterializationStopwatch = Stopwatch.createStarted();,if (Stopwatch != null ) Stopwatch remoteMaterializationStopwatch = Stopwatch.createStarted();
InferBuckConfig.java,Optional<String> stdout = result.getStdout();,if (result != null ) Optional<String> stdout = result.getStdout();
InferBuckConfig.java,Optional<String> stderr = result.getStderr();,if (result != null ) Optional<String> stderr = result.getStderr();
TargetsCommand.java,ShowOptions showOptions = entry.getValue();,if (entry != null ) ShowOptions showOptions = entry.getValue();
TargetsCommand.java,ShowOptions showOptions = showRulesResult.get(targetNode.getBuildTarget());,if (showRulesResult != null ) ShowOptions showOptions = showRulesResult.get(targetNode.getBuildTarget());
TargetsCommand.java,String output = stringWriter.getBuffer().toString();,if (stringWriter != null ) String output = stringWriter.getBuffer().toString();
TargetsCommand.java,Optional<ActionGraph> actionGraph = Optional.empty();,if (Optional != null ) Optional<ActionGraph> actionGraph = Optional.empty();
TargetsCommand.java,Optional<BuildRuleResolver> buildRuleResolver = Optional.empty();,if (Optional != null ) Optional<BuildRuleResolver> buildRuleResolver = Optional.empty();
TargetsCommand.java,ShowOptions.Builder showOptionsBuilder = entry.getValue();,if (entry != null ) ShowOptions.Builder showOptionsBuilder = entry.getValue();
TargetsCommand.java,ShowOptions.Builder builder = ShowOptions.builder();,if (ShowOptions != null ) ShowOptions.Builder builder = ShowOptions.builder();
ChromeTraceBuildListener.java,ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();,if (ManagementFactory != null ) ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();
InferBuckConfig.java,"String versionOutput = stderr.orElse("""").trim();","if (stderr != null ) String versionOutput = stderr.orElse("""").trim();"
LocalBuilderImpl.java,final DefaultProcessExecutor processExecutor = new DefaultProcessExecutor(args.getConsole());,if (DefaultProcessExecutor(args != null ) final DefaultProcessExecutor processExecutor = new DefaultProcessExecutor(args.getConsole());
DistBuildSlaveExecutor.java,this.distBuildConfig = args.getRemoteRootCellConfig();,if (args != null ) this.distBuildConfig = args.getRemoteRootCellConfig();
DistBuildSlaveExecutor.java,final DefaultProcessExecutor processExecutor = new DefaultProcessExecutor(args.getConsole());,if (DefaultProcessExecutor(args != null ) final DefaultProcessExecutor processExecutor = new DefaultProcessExecutor(args.getConsole());
CoordinatorService.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
CoordinatorService.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
FinishedBuildingRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
FinishedBuildingRequest.java,struct.minionId = iprot.readString();,if (iprot != null ) struct.minionId = iprot.readString();
FinishedBuildingRequest.java,struct.minionId = iprot.readString();,if (iprot != null ) struct.minionId = iprot.readString();
FinishedBuildingResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
FinishedBuildingResponse.java,struct.continueBuilding = iprot.readBool();,if (iprot != null ) struct.continueBuilding = iprot.readBool();
FinishedBuildingResponse.java,struct.continueBuilding = iprot.readBool();,if (iprot != null ) struct.continueBuilding = iprot.readBool();
GetTargetsToBuildRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
GetTargetsToBuildRequest.java,struct.minionId = iprot.readString();,if (iprot != null ) struct.minionId = iprot.readString();
GetTargetsToBuildRequest.java,struct.minionId = iprot.readString();,if (iprot != null ) struct.minionId = iprot.readString();
GetTargetsToBuildResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
MinionModeRunner.java,Optional<Integer> buildExitCode = Optional.empty();,if (Optional != null ) Optional<Integer> buildExitCode = Optional.empty();
MinionModeRunner.java,List<String> targetsToBuild = Lists.newArrayList(response.getBuildTargets());,if (Lists != null ) List<String> targetsToBuild = Lists.newArrayList(response.getBuildTargets());
ThriftCoordinatorServer.java,ImmutableList<String> targets = allocator.getTargetsToBuild(request.getMinionId());,if (allocator != null ) ImmutableList<String> targets = allocator.getTargetsToBuild(request.getMinionId());
BuildTargetsQueueTest.java,ImmutableList<String> zeroDepTargets = queue.dequeueZeroDependencyNodes(ImmutableList.of());,if (queue != null ) ImmutableList<String> zeroDepTargets = queue.dequeueZeroDependencyNodes(ImmutableList.of());
BuildTargetsQueueTest.java,ImmutableList<String> zeroDepTargets = queue.dequeueZeroDependencyNodes(ImmutableList.of());,if (queue != null ) ImmutableList<String> zeroDepTargets = queue.dequeueZeroDependencyNodes(ImmutableList.of());
BuildTargetsQueueTest.java,ImmutableList<String> zeroDepTargets = queue.dequeueZeroDependencyNodes(ImmutableList.of());,if (queue != null ) ImmutableList<String> zeroDepTargets = queue.dequeueZeroDependencyNodes(ImmutableList.of());
BuildTargetsQueueTest.java,ImmutableList<String> zeroDepTargets = queue.dequeueZeroDependencyNodes(ImmutableList.of());,if (queue != null ) ImmutableList<String> zeroDepTargets = queue.dequeueZeroDependencyNodes(ImmutableList.of());
BuildTargetsQueueTest.java,ImmutableList<String> zeroDepTargets = queue.dequeueZeroDependencyNodes(ImmutableList.of());,if (queue != null ) ImmutableList<String> zeroDepTargets = queue.dequeueZeroDependencyNodes(ImmutableList.of());
BuildCommand.java,"graphs = createGraphs(params, commandThreadManager.getListeningExecutorService());","if (commandThreadManager != null ) graphs = createGraphs(params, commandThreadManager.getListeningExecutorService());"
BuildCommand.java,"graphs = createGraphs(params, commandThreadManager.getListeningExecutorService());","if (commandThreadManager != null ) graphs = createGraphs(params, commandThreadManager.getListeningExecutorService());"
TargetsCommand.java,actionGraph = Optional.of(result.getActionGraph());,if (Optional != null ) actionGraph = Optional.of(result.getActionGraph());
TargetsCommand.java,buildRuleResolver = Optional.of(result.getResolver());,if (Optional != null ) buildRuleResolver = Optional.of(result.getResolver());
TargetsCommand.java,SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(result.getResolver());,if (SourcePathRuleFinder(result != null ) SourcePathRuleFinder ruleFinder = new SourcePathRuleFinder(result.getResolver());
TargetsCommand.java,BuildTarget target = entry.getKey();,if (entry != null ) BuildTarget target = entry.getKey();
TargetsCommand.java,ShowOptions.Builder showOptionsBuilder = entry.getValue();,if (entry != null ) ShowOptions.Builder showOptionsBuilder = entry.getValue();
TargetsCommand.java,Path sameFsPath = rootPath.resolve(path.toString());,if (rootPath != null ) Path sameFsPath = rootPath.resolve(path.toString());
ContentAgnosticRuleKeyFactory.java,Builder<HashCode> builder = new Builder<>(RuleKeyBuilder.createDefaultHasher());,if (Builder<>(RuleKeyBuilder != null ) Builder<HashCode> builder = new Builder<>(RuleKeyBuilder.createDefaultHasher());
ContentAgnosticRuleKeyFactory.java,Builder<HashCode> subKeyBuilder = new Builder<>(RuleKeyBuilder.createDefaultHasher());,if (Builder<>(RuleKeyBuilder != null ) Builder<HashCode> subKeyBuilder = new Builder<>(RuleKeyBuilder.createDefaultHasher());
InputBasedRuleKeyFactory.java,Builder<HashCode> subKeyBuilder = new Builder<>(RuleKeyBuilder.createDefaultHasher());,if (Builder<>(RuleKeyBuilder != null ) Builder<HashCode> subKeyBuilder = new Builder<>(RuleKeyBuilder.createDefaultHasher());
AbstractCxxSourceRuleFactory.java,Preprocessor preprocessor = preprocessorDelegate.getPreprocessor();,if (preprocessorDelegate != null ) Preprocessor preprocessor = preprocessorDelegate.getPreprocessor();
AbstractCxxSourceRuleFactory.java,Optional<CxxPrecompiledHeader> precompiledHeaderRule = Optional.empty();,if (Optional != null ) Optional<CxxPrecompiledHeader> precompiledHeaderRule = Optional.empty();
Build.java,BuildId buildId = executionContext.getBuildId();,if (executionContext != null ) BuildId buildId = executionContext.getBuildId();
DistBuildClientExecutor.java,final StampedeId stampedeId = job.getStampedeId();,if (job != null ) final StampedeId stampedeId = job.getStampedeId();
DistBuildClientExecutor.java,final StampedeId stampedeId = job.getStampedeId();,if (job != null ) final StampedeId stampedeId = job.getStampedeId();
DistBuildClientExecutor.java,List<BuildSlaveStatus> slaveStatuses = ImmutableList.of();,if (ImmutableList != null ) List<BuildSlaveStatus> slaveStatuses = ImmutableList.of();
DistBuildClientExecutor.java,slaveStatuses = slaveStatusesFuture.get();,if (slaveStatusesFuture != null ) slaveStatuses = slaveStatusesFuture.get();
DistBuildClientExecutor.java,Optional<String> lastLine = Optional.empty();,if (Optional != null ) Optional<String> lastLine = Optional.empty();
DistBuildClientExecutor.java,StampedeId stampedeId = job.getStampedeId();,if (job != null ) StampedeId stampedeId = job.getStampedeId();
DistBuildClientExecutor.java,StampedeId stampedeId = job.getStampedeId();,if (job != null ) StampedeId stampedeId = job.getStampedeId();
DistBuildClientExecutor.java,BuildSlaveEvent slaveEvent = sequenceIdAndEvent.getSecond();,if (sequenceIdAndEvent != null ) BuildSlaveEvent slaveEvent = sequenceIdAndEvent.getSecond();
DistBuildClientExecutor.java,String runIdStr = entry.getKey();,if (entry != null ) String runIdStr = entry.getKey();
DistBuildClientExecutor.java,BuildSlaveRunId runId = entry.getValue().getBuildSlaveRunId();,if (entry != null ) BuildSlaveRunId runId = entry.getValue().getBuildSlaveRunId();
DistBuildClientExecutor.java,Optional<BuildSlaveFinishedStats> finishedStats = Optional.empty();,if (Optional != null ) Optional<BuildSlaveFinishedStats> finishedStats = Optional.empty();
DistBuildClientExecutorTest.java,scheduler = Executors.newSingleThreadScheduledExecutor();,if (Executors != null ) scheduler = Executors.newSingleThreadScheduledExecutor();
DistBuildClientExecutorTest.java,directExecutor = MoreExecutors.listeningDecorator(MoreExecutors.newDirectExecutorService());,if (MoreExecutors != null ) directExecutor = MoreExecutors.listeningDecorator(MoreExecutors.newDirectExecutorService());
DistBuildClientExecutorTest.java,Capture<ClientSideBuildSlaveFinishedStatsEvent> capturedEvent = EasyMock.newCapture();,if (EasyMock != null ) Capture<ClientSideBuildSlaveFinishedStatsEvent> capturedEvent = EasyMock.newCapture();
DistBuildClientExecutorTest.java,job = job.deepCopy(); // new copy,if (copy != null ) job = job.deepCopy(); // new copy
DistBuildClientExecutorTest.java,job = job.deepCopy(); // new copy,if (copy != null ) job = job.deepCopy(); // new copy
DistBuildClientExecutorTest.java,job = job.deepCopy(); // new copy,if (copy != null ) job = job.deepCopy(); // new copy
DistBuildClientExecutorTest.java,job = job.deepCopy(); // new copy,if (copy != null ) job = job.deepCopy(); // new copy
ThriftCoordinatorServer.java,exitCode = request.getBuildExitCode();,if (request != null ) exitCode = request.getBuildExitCode();
MinionModeRunner.java,List<String> targetsToBuild = Lists.newArrayList(response.getBuildTargets());,if (Lists != null ) List<String> targetsToBuild = Lists.newArrayList(response.getBuildTargets());
ThriftCoordinatorClient.java,Stopwatch stopwatch = Stopwatch.createStarted();,if (Stopwatch != null ) Stopwatch stopwatch = Stopwatch.createStarted();
AndroidBinary.java,ExopackageInfo.Builder builder = ExopackageInfo.builder();,if (ExopackageInfo != null ) ExopackageInfo.Builder builder = ExopackageInfo.builder();
AndroidBinary.java,PreDexMerge preDexMerge = enhancementResult.getPreDexMerge().get();,if (enhancementResult != null ) PreDexMerge preDexMerge = enhancementResult.getPreDexMerge().get();
AndroidBinary.java,ExopackageInfo exopackageInfo = builder.build();,if (builder != null ) ExopackageInfo exopackageInfo = builder.build();
AndroidBinaryBuildable.java,String name = inputEntry.getName();,if (inputEntry != null ) String name = inputEntry.getName();
AndroidBinaryBuildable.java,nativeLibsDirs = Optional.empty();,if (Optional != null ) nativeLibsDirs = Optional.empty();
AndroidBinaryBuildable.java,DexFilesInfo enhancementDexFilesInfo = enhancementResult.getDexFilesInfo();,if (enhancementResult != null ) DexFilesInfo enhancementDexFilesInfo = enhancementResult.getDexFilesInfo();
DexProducedFromJavaLibraryThatContainsClassFilesTest.java,BuildRuleParams params = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) BuildRuleParams params = TestBuildRuleParams.create();
BuildInfoRecorder.java,SortedSet<Path> pathsToIncludeInZip = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) SortedSet<Path> pathsToIncludeInZip = ImmutableSortedSet.of();
AppleCxxPlatformsProvider.java,Flavor flavor = platform.getFlavor();,if (platform != null ) Flavor flavor = platform.getFlavor();
HaskellGhciRule.java,BuildRule rule = buildRuleResolver.getRule(ghciBinDep.get());,if (buildRuleResolver != null ) BuildRule rule = buildRuleResolver.getRule(ghciBinDep.get());
HaskellGhciRule.java,SourcePath sp = rule.getSourcePathToOutput();,if (rule != null ) SourcePath sp = rule.getSourcePathToOutput();
ProjectGenerator.java,publicCxxHeaders = ImmutableSortedMap.of();,if (ImmutableSortedMap != null ) publicCxxHeaders = ImmutableSortedMap.of();
Aapt2Link.java,line = line.trim();,if (line != null ) line = line.trim();
ActionGraphCache.java,WatchmanPathEvent watchmanPathEvent = this.watchmanPathEvent.get();,if (this != null ) WatchmanPathEvent watchmanPathEvent = this.watchmanPathEvent.get();
ActionGraphCache.java,WatchmanOverflowEvent watchmanOverflowEvent = this.watchmanOverflowEvent.get();,if (this != null ) WatchmanOverflowEvent watchmanOverflowEvent = this.watchmanOverflowEvent.get();
HeaderPathNormalizerTest.java,"SourcePath headerDirPath = new PathSourcePath(filesystem, header.getParent());","if (header != null ) SourcePath headerDirPath = new PathSourcePath(filesystem, header.getParent());"
JavacSpecTest.java,SourcePath sourcePath = new FakeSourcePath(externalJavac.toString());,if (FakeSourcePath(externalJavac != null ) SourcePath sourcePath = new FakeSourcePath(externalJavac.toString());
JavacSpecTest.java,SourcePath sourcePath = new FakeSourcePath(externalJavacPath.toString());,if (FakeSourcePath(externalJavacPath != null ) SourcePath sourcePath = new FakeSourcePath(externalJavacPath.toString());
Build.java,BuildId buildId = executionContext.getBuildId();,if (executionContext != null ) BuildId buildId = executionContext.getBuildId();
Build.java,results = buildFuture.get();,if (buildFuture != null ) results = buildFuture.get();
Build.java,Throwable thrown = result.getFailure();,if (result != null ) Throwable thrown = result.getFailure();
Build.java,String jsonBuildReport = buildReport.generateJsonBuildReport();,if (buildReport != null ) String jsonBuildReport = buildReport.generateJsonBuildReport();
BuckConfig.java,ResourceAmounts estimated = ResourceAmountsEstimator.getEstimatedAmounts();,if (ResourceAmountsEstimator != null ) ResourceAmounts estimated = ResourceAmountsEstimator.getEstimatedAmounts();
Main.java,Path canonicalRootPath = projectRoot.toRealPath().normalize();,if (projectRoot != null ) Path canonicalRootPath = projectRoot.toRealPath().normalize();
Main.java,RawConfig rootCellConfigOverrides = RawConfig.of();,if (RawConfig != null ) RawConfig rootCellConfigOverrides = RawConfig.of();
CachingBuildRuleBuilder.java,RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getRuleKey();,if (depFileRuleKeyAndInputs != null ) RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getRuleKey();
CachingBuildRuleBuilder.java,HashCode hashCode = HashCode.fromString(ent.getValue());,if (HashCode != null ) HashCode hashCode = HashCode.fromString(ent.getValue());
CachingBuildRuleBuilder.java,boolean clearExistingMetadata = success.shouldClearAndOverwriteMetadataOnDisk();,if (success != null ) boolean clearExistingMetadata = success.shouldClearAndOverwriteMetadataOnDisk();
AndroidBinaryBuildable.java,this.nativeLibsDirs = Optional.empty();,if (Optional != null ) this.nativeLibsDirs = Optional.empty();
AndroidBinaryBuildable.java,this.hasLinkableAssets = packageableCollection.getNativeLinkablesAssets().isEmpty();,if (packageableCollection != null ) this.hasLinkableAssets = packageableCollection.getNativeLinkablesAssets().isEmpty();
CopyNativeLibraries.java,this.stripLibRules = ImmutableSet.copyOf(strippedLibsMap.values());,if (ImmutableSet != null ) this.stripLibRules = ImmutableSet.copyOf(strippedLibsMap.values());
CopyNativeLibraries.java,this.stripLibAssetRules = ImmutableSet.copyOf(strippedLibsAssetsMap.values());,if (ImmutableSet != null ) this.stripLibAssetRules = ImmutableSet.copyOf(strippedLibsAssetsMap.values());
AndroidBinaryBuildable.java,this.moduleMappedClasspathEntriesForConsistency = Optional.empty();,if (Optional != null ) this.moduleMappedClasspathEntriesForConsistency = Optional.empty();
AndroidBinaryBuildable.java,String name = inputEntry.getName();,if (inputEntry != null ) String name = inputEntry.getName();
AndroidBinaryBuildable.java,String desiredOutput = relativeLibPath.toString();,if (relativeLibPath != null ) String desiredOutput = relativeLibPath.toString();
AndroidBinaryBuildable.java,ImmutableList<String> metadata = metadataLines.build();,if (metadataLines != null ) ImmutableList<String> metadata = metadataLines.build();
AndroidBinaryBuildable.java,Optional<Path> proguardFullConfigFile = Optional.empty();,if (Optional != null ) Optional<Path> proguardFullConfigFile = Optional.empty();
AndroidBinaryBuildable.java,Optional<Path> proguardMappingFile = Optional.empty();,if (Optional != null ) Optional<Path> proguardMappingFile = Optional.empty();
JavacOptionsFactory.java,AbiGenerationMode defaultMode = defaultOptions.getAbiGenerationMode();,if (defaultOptions != null ) AbiGenerationMode defaultMode = defaultOptions.getAbiGenerationMode();
JavaBuckConfigTest.java,JavacOptions options = config.getDefaultJavacOptions();,if (config != null ) JavacOptions options = config.getDefaultJavacOptions();
JavaBuckConfigTest.java,JavacOptions options = config.getDefaultJavacOptions();,if (config != null ) JavacOptions options = config.getDefaultJavacOptions();
JavaBuckConfigTest.java,JavacOptions options = config.getDefaultJavacOptions();,if (config != null ) JavacOptions options = config.getDefaultJavacOptions();
JavaBuckConfigTest.java,JavacOptions options = config.getDefaultJavacOptions();,if (config != null ) JavacOptions options = config.getDefaultJavacOptions();
AndroidBinaryBuildable.java,this.predexedSecondaryDirectories = Optional.empty();,if (Optional != null ) this.predexedSecondaryDirectories = Optional.empty();
AndroidBinaryBuildable.java,APKModuleGraph apkModuleGraph = enhancementResult.getAPKModuleGraph();,if (enhancementResult != null ) APKModuleGraph apkModuleGraph = enhancementResult.getAPKModuleGraph();
AndroidBinaryBuildable.java,this.isPreDexed = enhancementResult.getPreDexMerge().isPresent();,if (enhancementResult != null ) this.isPreDexed = enhancementResult.getPreDexMerge().isPresent();
AndroidBinaryBuildable.java,this.nonPreDexedDexBuildable = Optional.empty();,if (Optional != null ) this.nonPreDexedDexBuildable = Optional.empty();
AndroidBinaryBuildable.java,APKModule rootAPKModule = apkModuleGraph.getRootAPKModule();,if (apkModuleGraph != null ) APKModule rootAPKModule = apkModuleGraph.getRootAPKModule();
AndroidBinaryBuildable.java,dexFilesInfo = nonPreDexedDexBuildable.get().getDexFilesInfo();,if (nonPreDexedDexBuildable != null ) dexFilesInfo = nonPreDexedDexBuildable.get().getDexFilesInfo();
AndroidBinaryGraphEnhancer.java,Optional<PreDexMerge> preDexMerge = Optional.empty();,if (Optional != null ) Optional<PreDexMerge> preDexMerge = Optional.empty();
AndroidInstrumentationApkDescriptionTest.java,BuildRule transitiveDepRule = ruleResolver.requireRule(transitiveDep.getBuildTarget());,if (ruleResolver != null ) BuildRule transitiveDepRule = ruleResolver.requireRule(transitiveDep.getBuildTarget());
AbstractErrorLogRecord.java,Optional<String> errorMsg = Optional.empty();,if (Optional != null ) Optional<String> errorMsg = Optional.empty();
AbstractErrorLogRecord.java,errorMsg = Optional.ofNullable(getRecord().getMessage());,if (Optional != null ) errorMsg = Optional.ofNullable(getRecord().getMessage());
DefaultRuleKeyCache.java,builder = Stream.builder();,if (Stream != null ) builder = Stream.builder();
BuildTargetSourcePathTest.java,DefaultBuildTargetSourcePath path = new DefaultBuildTargetSourcePath(rule.getBuildTarget());,if (DefaultBuildTargetSourcePath(rule != null ) DefaultBuildTargetSourcePath path = new DefaultBuildTargetSourcePath(rule.getBuildTarget());
BuildTargetSourcePathTest.java,DefaultBuildTargetSourcePath path = new DefaultBuildTargetSourcePath(rule.getBuildTarget());,if (DefaultBuildTargetSourcePath(rule != null ) DefaultBuildTargetSourcePath path = new DefaultBuildTargetSourcePath(rule.getBuildTarget());
SourcePathResolverTest.java,SourcePath sourcePath = new DefaultBuildTargetSourcePath(rule.getBuildTarget());,if (DefaultBuildTargetSourcePath(rule != null ) SourcePath sourcePath = new DefaultBuildTargetSourcePath(rule.getBuildTarget());
SourcePathResolverTest.java,SourcePath sourcePath = new DefaultBuildTargetSourcePath(rule.getBuildTarget());,if (DefaultBuildTargetSourcePath(rule != null ) SourcePath sourcePath = new DefaultBuildTargetSourcePath(rule.getBuildTarget());
SourcePathResolverTest.java,SourcePath sourcePath = new DefaultBuildTargetSourcePath(rule.getBuildTarget());,if (DefaultBuildTargetSourcePath(rule != null ) SourcePath sourcePath = new DefaultBuildTargetSourcePath(rule.getBuildTarget());
HeaderSymlinkTreeWithHeaderMap.java,Optional<String> umbrellaHeader = getUmbrellaHeader(getBuildTarget().getShortName());,if (getUmbrellaHeader(getBuildTarget() != null ) Optional<String> umbrellaHeader = getUmbrellaHeader(getBuildTarget().getShortName());
HeaderSymlinkTreeWithHeaderMap.java,String moduleName = normalizeModuleName(getBuildTarget().getShortName());,if (normalizeModuleName(getBuildTarget() != null ) String moduleName = normalizeModuleName(getBuildTarget().getShortName());
SwiftOSXBinaryIntegrationTest.java,String fileContent = fileContentOptional.get();,if (fileContentOptional != null ) String fileContent = fileContentOptional.get();
GraphEnhancementQueryEnvironmentTest.java,"cellRoots = new DefaultCellPathResolver(ROOT, ImmutableMap.of());","if (ImmutableMap != null ) cellRoots = new DefaultCellPathResolver(ROOT, ImmutableMap.of());"
NdkCxxPlatforms.java,Optional<Path> ndkRoot = androidDirectoryResolver.getNdkOrAbsent();,if (androidDirectoryResolver != null ) Optional<Path> ndkRoot = androidDirectoryResolver.getNdkOrAbsent();
NdkCxxPlatformsProviderFactory.java,ndkVersion = androidDirectoryResolver.getNdkVersion();,if (androidDirectoryResolver != null ) ndkVersion = androidDirectoryResolver.getNdkVersion();
FetchCommand.java,Optional<Path> sdkDir = resolver.getSdkOrAbsent();,if (resolver != null ) Optional<Path> sdkDir = resolver.getSdkOrAbsent();
StackedDownloaderTest.java,"Downloader downloader = StackedDownloader.createFromConfig(config, Optional.empty());","if (Optional != null ) Downloader downloader = StackedDownloader.createFromConfig(config, Optional.empty());"
StackedDownloaderTest.java,"Downloader downloader = StackedDownloader.createFromConfig(config, Optional.empty());","if (Optional != null ) Downloader downloader = StackedDownloader.createFromConfig(config, Optional.empty());"
StackedDownloaderTest.java,"Downloader downloader = StackedDownloader.createFromConfig(config, Optional.empty());","if (Optional != null ) Downloader downloader = StackedDownloader.createFromConfig(config, Optional.empty());"
StackedDownloaderTest.java,"Downloader downloader = StackedDownloader.createFromConfig(config, Optional.empty());","if (Optional != null ) Downloader downloader = StackedDownloader.createFromConfig(config, Optional.empty());"
KnownBuildRuleTypes.java,Platform platform = Platform.detect();,if (Platform != null ) Platform platform = Platform.detect();
KnownBuildRuleTypes.java,Optional<String> ndkVersion = androidConfig.getNdkVersion();,if (androidConfig != null ) Optional<String> ndkVersion = androidConfig.getNdkVersion();
KnownBuildRuleTypes.java,ndkVersion = androidDirectoryResolver.getNdkVersion();,if (androidDirectoryResolver != null ) ndkVersion = androidDirectoryResolver.getNdkVersion();
ProjectGenerator.java,String productName = getProductNameForBuildTarget(targetNode.getBuildTarget());,if (getProductNameForBuildTarget(targetNode != null ) String productName = getProductNameForBuildTarget(targetNode.getBuildTarget());
AndroidBinaryDescription.java,ResourceFilter resourceFilter = new ResourceFilter(args.getResourceFilter());,if (ResourceFilter(args != null ) ResourceFilter resourceFilter = new ResourceFilter(args.getResourceFilter());
AndroidBinaryDescription.java,ImmutableSortedSet<BuildRule> buildRulesToExcludeFromDex = builder.build();,if (builder != null ) ImmutableSortedSet<BuildRule> buildRulesToExcludeFromDex = builder.build();
AndroidBinaryBuildable.java,APKModule rootAPKModule = apkModuleGraph.getRootAPKModule();,if (apkModuleGraph != null ) APKModule rootAPKModule = apkModuleGraph.getRootAPKModule();
AndroidBinaryBuildable.java,secondaryDexDirs = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) secondaryDexDirs = ImmutableSortedSet.of();
AppleBinaryDescription.java,ImmutableSortedSet<BuildTarget> extraCxxDeps = extraCxxDepsBuilder.build();,if (extraCxxDepsBuilder != null ) ImmutableSortedSet<BuildTarget> extraCxxDeps = extraCxxDepsBuilder.build();
HaskellLibraryDescription.java,"ImmutableSet<BuildRule> deps = allDeps.get(resolver, platform.getCxxPlatform());","if (platform != null ) ImmutableSet<BuildRule> deps = allDeps.get(resolver, platform.getCxxPlatform());"
JavacOptionsTest.java,JavacOptions options = createStandardBuilder().build();,if (createStandardBuilder() != null ) JavacOptions options = createStandardBuilder().build();
DefaultJavaLibraryRules.java,finalBuildDeps = depsBuilder.build();,if (depsBuilder != null ) finalBuildDeps = depsBuilder.build();
AndroidLibrary.java,JavaLibraryDeps deps = Preconditions.checkNotNull(delegate.getDeps());,if (Preconditions != null ) JavaLibraryDeps deps = Preconditions.checkNotNull(delegate.getDeps());
GroovyTestDescription.java,JavaLibrary testsLibrary = resolver.addToIndex(defaultJavaLibraryBuilder.buildLibrary());,if (resolver != null ) JavaLibrary testsLibrary = resolver.addToIndex(defaultJavaLibraryBuilder.buildLibrary());
JavaLibraryDescription.java,DefaultJavaLibrary defaultJavaLibrary = defaultJavaLibraryBuilder.buildLibrary();,if (defaultJavaLibraryBuilder != null ) DefaultJavaLibrary defaultJavaLibrary = defaultJavaLibraryBuilder.buildLibrary();
JavaTestDescription.java,JavaLibrary testsLibrary = resolver.addToIndex(defaultJavaLibraryBuilder.buildLibrary());,if (resolver != null ) JavaLibrary testsLibrary = resolver.addToIndex(defaultJavaLibraryBuilder.buildLibrary());
KotlinTestDescription.java,DefaultJavaLibrary testsLibrary = resolver.addToIndex(defaultJavaLibraryBuilder.buildLibrary());,if (resolver != null ) DefaultJavaLibrary testsLibrary = resolver.addToIndex(defaultJavaLibraryBuilder.buildLibrary());
GroovyTestDescription.java,JavaLibrary testsLibrary = resolver.addToIndex(defaultJavaLibraryBuilder.build());,if (resolver != null ) JavaLibrary testsLibrary = resolver.addToIndex(defaultJavaLibraryBuilder.build());
JavaLibraryDescription.java,DefaultJavaLibrary defaultJavaLibrary = defaultJavaLibraryBuilder.build();,if (defaultJavaLibraryBuilder != null ) DefaultJavaLibrary defaultJavaLibrary = defaultJavaLibraryBuilder.build();
JavaTestDescription.java,JavaLibrary testsLibrary = resolver.addToIndex(defaultJavaLibraryBuilder.build());,if (resolver != null ) JavaLibrary testsLibrary = resolver.addToIndex(defaultJavaLibraryBuilder.build());
KotlinLibraryDescription.java,DefaultJavaLibrary defaultKotlinLibrary = defaultKotlinLibraryBuilder.build();,if (defaultKotlinLibraryBuilder != null ) DefaultJavaLibrary defaultKotlinLibrary = defaultKotlinLibraryBuilder.build();
KotlinTestDescription.java,DefaultJavaLibrary testsLibrary = resolver.addToIndex(defaultJavaLibraryBuilder.build());,if (resolver != null ) DefaultJavaLibrary testsLibrary = resolver.addToIndex(defaultJavaLibraryBuilder.build());
ScalaTestDescription.java,JavaLibrary testsLibrary = resolver.addToIndex(scalaLibraryBuilder.build());,if (resolver != null ) JavaLibrary testsLibrary = resolver.addToIndex(scalaLibraryBuilder.build());
DefaultJavaLibraryBuilder.java,finalBuildDeps = depsBuilder.build();,if (depsBuilder != null ) finalBuildDeps = depsBuilder.build();
Build.java,rootCause = new HumanReadableException(rootCause.getMessage());,if (HumanReadableException(rootCause != null ) rootCause = new HumanReadableException(rootCause.getMessage());
StepFailedException.java,Optional<String> stderr = executionResult.getStderr();,if (executionResult != null ) Optional<String> stderr = executionResult.getStderr();
Build.java,message = thrown.getMessage();,if (thrown != null ) message = thrown.getMessage();
Build.java,message = new String(outputStream.toByteArray());,if (String(outputStream != null ) message = new String(outputStream.toByteArray());
CachingBuildRuleBuilder.java,String message = thrown.getMessage();,if (thrown != null ) String message = thrown.getMessage();
Build.java,String jsonBuildReport = buildReport.generateJsonBuildReport();,if (buildReport != null ) String jsonBuildReport = buildReport.generateJsonBuildReport();
Build.java,String jsonBuildReport = buildReport.generateJsonBuildReport();,if (buildReport != null ) String jsonBuildReport = buildReport.generateJsonBuildReport();
ProjectWorkspace.java,"InputStream stdin = new ByteArrayInputStream("""".getBytes());","if (ByteArrayInputStream("""" != null ) InputStream stdin = new ByteArrayInputStream("""".getBytes());"
DistBuildClientExecutor.java,RunId runId = entry.getValue().getRunId();,if (entry != null ) RunId runId = entry.getValue().getRunId();
JarContentHasher.java,Path memberPath = Paths.get(nameAttributesEntry.getKey());,if (Paths != null ) Path memberPath = Paths.get(nameAttributesEntry.getKey());
JarContentHasher.java,Attributes attributes = nameAttributesEntry.getValue();,if (nameAttributesEntry != null ) Attributes attributes = nameAttributesEntry.getValue();
GenerateStringSourceMap.java,ImmutableList<SourcePath> inputs = ImmutableList.of();,if (ImmutableList != null ) ImmutableList<SourcePath> inputs = ImmutableList.of();
ProjectFilesystem.java,Path path = matcher.getPath();,if (matcher != null ) Path path = matcher.getPath();
ProjectFilesystem.java,Path relativeTmpDir = ProjectFilesystem.this.buckPaths.getTmpDir();,if (ProjectFilesystem != null ) Path relativeTmpDir = ProjectFilesystem.this.buckPaths.getTmpDir();
ProjectFilesystem.java,Path directory = file.getParent();,if (file != null ) Path directory = file.getParent();
ProjectFilesystem.java,this.iter = ImmutableList.of(root).iterator();,if (ImmutableList != null ) this.iter = ImmutableList.of(root).iterator();
ProjectFilesystem.java,this.iter = getContents(directory).iterator();,if (getContents(directory) != null ) this.iter = getContents(directory).iterator();
ProjectFilesystem.java,result = visitPath(state.getLast().iter.next());,if (visitPath(state != null ) result = visitPath(state.getLast().iter.next());
ProjectFilesystem.java,DirWalkState dirState = state.removeLast();,if (state != null ) DirWalkState dirState = state.removeLast();
ProjectFilesystem.java,Object thisKey = attrs.fileKey();,if (attrs != null ) Object thisKey = attrs.fileKey();
ProjectFilesystem.java,Object thatKey = s.attrs.fileKey();,if (s != null ) Object thatKey = s.attrs.fileKey();
DefaultJavaLibraryBuilder.java,ImmutableSortedSet<BuildTarget> providedDeps = args.getProvidedDeps();,if (args != null ) ImmutableSortedSet<BuildTarget> providedDeps = args.getProvidedDeps();
DefaultJavaLibraryBuilder.java,Query providedDepsQuery = hasProvidedDepsQuery.getProvidedDepsQuery().get();,if (hasProvidedDepsQuery != null ) Query providedDepsQuery = hasProvidedDepsQuery.getProvidedDepsQuery().get();
DefaultJavaLibraryBuilder.java,ImmutableSortedSet<BuildRule> declaredDeps = declaredDepsBuilder.build();,if (declaredDepsBuilder != null ) ImmutableSortedSet<BuildRule> declaredDeps = declaredDepsBuilder.build();
AndroidLibraryGraphEnhancer.java,SortedSet<BuildRule> originalDeps = originalBuildRuleParams.getBuildDeps();,if (originalBuildRuleParams != null ) SortedSet<BuildRule> originalDeps = originalBuildRuleParams.getBuildDeps();
AndroidLibrary.java,Query providedDepsQuery = androidArgs.getProvidedDepsQuery().get();,if (androidArgs != null ) Query providedDepsQuery = androidArgs.getProvidedDepsQuery().get();
ScalaLibraryBuilder.java,extraArguments = args.getExtraArguments();,if (args != null ) extraArguments = args.getExtraArguments();
AaptPackageResourcesIntegrationTest.java,filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) filesystem = new ProjectFilesystem(workspace.getDestPath());
AndroidAarIntegrationTest.java,filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) filesystem = new ProjectFilesystem(tmp.getRoot());
AndroidAppModularityIntegrationTest.java,filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) filesystem = new ProjectFilesystem(workspace.getDestPath());
AndroidBinaryInstallIntegrationTest.java,filesystem = new ProjectFilesystem(tmpFolder.getRoot());,if (ProjectFilesystem(tmpFolder != null ) filesystem = new ProjectFilesystem(tmpFolder.getRoot());
AndroidBinaryIntegrationTest.java,filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) filesystem = new ProjectFilesystem(workspace.getDestPath());
AndroidBinaryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmpFolder.getRoot());,if (ProjectFilesystem(tmpFolder != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmpFolder.getRoot());
AndroidConsistencyIntegrationTest.java,filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) filesystem = new ProjectFilesystem(workspace.getDestPath());
AndroidExopackageBinaryIntegrationTest.java,filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) filesystem = new ProjectFilesystem(workspace.getDestPath());
AndroidInstrumentationApkIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
AndroidResourceFilterIntegrationTest.java,filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) filesystem = new ProjectFilesystem(workspace.getDestPath());
ExopackageDeviceDirectoryListerTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmpFolder.getRoot());,if (ProjectFilesystem(tmpFolder != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmpFolder.getRoot());
ExopackageInstallerIntegrationTest.java,filesystem = new ProjectFilesystem(tmpFolder.getRoot());,if (ProjectFilesystem(tmpFolder != null ) filesystem = new ProjectFilesystem(tmpFolder.getRoot());
GenerateStringSourceMapIntegrationTest.java,filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) filesystem = new ProjectFilesystem(workspace.getDestPath());
MultipleResourcePackageIntegrationTest.java,filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) filesystem = new ProjectFilesystem(workspace.getDestPath());
NdkCxxPlatformIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
NdkCxxPlatformIntegrationTest.java,ProjectFilesystem longPwdFilesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem longPwdFilesystem = new ProjectFilesystem(workspace.getDestPath());
NdkCxxPlatformTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());
NdkCxxPlatformTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());
NdkCxxPlatformTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());
NdkCxxPlatformTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());
NdkCxxPlatformTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());
TrimUberRDotJavaTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmpFolder.getRoot());,if (ProjectFilesystem(tmpFolder != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmpFolder.getRoot());
AndroidResourceIndexMiniAaptTest.java,filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) filesystem = new ProjectFilesystem(workspace.getDestPath());
AppleAssetCatalogTest.java,filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) filesystem = new ProjectFilesystem(tmp.getRoot());
AppleBinaryIntegrationTest.java,filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) filesystem = new ProjectFilesystem(tmp.getRoot());
AppleBundleIntegrationTest.java,filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) filesystem = new ProjectFilesystem(tmp.getRoot());
AppleLibraryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
AppleLibraryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
AppleLibraryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
AppleLibraryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
AppleLibraryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
AppleLibraryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
AppleLibraryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
AppleLibraryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
AppleLibraryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
AppleLibraryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
AppleLibraryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
AppleLibraryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
AppleLibraryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
AppleLibraryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
AppleLibraryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
AppleLibraryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
AppleLibraryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
AppleLibraryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
AppleLibraryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
AppleLibraryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
AppleLibraryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
AppleLibraryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
AppleLibraryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
AppleLibraryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
AppleTestIntegrationTest.java,filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) filesystem = new ProjectFilesystem(tmp.getRoot());
BuiltinApplePackageIntegrationTest.java,filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) filesystem = new ProjectFilesystem(tmp.getRoot());
PrebuiltAppleFrameworkIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
PrebuiltAppleFrameworkIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
PrebuiltAppleFrameworkIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
PrebuiltAppleFrameworkIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
ArtifactCachesTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(tempDir.getRoot());,if (ProjectFilesystem(tempDir != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(tempDir.getRoot());
ArtifactCachesTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(tempDir.getRoot());,if (ProjectFilesystem(tempDir != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(tempDir.getRoot());
MultiArtifactCacheTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());
SQLiteArtifactCacheBenchmark.java,filesystem = new ProjectFilesystem(tmpDir.getRoot());,if (ProjectFilesystem(tmpDir != null ) filesystem = new ProjectFilesystem(tmpDir.getRoot());
SQLiteArtifactCacheTest.java,filesystem = new ProjectFilesystem(tmpDir.getRoot());,if (ProjectFilesystem(tmpDir != null ) filesystem = new ProjectFilesystem(tmpDir.getRoot());
ThriftArtifactCacheTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tempPaths.getRoot());,if (ProjectFilesystem(tempPaths != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tempPaths.getRoot());
ThriftArtifactCacheTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tempPaths.getRoot());,if (ProjectFilesystem(tempPaths != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tempPaths.getRoot());
BuckConfigTestUtils.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRoot());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRoot());
DaemonLifecycleManagerTest.java,filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) filesystem = new ProjectFilesystem(tmp.getRoot());
InterCellIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
ArchiveStepIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());
ArchiveStepIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());
ArchiveStepIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());
ArchiveStepIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());
CxxBinaryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
CxxBinaryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(primary.getDestPath());,if (ProjectFilesystem(primary != null ) ProjectFilesystem filesystem = new ProjectFilesystem(primary.getDestPath());
CxxBinaryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
CxxBinaryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
CxxBinaryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
CxxBinaryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
CxxBinaryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
CxxBinaryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
CxxBinaryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
CxxBinaryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
CxxBinaryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
CxxBinaryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
CxxBinaryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
CxxBinaryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
CxxBinaryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
CxxBinaryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
CxxBinaryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
CxxBoostTestTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRoot());
CxxCompileStepIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());
CxxCompileStepIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());
CxxGtestTestTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());
CxxPrecompiledHeaderRuleTest.java,filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) filesystem = new ProjectFilesystem(tmp.getRoot());
ElfExtractSectionsStepTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());
DBinaryIntegrationTest.java,filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) filesystem = new ProjectFilesystem(tmp.getRoot());
EstimateDexWeightStepTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());
DefectReporterTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRoot());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRoot());
DefectReporterTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRoot());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRoot());
DoctorCommandIntegrationTest.java,filesystem = new ProjectFilesystem(tempFolder.getRoot());,if (ProjectFilesystem(tempFolder != null ) filesystem = new ProjectFilesystem(tempFolder.getRoot());
ServedCacheIntegrationTest.java,projectFilesystem = new ProjectFilesystem(tmpDir.getRoot());,if (ProjectFilesystem(tmpDir != null ) projectFilesystem = new ProjectFilesystem(tmpDir.getRoot());
MorePathsTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRoot());
MorePathsTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRoot());
MorePathsTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRoot());
ProjectFilesystemTest.java,filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) filesystem = new ProjectFilesystem(tmp.getRoot());
AndroidReactNativeLibraryIntegrationTest.java,filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) filesystem = new ProjectFilesystem(workspace.getDestPath());
IosReactNativeLibraryIntegrationTest.java,filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) filesystem = new ProjectFilesystem(workspace.getDestPath());
JsRulesIntegrationTest.java,projectFilesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) projectFilesystem = new ProjectFilesystem(workspace.getDestPath());
GroovyBuckConfigTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRoot());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRoot());
CalculateAbiFromSourceIntegrationTest.java,filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) filesystem = new ProjectFilesystem(tmp.getRoot());
CleanClasspathIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());
DefaultJavaLibraryIntegrationTest.java,filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) filesystem = new ProjectFilesystem(tmp.getRoot());
JavaBuckConfigTest.java,defaultFilesystem = new ProjectFilesystem(temporaryFolder.getRoot());,if (ProjectFilesystem(temporaryFolder != null ) defaultFilesystem = new ProjectFilesystem(temporaryFolder.getRoot());
JavaTestGetClassNamesIntegrationTest.java,projectFilesystem = new ProjectFilesystem(temporaryFolder.getRoot());,if (ProjectFilesystem(temporaryFolder != null ) projectFilesystem = new ProjectFilesystem(temporaryFolder.getRoot());
StubJarTest.java,filesystem = new ProjectFilesystem(out.toPath());,if (ProjectFilesystem(out != null ) filesystem = new ProjectFilesystem(out.toPath());
JavaLibrarySymbolsFinderTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRoot());
JavaLibrarySymbolsFinderTest.java,final ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) final ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRoot());
JavaSymbolsRuleTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRoot());
PrebuiltJarSymbolsFinderTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());
LogFileHandlerTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
CompDirReplacerIntegrationTest.java,filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) filesystem = new ProjectFilesystem(tmp.getRoot());
ObjectPathsAbsolutifierIntegrationTest.java,filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) filesystem = new ProjectFilesystem(tmp.getRoot());
OCamlIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) filesystem = new ProjectFilesystem(tmp.getRoot());
KnownBuildRuleTypesTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRoot());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRoot());
KnownBuildRuleTypesTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRoot());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRoot());
KnownBuildRuleTypesTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRoot());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRoot());
KnownBuildRuleTypesTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRoot());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRoot());
KnownBuildRuleTypesTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRoot());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRoot());
KnownBuildRuleTypesTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRoot());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRoot());
KnownBuildRuleTypesTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRoot());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRoot());
OutputToFileExpanderUtilsTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(root.toPath());,if (ProjectFilesystem(root != null ) ProjectFilesystem filesystem = new ProjectFilesystem(root.toPath());
SymlinkFilesIntoDirectoryStepIntegrationTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRoot());
BundledExternalProcessLauncherTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmpPath.getRoot());,if (ProjectFilesystem(tmpPath != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmpPath.getRoot());
BundledExternalProcessLauncherTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmpPath.getRoot());,if (ProjectFilesystem(tmpPath != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmpPath.getRoot());
SwiftIOSBundleIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
SwiftIOSBundleIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
SwiftIOSBundleIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
SwiftIOSBundleIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
SwiftIOSBundleIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
SwiftIOSBundleIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
SwiftIOSBundleIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
SwiftOSXBinaryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
SwiftOSXBinaryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
SwiftTestIOSIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
DefaultFileHashCacheTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());
DefaultFileHashCacheTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());
DefaultFileHashCacheTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());
DefaultFileHashCacheTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());
DefaultFileHashCacheTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());
StackedFileHashCacheTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());
StackedFileHashCacheTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());
WatchedFileHashCacheTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());
WatchedFileHashCacheTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());
OfflineScribeLoggerTest.java,final ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) final ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());
OfflineScribeLoggerTest.java,final ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) final ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());
ChromeTraceParserIntegrationTest.java,projectFilesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) projectFilesystem = new ProjectFilesystem(tmp.getRoot());
WorkerProcessTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(workspace.getDestPath());
ZipStepTest.java,filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) filesystem = new ProjectFilesystem(tmp.getRoot());
SrcZipAwareFileBundlerTest.java,filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) filesystem = new ProjectFilesystem(tmp.getRoot());
SrcZipAwareFileBundlerTest.java,filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) filesystem = new ProjectFilesystem(tmp.getRoot());
SrcZipAwareFileBundlerTest.java,filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) filesystem = new ProjectFilesystem(tmp.getRoot());
SrcZipAwareFileBundlerTest.java,filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) filesystem = new ProjectFilesystem(tmp.getRoot());
AppleLibraryDescriptionSwiftEnhancer.java,ImmutableSet<CxxPreprocessorInput> inputs = builder.build();,if (builder != null ) ImmutableSet<CxxPreprocessorInput> inputs = builder.build();
DefaultGroovyLibraryBuilder.java,extraGroovycArguments = groovyArgs.getExtraGroovycArguments();,if (groovyArgs != null ) extraGroovycArguments = groovyArgs.getExtraGroovycArguments();
KotlinLibraryBuilder.java,extraKotlincArguments = kotlinArgs.getExtraKotlincArguments();,if (kotlinArgs != null ) extraKotlincArguments = kotlinArgs.getExtraKotlincArguments();
AndroidNativeLibsPackageableGraphEnhancer.java,NdkCxxPlatforms.TargetCpuType targetCpuType = entry.getKey().getTargetCpuType();,if (entry != null ) NdkCxxPlatforms.TargetCpuType targetCpuType = entry.getKey().getTargetCpuType();
NdkLibraryDescription.java,NdkCxxPlatforms.TargetCpuType targetCpuType = entry.getKey();,if (entry != null ) NdkCxxPlatforms.TargetCpuType targetCpuType = entry.getKey();
NdkCxxPlatformsProvider.java,Platform platform = Platform.detect();,if (Platform != null ) Platform platform = Platform.detect();
NdkCxxPlatformsProvider.java,Optional<String> ndkVersion = androidConfig.getNdkVersion();,if (androidConfig != null ) Optional<String> ndkVersion = androidConfig.getNdkVersion();
NdkCxxPlatformsProvider.java,ndkVersion = androidDirectoryResolver.getNdkVersion();,if (androidDirectoryResolver != null ) ndkVersion = androidDirectoryResolver.getNdkVersion();
DependenciesOptimizer.java,final PsiDocumentManager manager = PsiDocumentManager.getInstance(file.getProject());,if (PsiDocumentManager != null ) final PsiDocumentManager manager = PsiDocumentManager.getInstance(file.getProject());
DependenciesOptimizer.java,BuckPropertyLvalue lValue = property.getPropertyLvalue();,if (property != null ) BuckPropertyLvalue lValue = property.getPropertyLvalue();
DependenciesOptimizer.java,List<BuckValue> values = property.getExpression().getValueList();,if (property != null ) List<BuckValue> values = property.getExpression().getValueList();
DependenciesOptimizer.java,BuckValueArray array = value.getValueArray();,if (value != null ) BuckValueArray array = value.getValueArray();
DependenciesOptimizer.java,BuckArrayElements arrayElements = array.getArrayElements();,if (array != null ) BuckArrayElements arrayElements = array.getArrayElements();
DependenciesOptimizer.java,PsiElement[] arrayValues = arrayElements.getChildren();,if (arrayElements != null ) PsiElement[] arrayValues = arrayElements.getChildren();
DependenciesOptimizer.java,oldValues[i] = arrayValues[i].copy();,if (arrayValues[i] != null ) oldValues[i] = arrayValues[i].copy();
CxxLinkableEnhancer.java,NativeLinkableInput linkableInput = NativeLinkableInput.concat(nativeLinkableInputs.build());,if (NativeLinkableInput != null ) NativeLinkableInput linkableInput = NativeLinkableInput.concat(nativeLinkableInputs.build());
ActionGraphCache.java,ForkJoinPool pool = ForkJoinPool.commonPool();,if (ForkJoinPool != null ) ForkJoinPool pool = ForkJoinPool.commonPool();
CachingBuildRuleBuilder.java,BuildOutputInitializer<T> buildOutputInitializer = initializable.getBuildOutputInitializer();,if (initializable != null ) BuildOutputInitializer<T> buildOutputInitializer = initializable.getBuildOutputInitializer();
CachingBuildEngineTest.java,filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) filesystem = new FakeProjectFilesystem(tmp.getRoot());
AndroidBinaryBuildable.java,classpathEntriesToDex = outDirPaths.build();,if (outDirPaths != null ) classpathEntriesToDex = outDirPaths.build();
AndroidBinaryBuildable.java,AndroidPlatformTarget platformTarget = context.getAndroidPlatformTarget();,if (context != null ) AndroidPlatformTarget platformTarget = context.getAndroidPlatformTarget();
AndroidBinaryBuildable.java,SourcePathResolver resolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver resolver = buildContext.getSourcePathResolver();
AndroidBinaryBuildable.java,Optional<Path> proguardFullConfigFile = Optional.empty();,if (Optional != null ) Optional<Path> proguardFullConfigFile = Optional.empty();
AndroidBinaryBuildable.java,Optional<Path> proguardMappingFile = Optional.empty();,if (Optional != null ) Optional<Path> proguardMappingFile = Optional.empty();
AndroidBinaryBuildable.java,additionalDexDirs = Optional.empty();,if (Optional != null ) additionalDexDirs = Optional.empty();
AndroidBinaryBuildable.java,Path dexStorePath = additionalDexAssetsDir.resolve(dexStore.getName());,if (additionalDexAssetsDir != null ) Path dexStorePath = additionalDexAssetsDir.resolve(dexStore.getName());
AndroidBinaryBuildable.java,additionalDexDirs = Optional.of(builder.build());,if (Optional != null ) additionalDexDirs = Optional.of(builder.build());
AndroidBinaryBuildable.java,secondaryDexDir = Optional.empty();,if (Optional != null ) secondaryDexDir = Optional.empty();
AndroidBinaryBuildable.java,secondaryOutputToInputs = Optional.empty();,if (Optional != null ) secondaryOutputToInputs = Optional.empty();
AndroidBinaryBuildable.java,String primaryDexFileName = primaryDexPath.getFileName().toString();,if (primaryDexPath != null ) String primaryDexFileName = primaryDexPath.getFileName().toString();
AndroidBinaryBuildable.java,this.apkModuleMap = apkModuleGraph.toOutgoingEdgesMap();,if (apkModuleGraph != null ) this.apkModuleMap = apkModuleGraph.toOutgoingEdgesMap();
AndroidBinaryBuildable.java,this.rootAPKModule = apkModuleGraph.getRootAPKModule();,if (apkModuleGraph != null ) this.rootAPKModule = apkModuleGraph.getRootAPKModule();
AndroidBinaryBuildable.java,this.classpathEntriesToDexSourcePaths = Optional.empty();,if (Optional != null ) this.classpathEntriesToDexSourcePaths = Optional.empty();
AndroidBinaryBuildable.java,this.moduleMappedClasspathEntriesToDex = Optional.empty();,if (Optional != null ) this.moduleMappedClasspathEntriesToDex = Optional.empty();
AndroidBinaryBuildable.java,classpathEntriesToDex = outDirPaths.build();,if (outDirPaths != null ) classpathEntriesToDex = outDirPaths.build();
AndroidBinaryBuildable.java,AndroidPlatformTarget platformTarget = context.getAndroidPlatformTarget();,if (context != null ) AndroidPlatformTarget platformTarget = context.getAndroidPlatformTarget();
AndroidBinaryBuildable.java,SourcePathResolver resolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver resolver = buildContext.getSourcePathResolver();
AndroidBinaryBuildable.java,Optional<Path> proguardFullConfigFile = Optional.empty();,if (Optional != null ) Optional<Path> proguardFullConfigFile = Optional.empty();
AndroidBinaryBuildable.java,Optional<Path> proguardMappingFile = Optional.empty();,if (Optional != null ) Optional<Path> proguardMappingFile = Optional.empty();
AndroidBinaryBuildable.java,additionalDexDirs = Optional.empty();,if (Optional != null ) additionalDexDirs = Optional.empty();
AndroidBinaryBuildable.java,Path dexStorePath = additionalDexAssetsDir.resolve(dexStore.getName());,if (additionalDexAssetsDir != null ) Path dexStorePath = additionalDexAssetsDir.resolve(dexStore.getName());
AndroidBinaryBuildable.java,additionalDexDirs = Optional.of(builder.build());,if (Optional != null ) additionalDexDirs = Optional.of(builder.build());
AndroidBinaryBuildable.java,secondaryDexDir = Optional.empty();,if (Optional != null ) secondaryDexDir = Optional.empty();
AndroidBinaryBuildable.java,secondaryOutputToInputs = Optional.empty();,if (Optional != null ) secondaryOutputToInputs = Optional.empty();
AndroidBinaryBuildable.java,String primaryDexFileName = primaryDexPath.getFileName().toString();,if (primaryDexPath != null ) String primaryDexFileName = primaryDexPath.getFileName().toString();
SkylarkProjectBuildFileParser.java,String name = Description.getBuildRuleType(description).getName();,if (Description != null ) String name = Description.getBuildRuleType(description).getName();
DefaultJavaLibraryIntegrationTest.java,Set<String> allNames = zip.getFileNames();,if (zip != null ) Set<String> allNames = zip.getFileNames();
JavadocTest.java,Set<String> allFileNames = zip.getFileNames();,if (zip != null ) Set<String> allFileNames = zip.getFileNames();
JavadocTest.java,Set<String> allFileNames = zip.getFileNames();,if (zip != null ) Set<String> allFileNames = zip.getFileNames();
FlavoredTargetsParserIntegrationTest.java,Set<String> fileNames = zip.getFileNames();,if (zip != null ) Set<String> fileNames = zip.getFileNames();
ZipStepTest.java,Enumeration<ZipArchiveEntry> entries = zip.getEntries();,if (zip != null ) Enumeration<ZipArchiveEntry> entries = zip.getEntries();
SkylarkProjectBuildFileParser.java,Environment globalEnv = Environment.builder(mutability).build();,if (Environment != null ) Environment globalEnv = Environment.builder(mutability).build();
SkylarkProjectBuildFileParser.java,Environment extensionEnv = Environment.builder(mutability).build();,if (Environment != null ) Environment extensionEnv = Environment.builder(mutability).build();
SkylarkProjectBuildFileParser.java,Environment env = Environment.builder(mutability).build();,if (Environment != null ) Environment env = Environment.builder(mutability).build();
SrcZipAwareFileBundler.java,Path absoluteBasePathParent = absoluteBasePath.getParent();,if (absoluteBasePath != null ) Path absoluteBasePathParent = absoluteBasePath.getParent();
SrcZipAwareFileBundler.java,Path relativePath = pathEntry.getKey();,if (pathEntry != null ) Path relativePath = pathEntry.getKey();
SrcZipAwareFileBundler.java,Path absolutePath = Preconditions.checkNotNull(pathEntry.getValue());,if (Preconditions != null ) Path absolutePath = Preconditions.checkNotNull(pathEntry.getValue());
IosReactNativeLibraryIntegrationTest.java,filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) filesystem = new ProjectFilesystem(workspace.getDestPath());
CxxDescriptionEnhancer.java,"BuildTarget target = createSharedLibrarySymlinkTreeTarget(buildTarget, cxxPlatform.getFlavor());","if (cxxPlatform != null ) BuildTarget target = createSharedLibrarySymlinkTreeTarget(buildTarget, cxxPlatform.getFlavor());"
NativeLibraryMergeEnhancer.java,rule = ruleOptional.get();,if (ruleOptional != null ) rule = ruleOptional.get();
JarBuilderTest.java,File tempFile = temporaryFolder.newFile();,if (temporaryFolder != null ) File tempFile = temporaryFolder.newFile();
AndroidBinaryGraphEnhancer.java,BuildTarget originalTarget = javaLibrary.getBuildTarget();,if (javaLibrary != null ) BuildTarget originalTarget = javaLibrary.getBuildTarget();
DoctorCommandIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tempFolder.getRoot());,if (ProjectFilesystem(tempFolder != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tempFolder.getRoot());
DoctorCommandIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tempFolder.getRoot());,if (ProjectFilesystem(tempFolder != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tempFolder.getRoot());
DoctorCommandIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tempFolder.getRoot());,if (ProjectFilesystem(tempFolder != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tempFolder.getRoot());
SimpleConsoleEventBusListener.java,long currentMillis = clock.currentTimeMillis();,if (clock != null ) long currentMillis = clock.currentTimeMillis();
PostEnterCanonicalizer.java,"TreePath baseTypeTreePath = new TreePath(treePath, memberSelectTree.getExpression());","if (memberSelectTree != null ) TreePath baseTypeTreePath = new TreePath(treePath, memberSelectTree.getExpression());"
PostEnterCanonicalizer.java,ArtificialPackageElement packageElement = packageType.asElement();,if (packageType != null ) ArtificialPackageElement packageElement = packageType.asElement();
TreeBackedElements.java,String qualifiedName = qualifiedNameSeq.toString();,if (qualifiedNameSeq != null ) String qualifiedName = qualifiedNameSeq.toString();
KnownBuildRuleTypes.java,LuaPlatform luaPlatform = luaBuckConfig.getPlatform();,if (luaBuckConfig != null ) LuaPlatform luaPlatform = luaBuckConfig.getPlatform();
LuaBinaryIntegrationTest.java,LuaPlatform platform = getLuaBuckConfig().getPlatform();,if (getLuaBuckConfig() != null ) LuaPlatform platform = getLuaBuckConfig().getPlatform();
LuaBinaryDescription.java,Optional<BuildTarget> nativeStarterLibrary = luaConfig.getNativeStarterLibrary();,if (luaConfig != null ) Optional<BuildTarget> nativeStarterLibrary = luaConfig.getNativeStarterLibrary();
SkylarkProjectBuildFileParserTest.java,projectFilesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();,if (FakeProjectFilesystem != null ) projectFilesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();
SkylarkProjectBuildFileParser.java,String ruleClass = Description.getBuildRuleType(description).getName();,if (Description != null ) String ruleClass = Description.getBuildRuleType(description).getName();
BuckInstallAction.java,BuckSettingsProvider.State state = BuckSettingsProvider.getInstance().getState();,if (BuckSettingsProvider != null ) BuckSettingsProvider.State state = BuckSettingsProvider.getInstance().getState();
ChooseTargetAction.java,BuckSettingsProvider buckSettingsProvider = BuckSettingsProvider.getInstance();,if (BuckSettingsProvider != null ) BuckSettingsProvider buckSettingsProvider = BuckSettingsProvider.getInstance();
BuckToolWindowFactory.java,BuckSettingsProvider.State state = BuckSettingsProvider.getInstance().getState();,if (BuckSettingsProvider != null ) BuckSettingsProvider.State state = BuckSettingsProvider.getInstance().getState();
NewNativeTargetProjectMutator.java,JsBundleDescriptionArg args = (JsBundleDescriptionArg) targetNode.getConstructorArg();,if (targetNode != null ) JsBundleDescriptionArg args = (JsBundleDescriptionArg) targetNode.getConstructorArg();
AppleBundle.java,final String platformName = platform.getName();,if (platform != null ) final String platformName = platform.getName();
AssembleDirectoriesTest.java,BuildRuleParams buildRuleParams = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) BuildRuleParams buildRuleParams = TestBuildRuleParams.create();
MergeAndroidResourcesSourcesTest.java,BuildRuleParams buildRuleParams = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) BuildRuleParams buildRuleParams = TestBuildRuleParams.create();
ParserTest.java,InMemoryFileSystem fileSystem = new InMemoryFileSystem(BlazeClock.instance());,if (InMemoryFileSystem(BlazeClock != null ) InMemoryFileSystem fileSystem = new InMemoryFileSystem(BlazeClock.instance());
ParserTest.java,Environment env = Environment.builder(mutability).build();,if (Environment != null ) Environment env = Environment.builder(mutability).build();
BuckSettingsProvider.java,state.buckExecutable = buckExecutableDetector.getBuckExecutable();,if (buckExecutableDetector != null ) state.buckExecutable = buckExecutableDetector.getBuckExecutable();
BuckSettingsProvider.java,state.adbExecutable = buckExecutableDetector.getAdbExecutable();,if (buckExecutableDetector != null ) state.adbExecutable = buckExecutableDetector.getAdbExecutable();
BuckWSServerPortUtils.java,BuckSettingsProvider.State state = BuckSettingsProvider.getInstance().getState();,if (BuckSettingsProvider != null ) BuckSettingsProvider.State state = BuckSettingsProvider.getInstance().getState();
ProjectView.java,this.config = projectViewParameters.getConfig();,if (projectViewParameters != null ) this.config = projectViewParameters.getConfig();
EdenClient.java,EdenService.Client client = clientFactory.get();,if (clientFactory != null ) EdenService.Client client = clientFactory.get();
MountsCommand.java,List<MountInfo> mountInfos = client.getMountInfos();,if (client != null ) List<MountInfo> mountInfos = client.getMountInfos();
Sha1Command.java,EdenMount mount = client.getMountFor(mountPoint).get();,if (client != null ) EdenMount mount = client.getMountFor(mountPoint).get();
Main.java,Locale locale = Locale.getDefault();,if (Locale != null ) Locale locale = Locale.getDefault();
IjDependencyListBuilder.java,builder = ImmutableSortedSet.naturalOrder();,if (ImmutableSortedSet != null ) builder = ImmutableSortedSet.naturalOrder();
AppleDescriptions.java,Path baseName = sourcePathResolver.getRelativePath(assetCatalogDir).getFileName();,if (sourcePathResolver != null ) Path baseName = sourcePathResolver.getRelativePath(assetCatalogDir).getFileName();
AbstractAsynchronousCache.java,FetchEvents.FetchRequestEvents requestEvents = request.events.started();,if (request != null ) FetchEvents.FetchRequestEvents requestEvents = request.events.started();
DefaultBuildRuleResolver.java,T arg = node.getConstructorArg();,if (node != null ) T arg = node.getConstructorArg();
AccessFlags.java,int result = modifiersToAccessFlags(element.getModifiers());,if (modifiersToAccessFlags(element != null ) int result = modifiersToAccessFlags(element.getModifiers());
ChromeTraceBuildListener.java,long timestampInMicroseconds = TimeUnit.MILLISECONDS.toMicros(clock.currentTimeMillis());,if (TimeUnit != null ) long timestampInMicroseconds = TimeUnit.MILLISECONDS.toMicros(clock.currentTimeMillis());
MultiSourceContentsProvider.java,Stopwatch remoteMaterializationStopwatch = Stopwatch.createStarted();,if (Stopwatch != null ) Stopwatch remoteMaterializationStopwatch = Stopwatch.createStarted();
MaterializerDummyFileHashCache.java,Path absPath = projectFilesystem.resolve(relPath).toAbsolutePath();,if (projectFilesystem != null ) Path absPath = projectFilesystem.resolve(relPath).toAbsolutePath();
MultiSourceContentsProvider.java,this.localFsProvider = Optional.empty();,if (Optional != null ) this.localFsProvider = Optional.empty();
ServerContentsProvider.java,Stopwatch stopwatch = Stopwatch.createStarted();,if (Stopwatch != null ) Stopwatch stopwatch = Stopwatch.createStarted();
ServerContentsProvider.java,Stopwatch stopwatch = Stopwatch.createStarted();,if (Stopwatch != null ) Stopwatch stopwatch = Stopwatch.createStarted();
AaptPackageResourcesTest.java,params = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) params = TestBuildRuleParams.create();
AndroidBinaryGraphEnhancerTest.java,BuildRuleParams aaptPackageResourcesParams = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) BuildRuleParams aaptPackageResourcesParams = TestBuildRuleParams.create();
AbstractAsynchronousCache.java,int multiFetchLimit = getMultiFetchBatchSize(pendingFetchRequests.size());,if (getMultiFetchBatchSize(pendingFetchRequests != null ) int multiFetchLimit = getMultiFetchBatchSize(pendingFetchRequests.size());
AbstractAsynchronousCache.java,int multiFetchLimit = getMultiFetchBatchSize(pendingFetchRequests.size());,if (getMultiFetchBatchSize(pendingFetchRequests != null ) int multiFetchLimit = getMultiFetchBatchSize(pendingFetchRequests.size());
AbstractAsynchronousCache.java,ImmutableList<ClaimedFetchRequest> requests = requestsBuilder.build();,if (requestsBuilder != null ) ImmutableList<ClaimedFetchRequest> requests = requestsBuilder.build();
ThriftArtifactCache.java,this.distributedBuildModeEnabled = args.distributedBuildModeEnabled();,if (args != null ) this.distributedBuildModeEnabled = args.distributedBuildModeEnabled();
AbstractAsynchronousCache.java,ImmutableList<FetchRequest> requests = requestsBuilder.build();,if (requestsBuilder != null ) ImmutableList<FetchRequest> requests = requestsBuilder.build();
BuildRuleResolver.java,T arg = node.getConstructorArg();,if (node != null ) T arg = node.getConstructorArg();
InputRuleResolver.java,Optional<SourcePath> sp = data.getSourcePath();,if (data != null ) Optional<SourcePath> sp = data.getSourcePath();
TreeBackedExecutableElement.java,TypeMirror underlyingReceiverType = underlyingElement.getReceiverType();,if (underlyingElement != null ) TypeMirror underlyingReceiverType = underlyingElement.getReceiverType();
TreeBackedTypes.java,TypeMirror enclosingType = declaredType.getEnclosingType();,if (declaredType != null ) TypeMirror enclosingType = declaredType.getEnclosingType();
SuperConsoleEventBusListener.java,long durationMs = buildFinished.getTimestamp() - buildStarted.getTimestamp();,if (buildStarted != null ) long durationMs = buildFinished.getTimestamp() - buildStarted.getTimestamp();
CxxPreprocessAndCompileStep.java,int exitCode = result.getExitCode();,if (result != null ) int exitCode = result.getExitCode();
ArchiveStepIntegrationTest.java,Archiver archiver = platform.getAr();,if (platform != null ) Archiver archiver = platform.getAr();
ArchiveStepIntegrationTest.java,Archiver archiver = platform.getAr();,if (platform != null ) Archiver archiver = platform.getAr();
ArchiveStepIntegrationTest.java,Archiver archiver = platform.getAr();,if (platform != null ) Archiver archiver = platform.getAr();
ArchiveStepIntegrationTest.java,Archiver archiver = platform.getAr();,if (platform != null ) Archiver archiver = platform.getAr();
CxxPlatformsTest.java,Archiver archiver = CxxPlatformUtils.build(buckConfig).getAr();,if (CxxPlatformUtils != null ) Archiver archiver = CxxPlatformUtils.build(buckConfig).getAr();
AppleLibraryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
AppleLibraryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
CacheCommand.java,WeightedListeningExecutorService executor = pool.getExecutor();,if (pool != null ) WeightedListeningExecutorService executor = pool.getExecutor();
InstallCommand.java,"installHelperTargets = getInstallHelperTargets(params, pool.getExecutor());","if (pool != null ) installHelperTargets = getInstallHelperTargets(params, pool.getExecutor());"
JavaBuildGraphProcessor.java,WeightedListeningExecutorService executorService = pool.getExecutor();,if (pool != null ) WeightedListeningExecutorService executorService = pool.getExecutor();
ProjectCommand.java,ListeningExecutorService executor = pool.getExecutor();,if (pool != null ) ListeningExecutorService executor = pool.getExecutor();
QueryCommand.java,ListeningExecutorService executor = pool.getExecutor();,if (pool != null ) ListeningExecutorService executor = pool.getExecutor();
TargetsCommand.java,ListeningExecutorService executor = pool.getExecutor();,if (pool != null ) ListeningExecutorService executor = pool.getExecutor();
ArchiveStepIntegrationTest.java,Archiver archiver = platform.getAr();,if (platform != null ) Archiver archiver = platform.getAr();
ArchiveStepIntegrationTest.java,Archiver archiver = platform.getAr();,if (platform != null ) Archiver archiver = platform.getAr();
ArchiveStepIntegrationTest.java,Archiver archiver = platform.getAr();,if (platform != null ) Archiver archiver = platform.getAr();
ArchiveStepIntegrationTest.java,Archiver archiver = platform.getAr();,if (platform != null ) Archiver archiver = platform.getAr();
CxxPlatformsTest.java,Archiver archiver = CxxPlatformUtils.build(buckConfig).getAr();,if (CxxPlatformUtils != null ) Archiver archiver = CxxPlatformUtils.build(buckConfig).getAr();
PrebuiltCxxLibraryDescriptionTest.java,PrebuiltCxxLibraryDescriptionArg arg = libBuilder.build().getConstructorArg();,if (libBuilder != null ) PrebuiltCxxLibraryDescriptionArg arg = libBuilder.build().getConstructorArg();
PrebuiltCxxLibraryDescriptionTest.java,PrebuiltCxxLibraryDescriptionArg arg = libBuilder.build().getConstructorArg();,if (libBuilder != null ) PrebuiltCxxLibraryDescriptionArg arg = libBuilder.build().getConstructorArg();
PrebuiltCxxLibraryDescriptionTest.java,BuildTarget flavoredTarget = TARGET.withFlavors(platform.getFlavor());,if (TARGET != null ) BuildTarget flavoredTarget = TARGET.withFlavors(platform.getFlavor());
PrebuiltCxxLibraryDescriptionTest.java,TargetGraph targetGraph = TargetGraphFactory.newInstance(flavoredGenruleBuilder.build());,if (TargetGraphFactory != null ) TargetGraph targetGraph = TargetGraphFactory.newInstance(flavoredGenruleBuilder.build());
PrebuiltCxxLibraryDescriptionTest.java,ImmutableSortedSet<BuildTarget> implicit = builder.findImplicitDeps();,if (builder != null ) ImmutableSortedSet<BuildTarget> implicit = builder.findImplicitDeps();
PrebuiltCxxLibraryDescriptionTest.java,TargetGraph targetGraph = TargetGraphFactory.newInstance(prebuiltCxxLibraryBuilder.build());,if (TargetGraphFactory != null ) TargetGraph targetGraph = TargetGraphFactory.newInstance(prebuiltCxxLibraryBuilder.build());
PrebuiltCxxLibraryIntegrationTest.java,BuckBuildLog buildLog = workspace.getBuildLog();,if (workspace != null ) BuckBuildLog buildLog = workspace.getBuildLog();
PrebuiltCxxLibraryIntegrationTest.java,buildLog = workspace.getBuildLog();,if (workspace != null ) buildLog = workspace.getBuildLog();
PrebuiltCxxLibraryIntegrationTest.java,buildLog = workspace.getBuildLog();,if (workspace != null ) buildLog = workspace.getBuildLog();
PrebuiltCxxLibraryDescription.java,deps = ImmutableList.of();,if (ImmutableList != null ) deps = ImmutableList.of();
PrebuiltCxxLibraryDescription.java,p = p.resolve(addedPathString.get());,if (p != null ) p = p.resolve(addedPathString.get());
PrebuiltCxxLibraryDescription.java,MacroHandler macroHandler = getMacroHandler(Optional.empty());,if (getMacroHandler(Optional != null ) MacroHandler macroHandler = getMacroHandler(Optional.empty());
PrebuiltCxxLibraryDescriptionTest.java,TargetGraph targetGraph = TargetGraphFactory.newInstance(libBuilder.build());,if (TargetGraphFactory != null ) TargetGraph targetGraph = TargetGraphFactory.newInstance(libBuilder.build());
PrebuiltCxxLibraryDescriptionTest.java,TargetGraph targetGraph = TargetGraphFactory.newInstance(builder.build());,if (TargetGraphFactory != null ) TargetGraph targetGraph = TargetGraphFactory.newInstance(builder.build());
BuildCommand.java,DistBuildConfig distBuildConfig = new DistBuildConfig(params.getBuckConfig());,if (DistBuildConfig(params != null ) DistBuildConfig distBuildConfig = new DistBuildConfig(params.getBuckConfig());
CxxPreprocessAndCompileStep.java,Stream<String> lines = MoreStrings.linesToList(stdErr).stream();,if (MoreStrings != null ) Stream<String> lines = MoreStrings.linesToList(stdErr).stream();
JsLibraryDescription.java,this.libraryDependencies = builder.build();,if (builder != null ) this.libraryDependencies = builder.build();
IjProjectTemplateDataPreparer.java,Path relativeCompilerOutputPath = moduleBasePath.relativize(compilerOutputPath.get());,if (moduleBasePath != null ) Path relativeCompilerOutputPath = moduleBasePath.relativize(compilerOutputPath.get());
BuildJobStateFileHashEntry.java,struct.hashCode = iprot.readString();,if (iprot != null ) struct.hashCode = iprot.readString();
BuildJobStateFileHashEntry.java,struct.hashCode = iprot.readString();,if (iprot != null ) struct.hashCode = iprot.readString();
LocalFsContentsProvider.java,RuleKey key = new RuleKey(entry.getHashCode());,if (RuleKey(entry != null ) RuleKey key = new RuleKey(entry.getHashCode());
LocalFsContentsProvider.java,RuleKey key = new RuleKey(entry.getHashCode());,if (RuleKey(entry != null ) RuleKey key = new RuleKey(entry.getHashCode());
HaskellPrebuiltLibraryDescription.java,libs = args.getSharedLibs().values();,if (args != null ) libs = args.getSharedLibs().values();
HaskellPrebuiltLibraryDescription.java,libs = args.getProfiledStaticLibs();,if (args != null ) libs = args.getProfiledStaticLibs();
HaskellPrebuiltLibraryDescription.java,libs = args.getStaticLibs();,if (args != null ) libs = args.getStaticLibs();
HaskellPrebuiltLibraryDescription.java,ImmutableList<Arg> libArgs = SourcePathArg.from(args.getStaticLibs());,if (SourcePathArg != null ) ImmutableList<Arg> libArgs = SourcePathArg.from(args.getStaticLibs());
BootClasspathAppender.java,List<Path> bootclasspathEntries = platform.getBootclasspathEntries();,if (platform != null ) List<Path> bootclasspathEntries = platform.getBootclasspathEntries();
JavacToJarStepFactory.java,ImmutableSortedSet<Path> declaredClasspathEntries = parameters.getClasspathEntries();,if (parameters != null ) ImmutableSortedSet<Path> declaredClasspathEntries = parameters.getClasspathEntries();
JavacToJarStepFactory.java,ImmutableSortedSet<Path> sourceFilePaths = parameters.getSourceFilePaths();,if (parameters != null ) ImmutableSortedSet<Path> sourceFilePaths = parameters.getSourceFilePaths();
JavacToJarStepFactory.java,Path workingDirectory = parameters.getWorkingDirectory();,if (parameters != null ) Path workingDirectory = parameters.getWorkingDirectory();
JavacToJarStepFactory.java,Path generatedCodeDirectory = parameters.getGeneratedCodeDirectory();,if (parameters != null ) Path generatedCodeDirectory = parameters.getGeneratedCodeDirectory();
JavacToJarStepFactory.java,Path outputDirectory = parameters.getOutputDirectory();,if (parameters != null ) Path outputDirectory = parameters.getOutputDirectory();
JavacToJarStepFactory.java,Path pathToSrcsList = parameters.getPathToSourcesList();,if (parameters != null ) Path pathToSrcsList = parameters.getPathToSourcesList();
JavacToJarStepFactory.java,ImmutableSortedSet<Path> declaredClasspathEntries = compilerParameters.getClasspathEntries();,if (compilerParameters != null ) ImmutableSortedSet<Path> declaredClasspathEntries = compilerParameters.getClasspathEntries();
JavacToJarStepFactory.java,ImmutableSortedSet<Path> sourceFilePaths = compilerParameters.getSourceFilePaths();,if (compilerParameters != null ) ImmutableSortedSet<Path> sourceFilePaths = compilerParameters.getSourceFilePaths();
JavacToJarStepFactory.java,Path workingDirectory = compilerParameters.getWorkingDirectory();,if (compilerParameters != null ) Path workingDirectory = compilerParameters.getWorkingDirectory();
JavacToJarStepFactory.java,Path generatedCodeDirectory = compilerParameters.getGeneratedCodeDirectory();,if (compilerParameters != null ) Path generatedCodeDirectory = compilerParameters.getGeneratedCodeDirectory();
JavacToJarStepFactory.java,Path outputDirectory = compilerParameters.getOutputDirectory();,if (compilerParameters != null ) Path outputDirectory = compilerParameters.getOutputDirectory();
JavacToJarStepFactory.java,Path pathToSrcsList = compilerParameters.getPathToSourcesList();,if (compilerParameters != null ) Path pathToSrcsList = compilerParameters.getPathToSourcesList();
KnownBuildRuleTypes.java,Flavor hostFlavor = CxxPlatforms.getHostFlavor();,if (CxxPlatforms != null ) Flavor hostFlavor = CxxPlatforms.getHostFlavor();
KnownBuildRuleTypes.java,cxxSystemPlatformsMap = cxxSystemPlatformsBuilder.build();,if (cxxSystemPlatformsBuilder != null ) cxxSystemPlatformsMap = cxxSystemPlatformsBuilder.build();
KnownBuildRuleTypes.java,ImmutableSet<Flavor> possibleHostFlavors = CxxPlatforms.getAllPossibleHostFlavors();,if (CxxPlatforms != null ) ImmutableSet<Flavor> possibleHostFlavors = CxxPlatforms.getAllPossibleHostFlavors();
KnownBuildRuleTypes.java,Optional<String> hostCxxPlatformOverride = cxxBuckConfig.getHostPlatform();,if (cxxBuckConfig != null ) Optional<String> hostCxxPlatformOverride = cxxBuckConfig.getHostPlatform();
KnownBuildRuleTypes.java,Flavor overrideFlavor = InternalFlavor.of(hostCxxPlatformOverride.get());,if (InternalFlavor != null ) Flavor overrideFlavor = InternalFlavor.of(hostCxxPlatformOverride.get());
KnownBuildRuleTypes.java,Flavor flavor = platform.getFlavor();,if (platform != null ) Flavor flavor = platform.getFlavor();
CxxPlatforms.java,Optional<SharedLibraryInterfaceFactory> sharedLibraryInterfaceFactory = Optional.empty();,if (Optional != null ) Optional<SharedLibraryInterfaceFactory> sharedLibraryInterfaceFactory = Optional.empty();
CxxPlatforms.java,SharedLibraryInterfaceFactory.Type type = config.getSharedLibraryInterfaces();,if (config != null ) SharedLibraryInterfaceFactory.Type type = config.getSharedLibraryInterfaces();
SkylarkProjectBuildFileParser.java,Environment env = Environment.builder(mutability).build();,if (Environment != null ) Environment env = Environment.builder(mutability).build();
SkylarkProjectBuildFileParser.java,rules = builder.build();,if (builder != null ) rules = builder.build();
ReactNativeLibraryGraphEnhancer.java,packagerFlags = ImmutableList.of();,if (ImmutableList != null ) packagerFlags = ImmutableList.of();
JavacToJarStepFactory.java,Optional<Path> workingDirectory = parameters.getWorkingDirectory();,if (parameters != null ) Optional<Path> workingDirectory = parameters.getWorkingDirectory();
JavacToJarStepFactory.java,Optional<Path> generatedCodeDirectory = parameters.getGeneratedCodeDirectory();,if (parameters != null ) Optional<Path> generatedCodeDirectory = parameters.getGeneratedCodeDirectory();
JavacToJarStepFactory.java,Optional<Path> workingDirectory = compilerParameters.getWorkingDirectory();,if (compilerParameters != null ) Optional<Path> workingDirectory = compilerParameters.getWorkingDirectory();
JavacToJarStepFactory.java,Optional<Path> generatedCodeDirectory = compilerParameters.getGeneratedCodeDirectory();,if (compilerParameters != null ) Optional<Path> generatedCodeDirectory = compilerParameters.getGeneratedCodeDirectory();
OutOfProcessInvocationReceiver.java,Optional<Path> workingDirectory = Optional.empty();,if (Optional != null ) Optional<Path> workingDirectory = Optional.empty();
JavacToJarStepFactory.java,Optional<Path> depFilePath = parameters.getDepFilePath();,if (parameters != null ) Optional<Path> depFilePath = parameters.getDepFilePath();
JavacToJarStepFactory.java,Optional<Path> depFilePath = compilerParameters.getDepFilePath();,if (compilerParameters != null ) Optional<Path> depFilePath = compilerParameters.getDepFilePath();
KotlincToJarStepFactory.java,Optional<Path> workingDirectory = parameters.getWorkingDirectory();,if (parameters != null ) Optional<Path> workingDirectory = parameters.getWorkingDirectory();
KotlincToJarStepFactory.java,Optional<Path> generatedCodeDirectory = parameters.getGeneratedCodeDirectory();,if (parameters != null ) Optional<Path> generatedCodeDirectory = parameters.getGeneratedCodeDirectory();
KotlincToJarStepFactory.java,Optional<Path> depFilePath = parameters.getDepFilePath();,if (parameters != null ) Optional<Path> depFilePath = parameters.getDepFilePath();
CxxPreprocessAndCompileStep.java,ProcessExecutor executor = new DefaultProcessExecutor(Console.createNullConsole());,if (DefaultProcessExecutor(Console != null ) ProcessExecutor executor = new DefaultProcessExecutor(Console.createNullConsole());
CxxPreprocessAndCompileStep.java,List<String> includeLines = Collections.emptyList();,if (Collections != null ) List<String> includeLines = Collections.emptyList();
CxxPreprocessAndCompileStep.java,"List<String> errorLines = includesAndErrors.getOrDefault(false, Collections.emptyList());","if (Collections != null ) List<String> errorLines = includesAndErrors.getOrDefault(false, Collections.emptyList());"
CxxPreprocessAndCompileStep.java,exitCode = executor.waitForLaunchedProcess(process).getExitCode();,if (executor != null ) exitCode = executor.waitForLaunchedProcess(process).getExitCode();
ProjectGenerator.java,swiftVersion = swiftBuckConfig.getVersion();,if (swiftBuckConfig != null ) swiftVersion = swiftBuckConfig.getVersion();
SQLiteArtifactCache.java,ResultSet artifacts = db.selectContentByTime();,if (db != null ) ResultSet artifacts = db.selectContentByTime();
SQLiteArtifactCache.java,evictionCutoff = Timestamp.from(Instant.now());,if (Timestamp != null ) evictionCutoff = Timestamp.from(Instant.now());
CommandAliasDescription.java,BuildTarget exe = args.getExe();,if (args != null ) BuildTarget exe = args.getExe();
ProjectBuildFileParser.java,projectBuildFileParseEventStarted = new ProjectBuildFileParseEvents.Started();,if (ProjectBuildFileParseEvents != null ) projectBuildFileParseEventStarted = new ProjectBuildFileParseEvents.Started();
ProjectBuildFileParser.java,buckPyProcessInput = new CountingInputStream(buckPyProcess.getInputStream());,if (CountingInputStream(buckPyProcess != null ) buckPyProcessInput = new CountingInputStream(buckPyProcess.getInputStream());
ProjectBuildFileParser.java,buckPyProcessJsonGenerator = ObjectMappers.createGenerator(buckPyProcess.getOutputStream());,if (ObjectMappers != null ) buckPyProcessJsonGenerator = ObjectMappers.createGenerator(buckPyProcess.getOutputStream());
ProjectBuildFileParser.java,InputStream stderr = buckPyProcess.getErrorStream();,if (buckPyProcess != null ) InputStream stderr = buckPyProcess.getErrorStream();
ProjectBuildFileParser.java,long alreadyReadBytes = buckPyProcessInput.getCount();,if (buckPyProcessInput != null ) long alreadyReadBytes = buckPyProcessInput.getCount();
ProjectBuildFileParser.java,Optional<String> profile = Optional.empty();,if (Optional != null ) Optional<String> profile = Optional.empty();
ProjectBuildFileParser.java,Path cellPath = options.getProjectRoot().toAbsolutePath();,if (options != null ) Path cellPath = options.getProjectRoot().toAbsolutePath();
ProjectBuildFileParser.java,String watchRoot = cellPath.toString();,if (cellPath != null ) String watchRoot = cellPath.toString();
ProjectBuildFileParser.java,watchRoot = projectWatch.getWatchRoot();,if (projectWatch != null ) watchRoot = projectWatch.getWatchRoot();
ProjectBuildFileParser.java,projectPrefix = projectWatch.getProjectPrefix().get();,if (projectWatch != null ) projectPrefix = projectWatch.getProjectPrefix().get();
ProjectBuildFileParser.java,Path buckPyPath = getPathToBuckPy(options.getDescriptions());,if (getPathToBuckPy(options != null ) Path buckPyPath = getPathToBuckPy(options.getDescriptions());
ProjectBuildFileParser.java,values = resultObject.getValues();,if (resultObject != null ) values = resultObject.getValues();
ProjectBuildFileParser.java,profile = resultObject.getProfile();,if (resultObject != null ) profile = resultObject.getProfile();
ProjectBuildFileParser.java,header = buildFile.toString();,if (buildFile != null ) header = buildFile.toString();
ProjectBuildFileParser.java,Optional<BuildFileSyntaxError> syntaxErrorOpt = exceptionData.getSyntaxError();,if (exceptionData != null ) Optional<BuildFileSyntaxError> syntaxErrorOpt = exceptionData.getSyntaxError();
ProjectBuildFileParser.java,BuildFileSyntaxError syntaxError = syntaxErrorOpt.get();,if (syntaxErrorOpt != null ) BuildFileSyntaxError syntaxError = syntaxErrorOpt.get();
ProjectBuildFileParser.java,"String formattedStackTrace = formatStackTrace(buckPyDir, exceptionData.getStackTrace());","if (exceptionData != null ) String formattedStackTrace = formatStackTrace(buckPyDir, exceptionData.getStackTrace());"
ProjectBuildFileParser.java,Optional<String> profile = resultObject.getProfile();,if (resultObject != null ) Optional<String> profile = resultObject.getProfile();
JarBuildStepsFactory.java,JavaPackageFinder finder = context.getJavaPackageFinder();,if (context != null ) JavaPackageFinder finder = context.getJavaPackageFinder();
MaterializerProjectFileHashCache.java,Path relPath = projectFilesystem.getPathRelativeToProjectRoot(absPath).get();,if (projectFilesystem != null ) Path relPath = projectFilesystem.getPathRelativeToProjectRoot(absPath).get();
ServerContentsProvider.java,byte[] fileContents = service.fetchSourceFile(entry.getHashCode());,if (service != null ) byte[] fileContents = service.fetchSourceFile(entry.getHashCode());
AbstractNetworkCache.java,this.name = args.getCacheName();,if (args != null ) this.name = args.getCacheName();
AbstractNetworkCache.java,this.mode = args.getCacheMode();,if (args != null ) this.mode = args.getCacheMode();
AbstractNetworkCache.java,this.cacheReadMode = args.getCacheReadMode();,if (args != null ) this.cacheReadMode = args.getCacheReadMode();
AbstractNetworkCache.java,this.projectFilesystem = args.getProjectFilesystem();,if (args != null ) this.projectFilesystem = args.getProjectFilesystem();
AbstractNetworkCache.java,this.buckEventBus = args.getBuckEventBus();,if (args != null ) this.buckEventBus = args.getBuckEventBus();
AbstractNetworkCache.java,this.httpWriteExecutorService = args.getHttpWriteExecutorService();,if (args != null ) this.httpWriteExecutorService = args.getHttpWriteExecutorService();
AbstractNetworkCache.java,this.maxStoreSize = args.getMaxStoreSizeBytes();,if (args != null ) this.maxStoreSize = args.getMaxStoreSizeBytes();
AbstractNetworkCache.java,result = fetchResult.getCacheResult();,if (fetchResult != null ) result = fetchResult.getCacheResult();
AbstractNetworkCache.java,tmp = output.getPath();,if (output != null ) tmp = output.getPath();
AbstractNetworkCache.java,this.errorTextTemplate = args.getErrorTextTemplate();,if (args != null ) this.errorTextTemplate = args.getErrorTextTemplate();
JarBuildStepsFactory.java,Path output = outputJar.get();,if (outputJar != null ) Path output = outputJar.get();
HaskellBinaryDescription.java,binaryTarget = binaryTarget.withAppendedFlavors(cxxPlatform.getFlavor());,if (binaryTarget != null ) binaryTarget = binaryTarget.withAppendedFlavors(cxxPlatform.getFlavor());
HaskellLibraryDescription.java,Optional<String> packageNamePrefix = haskellPlatform.getPackageNamePrefix();,if (haskellPlatform != null ) Optional<String> packageNamePrefix = haskellPlatform.getPackageNamePrefix();
HaskellLibraryDescription.java,BuildTarget target = baseTarget.withAppendedFlavors(cxxPlatform.getFlavor());,if (baseTarget != null ) BuildTarget target = baseTarget.withAppendedFlavors(cxxPlatform.getFlavor());
HaskellLibraryDescription.java,"ImmutableSet<BuildRule> deps = allDeps.get(resolver, cxxPlatform.get());","if (cxxPlatform != null ) ImmutableSet<BuildRule> deps = allDeps.get(resolver, cxxPlatform.get());"
KnownBuildRuleTypes.java,HaskellPlatform haskellPlatform = haskellBuckConfig.getPlatform();,if (haskellBuckConfig != null ) HaskellPlatform haskellPlatform = haskellBuckConfig.getPlatform();
HaskellLibraryDescription.java,Optional<String> packageNamePrefix = haskellConfig.getPackageNamePrefix();,if (haskellConfig != null ) Optional<String> packageNamePrefix = haskellConfig.getPackageNamePrefix();
IjProjectTemplateDataPreparer.java,Path basePath = module.getModuleBasePath();,if (module != null ) Path basePath = module.getModuleBasePath();
MiniAaptTest.java,Set<RDotTxtEntry> definitions = aapt.getResourceCollector().getResources();,if (aapt != null ) Set<RDotTxtEntry> definitions = aapt.getResourceCollector().getResources();
MiniAaptTest.java,Set<RDotTxtEntry> definitions = aapt.getResourceCollector().getResources();,if (aapt != null ) Set<RDotTxtEntry> definitions = aapt.getResourceCollector().getResources();
MiniAaptTest.java,Set<RDotTxtEntry> definitions = aapt.getResourceCollector().getResources();,if (aapt != null ) Set<RDotTxtEntry> definitions = aapt.getResourceCollector().getResources();
MiniAaptTest.java,Set<RDotTxtEntry> definitions = aapt.getResourceCollector().getResources();,if (aapt != null ) Set<RDotTxtEntry> definitions = aapt.getResourceCollector().getResources();
MiniAaptTest.java,Set<RDotTxtEntry> definitions = aapt.getResourceCollector().getResources();,if (aapt != null ) Set<RDotTxtEntry> definitions = aapt.getResourceCollector().getResources();
MiniAaptTest.java,Set<RDotTxtEntry> definitions = aapt.getResourceCollector().getResources();,if (aapt != null ) Set<RDotTxtEntry> definitions = aapt.getResourceCollector().getResources();
MiniAaptTest.java,Set<RDotTxtEntry> definitions = aapt.getResourceCollector().getResources();,if (aapt != null ) Set<RDotTxtEntry> definitions = aapt.getResourceCollector().getResources();
MiniAaptTest.java,Set<RDotTxtEntry> definitions = aapt.getResourceCollector().getResources();,if (aapt != null ) Set<RDotTxtEntry> definitions = aapt.getResourceCollector().getResources();
MiniAaptTest.java,Set<RDotTxtEntry> resources = aapt.getResourceCollector().getResources();,if (aapt != null ) Set<RDotTxtEntry> resources = aapt.getResourceCollector().getResources();
JavacExecutionContextSerializer.java,Optional<DirectToJarOutputSettings> directToJarOutputSettings = Optional.empty();,if (Optional != null ) Optional<DirectToJarOutputSettings> directToJarOutputSettings = Optional.empty();
JavacStep.java,DirectToJarOutputSettings directToJarOutputSettings = this.directToJarOutputSettings.get();,if (this != null ) DirectToJarOutputSettings directToJarOutputSettings = this.directToJarOutputSettings.get();
JavacStep.java,Optional<Path> manifestFile = directToJarOutputSettings.getManifestFile();,if (directToJarOutputSettings != null ) Optional<Path> manifestFile = directToJarOutputSettings.getManifestFile();
JavacStep.java,ImmutableSortedSet<Path> entriesToJar = directToJarOutputSettings.getEntriesToJar();,if (directToJarOutputSettings != null ) ImmutableSortedSet<Path> entriesToJar = directToJarOutputSettings.getEntriesToJar();
HaskellTestUtils.java,Optional<Path> compilerOptional = fakeConfig.getSystemCompiler();,if (fakeConfig != null ) Optional<Path> compilerOptional = fakeConfig.getSystemCompiler();
LuaBinaryIntegrationTest.java,Optional<Path> luaOptional = fakeConfig.getSystemLua();,if (fakeConfig != null ) Optional<Path> luaOptional = fakeConfig.getSystemLua();
AppleDebuggableBinary.java,this.binarySourcePath = Preconditions.checkNotNull(binaryRule.getSourcePathToOutput());,if (Preconditions != null ) this.binarySourcePath = Preconditions.checkNotNull(binaryRule.getSourcePathToOutput());
AppleDescriptions.java,appleDsym = Optional.empty();,if (Optional != null ) appleDsym = Optional.empty();
AppleBundleDescription.java,buildTarget = buildTarget.withAppendedFlavors(defaultCxxPlatform.getFlavor());,if (buildTarget != null ) buildTarget = buildTarget.withAppendedFlavors(defaultCxxPlatform.getFlavor());
ProjectGenerator.java,Optional<String> swiftVersion = swiftBuckConfig.getVersion();,if (swiftBuckConfig != null ) Optional<String> swiftVersion = swiftBuckConfig.getVersion();
CachingBuildRuleBuilder.java,BuildRuleSuccessType success = Preconditions.checkNotNull(input.getSuccess());,if (Preconditions != null ) BuildRuleSuccessType success = Preconditions.checkNotNull(input.getSuccess());
CachingBuildRuleBuilder.java,outputSize = Optional.of(buildInfoRecorder.getOutputSize());,if (Optional != null ) outputSize = Optional.of(buildInfoRecorder.getOutputSize());
CachingBuildRuleBuilder.java,BuildRuleSuccessType success = Preconditions.checkNotNull(input.getSuccess());,if (Preconditions != null ) BuildRuleSuccessType success = Preconditions.checkNotNull(input.getSuccess());
CachingBuildRuleBuilder.java,RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getRuleKey();,if (depFileRuleKeyAndInputs != null ) RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getRuleKey();
CachingBuildRuleBuilder.java,HashCode hashCode = HashCode.fromString(ent.getValue());,if (HashCode != null ) HashCode hashCode = HashCode.fromString(ent.getValue());
CachingBuildRuleBuilder.java,boolean clearExistingMetadata = success.shouldClearAndOverwriteMetadataOnDisk();,if (success != null ) boolean clearExistingMetadata = success.shouldClearAndOverwriteMetadataOnDisk();
CachingBuildRuleBuilder.java,Optional<Long> outputSize = Optional.empty();,if (Optional != null ) Optional<Long> outputSize = Optional.empty();
CachingBuildRuleBuilder.java,Optional<HashCode> outputHash = Optional.empty();,if (Optional != null ) Optional<HashCode> outputHash = Optional.empty();
CachingBuildRuleBuilder.java,Optional<BuildRuleSuccessType> successType = Optional.empty();,if (Optional != null ) Optional<BuildRuleSuccessType> successType = Optional.empty();
CachingBuildRuleBuilder.java,BuildRuleSuccessType success = Preconditions.checkNotNull(input.getSuccess());,if (Preconditions != null ) BuildRuleSuccessType success = Preconditions.checkNotNull(input.getSuccess());
CachingBuildRuleBuilder.java,outputSize = Optional.of(buildInfoRecorder.getOutputSize());,if (Optional != null ) outputSize = Optional.of(buildInfoRecorder.getOutputSize());
CachingBuildRuleBuilder.java,BuildId buildId = buildContext.getBuildId();,if (buildContext != null ) BuildId buildId = buildContext.getBuildId();
CachingBuildRuleBuilder.java,Optional<RuleKeyAndInputs> manifestKey = calculateManifestKey(buildContext.getEventBus());,if (calculateManifestKey(buildContext != null ) Optional<RuleKeyAndInputs> manifestKey = calculateManifestKey(buildContext.getEventBus());
CachingBuildRuleBuilder.java,Optional<RuleKey> inputRuleKey = calculateInputBasedRuleKey(buildContext.getEventBus());,if (calculateInputBasedRuleKey(buildContext != null ) Optional<RuleKey> inputRuleKey = calculateInputBasedRuleKey(buildContext.getEventBus());
AndroidBinaryGraphEnhancer.java,Optional<ComputeExopackageDepsAbi> computeExopackageDepsAbi = Optional.empty();,if (Optional != null ) Optional<ComputeExopackageDepsAbi> computeExopackageDepsAbi = Optional.empty();
ComputeExopackageDepsAbi.java,String abiHash = hasher.hash().toString();,if (hasher != null ) String abiHash = hasher.hash().toString();
AndroidBinaryGraphEnhancerTest.java,ImmutableSortedSet<BuildRule> finalDeps = result.getFinalDeps();,if (result != null ) ImmutableSortedSet<BuildRule> finalDeps = result.getFinalDeps();
CachingBuildRuleBuilder.java,"Optional<RuleKeyAndInputs> manifestKey = calculateManifestKey(rule, context.getEventBus());","if (context != null ) Optional<RuleKeyAndInputs> manifestKey = calculateManifestKey(rule, context.getEventBus());"
CachingBuildRuleBuilder.java,"Optional<RuleKey> inputRuleKey = calculateInputBasedRuleKey(rule, context.getEventBus());","if (context != null ) Optional<RuleKey> inputRuleKey = calculateInputBasedRuleKey(rule, context.getEventBus());"
CachingBuildEngine.java,BuildRuleSuccessType success = Preconditions.checkNotNull(input.getSuccess());,if (Preconditions != null ) BuildRuleSuccessType success = Preconditions.checkNotNull(input.getSuccess());
CachingBuildEngine.java,RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getRuleKey();,if (depFileRuleKeyAndInputs != null ) RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getRuleKey();
CachingBuildEngine.java,HashCode hashCode = HashCode.fromString(ent.getValue());,if (HashCode != null ) HashCode hashCode = HashCode.fromString(ent.getValue());
CachingBuildEngine.java,BuildId buildId = buildContext.getBuildId();,if (buildContext != null ) BuildId buildId = buildContext.getBuildId();
CachingBuildEngine.java,boolean clearExistingMetadata = success.shouldClearAndOverwriteMetadataOnDisk();,if (success != null ) boolean clearExistingMetadata = success.shouldClearAndOverwriteMetadataOnDisk();
CachingBuildEngine.java,Optional<Long> outputSize = Optional.empty();,if (Optional != null ) Optional<Long> outputSize = Optional.empty();
CachingBuildEngine.java,Optional<HashCode> outputHash = Optional.empty();,if (Optional != null ) Optional<HashCode> outputHash = Optional.empty();
CachingBuildEngine.java,Optional<BuildRuleSuccessType> successType = Optional.empty();,if (Optional != null ) Optional<BuildRuleSuccessType> successType = Optional.empty();
CachingBuildEngine.java,BuildRuleSuccessType success = Preconditions.checkNotNull(input.getSuccess());,if (Preconditions != null ) BuildRuleSuccessType success = Preconditions.checkNotNull(input.getSuccess());
CachingBuildEngine.java,outputSize = Optional.of(buildInfoRecorder.getOutputSize());,if (Optional != null ) outputSize = Optional.of(buildInfoRecorder.getOutputSize());
CachingBuildEngine.java,"Optional<RuleKeyAndInputs> manifestKey = calculateManifestKey(rule, context.getEventBus());","if (context != null ) Optional<RuleKeyAndInputs> manifestKey = calculateManifestKey(rule, context.getEventBus());"
CachingBuildEngine.java,RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getRuleKey();,if (depFileRuleKeyAndInputs != null ) RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getRuleKey();
CachingBuildEngine.java,"Optional<RuleKey> inputRuleKey = calculateInputBasedRuleKey(rule, context.getEventBus());","if (context != null ) Optional<RuleKey> inputRuleKey = calculateInputBasedRuleKey(rule, context.getEventBus());"
CachingBuildEngine.java,long cacheRequestTimestampMillis = System.currentTimeMillis();,if (System != null ) long cacheRequestTimestampMillis = System.currentTimeMillis();
CachingBuildEngine.java,Path path = filesystem.getPath(ent.getKey());,if (filesystem != null ) Path path = filesystem.getPath(ent.getKey());
CachingBuildEngine.java,HashCode cachedHashCode = HashCode.fromString(ent.getValue());,if (HashCode != null ) HashCode cachedHashCode = HashCode.fromString(ent.getValue());
CachingBuildEngine.java,RuleKeyDiagnosticsMode mode = executionContext.getRuleKeyDiagnosticsMode();,if (executionContext != null ) RuleKeyDiagnosticsMode mode = executionContext.getRuleKeyDiagnosticsMode();
CachingBuildEngine.java,String message = thrown.getMessage();,if (thrown != null ) String message = thrown.getMessage();
CachingBuildEngine.java,Path zipPath = lazyZipPath.getUnchecked();,if (lazyZipPath != null ) Path zipPath = lazyZipPath.getUnchecked();
CachingBuildEngine.java,Optional<BuildTarget> optionalTarget = Optional.of(rule.getBuildTarget());,if (Optional != null ) Optional<BuildTarget> optionalTarget = Optional.of(rule.getBuildTarget());
CachingBuildEngine.java,BuildOutputInitializer<T> buildOutputInitializer = initializable.getBuildOutputInitializer();,if (initializable != null ) BuildOutputInitializer<T> buildOutputInitializer = initializable.getBuildOutputInitializer();
CachingBuildEngine.java,Manifest manifest = new Manifest(manifestKey.getRuleKey());,if (Manifest(manifestKey != null ) Manifest manifest = new Manifest(manifestKey.getRuleKey());
CachingBuildEngine.java,manifest = new Manifest(manifestKey.getRuleKey());,if (Manifest(manifestKey != null ) manifest = new Manifest(manifestKey.getRuleKey());
CachingBuildEngine.java,long start = System.nanoTime();,if (System != null ) long start = System.nanoTime();
CachingBuildEngine.java,Optional<BuildTarget> optionalTarget = Optional.of(rule.getBuildTarget());,if (Optional != null ) Optional<BuildTarget> optionalTarget = Optional.of(rule.getBuildTarget());
CachingBuildEngine.java,long end = System.nanoTime();,if (System != null ) long end = System.nanoTime();
CachingBuildEngine.java,BuildRuleSuccessType success = Preconditions.checkNotNull(input.getSuccess());,if (Preconditions != null ) BuildRuleSuccessType success = Preconditions.checkNotNull(input.getSuccess());
CachingBuildEngine.java,RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getRuleKey();,if (depFileRuleKeyAndInputs != null ) RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getRuleKey();
CachingBuildEngine.java,HashCode hashCode = HashCode.fromString(ent.getValue());,if (HashCode != null ) HashCode hashCode = HashCode.fromString(ent.getValue());
CachingBuildEngine.java,BuildId buildId = buildContext.getBuildId();,if (buildContext != null ) BuildId buildId = buildContext.getBuildId();
CachingBuildEngine.java,boolean clearExistingMetadata = success.shouldClearAndOverwriteMetadataOnDisk();,if (success != null ) boolean clearExistingMetadata = success.shouldClearAndOverwriteMetadataOnDisk();
CachingBuildEngine.java,Optional<Long> outputSize = Optional.empty();,if (Optional != null ) Optional<Long> outputSize = Optional.empty();
CachingBuildEngine.java,Optional<HashCode> outputHash = Optional.empty();,if (Optional != null ) Optional<HashCode> outputHash = Optional.empty();
CachingBuildEngine.java,Optional<BuildRuleSuccessType> successType = Optional.empty();,if (Optional != null ) Optional<BuildRuleSuccessType> successType = Optional.empty();
CachingBuildEngine.java,BuildRuleSuccessType success = Preconditions.checkNotNull(input.getSuccess());,if (Preconditions != null ) BuildRuleSuccessType success = Preconditions.checkNotNull(input.getSuccess());
CachingBuildEngine.java,outputSize = Optional.of(buildInfoRecorder.getOutputSize());,if (Optional != null ) outputSize = Optional.of(buildInfoRecorder.getOutputSize());
CachingBuildEngine.java,"Optional<RuleKeyAndInputs> manifestKey = calculateManifestKey(rule, context.getEventBus());","if (context != null ) Optional<RuleKeyAndInputs> manifestKey = calculateManifestKey(rule, context.getEventBus());"
CachingBuildEngine.java,RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getRuleKey();,if (depFileRuleKeyAndInputs != null ) RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getRuleKey();
CachingBuildEngine.java,"Optional<RuleKey> inputRuleKey = calculateInputBasedRuleKey(rule, context.getEventBus());","if (context != null ) Optional<RuleKey> inputRuleKey = calculateInputBasedRuleKey(rule, context.getEventBus());"
CachingBuildEngine.java,long cacheRequestTimestampMillis = System.currentTimeMillis();,if (System != null ) long cacheRequestTimestampMillis = System.currentTimeMillis();
CachingBuildEngine.java,Path path = filesystem.getPath(ent.getKey());,if (filesystem != null ) Path path = filesystem.getPath(ent.getKey());
CachingBuildEngine.java,HashCode cachedHashCode = HashCode.fromString(ent.getValue());,if (HashCode != null ) HashCode cachedHashCode = HashCode.fromString(ent.getValue());
CachingBuildEngine.java,RuleKeyDiagnosticsMode mode = executionContext.getRuleKeyDiagnosticsMode();,if (executionContext != null ) RuleKeyDiagnosticsMode mode = executionContext.getRuleKeyDiagnosticsMode();
CachingBuildEngine.java,String message = thrown.getMessage();,if (thrown != null ) String message = thrown.getMessage();
CachingBuildEngine.java,Path zipPath = lazyZipPath.getUnchecked();,if (lazyZipPath != null ) Path zipPath = lazyZipPath.getUnchecked();
CachingBuildEngine.java,Optional<BuildTarget> optionalTarget = Optional.of(rule.getBuildTarget());,if (Optional != null ) Optional<BuildTarget> optionalTarget = Optional.of(rule.getBuildTarget());
CachingBuildEngine.java,BuildOutputInitializer<T> buildOutputInitializer = initializable.getBuildOutputInitializer();,if (initializable != null ) BuildOutputInitializer<T> buildOutputInitializer = initializable.getBuildOutputInitializer();
CachingBuildEngine.java,Manifest manifest = new Manifest(manifestKey.getRuleKey());,if (Manifest(manifestKey != null ) Manifest manifest = new Manifest(manifestKey.getRuleKey());
CachingBuildEngine.java,manifest = new Manifest(manifestKey.getRuleKey());,if (Manifest(manifestKey != null ) manifest = new Manifest(manifestKey.getRuleKey());
CachingBuildEngine.java,long start = System.nanoTime();,if (System != null ) long start = System.nanoTime();
CachingBuildEngine.java,Optional<BuildTarget> optionalTarget = Optional.of(rule.getBuildTarget());,if (Optional != null ) Optional<BuildTarget> optionalTarget = Optional.of(rule.getBuildTarget());
CachingBuildEngine.java,long end = System.nanoTime();,if (System != null ) long end = System.nanoTime();
CachingBuildEngine.java,"Optional<RuleKeyAndInputs> manifestKey = calculateManifestKey(rule, context.getEventBus());","if (context != null ) Optional<RuleKeyAndInputs> manifestKey = calculateManifestKey(rule, context.getEventBus());"
CachingBuildEngine.java,RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getRuleKey();,if (depFileRuleKeyAndInputs != null ) RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getRuleKey();
CachingBuildEngine.java,"Optional<RuleKey> inputRuleKey = calculateInputBasedRuleKey(rule, context.getEventBus());","if (context != null ) Optional<RuleKey> inputRuleKey = calculateInputBasedRuleKey(rule, context.getEventBus());"
CachingBuildEngine.java,long cacheRequestTimestampMillis = System.currentTimeMillis();,if (System != null ) long cacheRequestTimestampMillis = System.currentTimeMillis();
CachingBuildEngine.java,Path path = filesystem.getPath(ent.getKey());,if (filesystem != null ) Path path = filesystem.getPath(ent.getKey());
CachingBuildEngine.java,HashCode cachedHashCode = HashCode.fromString(ent.getValue());,if (HashCode != null ) HashCode cachedHashCode = HashCode.fromString(ent.getValue());
CachingBuildEngine.java,ListenableFuture<BuildResult> existingResult = results.get(rule.getBuildTarget());,if (results != null ) ListenableFuture<BuildResult> existingResult = results.get(rule.getBuildTarget());
CachingBuildEngine.java,ListenableFuture<BuildResult> existingResult = results.get(rule.getBuildTarget());,if (results != null ) ListenableFuture<BuildResult> existingResult = results.get(rule.getBuildTarget());
CachingBuildEngine.java,Set<BuildRule> seen = Sets.newConcurrentHashSet();,if (Sets != null ) Set<BuildRule> seen = Sets.newConcurrentHashSet();
CachingBuildEngine.java,ListenableFuture<RuleKey> fromOurCache = ruleKeys.get(rule.getBuildTarget());,if (ruleKeys != null ) ListenableFuture<RuleKey> fromOurCache = ruleKeys.get(rule.getBuildTarget());
BuckPythonProgram.java,JarURLConnection connection = (JarURLConnection) url.openConnection();,if (url != null ) JarURLConnection connection = (JarURLConnection) url.openConnection();
BuckPythonProgram.java,URI jarFileURI = connection.getJarFileURL().toURI();,if (connection != null ) URI jarFileURI = connection.getJarFileURL().toURI();
FileSystemMapFileHashCache.java,long start = System.nanoTime();,if (System != null ) long start = System.nanoTime();
FileSystemMapFileHashCache.java,long start = System.nanoTime();,if (System != null ) long start = System.nanoTime();
FileSystemMapFileHashCache.java,long start = System.nanoTime(); // NOPMD,if (NOPMD != null ) long start = System.nanoTime(); // NOPMD
LoadingCacheFileHashCache.java,long start = System.nanoTime();,if (System != null ) long start = System.nanoTime();
LoadingCacheFileHashCache.java,long start = System.nanoTime();,if (System != null ) long start = System.nanoTime();
LoadingCacheFileHashCache.java,long start = System.nanoTime(); // NOPMD,if (NOPMD != null ) long start = System.nanoTime(); // NOPMD
LoadingCacheFileHashCache.java,long start = System.nanoTime();,if (System != null ) long start = System.nanoTime();
SQLiteArtifactCache.java,Optional<Path> movedArtifactPath = Optional.empty();,if (Optional != null ) Optional<Path> movedArtifactPath = Optional.empty();
SQLiteArtifactCache.java,long size = filesystem.getFileSize(content.getPath());,if (filesystem != null ) long size = filesystem.getFileSize(content.getPath());
AndroidBinaryBuildable.java,this.copyNativeLibraries = enhancementResult.getCopyNativeLibraries();,if (enhancementResult != null ) this.copyNativeLibraries = enhancementResult.getCopyNativeLibraries();
AndroidBinaryBuildable.java,this.apkModuleGraph = enhancementResult.getAPKModuleGraph();,if (enhancementResult != null ) this.apkModuleGraph = enhancementResult.getAPKModuleGraph();
DalvikAwareZipSplitter.java,APKModule secondaryDexStore = apkModuleGraph.getRootAPKModule();,if (apkModuleGraph != null ) APKModule secondaryDexStore = apkModuleGraph.getRootAPKModule();
JavacStep.java,declaredDepsBuildResult = invocation.buildClasses();,if (invocation != null ) declaredDepsBuildResult = invocation.buildClasses();
JavacStep.java,returnedStderr = Optional.empty();,if (Optional != null ) returnedStderr = Optional.empty();
IjProjectCommandHelper.java,BuildRuleResolver buildRuleResolver = actionGraph.getResolver();,if (actionGraph != null ) BuildRuleResolver buildRuleResolver = actionGraph.getResolver();
CachingBuildEngine.java,firstFailure = input.getFailure();,if (input != null ) firstFailure = input.getFailure();
FakeProjectFilesystem.java,Path subPath = iterator.next();,if (iterator != null ) Path subPath = iterator.next();
FakeProjectFilesystem.java,Path subPath = iterator.next();,if (iterator != null ) Path subPath = iterator.next();
Depfiles.java,ImmutableList<String> prereqs = Depfiles.parseDepfile(reader).getPrereqs();,if (Depfiles != null ) ImmutableList<String> prereqs = Depfiles.parseDepfile(reader).getPrereqs();
Depfiles.java,int inputIndex = prereqs.indexOf(inputPath.toString());,if (prereqs != null ) int inputIndex = prereqs.indexOf(inputPath.toString());
Depfiles.java,ImmutableList<String> prereqs = Depfiles.parseDepfile(reader).getPrereqs();,if (Depfiles != null ) ImmutableList<String> prereqs = Depfiles.parseDepfile(reader).getPrereqs();
Depfiles.java,int inputIndex = prereqs.indexOf(inputPath.toString());,if (prereqs != null ) int inputIndex = prereqs.indexOf(inputPath.toString());
Depfiles.java,Path header = filesystem.resolve(rawHeader).normalize();,if (filesystem != null ) Path header = filesystem.resolve(rawHeader).normalize();
Depfiles.java,header = header.toRealPath();,if (header != null ) header = header.toRealPath();
AndroidBinaryBuildable.java,this.nativeLibAssetsDirectories = packageableCollection.getNativeLibAssetsDirectories();,if (packageableCollection != null ) this.nativeLibAssetsDirectories = packageableCollection.getNativeLibAssetsDirectories();
AndroidBinaryBuildable.java,this.apkModules = enhancementResult.getAPKModuleGraph().getAPKModules();,if (enhancementResult != null ) this.apkModules = enhancementResult.getAPKModuleGraph().getAPKModules();
APKModuleGraph.java,APKModule seed = entry.getValue().build();,if (entry != null ) APKModule seed = entry.getValue().build();
APKModuleGraph.java,APKModule shared = entry.getValue().build();,if (entry != null ) APKModule shared = entry.getValue().build();
APKModuleGraph.java,ImmutableSet<BuildTarget> rootTargets = rootAPKModuleSupplier.get().getBuildTargets();,if (rootAPKModuleSupplier != null ) ImmutableSet<BuildTarget> rootTargets = rootAPKModuleSupplier.get().getBuildTargets();
ProjectView.java,repository = projectViewParameters.getPath().toString();,if (projectViewParameters != null ) repository = projectViewParameters.getPath().toString();
RuleKeyScopedHasher.java,final long hasherCount = hasher.getCount();,if (hasher != null ) final long hasherCount = hasher.getCount();
RuleKeyScopedHasher.java,final long hasherCount = hasher.getCount();,if (hasher != null ) final long hasherCount = hasher.getCount();
RuleKeyScopedHasher.java,final long hasherCount = hasher.getCount();,if (hasher != null ) final long hasherCount = hasher.getCount();
WorkerToolDescriptionTest.java,BuildRuleParams params = TestBuildRuleParams.create();,if (TestBuildRuleParams != null ) BuildRuleParams params = TestBuildRuleParams.create();
HgAutoSparseState.java,Path relativePath = hgRoot.relativize(path.toAbsolutePath());,if (hgRoot != null ) Path relativePath = hgRoot.relativize(path.toAbsolutePath());
HgCmdLineInterfaceIntegrationTest.java,String path = hgCmdLineInterface.extractRawManifest();,if (hgCmdLineInterface != null ) String path = hgCmdLineInterface.extractRawManifest();
HgCmdLineInterfaceIntegrationTest.java,String path = hgCmdLineInterface.extractRawManifest();,if (hgCmdLineInterface != null ) String path = hgCmdLineInterface.extractRawManifest();
KnownBuildRuleTypes.java,Optional<String> ndkVersion = androidConfig.getNdkVersion();,if (androidConfig != null ) Optional<String> ndkVersion = androidConfig.getNdkVersion();
KnownBuildRuleTypes.java,ndkVersion = androidDirectoryResolver.getNdkVersion();,if (androidDirectoryResolver != null ) ndkVersion = androidDirectoryResolver.getNdkVersion();
KnownBuildRuleTypes.java,Optional<Path> ndkRoot = androidDirectoryResolver.getNdkOrAbsent();,if (androidDirectoryResolver != null ) Optional<Path> ndkRoot = androidDirectoryResolver.getNdkOrAbsent();
JavaLibraryRules.java,JavaPackageFinder finder = context.getJavaPackageFinder();,if (context != null ) JavaPackageFinder finder = context.getJavaPackageFinder();
JavaLibraryRules.java,Path output = outputJar.get();,if (outputJar != null ) Path output = outputJar.get();
JavaLibraryRules.java,usedClassesFileWriter = NoOpClassUsageFileWriter.instance();,if (NoOpClassUsageFileWriter != null ) usedClassesFileWriter = NoOpClassUsageFileWriter.instance();
AndroidBinaryBuildable.java,Optional<PreDexMerge> preDexMerge = enhancementResult.getPreDexMerge();,if (enhancementResult != null ) Optional<PreDexMerge> preDexMerge = enhancementResult.getPreDexMerge();
AndroidBinary.java,this.keystorePath = keystore.getPathToStore();,if (keystore != null ) this.keystorePath = keystore.getPathToStore();
AndroidBinary.java,this.keystorePropertiesPath = keystore.getPathToPropertiesFile();,if (keystore != null ) this.keystorePropertiesPath = keystore.getPathToPropertiesFile();
AndroidBinary.java,this.androidManifestPath = enhancementResult.getAndroidManifestPath();,if (enhancementResult != null ) this.androidManifestPath = enhancementResult.getAndroidManifestPath();
AndroidBinary.java,this.resourcesApkPath = enhancementResult.getPrimaryResourcesApkPath();,if (enhancementResult != null ) this.resourcesApkPath = enhancementResult.getPrimaryResourcesApkPath();
AndroidBinary.java,this.primaryApkAssetsZips = enhancementResult.getPrimaryApkAssetZips();,if (enhancementResult != null ) this.primaryApkAssetsZips = enhancementResult.getPrimaryApkAssetZips();
AndroidBinary.java,this.proguardConfigs = enhancementResult.getProguardConfigs();,if (enhancementResult != null ) this.proguardConfigs = enhancementResult.getProguardConfigs();
AndroidBinary.java,boolean shouldPackageAssetLibraries = packageAssetLibraries || !module.isRootModule();,if (!module != null ) boolean shouldPackageAssetLibraries = packageAssetLibraries || !module.isRootModule();
AndroidBinary.java,SourcePathResolver resolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver resolver = context.getSourcePathResolver();
AndroidBinary.java,boolean applyRedex = redexOptions.isPresent();,if (redexOptions != null ) boolean applyRedex = redexOptions.isPresent();
AndroidBinary.java,String name = inputEntry.getName();,if (inputEntry != null ) String name = inputEntry.getName();
AndroidBinary.java,String desiredOutput = relativeLibPath.toString();,if (relativeLibPath != null ) String desiredOutput = relativeLibPath.toString();
AndroidBinary.java,ImmutableList<String> metadata = metadataLines.build();,if (metadataLines != null ) ImmutableList<String> metadata = metadataLines.build();
AndroidBinary.java,classpathEntriesToDex = outDirPaths.build();,if (outDirPaths != null ) classpathEntriesToDex = outDirPaths.build();
AndroidBinary.java,AndroidPlatformTarget platformTarget = context.getAndroidPlatformTarget();,if (context != null ) AndroidPlatformTarget platformTarget = context.getAndroidPlatformTarget();
AndroidBinary.java,Optional<PreDexMerge> preDexMerge = enhancementResult.getPreDexMerge();,if (enhancementResult != null ) Optional<PreDexMerge> preDexMerge = enhancementResult.getPreDexMerge();
AndroidBinary.java,Path dirName = classpathEntry.getParent();,if (classpathEntry != null ) Path dirName = classpathEntry.getParent();
AndroidBinary.java,SourcePathResolver resolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver resolver = buildContext.getSourcePathResolver();
AndroidBinary.java,Optional<Path> proguardFullConfigFile = Optional.empty();,if (Optional != null ) Optional<Path> proguardFullConfigFile = Optional.empty();
AndroidBinary.java,Optional<Path> proguardMappingFile = Optional.empty();,if (Optional != null ) Optional<Path> proguardMappingFile = Optional.empty();
AndroidBinary.java,additionalDexDirs = Optional.empty();,if (Optional != null ) additionalDexDirs = Optional.empty();
AndroidBinary.java,Path dexStorePath = additionalDexAssetsDir.resolve(dexStore.getName());,if (additionalDexAssetsDir != null ) Path dexStorePath = additionalDexAssetsDir.resolve(dexStore.getName());
AndroidBinary.java,additionalDexDirs = Optional.of(builder.build());,if (Optional != null ) additionalDexDirs = Optional.of(builder.build());
AndroidBinary.java,secondaryDexDir = Optional.empty();,if (Optional != null ) secondaryDexDir = Optional.empty();
AndroidBinary.java,secondaryOutputToInputs = Optional.empty();,if (Optional != null ) secondaryOutputToInputs = Optional.empty();
AndroidBinary.java,String primaryDexFileName = primaryDexPath.getFileName().toString();,if (primaryDexPath != null ) String primaryDexFileName = primaryDexPath.getFileName().toString();
MoveResourceFiles.java,String basePath = project.getBasePath();,if (project != null ) String basePath = project.getBasePath();
MoveResourceFiles.java,String selectionName = selection.getPath();,if (selection != null ) String selectionName = selection.getPath();
MoveResourceFiles.java,String selectionSuffix = selectionName.substring(basePath.length());,if (selectionName != null ) String selectionSuffix = selectionName.substring(basePath.length());
MoveResourceFiles.java,realSelectionPath = selectionPath.toRealPath().toString();,if (selectionPath != null ) realSelectionPath = selectionPath.toRealPath().toString();
MoveResourceFiles.java,Module[] modules = moduleManager.getModules();,if (moduleManager != null ) Module[] modules = moduleManager.getModules();
MoveResourceFiles.java,Facet[] facets = facetManager.getAllFacets();,if (facetManager != null ) Facet[] facets = facetManager.getAllFacets();
MoveResourceFiles.java,VirtualFile[] selectedFiles = fileEditorManager.getSelectedFiles();,if (fileEditorManager != null ) VirtualFile[] selectedFiles = fileEditorManager.getSelectedFiles();
MoveResourceFiles.java,String newFile = event.getPath();,if (event != null ) String newFile = event.getPath();
MoveResourceFiles.java,Object requestor = event.getRequestor();,if (event != null ) Object requestor = event.getRequestor();
MoveResourceFiles.java,String repo = selectedContext.getRepositoryPath();,if (selectedContext != null ) String repo = selectedContext.getRepositoryPath();
MoveResourceFiles.java,String basePath = selectedContext.project.getBasePath();,if (selectedContext != null ) String basePath = selectedContext.project.getBasePath();
Machos.java,string = fixed.get();,if (fixed != null ) string = fixed.get();
PythonBuckConfig.java,File python = new File(configPath.get());,if (File(configPath != null ) File python = new File(configPath.get());
PythonBuckConfig.java,pythonInterpreterNames = ImmutableList.of(configPath.get());,if (ImmutableList != null ) pythonInterpreterNames = ImmutableList.of(configPath.get());
BuckFoldingBuilder.java,IElementType type = compositeElement.getElementType();,if (compositeElement != null ) IElementType type = compositeElement.getElementType();
RandomizedTrial.java,sumOfAllProbabilities += value.getProbability();,if (value != null ) sumOfAllProbabilities += value.getProbability();
RandomizedTrial.java,double groupProbabilityHighPoint = groupProbabilityLowPoint + value.getProbability();,if (value != null ) double groupProbabilityHighPoint = groupProbabilityLowPoint + value.getProbability();
CxxPrecompiledHeader.java,Iterator<String> it = flags.iterator();,if (flags != null ) Iterator<String> it = flags.iterator();
CxxPrecompiledHeader.java,String flag = it.next();,if (it != null ) String flag = it.next();
AndroidNativeLibsPackageableGraphEnhancer.java,NdkCxxRuntime cxxRuntime = platform.getCxxRuntime();,if (platform != null ) NdkCxxRuntime cxxRuntime = platform.getCxxRuntime();
AndroidNativeLibsPackageableGraphEnhancer.java,stripLinkable = (StripLinkable) previouslyCreated.get();,if (previouslyCreated != null ) stripLinkable = (StripLinkable) previouslyCreated.get();
AppleSdkDiscovery.java,sdkDir = sdkDir.toRealPath();,if (sdkDir != null ) sdkDir = sdkDir.toRealPath();
AppleSdkDiscoveryTest.java,Path root = temp.newFolder();,if (temp != null ) Path root = temp.newFolder();
AdbHelper.java,PrintStream stdOut = getConsole().getStdOut();,if (getConsole() != null ) PrintStream stdOut = getConsole().getStdOut();
AppleDescriptions.java,BuildTarget buildTarget = buildTargetBuilder.build();,if (buildTargetBuilder != null ) BuildTarget buildTarget = buildTargetBuilder.build();
AbstractBuildTarget.java,BuildTarget.Builder builder = BuildTarget.builder();,if (BuildTarget != null ) BuildTarget.Builder builder = BuildTarget.builder();
ProjectView.java,Path view = Paths.get(viewPath).toAbsolutePath();,if (Paths != null ) Path view = Paths.get(viewPath).toAbsolutePath();
ProjectView.java,Path repo = Paths.get(repository).toAbsolutePath();,if (Paths != null ) Path repo = Paths.get(repository).toAbsolutePath();
BuildCommand.java,DistBuildConfig distBuildConfig = new DistBuildConfig(params.getBuckConfig());,if (DistBuildConfig(params != null ) DistBuildConfig distBuildConfig = new DistBuildConfig(params.getBuckConfig());
BuildCommand.java,DistBuildConfig distBuildConfig = new DistBuildConfig(params.getBuckConfig());,if (DistBuildConfig(params != null ) DistBuildConfig distBuildConfig = new DistBuildConfig(params.getBuckConfig());
CachingBuildEngine.java,long start = System.nanoTime();,if (System != null ) long start = System.nanoTime();
CachingBuildEngine.java,Optional<BuildTarget> optionalTarget = Optional.of(rule.getBuildTarget());,if (Optional != null ) Optional<BuildTarget> optionalTarget = Optional.of(rule.getBuildTarget());
CachingBuildEngine.java,long end = System.nanoTime();,if (System != null ) long end = System.nanoTime();
AbstractJavacOptions.java,Path generateTo = annotationProcessingParams.getGeneratedSourceFolderName();,if (annotationProcessingParams != null ) Path generateTo = annotationProcessingParams.getGeneratedSourceFolderName();
JavacToJarStepFactory.java,Optional<Path> annotationGenFolder = buildTimeOptions.getGeneratedSourceFolderName();,if (buildTimeOptions != null ) Optional<Path> annotationGenFolder = buildTimeOptions.getGeneratedSourceFolderName();
DefaultJavaLibrary.java,this.outputJar = Optional.empty();,if (Optional != null ) this.outputJar = Optional.empty();
DefaultJavaLibrary.java,BuildTarget buildTarget = this.getBuildTarget();,if (this != null ) BuildTarget buildTarget = this.getBuildTarget();
DefaultJavaLibrary.java,ProjectFilesystem projectFilesystem = this.getProjectFilesystem();,if (this != null ) ProjectFilesystem projectFilesystem = this.getProjectFilesystem();
DefaultJavaLibrary.java,BuildRule rule = ruleFinder.getRule(sourcePath).get();,if (ruleFinder != null ) BuildRule rule = ruleFinder.getRule(sourcePath).get();
JarBuilder.java,CustomZipEntry entry = supplier.getEntry();,if (supplier != null ) CustomZipEntry entry = supplier.getEntry();
JarBuilder.java,String entryKey = pathToClassName(entry.getName());,if (pathToClassName(entry != null ) String entryKey = pathToClassName(entry.getName());
DistBuildRunCommand.java,Stopwatch stopwatch = Stopwatch.createStarted();,if (Stopwatch != null ) Stopwatch stopwatch = Stopwatch.createStarted();
DistBuildRunCommand.java,int returnCode = distBuildExecutor.buildAndReturnExitCode();,if (distBuildExecutor != null ) int returnCode = distBuildExecutor.buildAndReturnExitCode();
CachingBuildEngineTest.java,BuildResult result = buildResult.get();,if (buildResult != null ) BuildResult result = buildResult.get();
CachingBuildEngineTest.java,CachingBuildEngine cachingBuildEngine = cachingBuildEngineFactory().build();,if (cachingBuildEngineFactory() != null ) CachingBuildEngine cachingBuildEngine = cachingBuildEngineFactory().build();
CachingBuildEngineTest.java,BuildResult result = buildResult.get();,if (buildResult != null ) BuildResult result = buildResult.get();
CachingBuildEngineTest.java,CachingBuildEngine cachingBuildEngine = cachingBuildEngineFactory().build();,if (cachingBuildEngineFactory() != null ) CachingBuildEngine cachingBuildEngine = cachingBuildEngineFactory().build();
CachingBuildEngineTest.java,BuildResult result = buildResult.get();,if (buildResult != null ) BuildResult result = buildResult.get();
CachingBuildEngineTest.java,CachingBuildEngine cachingBuildEngine = cachingBuildEngineFactory().build();,if (cachingBuildEngineFactory() != null ) CachingBuildEngine cachingBuildEngine = cachingBuildEngineFactory().build();
CachingBuildEngineTest.java,List<BuckEvent> events = listener.getEvents();,if (listener != null ) List<BuckEvent> events = listener.getEvents();
CachingBuildEngineTest.java,List<BuckEvent> events = listener.getEvents();,if (listener != null ) List<BuckEvent> events = listener.getEvents();
CachingBuildEngineTest.java,CachingBuildEngine cachingBuildEngine = cachingBuildEngineFactory().build();,if (cachingBuildEngineFactory() != null ) CachingBuildEngine cachingBuildEngine = cachingBuildEngineFactory().build();
CachingBuildEngineTest.java,List<BuckEvent> events = listener.getEvents();,if (listener != null ) List<BuckEvent> events = listener.getEvents();
CachingBuildEngineTest.java,CachingBuildEngine cachingBuildEngine = cachingBuildEngineFactory().build();,if (cachingBuildEngineFactory() != null ) CachingBuildEngine cachingBuildEngine = cachingBuildEngineFactory().build();
CachingBuildEngineTest.java,CachingBuildEngine cachingBuildEngine = cachingBuildEngineFactory().build();,if (cachingBuildEngineFactory() != null ) CachingBuildEngine cachingBuildEngine = cachingBuildEngineFactory().build();
CachingBuildEngineTest.java,CachingBuildEngine cachingBuildEngine = cachingBuildEngineFactory().build();,if (cachingBuildEngineFactory() != null ) CachingBuildEngine cachingBuildEngine = cachingBuildEngineFactory().build();
CachingBuildEngineTest.java,CachingBuildEngine cachingBuildEngine = cachingBuildEngineFactory().build();,if (cachingBuildEngineFactory() != null ) CachingBuildEngine cachingBuildEngine = cachingBuildEngineFactory().build();
CachingBuildEngineTest.java,CachingBuildEngine cachingBuildEngine = cachingBuildEngineFactory().build();,if (cachingBuildEngineFactory() != null ) CachingBuildEngine cachingBuildEngine = cachingBuildEngineFactory().build();
CachingBuildEngineTest.java,CachingBuildEngine cachingBuildEngine = cachingBuildEngineFactory().build();,if (cachingBuildEngineFactory() != null ) CachingBuildEngine cachingBuildEngine = cachingBuildEngineFactory().build();
AndroidBinaryNonExoInstaller.java,this.exoSourcePaths = getApkInfoSourcePaths(apk.getApkInfo());,if (getApkInfoSourcePaths(apk != null ) this.exoSourcePaths = getApkInfoSourcePaths(apk.getApkInfo());
ExopackageInstaller.java,this.projectFilesystem = apkRule.getProjectFilesystem();,if (apkRule != null ) this.projectFilesystem = apkRule.getProjectFilesystem();
ExopackageInstaller.java,Optional<ExopackageInfo> exopackageInfo = apkRule.getApkInfo().getExopackageInfo();,if (apkRule != null ) Optional<ExopackageInfo> exopackageInfo = apkRule.getApkInfo().getExopackageInfo();
MultiArtifactCache.java,CacheResult cacheResult = CacheResult.miss();,if (CacheResult != null ) CacheResult cacheResult = CacheResult.miss();
ResourcesLoader.java,AssetManager assetManager = AssetManager.class.getConstructor().newInstance();,if (AssetManager != null ) AssetManager assetManager = AssetManager.class.getConstructor().newInstance();
AnnotationProcessor.java,Filer filer = processingEnv.getFiler();,if (processingEnv != null ) Filer filer = processingEnv.getFiler();
CalculateAbiFromSourceIntegrationTest.java,Manifest manifest = abiJar.getManifest();,if (abiJar != null ) Manifest manifest = abiJar.getManifest();
AndroidLibrary.java,Query providedDepsQuery = androidArgs.getProvidedDepsQuery().get();,if (androidArgs != null ) Query providedDepsQuery = androidArgs.getProvidedDepsQuery().get();
CachingQueryEvaluator.java,this.cache = CacheBuilder.newBuilder().build();,if (CacheBuilder != null ) this.cache = CacheBuilder.newBuilder().build();
QueryUtils.java,Query query = castedArg.getDepsQuery().get();,if (castedArg != null ) Query query = castedArg.getDepsQuery().get();
QueryUtils.java,Query query = castedArg.getProvidedDepsQuery().get();,if (castedArg != null ) Query query = castedArg.getProvidedDepsQuery().get();
AbstractCxxSourceRuleFactory.java,"CxxToolFlags cFlags = computeCompilerFlags(source.getType(), source.getFlags());","if (source != null ) CxxToolFlags cFlags = computeCompilerFlags(source.getType(), source.getFlags());"
BuildRuleResolver.java,rule = ruleSupplier.get();,if (ruleSupplier != null ) rule = ruleSupplier.get();
MountsCommand.java,Optional<EdenClient> clientOptional = EdenClient.newInstance();,if (EdenClient != null ) Optional<EdenClient> clientOptional = EdenClient.newInstance();
MountsCommand.java,EdenClient client = clientOptional.get();,if (clientOptional != null ) EdenClient client = clientOptional.get();
Sha1Command.java,Optional<EdenClient> client = EdenClient.newInstance();,if (EdenClient != null ) Optional<EdenClient> client = EdenClient.newInstance();
JarBuilder.java,CustomZipEntry entry = supplier.getEntry();,if (supplier != null ) CustomZipEntry entry = supplier.getEntry();
JarBuilder.java,String entryKey = pathToClassName(entry.getName());,if (pathToClassName(entry != null ) String entryKey = pathToClassName(entry.getName());
AndroidAppModularityDescription.java,AndroidPackageableCollection packageableCollection = collector.build();,if (collector != null ) AndroidPackageableCollection packageableCollection = collector.build();
RobolectricTest.java,SourcePath resSourcePath = hasAndroidResourceDeps.getRes();,if (hasAndroidResourceDeps != null ) SourcePath resSourcePath = hasAndroidResourceDeps.getRes();
RobolectricTest.java,SourcePath assetsSourcePath = hasAndroidResourceDeps.getAssets();,if (hasAndroidResourceDeps != null ) SourcePath assetsSourcePath = hasAndroidResourceDeps.getAssets();
IjProjectTemplateDataPreparer.java,Optional<Path> androidManifestPath = androidFacet.getManifestPath();,if (androidFacet != null ) Optional<Path> androidManifestPath = androidFacet.getManifestPath();
TestAndroidDevice.java,this.deviceAgentPackageInfo = Optional.empty();,if (Optional != null ) this.deviceAgentPackageInfo = Optional.empty();
TestAndroidDevice.java,this.fakePackageInfo = Optional.empty();,if (Optional != null ) this.fakePackageInfo = Optional.empty();
TestAndroidDevice.java,packageSignature = AgentUtil.getJarSignature(apk.toString());,if (AgentUtil != null ) packageSignature = AgentUtil.getJarSignature(apk.toString());
TestAndroidDevice.java,String dir = dirPath.toString();,if (dirPath != null ) String dir = dirPath.toString();
TestAndroidDevice.java,dirPath = dirPath.getParent();,if (dirPath != null ) dirPath = dirPath.getParent();
ExopackageInstallerIntegrationTest.java,this.deviceAgentPackageInfo = Optional.empty();,if (Optional != null ) this.deviceAgentPackageInfo = Optional.empty();
ExopackageInstallerIntegrationTest.java,this.fakePackageInfo = Optional.empty();,if (Optional != null ) this.fakePackageInfo = Optional.empty();
ExopackageInstallerIntegrationTest.java,packageSignature = AgentUtil.getJarSignature(apk.toString());,if (AgentUtil != null ) packageSignature = AgentUtil.getJarSignature(apk.toString());
ExopackageInstallerIntegrationTest.java,String dir = dirPath.toString();,if (dirPath != null ) String dir = dirPath.toString();
ExopackageInstallerIntegrationTest.java,dirPath = dirPath.getParent();,if (dirPath != null ) dirPath = dirPath.getParent();
ExopackageInstallerIntegrationTest.java,deviceAgentPackageInfo = Optional.empty();,if (Optional != null ) deviceAgentPackageInfo = Optional.empty();
ExopackageInstallerIntegrationTest.java,fakePackageInfo = Optional.empty();,if (Optional != null ) fakePackageInfo = Optional.empty();
SourcePathResolver.java,Path archiveAbsolutePath = getAbsolutePath(archiveMemberSourcePath.getArchiveSourcePath());,if (getAbsolutePath(archiveMemberSourcePath != null ) Path archiveAbsolutePath = getAbsolutePath(archiveMemberSourcePath.getArchiveSourcePath());
SourcePathResolver.java,Path archiveRelativePath = getRelativePath(archiveMemberSourcePath.getArchiveSourcePath());,if (getRelativePath(archiveMemberSourcePath != null ) Path archiveRelativePath = getRelativePath(archiveMemberSourcePath.getArchiveSourcePath());
SourcePathResolver.java,SourcePath path = ruleFinder.getRule(targetSourcePath).getSourcePathToOutput();,if (ruleFinder != null ) SourcePath path = ruleFinder.getRule(targetSourcePath).getSourcePathToOutput();
MiniAaptTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
QueryCommand.java,"QueryExpression expr = QueryExpression.parse(query, env.getFunctions());","if (env != null ) QueryExpression expr = QueryExpression.parse(query, env.getFunctions());"
QueryMacroExpander.java,"QueryExpression parsedExp = QueryExpression.parse(queryExpression, env.getFunctions());","if (env != null ) QueryExpression parsedExp = QueryExpression.parse(queryExpression, env.getFunctions());"
QueryMacroExpander.java,"QueryExpression parsedExp = QueryExpression.parse(queryExpression, env.getFunctions());","if (env != null ) QueryExpression parsedExp = QueryExpression.parse(queryExpression, env.getFunctions());"
QueryParserTest.java,"QueryExpression result = QueryParser.parse(query, queryEnvironment.getFunctions());","if (queryEnvironment != null ) QueryExpression result = QueryParser.parse(query, queryEnvironment.getFunctions());"
QueryParserTest.java,"QueryExpression result = QueryParser.parse(query, queryEnvironment.getFunctions());","if (queryEnvironment != null ) QueryExpression result = QueryParser.parse(query, queryEnvironment.getFunctions());"
AdbHelper.java,InstallEvent.Started started = InstallEvent.started(hasInstallableApk.getBuildTarget());,if (InstallEvent != null ) InstallEvent.Started started = InstallEvent.started(hasInstallableApk.getBuildTarget());
AdbHelper.java,Optional<ExopackageInfo> exopackageInfo = hasInstallableApk.getApkInfo().getExopackageInfo();,if (hasInstallableApk != null ) Optional<ExopackageInfo> exopackageInfo = hasInstallableApk.getApkInfo().getExopackageInfo();
AdbHelper.java,List<String> launcherActivities = reader.getLauncherActivities();,if (reader != null ) List<String> launcherActivities = reader.getLauncherActivities();
AdbHelper.java,PrintStream stdOut = getConsole().getStdOut();,if (getConsole() != null ) PrintStream stdOut = getConsole().getStdOut();
AdbHelper.java,Path pathToManifest = pathResolver.getAbsolutePath(apkInfo.getManifestPath());,if (pathResolver != null ) Path pathToManifest = pathResolver.getAbsolutePath(apkInfo.getManifestPath());
AdbHelper.java,Path pathToManifest = pathResolver.getAbsolutePath(apkInfo.getManifestPath());,if (pathResolver != null ) Path pathToManifest = pathResolver.getAbsolutePath(apkInfo.getManifestPath());
AdbHelper.java,String fullOutput = receiver.getOutput();,if (receiver != null ) String fullOutput = receiver.getOutput();
AdbHelper.java,int adbThreadCount = options.getAdbThreadCount();,if (options != null ) int adbThreadCount = options.getAdbThreadCount();
AdbHelper.java,adbThreadCount = devices.size();,if (devices != null ) adbThreadCount = devices.size();
AdbHelper.java,results = Futures.allAsList(futures).get();,if (Futures != null ) results = Futures.allAsList(futures).get();
AdbHelper.java,InstallEvent.Started started = InstallEvent.started(hasInstallableApk.getBuildTarget());,if (InstallEvent != null ) InstallEvent.Started started = InstallEvent.started(hasInstallableApk.getBuildTarget());
ExopackageInstaller.java,InstallEvent.Started started = InstallEvent.started(apkRule.getBuildTarget());,if (InstallEvent != null ) InstallEvent.Started started = InstallEvent.started(apkRule.getBuildTarget());
ExopackageInstaller.java,String result = output.trim();,if (output != null ) String result = output.trim();
AdbHelper.java,name = device.getSerialNumber();,if (device != null ) name = device.getSerialNumber();
AdbHelper.java,"reason = deviceInstallPackageViaSd(device, apk.getAbsolutePath());","if (apk != null ) reason = deviceInstallPackageViaSd(device, apk.getAbsolutePath());"
AdbHelper.java,String logMessage = loggingInfo.toString();,if (loggingInfo != null ) String logMessage = loggingInfo.toString();
AdbHelper.java,String value = receiver.getOutput().trim();,if (receiver != null ) String value = receiver.getOutput().trim();
AdbHelper.java,name = device.getSerialNumber();,if (device != null ) name = device.getSerialNumber();
AdbHelper.java,PrintStream stdOut = getConsole().getStdOut();,if (getConsole() != null ) PrintStream stdOut = getConsole().getStdOut();
AdbHelper.java,long start = System.currentTimeMillis();,if (System != null ) long start = System.currentTimeMillis();
AdbHelper.java,long end = System.currentTimeMillis();,if (System != null ) long end = System.currentTimeMillis();
IjSourceRootSimplifier.java,Path parent = path.getParent();,if (path != null ) Path parent = path.getParent();
HaskellDescriptionUtils.java,String name = target.getShortName();,if (target != null ) String name = target.getShortName();
RunSelectedTestAction.java,executor = DefaultDebugExecutor.getDebugExecutorInstance();,if (DefaultDebugExecutor != null ) executor = DefaultDebugExecutor.getDebugExecutorInstance();
AbstractContainerCommand.java,String name = subCommand.name();,if (subCommand != null ) String name = subCommand.name();
AbstractContainerCommand.java,lengthOfLongestCommand = name.length();,if (name != null ) lengthOfLongestCommand = name.length();
NewNativeTargetProjectMutator.java,JsBundleDescriptionArg args = (JsBundleDescriptionArg) targetNode.getConstructorArg();,if (targetNode != null ) JsBundleDescriptionArg args = (JsBundleDescriptionArg) targetNode.getConstructorArg();
NewNativeTargetProjectMutator.java,BuildRule rule = resolver.getRule(targetNode.getBuildTarget());,if (resolver != null ) BuildRule rule = resolver.getRule(targetNode.getBuildTarget());
NewNativeTargetProjectMutator.java,SourcePath jsOutput = bundle.getSourcePathToOutput();,if (bundle != null ) SourcePath jsOutput = bundle.getSourcePathToOutput();
NewNativeTargetProjectMutator.java,SourcePath resOutput = bundle.getSourcePathToResources();,if (bundle != null ) SourcePath resOutput = bundle.getSourcePathToResources();
AndroidAar.java,BuildTarget buildTarget = params.getBuildTarget();,if (params != null ) BuildTarget buildTarget = params.getBuildTarget();
AndroidAppModularityDescription.java,BuildTarget target = params.getBuildTarget();,if (params != null ) BuildTarget target = params.getBuildTarget();
AndroidBinaryDescription.java,BuildTarget target = params.getBuildTarget();,if (params != null ) BuildTarget target = params.getBuildTarget();
AndroidBinaryGraphEnhancer.java,this.originalBuildTarget = originalParams.getBuildTarget();,if (originalParams != null ) this.originalBuildTarget = originalParams.getBuildTarget();
AndroidBuildConfigDescription.java,BuildTarget configTarget = HasJavaAbi.getLibraryTarget(params.getBuildTarget());,if (HasJavaAbi != null ) BuildTarget configTarget = HasJavaAbi.getLibraryTarget(params.getBuildTarget());
AndroidLibrary.java,BuildTarget buildTarget = initialParams.getBuildTarget();,if (initialParams != null ) BuildTarget buildTarget = initialParams.getBuildTarget();
AndroidManifest.java,BuildTarget buildTarget = params.getBuildTarget();,if (params != null ) BuildTarget buildTarget = params.getBuildTarget();
AndroidNativeLibsPackageableGraphEnhancer.java,this.originalBuildTarget = originalParams.getBuildTarget();,if (originalParams != null ) this.originalBuildTarget = originalParams.getBuildTarget();
AndroidPrebuiltAarDescription.java,ImmutableSet<Flavor> flavors = params.getBuildTarget().getFlavors();,if (params != null ) ImmutableSet<Flavor> flavors = params.getBuildTarget().getFlavors();
AndroidResource.java,BuildTarget buildTarget = buildRuleParams.getBuildTarget();,if (buildRuleParams != null ) BuildTarget buildTarget = buildRuleParams.getBuildTarget();
AndroidResourceDescription.java,ImmutableSortedSet<Flavor> flavors = params.getBuildTarget().getFlavors();,if (params != null ) ImmutableSortedSet<Flavor> flavors = params.getBuildTarget().getFlavors();
GenAidl.java,BuildTarget buildTarget = params.getBuildTarget();,if (params != null ) BuildTarget buildTarget = params.getBuildTarget();
NdkLibrary.java,BuildTarget buildTarget = params.getBuildTarget();,if (params != null ) BuildTarget buildTarget = params.getBuildTarget();
RobolectricTestDescription.java,BuildTarget testTarget = HasJavaAbi.getLibraryTarget(params.getBuildTarget());,if (HasJavaAbi != null ) BuildTarget testTarget = HasJavaAbi.getLibraryTarget(params.getBuildTarget());
UnzipAar.java,BuildTarget buildTarget = buildRuleParams.getBuildTarget();,if (buildRuleParams != null ) BuildTarget buildTarget = buildRuleParams.getBuildTarget();
AppleBinaryDescription.java,Optional<BuildRule> existingThinRule = resolver.getRuleOptional(params.getBuildTarget());,if (resolver != null ) Optional<BuildRule> existingThinRule = resolver.getRuleOptional(params.getBuildTarget());
AppleBinaryDescription.java,ImmutableSortedSet<Flavor> flavors = params.getBuildTarget().getFlavors();,if (params != null ) ImmutableSortedSet<Flavor> flavors = params.getBuildTarget().getFlavors();
AppleDescriptions.java,ImmutableSet<Flavor> flavors = params.getBuildTarget().getFlavors();,if (params != null ) ImmutableSet<Flavor> flavors = params.getBuildTarget().getFlavors();
AppleTestDescription.java,params = params.withoutFlavor(debugFormat.getFlavor());,if (params != null ) params = params.withoutFlavor(debugFormat.getFlavor());
BuiltinApplePackage.java,BuildTarget buildTarget = params.getBuildTarget();,if (params != null ) BuildTarget buildTarget = params.getBuildTarget();
PrebuiltAppleFramework.java,BuildTarget target = params.getBuildTarget();,if (params != null ) BuildTarget target = params.getBuildTarget();
CxxGenruleDescription.java,Optional<CxxPlatform> cxxPlatform = cxxPlatforms.getValue(params.getBuildTarget());,if (cxxPlatforms != null ) Optional<CxxPlatform> cxxPlatform = cxxPlatforms.getValue(params.getBuildTarget());
CxxLibraryDescription.java,BuildTarget buildTarget = metadataRuleParams.getBuildTarget();,if (metadataRuleParams != null ) BuildTarget buildTarget = metadataRuleParams.getBuildTarget();
PrebuiltCxxLibraryDescription.java,BuildTarget target = params.getBuildTarget();,if (params != null ) BuildTarget target = params.getBuildTarget();
DDescriptionUtils.java,BuildTarget buildTarget = params.getBuildTarget();,if (params != null ) BuildTarget buildTarget = params.getBuildTarget();
DTestDescription.java,BuildTarget target = params.getBuildTarget();,if (params != null ) BuildTarget target = params.getBuildTarget();
GoDescriptors.java,BuildTarget target = createSymlinkTreeTarget(params.getBuildTarget());,if (createSymlinkTreeTarget(params != null ) BuildTarget target = createSymlinkTreeTarget(params.getBuildTarget());
GoDescriptors.java,BuildTarget target = createTransitiveSymlinkTreeTarget(params.getBuildTarget());,if (createTransitiveSymlinkTreeTarget(params != null ) BuildTarget target = createTransitiveSymlinkTreeTarget(params.getBuildTarget());
GwtBinary.java,BuildTarget buildTarget = buildRuleParams.getBuildTarget();,if (buildRuleParams != null ) BuildTarget buildTarget = buildRuleParams.getBuildTarget();
GwtModule.java,BuildTarget target = params.getBuildTarget();,if (params != null ) BuildTarget target = params.getBuildTarget();
HalideLibraryDescription.java,BuildTarget buildTarget = halideCompile.getBuildTarget();,if (halideCompile != null ) BuildTarget buildTarget = halideCompile.getBuildTarget();
HalideLibraryDescription.java,BuildTarget target = params.getBuildTarget();,if (params != null ) BuildTarget target = params.getBuildTarget();
HalideLibraryDescription.java,ImmutableSet<Flavor> flavors = ImmutableSet.copyOf(target.getFlavors());,if (ImmutableSet != null ) ImmutableSet<Flavor> flavors = ImmutableSet.copyOf(target.getFlavors());
HaskellLibraryDescription.java,final BuildTarget buildTarget = params.getBuildTarget();,if (params != null ) final BuildTarget buildTarget = params.getBuildTarget();
JsLibraryDescription.java,BuildTarget buildTarget = baseParams.getBuildTarget();,if (baseParams != null ) BuildTarget buildTarget = baseParams.getBuildTarget();
JsLibraryDescription.java,BuildTarget buildTarget = baseParams.getBuildTarget();,if (baseParams != null ) BuildTarget buildTarget = baseParams.getBuildTarget();
JsLibraryDescription.java,final BuildTarget devTarget = withFileFlavorOnly(params.getBuildTarget());,if (withFileFlavorOnly(params != null ) final BuildTarget devTarget = withFileFlavorOnly(params.getBuildTarget());
ReactNativeBundle.java,BuildTarget buildTarget = ruleParams.getBuildTarget();,if (ruleParams != null ) BuildTarget buildTarget = ruleParams.getBuildTarget();
ReactNativeLibraryGraphEnhancer.java,BuildTarget originalBuildTarget = params.getBuildTarget();,if (params != null ) BuildTarget originalBuildTarget = params.getBuildTarget();
DefaultJavaLibraryBuilder.java,BuildTarget buildTarget = initialParams.getBuildTarget();,if (initialParams != null ) BuildTarget buildTarget = initialParams.getBuildTarget();
DefaultJavaLibraryBuilder.java,BuildTarget libraryTarget = initialParams.getBuildTarget();,if (initialParams != null ) BuildTarget libraryTarget = initialParams.getBuildTarget();
DefaultJavaLibraryBuilder.java,BuildTarget libraryTarget = HasJavaAbi.getLibraryTarget(initialParams.getBuildTarget());,if (HasJavaAbi != null ) BuildTarget libraryTarget = HasJavaAbi.getLibraryTarget(initialParams.getBuildTarget());
DefaultJavaLibraryBuilder.java,BuildTarget libraryTarget = HasJavaAbi.getLibraryTarget(initialParams.getBuildTarget());,if (HasJavaAbi != null ) BuildTarget libraryTarget = HasJavaAbi.getLibraryTarget(initialParams.getBuildTarget());
JavaLibraryDescription.java,BuildTarget target = params.getBuildTarget();,if (params != null ) BuildTarget target = params.getBuildTarget();
JavaLibraryDescription.java,ImmutableSortedSet<Flavor> flavors = target.getFlavors();,if (target != null ) ImmutableSortedSet<Flavor> flavors = target.getFlavors();
JavaLibraryDescription.java,BuildTarget unflavored = BuildTarget.of(target.getUnflavoredBuildTarget());,if (BuildTarget != null ) BuildTarget unflavored = BuildTarget.of(target.getUnflavoredBuildTarget());
JavaSourceJar.java,BuildTarget target = params.getBuildTarget();,if (params != null ) BuildTarget target = params.getBuildTarget();
PrebuiltJarDescription.java,BuildTarget target = params.getBuildTarget();,if (params != null ) BuildTarget target = params.getBuildTarget();
KotlinLibraryDescription.java,BuildTarget target = params.getBuildTarget();,if (params != null ) BuildTarget target = params.getBuildTarget();
KotlinLibraryDescription.java,ImmutableSortedSet<Flavor> flavors = target.getFlavors();,if (target != null ) ImmutableSortedSet<Flavor> flavors = target.getFlavors();
PrebuiltOcamlLibraryDescription.java,final BuildTarget target = params.getBuildTarget();,if (params != null ) final BuildTarget target = params.getBuildTarget();
PythonBinaryDescription.java,BuildTarget emptyInitTarget = getEmptyInitTarget(params.getBuildTarget());,if (getEmptyInitTarget(params != null ) BuildTarget emptyInitTarget = getEmptyInitTarget(params.getBuildTarget());
BuildRuleParams.java,Set<Flavor> flavors = Sets.newHashSet(getBuildTarget().getFlavors());,if (Sets != null ) Set<Flavor> flavors = Sets.newHashSet(getBuildTarget().getFlavors());
BuildRuleParams.java,Set<Flavor> flavors = Sets.newHashSet(getBuildTarget().getFlavors());,if (Sets != null ) Set<Flavor> flavors = Sets.newHashSet(getBuildTarget().getFlavors());
RustBinaryDescription.java,final BuildTarget buildTarget = params.getBuildTarget();,if (params != null ) final BuildTarget buildTarget = params.getBuildTarget();
RustCompileUtils.java,final BuildTarget buildTarget = params.getBuildTarget();,if (params != null ) final BuildTarget buildTarget = params.getBuildTarget();
RustLibraryDescription.java,final BuildTarget buildTarget = params.getBuildTarget();,if (params != null ) final BuildTarget buildTarget = params.getBuildTarget();
RustTestDescription.java,final BuildTarget buildTarget = params.getBuildTarget();,if (params != null ) final BuildTarget buildTarget = params.getBuildTarget();
ExportFileDescription.java,BuildTarget target = params.getBuildTarget();,if (params != null ) BuildTarget target = params.getBuildTarget();
ExportFileDescription.java,name = target.getShortNameAndFlavorPostfix();,if (target != null ) name = target.getShortNameAndFlavorPostfix();
Genrule.java,BuildTarget target = params.getBuildTarget();,if (params != null ) BuildTarget target = params.getBuildTarget();
ShBinary.java,BuildTarget target = params.getBuildTarget();,if (params != null ) BuildTarget target = params.getBuildTarget();
SwiftLibraryDescription.java,final BuildTarget buildTarget = params.getBuildTarget();,if (params != null ) final BuildTarget buildTarget = params.getBuildTarget();
SwiftLibraryDescription.java,BuildTarget buildTarget = params.getBuildTarget();,if (params != null ) BuildTarget buildTarget = params.getBuildTarget();
PrefixMapDebugPathSanitizer.java,this.other = pathsBuilder.build();,if (pathsBuilder != null ) this.other = pathsBuilder.build();
BuckSettingsProvider.java,state.buckExecutable = BuckExecutableDetector.getBuckExecutable();,if (BuckExecutableDetector != null ) state.buckExecutable = BuckExecutableDetector.getBuckExecutable();
BuckSettingsProvider.java,state.adbExecutable = BuckExecutableDetector.getAdbExecutable();,if (BuckExecutableDetector != null ) state.adbExecutable = BuckExecutableDetector.getAdbExecutable();
ParserTest.java,DaemonicParserState permState = parser.getPermState();,if (parser != null ) DaemonicParserState permState = parser.getPermState();
ParserTest.java,RemoteDaemonicParserState remote = permState.serialiseDaemonicParserState();,if (permState != null ) RemoteDaemonicParserState remote = permState.serialiseDaemonicParserState();
DebugPathSanitizer.java,String replacement = entry.getValue().toString();,if (entry != null ) String replacement = entry.getValue().toString();
AndroidBinaryDescription.java,boolean isFlavored = target.isFlavored();,if (target != null ) boolean isFlavored = target.isFlavored();
AndroidBinaryDescription.java,Optional<PackageStringAssets> packageStringAssets = result.getPackageStringAssets();,if (result != null ) Optional<PackageStringAssets> packageStringAssets = result.getPackageStringAssets();
OwnersReport.java,report = report.updatedWith(partialReport.get());,if (report != null ) report = report.updatedWith(partialReport.get());
AndroidInstrumentationTest.java,device = adb.getSingleDevice();,if (adb != null ) device = adb.getSingleDevice();
AndroidInstrumentationTest.java,device = adbHelper.getSingleDevice();,if (adbHelper != null ) device = adbHelper.getSingleDevice();
AdbHelper.java,PrintStream stdOut = console.getStdOut();,if (console != null ) PrintStream stdOut = console.getStdOut();
AdbHelper.java,PrintStream stdOut = console.getStdOut();,if (console != null ) PrintStream stdOut = console.getStdOut();
AdbHelperTest.java,BuckEventBus eventBus = BuckEventBusForTests.newInstance();,if (BuckEventBusForTests != null ) BuckEventBus eventBus = BuckEventBusForTests.newInstance();
AdbHelperTest.java,BuckEventBus eventBus = BuckEventBusForTests.newInstance();,if (BuckEventBusForTests != null ) BuckEventBus eventBus = BuckEventBusForTests.newInstance();
AdbHelperTest.java,BuckEventBus eventBus = BuckEventBusForTests.newInstance();,if (BuckEventBusForTests != null ) BuckEventBus eventBus = BuckEventBusForTests.newInstance();
HgAutoSparseState.java,Path directory = path.getParent();,if (path != null ) Path directory = path.getParent();
HgAutoSparseState.java,directory = directory.getParent();,if (directory != null ) directory = directory.getParent();
BuildCommand.java,DistBuildConfig distBuildConfig = new DistBuildConfig(params.getBuckConfig());,if (DistBuildConfig(params != null ) DistBuildConfig distBuildConfig = new DistBuildConfig(params.getBuckConfig());
PrefixMapDebugPathSanitizer.java,this.allPaths = pathsBuilder.build();,if (pathsBuilder != null ) this.allPaths = pathsBuilder.build();
CxxLibraryDescription.java,ProjectFilesystem projectFilesystem = metadataRuleParams.getProjectFilesystem();,if (metadataRuleParams != null ) ProjectFilesystem projectFilesystem = metadataRuleParams.getProjectFilesystem();
LuaBinaryDescription.java,"Path output = getOutputPath(baseParams.getBuildTarget(), baseParams.getProjectFilesystem());","if (baseParams != null ) Path output = getOutputPath(baseParams.getBuildTarget(), baseParams.getProjectFilesystem());"
LuaBinaryDescription.java,"Path output = getOutputPath(params.getBuildTarget(), params.getProjectFilesystem());","if (params != null ) Path output = getOutputPath(params.getBuildTarget(), params.getProjectFilesystem());"
ExecutableMacroExpanderTest.java,CellPathResolver cellRoots = createCellRoots(params.getProjectFilesystem());,if (createCellRoots(params != null ) CellPathResolver cellRoots = createCellRoots(params.getProjectFilesystem());
IjProjectTemplateDataPreparer.java,boolean needToPutModuleToGroup = projectConfig.getProjectRoot().isEmpty();,if (projectConfig != null ) boolean needToPutModuleToGroup = projectConfig.getProjectRoot().isEmpty();
DefaultJavaLibrary.java,Optional<Path> outputJar = worker.getLibraryOutputs().getOutputJar();,if (worker != null ) Optional<Path> outputJar = worker.getLibraryOutputs().getOutputJar();
DefaultJavaLibraryBuilder.java,worker = abiRule.getWorker();,if (abiRule != null ) worker = abiRule.getWorker();
JavaAbiAndLibraryWorker.java,"this.libraryOutputs = new RuleOutputs(libraryTarget, Optional.empty());","if (Optional != null ) this.libraryOutputs = new RuleOutputs(libraryTarget, Optional.empty());"
JavaAbiAndLibraryWorker.java,boolean buildAbiAndLibrary = ruleOutputs.isAbi();,if (ruleOutputs != null ) boolean buildAbiAndLibrary = ruleOutputs.isAbi();
JavaAbiAndLibraryWorker.java,SettableFuture<Void> abiFuture = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<Void> abiFuture = SettableFuture.create();
CachingBuildEngine.java,long end = System.nanoTime();,if (System != null ) long end = System.nanoTime();
CachingBuildEngine.java,start = System.nanoTime();,if (System != null ) start = System.nanoTime();
EstimateDexWeightStep.java,this.weightEstimate = (Integer) traversal.getResult();,if (traversal != null ) this.weightEstimate = (Integer) traversal.getResult();
LuaBinaryDescription.java,deps = rule.getBuildDeps();,if (rule != null ) deps = rule.getBuildDeps();
DefaultJavaLibrary.java,this.outputJar = Optional.empty();,if (Optional != null ) this.outputJar = Optional.empty();
DefaultJavaLibrary.java,BuildTarget buildTarget = this.getBuildTarget();,if (this != null ) BuildTarget buildTarget = this.getBuildTarget();
DefaultJavaLibrary.java,ProjectFilesystem projectFilesystem = this.getProjectFilesystem();,if (this != null ) ProjectFilesystem projectFilesystem = this.getProjectFilesystem();
DefaultJavaLibraryBuilder.java,BuildTarget libraryTarget = HasJavaAbi.getLibraryTarget(initialParams.getBuildTarget());,if (HasJavaAbi != null ) BuildTarget libraryTarget = HasJavaAbi.getLibraryTarget(initialParams.getBuildTarget());
Jsr199JavacInvocation.java,Diagnostic.Kind kind = diagnostic.getKind();,if (diagnostic != null ) Diagnostic.Kind kind = diagnostic.getKind();
HaskellBinaryDescription.java,ImmutableList<String> linkFlags = linkFlagsBuilder.build();,if (linkFlagsBuilder != null ) ImmutableList<String> linkFlags = linkFlagsBuilder.build();
AndroidBinary.java,String desiredOutput = relativeLibPath.toString();,if (relativeLibPath != null ) String desiredOutput = relativeLibPath.toString();
AndroidBinary.java,ImmutableList<String> metadata = metadataLines.build();,if (metadataLines != null ) ImmutableList<String> metadata = metadataLines.build();
ComputeExopackageDepsAbi.java,String abiHash = hasher.hash().toString();,if (hasher != null ) String abiHash = hasher.hash().toString();
MergeAndroidResourcesStep.java,uberRDotTxtIds = Optional.empty();,if (Optional != null ) uberRDotTxtIds = Optional.empty();
MergeAndroidResourcesStep.java,String unionPackageName = unionPackage.get();,if (unionPackage != null ) String unionPackageName = unionPackage.get();
PreDexMerge.java,Path pathToSecondaryDex = entry.getKey();,if (entry != null ) Path pathToSecondaryDex = entry.getKey();
UnzipAar.java,dirDoesNotExistOrIsEmpty = filesystem.getDirectoryContents(libsDirectory).isEmpty();,if (filesystem != null ) dirDoesNotExistOrIsEmpty = filesystem.getDirectoryContents(libsDirectory).isEmpty();
MiniAapt.java,"Set<RDotTxtEntry> missing = verifyReferences(filesystem, references.build());","if (references != null ) Set<RDotTxtEntry> missing = verifyReferences(filesystem, references.build());"
CodeSignStep.java,ProcessExecutor processExecutor = context.getProcessExecutor();,if (context != null ) ProcessExecutor processExecutor = context.getProcessExecutor();
XctestRunTestsStep.java,ProcessExecutor executor = context.getProcessExecutor();,if (context != null ) ProcessExecutor executor = context.getProcessExecutor();
XctestRunTestsStep.java,exitCode = executor.waitForLaunchedProcess(launchedProcess).getExitCode();,if (executor != null ) exitCode = executor.waitForLaunchedProcess(launchedProcess).getExitCode();
XctoolRunTestsStep.java,ImmutableList<String> xctoolFilterParams = xctoolFilterParamsBuilder.build();,if (xctoolFilterParamsBuilder != null ) ImmutableList<String> xctoolFilterParams = xctoolFilterParamsBuilder.build();
XctoolRunTestsStep.java,Optional<IOException> exception = stdoutReader.getException();,if (stdoutReader != null ) Optional<IOException> exception = stdoutReader.getException();
XctoolRunTestsStep.java,stderr = stderrReader.getStdErr();,if (stderrReader != null ) stderr = stderrReader.getStdErr();
GroovycStep.java,ProcessExecutor processExecutor = context.getProcessExecutor();,if (context != null ) ProcessExecutor processExecutor = context.getProcessExecutor();
AbstractTestStep.java,ProcessExecutor executor = context.getProcessExecutor();,if (context != null ) ProcessExecutor executor = context.getProcessExecutor();
PlistProcessStepTest.java,int errorCode = plistProcessStep.execute(executionContext).getExitCode();,if (plistProcessStep != null ) int errorCode = plistProcessStep.execute(executionContext).getExitCode();
ProvisioningProfileCopyStepTest.java,tempOutputDir = tmp.getRoot();,if (tmp != null ) tempOutputDir = tmp.getRoot();
RemoteFileTest.java,int result = buildStep.execute(context).getExitCode();,if (buildStep != null ) int result = buildStep.execute(context).getExitCode();
TargetsCommand.java,TargetGraph targetGraphWithTests = targetGraphAndNodesWithTests.getTargetGraph();,if (targetGraphAndNodesWithTests != null ) TargetGraph targetGraphWithTests = targetGraphAndNodesWithTests.getTargetGraph();
AbstractTargetGraphAndTargetNodes.java,TargetGraph targetGraph = targetGraphAndBuildTargets.getTargetGraph();,if (targetGraphAndBuildTargets != null ) TargetGraph targetGraph = targetGraphAndBuildTargets.getTargetGraph();
JavacStep.java,declaredDepsBuildResult = invocation.buildClasses();,if (invocation != null ) declaredDepsBuildResult = invocation.buildClasses();
Main.java,color = Optional.empty();,if (Optional != null ) color = Optional.empty();
WorkspaceUpdater.java,Node parentNode = firstNode.getParentNode();,if (firstNode != null ) Node parentNode = firstNode.getParentNode();
ArrayIterableTest.java,Iterator<Object> iterator = iterable.iterator();,if (iterable != null ) Iterator<Object> iterator = iterable.iterator();
ArrayIterableTest.java,Iterator<String> iterator = iterable.iterator();,if (iterable != null ) Iterator<String> iterator = iterable.iterator();
ArrayIterableTest.java,Iterator<String> iterator = iterable.iterator();,if (iterable != null ) Iterator<String> iterator = iterable.iterator();
ArrayIterableTest.java,Iterator<String> iterator = iterable.iterator();,if (iterable != null ) Iterator<String> iterator = iterable.iterator();
RecordingProjectFileHashCache.java,Path relPath = relPathOpt.get();,if (relPathOpt != null ) Path relPath = relPathOpt.get();
CalculateAbiFromSource.java,this.outputJar = Optional.empty();,if (Optional != null ) this.outputJar = Optional.empty();
JavaLibraryRules.java,BuildTarget target = rule.getBuildTarget();,if (rule != null ) BuildTarget target = rule.getBuildTarget();
JavaLibraryRules.java,"Path outputDirectory = DefaultJavaLibrary.getClassesDir(target, rule.getProjectFilesystem());","if (rule != null ) Path outputDirectory = DefaultJavaLibrary.getClassesDir(target, rule.getProjectFilesystem());"
JavacStep.java,int declaredDepsBuildResult = invocation.buildClasses();,if (invocation != null ) int declaredDepsBuildResult = invocation.buildClasses();
ExopackageInstaller.java,List<String> parts = splitter.splitToList(line.trim());,if (splitter != null ) List<String> parts = splitter.splitToList(line.trim());
ExopackageInstaller.java,Path relativePath = nativeLibsDir.relativize(entry.getValue());,if (nativeLibsDir != null ) Path relativePath = nativeLibsDir.relativize(entry.getValue());
ExopackageInstaller.java,String libName = relativePath.getFileName().toString();,if (relativePath != null ) String libName = relativePath.getFileName().toString();
ExopackageInstaller.java,String hash = input.getKey();,if (input != null ) String hash = input.getKey();
ExopackageInstaller.java,this.exopackageInfo = exopackageInfo.get();,if (exopackageInfo != null ) this.exopackageInfo = exopackageInfo.get();
ExopackageInstaller.java,ResourcesInfo info = exopackageInfo.getResourcesInfo().get();,if (exopackageInfo != null ) ResourcesInfo info = exopackageInfo.getResourcesInfo().get();
ExopackageInstaller.java,String hash = input.getKey();,if (input != null ) String hash = input.getKey();
ExopackageInstaller.java,ExopackageInfo.DexInfo dexInfo = exopackageInfo.getDexInfo().get();,if (exopackageInfo != null ) ExopackageInfo.DexInfo dexInfo = exopackageInfo.getDexInfo().get();
ExopackageInstaller.java,ExopackageInfo.NativeLibsInfo nativeLibsInfo = exopackageInfo.getNativeLibsInfo().get();,if (exopackageInfo != null ) ExopackageInfo.NativeLibsInfo nativeLibsInfo = exopackageInfo.getNativeLibsInfo().get();
ExopackageInstaller.java,Path relativePath = nativeLibsDir.relativize(entry.getValue());,if (nativeLibsDir != null ) Path relativePath = nativeLibsDir.relativize(entry.getValue());
ExopackageInstaller.java,String libName = relativePath.getFileName().toString();,if (relativePath != null ) String libName = relativePath.getFileName().toString();
SwiftCompile.java,Iterable<CxxHeaders> cxxHeaderses = cxxPreprocessorInput.getIncludes();,if (cxxPreprocessorInput != null ) Iterable<CxxHeaders> cxxHeaderses = cxxPreprocessorInput.getIncludes();
SwiftCompile.java,Optional<SourcePath> headerMap = cxxHeaders.getHeaderMap();,if (cxxHeaders != null ) Optional<SourcePath> headerMap = cxxHeaders.getHeaderMap();
Jsr199Javac.java,Diagnostic.Kind kind = diagnostic.getKind();,if (diagnostic != null ) Diagnostic.Kind kind = diagnostic.getKind();
Jsr199Javac.java,List<String> classNamesForAnnotationProcessing = ImmutableList.of();,if (ImmutableList != null ) List<String> classNamesForAnnotationProcessing = ImmutableList.of();
Jsr199Javac.java,Writer compilerOutputWriter = new PrintWriter(context.getStdErr()); // NOPMD required by API,if (API != null ) Writer compilerOutputWriter = new PrintWriter(context.getStdErr()); // NOPMD required by API
Jsr199Javac.java,String pathString = path.toString();,if (path != null ) String pathString = path.toString();
Jsr199Javac.java,ZipEntry entry = entries.nextElement();,if (entries != null ) ZipEntry entry = entries.nextElement();
Jsr199Javac.java,BuckJavacTaskProxy javacTask = compilerBundle.getJavacTask();,if (compilerBundle != null ) BuckJavacTaskProxy javacTask = compilerBundle.getJavacTask();
Jsr199Javac.java,DiagnosticCollector<JavaFileObject> diagnostics = compilerBundle.getDiagnostics();,if (compilerBundle != null ) DiagnosticCollector<JavaFileObject> diagnostics = compilerBundle.getDiagnostics();
Jsr199Javac.java,Diagnostic.Kind kind = diagnostic.getKind();,if (diagnostic != null ) Diagnostic.Kind kind = diagnostic.getKind();
Jsr199Javac.java,List<String> classNamesForAnnotationProcessing = ImmutableList.of();,if (ImmutableList != null ) List<String> classNamesForAnnotationProcessing = ImmutableList.of();
Jsr199Javac.java,Writer compilerOutputWriter = new PrintWriter(context.getStdErr()); // NOPMD required by API,if (API != null ) Writer compilerOutputWriter = new PrintWriter(context.getStdErr()); // NOPMD required by API
Jsr199Javac.java,String pathString = path.toString();,if (path != null ) String pathString = path.toString();
Jsr199Javac.java,ZipEntry entry = entries.nextElement();,if (entries != null ) ZipEntry entry = entries.nextElement();
ExternalJavac.java,exitCode = result.getExitCode();,if (result != null ) exitCode = result.getExitCode();
RealExopackageDevice.java,outToDevice = clientSocket.getOutputStream();,if (clientSocket != null ) outToDevice = clientSocket.getOutputStream();
Main.java,Optional<String> target = androidBuckConfig.getAndroidTarget();,if (androidBuckConfig != null ) Optional<String> target = androidBuckConfig.getAndroidTarget();
Main.java,androidPlatformTargetId = target.get();,if (target != null ) androidPlatformTargetId = target.get();
DistBuildState.java,Architecture remoteArchitecture = Architecture.valueOf(remoteBuckConfig.getArchitecture());,if (Architecture != null ) Architecture remoteArchitecture = Architecture.valueOf(remoteBuckConfig.getArchitecture());
DistBuildState.java,Architecture localArchitecture = Architecture.detect();,if (Architecture != null ) Architecture localArchitecture = Architecture.detect();
DistBuildState.java,Platform remotePlatform = Platform.valueOf(remoteBuckConfig.getPlatform());,if (Platform != null ) Platform remotePlatform = Platform.valueOf(remoteBuckConfig.getPlatform());
DistBuildState.java,Platform localPlatform = Platform.detect();,if (Platform != null ) Platform localPlatform = Platform.detect();
DistBuildStateTest.java,Config config = new Config(ConfigBuilder.rawFromLines());,if (Config(ConfigBuilder != null ) Config config = new Config(ConfigBuilder.rawFromLines());
DistBuildService.java,final BuildJobState buildJobState = buildJobStateArg.deepCopy();,if (buildJobStateArg != null ) final BuildJobState buildJobState = buildJobStateArg.deepCopy();
RecordingProjectFileHashCache.java,Path absPath = projectFilesystem.resolve(relPath).toAbsolutePath();,if (projectFilesystem != null ) Path absPath = projectFilesystem.resolve(relPath).toAbsolutePath();
DistBuildFileHashesTest.java,javaFs = projectFilesystem.getRootPath().getFileSystem();,if (projectFilesystem != null ) javaFs = projectFilesystem.getRootPath().getFileSystem();
DistBuildFileHashesTest.java,secondJavaFs = secondProjectFilesystem.getRootPath().getFileSystem();,if (secondProjectFilesystem != null ) secondJavaFs = secondProjectFilesystem.getRootPath().getFileSystem();
DistBuildFileHashesTest.java,actionGraph = new ActionGraph(buildRuleResolver.getBuildRules());,if (ActionGraph(buildRuleResolver != null ) actionGraph = new ActionGraph(buildRuleResolver.getBuildRules());
RecordingProjectFileHashCache.java,Path realPath = projectFilesystem.resolve(path).toRealPath();,if (projectFilesystem != null ) Path realPath = projectFilesystem.resolve(path).toRealPath();
CxxBinaryDescription.java,BuildRuleParams params = metadataRuleParams.copyInvalidatingDeps();,if (metadataRuleParams != null ) BuildRuleParams params = metadataRuleParams.copyInvalidatingDeps();
CxxBinaryDescription.java,"CxxPlatform cxxPlatform = getCxxPlatform(params.getBuildTarget(), args.getDefaultPlatform());","if (args != null ) CxxPlatform cxxPlatform = getCxxPlatform(params.getBuildTarget(), args.getDefaultPlatform());"
CxxDescriptionEnhancer.java,BuildTarget target = params.getBuildTarget();,if (params != null ) BuildTarget target = params.getBuildTarget();
CxxDescriptionEnhancer.java,ProjectFilesystem projectFilesystem = params.getProjectFilesystem();,if (params != null ) ProjectFilesystem projectFilesystem = params.getProjectFilesystem();
CxxLibraryDescription.java,BuildRuleParams params = metadataRuleParams.copyInvalidatingDeps();,if (metadataRuleParams != null ) BuildRuleParams params = metadataRuleParams.copyInvalidatingDeps();
CxxLibraryDescription.java,BuildTarget buildTarget = params.getBuildTarget();,if (params != null ) BuildTarget buildTarget = params.getBuildTarget();
CxxLibraryDescription.java,ProjectFilesystem projectFilesystem = params.getProjectFilesystem();,if (params != null ) ProjectFilesystem projectFilesystem = params.getProjectFilesystem();
CxxLibraryDescription.java,BuildTarget baseTarget = baseParams.getBuildTarget();,if (baseParams != null ) BuildTarget baseTarget = baseParams.getBuildTarget();
CxxLibraryDescription.java,BuildTarget target = params.getBuildTarget();,if (params != null ) BuildTarget target = params.getBuildTarget();
NativeLibraryMergeEnhancer.java,BuildTarget baseBuildTarget = baseBuildRuleParams.getBuildTarget();,if (baseBuildRuleParams != null ) BuildTarget baseBuildTarget = baseBuildRuleParams.getBuildTarget();
Omnibus.java,BuildTarget target = entry.getKey();,if (entry != null ) BuildTarget target = entry.getKey();
PrebuiltCxxLibraryDescription.java,MacroHandler macroHandler = getMacroHandler(Optional.empty());,if (getMacroHandler(Optional != null ) MacroHandler macroHandler = getMacroHandler(Optional.empty());
CxxLinkableEnhancerTest.java,ProjectFilesystem filesystem = params.getProjectFilesystem();,if (params != null ) ProjectFilesystem filesystem = params.getProjectFilesystem();
SourcePathResolver.java,SourcePath path = ruleFinder.getRuleOrThrow(targetSourcePath).getSourcePathToOutput();,if (ruleFinder != null ) SourcePath path = ruleFinder.getRuleOrThrow(targetSourcePath).getSourcePathToOutput();
IjProjectWriter.java,"Path workspaceFile = writeWorkspace(projectFilesystem, contentRootBuilder.build());","if (contentRootBuilder != null ) Path workspaceFile = writeWorkspace(projectFilesystem, contentRootBuilder.build());"
CxxInferEnhancer.java,result = result.withoutFlavor(f.getFlavor());,if (result != null ) result = result.withoutFlavor(f.getFlavor());
ArtifactCaches.java,int timeoutSeconds = cacheDescription.getTimeoutSeconds();,if (cacheDescription != null ) int timeoutSeconds = cacheDescription.getTimeoutSeconds();
InteractiveReportIntegrationTest.java,ProjectFilesystem filesystem = traceWorkspace.asCell().getFilesystem();,if (traceWorkspace != null ) ProjectFilesystem filesystem = traceWorkspace.asCell().getFilesystem();
DaemonicParserState.java,Optional<String> name = daemonicCellState.getCell().getCanonicalName();,if (daemonicCellState != null ) Optional<String> name = daemonicCellState.getCell().getCanonicalName();
Jsr199Javac.java,isSuccess = compilerBundle.getJavacTask().call();,if (compilerBundle != null ) isSuccess = compilerBundle.getJavacTask().call();
Jsr199Javac.java,List<String> classNamesForAnnotationProcessing = ImmutableList.of();,if (ImmutableList != null ) List<String> classNamesForAnnotationProcessing = ImmutableList.of();
Jsr199Javac.java,Writer compilerOutputWriter = new PrintWriter(context.getStdErr()); // NOPMD required by API,if (API != null ) Writer compilerOutputWriter = new PrintWriter(context.getStdErr()); // NOPMD required by API
Jsr199Javac.java,PluginClassLoaderFactory loaderFactory = PluginLoader.newFactory(context.getClassLoaderCache());,if (PluginLoader != null ) PluginClassLoaderFactory loaderFactory = PluginLoader.newFactory(context.getClassLoaderCache());
Jsr199Javac.java,isSuccess = javacTask.call();,if (javacTask != null ) isSuccess = javacTask.call();
Jsr199Javac.java,Diagnostic.Kind kind = diagnostic.getKind();,if (diagnostic != null ) Diagnostic.Kind kind = diagnostic.getKind();
CachingBuildEngine.java,BuildRuleSuccessType success = Preconditions.checkNotNull(input.getSuccess());,if (Preconditions != null ) BuildRuleSuccessType success = Preconditions.checkNotNull(input.getSuccess());
CachingBuildEngine.java,RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getRuleKey();,if (depFileRuleKeyAndInputs != null ) RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getRuleKey();
CachingBuildEngine.java,HashCode hashCode = HashCode.fromString(ent.getValue());,if (HashCode != null ) HashCode hashCode = HashCode.fromString(ent.getValue());
CachingBuildEngine.java,BuildId buildId = buildContext.getBuildId();,if (buildContext != null ) BuildId buildId = buildContext.getBuildId();
CachingBuildEngine.java,boolean clearExistingMetadata = success.shouldClearAndOverwriteMetadataOnDisk();,if (success != null ) boolean clearExistingMetadata = success.shouldClearAndOverwriteMetadataOnDisk();
IjProjectPaths.java,String path = projectRelativePath.toString();,if (projectRelativePath != null ) String path = projectRelativePath.toString();
HalideLibraryDescription.java,ImmutableList<String> preprocessorFlags = ImmutableList.of();,if (ImmutableList != null ) ImmutableList<String> preprocessorFlags = ImmutableList.of();
CxxToolFlags.java,Iterable<String> platformFlags = ImmutableList.of();,if (ImmutableList != null ) Iterable<String> platformFlags = ImmutableList.of();
CxxToolFlags.java,Iterable<String> ruleFlags = ImmutableList.of();,if (ImmutableList != null ) Iterable<String> ruleFlags = ImmutableList.of();
AaptPackageResourcesTest.java,params = new FakeBuildRuleParamsBuilder(aaptTarget).build();,if (FakeBuildRuleParamsBuilder(aaptTarget) != null ) params = new FakeBuildRuleParamsBuilder(aaptTarget).build();
AndroidBinaryGraphEnhancerTest.java,BuildRuleParams originalParams = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams originalParams = new FakeBuildRuleParamsBuilder(target).build();
AndroidBuildConfigJavaLibraryTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(buildTarget).build();,if (FakeBuildRuleParamsBuilder(buildTarget) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(buildTarget).build();
AndroidResourceRuleBuilder.java,buildRuleParams = new FakeBuildRuleParamsBuilder(buildTarget).build();,if (FakeBuildRuleParamsBuilder(buildTarget) != null ) buildRuleParams = new FakeBuildRuleParamsBuilder(buildTarget).build();
DexProducedFromJavaLibraryThatContainsClassFilesTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(buildTarget).build();,if (FakeBuildRuleParamsBuilder(buildTarget) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(buildTarget).build();
DexWithClassesTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(buildTarget).build();,if (FakeBuildRuleParamsBuilder(buildTarget) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(buildTarget).build();
DexWithClassesTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(buildTarget).build();,if (FakeBuildRuleParamsBuilder(buildTarget) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(buildTarget).build();
ApplePackageDescriptionTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(packageBuildTarget).build();,if (FakeBuildRuleParamsBuilder(packageBuildTarget) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(packageBuildTarget).build();
ApplePackageDescriptionTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(packageBuildTarget).build();,if (FakeBuildRuleParamsBuilder(packageBuildTarget) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(packageBuildTarget).build();
ExternallyBuiltApplePackageTest.java,private BuildRuleParams params = new FakeBuildRuleParamsBuilder(buildTarget).build();,if (FakeBuildRuleParamsBuilder(buildTarget) != null ) private BuildRuleParams params = new FakeBuildRuleParamsBuilder(buildTarget).build();
CxxDescriptionEnhancerTest.java,BuildRuleParams libParams = new FakeBuildRuleParamsBuilder(libTarget).build();,if (FakeBuildRuleParamsBuilder(libTarget) != null ) BuildRuleParams libParams = new FakeBuildRuleParamsBuilder(libTarget).build();
CxxDescriptionEnhancerTest.java,BuildRuleParams otherlibParams = new FakeBuildRuleParamsBuilder(otherlibTarget).build();,if (FakeBuildRuleParamsBuilder(otherlibTarget) != null ) BuildRuleParams otherlibParams = new FakeBuildRuleParamsBuilder(otherlibTarget).build();
CxxDescriptionEnhancerTest.java,BuildRuleParams libParams = new FakeBuildRuleParamsBuilder(libTarget).build();,if (FakeBuildRuleParamsBuilder(libTarget) != null ) BuildRuleParams libParams = new FakeBuildRuleParamsBuilder(libTarget).build();
CxxLibraryTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxLibraryTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxLinkTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxLinkTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxLinkableEnhancerTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxLinkableEnhancerTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxLinkableEnhancerTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxLinkableEnhancerTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxLinkableEnhancerTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxLinkableEnhancerTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxLinkableEnhancerTest.java,BuildRuleParams bundleLoaderParams = new FakeBuildRuleParamsBuilder(bundleLoaderTarget).build();,if (FakeBuildRuleParamsBuilder(bundleLoaderTarget) != null ) BuildRuleParams bundleLoaderParams = new FakeBuildRuleParamsBuilder(bundleLoaderTarget).build();
CxxLinkableEnhancerTest.java,BuildRuleParams bundleParams = new FakeBuildRuleParamsBuilder(bundleTarget).build();,if (FakeBuildRuleParamsBuilder(bundleTarget) != null ) BuildRuleParams bundleParams = new FakeBuildRuleParamsBuilder(bundleTarget).build();
CxxPrecompiledHeaderTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxPreprocessAndCompileTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxPreprocessAndCompileTest.java,final BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) final BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxPreprocessAndCompileTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxPreprocessAndCompileTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxPreprocessAndCompileTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
RuleKeyTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
RuleKeyTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
RuleKeyTest.java,BuildRuleParams depParams = new FakeBuildRuleParamsBuilder(depTarget).build();,if (FakeBuildRuleParamsBuilder(depTarget) != null ) BuildRuleParams depParams = new FakeBuildRuleParamsBuilder(depTarget).build();
ExecutableMacroExpanderTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
ExecutableMacroExpanderTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
SwiftLibraryIntegrationTest.java,BuildRuleParams libParams = new FakeBuildRuleParamsBuilder(libTarget).build();,if (FakeBuildRuleParamsBuilder(libTarget) != null ) BuildRuleParams libParams = new FakeBuildRuleParamsBuilder(libTarget).build();
SwiftLibraryIntegrationTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(swiftCompileTarget).build();,if (FakeBuildRuleParamsBuilder(swiftCompileTarget) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(swiftCompileTarget).build();
BuildRuleParams.java,Set<Flavor> flavors = Sets.newHashSet(getBuildTarget().getFlavors());,if (Sets != null ) Set<Flavor> flavors = Sets.newHashSet(getBuildTarget().getFlavors());
BuildRuleParams.java,Set<Flavor> flavors = Sets.newHashSet(getBuildTarget().getFlavors());,if (Sets != null ) Set<Flavor> flavors = Sets.newHashSet(getBuildTarget().getFlavors());
QueryMacroExpander.java,this.executorService = MoreExecutors.newDirectExecutorService();,if (MoreExecutors != null ) this.executorService = MoreExecutors.newDirectExecutorService();
QueryUtils.java,ListeningExecutorService executorService = MoreExecutors.newDirectExecutorService();,if (MoreExecutors != null ) ListeningExecutorService executorService = MoreExecutors.newDirectExecutorService();
QueryUtils.java,ListeningExecutorService executorService = MoreExecutors.newDirectExecutorService();,if (MoreExecutors != null ) ListeningExecutorService executorService = MoreExecutors.newDirectExecutorService();
BuckQueryEnvironmentTest.java,executor = MoreExecutors.listeningDecorator(Executors.newSingleThreadExecutor());,if (MoreExecutors != null ) executor = MoreExecutors.listeningDecorator(Executors.newSingleThreadExecutor());
QueryCommandTest.java,executor = MoreExecutors.listeningDecorator(Executors.newSingleThreadExecutor());,if (MoreExecutors != null ) executor = MoreExecutors.listeningDecorator(Executors.newSingleThreadExecutor());
GraphEnhancementQueryEnvironmentTest.java,executor = MoreExecutors.newDirectExecutorService();,if (MoreExecutors != null ) executor = MoreExecutors.newDirectExecutorService();
AggregationTree.java,"ImmutableSet<Path> excludes = findExcludes(parentNode, modulesToAggregate.keySet());","if (modulesToAggregate != null ) ImmutableSet<Path> excludes = findExcludes(parentNode, modulesToAggregate.keySet());"
CachingBuildEngine.java,long start = System.nanoTime();,if (System != null ) long start = System.nanoTime();
CachingBuildEngine.java,long end = System.nanoTime();,if (System != null ) long end = System.nanoTime();
CachingBuildEngine.java,long start = System.nanoTime();,if (System != null ) long start = System.nanoTime();
CachingBuildEngine.java,long end = System.nanoTime();,if (System != null ) long end = System.nanoTime();
CachingBuildEngine.java,long start = System.nanoTime();,if (System != null ) long start = System.nanoTime();
CachingBuildEngine.java,long end = System.nanoTime();,if (System != null ) long end = System.nanoTime();
CachingBuildEngine.java,long start = System.nanoTime();,if (System != null ) long start = System.nanoTime();
CachingBuildEngine.java,long end = System.nanoTime();,if (System != null ) long end = System.nanoTime();
CachingBuildEngine.java,Optional<BuildTarget> optionalTarget = Optional.of(rule.getBuildTarget());,if (Optional != null ) Optional<BuildTarget> optionalTarget = Optional.of(rule.getBuildTarget());
CxxDescriptionEnhancer.java,cxxLink = (CxxLink) existingCxxLinkRule.get();,if (existingCxxLinkRule != null ) cxxLink = (CxxLink) existingCxxLinkRule.get();
CxxDescriptionEnhancer.java,Optional<BuildRule> exisitingRule = resolver.getRuleOptional(stripRuleParams.getBuildTarget());,if (resolver != null ) Optional<BuildRule> exisitingRule = resolver.getRuleOptional(stripRuleParams.getBuildTarget());
DDescriptionUtils.java,Tool compiler = dBuckConfig.getDCompiler();,if (dBuckConfig != null ) Tool compiler = dBuckConfig.getDCompiler();
DDescriptionUtils.java,ImmutableSortedSet<BuildRule> deps = depsBuilder.build();,if (depsBuilder != null ) ImmutableSortedSet<BuildRule> deps = depsBuilder.build();
HaskellGhciDescription.java,NativeLinkableInput nli = NativeLinkableInput.concat(nativeLinkableInputs.build());,if (NativeLinkableInput != null ) NativeLinkableInput nli = NativeLinkableInput.concat(nativeLinkableInputs.build());
AbstractNativeExecutableStarter.java,rule = maybeRule.get();,if (maybeRule != null ) rule = maybeRule.get();
BuildInfoRecorder.java,ImmutableSet<Path> pathsToIncludeInZip = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<Path> pathsToIncludeInZip = ImmutableSet.of();
OfflineScribeLoggerTest.java,InputStream logFile = fakeLogger.getStoredLog();,if (fakeLogger != null ) InputStream logFile = fakeLogger.getStoredLog();
ProjectGenerator.java,Optional<SourcePath> prefixHeaderOptional = targetNode.getConstructorArg().getPrefixHeader();,if (targetNode != null ) Optional<SourcePath> prefixHeaderOptional = targetNode.getConstructorArg().getPrefixHeader();
DoctorCommand.java,RageConfig rageConfig = RageConfig.of(params.getBuckConfig());,if (RageConfig != null ) RageConfig rageConfig = RageConfig.of(params.getBuckConfig());
RageCommand.java,ProjectFilesystem filesystem = params.getCell().getFilesystem();,if (params != null ) ProjectFilesystem filesystem = params.getCell().getFilesystem();
RageCommand.java,BuckConfig buckConfig = params.getBuckConfig();,if (params != null ) BuckConfig buckConfig = params.getBuckConfig();
RageCommand.java,ProcessExecutor processExecutor = new DefaultProcessExecutor(params.getConsole());,if (DefaultProcessExecutor(params != null ) ProcessExecutor processExecutor = new DefaultProcessExecutor(params.getConsole());
RageCommand.java,Optional<DefectSubmitResult> defectSubmitResult = report.collectAndSubmitResult();,if (report != null ) Optional<DefectSubmitResult> defectSubmitResult = report.collectAndSubmitResult();
AbstractReport.java,DefectSubmitResult result = defectSubmitResult.get();,if (defectSubmitResult != null ) DefectSubmitResult result = defectSubmitResult.get();
DefaultDefectReporter.java,Optional<SlbBuckConfig> frontendConfig = rageConfig.getFrontendConfig();,if (rageConfig != null ) Optional<SlbBuckConfig> frontendConfig = rageConfig.getFrontendConfig();
DefaultDefectReporter.java,long timeout = rageConfig.getHttpTimeout();,if (rageConfig != null ) long timeout = rageConfig.getHttpTimeout();
DefaultExtraInfoCollector.java,ImmutableList<String> extraInfoCommand = rageConfig.getExtraInfoCommand();,if (rageConfig != null ) ImmutableList<String> extraInfoCommand = rageConfig.getExtraInfoCommand();
InteractiveReport.java,ImmutableList<BuildLogEntry> buildLogs = buildLogHelper.getBuildLogs();,if (buildLogHelper != null ) ImmutableList<BuildLogEntry> buildLogs = buildLogHelper.getBuildLogs();
InteractiveReport.java,UserReport.Builder userReport = UserReport.builder();,if (UserReport != null ) UserReport.Builder userReport = UserReport.builder();
InteractiveReportIntegrationTest.java,ProjectFilesystem filesystem = workspace.asCell().getFilesystem();,if (workspace != null ) ProjectFilesystem filesystem = workspace.asCell().getFilesystem();
RageCommandIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRoot());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRoot());
RageCommandIntegrationTest.java,DefectSubmitResult defectSubmitResult = automatedReport.collectAndSubmitResult().get();,if (automatedReport != null ) DefectSubmitResult defectSubmitResult = automatedReport.collectAndSubmitResult().get();
RageCommandIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRoot());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRoot());
RageCommandIntegrationTest.java,DefectReport defectReport = defectReporter.getDefectReport();,if (defectReporter != null ) DefectReport defectReport = defectReporter.getDefectReport();
RageCommandIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRoot());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRoot());
RageCommandIntegrationTest.java,DefectSubmitResult submitReport = automatedReport.collectAndSubmitResult().get();,if (automatedReport != null ) DefectSubmitResult submitReport = automatedReport.collectAndSubmitResult().get();
RageCommandIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRoot());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRoot());
RageCommandIntegrationTest.java,DefectSubmitResult submitReport = automatedReport.collectAndSubmitResult().get();,if (automatedReport != null ) DefectSubmitResult submitReport = automatedReport.collectAndSubmitResult().get();
HaskellCompileRule.java,SourcePathResolver resolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver resolver = buildContext.getSourcePathResolver();
CxxSourceRuleFactoryTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxSourceRuleFactoryTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxSourceRuleFactoryTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxSourceRuleFactoryTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxSourceRuleFactoryTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxSourceRuleFactoryTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxSourceRuleFactoryTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxSourceRuleFactoryTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxSourceRuleFactoryTest.java,private BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) private BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxSourceRuleFactoryTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
PrecompiledHeaderFeatureTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
OwnersReport.java,ProjectFilesystem cellFilesystem = rootCell.getFilesystem();,if (rootCell != null ) ProjectFilesystem cellFilesystem = rootCell.getFilesystem();
OwnersReport.java,final Path rootPath = cellFilesystem.getRootPath();,if (cellFilesystem != null ) final Path rootPath = cellFilesystem.getRootPath();
OwnersReport.java,Set<Path> ruleInputs = targetNode.getInputs();,if (targetNode != null ) Set<Path> ruleInputs = targetNode.getInputs();
OwnersReportTest.java,OwnersReport report = OwnersReport.emptyReport();,if (OwnersReport != null ) OwnersReport report = OwnersReport.emptyReport();
ArchiveTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
ArchiveTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
ArchiveTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
PerBuildState.java,Path cellRootPath = currentCell.getFilesystem().getRootPath();,if (currentCell != null ) Path cellRootPath = currentCell.getFilesystem().getRootPath();
AbstractBuildRuleWithDeclaredAndExtraDeps.java,this.buildTarget = buildRuleParams.getBuildTarget();,if (buildRuleParams != null ) this.buildTarget = buildRuleParams.getBuildTarget();
AbstractBuildRuleWithDeclaredAndExtraDeps.java,this.projectFilesystem = buildRuleParams.getProjectFilesystem();,if (buildRuleParams != null ) this.projectFilesystem = buildRuleParams.getProjectFilesystem();
AbstractBuildRuleWithDeclaredAndExtraDeps.java,clazz = clazz.getSuperclass();,if (clazz != null ) clazz = clazz.getSuperclass();
AbstractBuildRule.java,this.buildDeps = buildRuleParams.getTotalBuildDeps();,if (buildRuleParams != null ) this.buildDeps = buildRuleParams.getTotalBuildDeps();
AndroidLibraryGraphEnhancer.java,ImmutableSortedSet<BuildRule> originalDeps = originalBuildRuleParams.getBuildDeps();,if (originalBuildRuleParams != null ) ImmutableSortedSet<BuildRule> originalDeps = originalBuildRuleParams.getBuildDeps();
RustCompileUtils.java,ImmutableSortedSet<BuildRule> ruledeps = params.getBuildDeps();,if (params != null ) ImmutableSortedSet<BuildRule> ruledeps = params.getBuildDeps();
AndroidResourceDescriptionTest.java,ImmutableList<BuildRule> deps = resource.getBuildDeps().asList();,if (resource != null ) ImmutableList<BuildRule> deps = resource.getBuildDeps().asList();
JavaTestDescriptionTest.java,ImmutableSortedSet<BuildRule> deps = javaTest.getCompiledTestsLibrary().getBuildDeps();,if (javaTest != null ) ImmutableSortedSet<BuildRule> deps = javaTest.getCompiledTestsLibrary().getBuildDeps();
JavaTestDescriptionTest.java,ImmutableSortedSet<BuildRule> deps = javaTest.getCompiledTestsLibrary().getBuildDeps();,if (javaTest != null ) ImmutableSortedSet<BuildRule> deps = javaTest.getCompiledTestsLibrary().getBuildDeps();
AndroidNativeLibsPackageableGraphEnhancer.java,nativeLinkableLibsBuilder = ImmutableMap.builder();,if (ImmutableMap != null ) nativeLinkableLibsBuilder = ImmutableMap.builder();
AndroidNativeLibsPackageableGraphEnhancer.java,nativeLinkableLibsAssetsBuilder = ImmutableMap.builder();,if (ImmutableMap != null ) nativeLinkableLibsAssetsBuilder = ImmutableMap.builder();
AndroidNativeLibsPackageableGraphEnhancer.java,NdkCxxRuntime cxxRuntime = platform.getCxxRuntime();,if (platform != null ) NdkCxxRuntime cxxRuntime = platform.getCxxRuntime();
AndroidNativeLibsPackageableGraphEnhancer.java,nativeLinkableLibsAssets = nativeLinkableLibsAssetsBuilder.build();,if (nativeLinkableLibsAssetsBuilder != null ) nativeLinkableLibsAssets = nativeLinkableLibsAssetsBuilder.build();
AndroidNativeLibsPackageableGraphEnhancer.java,nativeLinkableLibs = relinker.getRelinkedLibs();,if (relinker != null ) nativeLinkableLibs = relinker.getRelinkedLibs();
AndroidNativeLibsPackageableGraphEnhancer.java,nativeLinkableLibsAssets = relinker.getRelinkedLibsAssets();,if (relinker != null ) nativeLinkableLibsAssets = relinker.getRelinkedLibsAssets();
AndroidNativeLibsPackageableGraphEnhancer.java,NdkCxxPlatforms.TargetCpuType targetCpuType = entry.getKey().getFirst();,if (entry != null ) NdkCxxPlatforms.TargetCpuType targetCpuType = entry.getKey().getFirst();
AndroidNativeLibsPackageableGraphEnhancer.java,String sharedLibrarySoName = entry.getKey().getSecond();,if (entry != null ) String sharedLibrarySoName = entry.getKey().getSecond();
AndroidNdkHelper.java,Path outPath = tmpDir.resolve(zipPath.getFileName());,if (tmpDir != null ) Path outPath = tmpDir.resolve(zipPath.getFileName());
MaterializerProjectFileHashCache.java,Path relPathToChild = projectFilesystem.getPathRelativeToProjectRoot(absPathToChild).get();,if (projectFilesystem != null ) Path relPathToChild = projectFilesystem.getPathRelativeToProjectRoot(absPathToChild).get();
MaterializerProjectFileHashCache.java,Path absPath = projectFilesystem.resolve(relPath).toAbsolutePath();,if (projectFilesystem != null ) Path absPath = projectFilesystem.resolve(relPath).toAbsolutePath();
MaterializerProjectFileHashCache.java,Path relPath = projectFilesystem.getPathRelativeToProjectRoot(absPath).get();,if (projectFilesystem != null ) Path relPath = projectFilesystem.getPathRelativeToProjectRoot(absPath).get();
CellProvider.java,ImmutableSet<Path> allRoots = ImmutableSet.copyOf(transitiveCellPathMapping.values());,if (ImmutableSet != null ) ImmutableSet<Path> allRoots = ImmutableSet.copyOf(transitiveCellPathMapping.values());
DefaultCellPathResolver.java,Path cellRoot = entry.getValue().normalize();,if (entry != null ) Path cellRoot = entry.getValue().normalize();
DefaultCellPathResolver.java,RelativeCellName relativeCellName = parentCellPath.withAppendedComponent(entry.getKey());,if (parentCellPath != null ) RelativeCellName relativeCellName = parentCellPath.withAppendedComponent(entry.getKey());
DefaultCellPathResolverTest.java,FileSystem vfs = Jimfs.newFileSystem(Configuration.unix());,if (Jimfs != null ) FileSystem vfs = Jimfs.newFileSystem(Configuration.unix());
FilePathHashLoader.java,file = defaultCellRoot.resolve(file).toRealPath();,if (defaultCellRoot != null ) file = defaultCellRoot.resolve(file).toRealPath();
FilePathHashLoaderTest.java,"FilePathHashLoader loader = new FilePathHashLoader(cellRoot, ImmutableSet.of());","if (ImmutableSet != null ) FilePathHashLoader loader = new FilePathHashLoader(cellRoot, ImmutableSet.of());"
FilePathHashLoaderTest.java,"FilePathHashLoader loader = new FilePathHashLoader(cellRoot, ImmutableSet.of());","if (ImmutableSet != null ) FilePathHashLoader loader = new FilePathHashLoader(cellRoot, ImmutableSet.of());"
FilePathHashLoaderTest.java,"FilePathHashLoader baseLoader = new FilePathHashLoader(cellRoot, ImmutableSet.of());","if (ImmutableSet != null ) FilePathHashLoader baseLoader = new FilePathHashLoader(cellRoot, ImmutableSet.of());"
FilePathHashLoaderTest.java,"FilePathHashLoader baseLoader = new FilePathHashLoader(cellRoot, ImmutableSet.of());","if (ImmutableSet != null ) FilePathHashLoader baseLoader = new FilePathHashLoader(cellRoot, ImmutableSet.of());"
DefaultWorkerTool.java,Tool baseTool = this.exe.getExecutableCommand();,if (this != null ) Tool baseTool = this.exe.getExecutableCommand();
DefaultWorkerTool.java,tool = builder.build();,if (builder != null ) tool = builder.build();
WorkerToolDescription.java,BuildRule rule = resolver.requireRule(args.getExe());,if (resolver != null ) BuildRule rule = resolver.requireRule(args.getExe());
WorkerProcessProtocolZero.java,this.stdErr = Optional.empty();,if (Optional != null ) this.stdErr = Optional.empty();
WorkerProcessProtocolZero.java,String property = processStdoutReader.nextName();,if (processStdoutReader != null ) String property = processStdoutReader.nextName();
WorkerProcessProtocolZero.java,id = processStdoutReader.nextInt();,if (processStdoutReader != null ) id = processStdoutReader.nextInt();
WorkerProcessProtocolZero.java,type = processStdoutReader.nextString();,if (processStdoutReader != null ) type = processStdoutReader.nextString();
WorkerProcessProtocolZero.java,protocolVersion = processStdoutReader.nextString();,if (processStdoutReader != null ) protocolVersion = processStdoutReader.nextString();
WorkerProcessProtocolZero.java,String property = processStdoutReader.nextName();,if (processStdoutReader != null ) String property = processStdoutReader.nextName();
WorkerProcessProtocolZero.java,id = processStdoutReader.nextInt();,if (processStdoutReader != null ) id = processStdoutReader.nextInt();
WorkerProcessProtocolZero.java,type = processStdoutReader.nextString();,if (processStdoutReader != null ) type = processStdoutReader.nextString();
WorkerProcessProtocolZero.java,argsPath = processStdoutReader.nextString();,if (processStdoutReader != null ) argsPath = processStdoutReader.nextString();
WorkerProcessProtocolZero.java,stdoutPath = processStdoutReader.nextString();,if (processStdoutReader != null ) stdoutPath = processStdoutReader.nextString();
WorkerProcessProtocolZero.java,stderrPath = processStdoutReader.nextString();,if (processStdoutReader != null ) stderrPath = processStdoutReader.nextString();
WorkerProcessProtocolZero.java,String property = processStdoutReader.nextName();,if (processStdoutReader != null ) String property = processStdoutReader.nextName();
WorkerProcessProtocolZero.java,id = processStdoutReader.nextInt();,if (processStdoutReader != null ) id = processStdoutReader.nextInt();
WorkerProcessProtocolZero.java,type = processStdoutReader.nextString();,if (processStdoutReader != null ) type = processStdoutReader.nextString();
WorkerProcessProtocolZero.java,exitCode = processStdoutReader.nextInt();,if (processStdoutReader != null ) exitCode = processStdoutReader.nextInt();
AbstractRawConfig.java,section = Maps.newLinkedHashMap();,if (Maps != null ) section = Maps.newLinkedHashMap();
BuildInfoRecorder.java,this.metadataToWrite = Maps.newLinkedHashMap();,if (Maps != null ) this.metadataToWrite = Maps.newLinkedHashMap();
BuildInfoRecorder.java,this.buildMetadata = Maps.newLinkedHashMap();,if (Maps != null ) this.buildMetadata = Maps.newLinkedHashMap();
AndroidPackageableCollector.java,Set<AndroidPackageable> explored = Sets.newHashSet();,if (Sets != null ) Set<AndroidPackageable> explored = Sets.newHashSet();
FilterResourcesStep.java,this.densities = Sets.newHashSet();,if (Sets != null ) this.densities = Sets.newHashSet();
AaptResourceCollector.java,this.resources = Sets.newHashSet();,if (Sets != null ) this.resources = Sets.newHashSet();
GidGenerator.java,generatedAndReservedIds = Sets.newHashSet();,if (Sets != null ) generatedAndReservedIds = Sets.newHashSet();
AuditClasspathCommand.java,SortedSet<Path> classpathEntries = Sets.newTreeSet();,if (Sets != null ) SortedSet<Path> classpathEntries = Sets.newTreeSet();
AuditRulesCommand.java,LinkedHashSet<String> properties = Sets.newLinkedHashSet();,if (Sets != null ) LinkedHashSet<String> properties = Sets.newLinkedHashSet();
AuditRulesCommand.java,SortedSet<String> customProperties = Sets.newTreeSet();,if (Sets != null ) SortedSet<String> customProperties = Sets.newTreeSet();
OwnersReport.java,Set<Path> inputs = Sets.newHashSet();,if (Sets != null ) Set<Path> inputs = Sets.newHashSet();
OwnersReport.java,Set<String> nonExistentInputs = Sets.newHashSet();,if (Sets != null ) Set<String> nonExistentInputs = Sets.newHashSet();
OwnersReport.java,Set<String> nonFileInputs = Sets.newHashSet();,if (Sets != null ) Set<String> nonFileInputs = Sets.newHashSet();
TestRunning.java,Set<String> srcFolders = Sets.newHashSet();,if (Sets != null ) Set<String> srcFolders = Sets.newHashSet();
CounterRegistryImpl.java,this.counters = Sets.newLinkedHashSet();,if (Sets != null ) this.counters = Sets.newLinkedHashSet();
BuildTargetsQueue.java,Set<String> visitedTargets = Sets.newHashSet();,if (Sets != null ) Set<String> visitedTargets = Sets.newHashSet();
RecordedFileHashes.java,this.seenPaths = Sets.newHashSet();,if (Sets != null ) this.seenPaths = Sets.newHashSet();
RecordedFileHashes.java,this.seenArchiveMemberPaths = Sets.newHashSet();,if (Sets != null ) this.seenArchiveMemberPaths = Sets.newHashSet();
AbstractBreadthFirstThrowingTraversal.java,explored = Sets.newHashSet();,if (Sets != null ) explored = Sets.newHashSet();
AcyclicDepthFirstPostOrderTraversal.java,Set<T> inProgress = Sets.newHashSet();,if (Sets != null ) Set<T> inProgress = Sets.newHashSet();
AcyclicDepthFirstPostOrderTraversal.java,LinkedHashSet<T> explored = Sets.newLinkedHashSet();,if (Sets != null ) LinkedHashSet<T> explored = Sets.newLinkedHashSet();
MutableDirectedGraph.java,this.stronglyConnectedComponents = Sets.newHashSet();,if (Sets != null ) this.stronglyConnectedComponents = Sets.newHashSet();
MutableDirectedGraph.java,Set<S> stronglyConnectedComponent = Sets.newHashSet();,if (Sets != null ) Set<S> stronglyConnectedComponent = Sets.newHashSet();
TopologicalSort.java,Set<T> visitedNodes = Sets.newHashSet();,if (Sets != null ) Set<T> visitedNodes = Sets.newHashSet();
TopologicalSort.java,Set<T> level = Sets.newTreeSet();,if (Sets != null ) Set<T> level = Sets.newTreeSet();
JarFattener.java,Set<Path> javaSourceFilePaths = Sets.newHashSet();,if (Sets != null ) Set<Path> javaSourceFilePaths = Sets.newHashSet();
JavaLibraryClasspathProvider.java,javaExportedLibraryDeps = Sets.newHashSet();,if (Sets != null ) javaExportedLibraryDeps = Sets.newHashSet();
JavaSourceJar.java,Set<Path> seenPackages = Sets.newHashSet();,if (Sets != null ) Set<Path> seenPackages = Sets.newHashSet();
BuildTargets.java,Set<Flavor> flavors = Sets.newHashSet();,if (Sets != null ) Set<Flavor> flavors = Sets.newHashSet();
PythonBinaryDescription.java,Set<Path> packages = Sets.newHashSet();,if (Sets != null ) Set<Path> packages = Sets.newHashSet();
BuildInfoRecorder.java,this.pathsToOutputs = Sets.newHashSet();,if (Sets != null ) this.pathsToOutputs = Sets.newHashSet();
CachingBuildEngine.java,Set<RuleKey> ruleKeys = Sets.newHashSet();,if (Sets != null ) Set<RuleKey> ruleKeys = Sets.newHashSet();
AndroidBinaryTest.java,Set<Path> classpath = Sets.newHashSet();,if (Sets != null ) Set<Path> classpath = Sets.newHashSet();
AndroidBinaryTest.java,Set<Path> classpath = Sets.newHashSet();,if (Sets != null ) Set<Path> classpath = Sets.newHashSet();
MergeAndroidResourcesStepTest.java,Set<String> uniqueEntries = Sets.newHashSet();,if (Sets != null ) Set<String> uniqueEntries = Sets.newHashSet();
ResourceFiltersTest.java,Set<Path> result = Sets.newHashSet();,if (Sets != null ) Set<Path> result = Sets.newHashSet();
TestContext.java,listeners = Sets.newHashSet();,if (Sets != null ) listeners = Sets.newHashSet();
Daemon.java,WatchedFileHashCache watchedCache = new WatchedFileHashCache(subCell.getFilesystem());,if (WatchedFileHashCache(subCell != null ) WatchedFileHashCache watchedCache = new WatchedFileHashCache(subCell.getFilesystem());
Daemon.java,FileHashCacheEvent.InvalidationStarted started = FileHashCacheEvent.invalidationStarted();,if (FileHashCacheEvent != null ) FileHashCacheEvent.InvalidationStarted started = FileHashCacheEvent.invalidationStarted();
DefaultFileHashCache.java,Path relativeFilePath = archiveMemberPath.getArchivePath().normalize();,if (archiveMemberPath != null ) Path relativeFilePath = archiveMemberPath.getArchivePath().normalize();
DefaultFileHashCache.java,Path memberPath = archiveMemberPath.getMemberPath();,if (archiveMemberPath != null ) Path memberPath = archiveMemberPath.getMemberPath();
DefaultFileHashCacheTest.java,"DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.empty());","if (Optional != null ) DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.empty());"
DefaultFileHashCacheTest.java,"DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.empty());","if (Optional != null ) DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.empty());"
DefaultFileHashCacheTest.java,"DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.empty());","if (Optional != null ) DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.empty());"
DefaultFileHashCacheTest.java,"DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.empty());","if (Optional != null ) DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.empty());"
DefaultFileHashCacheTest.java,"DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.empty());","if (Optional != null ) DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.empty());"
DefaultFileHashCacheTest.java,"DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.empty());","if (Optional != null ) DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.empty());"
DefaultFileHashCacheTest.java,"DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.empty());","if (Optional != null ) DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.empty());"
DefaultFileHashCacheTest.java,"DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.empty());","if (Optional != null ) DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.empty());"
DefaultFileHashCacheTest.java,"DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.empty());","if (Optional != null ) DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.empty());"
DefaultFileHashCacheTest.java,"DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.empty());","if (Optional != null ) DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.empty());"
DefaultFileHashCacheTest.java,"DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.empty());","if (Optional != null ) DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.empty());"
DefaultFileHashCacheTest.java,"DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.empty());","if (Optional != null ) DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.empty());"
DefaultFileHashCacheTest.java,"DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.empty());","if (Optional != null ) DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.empty());"
DefaultFileHashCacheTest.java,"DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.empty());","if (Optional != null ) DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.empty());"
DefaultFileHashCacheTest.java,"DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.empty());","if (Optional != null ) DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.empty());"
XctoolOutputParsing.java,JsonObject object = element.getAsJsonObject();,if (element != null ) JsonObject object = element.getAsJsonObject();
ChromeTraceParser.java,JsonObject event = eventEl.getAsJsonObject();,if (eventEl != null ) JsonObject event = eventEl.getAsJsonObject();
ChromeTraceParser.java,String name = nameEl.getAsString();,if (nameEl != null ) String name = nameEl.getAsString();
ActionGraphCacheIntegrationTest.java,JsonObject args = argsEl.getAsJsonObject();,if (argsEl != null ) JsonObject args = argsEl.getAsJsonObject();
AdbHelperTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
AdbHelperTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
AdbHelperTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
ArtifactCachesTest.java,BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();
ArtifactCachesTest.java,BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();
ArtifactCachesTest.java,BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();
ArtifactCachesTest.java,BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();
ArtifactCachesTest.java,BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();
AuditInputCommandTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
BuckQueryEnvironmentTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
CommandRunnerParamsForTesting.java,private BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) private BuckEventBus eventBus = BuckEventBusFactory.newInstance();
QueryCommandTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
TargetsCommandTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
InterCellIntegrationTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
DistBuildStateTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
SimplePerfEventTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
DistBuildSlaveEventBusListenerTest.java,eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) eventBus = BuckEventBusFactory.newInstance();
HttpDownloaderTest.java,private BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) private BuckEventBus eventBus = BuckEventBusFactory.newInstance();
StackedDownloaderTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
ServedCacheIntegrationTest.java,buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) buckEventBus = BuckEventBusFactory.newInstance();
ParsePipelineTest.java,this.eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) this.eventBus = BuckEventBusFactory.newInstance();
ParserBenchmark.java,eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) eventBus = BuckEventBusFactory.newInstance();
ParserTest.java,eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) eventBus = BuckEventBusFactory.newInstance();
CachingBuildEngineTest.java,BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();
DefaultStepRunnerTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
WatchmanWatcherTest.java,BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();
PerfStatsTrackingTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
ProcessTrackerTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
IjProjectCommandHelper.java,this.console = projectViewParameters.getConsole();,if (projectViewParameters != null ) this.console = projectViewParameters.getConsole();
IjProjectCommandHelper.java,this.parser = projectViewParameters.getParser();,if (projectViewParameters != null ) this.parser = projectViewParameters.getParser();
ProjectView.java,this.stdErr = projectViewParameters.getStdErr();,if (projectViewParameters != null ) this.stdErr = projectViewParameters.getStdErr();
ProjectView.java,this.viewPath = Preconditions.checkNotNull(projectViewParameters.getViewPath());,if (Preconditions != null ) this.viewPath = Preconditions.checkNotNull(projectViewParameters.getViewPath());
ProjectView.java,this.dryRun = projectViewParameters.isDryRun();,if (projectViewParameters != null ) this.dryRun = projectViewParameters.isDryRun();
ProjectView.java,this.withTests = projectViewParameters.isWithTests();,if (projectViewParameters != null ) this.withTests = projectViewParameters.isWithTests();
ProjectView.java,this.config = projectViewParameters.getConfig();,if (projectViewParameters != null ) this.config = projectViewParameters.getConfig();
RmStepTest.java,context = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) context = TestExecutionContext.newInstance();
AppleBundle.java,Path srcPath = resolver.getAbsolutePath(entry.getKey());,if (resolver != null ) Path srcPath = resolver.getAbsolutePath(entry.getKey());
PosixNmSymbolNameTool.java,"MkdirStep mkdirStep = MkdirStep.of(getProjectFilesystem(), output.getParent());","if (output != null ) MkdirStep mkdirStep = MkdirStep.of(getProjectFilesystem(), output.getParent());"
MavenUberJar.java,"MkdirStep mkOutputDirStep = MkdirStep.of(getProjectFilesystem(), pathToOutput.getParent());","if (pathToOutput != null ) MkdirStep mkOutputDirStep = MkdirStep.of(getProjectFilesystem(), pathToOutput.getParent());"
JavaSymbolsRule.java,"Step mkdirStep = MkdirStep.of(getProjectFilesystem(), outputPath.getParent());","if (outputPath != null ) Step mkdirStep = MkdirStep.of(getProjectFilesystem(), outputPath.getParent());"
RemoteFileTest.java,ExecutionContext context = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext context = TestExecutionContext.newInstance();
JavaSymbolsRuleTest.java,ExecutionContext executionContext = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext executionContext = TestExecutionContext.newInstance();
KotlinBuckConfig.java,kotlinHome = kotlinHome.getParent().normalize();,if (kotlinHome != null ) kotlinHome = kotlinHome.getParent().normalize();
KotlinBuckConfig.java,kotlinHome = Paths.get(home).normalize();,if (Paths != null ) kotlinHome = Paths.get(home).normalize();
KotlinTestDescription.java,JavaLibrary testsLibrary = resolver.addToIndex(defaultJavaLibraryBuilder.build());,if (resolver != null ) JavaLibrary testsLibrary = resolver.addToIndex(defaultJavaLibraryBuilder.build());
KotlinBuckConfigTest.java,Path runtimeJar = kotlinBuckConfig.getPathToRuntimeJar().getRight();,if (kotlinBuckConfig != null ) Path runtimeJar = kotlinBuckConfig.getPathToRuntimeJar().getRight();
KotlinBuckConfigTest.java,Path runtimeJar = kotlinBuckConfig.getPathToRuntimeJar().getRight();,if (kotlinBuckConfig != null ) Path runtimeJar = kotlinBuckConfig.getPathToRuntimeJar().getRight();
TreeBackedEnter.java,CompilationUnitTree compilationUnitTree = rootPath.getCompilationUnit();,if (rootPath != null ) CompilationUnitTree compilationUnitTree = rootPath.getCompilationUnit();
TreeBackedEnter.java,MethodTree methodTree = method.getTree();,if (method != null ) MethodTree methodTree = method.getTree();
FrontendOnlyJavacTask.java,types = new TreeBackedTypes(javacTask.getTypes());,if (TreeBackedTypes(javacTask != null ) types = new TreeBackedTypes(javacTask.getTypes());
TreeBackedElements.java,ElementKind kind = underlyingElement.getKind();,if (underlyingElement != null ) ElementKind kind = underlyingElement.getKind();
TreeBackedElements.java,TreeBackedElement enclosingElement = enterElement(underlyingVariable.getEnclosingElement());,if (enterElement(underlyingVariable != null ) TreeBackedElement enclosingElement = enterElement(underlyingVariable.getEnclosingElement());
TreeBackedElements.java,MethodTree methodTree = method.getTree();,if (method != null ) MethodTree methodTree = method.getTree();
MacroHandler.java,MacroExpander expander = getExpander(entry.getKey());,if (getExpander(entry != null ) MacroExpander expander = getExpander(entry.getKey());
OutputToFileExpander.java,ProjectFilesystem filesystem = rule.get().getProjectFilesystem();,if (rule != null ) ProjectFilesystem filesystem = rule.get().getProjectFilesystem();
SQLiteBuildInfoStore.java,ResultSet rs = selectStmt.executeQuery();,if (selectStmt != null ) ResultSet rs = selectStmt.executeQuery();
ProjectGenerator.java,BuildTarget locationMacroTarget = input.getTarget();,if (input != null ) BuildTarget locationMacroTarget = input.getTarget();
ExopackageInstaller.java,ResourcesInfo info = exopackageInfo.getResourcesInfo().get();,if (exopackageInfo != null ) ResourcesInfo info = exopackageInfo.getResourcesInfo().get();
ExopackageInstaller.java,String hash = input.getKey();,if (input != null ) String hash = input.getKey();
ExopackageInstaller.java,ImmutableSet<String> requiredHashes = libraries.keySet();,if (libraries != null ) ImmutableSet<String> requiredHashes = libraries.keySet();
ExopackageInstaller.java,String dirPath = dataRoot.resolve(dirname).toString();,if (dataRoot != null ) String dirPath = dataRoot.resolve(dirname).toString();
CxxLibraryDescription.java,CxxLibrary rule = (CxxLibrary) rawRule.get();,if (rawRule != null ) CxxLibrary rule = (CxxLibrary) rawRule.get();
ModuleBuildContext.java,this.generatedSourceCodeFoldersBuilder = ImmutableSet.builder();,if (ImmutableSet != null ) this.generatedSourceCodeFoldersBuilder = ImmutableSet.builder();
IjFolder.java,this.inputsHash = inputs.hashCode();,if (inputs != null ) this.inputsHash = inputs.hashCode();
IjProjectDataPreparerTest.java,IjSourceFolder baseSourceFolder = contentRoot.getFolders().first();,if (contentRoot != null ) IjSourceFolder baseSourceFolder = contentRoot.getFolders().first();
WatchedFileHashCache.java,long start = System.nanoTime();,if (System != null ) long start = System.nanoTime();
WatchedFileHashCache.java,start = System.nanoTime();,if (System != null ) start = System.nanoTime();
WatchedFileHashCache.java,long start = System.nanoTime();,if (System != null ) long start = System.nanoTime();
WatchedFileHashCache.java,start = System.nanoTime();,if (System != null ) start = System.nanoTime();
WatchedFileHashCache.java,Path relativeFilePath = archiveMemberPath.getArchivePath().normalize();,if (archiveMemberPath != null ) Path relativeFilePath = archiveMemberPath.getArchivePath().normalize();
WatchedFileHashCache.java,Path relativeFilePath = archiveMemberPath.getArchivePath().normalize();,if (archiveMemberPath != null ) Path relativeFilePath = archiveMemberPath.getArchivePath().normalize();
WatchedFileHashCache.java,Path memberPath = archiveMemberPath.getMemberPath();,if (archiveMemberPath != null ) Path memberPath = archiveMemberPath.getMemberPath();
WatchedFileHashCache.java,long start = System.nanoTime();,if (System != null ) long start = System.nanoTime();
WatchedFileHashCache.java,start = System.nanoTime();,if (System != null ) start = System.nanoTime();
BaseIjModuleRule.java,BuildTarget buildTarget = targetNode.getBuildTarget();,if (targetNode != null ) BuildTarget buildTarget = targetNode.getBuildTarget();
BaseIjModuleRule.java,String buildTargetName = dependencyTarget.toString();,if (dependencyTarget != null ) String buildTargetName = dependencyTarget.toString();
IjProjectTemplateDataPreparer.java,Set<Path> relativeResourcePaths = new HashSet<>(resourcePaths.size());,if (HashSet<>(resourcePaths != null ) Set<Path> relativeResourcePaths = new HashSet<>(resourcePaths.size());
CxxInferEnhancer.java,result = result.withoutFlavor(f.get());,if (result != null ) result = result.withoutFlavor(f.get());
WatchedFileHashCache.java,long start = System.nanoTime();,if (System != null ) long start = System.nanoTime();
WatchedFileHashCache.java,start = System.nanoTime();,if (System != null ) start = System.nanoTime();
WatchedFileHashCache.java,start = System.nanoTime();,if (System != null ) start = System.nanoTime();
WatchedFileHashCache.java,start = System.nanoTime();,if (System != null ) start = System.nanoTime();
RocksDBBuildInfoStore.java,"db = RocksDB.open(options, pathToDB.toString());","if (pathToDB != null ) db = RocksDB.open(options, pathToDB.toString());"
MaterializerProjectFileHashCache.java,HashCode expectedHash = HashCode.fromString(fileHashEntry.getHashCode());,if (HashCode != null ) HashCode expectedHash = HashCode.fromString(fileHashEntry.getHashCode());
MaterializerProjectFileHashCache.java,Path symlinkRelPath = projectFilesystem.getPathRelativeToProjectRoot(symlinkAbsPath).get();,if (projectFilesystem != null ) Path symlinkRelPath = projectFilesystem.getPathRelativeToProjectRoot(symlinkAbsPath).get();
InnerClassesTable.java,walker = (TypeElement) walker.getEnclosingElement();,if (walker != null ) walker = (TypeElement) walker.getEnclosingElement();
ClassVisitorDriverFromElement.java,walker = (TypeElement) walker.getEnclosingElement();,if (walker != null ) walker = (TypeElement) walker.getEnclosingElement();
ClassVisitorDriverFromElement.java,TypeElement element = (TypeElement) t.asElement();,if (t != null ) TypeElement element = (TypeElement) t.asElement();
WatchedFileHashCache.java,start = System.nanoTime();,if (System != null ) start = System.nanoTime();
WatchedFileHashCache.java,start = System.nanoTime();,if (System != null ) start = System.nanoTime();
AssembleDirectoriesTest.java,context = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) context = TestExecutionContext.newInstance();
CopyNativeLibrariesTest.java,ExecutionContext context = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext context = TestExecutionContext.newInstance();
TrimUberRDotJavaTest.java,ExecutionContext executionContext = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext executionContext = TestExecutionContext.newInstance();
ProjectViewIntegrationTest.java,String[] children = dotIdeaDirectory.toFile().list();,if (dotIdeaDirectory != null ) String[] children = dotIdeaDirectory.toFile().list();
CachingBuildEngineTest.java,CachingBuildEngine cachingBuildEngine = cachingBuildEngineFactory().build();,if (cachingBuildEngineFactory() != null ) CachingBuildEngine cachingBuildEngine = cachingBuildEngineFactory().build();
WorkerProcessPoolFactory.java,key = paramsToUse.getPersistentWorkerKey().get();,if (paramsToUse != null ) key = paramsToUse.getPersistentWorkerKey().get();
WorkerProcessPoolFactory.java,workerHash = paramsToUse.getWorkerHash().get();,if (paramsToUse != null ) workerHash = paramsToUse.getWorkerHash().get();
AndroidLibraryDescriptionTest.java,BuildContext.Builder builder = BuildContext.builder();,if (BuildContext != null ) BuildContext.Builder builder = BuildContext.builder();
AndroidLibraryDescriptionTest.java,"JavacOptions updated = appender.amend(options, builder.build());","if (builder != null ) JavacOptions updated = appender.amend(options, builder.build());"
CachingBuildEngineTest.java,BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();
CachingBuildEngineTest.java,BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();
FakeCellPathResolver.java,Path result = cellPaths.get(cellName.get());,if (cellPaths != null ) Path result = cellPaths.get(cellName.get());
GidGeneratorTest.java,GidGenerator generator = new GidGenerator(ImmutableSet.of());,if (GidGenerator(ImmutableSet != null ) GidGenerator generator = new GidGenerator(ImmutableSet.of());
GidGeneratorTest.java,GidGenerator generator = new GidGenerator(ImmutableSet.of());,if (GidGenerator(ImmutableSet != null ) GidGenerator generator = new GidGenerator(ImmutableSet.of());
CacheCommand.java,ArtifactCache cache = params.getArtifactCacheFactory().newInstance();,if (params != null ) ArtifactCache cache = params.getArtifactCacheFactory().newInstance();
JarBuilder.java,DeterministicManifest manifest = Preconditions.checkNotNull(jar).getManifest();,if (Preconditions != null ) DeterministicManifest manifest = Preconditions.checkNotNull(jar).getManifest();
AndroidLibraryDescription.java,BuildTarget libraryTarget = HasJavaAbi.getLibraryTarget(params.getBuildTarget());,if (HasJavaAbi != null ) BuildTarget libraryTarget = HasJavaAbi.getLibraryTarget(params.getBuildTarget());
DefaultJavaLibraryBuilder.java,BuildTarget buildTarget = params.getBuildTarget();,if (params != null ) BuildTarget buildTarget = params.getBuildTarget();
DefaultJavaLibraryBuilder.java,BuildTarget libraryTarget = params.getBuildTarget();,if (params != null ) BuildTarget libraryTarget = params.getBuildTarget();
DefaultJavaLibraryBuilder.java,BuildTarget libraryTarget = HasJavaAbi.getLibraryTarget(params.getBuildTarget());,if (HasJavaAbi != null ) BuildTarget libraryTarget = HasJavaAbi.getLibraryTarget(params.getBuildTarget());
DefaultJavaLibraryBuilder.java,BuildTarget libraryTarget = HasJavaAbi.getLibraryTarget(params.getBuildTarget());,if (HasJavaAbi != null ) BuildTarget libraryTarget = HasJavaAbi.getLibraryTarget(params.getBuildTarget());
AccessFlags.java,DeclaredType annotationType = annotationMirror.getAnnotationType();,if (annotationMirror != null ) DeclaredType annotationType = annotationMirror.getAnnotationType();
AccessFlags.java,TypeElement annotationTypeElement = (TypeElement) annotationType.asElement();,if (annotationType != null ) TypeElement annotationTypeElement = (TypeElement) annotationType.asElement();
TreeBackedAnnotationMirror.java,tree = (AnnotationTree) path.getLeaf();,if (path != null ) tree = (AnnotationTree) path.getLeaf();
TreeBackedAnnotationValue.java,Tree leaf = path.getLeaf();,if (path != null ) Tree leaf = path.getLeaf();
TreeBackedAnnotationValue.java,"valuePath = new TreePath(path, assignmentTree.getExpression());","if (assignmentTree != null ) valuePath = new TreePath(path, assignmentTree.getExpression());"
TreeBackedElementResolver.java,Tree valueTree = path.getLeaf();,if (path != null ) Tree valueTree = path.getLeaf();
TreeBackedElementResolver.java,NewArrayTree tree = (NewArrayTree) path.getLeaf();,if (path != null ) NewArrayTree tree = (NewArrayTree) path.getLeaf();
BuildCommand.java,BuildEvent.DistBuildStarted started = BuildEvent.distBuildStarted();,if (BuildEvent != null ) BuildEvent.DistBuildStarted started = BuildEvent.distBuildStarted();
BuildCommand.java,DistBuildConfig distBuildConfig = new DistBuildConfig(params.getBuckConfig());,if (DistBuildConfig(params != null ) DistBuildConfig distBuildConfig = new DistBuildConfig(params.getBuckConfig());
BuildCommand.java,DistBuildConfig distBuildConfig = new DistBuildConfig(params.getBuckConfig());,if (DistBuildConfig(params != null ) DistBuildConfig distBuildConfig = new DistBuildConfig(params.getBuckConfig());
ArchiveStepIntegrationTest.java,ExecutionContext executionContext = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext executionContext = TestExecutionContext.newInstance();
ArchiveStepIntegrationTest.java,ExecutionContext executionContext = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext executionContext = TestExecutionContext.newInstance();
ArchiveStepIntegrationTest.java,ExecutionContext executionContext = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext executionContext = TestExecutionContext.newInstance();
ArchiveStepIntegrationTest.java,ExecutionContext executionContext = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext executionContext = TestExecutionContext.newInstance();
CxxTestStepTest.java,context = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) context = TestExecutionContext.newInstance();
JarBuilder.java,DeterministicManifest manifest = jar.getManifest();,if (jar != null ) DeterministicManifest manifest = jar.getManifest();
JavaInMemoryFileManagerTest.java,List<String> entries = outputStream.getEntriesContent();,if (outputStream != null ) List<String> entries = outputStream.getEntriesContent();
CachingBuildEngine.java,Optional<BuildResult> buildResult = Optional.empty();,if (Optional != null ) Optional<BuildResult> buildResult = Optional.empty();
CachingBuildEngine.java,"Optional<RuleKey> inputRuleKey = calculateInputBasedRuleKey(rule, context.getEventBus());","if (context != null ) Optional<RuleKey> inputRuleKey = calculateInputBasedRuleKey(rule, context.getEventBus());"
CachingBuildEngine.java,RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getRuleKey();,if (depFileRuleKeyAndInputs != null ) RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getRuleKey();
CachingBuildEngine.java,"Optional<RuleKeyAndInputs> manifestKey = calculateManifestKey(rule, context.getEventBus());","if (context != null ) Optional<RuleKeyAndInputs> manifestKey = calculateManifestKey(rule, context.getEventBus());"
ResTablePackage.java,Preconditions.checkState(lastPublicType == types.getStringCount());,if (types != null ) Preconditions.checkState(lastPublicType == types.getStringCount());
ResTablePackage.java,Preconditions.checkState(lastPublicKey == keys.getStringCount());,if (keys != null ) Preconditions.checkState(lastPublicKey == keys.getStringCount());
FileSystemMap.java,path = path.getParent();,if (path != null ) path = path.getParent();
FileSystemMap.java,Entry<T> current = stack.pop();,if (stack != null ) Entry<T> current = stack.pop();
DistBuildSlaveEventBusListener.java,Optional<Long> artifactSizeBytes = event.getStoreData().getArtifactSizeBytes();,if (event != null ) Optional<Long> artifactSizeBytes = event.getStoreData().getArtifactSizeBytes();
SuperConsoleEventBusListener.java,totalUploadErrorsCount += slaveStatus.getHttpArtifactUploadFailureCount();,if (slaveStatus != null ) totalUploadErrorsCount += slaveStatus.getHttpArtifactUploadFailureCount();
WatchedFileHashCache.java,long start = System.nanoTime();,if (System != null ) long start = System.nanoTime();
WatchedFileHashCache.java,start = System.nanoTime();,if (System != null ) start = System.nanoTime();
GlobalStateManager.java,ReferenceCountedWriter defaultWriter = rotateDefaultLogFileWriter(info.getLogFilePath());,if (rotateDefaultLogFileWriter(info != null ) ReferenceCountedWriter defaultWriter = rotateDefaultLogFileWriter(info.getLogFilePath());
GlobalStateManager.java,Path logDirectory = info.getLogDirectoryPath();,if (info != null ) Path logDirectory = info.getLogDirectoryPath();
ArtifactCachesTest.java,BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();
ArtifactCachesTest.java,MultiArtifactCache localCache = (MultiArtifactCache) experimentalCache.getLocalCache();,if (experimentalCache != null ) MultiArtifactCache localCache = (MultiArtifactCache) experimentalCache.getLocalCache();
ArtifactCachesTest.java,MultiArtifactCache remoteCache = (MultiArtifactCache) experimentalCache.getRemoteCache();,if (experimentalCache != null ) MultiArtifactCache remoteCache = (MultiArtifactCache) experimentalCache.getRemoteCache();
RemoteArtifactsInLocalCacheArtifactCacheTest.java,ProjectFilesystem tmp = FakeProjectFilesystem.createJavaOnlyFilesystem();,if (FakeProjectFilesystem != null ) ProjectFilesystem tmp = FakeProjectFilesystem.createJavaOnlyFilesystem();
CxxPreprocessAndCompileStep.java,String err = new String(error.toByteArray());,if (String(error != null ) String err = new String(error.toByteArray());
CachingBuildEngine.java,"Optional<RuleKey> inputRuleKey = calculateInputBasedRuleKey(rule, context.getEventBus());","if (context != null ) Optional<RuleKey> inputRuleKey = calculateInputBasedRuleKey(rule, context.getEventBus());"
CachingBuildEngine.java,RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getRuleKey();,if (depFileRuleKeyAndInputs != null ) RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getRuleKey();
CachingBuildEngine.java,"Optional<RuleKeyAndInputs> manifestKey = calculateManifestKey(rule, context.getEventBus());","if (context != null ) Optional<RuleKeyAndInputs> manifestKey = calculateManifestKey(rule, context.getEventBus());"
DaemonicParserState.java,configs = builder.build();,if (builder != null ) configs = builder.build();
WatchedFileHashCache.java,Path relativeFilePath = archiveMemberPath.getArchivePath().normalize();,if (archiveMemberPath != null ) Path relativeFilePath = archiveMemberPath.getArchivePath().normalize();
CoercedTypeCache.java,IllegalStateException cause = (IllegalStateException) e.getCause();,if (e != null ) IllegalStateException cause = (IllegalStateException) e.getCause();
ParamInfo.java,this.name = paramInteractor.getName();,if (paramInteractor != null ) this.name = paramInteractor.getName();
ParamInfo.java,this.typeCoercer = typeCoercerFactory.typeCoercerForType(paramInteractor.getGenericType());,if (typeCoercerFactory != null ) this.typeCoercer = typeCoercerFactory.typeCoercerForType(paramInteractor.getGenericType());
ParamInfo.java,result = Optional.empty();,if (Optional != null ) result = Optional.empty();
ParamInfo.java,Method getter = closestGetterOnAbstractClassOrInterface.get();,if (closestGetterOnAbstractClassOrInterface != null ) Method getter = closestGetterOnAbstractClassOrInterface.get();
ParamInfo.java,Method getter = this.concreteGetter.get();,if (this != null ) Method getter = this.concreteGetter.get();
ProjectGeneratorTestUtils.java,value = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) value = ImmutableSortedSet.of();
ProjectGeneratorTestUtils.java,value = ImmutableList.of();,if (ImmutableList != null ) value = ImmutableList.of();
ProjectGeneratorTestUtils.java,value = ImmutableMap.of();,if (ImmutableMap != null ) value = ImmutableMap.of();
ProjectGeneratorTestUtils.java,value = Optional.empty();,if (Optional != null ) value = Optional.empty();
AbstractNodeBuilderWithMutableArg.java,arg = description.getConstructorArgType().newInstance();,if (description != null ) arg = description.getConstructorArgType().newInstance();
OwnersReportTest.java,FakeRuleDescription.FakeArg arg = new FakeRuleDescription.FakeArg();,if (FakeRuleDescription != null ) FakeRuleDescription.FakeArg arg = new FakeRuleDescription.FakeArg();
TargetNodeVisibilityTest.java,FakeRuleDescription.FakeArg arg = new FakeRuleDescription.FakeArg();,if (FakeRuleDescription != null ) FakeRuleDescription.FakeArg arg = new FakeRuleDescription.FakeArg();
BuildId.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
BuildId.java,struct.id = iprot.readString();,if (iprot != null ) struct.id = iprot.readString();
BuildId.java,struct.id = iprot.readString();,if (iprot != null ) struct.id = iprot.readString();
GetItemsToBuildRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
GetItemsToBuildRequest.java,struct.builderId = iprot.readString();,if (iprot != null ) struct.builderId = iprot.readString();
GetItemsToBuildRequest.java,struct.builderId = iprot.readString();,if (iprot != null ) struct.builderId = iprot.readString();
GetItemsToBuildResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
SetCoordinatorRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
SetCoordinatorRequest.java,struct.coordinatorAddress = iprot.readString();,if (iprot != null ) struct.coordinatorAddress = iprot.readString();
SetCoordinatorRequest.java,struct.coordinatorAddress = iprot.readString();,if (iprot != null ) struct.coordinatorAddress = iprot.readString();
DefaultIjLibraryFactory.java,PrebuiltJarDescription.Arg arg = targetNode.getConstructorArg();,if (targetNode != null ) PrebuiltJarDescription.Arg arg = targetNode.getConstructorArg();
PrebuiltJarDescription.java,input = arg.gwtJar.get();,if (arg != null ) input = arg.gwtJar.get();
PrebuiltJarDescription.java,input = arg.sourceJar.get();,if (arg != null ) input = arg.sourceJar.get();
DefaultIjLibraryFactory.java,AndroidPrebuiltAarDescription.Arg arg = targetNode.getConstructorArg();,if (targetNode != null ) AndroidPrebuiltAarDescription.Arg arg = targetNode.getConstructorArg();
AndroidAarDescription.java,AndroidManifestDescription.Arg androidManifestArgs = new AndroidManifestDescription.Arg();,if (AndroidManifestDescription != null ) AndroidManifestDescription.Arg androidManifestArgs = new AndroidManifestDescription.Arg();
AndroidAarDescription.java,androidManifestArgs.skeleton = args.getManifestSkeleton();,if (args != null ) androidManifestArgs.skeleton = args.getManifestSkeleton();
AndroidAarDescription.java,androidManifestArgs.deps = args.getDeps();,if (args != null ) androidManifestArgs.deps = args.getDeps();
AndroidManifestDescriptionTest.java,AndroidManifestDescription.Arg arg = new AndroidManifestDescription.Arg();,if (AndroidManifestDescription != null ) AndroidManifestDescription.Arg arg = new AndroidManifestDescription.Arg();
AndroidManifestDescriptionTest.java,arg.deps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.deps = ImmutableSortedSet.of();
AndroidManifestTest.java,AndroidManifestDescription.Arg arg = new AndroidManifestDescription.Arg();,if (AndroidManifestDescription != null ) AndroidManifestDescription.Arg arg = new AndroidManifestDescription.Arg();
AndroidInstrumentationApkTest.java,AndroidInstrumentationApkDescription.Arg arg = new AndroidInstrumentationApkDescription.Arg();,if (AndroidInstrumentationApkDescription != null ) AndroidInstrumentationApkDescription.Arg arg = new AndroidInstrumentationApkDescription.Arg();
AndroidInstrumentationApkTest.java,arg.apk = androidBinary.getBuildTarget();,if (androidBinary != null ) arg.apk = androidBinary.getBuildTarget();
AndroidBinaryDescription.java,public ManifestEntries manifestEntries = ManifestEntries.empty();,if (ManifestEntries != null ) public ManifestEntries manifestEntries = ManifestEntries.empty();
AndroidBinaryDescription.java,public BuildConfigFields buildConfigValues = BuildConfigFields.empty();,if (BuildConfigFields != null ) public BuildConfigFields buildConfigValues = BuildConfigFields.empty();
AndroidBinaryBuilder.java,arg.resourceCompression = Optional.of(resourceCompressionMode.toString());,if (Optional != null ) arg.resourceCompression = Optional.of(resourceCompressionMode.toString());
AndroidBinaryDescriptionTest.java,AndroidBinaryDescription.Arg arg = new AndroidBinaryDescription.Arg();,if (AndroidBinaryDescription != null ) AndroidBinaryDescription.Arg arg = new AndroidBinaryDescription.Arg();
AndroidBinaryDescriptionTest.java,AndroidBinaryDescription.Arg arg = new AndroidBinaryDescription.Arg();,if (AndroidBinaryDescription != null ) AndroidBinaryDescription.Arg arg = new AndroidBinaryDescription.Arg();
AndroidBinaryDescriptionTest.java,AndroidBinaryDescription.Arg arg = new AndroidBinaryDescription.Arg();,if (AndroidBinaryDescription != null ) AndroidBinaryDescription.Arg arg = new AndroidBinaryDescription.Arg();
AndroidBinaryDescriptionTest.java,AndroidBinaryDescription.Arg arg = new AndroidBinaryDescription.Arg();,if (AndroidBinaryDescription != null ) AndroidBinaryDescription.Arg arg = new AndroidBinaryDescription.Arg();
AndroidAarDescription.java,public BuildConfigFields buildConfigValues = BuildConfigFields.empty();,if (BuildConfigFields != null ) public BuildConfigFields buildConfigValues = BuildConfigFields.empty();
FineGrainedJavaDependencySuggester.java,JavaLibraryDescription.Arg arg = (JavaLibraryDescription.Arg) suggestedNode.getConstructorArg();,if (suggestedNode != null ) JavaLibraryDescription.Arg arg = (JavaLibraryDescription.Arg) suggestedNode.getConstructorArg();
ExportedDepsClosureResolver.java,JavaLibraryDescription.Arg arg = (JavaLibraryDescription.Arg) targetNode.getConstructorArg();,if (targetNode != null ) JavaLibraryDescription.Arg arg = (JavaLibraryDescription.Arg) targetNode.getConstructorArg();
JavaLibraryRuleHelper.java,boolean hasAnnotationProcessors = !arg.annotationProcessors.isEmpty();,if (!arg != null ) boolean hasAnnotationProcessors = !arg.annotationProcessors.isEmpty();
JavaLibraryRuleHelper.java,JavaLibraryDescription.Arg arg = targetNode.getConstructorArg();,if (targetNode != null ) JavaLibraryDescription.Arg arg = targetNode.getConstructorArg();
JvmLibraryArgInterpreterTest.java,arg.source = Optional.empty();,if (Optional != null ) arg.source = Optional.empty();
JvmLibraryArgInterpreterTest.java,arg.target = Optional.empty();,if (Optional != null ) arg.target = Optional.empty();
JvmLibraryArgInterpreterTest.java,arg.target = Optional.empty();,if (Optional != null ) arg.target = Optional.empty();
JvmLibraryArgInterpreterTest.java,arg.source = Optional.empty();,if (Optional != null ) arg.source = Optional.empty();
KnownBuildRuleTypesTest.java,arg.srcs = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.srcs = ImmutableSortedSet.of();
KnownBuildRuleTypesTest.java,arg.resources = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.resources = ImmutableSortedSet.of();
KnownBuildRuleTypesTest.java,arg.source = Optional.empty();,if (Optional != null ) arg.source = Optional.empty();
KnownBuildRuleTypesTest.java,arg.target = Optional.empty();,if (Optional != null ) arg.target = Optional.empty();
KnownBuildRuleTypesTest.java,arg.javaVersion = Optional.empty();,if (Optional != null ) arg.javaVersion = Optional.empty();
KnownBuildRuleTypesTest.java,arg.javac = Optional.empty();,if (Optional != null ) arg.javac = Optional.empty();
KnownBuildRuleTypesTest.java,arg.javacJar = Optional.empty();,if (Optional != null ) arg.javacJar = Optional.empty();
KnownBuildRuleTypesTest.java,arg.compilerClassName = Optional.empty();,if (Optional != null ) arg.compilerClassName = Optional.empty();
KnownBuildRuleTypesTest.java,arg.compiler = Optional.empty();,if (Optional != null ) arg.compiler = Optional.empty();
KnownBuildRuleTypesTest.java,arg.extraArguments = ImmutableList.of();,if (ImmutableList != null ) arg.extraArguments = ImmutableList.of();
KnownBuildRuleTypesTest.java,arg.removeClasses = ImmutableSet.of();,if (ImmutableSet != null ) arg.removeClasses = ImmutableSet.of();
KnownBuildRuleTypesTest.java,arg.proguardConfig = Optional.empty();,if (Optional != null ) arg.proguardConfig = Optional.empty();
KnownBuildRuleTypesTest.java,arg.annotationProcessorDeps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.annotationProcessorDeps = ImmutableSortedSet.of();
KnownBuildRuleTypesTest.java,arg.annotationProcessorParams = ImmutableList.of();,if (ImmutableList != null ) arg.annotationProcessorParams = ImmutableList.of();
KnownBuildRuleTypesTest.java,arg.annotationProcessors = ImmutableSet.of();,if (ImmutableSet != null ) arg.annotationProcessors = ImmutableSet.of();
KnownBuildRuleTypesTest.java,arg.annotationProcessorOnly = Optional.empty();,if (Optional != null ) arg.annotationProcessorOnly = Optional.empty();
KnownBuildRuleTypesTest.java,arg.postprocessClassesCommands = ImmutableList.of();,if (ImmutableList != null ) arg.postprocessClassesCommands = ImmutableList.of();
KnownBuildRuleTypesTest.java,arg.resourcesRoot = Optional.empty();,if (Optional != null ) arg.resourcesRoot = Optional.empty();
KnownBuildRuleTypesTest.java,arg.manifestFile = Optional.empty();,if (Optional != null ) arg.manifestFile = Optional.empty();
KnownBuildRuleTypesTest.java,arg.providedDeps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.providedDeps = ImmutableSortedSet.of();
KnownBuildRuleTypesTest.java,arg.exportedDeps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.exportedDeps = ImmutableSortedSet.of();
KnownBuildRuleTypesTest.java,arg.deps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.deps = ImmutableSortedSet.of();
KnownBuildRuleTypesTest.java,arg.tests = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.tests = ImmutableSortedSet.of();
KnownBuildRuleTypesTest.java,arg.generateAbiFromSource = Optional.empty();,if (Optional != null ) arg.generateAbiFromSource = Optional.empty();
KnownBuildRuleTypesTest.java,JavaLibraryDescription.Arg arg = new JavaLibraryDescription.Arg();,if (JavaLibraryDescription != null ) JavaLibraryDescription.Arg arg = new JavaLibraryDescription.Arg();
SwiftDescriptions.java,"output.srcs = filterSwiftSources(sourcePathResolver, args.getSrcs());","if (args != null ) output.srcs = filterSwiftSources(sourcePathResolver, args.getSrcs());"
SwiftDescriptions.java,output.compilerFlags = args.getCompilerFlags();,if (args != null ) output.compilerFlags = args.getCompilerFlags();
SwiftDescriptions.java,output.frameworks = args.getFrameworks();,if (args != null ) output.frameworks = args.getFrameworks();
SwiftDescriptions.java,output.libraries = args.getLibraries();,if (args != null ) output.libraries = args.getLibraries();
SwiftDescriptions.java,output.deps = args.getDeps();,if (args != null ) output.deps = args.getDeps();
SwiftDescriptions.java,output.supportedPlatformsRegex = args.getSupportedPlatformsRegex();,if (args != null ) output.supportedPlatformsRegex = args.getSupportedPlatformsRegex();
SwiftDescriptions.java,output.bridgingHeader = args.getBridgingHeader();,if (args != null ) output.bridgingHeader = args.getBridgingHeader();
SwiftDescriptionsTest.java,SwiftLibraryDescription.Arg output = new SwiftLibraryDescription.Arg();,if (SwiftLibraryDescription != null ) SwiftLibraryDescription.Arg output = new SwiftLibraryDescription.Arg();
SwiftLibraryIntegrationTest.java,SwiftLibraryDescription.Arg args = new SwiftLibraryDescription.Arg();,if (SwiftLibraryDescription != null ) SwiftLibraryDescription.Arg args = new SwiftLibraryDescription.Arg();
SwiftLibraryIntegrationTest.java,args.soname = Optional.empty();,if (Optional != null ) args.soname = Optional.empty();
SwiftLibraryIntegrationTest.java,args.moduleName = Optional.empty();,if (Optional != null ) args.moduleName = Optional.empty();
SwiftLibraryIntegrationTest.java,args.srcs = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) args.srcs = ImmutableSortedSet.of();
SwiftLibraryIntegrationTest.java,args.compilerFlags = ImmutableList.of();,if (ImmutableList != null ) args.compilerFlags = ImmutableList.of();
SwiftLibraryIntegrationTest.java,args.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) args.frameworks = ImmutableSortedSet.of();
SwiftLibraryIntegrationTest.java,args.libraries = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) args.libraries = ImmutableSortedSet.of();
SwiftLibraryIntegrationTest.java,args.enableObjcInterop = Optional.empty();,if (Optional != null ) args.enableObjcInterop = Optional.empty();
SwiftLibraryIntegrationTest.java,args.supportedPlatformsRegex = Optional.empty();,if (Optional != null ) args.supportedPlatformsRegex = Optional.empty();
SwiftLibraryIntegrationTest.java,args.bridgingHeader = Optional.empty();,if (Optional != null ) args.bridgingHeader = Optional.empty();
SwiftLibraryIntegrationTest.java,args.preferredLinkage = Optional.empty();,if (Optional != null ) args.preferredLinkage = Optional.empty();
PythonTestDescription.java,mainModule = args.mainModule.get();,if (args != null ) mainModule = args.mainModule.get();
PythonBinaryDescription.java,mainModule = args.mainModule.get();,if (args != null ) mainModule = args.mainModule.get();
RemoteFileDescriptionTest.java,RemoteFileDescription.Arg arg = new RemoteFileDescription.Arg();,if (RemoteFileDescription != null ) RemoteFileDescription.Arg arg = new RemoteFileDescription.Arg();
RemoteFileDescriptionTest.java,RemoteFileDescription.Arg arg = new RemoteFileDescription.Arg();,if (RemoteFileDescription != null ) RemoteFileDescription.Arg arg = new RemoteFileDescription.Arg();
PrebuiltOcamlLibraryDescription.java,final String libName = args.libName.orElse(target.getShortName());,if (args != null ) final String libName = args.libName.orElse(target.getShortName());
PrebuiltCxxLibraryDescriptionTest.java,String libName = arg.libName.orElse(TARGET.getShortName());,if (arg != null ) String libName = arg.libName.orElse(TARGET.getShortName());
PrebuiltCxxLibraryDescriptionTest.java,String libName = arg.libName.orElse(TARGET.getShortName());,if (arg != null ) String libName = arg.libName.orElse(TARGET.getShortName());
PrebuiltCxxLibraryDescriptionTest.java,String libName = arg.libName.orElse(TARGET.getShortName());,if (arg != null ) String libName = arg.libName.orElse(TARGET.getShortName());
PrebuiltCxxLibraryDescriptionTest.java,String libName = arg.libName.orElse(TARGET.getShortName());,if (arg != null ) String libName = arg.libName.orElse(TARGET.getShortName());
PrebuiltCxxLibraryDescriptionTest.java,PrebuiltCxxLibraryDescription.Arg arg = libBuilder.build().getConstructorArg();,if (libBuilder != null ) PrebuiltCxxLibraryDescription.Arg arg = libBuilder.build().getConstructorArg();
PrebuiltCxxLibraryDescriptionTest.java,PrebuiltCxxLibraryDescription.Arg arg = libBuilder.build().getConstructorArg();,if (libBuilder != null ) PrebuiltCxxLibraryDescription.Arg arg = libBuilder.build().getConstructorArg();
PrebuiltCxxLibraryDescriptionTest.java,PrebuiltCxxLibraryDescription.Arg arg = libBuilder.build().getConstructorArg();,if (libBuilder != null ) PrebuiltCxxLibraryDescription.Arg arg = libBuilder.build().getConstructorArg();
LuaBinaryDescription.java,LuaConfig.PackageStyle packageStyle = args.packageStyle.orElse(luaConfig.getPackageStyle());,if (args != null ) LuaConfig.PackageStyle packageStyle = args.packageStyle.orElse(luaConfig.getPackageStyle());
JsLibraryBuilder.java,arg.extraArgs = Optional.empty();,if (Optional != null ) arg.extraArgs = Optional.empty();
JsLibraryBuilder.java,arg.srcs = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.srcs = ImmutableSortedSet.of();
JsLibraryBuilder.java,arg.basePath = Optional.empty();,if (Optional != null ) arg.basePath = Optional.empty();
AppleBuildRules.java,AppleBundleDescription.Arg arg = (AppleBundleDescription.Arg) node.getConstructorArg();,if (node != null ) AppleBundleDescription.Arg arg = (AppleBundleDescription.Arg) node.getConstructorArg();
ProjectGenerator.java,AppleBundleDescription.Arg arg = (AppleBundleDescription.Arg) targetNode.getConstructorArg();,if (targetNode != null ) AppleBundleDescription.Arg arg = (AppleBundleDescription.Arg) targetNode.getConstructorArg();
ProjectGenerator.java,AppleBundleDescription.Arg arg = (AppleBundleDescription.Arg) targetNode.getConstructorArg();,if (targetNode != null ) AppleBundleDescription.Arg arg = (AppleBundleDescription.Arg) targetNode.getConstructorArg();
AppleBundleDescriptionTest.java,AppleBundleDescription.Arg constructorArg = new AppleBundleDescription.Arg();,if (AppleBundleDescription != null ) AppleBundleDescription.Arg constructorArg = new AppleBundleDescription.Arg();
AppleBundleDescriptionTest.java,AppleBundleDescription.Arg constructorArg = new AppleBundleDescription.Arg();,if (AppleBundleDescription != null ) AppleBundleDescription.Arg constructorArg = new AppleBundleDescription.Arg();
ApplePackageDescriptionTest.java,ApplePackageDescription.Arg arg = new ApplePackageDescription.Arg();,if (ApplePackageDescription != null ) ApplePackageDescription.Arg arg = new ApplePackageDescription.Arg();
ApplePackageDescriptionTest.java,ApplePackageDescription.Arg arg = new ApplePackageDescription.Arg();,if (ApplePackageDescription != null ) ApplePackageDescription.Arg arg = new ApplePackageDescription.Arg();
AppleResourceDescription.java,Arg appleResource = targetNode.getConstructorArg();,if (targetNode != null ) Arg appleResource = targetNode.getConstructorArg();
ProjectGenerator.java,AppleResourceDescription.Arg arg = resource.getConstructorArg();,if (resource != null ) AppleResourceDescription.Arg arg = resource.getConstructorArg();
NewNativeTargetProjectMutatorTest.java,AppleResourceDescription.Arg arg = populateArgWithDefaults(new AppleResourceDescription.Arg());,if (AppleResourceDescription != null ) AppleResourceDescription.Arg arg = populateArgWithDefaults(new AppleResourceDescription.Arg());
WorkerToolDescriptionTest.java,WorkerToolDescription.Arg args = new WorkerToolDescription.Arg();,if (WorkerToolDescription != null ) WorkerToolDescription.Arg args = new WorkerToolDescription.Arg();
WorkerToolDescriptionTest.java,args.env = ImmutableMap.of();,if (ImmutableMap != null ) args.env = ImmutableMap.of();
WorkerToolDescriptionTest.java,args.exe = shBinaryRule.getBuildTarget();,if (shBinaryRule != null ) args.exe = shBinaryRule.getBuildTarget();
WorkerToolDescriptionTest.java,args.args = Either.ofRight(ImmutableList.of());,if (Either != null ) args.args = Either.ofRight(ImmutableList.of());
WorkerToolDescriptionTest.java,args.persistent = Optional.empty();,if (Optional != null ) args.persistent = Optional.empty();
WorkspaceAndProjectGenerator.java,XcodeWorkspaceConfigDescription.Arg schemeConfigArg = schemeConfigEntry.getValue();,if (schemeConfigEntry != null ) XcodeWorkspaceConfigDescription.Arg schemeConfigArg = schemeConfigEntry.getValue();
XCodeProjectCommandHelper.java,XcodeWorkspaceConfigDescription.Arg workspaceArgs = new XcodeWorkspaceConfigDescription.Arg();,if (XcodeWorkspaceConfigDescription != null ) XcodeWorkspaceConfigDescription.Arg workspaceArgs = new XcodeWorkspaceConfigDescription.Arg();
XCodeProjectCommandHelper.java,workspaceArgs.srcTarget = Optional.of(sourceTargetNode.getBuildTarget());,if (Optional != null ) workspaceArgs.srcTarget = Optional.of(sourceTargetNode.getBuildTarget());
XCodeProjectCommandHelper.java,workspaceArgs.actionConfigNames = ImmutableMap.of();,if (ImmutableMap != null ) workspaceArgs.actionConfigNames = ImmutableMap.of();
XCodeProjectCommandHelper.java,workspaceArgs.extraTests = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) workspaceArgs.extraTests = ImmutableSortedSet.of();
XCodeProjectCommandHelper.java,workspaceArgs.extraTargets = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) workspaceArgs.extraTargets = ImmutableSortedSet.of();
XCodeProjectCommandHelper.java,workspaceArgs.workspaceName = Optional.empty();,if (Optional != null ) workspaceArgs.workspaceName = Optional.empty();
XCodeProjectCommandHelper.java,workspaceArgs.extraSchemes = ImmutableSortedMap.of();,if (ImmutableSortedMap != null ) workspaceArgs.extraSchemes = ImmutableSortedMap.of();
XCodeProjectCommandHelper.java,workspaceArgs.isRemoteRunnable = Optional.empty();,if (Optional != null ) workspaceArgs.isRemoteRunnable = Optional.empty();
XCodeProjectCommandHelper.java,workspaceArgs.explicitRunnablePath = Optional.empty();,if (Optional != null ) workspaceArgs.explicitRunnablePath = Optional.empty();
XCodeProjectCommandHelper.java,workspaceArgs.launchStyle = Optional.empty();,if (Optional != null ) workspaceArgs.launchStyle = Optional.empty();
NewNativeTargetProjectMutatorTest.java,AppleAssetCatalogDescription.Arg arg = new AppleAssetCatalogDescription.Arg();,if (AppleAssetCatalogDescription != null ) AppleAssetCatalogDescription.Arg arg = new AppleAssetCatalogDescription.Arg();
RuleDepsCache.java,this.cache = CacheBuilder.newBuilder().build();,if (CacheBuilder != null ) this.cache = CacheBuilder.newBuilder().build();
ExopackageInstallerIntegrationTest.java,String dir = dirPath.toString();,if (dirPath != null ) String dir = dirPath.toString();
ExopackageInstaller.java,String hash = input.getKey();,if (input != null ) String hash = input.getKey();
ExopackageInstaller.java,ResourcesInfo info = exopackageInfo.getResourcesInfo().get();,if (exopackageInfo != null ) ResourcesInfo info = exopackageInfo.getResourcesInfo().get();
MergeAssets.java,String extension = Files.getFileExtension(inputEntry.getName());,if (Files != null ) String extension = Files.getFileExtension(inputEntry.getName());
ResTablePackage.java,StringPool keys = resPackage.keys.copy();,if (resPackage != null ) StringPool keys = resPackage.keys.copy();
CxxPreprocessAndCompile.java,PreprocessorDelegate effectivePreprocessorDelegate = preprocessDelegate.get();,if (preprocessDelegate != null ) PreprocessorDelegate effectivePreprocessorDelegate = preprocessDelegate.get();
CxxPreprocessAndCompileStep.java,"ProcessExecutorParams.Builder builder = makeSubprocessBuilder(context, ImmutableMap.of());","if (ImmutableMap != null ) ProcessExecutorParams.Builder builder = makeSubprocessBuilder(context, ImmutableMap.of());"
CxxPreprocessAndCompile.java,preprocessorCommand = Optional.empty();,if (Optional != null ) preprocessorCommand = Optional.empty();
CxxPreprocessAndCompile.java,compilerCommand = Optional.empty();,if (Optional != null ) compilerCommand = Optional.empty();
ExopackageInstaller.java,ResourcesInfo info = exopackageInfo.getResourcesInfo().get();,if (exopackageInfo != null ) ResourcesInfo info = exopackageInfo.getResourcesInfo().get();
ExopackageInstaller.java,String hash = input.getKey();,if (input != null ) String hash = input.getKey();
ExopackageInstaller.java,ImmutableSet<String> requiredHashes = libraries.keySet();,if (libraries != null ) ImmutableSet<String> requiredHashes = libraries.keySet();
ExopackageInstaller.java,String dirPath = dataRoot.resolve(dirname).toString();,if (dataRoot != null ) String dirPath = dataRoot.resolve(dirname).toString();
ExopackageInstaller.java,Path source = entry.getValue();,if (entry != null ) Path source = entry.getValue();
ExopackageInstaller.java,Path source = entry.getValue();,if (entry != null ) Path source = entry.getValue();
ExopackageInstaller.java,File apkPath = agentApkPath.toFile();,if (agentApkPath != null ) File apkPath = agentApkPath.toFile();
ExopackageInstallerTest.java,ExopackageInstaller.PackageInfo info = optionalInfo.get();,if (optionalInfo != null ) ExopackageInstaller.PackageInfo info = optionalInfo.get();
ExopackageInstallerTest.java,ExopackageInstaller.PackageInfo info = optionalInfo.get();,if (optionalInfo != null ) ExopackageInstaller.PackageInfo info = optionalInfo.get();
FileSystemMap.java,path = path.getParent();,if (path != null ) path = path.getParent();
FileSystemMap.java,Entry<T> current = stack.pop();,if (stack != null ) Entry<T> current = stack.pop();
FileSystemMap.java,Path path = currentPath.resolve(e.getKey());,if (currentPath != null ) Path path = currentPath.resolve(e.getKey());
ArtifactCacheBuckConfigTest.java,ImmutableSet<HttpCacheEntry> httpCacheEntries = config.getCacheEntries().getHttpCacheEntries();,if (config != null ) ImmutableSet<HttpCacheEntry> httpCacheEntries = config.getCacheEntries().getHttpCacheEntries();
ArtifactCacheBuckConfigTest.java,ImmutableSet<HttpCacheEntry> httpCacheEntries = config.getCacheEntries().getHttpCacheEntries();,if (config != null ) ImmutableSet<HttpCacheEntry> httpCacheEntries = config.getCacheEntries().getHttpCacheEntries();
ServedCacheIntegrationTest.java,LazyPath fetchedContents = LazyPath.ofInstance(tmpDir.newFile());,if (LazyPath != null ) LazyPath fetchedContents = LazyPath.ofInstance(tmpDir.newFile());
IjSourceRootSimplifier.java,List<IjFolder> presentChildren = new ArrayList<>(children.size());,if (ArrayList<>(children != null ) List<IjFolder> presentChildren = new ArrayList<>(children.size());
IjSourceRootSimplifier.java,IjFolder folder = folderOptional.get();,if (folderOptional != null ) IjFolder folder = folderOptional.get();
IjSourceRootSimplifier.java,List<Path> mergedPaths = new ArrayList<>(children.size());,if (ArrayList<>(children != null ) List<Path> mergedPaths = new ArrayList<>(children.size());
IjSourceRootSimplifier.java,Iterator<IjFolder> childIterator = children.iterator();,if (children != null ) Iterator<IjFolder> childIterator = children.iterator();
IjSourceRootSimplifier.java,IjFolder bestCandidate = childIterator.next();,if (childIterator != null ) IjFolder bestCandidate = childIterator.next();
IjSourceRootSimplifier.java,IjFolder candidate = childIterator.next();,if (childIterator != null ) IjFolder candidate = childIterator.next();
IjSourceRootSimplifier.java,Path childPackage = packagePathCache.lookup(child).get();,if (packagePathCache != null ) Path childPackage = packagePathCache.lookup(child).get();
WatchedFileHashCache.java,long start = System.nanoTime();,if (System != null ) long start = System.nanoTime();
WatchedFileHashCache.java,start = System.nanoTime();,if (System != null ) start = System.nanoTime();
AppleBinaryDescription.java,CxxBinaryDescription.Arg delegateArg = new CxxBinaryDescription.Arg();,if (CxxBinaryDescription != null ) CxxBinaryDescription.Arg delegateArg = new CxxBinaryDescription.Arg();
AppleBinaryDescription.java,CxxBinaryDescription.Arg delegateArg = new CxxBinaryDescription.Arg();,if (CxxBinaryDescription != null ) CxxBinaryDescription.Arg delegateArg = new CxxBinaryDescription.Arg();
AppleBuildRules.java,CxxLibraryDescription.Arg arg = (CxxLibraryDescription.Arg) targetNode.getConstructorArg();,if (targetNode != null ) CxxLibraryDescription.Arg arg = (CxxLibraryDescription.Arg) targetNode.getConstructorArg();
AppleDescriptions.java,output.srcs = nonSwiftSrcs.build();,if (nonSwiftSrcs != null ) output.srcs = nonSwiftSrcs.build();
AppleDescriptions.java,output.defaultPlatform = Optional.empty();,if (Optional != null ) output.defaultPlatform = Optional.empty();
AppleLibraryDescription.java,CxxLibraryDescription.Arg delegateArg = new CxxLibraryDescription.Arg();,if (CxxLibraryDescription != null ) CxxLibraryDescription.Arg delegateArg = new CxxLibraryDescription.Arg();
AppleLibraryDescription.java,CxxLibraryDescription.Arg delegateArg = new CxxLibraryDescription.Arg();,if (CxxLibraryDescription != null ) CxxLibraryDescription.Arg delegateArg = new CxxLibraryDescription.Arg();
ProjectGenerator.java,CxxLibraryDescription.Arg arg = targetNode.getConstructorArg();,if (targetNode != null ) CxxLibraryDescription.Arg arg = targetNode.getConstructorArg();
ProjectGenerator.java,CxxLibraryDescription.Arg arg = targetNode.getConstructorArg();,if (targetNode != null ) CxxLibraryDescription.Arg arg = targetNode.getConstructorArg();
ProjectGenerator.java,CxxLibraryDescription.Arg arg = targetNode.getConstructorArg();,if (targetNode != null ) CxxLibraryDescription.Arg arg = targetNode.getConstructorArg();
ProjectGenerator.java,CxxLibraryDescription.Arg arg = targetNode.getConstructorArg();,if (targetNode != null ) CxxLibraryDescription.Arg arg = targetNode.getConstructorArg();
ProjectGenerator.java,AppleLibraryDescription.Arg constructorArg = appleLibNode.get().getConstructorArg();,if (appleLibNode != null ) AppleLibraryDescription.Arg constructorArg = appleLibNode.get().getConstructorArg();
CxxLibraryDescription.java,arg.deps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.deps = ImmutableSortedSet.of();
CxxLibraryDescription.java,arg.exportedDeps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.exportedDeps = ImmutableSortedSet.of();
CxxLibraryDescription.java,arg.srcs = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.srcs = ImmutableSortedSet.of();
CxxLibraryDescription.java,arg.platformSrcs = PatternMatchedCollection.of();,if (PatternMatchedCollection != null ) arg.platformSrcs = PatternMatchedCollection.of();
CxxLibraryDescription.java,arg.prefixHeader = Optional.empty();,if (Optional != null ) arg.prefixHeader = Optional.empty();
CxxLibraryDescription.java,arg.precompiledHeader = Optional.empty();,if (Optional != null ) arg.precompiledHeader = Optional.empty();
CxxLibraryDescription.java,arg.headers = SourceList.ofUnnamedSources(ImmutableSortedSet.of());,if (SourceList != null ) arg.headers = SourceList.ofUnnamedSources(ImmutableSortedSet.of());
CxxLibraryDescription.java,arg.platformHeaders = PatternMatchedCollection.of();,if (PatternMatchedCollection != null ) arg.platformHeaders = PatternMatchedCollection.of();
CxxLibraryDescription.java,arg.exportedHeaders = SourceList.ofUnnamedSources(ImmutableSortedSet.of());,if (SourceList != null ) arg.exportedHeaders = SourceList.ofUnnamedSources(ImmutableSortedSet.of());
CxxLibraryDescription.java,arg.exportedPlatformHeaders = PatternMatchedCollection.of();,if (PatternMatchedCollection != null ) arg.exportedPlatformHeaders = PatternMatchedCollection.of();
CxxLibraryDescription.java,arg.compilerFlags = ImmutableList.of();,if (ImmutableList != null ) arg.compilerFlags = ImmutableList.of();
CxxLibraryDescription.java,arg.platformCompilerFlags = PatternMatchedCollection.of();,if (PatternMatchedCollection != null ) arg.platformCompilerFlags = PatternMatchedCollection.of();
CxxLibraryDescription.java,arg.langCompilerFlags = ImmutableMap.of();,if (ImmutableMap != null ) arg.langCompilerFlags = ImmutableMap.of();
CxxLibraryDescription.java,arg.exportedPreprocessorFlags = ImmutableList.of();,if (ImmutableList != null ) arg.exportedPreprocessorFlags = ImmutableList.of();
CxxLibraryDescription.java,arg.exportedPlatformPreprocessorFlags = PatternMatchedCollection.of();,if (PatternMatchedCollection != null ) arg.exportedPlatformPreprocessorFlags = PatternMatchedCollection.of();
CxxLibraryDescription.java,arg.exportedLangPreprocessorFlags = ImmutableMap.of();,if (ImmutableMap != null ) arg.exportedLangPreprocessorFlags = ImmutableMap.of();
CxxLibraryDescription.java,arg.preprocessorFlags = ImmutableList.of();,if (ImmutableList != null ) arg.preprocessorFlags = ImmutableList.of();
CxxLibraryDescription.java,arg.platformPreprocessorFlags = PatternMatchedCollection.of();,if (PatternMatchedCollection != null ) arg.platformPreprocessorFlags = PatternMatchedCollection.of();
CxxLibraryDescription.java,arg.langPreprocessorFlags = ImmutableMap.of();,if (ImmutableMap != null ) arg.langPreprocessorFlags = ImmutableMap.of();
CxxLibraryDescription.java,arg.linkerFlags = ImmutableList.of();,if (ImmutableList != null ) arg.linkerFlags = ImmutableList.of();
CxxLibraryDescription.java,arg.exportedLinkerFlags = ImmutableList.of();,if (ImmutableList != null ) arg.exportedLinkerFlags = ImmutableList.of();
CxxLibraryDescription.java,arg.platformLinkerFlags = PatternMatchedCollection.of();,if (PatternMatchedCollection != null ) arg.platformLinkerFlags = PatternMatchedCollection.of();
CxxLibraryDescription.java,arg.exportedPlatformLinkerFlags = PatternMatchedCollection.of();,if (PatternMatchedCollection != null ) arg.exportedPlatformLinkerFlags = PatternMatchedCollection.of();
CxxLibraryDescription.java,arg.cxxRuntimeType = Optional.empty();,if (Optional != null ) arg.cxxRuntimeType = Optional.empty();
CxxLibraryDescription.java,arg.forceStatic = Optional.empty();,if (Optional != null ) arg.forceStatic = Optional.empty();
CxxLibraryDescription.java,arg.preferredLinkage = Optional.empty();,if (Optional != null ) arg.preferredLinkage = Optional.empty();
CxxLibraryDescription.java,arg.linkWhole = Optional.empty();,if (Optional != null ) arg.linkWhole = Optional.empty();
CxxLibraryDescription.java,arg.headerNamespace = Optional.empty();,if (Optional != null ) arg.headerNamespace = Optional.empty();
CxxLibraryDescription.java,arg.soname = Optional.empty();,if (Optional != null ) arg.soname = Optional.empty();
CxxLibraryDescription.java,arg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.frameworks = ImmutableSortedSet.of();
CxxLibraryDescription.java,arg.libraries = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.libraries = ImmutableSortedSet.of();
CxxLibraryDescription.java,arg.tests = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.tests = ImmutableSortedSet.of();
CxxLibraryDescription.java,arg.supportedPlatformsRegex = Optional.empty();,if (Optional != null ) arg.supportedPlatformsRegex = Optional.empty();
CxxLibraryDescription.java,arg.linkStyle = Optional.empty();,if (Optional != null ) arg.linkStyle = Optional.empty();
CxxLibraryDescription.java,arg.bridgingHeader = Optional.empty();,if (Optional != null ) arg.bridgingHeader = Optional.empty();
CxxLibraryDescription.java,arg.moduleName = Optional.empty();,if (Optional != null ) arg.moduleName = Optional.empty();
CxxLibraryDescription.java,arg.xcodePublicHeadersSymlinks = Optional.empty();,if (Optional != null ) arg.xcodePublicHeadersSymlinks = Optional.empty();
CxxLibraryDescription.java,arg.xcodePrivateHeadersSymlinks = Optional.empty();,if (Optional != null ) arg.xcodePrivateHeadersSymlinks = Optional.empty();
CxxLibraryDescription.java,boolean hasObjectsForAnyPlatform = !args.srcs.isEmpty();,if (!args != null ) boolean hasObjectsForAnyPlatform = !args.srcs.isEmpty();
AppleBuildRulesTest.java,AppleLibraryDescription.Arg arg = populateArgWithDefaults(new AppleLibraryDescription.Arg());,if (AppleLibraryDescription != null ) AppleLibraryDescription.Arg arg = populateArgWithDefaults(new AppleLibraryDescription.Arg());
CxxPythonExtensionDescriptionTest.java,CxxPythonExtensionDescription.Arg constructorArg = new CxxPythonExtensionDescription.Arg();,if (CxxPythonExtensionDescription != null ) CxxPythonExtensionDescription.Arg constructorArg = new CxxPythonExtensionDescription.Arg();
SwiftDescriptionsTest.java,CxxLibraryDescription.Arg args = CxxLibraryDescription.createEmptyConstructorArg();,if (CxxLibraryDescription != null ) CxxLibraryDescription.Arg args = CxxLibraryDescription.createEmptyConstructorArg();
SwiftDescriptionsTest.java,args.compilerFlags = ImmutableList.of();,if (ImmutableList != null ) args.compilerFlags = ImmutableList.of();
SwiftDescriptionsTest.java,args.supportedPlatformsRegex = Optional.empty();,if (Optional != null ) args.supportedPlatformsRegex = Optional.empty();
JarDirectoryStepTest.java,int returnCode = step.execute(context).getExitCode();,if (step != null ) int returnCode = step.execute(context).getExitCode();
ProjectView.java,Path linkPath = link.toPath();,if (link != null ) Path linkPath = link.toPath();
MergeAssets.java,File file = assetRoot.resolve(asset).toFile();,if (assetRoot != null ) File file = assetRoot.resolve(asset).toFile();
CxxPreprocessAndCompileStep.java,fileType = type.get().getLanguage();,if (type != null ) fileType = type.get().getLanguage();
AndroidBinary.java,classNamesToHashesSupplier = packageableCollection.getClassNamesToHashesSupplier();,if (packageableCollection != null ) classNamesToHashesSupplier = packageableCollection.getClassNamesToHashesSupplier();
AndroidNativeLibsPackageableGraphEnhancer.java,NdkCxxPlatforms.CxxRuntime cxxRuntime = platform.getCxxRuntime();,if (platform != null ) NdkCxxPlatforms.CxxRuntime cxxRuntime = platform.getCxxRuntime();
ApkGenruleTest.java,ApkGenruleDescription.Arg arg = new ApkGenruleDescription.Arg();,if (ApkGenruleDescription != null ) ApkGenruleDescription.Arg arg = new ApkGenruleDescription.Arg();
ApkGenruleTest.java,arg.type = Optional.empty();,if (Optional != null ) arg.type = Optional.empty();
ApkGenruleTest.java,arg.tests = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.tests = ImmutableSortedSet.of();
JavaDepsFinder.java,JavaLibraryDescription.Arg arg = (JavaLibraryDescription.Arg) node.getConstructorArg();,if (node != null ) JavaLibraryDescription.Arg arg = (JavaLibraryDescription.Arg) node.getConstructorArg();
JavaDepsFinder.java,providedDeps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) providedDeps = ImmutableSortedSet.of();
JavaDepsFinder.java,exportedDeps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) exportedDeps = ImmutableSortedSet.of();
Symbols.java,this.required = ImmutableList.of();,if (ImmutableList != null ) this.required = ImmutableList.of();
Symbols.java,this.exported = ImmutableList.of();,if (ImmutableList != null ) this.exported = ImmutableList.of();
WorkspaceAndProjectGeneratorTest.java,cxxBuckConfig = CxxLibraryBuilder.createDefaultConfig();,if (CxxLibraryBuilder != null ) cxxBuckConfig = CxxLibraryBuilder.createDefaultConfig();
AbstractCxxBuilder.java,BuckConfig buckConfig = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig buckConfig = FakeBuckConfig.builder().build();
CxxBinaryDescriptionTest.java,CxxPlatform cxxPlatform = CxxBinaryBuilder.createDefaultPlatform();,if (CxxBinaryBuilder != null ) CxxPlatform cxxPlatform = CxxBinaryBuilder.createDefaultPlatform();
CxxBinaryDescriptionTest.java,CxxPlatform platform = CxxLibraryBuilder.createDefaultPlatform();,if (CxxLibraryBuilder != null ) CxxPlatform platform = CxxLibraryBuilder.createDefaultPlatform();
CxxBinaryDescriptionTest.java,CxxPlatform platform = CxxLibraryBuilder.createDefaultPlatform();,if (CxxLibraryBuilder != null ) CxxPlatform platform = CxxLibraryBuilder.createDefaultPlatform();
CxxLibraryDescriptionTest.java,CxxPlatform cxxPlatform = CxxLibraryBuilder.createDefaultPlatform();,if (CxxLibraryBuilder != null ) CxxPlatform cxxPlatform = CxxLibraryBuilder.createDefaultPlatform();
CxxLibraryDescriptionTest.java,CxxPlatform cxxPlatform = CxxLibraryBuilder.createDefaultPlatform();,if (CxxLibraryBuilder != null ) CxxPlatform cxxPlatform = CxxLibraryBuilder.createDefaultPlatform();
CxxLibraryDescriptionTest.java,CxxPlatform cxxPlatform = CxxLibraryBuilder.createDefaultPlatform();,if (CxxLibraryBuilder != null ) CxxPlatform cxxPlatform = CxxLibraryBuilder.createDefaultPlatform();
CxxLibraryDescriptionTest.java,CxxPlatform cxxPlatform = CxxLibraryBuilder.createDefaultPlatform();,if (CxxLibraryBuilder != null ) CxxPlatform cxxPlatform = CxxLibraryBuilder.createDefaultPlatform();
CxxLibraryDescriptionTest.java,CxxPlatform platform = CxxLibraryBuilder.createDefaultPlatform();,if (CxxLibraryBuilder != null ) CxxPlatform platform = CxxLibraryBuilder.createDefaultPlatform();
CxxLibraryDescriptionTest.java,CxxPlatform platform = CxxLibraryBuilder.createDefaultPlatform();,if (CxxLibraryBuilder != null ) CxxPlatform platform = CxxLibraryBuilder.createDefaultPlatform();
PrebuiltCxxLibraryDescriptionTest.java,CxxPlatform platform = CxxLibraryBuilder.createDefaultPlatform();,if (CxxLibraryBuilder != null ) CxxPlatform platform = CxxLibraryBuilder.createDefaultPlatform();
PrebuiltCxxLibraryTest.java,CxxPlatform platform = CxxLibraryBuilder.createDefaultPlatform();,if (CxxLibraryBuilder != null ) CxxPlatform platform = CxxLibraryBuilder.createDefaultPlatform();
HalideLibraryDescriptionTest.java,CxxPlatform cxxPlatform = CxxLibraryBuilder.createDefaultPlatform();,if (CxxLibraryBuilder != null ) CxxPlatform cxxPlatform = CxxLibraryBuilder.createDefaultPlatform();
ProjectCommand.java,parameterMode = buckConfig.xcodeProjectTestsMode();,if (buckConfig != null ) parameterMode = buckConfig.xcodeProjectTestsMode();
ProjectCommand.java,workspaceArgs = castedWorkspaceNode.getConstructorArg();,if (castedWorkspaceNode != null ) workspaceArgs = castedWorkspaceNode.getConstructorArg();
ProjectCommand.java,BuckConfig buckConfig = params.getBuckConfig();,if (params != null ) BuckConfig buckConfig = params.getBuckConfig();
ProjectCommand.java,Optional<ProcessManager> processManager = params.getProcessManager();,if (params != null ) Optional<ProcessManager> processManager = params.getProcessManager();
ProjectCommand.java,boolean canPromptResult = canPrompt(params.getEnvironment());,if (canPrompt(params != null ) boolean canPromptResult = canPrompt(params.getEnvironment());
ProjectCommand.java,result = Optional.ofNullable(bufferedStdinReader.readLine());,if (Optional != null ) result = Optional.ofNullable(bufferedStdinReader.readLine());
ProjectCommand.java,ImmutableSet<BuildTarget> explicitTestTargets = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<BuildTarget> explicitTestTargets = ImmutableSet.of();
ProjectCommand.java,XcodeWorkspaceConfigDescription.Arg workspaceArgs = new XcodeWorkspaceConfigDescription.Arg();,if (XcodeWorkspaceConfigDescription != null ) XcodeWorkspaceConfigDescription.Arg workspaceArgs = new XcodeWorkspaceConfigDescription.Arg();
ProjectCommand.java,workspaceArgs.srcTarget = Optional.of(sourceTargetNode.getBuildTarget());,if (Optional != null ) workspaceArgs.srcTarget = Optional.of(sourceTargetNode.getBuildTarget());
ProjectCommand.java,workspaceArgs.actionConfigNames = ImmutableMap.of();,if (ImmutableMap != null ) workspaceArgs.actionConfigNames = ImmutableMap.of();
ProjectCommand.java,workspaceArgs.extraTests = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) workspaceArgs.extraTests = ImmutableSortedSet.of();
ProjectCommand.java,workspaceArgs.extraTargets = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) workspaceArgs.extraTargets = ImmutableSortedSet.of();
ProjectCommand.java,workspaceArgs.workspaceName = Optional.empty();,if (Optional != null ) workspaceArgs.workspaceName = Optional.empty();
ProjectCommand.java,workspaceArgs.extraSchemes = ImmutableSortedMap.of();,if (ImmutableSortedMap != null ) workspaceArgs.extraSchemes = ImmutableSortedMap.of();
ProjectCommand.java,workspaceArgs.isRemoteRunnable = Optional.empty();,if (Optional != null ) workspaceArgs.isRemoteRunnable = Optional.empty();
ProjectCommand.java,workspaceArgs.explicitRunnablePath = Optional.empty();,if (Optional != null ) workspaceArgs.explicitRunnablePath = Optional.empty();
ProjectCommand.java,workspaceArgs.launchStyle = Optional.empty();,if (Optional != null ) workspaceArgs.launchStyle = Optional.empty();
ProjectCommand.java,nodes = projectGraph.getSubgraph(projectRoots).getNodes();,if (projectGraph != null ) nodes = projectGraph.getSubgraph(projectRoots).getNodes();
ProjectCommand.java,BuckConfig buckConfig = params.getBuckConfig();,if (params != null ) BuckConfig buckConfig = params.getBuckConfig();
ProjectCommand.java,BuildRuleResolver ruleResolver = result.getResolver();,if (result != null ) BuildRuleResolver ruleResolver = result.getResolver();
ProjectIntegrationTest.java,String workspacePathString = temporaryFolder.getRoot().toString();,if (temporaryFolder != null ) String workspacePathString = temporaryFolder.getRoot().toString();
ReferenceCountedWriter.java,int currentCount = counter.decrementAndGet();,if (counter != null ) int currentCount = counter.decrementAndGet();
CachingBuildEngine.java,final BuildInfoStore buildInfoStore = getOrCreateBuildInfoStore(rule.getProjectFilesystem());,if (getOrCreateBuildInfoStore(rule != null ) final BuildInfoStore buildInfoStore = getOrCreateBuildInfoStore(rule.getProjectFilesystem());
DistBuildClientExecutor.java,BuildJob job = distBuildService.createBuild();,if (distBuildService != null ) BuildJob job = distBuildService.createBuild();
DistBuildServiceTest.java,BuildJob job = distBuildService.createBuild();,if (distBuildService != null ) BuildJob job = distBuildService.createBuild();
JsBundleBuilder.java,arg.bundleName = Optional.empty();,if (Optional != null ) arg.bundleName = Optional.empty();
NewNativeTargetProjectMutator.java,ReactNativeLibraryArgs args = (ReactNativeLibraryArgs) targetNode.getConstructorArg();,if (targetNode != null ) ReactNativeLibraryArgs args = (ReactNativeLibraryArgs) targetNode.getConstructorArg();
AndroidResourceDescription.java,Arg arg = node.getConstructorArg();,if (node != null ) Arg arg = node.getConstructorArg();
AndroidResourceDescription.java,Arg arg = node.getConstructorArg();,if (node != null ) Arg arg = node.getConstructorArg();
AndroidBuildConfigDescription.java,public BuildConfigFields values = BuildConfigFields.empty();,if (BuildConfigFields != null ) public BuildConfigFields values = BuildConfigFields.empty();
ExportFileDescription.java,name = args.out.get();,if (args != null ) name = args.out.get();
ExportFileDescription.java,src = args.src.get();,if (args != null ) src = args.src.get();
DistBuildSlaveEventBusListener.java,statusCopy = status.deepCopy();,if (status != null ) statusCopy = status.deepCopy();
IjModuleGraphFactory.java,AbstractDescriptionArg arg = (AbstractDescriptionArg) depTargetNode.getConstructorArg();,if (depTargetNode != null ) AbstractDescriptionArg arg = (AbstractDescriptionArg) depTargetNode.getConstructorArg();
NativeLibraryMergeEnhancer.java,Optional<NativeLinkable> glueLinkable = Optional.empty();,if (Optional != null ) Optional<NativeLinkable> glueLinkable = Optional.empty();
NativeLibraryMergeEnhancer.java,BuildRule rule = ruleResolver.getRule(nativeLibraryMergeGlue.get());,if (ruleResolver != null ) BuildRule rule = ruleResolver.getRule(nativeLibraryMergeGlue.get());
WatchedFileHashCache.java,Path relativeFilePath = archiveMemberPath.getArchivePath().normalize();,if (archiveMemberPath != null ) Path relativeFilePath = archiveMemberPath.getArchivePath().normalize();
IjProjectTemplateDataPreparer.java,Set<Path> relativeAssetPaths = new HashSet<>(assetPaths.size());,if (HashSet<>(assetPaths != null ) Set<Path> relativeAssetPaths = new HashSet<>(assetPaths.size());
IjProjectTemplateDataPreparer.java,Path moduleBase = module.getModuleBasePath();,if (module != null ) Path moduleBase = module.getModuleBasePath();
IjProjectTemplateDataPreparer.java,Optional<Path> proguardPath = androidFacet.getProguardConfigPath();,if (androidFacet != null ) Optional<Path> proguardPath = androidFacet.getProguardConfigPath();
ExportFileDescription.java,name = args.getOut().get();,if (args != null ) name = args.getOut().get();
ExportFileDescription.java,src = args.getSrc().get();,if (args != null ) src = args.getSrc().get();
Jsr199Javac.java,Writer compilerOutputWriter = new PrintWriter(context.getStdErr());,if (PrintWriter(context != null ) Writer compilerOutputWriter = new PrintWriter(context.getStdErr());
StubJar.java,List<Path> paths = new ArrayList<>(input.getRelativePaths());,if (ArrayList<>(input != null ) List<Path> paths = new ArrayList<>(input.getRelativePaths());
ExportFileDescription.java,name = args.out.get();,if (args != null ) name = args.out.get();
ExportFileDescription.java,src = args.src.get();,if (args != null ) src = args.src.get();
ParamInfo.java,this.name = field.getName();,if (field != null ) this.name = field.getName();
ParamInfo.java,this.isOptional = Optional.class.isAssignableFrom(field.getType());,if (Optional != null ) this.isOptional = Optional.class.isAssignableFrom(field.getType());
ParamInfo.java,this.typeCoercer = typeCoercerFactory.typeCoercerForType(field.getGenericType());,if (typeCoercerFactory != null ) this.typeCoercer = typeCoercerFactory.typeCoercerForType(field.getGenericType());
ConstructorArgMarshallerFieldBasedTest.java,DefaultBuildTargetSourcePath path = new DefaultBuildTargetSourcePath(rule.getBuildTarget());,if (DefaultBuildTargetSourcePath(rule != null ) DefaultBuildTargetSourcePath path = new DefaultBuildTargetSourcePath(rule.getBuildTarget());
TargetNodeTranslator.java,A newConstructorArg = node.getDescription().createUnpopulatedConstructorArg();,if (node != null ) A newConstructorArg = node.getDescription().createUnpopulatedConstructorArg();
DefaultParserTargetNodeFactory.java,Object constructorArg = description.createUnpopulatedConstructorArg();,if (description != null ) Object constructorArg = description.createUnpopulatedConstructorArg();
GenruleDescriptionTest.java,GenruleDescription.Arg constructorArg = new GenruleDescription.Arg();,if (GenruleDescription != null ) GenruleDescription.Arg constructorArg = new GenruleDescription.Arg();
Pair.java,Integer hash = hashCache.get();,if (hashCache != null ) Integer hash = hashCache.get();
ProjectView.java,Path outputPath = pathResolver.getRelativePath(rule.getSourcePathToOutput());,if (pathResolver != null ) Path outputPath = pathResolver.getRelativePath(rule.getSourcePathToOutput());
AbstractConsoleEventBusListener.java,EventKey eventKey = started.getEventKey();,if (started != null ) EventKey eventKey = started.getEventKey();
AbstractConsoleEventBusListener.java,EventKey eventKey = finished.getEventKey();,if (finished != null ) EventKey eventKey = finished.getEventKey();
AbstractConsoleEventBusListener.java,EventKey eventKey = started.getEventKey();,if (started != null ) EventKey eventKey = started.getEventKey();
AbstractConsoleEventBusListener.java,EventKey eventKey = finished.getEventKey();,if (finished != null ) EventKey eventKey = finished.getEventKey();
AbstractNodeBuilder.java,this.arg = description.createUnpopulatedConstructorArg();,if (description != null ) this.arg = description.createUnpopulatedConstructorArg();
TargetNodeFactory.java,T arg = description.createUnpopulatedConstructorArg();,if (description != null ) T arg = description.createUnpopulatedConstructorArg();
ProjectGeneratorTestUtils.java,T arg = description.createUnpopulatedConstructorArg();,if (description != null ) T arg = description.createUnpopulatedConstructorArg();
AppleBinaryDescription.java,CxxBinaryDescription.Arg delegateArg = delegate.createUnpopulatedConstructorArg();,if (delegate != null ) CxxBinaryDescription.Arg delegateArg = delegate.createUnpopulatedConstructorArg();
AppleBinaryDescription.java,CxxBinaryDescription.Arg delegateArg = delegate.createUnpopulatedConstructorArg();,if (delegate != null ) CxxBinaryDescription.Arg delegateArg = delegate.createUnpopulatedConstructorArg();
AppleLibraryDescription.java,CxxLibraryDescription.Arg delegateArg = delegate.createUnpopulatedConstructorArg();,if (delegate != null ) CxxLibraryDescription.Arg delegateArg = delegate.createUnpopulatedConstructorArg();
AppleLibraryDescription.java,CxxLibraryDescription.Arg delegateArg = delegate.createUnpopulatedConstructorArg();,if (delegate != null ) CxxLibraryDescription.Arg delegateArg = delegate.createUnpopulatedConstructorArg();
AndroidManifestTest.java,AndroidManifestDescription.Arg arg = description.createUnpopulatedConstructorArg();,if (description != null ) AndroidManifestDescription.Arg arg = description.createUnpopulatedConstructorArg();
ApkGenruleTest.java,ApkGenruleDescription.Arg arg = description.createUnpopulatedConstructorArg();,if (description != null ) ApkGenruleDescription.Arg arg = description.createUnpopulatedConstructorArg();
AppleBundleDescriptionTest.java,AppleBundleDescription.Arg constructorArg = desc.createUnpopulatedConstructorArg();,if (desc != null ) AppleBundleDescription.Arg constructorArg = desc.createUnpopulatedConstructorArg();
AppleBundleDescriptionTest.java,AppleBundleDescription.Arg constructorArg = desc.createUnpopulatedConstructorArg();,if (desc != null ) AppleBundleDescription.Arg constructorArg = desc.createUnpopulatedConstructorArg();
ApplePackageDescriptionTest.java,ApplePackageDescription.Arg arg = description.createUnpopulatedConstructorArg();,if (description != null ) ApplePackageDescription.Arg arg = description.createUnpopulatedConstructorArg();
ApplePackageDescriptionTest.java,ApplePackageDescription.Arg arg = description.createUnpopulatedConstructorArg();,if (description != null ) ApplePackageDescription.Arg arg = description.createUnpopulatedConstructorArg();
OwnersReportTest.java,FakeRuleDescription.FakeArg arg = description.createUnpopulatedConstructorArg();,if (description != null ) FakeRuleDescription.FakeArg arg = description.createUnpopulatedConstructorArg();
RemoteFileDescriptionTest.java,RemoteFileDescription.Arg arg = description.createUnpopulatedConstructorArg();,if (description != null ) RemoteFileDescription.Arg arg = description.createUnpopulatedConstructorArg();
RemoteFileDescriptionTest.java,RemoteFileDescription.Arg arg = description.createUnpopulatedConstructorArg();,if (description != null ) RemoteFileDescription.Arg arg = description.createUnpopulatedConstructorArg();
CxxPythonExtensionDescriptionTest.java,CxxPythonExtensionDescription.Arg constructorArg = desc.createUnpopulatedConstructorArg();,if (desc != null ) CxxPythonExtensionDescription.Arg constructorArg = desc.createUnpopulatedConstructorArg();
TargetNodeTest.java,Arg constructorArg = description.createUnpopulatedConstructorArg();,if (description != null ) Arg constructorArg = description.createUnpopulatedConstructorArg();
TargetNodeVisibilityTest.java,FakeRuleDescription.FakeArg arg = description.createUnpopulatedConstructorArg();,if (description != null ) FakeRuleDescription.FakeArg arg = description.createUnpopulatedConstructorArg();
GenruleDescriptionTest.java,GenruleDescription.Arg constructorArg = genruleDescription.createUnpopulatedConstructorArg();,if (genruleDescription != null ) GenruleDescription.Arg constructorArg = genruleDescription.createUnpopulatedConstructorArg();
JavaBinaryModuleRule.java,Set<String> intellijLibraries = projectConfig.getIntellijSdkTargets();,if (projectConfig != null ) Set<String> intellijLibraries = projectConfig.getIntellijSdkTargets();
JavaBinaryModuleRule.java,Set<String> intellijLibraries = projectConfig.getIntellijSdkTargets();,if (projectConfig != null ) Set<String> intellijLibraries = projectConfig.getIntellijSdkTargets();
ProjectView.java,List<String> candidates = mapping.getValue();,if (mapping != null ) List<String> candidates = mapping.getValue();
CachingBuildEngine.java,MetadataStorage old = MetadataStorage.valueOf(metadataType.get());,if (MetadataStorage != null ) MetadataStorage old = MetadataStorage.valueOf(metadataType.get());
ProjectView.java,String aTarget = buildTarget.toString();,if (buildTarget != null ) String aTarget = buildTarget.toString();
ProjectView.java,"reference = reference.subList(index, reference.size());","if (reference != null ) reference = reference.subList(index, reference.size());"
ProjectView.java,"other = other.subList(index, other.size());","if (other != null ) other = other.subList(index, other.size());"
ProjectView.java,Path linkPath = link.toPath();,if (link != null ) Path linkPath = link.toPath();
AndroidLibraryDescription.java,BuildTarget libraryTarget = HasJavaAbi.getLibraryTarget(params.getBuildTarget());,if (HasJavaAbi != null ) BuildTarget libraryTarget = HasJavaAbi.getLibraryTarget(params.getBuildTarget());
RobolectricTestDescription.java,BuildTarget testTarget = HasJavaAbi.getLibraryTarget(params.getBuildTarget());,if (HasJavaAbi != null ) BuildTarget testTarget = HasJavaAbi.getLibraryTarget(params.getBuildTarget());
TargetNodeTranslator.java,modified = modified || mVal.isPresent();,if (mVal != null ) modified = modified || mVal.isPresent();
NeededCoverageSpecTest.java,TargetNodeTranslator translator = new FixedTargetNodeTranslator(ImmutableMap.of());,if (FixedTargetNodeTranslator(ImmutableMap != null ) TargetNodeTranslator translator = new FixedTargetNodeTranslator(ImmutableMap.of());
PatternMatchedCollectionTest.java,TargetNodeTranslator translator = new FixedTargetNodeTranslator(ImmutableMap.of());,if (FixedTargetNodeTranslator(ImmutableMap != null ) TargetNodeTranslator translator = new FixedTargetNodeTranslator(ImmutableMap.of());
SourceListTest.java,TargetNodeTranslator translator = new FixedTargetNodeTranslator(ImmutableMap.of());,if (FixedTargetNodeTranslator(ImmutableMap != null ) TargetNodeTranslator translator = new FixedTargetNodeTranslator(ImmutableMap.of());
SourceListTest.java,TargetNodeTranslator translator = new FixedTargetNodeTranslator(ImmutableMap.of());,if (FixedTargetNodeTranslator(ImmutableMap != null ) TargetNodeTranslator translator = new FixedTargetNodeTranslator(ImmutableMap.of());
QueryTargetTranslatorTest.java,FixedTargetNodeTranslator translator = new FixedTargetNodeTranslator(ImmutableMap.of());,if (FixedTargetNodeTranslator(ImmutableMap != null ) FixedTargetNodeTranslator translator = new FixedTargetNodeTranslator(ImmutableMap.of());
HgCmdLineInterfaceIntegrationTest.java,String currentRevisionId = repoThreeCmdLine.currentRevisionId();,if (repoThreeCmdLine != null ) String currentRevisionId = repoThreeCmdLine.currentRevisionId();
JsBundleDescription.java,additionalTargets = targetNode.getDeclaredDeps().stream();,if (targetNode != null ) additionalTargets = targetNode.getDeclaredDeps().stream();
JsBundleDescription.java,additionalTargets = Stream.empty();,if (Stream != null ) additionalTargets = Stream.empty();
StubJarTest.java,ClassNode originalNode = original.getClassNode();,if (original != null ) ClassNode originalNode = original.getClassNode();
StubJarTest.java,ClassNode stubbedNode = stubbed.getClassNode();,if (stubbed != null ) ClassNode stubbedNode = stubbed.getClassNode();
StubJarTest.java,File outputDir = temp.newFolder();,if (temp != null ) File outputDir = temp.newFolder();
StubJarTest.java,diagnostics = compiler.getDiagnosticMessages();,if (compiler != null ) diagnostics = compiler.getDiagnosticMessages();
AbstractDiffAbisStep.java,File classAbiJarFile = getClassAbiPath().toFile();,if (getClassAbiPath() != null ) File classAbiJarFile = getClassAbiPath().toFile();
AbstractDiffAbisStep.java,File sourceAbiJarFile = getSourceAbiPath().toFile();,if (getSourceAbiPath() != null ) File sourceAbiJarFile = getSourceAbiPath().toFile();
AbstractDiffAbisStep.java,String fileName = entry.getName();,if (entry != null ) String fileName = entry.getName();
AbstractDiffAbisStep.java,textifiedClass = bos.toByteArray();,if (bos != null ) textifiedClass = bos.toByteArray();
AbstractProjectPredicates.java,projectArg = (ProjectConfigDescription.Arg) targetNode.getConstructorArg();,if (targetNode != null ) projectArg = (ProjectConfigDescription.Arg) targetNode.getConstructorArg();
AbstractProjectPredicates.java,projectTarget = projectArg.srcTarget.get();,if (projectArg != null ) projectTarget = projectArg.srcTarget.get();
AbstractProjectPredicates.java,projectTarget = projectArg.testTarget.get();,if (projectArg != null ) projectTarget = projectArg.testTarget.get();
ProjectCommandIntellijTest.java,dummyRootBinNode = new JavaBinaryRuleBuilder(dummyRootBinTarget).build();,if (JavaBinaryRuleBuilder(dummyRootBinTarget) != null ) dummyRootBinNode = new JavaBinaryRuleBuilder(dummyRootBinTarget).build();
ProjectCommandIntellijTest.java,barLibNode = JavaLibraryBuilder.createBuilder(barLibTarget).build();,if (JavaLibraryBuilder != null ) barLibNode = JavaLibraryBuilder.createBuilder(barLibTarget).build();
ProjectCommandIntellijTest.java,bazTestNode = JavaTestBuilder.createBuilder(bazTestTarget).build();,if (JavaTestBuilder != null ) bazTestNode = JavaTestBuilder.createBuilder(bazTestTarget).build();
ProjectCommandIntellijTest.java,fooBinTestNode = JavaTestBuilder.createBuilder(fooBinTestTarget).build();,if (JavaTestBuilder != null ) fooBinTestNode = JavaTestBuilder.createBuilder(fooBinTestTarget).build();
ProjectCommandTests.java,explicitTests = ImmutableSet.of();,if (ImmutableSet != null ) explicitTests = ImmutableSet.of();
VersionControlStatsGenerator.java,this.currentRevisionId = pregeneratedVersionControlStats.get().getCurrentRevisionId();,if (pregeneratedVersionControlStats != null ) this.currentRevisionId = pregeneratedVersionControlStats.get().getCurrentRevisionId();
VersionControlStatsGenerator.java,this.baseBookmarks = pregeneratedVersionControlStats.get().getBaseBookmarks();,if (pregeneratedVersionControlStats != null ) this.baseBookmarks = pregeneratedVersionControlStats.get().getBaseBookmarks();
VersionControlStatsGenerator.java,this.baseRevisionId = pregeneratedVersionControlStats.get().getBranchedFromMasterRevisionId();,if (pregeneratedVersionControlStats != null ) this.baseRevisionId = pregeneratedVersionControlStats.get().getBranchedFromMasterRevisionId();
VersionControlStatsGenerator.java,this.baseRevisionTimestamp = pregeneratedVersionControlStats.get().getBranchedFromMasterTS();,if (pregeneratedVersionControlStats != null ) this.baseRevisionTimestamp = pregeneratedVersionControlStats.get().getBranchedFromMasterTS();
VersionControlStatsGenerator.java,currentRevisionId = versionControlCmdLineInterface.currentRevisionId();,if (versionControlCmdLineInterface != null ) currentRevisionId = versionControlCmdLineInterface.currentRevisionId();
VersionControlStatsGenerator.java,baseRevisionId = baseRevisionInfo.getFirst();,if (baseRevisionInfo != null ) baseRevisionId = baseRevisionInfo.getFirst();
VersionControlStatsGenerator.java,baseRevisionTimestamp = baseRevisionInfo.getSecond();,if (baseRevisionInfo != null ) baseRevisionTimestamp = baseRevisionInfo.getSecond();
EventSerializationTest.java,"ParseEvent.Finished event = ParseEvent.finished(started, Optional.empty());","if (Optional != null ) ParseEvent.Finished event = ParseEvent.finished(started, Optional.empty());"
Daemon.java,FileHashCacheEvent.InvalidationStarted started = FileHashCacheEvent.invalidationStarted();,if (FileHashCacheEvent != null ) FileHashCacheEvent.InvalidationStarted started = FileHashCacheEvent.invalidationStarted();
DefaultFileHashCache.java,Path memberPath = archiveMemberPath.getMemberPath();,if (archiveMemberPath != null ) Path memberPath = archiveMemberPath.getMemberPath();
DefaultFileHashCache.java,Path memberPath = archiveMemberPath.getMemberPath();,if (archiveMemberPath != null ) Path memberPath = archiveMemberPath.getMemberPath();
FakeAppleRuleDescriptions.java,ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();,if (FakeProjectFilesystem != null ) ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();
OwnersReportTest.java,private ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();,if (FakeProjectFilesystem != null ) private ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();
CellPathResolverViewTest.java,private ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();,if (FakeProjectFilesystem != null ) private ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();
CopyStepTest.java,private ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();,if (FakeProjectFilesystem != null ) private ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();
ProjectWorkspace.java,ProjectFilesystemAndConfig filesystemAndConfig = projectFilesystemAndConfig.get();,if (projectFilesystemAndConfig != null ) ProjectFilesystemAndConfig filesystemAndConfig = projectFilesystemAndConfig.get();
AbstractReport.java,VersionControlStats versionControlStats = versionControlStatsOptional.get();,if (versionControlStatsOptional != null ) VersionControlStats versionControlStats = versionControlStatsOptional.get();
VersionControlStatsGenerator.java,VersionControlStats.Builder versionControlStatsBuilder = VersionControlStats.builder();,if (VersionControlStats != null ) VersionControlStats.Builder versionControlStatsBuilder = VersionControlStats.builder();
DefaultJavaLibraryBuilder.java,BuildTarget abiTarget = params.getBuildTarget();,if (params != null ) BuildTarget abiTarget = params.getBuildTarget();
TestCompiler.java,boolean result = getJavacTask().call();,if (getJavacTask() != null ) boolean result = getJavacTask().call();
ZipFileJarEntryContainer.java,File jarFile = jarFilePath.toFile();,if (jarFilePath != null ) File jarFile = jarFilePath.toFile();
JarBuilder.java,CustomZipEntry entry = new CustomZipEntry(entries.nextElement());,if (CustomZipEntry(entries != null ) CustomZipEntry entry = new CustomZipEntry(entries.nextElement());
JarBuilder.java,Optional<Path> filePath = entry.getSecond();,if (entry != null ) Optional<Path> filePath = entry.getSecond();
JarBuilder.java,ZipEntry entry = entries.nextElement();,if (entries != null ) ZipEntry entry = entries.nextElement();
JarBuilder.java,String entryName = entry.getName();,if (entry != null ) String entryName = entry.getName();
JarBuilder.java,String entryName = entry.getName();,if (entry != null ) String entryName = entry.getName();
JarBuilder.java,Path path = filesystem.getPathForRelativePath(manifestFile.get());,if (filesystem != null ) Path path = filesystem.getPathForRelativePath(manifestFile.get());
ProjectBuildFileParser.java,buckPyProcessJsonParser = ObjectMappers.createParser(buckPyProcess.getInputStream());,if (ObjectMappers != null ) buckPyProcessJsonParser = ObjectMappers.createParser(buckPyProcess.getInputStream());
VersionBuckConfigTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
ClassLoaderCacheTest.java,ClassLoader dummyParent = ClassLoader.getSystemClassLoader();,if (ClassLoader != null ) ClassLoader dummyParent = ClassLoader.getSystemClassLoader();
ListeningProcessExecutorTest.java,public ExpectedException exception = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException exception = ExpectedException.none();
MoreThrowablesTest.java,public ExpectedException expected = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expected = ExpectedException.none();
DefaultFileHashCacheTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
StackedFileHashCacheTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
WatchedFileHashCacheTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
AssertScopeExclusiveAccessTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
LinkedBlockingStackTest.java,public ExpectedException exception = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException exception = ExpectedException.none();
ResourcePoolTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
ResourcePoolTest.java,int id = createdResources.getAndIncrement();,if (createdResources != null ) int id = createdResources.getAndIncrement();
ThriftScribeLoggerTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
HgCmdLineInterfaceIntegrationTest.java,public ExpectedException exception = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException exception = ExpectedException.none();
ProjectWorkspace.java,String fileName = path.getFileName().toString();,if (path != null ) String fileName = path.getFileName().toString();
ProjectWorkspace.java,String fileName = file.getFileName().toString();,if (file != null ) String fileName = file.getFileName().toString();
ProjectWorkspace.java,Path directory = generatedFileWithSuffix.getParent();,if (generatedFileWithSuffix != null ) Path directory = generatedFileWithSuffix.getParent();
ExportFileTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
GenruleIntegrationTest.java,public ExpectedException exception = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException exception = ExpectedException.none();
GenruleIntegrationTest.java,ZipFile zipOne = new ZipFile(zipPathOne.toFile());,if (ZipFile(zipPathOne != null ) ZipFile zipOne = new ZipFile(zipPathOne.toFile());
GenruleIntegrationTest.java,entriesTwo = zipTwo.entries();,if (zipTwo != null ) entriesTwo = zipTwo.entries();
GenruleIntegrationTest.java,entryTwo = entriesTwo.nextElement();,if (entriesTwo != null ) entryTwo = entriesTwo.nextElement();
MetadataIntegrationTest.java,public ExpectedException exception = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException exception = ExpectedException.none();
RocksDBIntegrationTest.java,public ExpectedException exception = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException exception = ExpectedException.none();
RustBinaryIntegrationTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
RustLibraryIntegrationTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
RustLinkerIntegrationTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
RustTestIntegrationTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
ActionGraphCacheIntegrationTest.java,JsonObject args = argsEl.getAsJsonObject();,if (argsEl != null ) JsonObject args = argsEl.getAsJsonObject();
ActionGraphCacheTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
BuildInfoRecorderTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
BuildRuleResolverTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
CellTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
TargetGraphTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
ConstructorArgMarshallerTest.java,public ExpectedException mExpected = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException mExpected = ExpectedException.none();
OptionalTypeCoercerTest.java,public ExpectedException exception = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException exception = ExpectedException.none();
PathTypeCoercerTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
SourcePathTypeCoercerTest.java,public ExpectedException exception = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException exception = ExpectedException.none();
TypeCoercerTest.java,public ExpectedException exception = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException exception = ExpectedException.none();
InputBasedRuleKeyFactoryTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
RageCommandIntegrationTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
UserInputTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
LexerTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
QueryParserTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
BuildFileSpecTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
BuildTargetParserTest.java,public ExpectedException exception = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException exception = ExpectedException.none();
BuildTargetPatternParserTest.java,public ExpectedException exception = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException exception = ExpectedException.none();
ParsePipelineTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
ParserConfigTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
ParserIntegrationTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
ParserTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
ProjectBuildFileParserPoolTest.java,int numCalls = sleepCallCount.incrementAndGet();,if (sleepCallCount != null ) int numCalls = sleepCallCount.incrementAndGet();
ProjectBuildFileParserTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
PublisherTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
LuaBinaryDescriptionTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
ReferenceCountedWriterTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
GroovyBuckConfigTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
JavaFileParserTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
JavadocTest.java,Set<String> allFileNames = zip.getFileNames();,if (zip != null ) Set<String> allFileNames = zip.getFileNames();
JavadocTest.java,Set<String> allFileNames = zip.getFileNames();,if (zip != null ) Set<String> allFileNames = zip.getFileNames();
FrontendOnlyJavacTaskTest.java,elementsFromEnvironment = processingEnv.getElementUtils();,if (processingEnv != null ) elementsFromEnvironment = processingEnv.getElementUtils();
TreeBackedAnnotationValueTest.java,AnnotationMirror annotationMirrorValue = (AnnotationMirror) defaultValue.getValue();,if (defaultValue != null ) AnnotationMirror annotationMirrorValue = (AnnotationMirror) defaultValue.getValue();
TreeBackedAnnotationValueTest.java,AnnotationMirror annotationMirrorValue = (AnnotationMirror) defaultValue.getValue();,if (defaultValue != null ) AnnotationMirror annotationMirrorValue = (AnnotationMirror) defaultValue.getValue();
TreeBackedProcessorWrapperTest.java,elements = processingEnv.getElementUtils();,if (processingEnv != null ) elements = processingEnv.getElementUtils();
TreeBackedProcessorWrapperTest.java,messager = processingEnv.getMessager();,if (processingEnv != null ) messager = processingEnv.getMessager();
PostEnterTaskListenerTest.java,Filer filer = processingEnv.getFiler();,if (processingEnv != null ) Filer filer = processingEnv.getFiler();
JsRulesIntegrationTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
GoBinaryIntegrationTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
OnDiskMavenDownloaderTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
RemoteFileDescriptionTest.java,public ExpectedException exception = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException exception = ExpectedException.none();
StackedDownloaderTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
BroadcastEventListenerTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
DistBuildStateTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
MaterializerProjectFileHashCacheTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
CxxPreprocessablesTest.java,public ExpectedException exception = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException exception = ExpectedException.none();
CxxTestStepTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
DepfilesBadParseTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
InferLogLineTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
AuditInputCommandTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
CommandThreadManagerTest.java,public ExpectedException exception = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException exception = ExpectedException.none();
DaemonIntegrationTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
RunCommandOptionsTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
TargetsCommandIntegrationTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
CellConfigTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
ConfigTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
NulTerminatedCharsetDecoderTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
BserDeserializerTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
BserSerializerTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
ArtifactCacheBuckConfigTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
HttpArtifactCacheBinaryProtocolTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
HttpArtifactCacheTest.java,Request request = requestBuilder.url(SERVER).build();,if (requestBuilder != null ) Request request = requestBuilder.url(SERVER).build();
HttpArtifactCacheTest.java,byte[] actualData = buf.readByteArray();,if (buf != null ) byte[] actualData = buf.readByteArray();
HttpArtifactCacheTest.java,expectedData = out.toByteArray();,if (out != null ) expectedData = out.toByteArray();
HttpArtifactCacheTest.java,Request request = requestBuilder.url(SERVER).build();,if (requestBuilder != null ) Request request = requestBuilder.url(SERVER).build();
HttpArtifactCacheTest.java,int keys = in.readInt();,if (in != null ) int keys = in.readInt();
AppleBundleIntegrationTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
AppleConfigTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
AppleCxxPlatformsTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
AppleSdkDiscoveryTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
AppleTestIntegrationTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
FakeAppleRuleDescriptions.java,ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();,if (FakeProjectFilesystem != null ) ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();
InfoPlistSubstitutionTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
ProvisioningProfileCopyStepTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
ProvisioningProfileMetadataTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
ProjectGeneratorTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
WorkspaceAndProjectGeneratorTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
ProjectIntegrationTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
BadAndroidConfigIntegrationTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
DefaultAndroidDirectoryResolverTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
ExopackageInstallerTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
GenAidlIntegrationTest.java,ZipFile zipOne = new ZipFile(outputOne.toFile());,if (ZipFile(outputOne != null ) ZipFile zipOne = new ZipFile(outputOne.toFile());
GenAidlIntegrationTest.java,entriesTwo = zipTwo.entries();,if (zipTwo != null ) entriesTwo = zipTwo.entries();
GenAidlIntegrationTest.java,entryTwo = entriesTwo.nextElement();,if (entriesTwo != null ) entryTwo = entriesTwo.nextElement();
MergeAndroidResourcesStepTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
MiniAaptTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
CentralDirectory.java,"size += ByteIo.writeShort(out, entry.getRequiredExtractVersion());  // version made by.","if (by != null ) size += ByteIo.writeShort(out, entry.getRequiredExtractVersion());  // version made by."
CentralDirectory.java,"size += ByteIo.writeShort(out, entry.getRequiredExtractVersion());  // version to extract with.","if (with != null ) size += ByteIo.writeShort(out, entry.getRequiredExtractVersion());  // version to extract with."
CentralDirectory.java,"size += ByteIo.writeShort(out, entry.getCompressionMethod());  // Compression.","if (Compression != null ) size += ByteIo.writeShort(out, entry.getCompressionMethod());  // Compression."
CentralDirectory.java,"size += ByteIo.writeInt(out, entry.getTime());      // Modification time.","if (time != null ) size += ByteIo.writeInt(out, entry.getTime());      // Modification time."
CentralDirectory.java,"size += ByteIo.writeInt(out, entry.getOffset());   // Offset of local file header.","if (header != null ) size += ByteIo.writeInt(out, entry.getOffset());   // Offset of local file header."
LineIterating.java,CharBuffer subBuffer = buffer.duplicate();,if (buffer != null ) CharBuffer subBuffer = buffer.duplicate();
LineIterating.java,ByteBuffer subBuffer = buffer.duplicate();,if (buffer != null ) ByteBuffer subBuffer = buffer.duplicate();
ProcessHelper.java,OperatingSystem os = OSHI.getOperatingSystem();,if (OSHI != null ) OperatingSystem os = OSHI.getOperatingSystem();
Types.java,boolean isOptional = Optional.class.isAssignableFrom(field.getType());,if (Optional != null ) boolean isOptional = Optional.class.isAssignableFrom(field.getType());
Types.java,Type type = field.getGenericType();,if (field != null ) Type type = field.getGenericType();
HgAutoSparseState.java,InputStream is = new FileInputStream(hgCmdLine.extractRawManifest());,if (FileInputStream(hgCmdLine != null ) InputStream is = new FileInputStream(hgCmdLine.extractRawManifest());
ResourcePool.java,R resource = resourceRequest.getLeft();,if (resourceRequest != null ) R resource = resourceRequest.getLeft();
ServerHealthState.java,ListIterator<RequestSample> iterator =  requests.listIterator(requests.size());,if (requests != null ) ListIterator<RequestSample> iterator =  requests.listIterator(requests.size());
BuildRuleResolver.java,T arg = node.getConstructorArg();,if (node != null ) T arg = node.getConstructorArg();
CellProvider.java,Path normalizedCellPath = cellPath.toRealPath().normalize();,if (cellPath != null ) Path normalizedCellPath = cellPath.toRealPath().normalize();
DefaultDefectReporter.java,Optional<SlbBuckConfig>  frontendConfig = rageConfig.getFrontendConfig();,if (rageConfig != null ) Optional<SlbBuckConfig>  frontendConfig = rageConfig.getFrontendConfig();
PythonTestDescription.java,BuildRule buildRule = resolver.getRule(coverageSpec.getBuildTarget());,if (resolver != null ) BuildRule buildRule = resolver.getRule(coverageSpec.getBuildTarget());
TargetNodeParsePipeline.java,Cell depCell = cell.getCellIgnoringVisibilityCheck(depTarget.getCellPath());,if (cell != null ) Cell depCell = cell.getCellIgnoringVisibilityCheck(depTarget.getCellPath());
OcamlUtil.java,String strInput = input.toString();,if (input != null ) String strInput = input.toString();
OcamlUtil.java,String strInput = resolver.getRelativePath(input).toString();,if (resolver != null ) String strInput = resolver.getRelativePath(input).toString();
FilesystemBackedBuildFileTree.java,Path parent = filePath.getParent();,if (filePath != null ) Path parent = filePath.getParent();
Resolver.java,stereotype = new DefaultArtifactType(dep.getType());,if (DefaultArtifactType(dep != null ) stereotype = new DefaultArtifactType(dep.getType());
Resolver.java,String group = input.getGroupId();,if (input != null ) String group = input.getGroupId();
ExternalJavac.java,Optional<String> stderr = result.getStderr();,if (result != null ) Optional<String> stderr = result.getStderr();
ExternalJavac.java,"String output = stderr.orElse("""").trim();","if (stderr != null ) String output = stderr.orElse("""").trim();"
JavaFileParser.java,packageName = node.getName().getFullyQualifiedName();,if (node != null ) packageName = node.getName().getFullyQualifiedName();
JavaFileParser.java,List<Type> interfaceTypes = node.superInterfaceTypes();,if (node != null ) List<Type> interfaceTypes = node.superInterfaceTypes();
JavaFileParser.java,Type superclassType = node.getSuperclassType();,if (node != null ) Type superclassType = node.getSuperclassType();
JavaFileParser.java,ASTNode parent = ancestor.getParent();,if (ancestor != null ) ASTNode parent = ancestor.getParent();
JavaFileParser.java,String symbol = ancestor.getFullyQualifiedName();,if (ancestor != null ) String symbol = ancestor.getFullyQualifiedName();
JavaFileParser.java,String fullyQualifiedName = node.getName().getFullyQualifiedName();,if (node != null ) String fullyQualifiedName = node.getName().getFullyQualifiedName();
JavaFileParser.java,String name = simpleName.get();,if (simpleName != null ) String name = simpleName.get();
JavaFileParser.java,String receiver = node.getExpression().toString();,if (node != null ) String receiver = node.getExpression().toString();
JavaFileParser.java,ASTNode parentNode = annotation.getParent();,if (annotation != null ) ASTNode parentNode = annotation.getParent();
JavaFileParser.java,int modifiers = declaration.getModifiers();,if (declaration != null ) int modifiers = declaration.getModifiers();
JavaFileParser.java,List<SingleVariableDeclaration> params = node.parameters();,if (node != null ) List<SingleVariableDeclaration> params = node.parameters();
JavaFileParser.java,List<Type> exceptions = node.thrownExceptionTypes();,if (node != null ) List<Type> exceptions = node.thrownExceptionTypes();
JavaFileParser.java,Name simpleTypeName = simpleType.getName();,if (simpleType != null ) Name simpleTypeName = simpleType.getName();
JavaFileParser.java,String simpleName = simpleTypeName.toString();,if (simpleTypeName != null ) String simpleName = simpleTypeName.toString();
JavaFileParser.java,List<Type> argTypes = parameterizedType.typeArguments();,if (parameterizedType != null ) List<Type> argTypes = parameterizedType.typeArguments();
JavaFileParser.java,String simpleName = simpleTypeName.toString();,if (simpleTypeName != null ) String simpleName = simpleTypeName.toString();
JavaFileParser.java,Set<String> types =  entry.getValue();,if (entry != null ) Set<String> types =  entry.getValue();
JavaFileParser.java,String packageName = entry.getKey();,if (entry != null ) String packageName = entry.getKey();
JavaFileParser.java,String symbol = simpleTypeName.getFullyQualifiedName();,if (simpleTypeName != null ) String symbol = simpleTypeName.getFullyQualifiedName();
JavaFileManagerStubJarWriter.java,InputStream inputStream = new ByteArrayInputStream(writer.toByteArray());,if (ByteArrayInputStream(writer != null ) InputStream inputStream = new ByteArrayInputStream(writer.toByteArray());
InterfaceValidator.java,TypeElement constantEnclosingType = (TypeElement) constant.getEnclosingElement();,if (constant != null ) TypeElement constantEnclosingType = (TypeElement) constant.getEnclosingElement();
InterfaceValidator.java,return enclosingPackage == referencedTypeElement.getEnclosingElement();,if (referencedTypeElement != null ) return enclosingPackage == referencedTypeElement.getEnclosingElement();
InterfaceValidator.java,walker = (QualifiedNameable) walker.getEnclosingElement();,if (walker != null ) walker = (QualifiedNameable) walker.getEnclosingElement();
TreeBackedElementResolver.java,Tree valueTree = path.getLeaf();,if (path != null ) Tree valueTree = path.getLeaf();
TreeBackedElementResolver.java,NewArrayTree tree = (NewArrayTree) path.getLeaf();,if (path != null ) NewArrayTree tree = (NewArrayTree) path.getLeaf();
TreeBackedTypes.java,TypeElement typeElement = (TypeElement) declaredType.asElement();,if (declaredType != null ) TypeElement typeElement = (TypeElement) declaredType.asElement();
TreeBackedTypes.java,DeclaredType enclosingType = (DeclaredType) declaredType.getEnclosingType();,if (declaredType != null ) DeclaredType enclosingType = (DeclaredType) declaredType.getEnclosingType();
TreeBackedTypes.java,TypeMirror enclosingType = declaredType.getEnclosingType();,if (declaredType != null ) TypeMirror enclosingType = declaredType.getEnclosingType();
JavaLibrarySymbolsFinder.java,ProjectFilesystem filesystem = sourcePath.getFilesystem();,if (sourcePath != null ) ProjectFilesystem filesystem = sourcePath.getFilesystem();
JavaLibrarySymbolsFinder.java,Path absolutePath = filesystem.resolve(sourcePath.getRelativePath());,if (filesystem != null ) Path absolutePath = filesystem.resolve(sourcePath.getRelativePath());
ProjectFilesystem.java,Path path = matcher.getPath();,if (matcher != null ) Path path = matcher.getPath();
ProjectFilesystem.java,Path relativeTmpDir = ProjectFilesystem.this.buckPaths.getTmpDir();,if (ProjectFilesystem != null ) Path relativeTmpDir = ProjectFilesystem.this.buckPaths.getTmpDir();
ChooseTargetAction.java,BuckSettingsProvider buckSettingsProvider = BuckSettingsProvider.getInstance();,if (BuckSettingsProvider != null ) BuckSettingsProvider buckSettingsProvider = BuckSettingsProvider.getInstance();
ChooseTargetAction.java,ChooseTargetItem obj = (ChooseTargetItem) chooseByNamePopup.getChosenElement();,if (chooseByNamePopup != null ) ChooseTargetItem obj = (ChooseTargetItem) chooseByNamePopup.getChosenElement();
ChooseTargetAction.java,String adText = chooseByNamePopup.getAdText();,if (chooseByNamePopup != null ) String adText = chooseByNamePopup.getAdText();
BuckFileUtil.java,FileTypeManager fileTypeManager = FileTypeManagerImpl.getInstance();,if (FileTypeManagerImpl != null ) FileTypeManager fileTypeManager = FileTypeManagerImpl.getInstance();
BuckToolWindowFactory.java,UISettings uiSettings = UISettings.getInstance();,if (UISettings != null ) UISettings uiSettings = UISettings.getInstance();
BuckToolWindowFactory.java,Tree tree = (Tree) e.getComponent();,if (e != null ) Tree tree = (Tree) e.getComponent();
BuckToolWindowFactory.java,TreeNode node = (TreeNode) selPath.getLastPathComponent();,if (selPath != null ) TreeNode node = (TreeNode) selPath.getLastPathComponent();
BuckClient.java,int port = BuckWSServerPortUtils.getPort(mProject.getBasePath());,if (BuckWSServerPortUtils != null ) int port = BuckWSServerPortUtils.getPort(mProject.getBasePath());
BuckEventsQueue.java,String eventName = event.getEventName();,if (event != null ) String eventName = event.getEventName();
ErrorExtractorTest.java,ImmutableList<CompilerErrorItem> errors = errorExtractor.getErrors();,if (errorExtractor != null ) ImmutableList<CompilerErrorItem> errors = errorExtractor.getErrors();
ErrorExtractorTest.java,ImmutableList<CompilerErrorItem> errors = errorExtractor.getErrors();,if (errorExtractor != null ) ImmutableList<CompilerErrorItem> errors = errorExtractor.getErrors();
ErrorExtractorTest.java,ImmutableList<CompilerErrorItem> errors = errorExtractor.getErrors();,if (errorExtractor != null ) ImmutableList<CompilerErrorItem> errors = errorExtractor.getErrors();
DefaultIjLibraryFactory.java,String libraryName = Util.intelliJLibraryName(targetNode.getBuildTarget());,if (Util != null ) String libraryName = Util.intelliJLibraryName(targetNode.getBuildTarget());
DefaultIjLibraryFactory.java,IjLibrary.Builder libraryBuilder = IjLibrary.builder();,if (IjLibrary != null ) IjLibrary.Builder libraryBuilder = IjLibrary.builder();
AggregationTree.java,String aggregationTag = module.getAggregationTag();,if (module != null ) String aggregationTag = module.getAggregationTag();
TraceDataHandler.java,InputStream input = traceStreams.next();,if (traceStreams != null ) InputStream input = traceStreams.next();
HaskellCompileRule.java,SourcePathResolver resolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver resolver = buildContext.getSourcePathResolver();
HalideLibraryDescription.java,platformPreprocessorFlags = PatternMatchedCollection.of();,if (PatternMatchedCollection != null ) platformPreprocessorFlags = PatternMatchedCollection.of();
HalideLibraryDescription.java,langPreprocessorFlags = ImmutableMap.of();,if (ImmutableMap != null ) langPreprocessorFlags = ImmutableMap.of();
GoTestDescription.java,target = target.withFlavors();  // remove flavors.,if (flavors != null ) target = target.withFlavors();  // remove flavors.
DistBuildClientExecutor.java,BuildSlaveEvent slaveEvent = sequenceIdAndEvent.getSecond();,if (sequenceIdAndEvent != null ) BuildSlaveEvent slaveEvent = sequenceIdAndEvent.getSecond();
DistBuildFileHashes.java,Path fsRootPath = originalCache.getFilesystem().getRootPath();,if (originalCache != null ) Path fsRootPath = originalCache.getFilesystem().getRootPath();
DistBuildService.java,String fileName = path.getFileName().toString();,if (path != null ) String fileName = path.getFileName().toString();
DistBuildState.java,int cellIndex = input.getCellIndex();,if (input != null ) int cellIndex = input.getCellIndex();
RecordingProjectFileHashCache.java,pathEndIndex <= symlinkPath.getNameCount();,if (symlinkPath != null ) pathEndIndex <= symlinkPath.getNameCount();
DalvikAwareZipSplitter.java,String relativePath = entry.getRelativePath();,if (entry != null ) String relativePath = entry.getRelativePath();
AbstractCxxSourceRuleFactory.java,String name = entry.getKey();,if (entry != null ) String name = entry.getKey();
AbstractCxxSourceRuleFactory.java,CxxSource source = entry.getValue();,if (entry != null ) CxxSource source = entry.getValue();
CxxLibraryDescription.java,Optional<CxxHeaders> symlinkTree = Optional.empty();,if (Optional != null ) Optional<CxxHeaders> symlinkTree = Optional.empty();
CxxLibraryDescription.java,baseTarget = baseTarget.withoutFlavors(mode.getFlavor());,if (baseTarget != null ) baseTarget = baseTarget.withoutFlavors(mode.getFlavor());
CxxLibraryDescription.java,CxxPreprocessorInput.Builder cxxPreprocessorInputBuilder = CxxPreprocessorInput.builder();,if (CxxPreprocessorInput != null ) CxxPreprocessorInput.Builder cxxPreprocessorInputBuilder = CxxPreprocessorInput.builder();
CxxLibraryDescription.java,CxxPreprocessorInput cxxPreprocessorInput = cxxPreprocessorInputBuilder.build();,if (cxxPreprocessorInputBuilder != null ) CxxPreprocessorInput cxxPreprocessorInput = cxxPreprocessorInputBuilder.build();
CxxLibraryDescription.java,exportedPlatformPreprocessorFlags = PatternMatchedCollection.of();,if (PatternMatchedCollection != null ) exportedPlatformPreprocessorFlags = PatternMatchedCollection.of();
CxxLibraryDescription.java,exportedLangPreprocessorFlags = ImmutableMap.of();,if (ImmutableMap != null ) exportedLangPreprocessorFlags = ImmutableMap.of();
InferBuckConfig.java,Path topLevel = InferBuckConfig.this.getInferTopLevel();,if (InferBuckConfig != null ) Path topLevel = InferBuckConfig.this.getInferTopLevel();
InferBuckConfig.java,Optional<String> stderr = result.getStderr();,if (result != null ) Optional<String> stderr = result.getStderr();
InferBuckConfig.java,"String versionOutput = stderr.orElse("""").trim();","if (stderr != null ) String versionOutput = stderr.orElse("""").trim();"
Omnibus.java,Optional<String> rootSoname = rootTargetMode.getLibraryName();,if (rootTargetMode != null ) Optional<String> rootSoname = rootTargetMode.getLibraryName();
PrebuiltCxxLibraryDescription.java,exportedPlatformPreprocessorFlags = PatternMatchedCollection.of();,if (PatternMatchedCollection != null ) exportedPlatformPreprocessorFlags = PatternMatchedCollection.of();
PrebuiltCxxLibraryDescription.java,exportedLangPreprocessorFlags = ImmutableMap.of();,if (ImmutableMap != null ) exportedLangPreprocessorFlags = ImmutableMap.of();
AbstractProjectPredicates.java,projectArg = (ProjectConfigDescription.Arg) targetNode.getConstructorArg();,if (targetNode != null ) projectArg = (ProjectConfigDescription.Arg) targetNode.getConstructorArg();
AbstractProjectPredicates.java,projectTarget = projectArg.srcTarget.get();,if (projectArg != null ) projectTarget = projectArg.srcTarget.get();
AbstractProjectPredicates.java,projectTarget = projectArg.testTarget.get();,if (projectArg != null ) projectTarget = projectArg.testTarget.get();
AuditConfigCommand.java,DirtyPrintStreamDecorator stdErr = params.getConsole().getStdErr();,if (params != null ) DirtyPrintStreamDecorator stdErr = params.getConsole().getStdErr();
Daemon.java,WatchedFileHashCache watchedCache = new WatchedFileHashCache(subCell.getFilesystem());,if (WatchedFileHashCache(subCell != null ) WatchedFileHashCache watchedCache = new WatchedFileHashCache(subCell.getFilesystem());
InstallCommand.java,Optional<BuildTarget> deviceHelperTarget = appleConfig.getAppleDeviceHelperTarget();,if (appleConfig != null ) Optional<BuildTarget> deviceHelperTarget = appleConfig.getAppleDeviceHelperTarget();
TestRunning.java,String message = didBeginMessage.getMessage();,if (didBeginMessage != null ) String message = didBeginMessage.getMessage();
TestRunning.java,UUID testUUID = UUID.randomUUID();,if (UUID != null ) UUID testUUID = UUID.randomUUID();
ArtifactCaches.java,Response originalResponse = chain.proceed(chain.request());,if (chain != null ) Response originalResponse = chain.proceed(chain.request());
TwoLevelArtifactCacheDecorator.java,long fileSize = projectFilesystem.getFileSize(output.getPath());,if (projectFilesystem != null ) long fileSize = projectFilesystem.getFileSize(output.getPath());
TwoLevelArtifactCacheDecorator.java,long hashComputationStart = System.currentTimeMillis();,if (System != null ) long hashComputationStart = System.currentTimeMillis();
TwoLevelArtifactCacheDecorator.java,long hashComputationEnd = System.currentTimeMillis();,if (System != null ) long hashComputationEnd = System.currentTimeMillis();
AppleBuildRules.java,defaultDeps = defaultDepsBuilder.build();,if (defaultDepsBuilder != null ) defaultDeps = defaultDepsBuilder.build();
AppleBuildRules.java,exportedDeps = exportedDepsBuilder.build();,if (exportedDepsBuilder != null ) exportedDeps = exportedDepsBuilder.build();
CodeSignIdentityStore.java,ImmutableList<CodeSignIdentity> allValidIdentities = builder.build();,if (builder != null ) ImmutableList<CodeSignIdentity> allValidIdentities = builder.build();
ProjectGenerator.java,BuildTarget buildTarget = halideNode.getBuildTarget();,if (halideNode != null ) BuildTarget buildTarget = halideNode.getBuildTarget();
WorkspaceAndProjectGenerator.java,buildForTestNodesBuilder = ImmutableSetMultimap.builder();,if (ImmutableSetMultimap != null ) buildForTestNodesBuilder = ImmutableSetMultimap.builder();
WorkspaceAndProjectGenerator.java,testsBuilder = ImmutableSetMultimap.builder();,if (ImmutableSetMultimap != null ) testsBuilder = ImmutableSetMultimap.builder();
WorkspaceAndProjectGenerator.java,extraTestNodes = extraTestNodesBuilder.build();,if (extraTestNodesBuilder != null ) extraTestNodes = extraTestNodesBuilder.build();
PBXGroup.java,PBXFileReference ref = key.createFileReference();,if (key != null ) PBXFileReference ref = key.createFileReference();
PBXGroup.java,XCVersionGroup ref = key.createVersionGroup();,if (key != null ) XCVersionGroup ref = key.createVersionGroup();
XCVersionGroup.java,PBXFileReference ref = key.createFileReference();,if (key != null ) PBXFileReference ref = key.createFileReference();
AndroidAarDescription.java,CopyNativeLibraries copyNativeLibraries = input.get(apkModuleGraph.getRootAPKModule());,if (input != null ) CopyNativeLibraries copyNativeLibraries = input.get(apkModuleGraph.getRootAPKModule());
AndroidBinary.java,AndroidPlatformTarget platformTarget = context.getAndroidPlatformTarget();,if (context != null ) AndroidPlatformTarget platformTarget = context.getAndroidPlatformTarget();
AndroidBinaryResourcesGraphEnhancer.java,aaptOutputInfo = aaptPackageResources.getAaptOutputInfo();,if (aaptPackageResources != null ) aaptOutputInfo = aaptPackageResources.getAaptOutputInfo();
AndroidResourceDescription.java,String dirName = dir.getFileName().toString();,if (dir != null ) String dirName = dir.getFileName().toString();
AndroidResourceDescription.java,String filename = file.getFileName().toString();,if (file != null ) String filename = file.getFileName().toString();
DefaultAndroidDirectoryResolver.java,String version = stripBuildToolsPrefix(pathname.getName());,if (stripBuildToolsPrefix(pathname != null ) String version = stripBuildToolsPrefix(pathname.getName());
DexProducedFromJavaLibrary.java,Collection<String> referencedResources = dx.getResourcesReferencedInCode();,if (dx != null ) Collection<String> referencedResources = dx.getResourcesReferencedInCode();
DexWithClasses.java,final Path pathToDex = preDex.getPathToDex();,if (preDex != null ) final Path pathToDex = preDex.getPathToDex();
DexWithClasses.java,final int weightEstimate = preDex.getWeightEstimate();,if (preDex != null ) final int weightEstimate = preDex.getWeightEstimate();
ExopackageInstaller.java,String hash = input.getKey();,if (input != null ) String hash = input.getKey();
PreDexMerge.java,List<String> lines = Lists.newArrayListWithCapacity(metadataTxtEntries.size());,if (Lists != null ) List<String> lines = Lists.newArrayListWithCapacity(metadataTxtEntries.size());
PreDexMerge.java,Path pathToSecondaryDex = entry.getKey();,if (entry != null ) Path pathToSecondaryDex = entry.getKey();
RealExopackageDevice.java,outToDevice = clientSocket.getOutputStream();,if (clientSocket != null ) outToDevice = clientSocket.getOutputStream();
UnzipAar.java,ImmutableSortedSet<Path> entriesToJar = entriesToJarBuilder.build();,if (entriesToJarBuilder != null ) ImmutableSortedSet<Path> entriesToJar = entriesToJarBuilder.build();
ProjectCommand.java,needsFullRecursiveParse = needsFullRecursiveParse || passedInTargetsSet.isEmpty();,if (passedInTargetsSet != null ) needsFullRecursiveParse = needsFullRecursiveParse || passedInTargetsSet.isEmpty();
ProjectCommand.java,File tempDir = Files.createTempDir();,if (Files != null ) File tempDir = Files.createTempDir();
ProjectCommand.java,List<String> additionalInitialTargets = ImmutableList.of();,if (ImmutableList != null ) List<String> additionalInitialTargets = ImmutableList.of();
Project.java,this.libraryJars = Sets.newHashSet();,if (Sets != null ) this.libraryJars = Sets.newHashSet();
Project.java,File compilerXmlFile = projectFilesystem.getPathForRelativePath(pathToCompilerXml).toFile();,if (projectFilesystem != null ) File compilerXmlFile = projectFilesystem.getPathForRelativePath(pathToCompilerXml).toFile();
Project.java,String pathToScript = pathToPostProcessScript.get();,if (pathToPostProcessScript != null ) String pathToScript = pathToPostProcessScript.get();
Project.java,int postProcessExitCode = postProcessResult.getExitCode();,if (postProcessResult != null ) int postProcessExitCode = postProcessResult.getExitCode();
Project.java,BuildRule srcRule = projectConfig.getSrcRule();,if (projectConfig != null ) BuildRule srcRule = projectConfig.getSrcRule();
Project.java,rJava = Optional.empty();,if (Optional != null ) rJava = Optional.empty();
Project.java,ImmutableSet<Path> noDxJars = noDxJarsBuilder.build();,if (noDxJarsBuilder != null ) ImmutableSet<Path> noDxJars = noDxJarsBuilder.build();
Project.java,BuildRule projectRule = Preconditions.checkNotNull(projectConfig.getProjectRule());,if (Preconditions != null ) BuildRule projectRule = Preconditions.checkNotNull(projectConfig.getProjectRule());
Project.java,LinkedHashSet<SerializableDependentModule> dependencies = Sets.newLinkedHashSet();,if (Sets != null ) LinkedHashSet<SerializableDependentModule> dependencies = Sets.newLinkedHashSet();
Project.java,final BuildTarget target = projectConfig.getBuildTarget();,if (projectConfig != null ) final BuildTarget target = projectConfig.getBuildTarget();
Project.java,module.isIntelliJPlugin = projectConfig.getIsIntelliJPlugin();,if (projectConfig != null ) module.isIntelliJPlugin = projectConfig.getIsIntelliJPlugin();
Project.java,Path relativePath = projectConfig.getBuildTarget().getBasePath();,if (projectConfig != null ) Path relativePath = projectConfig.getBuildTarget().getBasePath();
Project.java,BuildRule testRule = projectConfig.getTestRule();,if (projectConfig != null ) BuildRule testRule = projectConfig.getTestRule();
Project.java,boolean hasSourceFolders = !module.sourceFolders.isEmpty();,if (!module != null ) boolean hasSourceFolders = !module.sourceFolders.isEmpty();
Project.java,Path basePath = projectConfig.getBuildTarget().getBasePath();,if (projectConfig != null ) Path basePath = projectConfig.getBuildTarget().getBasePath();
Project.java,module.nativeLibs = relativePath.relativize(ndkLibrary.getLibraryPath());,if (relativePath != null ) module.nativeLibs = relativePath.relativize(ndkLibrary.getLibraryPath());
Project.java,BuildTarget projectTarget = projectConfig.getBuildTarget();,if (projectConfig != null ) BuildTarget projectTarget = projectConfig.getBuildTarget();
Project.java,module.keystorePath = modulePath.relativize(keystoreProperties.getKeystore());,if (modulePath != null ) module.keystorePath = modulePath.relativize(keystoreProperties.getKeystore());
Project.java,jdkDependency = SerializableDependentModule.newInheritedJdk();,if (SerializableDependentModule != null ) jdkDependency = SerializableDependentModule.newInheritedJdk();
Project.java,jdkDependency = SerializableDependentModule.newIntelliJPluginJdk();,if (SerializableDependentModule != null ) jdkDependency = SerializableDependentModule.newIntelliJPluginJdk();
Project.java,Optional<Path> processingParams = javaLibrary.getGeneratedSourcePath();,if (javaLibrary != null ) Optional<Path> processingParams = javaLibrary.getGeneratedSourcePath();
Project.java,module.annotationGenPath = basePath.relativize(processingParams.get());,if (basePath != null ) module.annotationGenPath = basePath.relativize(processingParams.get());
Project.java,String manifestPath = this.pathToDefaultAndroidManifest.get();,if (this != null ) String manifestPath = this.pathToDefaultAndroidManifest.get();
Project.java,manifestPath = manifestPath.substring(rootPrefix.length());,if (manifestPath != null ) manifestPath = manifestPath.substring(rootPrefix.length());
Project.java,Path basePath = buildRule.getBuildTarget().getBasePath();,if (buildRule != null ) Path basePath = buildRule.getBuildTarget().getBasePath();
Project.java,classpathEntriesToDex = ImmutableSet.of();,if (ImmutableSet != null ) classpathEntriesToDex = ImmutableSet.of();
Project.java,String libraryName = dependentModule.getLibraryName();,if (dependentModule != null ) String libraryName = dependentModule.getLibraryName();
Project.java,final Path basePathForRule = rule.getBuildTarget().getBasePath();,if (rule != null ) final Path basePathForRule = rule.getBuildTarget().getBasePath();
Project.java,targetsToWalk = rule.getBuildDeps();,if (rule != null ) targetsToWalk = rule.getBuildDeps();
Project.java,depsToVisit = dep.getBuildDeps();,if (dep != null ) depsToVisit = dep.getBuildDeps();
Project.java,depsToVisit = ImmutableSet.of();,if (ImmutableSet != null ) depsToVisit = ImmutableSet.of();
Project.java,depsToVisit = dep.getBuildDeps();,if (dep != null ) depsToVisit = dep.getBuildDeps();
Project.java,Path absolutePath = resolver.getAbsolutePath(prebuiltJar.getSourcePathToOutput());,if (resolver != null ) Path absolutePath = resolver.getAbsolutePath(prebuiltJar.getSourcePathToOutput());
Project.java,Path basePath = rule.getBuildTarget().getBasePath();,if (rule != null ) Path basePath = rule.getBuildTarget().getBasePath();
Project.java,Path directoryPath = target.getBasePath();,if (target != null ) Path directoryPath = target.getBasePath();
Project.java,Path binaryJarAbsolutePath = resolver.getAbsolutePath(prebuiltJar.getSourcePathToOutput());,if (resolver != null ) Path binaryJarAbsolutePath = resolver.getAbsolutePath(prebuiltJar.getSourcePathToOutput());
Project.java,List<SerializableAndroidAar> aars = Lists.newArrayListWithCapacity(androidAars.size());,if (Lists != null ) List<SerializableAndroidAar> aars = Lists.newArrayListWithCapacity(androidAars.size());
Project.java,ObjectWriter objectWriter = ObjectMappers.WRITER.withDefaultPrettyPrinter();,if (ObjectMappers != null ) ObjectWriter objectWriter = ObjectMappers.WRITER.withDefaultPrettyPrinter();
Project.java,Console console = executionContext.getConsole();,if (executionContext != null ) Console console = executionContext.getConsole();
Project.java,exitCode = command.execute(childContext).getExitCode();,if (command != null ) exitCode = command.execute(childContext).getExitCode();
SerializableAndroidAar.java,SourcePath res = preBuiltAar.getRes();,if (preBuiltAar != null ) SourcePath res = preBuiltAar.getRes();
SerializableAndroidAar.java,SourcePath assets = preBuiltAar.getAssets();,if (preBuiltAar != null ) SourcePath assets = preBuiltAar.getAssets();
SerializableAndroidAar.java,SourcePath jar = preBuiltAar.getBinaryJar();,if (preBuiltAar != null ) SourcePath jar = preBuiltAar.getBinaryJar();
NumThreadsIntegrationTest.java,int numThreads = Runtime.getRuntime().availableProcessors();,if (Runtime != null ) int numThreads = Runtime.getRuntime().availableProcessors();
ProjectTest.java,TargetGraph targetGraph = TargetGraphFactory.newInstance(nodes.build());,if (TargetGraphFactory != null ) TargetGraph targetGraph = TargetGraphFactory.newInstance(nodes.build());
ProjectTest.java,guava = ruleResolver.requireRule(guavaNode.getBuildTarget());,if (ruleResolver != null ) guava = ruleResolver.requireRule(guavaNode.getBuildTarget());
ProjectTest.java,BuildRuleResolver resolver = projectWithModules.getSecond();,if (projectWithModules != null ) BuildRuleResolver resolver = projectWithModules.getSecond();
ProjectTest.java,SerializableDependentModule inheritedJdk = SerializableDependentModule.newInheritedJdk();,if (SerializableDependentModule != null ) SerializableDependentModule inheritedJdk = SerializableDependentModule.newInheritedJdk();
ProjectTest.java,ExecutionContext executionContext = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext executionContext = TestExecutionContext.newInstance();
ProjectTest.java,List<SerializableModule> modules = new ArrayList<>(project.createModulesForProjectConfigs());,if (ArrayList<>(project != null ) List<SerializableModule> modules = new ArrayList<>(project.createModulesForProjectConfigs());
XctoolRunTestsStep.java,stderr = stackTraceOut.getBuffer().toString();,if (stackTraceOut != null ) stderr = stackTraceOut.getBuffer().toString();
TestRuleKeyFileHelper.java,RuleKey ruleKey = buildEngine.getRuleKey(testRule.getBuildTarget());,if (buildEngine != null ) RuleKey ruleKey = buildEngine.getRuleKey(testRule.getBuildTarget());
TestRuleKeyFileHelper.java,RuleKey ruleKey = buildEngine.getRuleKey(testRule.getBuildTarget());,if (buildEngine != null ) RuleKey ruleKey = buildEngine.getRuleKey(testRule.getBuildTarget());
TestRunning.java,steps = stepsBuilder.build();,if (stepsBuilder != null ) steps = stepsBuilder.build();
TestRunning.java,steps = ImmutableList.of();,if (ImmutableList != null ) steps = ImmutableList.of();
TestRunning.java,TestResults originalTestResults = originalCallable.call();,if (originalCallable != null ) TestResults originalTestResults = originalCallable.call();
TestRunningTest.java,ExecutionContext executionContext = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext executionContext = TestExecutionContext.newInstance();
TestRunningTest.java,ExecutionContext executionContext = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext executionContext = TestExecutionContext.newInstance();
TestRunningTest.java,ExecutionContext executionContext = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext executionContext = TestExecutionContext.newInstance();
TestSelectorsIntegrationTest.java,String stderr = result.getStderr();,if (result != null ) String stderr = result.getStderr();
TestSelectorsIntegrationTest.java,String stderr = result.getStderr();,if (result != null ) String stderr = result.getStderr();
BuildLogHelper.java,String line = reader.readLine();,if (reader != null ) String line = reader.readLine();
BserDeserializer.java,builder = ImmutableMap.builder();,if (ImmutableMap != null ) builder = ImmutableMap.builder();
BserDeserializer.java,builder = ImmutableSortedMap.naturalOrder();,if (ImmutableSortedMap != null ) builder = ImmutableSortedMap.naturalOrder();
MapWrapperForNullValues.java,V result = super.getValue();,if (super != null ) V result = super.getValue();
WatchEvents.java,Path path = (Path) event.context();,if (event != null ) Path path = (Path) event.context();
DaemonicParserState.java,Path path = (Path) event.context();,if (event != null ) Path path = (Path) event.context();
ParserTest.java,WatchEvent<Object> event = WatchEventsForTests.createOverflowEvent();,if (WatchEventsForTests != null ) WatchEvent<Object> event = WatchEventsForTests.createOverflowEvent();
WatchmanWatcherIntegrationTest.java,Path eventPath = (Path) event.context();,if (event != null ) Path eventPath = (Path) event.context();
Main.java,Path rootPath = cell.getFilesystem().getRootPath();,if (cell != null ) Path rootPath = cell.getFilesystem().getRootPath();
Main.java,"daemon = new Daemon(cell, Optional.empty());","if (Optional != null ) daemon = new Daemon(cell, Optional.empty());"
Main.java,Path parserRoot = cell.getFilesystem().getRootPath();,if (cell != null ) Path parserRoot = cell.getFilesystem().getRootPath();
Main.java,webServer = daemon.getWebServer();,if (daemon != null ) webServer = daemon.getWebServer();
Main.java,webServer = Optional.empty();,if (Optional != null ) webServer = Optional.empty();
Main.java,versionedTargetGraphCache = daemon.getVersionedTargetGraphCache();,if (daemon != null ) versionedTargetGraphCache = daemon.getVersionedTargetGraphCache();
Main.java,actionGraphCache = daemon.getActionGraphCache();,if (daemon != null ) actionGraphCache = daemon.getActionGraphCache();
DaemonIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());
DaemonIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());
SimpleConsoleEventBusListenerTest.java,vfs = Jimfs.newFileSystem(Configuration.unix());,if (Jimfs != null ) vfs = Jimfs.newFileSystem(Configuration.unix());
ProjectGenerator.java,AppleNativeTargetDescriptionArg appleArg = appleTargetNode.get().getConstructorArg();,if (appleTargetNode != null ) AppleNativeTargetDescriptionArg appleArg = appleTargetNode.get().getConstructorArg();
ClassVisitorDriverFromElement.java,TypeElement enclosingClass = (TypeElement) e.getEnclosingElement();,if (e != null ) TypeElement enclosingClass = (TypeElement) e.getEnclosingElement();
ClassVisitorDriverFromElement.java,walker = (TypeElement) enclosingClass.getEnclosingElement();,if (enclosingClass != null ) walker = (TypeElement) enclosingClass.getEnclosingElement();
DefaultJavaLibraryBuilder.java,ImmutableSortedSet<BuildRule> declaredDeps = declaredDepsBuilder.build();,if (declaredDepsBuilder != null ) ImmutableSortedSet<BuildRule> declaredDeps = declaredDepsBuilder.build();
AndroidLibraryDescriptionTest.java,BuildRule androidLibRule = resolver.requireRule(androidLibNode.getBuildTarget());,if (resolver != null ) BuildRule androidLibRule = resolver.requireRule(androidLibNode.getBuildTarget());
AndroidLibraryDescriptionTest.java,BuildRule exportedRule = resolver.requireRule(exportedNode.getBuildTarget());,if (resolver != null ) BuildRule exportedRule = resolver.requireRule(exportedNode.getBuildTarget());
AndroidLibraryDescriptionTest.java,BuildRule androidLibRule = resolver.requireRule(androidLibNode.getBuildTarget());,if (resolver != null ) BuildRule androidLibRule = resolver.requireRule(androidLibNode.getBuildTarget());
AndroidLibraryDescriptionTest.java,BuildRule exportedRule = resolver.requireRule(exportedNode.getBuildTarget());,if (resolver != null ) BuildRule exportedRule = resolver.requireRule(exportedNode.getBuildTarget());
RobolectricTestDescriptionTest.java,BuildRule exportedRule = resolver.requireRule(exportedNode.getBuildTarget());,if (resolver != null ) BuildRule exportedRule = resolver.requireRule(exportedNode.getBuildTarget());
RobolectricTestDescriptionTest.java,BuildRule exportedRule = resolver.requireRule(exportedNode.getBuildTarget());,if (resolver != null ) BuildRule exportedRule = resolver.requireRule(exportedNode.getBuildTarget());
JavaLibraryDescriptionTest.java,exportedRule = resolver.requireRule(exportedNode.getBuildTarget());,if (resolver != null ) exportedRule = resolver.requireRule(exportedNode.getBuildTarget());
JavaLibraryDescriptionTest.java,exportingRule = resolver.requireRule(exportingNode.getBuildTarget());,if (resolver != null ) exportingRule = resolver.requireRule(exportingNode.getBuildTarget());
JavaTestDescriptionTest.java,BuildRule exportedRule = resolver.requireRule(exportedNode.getBuildTarget());,if (resolver != null ) BuildRule exportedRule = resolver.requireRule(exportedNode.getBuildTarget());
JavaTestDescriptionTest.java,BuildRule exportedRule = resolver.requireRule(exportedNode.getBuildTarget());,if (resolver != null ) BuildRule exportedRule = resolver.requireRule(exportedNode.getBuildTarget());
Main.java,WatchedFileHashCache watchedCache = new WatchedFileHashCache(subCell.getFilesystem());,if (WatchedFileHashCache(subCell != null ) WatchedFileHashCache watchedCache = new WatchedFileHashCache(subCell.getFilesystem());
Main.java,this.hashCaches = hashCachesBuilder.build();,if (hashCachesBuilder != null ) this.hashCaches = hashCachesBuilder.build();
Main.java,"webServer = createWebServer(cell.getBuckConfig(), cell.getFilesystem());","if (cell != null ) webServer = createWebServer(cell.getBuckConfig(), cell.getFilesystem());"
Main.java,cursor = cell.getWatchman().buildClockWatchmanCursorMap();,if (cell != null ) cursor = cell.getWatchman().buildClockWatchmanCursorMap();
Main.java,cursor = cell.getWatchman().buildNamedWatchmanCursorMap();,if (cell != null ) cursor = cell.getWatchman().buildNamedWatchmanCursorMap();
Main.java,String rawPort = serverPort.get();,if (serverPort != null ) String rawPort = serverPort.get();
Main.java,FileHashCacheEvent.InvalidationStarted started = FileHashCacheEvent.invalidationStarted();,if (FileHashCacheEvent != null ) FileHashCacheEvent.InvalidationStarted started = FileHashCacheEvent.invalidationStarted();
Main.java,Optional<WebServer> webServer = Optional.empty();,if (Optional != null ) Optional<WebServer> webServer = Optional.empty();
Main.java,cursor = cursorBuilder.build();,if (cursorBuilder != null ) cursor = cursorBuilder.build();
CleanCommand.java,ProjectFilesystem projectFilesystem = params.getCell().getFilesystem();,if (params != null ) ProjectFilesystem projectFilesystem = params.getCell().getFilesystem();
CxxPreprocessAndCompile.java,arguments = compilerDelegate.getArguments(CxxToolFlags.of());,if (compilerDelegate != null ) arguments = compilerDelegate.getArguments(CxxToolFlags.of());
AppleResources.java,Object constructorArg = resourceNode.getConstructorArg();,if (resourceNode != null ) Object constructorArg = resourceNode.getConstructorArg();
AppleResources.java,BuildTarget buildTarget = resourceNode.getBuildTarget();,if (resourceNode != null ) BuildTarget buildTarget = resourceNode.getBuildTarget();
StubJarGeneratingProcessor.java,Elements elementUtils = processingEnv.getElementUtils();,if (processingEnv != null ) Elements elementUtils = processingEnv.getElementUtils();
CachingBuildEngine.java,ListenableFuture<RuleKey> ruleKey = ruleKeys.get(rule.getBuildTarget());,if (ruleKeys != null ) ListenableFuture<RuleKey> ruleKey = ruleKeys.get(rule.getBuildTarget());
CachingBuildEngine.java,outputSize = Optional.of(buildInfoRecorder.getOutputSize());,if (Optional != null ) outputSize = Optional.of(buildInfoRecorder.getOutputSize());
VersionControlStatsGenerator.java,VersionControlStats.Builder versionControlStats = VersionControlStats.builder();,if (VersionControlStats != null ) VersionControlStats.Builder versionControlStats = VersionControlStats.builder();
VersionControlStatsGenerator.java,String currentRevisionId = versionControlCmdLineInterface.currentRevisionId();,if (versionControlCmdLineInterface != null ) String currentRevisionId = versionControlCmdLineInterface.currentRevisionId();
VcsInfoCollector.java,SourceControlInfo.Builder sourceControlInfoBuilder = SourceControlInfo.builder();,if (SourceControlInfo != null ) SourceControlInfo.Builder sourceControlInfoBuilder = SourceControlInfo.builder();
VcsInfoCollector.java,String currentRevisionId = vcCmdLineInterface.currentRevisionId();,if (vcCmdLineInterface != null ) String currentRevisionId = vcCmdLineInterface.currentRevisionId();
VersionControlStatsGenerator.java,String currentRevisionId = versionControlCmdLineInterface.currentRevisionId();,if (versionControlCmdLineInterface != null ) String currentRevisionId = versionControlCmdLineInterface.currentRevisionId();
AbstractAnnotationProcessingParams.java,JavacPluginProperties legacySafeProcessors = legacySafeProcessorsBuilder.build();,if (legacySafeProcessorsBuilder != null ) JavacPluginProperties legacySafeProcessors = legacySafeProcessorsBuilder.build();
AbstractAnnotationProcessingParams.java,JavacPluginProperties legacyUnsafeProcessors = legacyUnsafeProcessorsBuilder.build();,if (legacyUnsafeProcessorsBuilder != null ) JavacPluginProperties legacyUnsafeProcessors = legacyUnsafeProcessorsBuilder.build();
AbstractAnnotationProcessingParams.java,legacyProcessors = resultBuilder.build();,if (resultBuilder != null ) legacyProcessors = resultBuilder.build();
ProjectBuildFileParser.java,OutputStream stdin = buckPyProcess.getOutputStream();,if (buckPyProcess != null ) OutputStream stdin = buckPyProcess.getOutputStream();
BserDeserializer.java,V result = super.getValue();,if (super != null ) V result = super.getValue();
ProjectGenerator.java,final BuildTarget buildTarget = targetNode.getBuildTarget();,if (targetNode != null ) final BuildTarget buildTarget = targetNode.getBuildTarget();
ProjectGenerator.java,String oldCompDir = cxxPlatform.getCompilerDebugPathSanitizer().getCompilationDirectory();,if (cxxPlatform != null ) String oldCompDir = cxxPlatform.getCompilerDebugPathSanitizer().getCompilationDirectory();
WorkspaceAndProjectGenerator.java,Optional<String> productName = Optional.empty();,if (Optional != null ) Optional<String> productName = Optional.empty();
ProjectGeneratorTest.java,PBXBuildPhase buildPhase = Iterables.getOnlyElement(buildWithBuckTarget.getBuildPhases());,if (Iterables != null ) PBXBuildPhase buildPhase = Iterables.getOnlyElement(buildWithBuckTarget.getBuildPhases());
ProjectGeneratorTest.java,PBXBuildPhase buildPhase = Iterables.getOnlyElement(buildWithBuckTarget.getBuildPhases());,if (Iterables != null ) PBXBuildPhase buildPhase = Iterables.getOnlyElement(buildWithBuckTarget.getBuildPhases());
SchemeGeneratorTest.java,Path schemePath = schemeGenerator.writeScheme();,if (schemeGenerator != null ) Path schemePath = schemeGenerator.writeScheme();
SchemeGeneratorTest.java,DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();,if (DocumentBuilderFactory != null ) DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
SchemeGeneratorTest.java,DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();,if (dbFactory != null ) DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
SchemeGeneratorTest.java,XPathFactory xpathFactory = XPathFactory.newInstance();,if (XPathFactory != null ) XPathFactory xpathFactory = XPathFactory.newInstance();
SchemeGeneratorTest.java,XPath runnableLaunchActionXPath = xpathFactory.newXPath();,if (xpathFactory != null ) XPath runnableLaunchActionXPath = xpathFactory.newXPath();
SchemeGeneratorTest.java,Path schemePath = schemeGenerator.writeScheme();,if (schemeGenerator != null ) Path schemePath = schemeGenerator.writeScheme();
SchemeGeneratorTest.java,DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();,if (DocumentBuilderFactory != null ) DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
SchemeGeneratorTest.java,DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();,if (dbFactory != null ) DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
SchemeGeneratorTest.java,XPathFactory xpathFactory = XPathFactory.newInstance();,if (XPathFactory != null ) XPathFactory xpathFactory = XPathFactory.newInstance();
SchemeGeneratorTest.java,XPath buildActionXpath = xpathFactory.newXPath();,if (xpathFactory != null ) XPath buildActionXpath = xpathFactory.newXPath();
WorkspaceAndProjectGeneratorTest.java,String gid = buildWithBuckTarget.getGlobalID();,if (buildWithBuckTarget != null ) String gid = buildWithBuckTarget.getGlobalID();
WorkspaceAndProjectGeneratorTest.java,XCScheme.BuildableReference buildableReference = buildActionEntry.getBuildableReference();,if (buildActionEntry != null ) XCScheme.BuildableReference buildableReference = buildActionEntry.getBuildableReference();
ConstructorArgMarshaller.java,this.coercedTypes = CacheBuilder.newBuilder().build();,if (CacheBuilder != null ) this.coercedTypes = CacheBuilder.newBuilder().build();
AbstractTypeCoercerFactory.java,Type rawType = parameterizedType.getRawType();,if (parameterizedType != null ) Type rawType = parameterizedType.getRawType();
BlockedPathNode.java,blockedPathNode = blockedPathNodeOptional.get();,if (blockedPathNodeOptional != null ) blockedPathNode = blockedPathNodeOptional.get();
IjModuleGraphFactory.java,Path basePath = targetNode.getBuildTarget().getBasePath();,if (targetNode != null ) Path basePath = targetNode.getBuildTarget().getBasePath();
IjModuleGraphFactory.java,int maxDepth = basePath.getNameCount();,if (basePath != null ) int maxDepth = basePath.getNameCount();
IjModuleGraphFactory.java,Path blockedPath = node.getBuildTarget().getBasePath();,if (node != null ) Path blockedPath = node.getBuildTarget().getBasePath();
IjModuleGraphFactory.java,String defaultSourceLevel = defaultJavacOptions.getSourceLevel();,if (defaultJavacOptions != null ) String defaultSourceLevel = defaultJavacOptions.getSourceLevel();
IjModuleGraphFactory.java,String defaultTargetLevel = defaultJavacOptions.getTargetLevel();,if (defaultJavacOptions != null ) String defaultTargetLevel = defaultJavacOptions.getTargetLevel();
IjModuleGraphFactory.java,JavaLibraryDescription.Arg arg = (JavaLibraryDescription.Arg) node.getConstructorArg();,if (node != null ) JavaLibraryDescription.Arg arg = (JavaLibraryDescription.Arg) node.getConstructorArg();
IjModuleGraphTest.java,int minimumDepth = testAggregationMode.getGraphMinimumDepth(originalPaths.size());,if (testAggregationMode != null ) int minimumDepth = testAggregationMode.getGraphMinimumDepth(originalPaths.size());
IjModuleGraphTest.java,int blockedPathNameCount = blockedPath.getNameCount();,if (blockedPath != null ) int blockedPathNameCount = blockedPath.getNameCount();
IjModuleGraphTest.java,int blockedPathNameCount = blockedPath.getNameCount();,if (blockedPath != null ) int blockedPathNameCount = blockedPath.getNameCount();
IjModuleGraphTest.java,int blockedPathNameCount = blockedPath.getNameCount();,if (blockedPath != null ) int blockedPathNameCount = blockedPath.getNameCount();
IjModuleGraphTest.java,int blockedPathNameCount = blockedPath.getNameCount();,if (blockedPath != null ) int blockedPathNameCount = blockedPath.getNameCount();
IjModuleGraphTest.java,int blockedPathNameCount = blockedPath.getNameCount();,if (blockedPath != null ) int blockedPathNameCount = blockedPath.getNameCount();
IjModuleGraphTest.java,int subPathNameCount = subPath.getNameCount();,if (subPath != null ) int subPathNameCount = subPath.getNameCount();
IjModuleGraphTest.java,int blockedPathNameCount = blockedPath.getNameCount();,if (blockedPath != null ) int blockedPathNameCount = blockedPath.getNameCount();
IjModuleGraphTest.java,int subPathNameCount = subPath.getNameCount();,if (subPath != null ) int subPathNameCount = subPath.getNameCount();
AbstractIjModule.java,Path targetBasePath = target.getBuildTarget().getBasePath();,if (target != null ) Path targetBasePath = target.getBuildTarget().getBasePath();
IjSourceRootSimplifier.java,delegate = new ParsingJavaPackageFinder.PackagePathCache();,if (ParsingJavaPackageFinder != null ) delegate = new ParsingJavaPackageFinder.PackagePathCache();
ParsingJavaPackageFinder.java,Path parentPath = pathRelativeToProjectRoot.getParent();,if (pathRelativeToProjectRoot != null ) Path parentPath = pathRelativeToProjectRoot.getParent();
ParsingJavaPackageFinder.java,Path path = pathRelativeToProjectRoot.getParent();,if (pathRelativeToProjectRoot != null ) Path path = pathRelativeToProjectRoot.getParent();
ParsingJavaPackageFinder.java,Path suffix = path.relativize(pathRelativeToProjectRoot.getParent());,if (path != null ) Path suffix = path.relativize(pathRelativeToProjectRoot.getParent());
ParsingJavaPackageFinder.java,path = path.getParent();,if (path != null ) path = path.getParent();
DefaultIjModuleFactory.java,Optional<String> result = Optional.empty();,if (Optional != null ) Optional<String> result = Optional.empty();
DefaultIjModuleFactory.java,JavacOptions defaultJavacOptions = projectConfig.getJavaBuckConfig().getDefaultJavacOptions();,if (projectConfig != null ) JavacOptions defaultJavacOptions = projectConfig.getJavaBuckConfig().getDefaultJavacOptions();
DefaultIjModuleFactory.java,String defaultSourceLevel = defaultJavacOptions.getSourceLevel();,if (defaultJavacOptions != null ) String defaultSourceLevel = defaultJavacOptions.getSourceLevel();
DefaultIjModuleFactory.java,String defaultTargetLevel = defaultJavacOptions.getTargetLevel();,if (defaultJavacOptions != null ) String defaultTargetLevel = defaultJavacOptions.getTargetLevel();
DefaultIjModuleFactory.java,JavaLibraryDescription.Arg arg = (JavaLibraryDescription.Arg) targetNode.getConstructorArg();,if (targetNode != null ) JavaLibraryDescription.Arg arg = (JavaLibraryDescription.Arg) targetNode.getConstructorArg();
DefaultIjModuleFactory.java,IjModuleAndroidFacet.Builder androidFacetBuilder = context.getOrCreateAndroidFacetBuilder();,if (context != null ) IjModuleAndroidFacet.Builder androidFacetBuilder = context.getOrCreateAndroidFacetBuilder();
DefaultIjModuleFactory.java,IjModuleAndroidFacet.Builder builder = context.getOrCreateAndroidFacetBuilder();,if (context != null ) IjModuleAndroidFacet.Builder builder = context.getOrCreateAndroidFacetBuilder();
DefaultIjModuleFactory.java,IjModuleAndroidFacet.Builder androidFacetBuilder = context.getOrCreateAndroidFacetBuilder();,if (context != null ) IjModuleAndroidFacet.Builder androidFacetBuilder = context.getOrCreateAndroidFacetBuilder();
DefaultIjModuleFactory.java,resourceFolders = ImmutableSet.of(resources.get());,if (ImmutableSet != null ) resourceFolders = ImmutableSet.of(resources.get());
DefaultIjModuleFactory.java,List<String> excludedResourcePaths = projectConfig.getExcludedResourcePaths();,if (projectConfig != null ) List<String> excludedResourcePaths = projectConfig.getExcludedResourcePaths();
DefaultIjModuleFactory.java,resourceFolders = ImmutableSet.of();,if (ImmutableSet != null ) resourceFolders = ImmutableSet.of();
DefaultIjModuleFactory.java,Set<String> intellijLibraries = projectConfig.getIntellijSdkTargets();,if (projectConfig != null ) Set<String> intellijLibraries = projectConfig.getIntellijSdkTargets();
DefaultIjModuleFactory.java,Set<String> intellijLibraries = projectConfig.getIntellijSdkTargets();,if (projectConfig != null ) Set<String> intellijLibraries = projectConfig.getIntellijSdkTargets();
DefaultIjModuleFactory.java,this.autogenerateAndroidFacetSources = projectConfig.isAutogenerateAndroidFacetSourcesEnabled();,if (projectConfig != null ) this.autogenerateAndroidFacetSources = projectConfig.isAutogenerateAndroidFacetSourcesEnabled();
DefaultIjModuleFactory.java,this.excludeShadows = projectConfig.isExcludeArtifactsEnabled();,if (projectConfig != null ) this.excludeShadows = projectConfig.isExcludeArtifactsEnabled();
DefaultIjModuleFactory.java,Path parent = path.getParent();,if (path != null ) Path parent = path.getParent();
DefaultIjModuleFactory.java,T arg = targetNode.getConstructorArg();,if (targetNode != null ) T arg = targetNode.getConstructorArg();
DefaultIjModuleFactory.java,boolean hasAnnotationProcessors = !arg.annotationProcessors.isEmpty();,if (!arg != null ) boolean hasAnnotationProcessors = !arg.annotationProcessors.isEmpty();
DefaultIjModuleFactory.java,Path annotationOutputPath = annotationOutput.get();,if (annotationOutput != null ) Path annotationOutputPath = annotationOutput.get();
DefaultIjModuleFactory.java,BuildTarget buildTarget = targetNode.getBuildTarget();,if (targetNode != null ) BuildTarget buildTarget = targetNode.getBuildTarget();
DefaultIjModuleFactory.java,String buildTargetName = dependencyTarget.toString();,if (dependencyTarget != null ) String buildTargetName = dependencyTarget.toString();
ModuleBuildContext.java,this.moduleType = Optional.empty();,if (Optional != null ) this.moduleType = Optional.empty();
DefaultIjModuleFactory.java,sdkName = projectConfig.getIntellijModuleSdkName();,if (projectConfig != null ) sdkName = projectConfig.getIntellijModuleSdkName();
DefaultIjModuleFactory.java,sdkName = projectConfig.getAndroidModuleSdkName();,if (projectConfig != null ) sdkName = projectConfig.getAndroidModuleSdkName();
DefaultIjModuleFactory.java,sdkName = projectConfig.getJavaModuleSdkName();,if (projectConfig != null ) sdkName = projectConfig.getJavaModuleSdkName();
DefaultJavaLibrary.java,JavaPackageFinder finder = context.getJavaPackageFinder();,if (context != null ) JavaPackageFinder finder = context.getJavaPackageFinder();
DefaultJavaLibrary.java,usedClassesFileWriter = NoOpClassUsageFileWriter.instance();,if (NoOpClassUsageFileWriter != null ) usedClassesFileWriter = NoOpClassUsageFileWriter.instance();
DefaultJavaLibrary.java,Path output = outputJar.get();,if (outputJar != null ) Path output = outputJar.get();
AnnotationProcessingParams.java,JavacPluginProperties legacySafeProcessors = legacySafeProcessorsBuilder.build();,if (legacySafeProcessorsBuilder != null ) JavacPluginProperties legacySafeProcessors = legacySafeProcessorsBuilder.build();
AnnotationProcessingParams.java,JavacPluginProperties legacyUnsafeProcessors = legacyUnsafeProcessorsBuilder.build();,if (legacyUnsafeProcessorsBuilder != null ) JavacPluginProperties legacyUnsafeProcessors = legacyUnsafeProcessorsBuilder.build();
AnnotationProcessingParams.java,ImmutableList<ResolvedJavacPluginProperties> processors = processorsBuilder.build();,if (processorsBuilder != null ) ImmutableList<ResolvedJavacPluginProperties> processors = processorsBuilder.build();
JvmLibraryArg.java,AnnotationProcessingParams.Builder builder = new AnnotationProcessingParams.Builder();,if (AnnotationProcessingParams != null ) AnnotationProcessingParams.Builder builder = new AnnotationProcessingParams.Builder();
DefaultParserTargetNodeFactory.java,UnflavoredBuildTarget unflavoredBuildTarget = target.withoutCell().getUnflavoredBuildTarget();,if (target != null ) UnflavoredBuildTarget unflavoredBuildTarget = target.withoutCell().getUnflavoredBuildTarget();
DaemonicCellStateTest.java,Path root = tempDir.getRoot().toRealPath();,if (tempDir != null ) Path root = tempDir.getRoot().toRealPath();
DaemonicParserState.java,DaemonicCellState state = cellPathToDaemonicState.get(cell.getRoot());,if (cellPathToDaemonicState != null ) DaemonicCellState state = cellPathToDaemonicState.get(cell.getRoot());
AdbHelper.java,List<IDevice> devices = Lists.newArrayList();,if (Lists != null ) List<IDevice> devices = Lists.newArrayList();
CompileStringsStep.java,this.regionSpecificToBaseLocaleMap = Maps.newHashMap();,if (Maps != null ) this.regionSpecificToBaseLocaleMap = Maps.newHashMap();
CompileStringsStep.java,this.stringResourceNameToIdMap = Maps.newHashMap();,if (Maps != null ) this.stringResourceNameToIdMap = Maps.newHashMap();
CompileStringsStep.java,this.pluralsResourceNameToIdMap = Maps.newHashMap();,if (Maps != null ) this.pluralsResourceNameToIdMap = Maps.newHashMap();
CompileStringsStep.java,this.arrayResourceNameToIdMap = Maps.newHashMap();,if (Maps != null ) this.arrayResourceNameToIdMap = Maps.newHashMap();
DefaultAndroidManifestReader.java,List<String> activities = Lists.newArrayList();,if (Lists != null ) List<String> activities = Lists.newArrayList();
GenerateManifestStep.java,List<File> libraryManifestFiles = Lists.newArrayList();,if (Lists != null ) List<File> libraryManifestFiles = Lists.newArrayList();
PreDexedFilesSorter.java,dexesContents = Lists.newArrayList();,if (Lists != null ) dexesContents = Lists.newArrayList();
PreDexedFilesSorter.java,currentDexContents = Lists.newArrayList();,if (Lists != null ) currentDexContents = Lists.newArrayList();
PreDexedFilesSorter.java,primaryDexContents = Lists.newArrayList();,if (Lists != null ) primaryDexContents = Lists.newArrayList();
PreDexedFilesSorter.java,currentDexContents = Lists.newArrayList();,if (Lists != null ) currentDexContents = Lists.newArrayList();
AaptResourceCollector.java,this.enumerators = Maps.newHashMap();,if (Maps != null ) this.enumerators = Maps.newHashMap();
HeaderMap.java,this.addedStrings = Maps.newHashMap();,if (Maps != null ) this.addedStrings = Maps.newHashMap();
SchemeGenerator.java,buildTargetToBuildableReferenceMap = Maps.newHashMap();,if (Maps != null ) buildTargetToBuildableReferenceMap = Maps.newHashMap();
WorkspaceGenerator.java,this.children = Maps.newTreeMap();,if (Maps != null ) this.children = Maps.newTreeMap();
WorkspaceGenerator.java,this.children = Maps.newTreeMap();,if (Maps != null ) this.children = Maps.newTreeMap();
XCScheme.java,buildActionEntries = Lists.newArrayList();,if (Lists != null ) buildActionEntries = Lists.newArrayList();
XCScheme.java,this.testables = Lists.newArrayList();,if (Lists != null ) this.testables = Lists.newArrayList();
PBXBuildPhase.java,this.files = Lists.newArrayList();,if (Lists != null ) this.files = Lists.newArrayList();
PBXGroup.java,children = Lists.newArrayList();,if (Lists != null ) children = Lists.newArrayList();
PBXProject.java,this.targets = Lists.newArrayList();,if (Lists != null ) this.targets = Lists.newArrayList();
PBXShellScriptBuildPhase.java,this.inputPaths = Lists.newArrayList();,if (Lists != null ) this.inputPaths = Lists.newArrayList();
PBXShellScriptBuildPhase.java,this.outputPaths = Lists.newArrayList();,if (Lists != null ) this.outputPaths = Lists.newArrayList();
PBXTarget.java,this.dependencies = Lists.newArrayList();,if (Lists != null ) this.dependencies = Lists.newArrayList();
PBXTarget.java,this.buildPhases = Lists.newArrayList();,if (Lists != null ) this.buildPhases = Lists.newArrayList();
XCConfigurationList.java,buildConfigurations = Lists.newArrayList();,if (Lists != null ) buildConfigurations = Lists.newArrayList();
XCVersionGroup.java,children = Lists.newArrayList();,if (Lists != null ) children = Lists.newArrayList();
CommandThreadManager.java,List<String> parts = Lists.newArrayList();,if (Lists != null ) List<String> parts = Lists.newArrayList();
ProjectCommand.java,initialTargets = Lists.newArrayList();,if (Lists != null ) initialTargets = Lists.newArrayList();
ResolveAliasHelper.java,List<String> resolvedAliases = Lists.newArrayList();,if (Lists != null ) List<String> resolvedAliases = Lists.newArrayList();
TestCommand.java,List<ExternalTestRunnerTestSpec> specs = Lists.newArrayList();,if (Lists != null ) List<ExternalTestRunnerTestSpec> specs = Lists.newArrayList();
TestRunning.java,List<TestRun> parallelTestRuns = Lists.newArrayList();,if (Lists != null ) List<TestRun> parallelTestRuns = Lists.newArrayList();
AbstractCxxSourceRuleFactory.java,List<String> parts = Lists.newArrayList();,if (Lists != null ) List<String> parts = Lists.newArrayList();
CxxCompilationDatabase.java,List<CxxCompilationDatabaseEntry> entries = Lists.newArrayList();,if (Lists != null ) List<CxxCompilationDatabaseEntry> entries = Lists.newArrayList();
FirstOrderHelper.java,this.knownTypes = Maps.newHashMap();,if (Maps != null ) this.knownTypes = Maps.newHashMap();
BuildTargetsQueue.java,List<EnqueuedTarget> zeroDependencyTargets = Lists.newArrayList();,if (Lists != null ) List<EnqueuedTarget> zeroDependencyTargets = Lists.newArrayList();
BuildTargetsQueue.java,currentRevDeps = Lists.newArrayList();,if (Lists != null ) currentRevDeps = Lists.newArrayList();
DistBuildFileHashes.java,this.remoteFileHashes = Maps.newHashMap();,if (Maps != null ) this.remoteFileHashes = Maps.newHashMap();
DistBuildLogStateTracker.java,List<LogLineBatchRequest> requests = Lists.newArrayList();,if (Lists != null ) List<LogLineBatchRequest> requests = Lists.newArrayList();
DistBuildLogStateTracker.java,List<RunId> runIds = Lists.newArrayList();,if (Lists != null ) List<RunId> runIds = Lists.newArrayList();
DistBuildLogStateTracker.java,List<String> newLines = Lists.newArrayList();,if (Lists != null ) List<String> newLines = Lists.newArrayList();
DistBuildService.java,List<Path> buckDotFilesExceptConfig = Lists.newArrayList();,if (Lists != null ) List<Path> buckDotFilesExceptConfig = Lists.newArrayList();
DistBuildSlaveExecutor.java,List<BuildTarget> targets = Lists.newArrayList();,if (Lists != null ) List<BuildTarget> targets = Lists.newArrayList();
MinionWorkloadAllocator.java,this.minionAllocations = Maps.newHashMap();,if (Maps != null ) this.minionAllocations = Maps.newHashMap();
RuleKeyLoggerListener.java,this.logLines = Lists.newArrayList();,if (Lists != null ) this.logLines = Lists.newArrayList();
RuleKeyLoggerListener.java,List<String> newLogLines = Lists.newArrayList();,if (Lists != null ) List<String> newLogLines = Lists.newArrayList();
RuleKeyLoggerListener.java,logLines = Lists.newArrayList();,if (Lists != null ) logLines = Lists.newArrayList();
SuperConsoleEventBusListener.java,List<String> columns = Lists.newArrayList();,if (Lists != null ) List<String> columns = Lists.newArrayList();
SuperConsoleEventBusListener.java,List<String> columns = Lists.newArrayList();,if (Lists != null ) List<String> columns = Lists.newArrayList();
SuperConsoleEventBusListener.java,List<String> columns = Lists.newArrayList();,if (Lists != null ) List<String> columns = Lists.newArrayList();
RetryingDownloader.java,List<IOException> allExceptions = Lists.newArrayList();,if (Lists != null ) List<IOException> allExceptions = Lists.newArrayList();
GoTest.java,List<String> stdout = Lists.newArrayList();,if (Lists != null ) List<String> stdout = Lists.newArrayList();
AbstractBreadthFirstThrowingTraversal.java,toExplore = Lists.newLinkedList();,if (Lists != null ) toExplore = Lists.newLinkedList();
AcyclicDepthFirstPostOrderTraversal.java,Deque<Explorable> toExplore = Lists.newLinkedList();,if (Lists != null ) Deque<Explorable> toExplore = Lists.newLinkedList();
AcyclicDepthFirstPostOrderTraversal.java,Deque<T> chain = Lists.newLinkedList();,if (Lists != null ) Deque<T> chain = Lists.newLinkedList();
MutableDirectedGraph.java,this.indexes = Maps.newHashMap();,if (Maps != null ) this.indexes = Maps.newHashMap();
MutableDirectedGraph.java,this.lowlinks = Maps.newHashMap();,if (Maps != null ) this.lowlinks = Maps.newHashMap();
MutableDirectedGraph.java,this.nodeStack = Lists.newLinkedList();,if (Lists != null ) this.nodeStack = Lists.newLinkedList();
Project.java,List<String> modifiedFiles = Lists.newArrayList();,if (Lists != null ) List<String> modifiedFiles = Lists.newArrayList();
Project.java,List<SerializableModule> modules = Lists.newArrayList();,if (Lists != null ) List<SerializableModule> modules = Lists.newArrayList();
Project.java,List<SerializableDependentModule> dependenciesInOrder = Lists.newArrayList();,if (Lists != null ) List<SerializableDependentModule> dependenciesInOrder = Lists.newArrayList();
Project.java,List<SerializableDependentModule> nonLibraries = Lists.newArrayList();,if (Lists != null ) List<SerializableDependentModule> nonLibraries = Lists.newArrayList();
SerializableModule.java,List<SourceFolder> sourceFolders = Lists.newArrayList();,if (Lists != null ) List<SourceFolder> sourceFolders = Lists.newArrayList();
SerializableModule.java,List<SerializableDependentModule> dependencies = Lists.newArrayList();,if (Lists != null ) List<SerializableDependentModule> dependencies = Lists.newArrayList();
MoreFiles.java,List<String> diffLines = Lists.newArrayList();,if (Lists != null ) List<String> diffLines = Lists.newArrayList();
DefaultJavaPackageFinder.java,Deque<String> parts = Lists.newLinkedList();,if (Lists != null ) Deque<String> parts = Lists.newLinkedList();
JavaFileParser.java,LinkedList<String> nameParts = Lists.newLinkedList();,if (Lists != null ) LinkedList<String> nameParts = Lists.newLinkedList();
Jsr199Javac.java,List<JavaFileObject> compilationUnits = Lists.newArrayList();,if (Lists != null ) List<JavaFileObject> compilationUnits = Lists.newArrayList();
LogFileHandler.java,List<Path> dirPaths = Lists.newArrayList();,if (Lists != null ) List<Path> dirPaths = Lists.newArrayList();
InMemoryBuildFileTree.java,basePathToNodeIndex = Maps.newHashMap();,if (Maps != null ) basePathToNodeIndex = Maps.newHashMap();
InMemoryBuildFileTree.java,children = Lists.newArrayList();,if (Lists != null ) children = Lists.newArrayList();
OcamlRuleBuilder.java,List<NativeLinkableInput> inputs = Lists.newArrayList();,if (Lists != null ) List<NativeLinkableInput> inputs = Lists.newArrayList();
OcamlRuleBuilder.java,List<NativeLinkableInput> inputs = Lists.newArrayList();,if (Lists != null ) List<NativeLinkableInput> inputs = Lists.newArrayList();
AllPathsFunction.java,worklist = Lists.newArrayList();,if (Lists != null ) worklist = Lists.newArrayList();
RetryingHttpService.java,List<IOException> allExceptions = Lists.newArrayList();,if (Lists != null ) List<IOException> allExceptions = Lists.newArrayList();
ServerHealthState.java,this.pingLatencies = Lists.newLinkedList();,if (Lists != null ) this.pingLatencies = Lists.newLinkedList();
ServerHealthState.java,this.requests = Lists.newLinkedList();,if (Lists != null ) this.requests = Lists.newLinkedList();
DirectoryCleaner.java,List<PathStats> pathStats = Lists.newArrayList();,if (Lists != null ) List<PathStats> pathStats = Lists.newArrayList();
NdkCxxPlatformTest.java,preprocessAndCompileRukeKeys = Maps.newHashMap();,if (Maps != null ) preprocessAndCompileRukeKeys = Maps.newHashMap();
NdkCxxPlatformTest.java,compileRukeKeys = Maps.newHashMap();,if (Maps != null ) compileRukeKeys = Maps.newHashMap();
NdkCxxPlatformTest.java,linkRukeKeys = Maps.newHashMap();,if (Maps != null ) linkRukeKeys = Maps.newHashMap();
TestDevice.java,properties = Maps.newHashMap();,if (Maps != null ) properties = Maps.newHashMap();
CompilationDatabaseIntegrationTest.java,List<String> commandArgs = Lists.newArrayList();,if (Lists != null ) List<String> commandArgs = Lists.newArrayList();
SchemeGeneratorTest.java,List<String> actualOrdering = Lists.newArrayList();,if (Lists != null ) List<String> actualOrdering = Lists.newArrayList();
SchemeGeneratorTest.java,List<String> actualBuildOrdering = Lists.newArrayList();,if (Lists != null ) List<String> actualBuildOrdering = Lists.newArrayList();
SchemeGeneratorTest.java,List<String> actualTestOrdering = Lists.newArrayList();,if (Lists != null ) List<String> actualTestOrdering = Lists.newArrayList();
SchemeGeneratorTest.java,List<String> actualOrdering = Lists.newArrayList();,if (Lists != null ) List<String> actualOrdering = Lists.newArrayList();
SchemeGeneratorTest.java,List<String> actualOrdering = Lists.newArrayList();,if (Lists != null ) List<String> actualOrdering = Lists.newArrayList();
MinionModeRunnerIntegrationTest.java,callArguments = Lists.newArrayList();,if (Lists != null ) callArguments = Lists.newArrayList();
HttpArtifactCacheUploadListenerTest.java,events = Lists.newArrayList();,if (Lists != null ) events = Lists.newArrayList();
HttpArtifactCacheUploadListenerTest.java,BuildEvent.Started startedEvent = BuildEvent.started(Lists.newArrayList());,if (BuildEvent != null ) BuildEvent.Started startedEvent = BuildEvent.started(Lists.newArrayList());
CachingBuildEngineTest.java,List<Step> buildSteps = Lists.newArrayList();,if (Lists != null ) List<Step> buildSteps = Lists.newArrayList();
TestDataHelper.java,List<String> parts = Lists.newArrayList();,if (Lists != null ) List<String> parts = Lists.newArrayList();
LinkedBlockingStackTest.java,ArrayList<Integer> list = Lists.newArrayList();,if (Lists != null ) ArrayList<Integer> list = Lists.newArrayList();
ZipOutputStreamTest.java,List<NameAndContent> entries = Lists.newArrayList();,if (Lists != null ) List<NameAndContent> entries = Lists.newArrayList();
FrontendOnlyJavacTask.java,javacElements = javacTask.getElements();,if (javacTask != null ) javacElements = javacTask.getElements();
FrontendOnlyJavacTask.java,types = new TreeBackedTypes(javacTask.getTypes());,if (TreeBackedTypes(javacTask != null ) types = new TreeBackedTypes(javacTask.getTypes());
BuckJavacTaskTest.java,BuckJavacTask javacTask = new BuckJavacTask(testCompiler.getJavacTask());,if (BuckJavacTask(testCompiler != null ) BuckJavacTask javacTask = new BuckJavacTask(testCompiler.getJavacTask());
BuckJavacTaskTest.java,BuckJavacTask javacTask = new BuckJavacTask(testCompiler.getJavacTask());,if (BuckJavacTask(testCompiler != null ) BuckJavacTask javacTask = new BuckJavacTask(testCompiler.getJavacTask());
BuckJavacTaskTest.java,BuckJavacTask javacTask = new BuckJavacTask(testCompiler.getJavacTask());,if (BuckJavacTask(testCompiler != null ) BuckJavacTask javacTask = new BuckJavacTask(testCompiler.getJavacTask());
BuckJavacTaskTest.java,BuckJavacTask javacTask = new BuckJavacTask(testCompiler.getJavacTask());,if (BuckJavacTask(testCompiler != null ) BuckJavacTask javacTask = new BuckJavacTask(testCompiler.getJavacTask());
DefaultJavaLibrary.java,SourcePath sourcePath = rule.getSourcePathToOutput();,if (rule != null ) SourcePath sourcePath = rule.getSourcePathToOutput();
DefaultVersionControlCmdLineInterfaceFactory.java,this.hgCmd = buckConfig.getHgCmd();,if (buckConfig != null ) this.hgCmd = buckConfig.getHgCmd();
VersionControlStatsGenerator.java,String currentRevisionId = vcCmdLineInterface.currentRevisionId();,if (vcCmdLineInterface != null ) String currentRevisionId = vcCmdLineInterface.currentRevisionId();
AutoSparseIntegrationTest.java,repoCmdline = vcFactory.createCmdLineInterface();,if (vcFactory != null ) repoCmdline = vcFactory.createCmdLineInterface();
HgCmdLineInterfaceIntegrationTest.java,VersionControlCmdLineInterface cmdLineInterface = vcFactory.createCmdLineInterface();,if (vcFactory != null ) VersionControlCmdLineInterface cmdLineInterface = vcFactory.createCmdLineInterface();
DaemonicParserState.java,final String fileName = path.getFileName().toString();,if (path != null ) final String fileName = path.getFileName().toString();
TargetNodeParsePipeline.java,Path depCellPath = depTarget.getCellPath();,if (depTarget != null ) Path depCellPath = depTarget.getCellPath();
BuckQueryEnvironment.java,Set<BuildTarget> graphTargets = getTargetsFromNodes(graph.getNodes());,if (getTargetsFromNodes(graph != null ) Set<BuildTarget> graphTargets = getTargetsFromNodes(graph.getNodes());
HaskellDescriptionUtils.java,ruleDeps = rule.getBuildDeps();,if (rule != null ) ruleDeps = rule.getBuildDeps();
LuaBinaryDescription.java,deps = rule.getBuildDeps();,if (rule != null ) deps = rule.getBuildDeps();
PythonUtil.java,deps = rule.getBuildDeps();,if (rule != null ) deps = rule.getBuildDeps();
DistBuildFileHashesTest.java,result = cache.size();,if (cache != null ) result = cache.size();
DefaultCellPathResolverTest.java,FileSystem vfs = Jimfs.newFileSystem(Configuration.unix());,if (Jimfs != null ) FileSystem vfs = Jimfs.newFileSystem(Configuration.unix());
CustomJarOutputStreamTest.java,JarEntry manifestEntry = jar.getNextJarEntry();,if (jar != null ) JarEntry manifestEntry = jar.getNextJarEntry();
CustomJarOutputStreamTest.java,String expectedHash = hashingContents.hash().toString();,if (hashingContents != null ) String expectedHash = hashingContents.hash().toString();
PathTypeCoercer.java,final Path normalizedPath = pathRelativeToProjectRoot.resolve(path).normalize();,if (pathRelativeToProjectRoot != null ) final Path normalizedPath = pathRelativeToProjectRoot.resolve(path).normalize();
DefaultIjModuleFactory.java,Optional<Path> metaInfDirectory = Optional.empty();,if (Optional != null ) Optional<Path> metaInfDirectory = Optional.empty();
DefaultIjModuleFactory.java,metaInfDirectory = context.getMetaInfDirectory();,if (context != null ) metaInfDirectory = context.getMetaInfDirectory();
IjModuleFactory.java,this.excludeShadows = projectConfig.isExcludeArtifactsEnabled();,if (projectConfig != null ) this.excludeShadows = projectConfig.isExcludeArtifactsEnabled();
IjModuleFactory.java,this.autogenerateAndroidFacetSources = projectConfig.isAutogenerateAndroidFacetSourcesEnabled();,if (projectConfig != null ) this.autogenerateAndroidFacetSources = projectConfig.isAutogenerateAndroidFacetSourcesEnabled();
IjModuleFactory.java,Optional<Path> metaInfDirectory = Optional.empty();,if (Optional != null ) Optional<Path> metaInfDirectory = Optional.empty();
IjModuleFactory.java,sdkName = projectConfig.getIntellijModuleSdkName();,if (projectConfig != null ) sdkName = projectConfig.getIntellijModuleSdkName();
IjModuleFactory.java,metaInfDirectory = context.getMetaInfDirectory();,if (context != null ) metaInfDirectory = context.getMetaInfDirectory();
IjModuleFactory.java,sdkName = projectConfig.getAndroidModuleSdkName();,if (projectConfig != null ) sdkName = projectConfig.getAndroidModuleSdkName();
IjModuleFactory.java,sdkName = projectConfig.getJavaModuleSdkName();,if (projectConfig != null ) sdkName = projectConfig.getJavaModuleSdkName();
IjModuleFactory.java,Optional<String> result = Optional.empty();,if (Optional != null ) Optional<String> result = Optional.empty();
IjModuleFactory.java,JavacOptions defaultJavacOptions = projectConfig.getJavaBuckConfig().getDefaultJavacOptions();,if (projectConfig != null ) JavacOptions defaultJavacOptions = projectConfig.getJavaBuckConfig().getDefaultJavacOptions();
IjModuleFactory.java,String defaultSourceLevel = defaultJavacOptions.getSourceLevel();,if (defaultJavacOptions != null ) String defaultSourceLevel = defaultJavacOptions.getSourceLevel();
IjModuleFactory.java,String defaultTargetLevel = defaultJavacOptions.getTargetLevel();,if (defaultJavacOptions != null ) String defaultTargetLevel = defaultJavacOptions.getTargetLevel();
IjModuleFactory.java,JavaLibraryDescription.Arg arg = (JavaLibraryDescription.Arg) targetNode.getConstructorArg();,if (targetNode != null ) JavaLibraryDescription.Arg arg = (JavaLibraryDescription.Arg) targetNode.getConstructorArg();
IjModuleFactory.java,Path parent = path.getParent();,if (path != null ) Path parent = path.getParent();
IjModuleFactory.java,T arg = targetNode.getConstructorArg();,if (targetNode != null ) T arg = targetNode.getConstructorArg();
IjModuleFactory.java,boolean hasAnnotationProcessors = !arg.annotationProcessors.isEmpty();,if (!arg != null ) boolean hasAnnotationProcessors = !arg.annotationProcessors.isEmpty();
IjModuleFactory.java,Path annotationOutputPath = annotationOutput.get();,if (annotationOutput != null ) Path annotationOutputPath = annotationOutput.get();
IjModuleFactory.java,BuildTarget buildTarget = targetNode.getBuildTarget();,if (targetNode != null ) BuildTarget buildTarget = targetNode.getBuildTarget();
IjModuleFactory.java,String buildTargetName = dependencyTarget.toString();,if (dependencyTarget != null ) String buildTargetName = dependencyTarget.toString();
IjModuleFactory.java,IjModuleAndroidFacet.Builder androidFacetBuilder = context.getOrCreateAndroidFacetBuilder();,if (context != null ) IjModuleAndroidFacet.Builder androidFacetBuilder = context.getOrCreateAndroidFacetBuilder();
IjModuleFactory.java,IjModuleAndroidFacet.Builder builder = context.getOrCreateAndroidFacetBuilder();,if (context != null ) IjModuleAndroidFacet.Builder builder = context.getOrCreateAndroidFacetBuilder();
IjModuleFactory.java,IjModuleAndroidFacet.Builder androidFacetBuilder = context.getOrCreateAndroidFacetBuilder();,if (context != null ) IjModuleAndroidFacet.Builder androidFacetBuilder = context.getOrCreateAndroidFacetBuilder();
IjModuleFactory.java,resourceFolders = ImmutableSet.of(resources.get());,if (ImmutableSet != null ) resourceFolders = ImmutableSet.of(resources.get());
IjModuleFactory.java,List<String> excludedResourcePaths = projectConfig.getExcludedResourcePaths();,if (projectConfig != null ) List<String> excludedResourcePaths = projectConfig.getExcludedResourcePaths();
IjModuleFactory.java,resourceFolders = ImmutableSet.of();,if (ImmutableSet != null ) resourceFolders = ImmutableSet.of();
IjModuleFactory.java,Set<String> intellijLibraries = projectConfig.getIntellijSdkTargets();,if (projectConfig != null ) Set<String> intellijLibraries = projectConfig.getIntellijSdkTargets();
RustCompileRule.java,accum = ImmutableList.builder();,if (ImmutableList != null ) accum = ImmutableList.builder();
JavaInMemoryFileManagerTest.java,List<ZipEntry> zipEntries = outputStream.getZipEntries();,if (outputStream != null ) List<ZipEntry> zipEntries = outputStream.getZipEntries();
JavaInMemoryFileManagerTest.java,List<ZipEntry> zipEntries = outputStream.getZipEntries();,if (outputStream != null ) List<ZipEntry> zipEntries = outputStream.getZipEntries();
DeterministicJarManifestWriter.java,String entryName = entryNameAndAttributes.getKey();,if (entryNameAndAttributes != null ) String entryName = entryNameAndAttributes.getKey();
JarArchiveDependencySupplier.java,members = archiveMembers.get();,if (archiveMembers != null ) members = archiveMembers.get();
DistBuildRunCommand.java,BuildJobState jobState = jobStateAndBuildName.getFirst();,if (jobStateAndBuildName != null ) BuildJobState jobState = jobStateAndBuildName.getFirst();
DistBuildRunCommand.java,String buildName = jobStateAndBuildName.getSecond();,if (jobStateAndBuildName != null ) String buildName = jobStateAndBuildName.getSecond();
DistBuildRunCommand.java,int returnCode = distBuildExecutor.buildAndReturnExitCode();,if (distBuildExecutor != null ) int returnCode = distBuildExecutor.buildAndReturnExitCode();
AbstractConsoleEventBusListener.java,long elapsed = clock.currentTimeMillis() - buildStarted.getTimestamp();,if (buildStarted != null ) long elapsed = clock.currentTimeMillis() - buildStarted.getTimestamp();
AbstractConsoleEventBusListener.java,long left = event.getStatus().getETAMillis();,if (event != null ) long left = event.getStatus().getETAMillis();
SuperConsoleEventBusListener.java,this.distBuildStatus = Optional.empty();,if (Optional != null ) this.distBuildStatus = Optional.empty();
SuperConsoleEventBusListener.java,long buildStartedTime = buildStarted.getTimestamp();,if (buildStarted != null ) long buildStartedTime = buildStarted.getTimestamp();
SuperConsoleEventBusListener.java,int threadCount = renderer.getThreadCount();,if (renderer != null ) int threadCount = renderer.getThreadCount();
SuperConsoleEventBusListener.java,distBuildStatus = Optional.of(event.getStatus());,if (Optional != null ) distBuildStatus = Optional.of(event.getStatus());
BuildCommand.java,DistBuildConfig distBuildConfig = new DistBuildConfig(params.getBuckConfig());,if (DistBuildConfig(params != null ) DistBuildConfig distBuildConfig = new DistBuildConfig(params.getBuckConfig());
SuperConsoleEventBusListener.java,List<String> columns = Lists.newArrayList();,if (Lists != null ) List<String> columns = Lists.newArrayList();
SuperConsoleEventBusListener.java,Optional<Integer> port = webServer.get().getPort();,if (webServer != null ) Optional<Integer> port = webServer.get().getPort();
SuperConsoleEventBusListener.java,long buildStartedTime = buildStarted.getTimestamp();,if (buildStarted != null ) long buildStartedTime = buildStarted.getTimestamp();
DistBuildClientExecutor.java,final StampedeId id = job.getStampedeId();,if (job != null ) final StampedeId id = job.getStampedeId();
DistBuildClientExecutor.java,Stopwatch stopwatch = Stopwatch.createStarted();,if (Stopwatch != null ) Stopwatch stopwatch = Stopwatch.createStarted();
BuildSlaveEvent.java,struct.event = iprot.readBinary();,if (iprot != null ) struct.event = iprot.readBinary();
BuildSlaveEvent.java,struct.event = iprot.readBinary();,if (iprot != null ) struct.event = iprot.readBinary();
CxxPythonExtensionDescription.java,"flavors = Sets.difference(flavors, cxxPlatforms.getFlavors());","if (cxxPlatforms != null ) flavors = Sets.difference(flavors, cxxPlatforms.getFlavors());"
CxxPythonExtensionDescription.java,"flavors = Sets.difference(flavors, pythonPlatforms.getFlavors());","if (pythonPlatforms != null ) flavors = Sets.difference(flavors, pythonPlatforms.getFlavors());"
CxxPythonExtensionDescription.java,ImmutableList<String> preprocessorFlags = preprocessorFlagsBuilder.build();,if (preprocessorFlagsBuilder != null ) ImmutableList<String> preprocessorFlags = preprocessorFlagsBuilder.build();
PythonBuckConfig.java,buildConfig = Optional.of(pythonBuildConfigAndVersion.getPythonBuildConfig());,if (Optional != null ) buildConfig = Optional.of(pythonBuildConfigAndVersion.getPythonBuildConfig());
PythonBuckConfig.java,buildConfig = Optional.empty();,if (Optional != null ) buildConfig = Optional.empty();
AndroidBinaryResourcesGraphEnhancer.java,Optional<GenerateRDotJava> generateRDotJava = Optional.empty();,if (Optional != null ) Optional<GenerateRDotJava> generateRDotJava = Optional.empty();
GenerateRDotJava.java,SourcePathResolver pathResolver = buildContext.getSourcePathResolver();,if (buildContext != null ) SourcePathResolver pathResolver = buildContext.getSourcePathResolver();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,List<PBXBuildFile> headers = headersPhase.getFiles();,if (headersPhase != null ) List<PBXBuildFile> headers = headersPhase.getFiles();
AutodepsWriter.java,int numBuildFiles = buildFilesWithDeps.size();,if (buildFilesWithDeps != null ) int numBuildFiles = buildFilesWithDeps.size();
AutodepsWriter.java,HashCode hash = hashingOutputStream.hash();,if (hashingOutputStream != null ) HashCode hash = hashingOutputStream.hash();
JavaDepsFinder.java,String originalKey = entry.getKey().trim();,if (entry != null ) String originalKey = entry.getKey().trim();
JavaDepsFinder.java,javaPackageMapping = ImmutableSortedMap.of();,if (ImmutableSortedMap != null ) javaPackageMapping = ImmutableSortedMap.of();
JavaDepsFinder.java,int numCandidates = candidateProviders.size();,if (candidateProviders != null ) int numCandidates = candidateProviders.size();
JavaDepsFinder.java,int numNewCandidates = newCandidates.size();,if (newCandidates != null ) int numNewCandidates = newCandidates.size();
JavaDepsFinder.java,generatedSymbols = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) generatedSymbols = ImmutableSortedSet.of();
JavaSymbolsRule.java,Symbols symbols = symbolsFinder.extractSymbols();,if (symbolsFinder != null ) Symbols symbols = symbolsFinder.extractSymbols();
AbstractNetworkCache.java,this.doStore = args.getDoStore();,if (args != null ) this.doStore = args.getDoStore();
ArtifactCaches.java,boolean doStore = cacheDescription.getCacheReadMode().isWritable();,if (cacheDescription != null ) boolean doStore = cacheDescription.getCacheReadMode().isWritable();
IjProjectTemplateDataPreparer.java,String moduleRelativePath = moduleLocationBasePath.relativize(path).toString();,if (moduleLocationBasePath != null ) String moduleRelativePath = moduleLocationBasePath.relativize(path).toString();
IjProjectTemplateDataPreparer.java,String path = projectRelativePath.toString();,if (projectRelativePath != null ) String path = projectRelativePath.toString();
IjProject.java,BuildRule rule = buildRuleResolver.getRule(targetNode.getBuildTarget());,if (buildRuleResolver != null ) BuildRule rule = buildRuleResolver.getRule(targetNode.getBuildTarget());
IjProjectWriter.java,boolean generateClasses = !projectConfig.isAutogenerateAndroidFacetSourcesEnabled();,if (!projectConfig != null ) boolean generateClasses = !projectConfig.isAutogenerateAndroidFacetSourcesEnabled();
IjProjectWriter.java,Optional<IjModuleAndroidFacet> androidFacet = module.getAndroidFacet();,if (module != null ) Optional<IjModuleAndroidFacet> androidFacet = module.getAndroidFacet();
IjProjectWriter.java,"Optional<String> packageName = getResourcePackage(module, androidFacet.get());","if (androidFacet != null ) Optional<String> packageName = getResourcePackage(module, androidFacet.get());"
IjProjectWriter.java,Optional<String> packageName = androidFacet.getPackageName();,if (androidFacet != null ) Optional<String> packageName = androidFacet.getPackageName();
Jsr199Javac.java,isSuccess = compilationTask.call();,if (compilationTask != null ) isSuccess = compilationTask.call();
AndroidLibraryDescription.java,ImmutableSortedSet<BuildRule> declaredDeps = declaredDepsBuilder.build();,if (declaredDepsBuilder != null ) ImmutableSortedSet<BuildRule> declaredDeps = declaredDepsBuilder.build();
ExopackageInstaller.java,List<Path> resourcesPaths = info.getResourcesPaths();,if (info != null ) List<Path> resourcesPaths = info.getResourcesPaths();
ExopackageInstaller.java,Path resourcesPath = info.getResourcesPath();,if (info != null ) Path resourcesPath = info.getResourcesPath();
ExopackageInstaller.java,List<Path> assetsPaths = info.getAssetsPaths();,if (info != null ) List<Path> assetsPaths = info.getAssetsPaths();
ExopackageInstaller.java,List<String> assetsHashes = assetsHashesBuilder.build();,if (assetsHashesBuilder != null ) List<String> assetsHashes = assetsHashesBuilder.build();
ExopackageInstaller.java,Iterator<Path> assetsPathsIter = assetsPaths.iterator();,if (assetsPaths != null ) Iterator<Path> assetsPathsIter = assetsPaths.iterator();
ExopackageInstallerIntegrationTest.java,Iterator<String> resourcesContents = currentBuildState.resourcesContents.iterator();,if (currentBuildState != null ) Iterator<String> resourcesContents = currentBuildState.resourcesContents.iterator();
ExopackageInstallerIntegrationTest.java,String content = resourcesContents.next();,if (resourcesContents != null ) String content = resourcesContents.next();
ExopackageInstallerIntegrationTest.java,content = resourcesContents.next();,if (resourcesContents != null ) content = resourcesContents.next();
AndroidBinaryResourcesGraphEnhancer.java,PackageStringAssets stringAssets = getPackageStringAssets().get();,if (getPackageStringAssets() != null ) PackageStringAssets stringAssets = getPackageStringAssets().get();
AbstractAndroidGraphEnhancementResult.java,PackageStringAssets stringAssets = getPackageStringAssets().get();,if (getPackageStringAssets() != null ) PackageStringAssets stringAssets = getPackageStringAssets().get();
AndroidBinaryGraphEnhancer.java,AaptOutputInfo aaptOutputInfo = resourcesEnhancementResult.getAaptOutputInfo();,if (resourcesEnhancementResult != null ) AaptOutputInfo aaptOutputInfo = resourcesEnhancementResult.getAaptOutputInfo();
AndroidBinaryGraphEnhancer.java,MergeAssets mergeAssets = resourcesEnhancementResult.getMergeAssets();,if (resourcesEnhancementResult != null ) MergeAssets mergeAssets = resourcesEnhancementResult.getMergeAssets();
DistBuildRunCommand.java,int returnCode = distBuildExecutor.buildAndReturnExitCode(params.getCoercedTypeCache());,if (distBuildExecutor != null ) int returnCode = distBuildExecutor.buildAndReturnExitCode(params.getCoercedTypeCache());
JavacStep.java,String invoker = invokingRule.toString();,if (invokingRule != null ) String invoker = invokingRule.toString();
DefaultSuggestBuildRulesTest.java,BuildRule libraryTwo = resolver.requireRule(libraryTwoNode.getBuildTarget());,if (resolver != null ) BuildRule libraryTwo = resolver.requireRule(libraryTwoNode.getBuildTarget());
DefaultSuggestBuildRulesTest.java,BuildRule parent = resolver.requireRule(parentNode.getBuildTarget());,if (resolver != null ) BuildRule parent = resolver.requireRule(parentNode.getBuildTarget());
DefaultSuggestBuildRulesTest.java,BuildRule grandparent = resolver.requireRule(grandparentNode.getBuildTarget());,if (resolver != null ) BuildRule grandparent = resolver.requireRule(grandparentNode.getBuildTarget());
DefaultSuggestBuildRulesTest.java,BuildRule libraryTwo = resolver.requireRule(libraryTwoNode.getBuildTarget());,if (resolver != null ) BuildRule libraryTwo = resolver.requireRule(libraryTwoNode.getBuildTarget());
DefaultSuggestBuildRulesTest.java,BuildRule parent = resolver.requireRule(parentNode.getBuildTarget());,if (resolver != null ) BuildRule parent = resolver.requireRule(parentNode.getBuildTarget());
DefaultSuggestBuildRulesTest.java,BuildRule grandparent = resolver.requireRule(grandparentNode.getBuildTarget());,if (resolver != null ) BuildRule grandparent = resolver.requireRule(grandparentNode.getBuildTarget());
DefaultSuggestBuildRulesTest.java,String fullyQualified = entry.getValue();,if (entry != null ) String fullyQualified = entry.getValue();
DefaultSuggestBuildRulesTest.java,builder = builder.addDep(dep.getBuildTarget());,if (builder != null ) builder = builder.addDep(dep.getBuildTarget());
Main.java,androidPlatformTarget = androidPlatformTargetOptional.get();,if (androidPlatformTargetOptional != null ) androidPlatformTarget = androidPlatformTargetOptional.get();
AndroidPlatformTargetTest.java,AndroidPlatformTarget androidPlatformTarget = androidPlatformTargetOption.get();,if (androidPlatformTargetOption != null ) AndroidPlatformTarget androidPlatformTarget = androidPlatformTargetOption.get();
AndroidPlatformTargetTest.java,AndroidPlatformTarget androidPlatformTarget = androidPlatformTargetOption.get();,if (androidPlatformTargetOption != null ) AndroidPlatformTarget androidPlatformTarget = androidPlatformTargetOption.get();
AndroidPlatformTargetTest.java,androidPlatformTarget = androidPlatformTargetOption.get();,if (androidPlatformTargetOption != null ) androidPlatformTarget = androidPlatformTargetOption.get();
IjModuleGraph.java,Path basePath = targetNode.getBuildTarget().getBasePath();,if (targetNode != null ) Path basePath = targetNode.getBuildTarget().getBasePath();
IjModuleGraph.java,int maxDepth = basePath.getNameCount();,if (basePath != null ) int maxDepth = basePath.getNameCount();
IjModuleGraph.java,Path blockedPath = node.getBuildTarget().getBasePath();,if (node != null ) Path blockedPath = node.getBuildTarget().getBasePath();
IjModuleGraph.java,String defaultSourceLevel = defaultJavacOptions.getSourceLevel();,if (defaultJavacOptions != null ) String defaultSourceLevel = defaultJavacOptions.getSourceLevel();
IjModuleGraph.java,String defaultTargetLevel = defaultJavacOptions.getTargetLevel();,if (defaultJavacOptions != null ) String defaultTargetLevel = defaultJavacOptions.getTargetLevel();
IjModuleGraph.java,JavaLibraryDescription.Arg arg = (JavaLibraryDescription.Arg) node.getConstructorArg();,if (node != null ) JavaLibraryDescription.Arg arg = (JavaLibraryDescription.Arg) node.getConstructorArg();
IjModuleGraph.java,depsBuilder = ImmutableMap.builder();,if (ImmutableMap != null ) depsBuilder = ImmutableMap.builder();
IjModuleGraph.java,BuildTarget depBuildTarget = entry.getKey();,if (entry != null ) BuildTarget depBuildTarget = entry.getKey();
IjModuleGraph.java,DependencyType depType = entry.getValue();,if (entry != null ) DependencyType depType = entry.getValue();
IjModuleGraph.java,depElements = ImmutableSet.of(library.get());,if (ImmutableSet != null ) depElements = ImmutableSet.of(library.get());
IjModuleGraph.java,depElements = ImmutableSet.of();,if (ImmutableSet != null ) depElements = ImmutableSet.of();
IjModuleGraph.java,blockedPathNode = blockedPathNodeOptional.get();,if (blockedPathNodeOptional != null ) blockedPathNode = blockedPathNodeOptional.get();
IjModuleGraphTest.java,IjModuleGraph.BlockedPathNode dummyAggregationStops = new IjModuleGraph.BlockedPathNode();,if (IjModuleGraph != null ) IjModuleGraph.BlockedPathNode dummyAggregationStops = new IjModuleGraph.BlockedPathNode();
IjModuleGraphTest.java,IjModuleGraph.BlockedPathNode dummyAggregationStops = new IjModuleGraph.BlockedPathNode();,if (IjModuleGraph != null ) IjModuleGraph.BlockedPathNode dummyAggregationStops = new IjModuleGraph.BlockedPathNode();
IjModuleGraphTest.java,IjModuleGraph.BlockedPathNode rootNode = new IjModuleGraph.BlockedPathNode();,if (IjModuleGraph != null ) IjModuleGraph.BlockedPathNode rootNode = new IjModuleGraph.BlockedPathNode();
IjModuleGraphTest.java,IjModuleGraph.BlockedPathNode rootNode = new IjModuleGraph.BlockedPathNode();,if (IjModuleGraph != null ) IjModuleGraph.BlockedPathNode rootNode = new IjModuleGraph.BlockedPathNode();
IjModuleGraphTest.java,IjModuleGraph.BlockedPathNode rootNode = new IjModuleGraph.BlockedPathNode();,if (IjModuleGraph != null ) IjModuleGraph.BlockedPathNode rootNode = new IjModuleGraph.BlockedPathNode();
IjModuleGraphTest.java,IjModuleGraph.BlockedPathNode rootNode = new IjModuleGraph.BlockedPathNode();,if (IjModuleGraph != null ) IjModuleGraph.BlockedPathNode rootNode = new IjModuleGraph.BlockedPathNode();
IjModuleGraphTest.java,IjModuleGraph.BlockedPathNode rootNode = new IjModuleGraph.BlockedPathNode();,if (IjModuleGraph != null ) IjModuleGraph.BlockedPathNode rootNode = new IjModuleGraph.BlockedPathNode();
IjModuleGraphTest.java,IjModuleGraph.BlockedPathNode rootNode = new IjModuleGraph.BlockedPathNode();,if (IjModuleGraph != null ) IjModuleGraph.BlockedPathNode rootNode = new IjModuleGraph.BlockedPathNode();
IjProjectWriter.java,Optional<IjModuleAndroidFacet> facet = dep.getAndroidFacet();,if (dep != null ) Optional<IjModuleAndroidFacet> facet = dep.getAndroidFacet();
IjProjectWriter.java,Optional<String> packageName = facet.get().getPackageName();,if (facet != null ) Optional<String> packageName = facet.get().getPackageName();
Unzip.java,Enumeration<ZipArchiveEntry> entries = zip.getEntries();,if (zip != null ) Enumeration<ZipArchiveEntry> entries = zip.getEntries();
Unzip.java,ZipArchiveEntry entry = entries.nextElement();,if (entries != null ) ZipArchiveEntry entry = entries.nextElement();
Unzip.java,Enumeration<ZipArchiveEntry> entries = zip.getEntries();,if (zip != null ) Enumeration<ZipArchiveEntry> entries = zip.getEntries();
Unzip.java,ZipArchiveEntry entry = entries.nextElement();,if (entries != null ) ZipArchiveEntry entry = entries.nextElement();
Unzip.java,String fileName = entry.getName();,if (entry != null ) String fileName = entry.getName();
MergeAndroidResourcesStep.java,Path rDotTxtPath = pathResolver.getRelativePath(res.getPathToTextSymbolsFile());,if (pathResolver != null ) Path rDotTxtPath = pathResolver.getRelativePath(res.getPathToTextSymbolsFile());
AndroidBuildConfigDescription.java,BuildTarget configTarget = CalculateAbi.getLibraryTarget(params.getBuildTarget());,if (CalculateAbi != null ) BuildTarget configTarget = CalculateAbi.getLibraryTarget(params.getBuildTarget());
AndroidLibraryDescription.java,BuildTarget libraryTarget = CalculateAbi.getLibraryTarget(params.getBuildTarget());,if (CalculateAbi != null ) BuildTarget libraryTarget = CalculateAbi.getLibraryTarget(params.getBuildTarget());
RobolectricTestDescription.java,BuildTarget testTarget = CalculateAbi.getLibraryTarget(params.getBuildTarget());,if (CalculateAbi != null ) BuildTarget testTarget = CalculateAbi.getLibraryTarget(params.getBuildTarget());
ProjectCommand.java,String cell = cellNames.get(target.getCellPath());,if (cellNames != null ) String cell = cellNames.get(target.getCellPath());
ProjectCommand.java,ImmutableSet<UnflavoredBuildTarget> passedInUnflavoredTargetsSet = builder.build();,if (builder != null ) ImmutableSet<UnflavoredBuildTarget> passedInUnflavoredTargetsSet = builder.build();
GenStringSourceMapStep.java,ObjectMapper mapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper mapper = ObjectMappers.newDefaultInstance();
AuditRulesCommand.java,ObjectMapper mapper = params.getObjectMapper();,if (params != null ) ObjectMapper mapper = params.getObjectMapper();
AuditRulesCommand.java,JsonFactory factory = mapper.getFactory();,if (mapper != null ) JsonFactory factory = mapper.getFactory();
DistBuildStatusCommand.java,ObjectMapper objectMapper = params.getObjectMapper().copy();,if (params != null ) ObjectMapper objectMapper = params.getObjectMapper().copy();
DoctorCommand.java,"BuildLogHelper buildLogHelper = new BuildLogHelper(filesystem, params.getObjectMapper());","if (params != null ) BuildLogHelper buildLogHelper = new BuildLogHelper(filesystem, params.getObjectMapper());"
Main.java,this.objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) this.objectMapper = ObjectMappers.newDefaultInstance();
TargetsCommand.java,ObjectMapper mapper = params.getObjectMapper();,if (params != null ) ObjectMapper mapper = params.getObjectMapper();
BuildReport.java,ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();
CxxCompilationDatabase.java,ObjectMapper mapper = context.getObjectMapper();,if (context != null ) ObjectMapper mapper = context.getObjectMapper();
Project.java,ObjectWriter objectWriter = objectMapper.writerWithDefaultPrettyPrinter();,if (objectMapper != null ) ObjectWriter objectWriter = objectMapper.writerWithDefaultPrettyPrinter();
ArtifactConfig.java,ObjectMapper mapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper mapper = ObjectMappers.newDefaultInstance();
PythonTest.java,ObjectMapper mapper = executionContext.getObjectMapper();,if (executionContext != null ) ObjectMapper mapper = executionContext.getObjectMapper();
CachingBuildEngine.java,this.objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) this.objectMapper = ObjectMappers.newDefaultInstance();
RunShTestAndRecordResultStep.java,ObjectMapper mapper = context.getObjectMapper();,if (context != null ) ObjectMapper mapper = context.getObjectMapper();
ShTest.java,ObjectMapper mapper = context.getObjectMapper();,if (context != null ) ObjectMapper mapper = context.getObjectMapper();
AndroidBinaryIntegrationTest.java,ObjectMapper mapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper mapper = ObjectMappers.newDefaultInstance();
DexProducedFromJavaLibraryThatContainsClassFilesTest.java,ObjectMapper mapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper mapper = ObjectMappers.newDefaultInstance();
AuditClasspathCommandTest.java,ObjectMapper mapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper mapper = ObjectMappers.newDefaultInstance();
AuditClasspathCommandTest.java,ObjectMapper mapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper mapper = ObjectMappers.newDefaultInstance();
AuditInputCommandTest.java,ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();
AuditInputCommandTest.java,ObjectMapper mapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper mapper = ObjectMappers.newDefaultInstance();
AuditInputCommandTest.java,ObjectMapper mapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper mapper = ObjectMappers.newDefaultInstance();
BuildCommandTest.java,ObjectMapper mapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper mapper = ObjectMappers.newDefaultInstance();
CleanCommandTest.java,ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();
CommandRunnerParamsForTesting.java,private ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) private ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();
QueryCommandTest.java,ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();
TargetsCommandIntegrationTest.java,ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();
TargetsCommandIntegrationTest.java,ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();
TargetsCommandIntegrationTest.java,ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();
TargetsCommandIntegrationTest.java,ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();
TargetsCommandIntegrationTest.java,ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();
TargetsCommandTest.java,objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) objectMapper = ObjectMappers.newDefaultInstance();
DistBuildStateTest.java,ObjectMapper objectMapper = ObjectMappers.newDefaultInstance(); // NOPMD confused by lambda,if (lambda != null ) ObjectMapper objectMapper = ObjectMappers.newDefaultInstance(); // NOPMD confused by lambda
DoctorCommandIntegrationTest.java,objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) objectMapper = ObjectMappers.newDefaultInstance();
DoctorReportHelperTest.java,objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) objectMapper = ObjectMappers.newDefaultInstance();
ChromeTraceBuildListenerTest.java,ObjectMapper mapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper mapper = ObjectMappers.newDefaultInstance();
DefaultJavaLibraryIntegrationTest.java,ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();
DefaultJavaLibraryIntegrationTest.java,ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();
JavacExecutionContextSerializerTest.java,ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();
JavaSymbolsRuleTest.java,ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();
SymbolsTest.java,ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();
LuaBinaryIntegrationTest.java,ObjectMapper mapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper mapper = ObjectMappers.newDefaultInstance();
ConnectionTest.java,ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();
ConnectionTest.java,ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();
ConnectionTest.java,ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();
MessageSerializerTest.java,MessageSerializer serializer = new MessageSerializer(ObjectMappers.newDefaultInstance());,if (MessageSerializer(ObjectMappers != null ) MessageSerializer serializer = new MessageSerializer(ObjectMappers.newDefaultInstance());
MessageSerializerTest.java,MessageSerializer serializer = new MessageSerializer(ObjectMappers.newDefaultInstance());,if (MessageSerializer(ObjectMappers != null ) MessageSerializer serializer = new MessageSerializer(ObjectMappers.newDefaultInstance());
MessageSerializerTest.java,MessageSerializer serializer = new MessageSerializer(ObjectMappers.newDefaultInstance());,if (MessageSerializer(ObjectMappers != null ) MessageSerializer serializer = new MessageSerializer(ObjectMappers.newDefaultInstance());
MessageSerializerTest.java,MessageSerializer serializer = new MessageSerializer(ObjectMappers.newDefaultInstance());,if (MessageSerializer(ObjectMappers != null ) MessageSerializer serializer = new MessageSerializer(ObjectMappers.newDefaultInstance());
MessageSerializerTest.java,MessageSerializer serializer = new MessageSerializer(ObjectMappers.newDefaultInstance());,if (MessageSerializer(ObjectMappers != null ) MessageSerializer serializer = new MessageSerializer(ObjectMappers.newDefaultInstance());
DefectReporterTest.java,ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();
InteractiveReportIntegrationTest.java,ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();
RageCommandIntegrationTest.java,objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) objectMapper = ObjectMappers.newDefaultInstance();
RageCommandIntegrationTest.java,ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();
RageCommandIntegrationTest.java,ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();
BuildInfoRecorderTest.java,ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();
CachingBuildEngineFactory.java,private ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) private ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();
ExternalTestRunnerTestSpecTest.java,ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();
JsonMatcher.java,JsonFactory factory = MAPPER.getFactory();,if (MAPPER != null ) JsonFactory factory = MAPPER.getFactory();
OfflineScribeLoggerTest.java,final ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) final ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();
OfflineScribeLoggerTest.java,ScribeData data = it.next();,if (it != null ) ScribeData data = it.next();
OfflineScribeLoggerTest.java,final ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) final ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();
InstallCommand.java,AppleConfig appleConfig = new AppleConfig(params.getBuckConfig());,if (AppleConfig(params != null ) AppleConfig appleConfig = new AppleConfig(params.getBuckConfig());
InstallCommand.java,AppleConfig appleConfig = new AppleConfig(params.getBuckConfig());,if (AppleConfig(params != null ) AppleConfig appleConfig = new AppleConfig(params.getBuckConfig());
InstallCommand.java,AppleConfig appleConfig = new AppleConfig(params.getBuckConfig());,if (AppleConfig(params != null ) AppleConfig appleConfig = new AppleConfig(params.getBuckConfig());
ProjectCommand.java,AppleConfig appleConfig = new AppleConfig(params.getBuckConfig());,if (AppleConfig(params != null ) AppleConfig appleConfig = new AppleConfig(params.getBuckConfig());
DefaultRuleKeyFactory.java,Builder<HashCode> subKeyBuilder = new Builder<>(RuleKeyBuilder.createDefaultHasher());,if (Builder<>(RuleKeyBuilder != null ) Builder<HashCode> subKeyBuilder = new Builder<>(RuleKeyBuilder.createDefaultHasher());
DefaultClassUsageFileReader.java,Optional<BuildTarget> depAbiJar = depWithJavaAbi.getAbiJar();,if (depWithJavaAbi != null ) Optional<BuildTarget> depAbiJar = depWithJavaAbi.getAbiJar();
DefaultClassUsageFileReader.java,ImmutableList<String> classAbsolutePaths = jarUsedClassesEntry.getValue();,if (jarUsedClassesEntry != null ) ImmutableList<String> classAbsolutePaths = jarUsedClassesEntry.getValue();
JavaLibraryRules.java,BuildRule abiJarRule = resolver.requireRule(abiJarTarget.get());,if (resolver != null ) BuildRule abiJarRule = resolver.requireRule(abiJarTarget.get());
ProjectIntegrationTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
BuildCommand.java,ProjectFilesystem filesystem = params.getCell().getFilesystem();,if (params != null ) ProjectFilesystem filesystem = params.getCell().getFilesystem();
BuildCommand.java,FileHashCache fileHashCache = params.getFileHashCache();,if (params != null ) FileHashCache fileHashCache = params.getFileHashCache();
GroovyLibraryDescription.java,BuildTarget libraryTarget = CalculateAbi.getLibraryTarget(params.getBuildTarget());,if (CalculateAbi != null ) BuildTarget libraryTarget = CalculateAbi.getLibraryTarget(params.getBuildTarget());
GroovyTestDescription.java,BuildTarget testTarget = CalculateAbi.getLibraryTarget(params.getBuildTarget());,if (CalculateAbi != null ) BuildTarget testTarget = CalculateAbi.getLibraryTarget(params.getBuildTarget());
JavaTestDescription.java,BuildTarget testTarget = CalculateAbi.getLibraryTarget(params.getBuildTarget());,if (CalculateAbi != null ) BuildTarget testTarget = CalculateAbi.getLibraryTarget(params.getBuildTarget());
KotlinLibraryDescription.java,BuildTarget libraryTarget = CalculateAbi.getLibraryTarget(params.getBuildTarget());,if (CalculateAbi != null ) BuildTarget libraryTarget = CalculateAbi.getLibraryTarget(params.getBuildTarget());
KotlinTestDescription.java,BuildTarget testTarget = CalculateAbi.getLibraryTarget(params.getBuildTarget());,if (CalculateAbi != null ) BuildTarget testTarget = CalculateAbi.getLibraryTarget(params.getBuildTarget());
ScalaLibraryDescription.java,BuildTarget libraryTarget = CalculateAbi.getLibraryTarget(rawParams.getBuildTarget());,if (CalculateAbi != null ) BuildTarget libraryTarget = CalculateAbi.getLibraryTarget(rawParams.getBuildTarget());
ScalaTestDescription.java,BuildTarget testTarget = CalculateAbi.getLibraryTarget(rawParams.getBuildTarget());,if (CalculateAbi != null ) BuildTarget testTarget = CalculateAbi.getLibraryTarget(rawParams.getBuildTarget());
CxxTestDescription.java,Optional<CxxPlatform> platform = cxxPlatforms.getValue(params.getBuildTarget());,if (cxxPlatforms != null ) Optional<CxxPlatform> platform = cxxPlatforms.getValue(params.getBuildTarget());
ScalaLibraryDescription.java,final BuildRule scalaLibrary = resolver.getRule(scalaBuckConfig.getScalaLibraryTarget());,if (resolver != null ) final BuildRule scalaLibrary = resolver.getRule(scalaBuckConfig.getScalaLibraryTarget());
ScalaTestDescription.java,final BuildRule scalaLibrary = resolver.getRule(config.getScalaLibraryTarget());,if (resolver != null ) final BuildRule scalaLibrary = resolver.getRule(config.getScalaLibraryTarget());
DefaultJavaLibrary.java,this.deps = params.getBuildDeps();,if (params != null ) this.deps = params.getBuildDeps();
AppleCxxPlatformsTest.java,AppleCxxPlatform appleCxxPlatform = buildAppleCxxPlatform(temp.getRoot());,if (buildAppleCxxPlatform(temp != null ) AppleCxxPlatform appleCxxPlatform = buildAppleCxxPlatform(temp.getRoot());
AppleCxxPlatformsTest.java,Path tempRoot = temp.getRoot();,if (temp != null ) Path tempRoot = temp.getRoot();
AppleCxxPlatformsTest.java,Path tempRoot = temp.getRoot();,if (temp != null ) Path tempRoot = temp.getRoot();
AppleCxxPlatformsTest.java,Path tempRoot = temp.getRoot();,if (temp != null ) Path tempRoot = temp.getRoot();
KnownBuildRuleTypes.java,Optional<Path> appleDeveloperDirectory = appleDeveloperDirectorySupplier.get();,if (appleDeveloperDirectorySupplier != null ) Optional<Path> appleDeveloperDirectory = appleDeveloperDirectorySupplier.get();
KnownBuildRuleTypes.java,Optional<String> swiftVersion = swiftBuckConfig.getVersion();,if (swiftBuckConfig != null ) Optional<String> swiftVersion = swiftBuckConfig.getVersion();
KnownBuildRuleTypes.java,Optional<AppleToolchain> swiftToolChain = Optional.empty();,if (Optional != null ) Optional<AppleToolchain> swiftToolChain = Optional.empty();
KnownBuildRuleTypes.java,AppleSdk sdk = entry.getKey();,if (entry != null ) AppleSdk sdk = entry.getKey();
KnownBuildRuleTypes.java,AppleSdkPaths appleSdkPaths = entry.getValue();,if (entry != null ) AppleSdkPaths appleSdkPaths = entry.getValue();
ChooseTargetContributor.java,String target = entry.getKey();,if (entry != null ) String target = entry.getKey();
ChooseTargetContributor.java,Set<String> alias = entry.getValue();,if (entry != null ) Set<String> alias = entry.getValue();
ArtifactCaches.java,boolean doStore = cacheDescription.getCacheReadMode().isDoStore();,if (cacheDescription != null ) boolean doStore = cacheDescription.getCacheReadMode().isDoStore();
ArtifactCacheBuckConfigTest.java,ImmutableSet<HttpCacheEntry> httpCaches = config.getHttpCaches();,if (config != null ) ImmutableSet<HttpCacheEntry> httpCaches = config.getHttpCaches();
ArtifactCacheBuckConfigTest.java,httpCaches = config.getHttpCaches();,if (config != null ) httpCaches = config.getHttpCaches();
ArtifactCacheBuckConfigTest.java,ImmutableSet<HttpCacheEntry> httpCaches = config.getHttpCaches();,if (config != null ) ImmutableSet<HttpCacheEntry> httpCaches = config.getHttpCaches();
ArtifactCacheBuckConfigTest.java,ImmutableSet<HttpCacheEntry> httpCaches = config.getHttpCaches();,if (config != null ) ImmutableSet<HttpCacheEntry> httpCaches = config.getHttpCaches();
ArtifactCacheBuckConfigTest.java,ImmutableList<DirCacheEntry> entries = ImmutableList.copyOf(config.getDirCacheEntries());,if (ImmutableList != null ) ImmutableList<DirCacheEntry> entries = ImmutableList.copyOf(config.getDirCacheEntries());
DistBuildRunCommand.java,int returnCode = distBuildExecutor.buildAndReturnExitCode();,if (distBuildExecutor != null ) int returnCode = distBuildExecutor.buildAndReturnExitCode();
ConstructorArgMarshaller.java,this.coercedTypes = CacheBuilder.newBuilder().build();,if (CacheBuilder != null ) this.coercedTypes = CacheBuilder.newBuilder().build();
Unzip.java,Set<Path> pathsToClean = Sets.newHashSet();,if (Sets != null ) Set<Path> pathsToClean = Sets.newHashSet();
Unzip.java,Set<Path> pathsCreated = Sets.newHashSet();,if (Sets != null ) Set<Path> pathsCreated = Sets.newHashSet();
AndroidLibraryGraphEnhancerTest.java,JavacOptions javacOptions = dummyRDotJava.get().getJavacOptions();,if (dummyRDotJava != null ) JavacOptions javacOptions = dummyRDotJava.get().getJavacOptions();
WorkspaceAndProjectGenerator.java,this.focusModules = Optional.of(builder.build());,if (Optional != null ) this.focusModules = Optional.of(builder.build());
WorkspaceAndProjectGenerator.java,this.focusModules = Optional.empty();,if (Optional != null ) this.focusModules = Optional.empty();
TargetGraphAndTargets.java,nodes = projectGraph.getSubgraph(projectRoots).getNodes();,if (projectGraph != null ) nodes = projectGraph.getSubgraph(projectRoots).getNodes();
QueryUtils.java,BuildTarget target = params.getBuildTarget();,if (params != null ) BuildTarget target = params.getBuildTarget();
AaptPackageResourcesTest.java,assetsDirectories = ImmutableSet.of();,if (ImmutableSet != null ) assetsDirectories = ImmutableSet.of();
AaptPackageResourcesTest.java,extraDeps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) extraDeps = ImmutableSortedSet.of();
AndroidBinaryGraphEnhancer.java,aaptOutputInfo = aaptPackageResources.getAaptOutputInfo();,if (aaptPackageResources != null ) aaptOutputInfo = aaptPackageResources.getAaptOutputInfo();
AndroidBinaryGraphEnhancer.java,Optional<PackageStringAssets> packageStringAssets = Optional.empty();,if (Optional != null ) Optional<PackageStringAssets> packageStringAssets = Optional.empty();
JsBundleDescription.java,extraFlavors = bundleTarget.getFlavors();,if (bundleTarget != null ) extraFlavors = bundleTarget.getFlavors();
SmartDexingStep.java,List<Step> steps = Lists.newArrayList();,if (Lists != null ) List<Step> steps = Lists.newArrayList();
SmartDexingStep.java,List<Step> steps = Lists.newArrayList();,if (Lists != null ) List<Step> steps = Lists.newArrayList();
TargetsCommand.java,Iterable<BuildTarget> dependentTargets = node.getBuildDeps();,if (node != null ) Iterable<BuildTarget> dependentTargets = node.getBuildDeps();
CxxTestDescriptionTest.java,Iterable<BuildTarget> implicit = builder.findImplicitDeps();,if (builder != null ) Iterable<BuildTarget> implicit = builder.findImplicitDeps();
PrebuiltCxxLibraryDescriptionTest.java,Iterable<BuildTarget> implicit = builder.findImplicitDeps();,if (builder != null ) Iterable<BuildTarget> implicit = builder.findImplicitDeps();
DBinaryDescriptionTest.java,ImmutableList<BuildTarget> implicitDeps = ImmutableList.copyOf(builder.findImplicitDeps());,if (ImmutableList != null ) ImmutableList<BuildTarget> implicitDeps = ImmutableList.copyOf(builder.findImplicitDeps());
DTestDescriptionTest.java,ImmutableList<BuildTarget> implicitDeps = ImmutableList.copyOf(builder.findImplicitDeps());,if (ImmutableList != null ) ImmutableList<BuildTarget> implicitDeps = ImmutableList.copyOf(builder.findImplicitDeps());
JavaBuildGraphProcessor.java,BuckEventBus eventBus = params.getBuckEventBus();,if (params != null ) BuckEventBus eventBus = params.getBuckEventBus();
NdkBuildStep.java,Optional<Path> ndkRoot = context.getAndroidPlatformTarget().getNdkDirectory();,if (context != null ) Optional<Path> ndkRoot = context.getAndroidPlatformTarget().getNdkDirectory();
ReDexStep.java,AndroidPlatformTarget platformTarget = context.getAndroidPlatformTarget();,if (context != null ) AndroidPlatformTarget platformTarget = context.getAndroidPlatformTarget();
ReDexStep.java,Optional<Path> sdkDirectory = platformTarget.getSdkDirectory();,if (platformTarget != null ) Optional<Path> sdkDirectory = platformTarget.getSdkDirectory();
Main.java,Optional<Path> androidSdkDirOption = androidDirectoryResolver.getSdkOrAbsent();,if (androidDirectoryResolver != null ) Optional<Path> androidSdkDirOption = androidDirectoryResolver.getSdkOrAbsent();
SymlinkTreeTest.java,ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();,if (FakeProjectFilesystem != null ) ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();
AndroidBinaryGraphEnhancer.java,aaptOutputInfo = aaptPackageResources.getAaptOutputInfo();,if (aaptPackageResources != null ) aaptOutputInfo = aaptPackageResources.getAaptOutputInfo();
TrimUberRDotJava.java,final Path sourceDir = aaptPackageResources.getPathToGeneratedRDotJavaSrcFiles();,if (aaptPackageResources != null ) final Path sourceDir = aaptPackageResources.getPathToGeneratedRDotJavaSrcFiles();
AbstractZipScrubberStep.java,ByteBuffer result = map.duplicate();,if (map != null ) ByteBuffer result = map.duplicate();
AbstractZipScrubberStep.java,result = result.slice();,if (result != null ) result = result.slice();
AbstractZipScrubberStep.java,int id = data.getShort();,if (data != null ) int id = data.getShort();
AbstractZipScrubberStep.java,int size = data.getShort();,if (data != null ) int size = data.getShort();
AndroidBinaryResourcesGraphEnhancer.java,Optional<PackageStringAssets> packageStringAssets = Optional.empty();,if (Optional != null ) Optional<PackageStringAssets> packageStringAssets = Optional.empty();
ExopackageInstaller.java,Closer closer = Closer.create();,if (Closer != null ) Closer closer = Closer.create();
ExopackageInstaller.java,outToDevice = clientSocket.getOutputStream();,if (clientSocket != null ) outToDevice = clientSocket.getOutputStream();
ExopackageInstaller.java,chunkBuilder = ImmutableList.builder();,if (ImmutableList != null ) chunkBuilder = ImmutableList.builder();
ExopackageInstaller.java,chunkSize += arg.length();,if (arg != null ) chunkSize += arg.length();
ExopackageInstaller.java,ImmutableList<String> tail = chunkBuilder.build();,if (chunkBuilder != null ) ImmutableList<String> tail = chunkBuilder.build();
HaskellDescriptionUtils.java,ruleDeps = rule.getDeps();,if (rule != null ) ruleDeps = rule.getDeps();
Project.java,targetsToWalk = rule.getDeps();,if (rule != null ) targetsToWalk = rule.getDeps();
Project.java,depsToVisit = dep.getDeps();,if (dep != null ) depsToVisit = dep.getDeps();
Project.java,depsToVisit = dep.getDeps();,if (dep != null ) depsToVisit = dep.getDeps();
LuaBinaryDescription.java,deps = rule.getDeps();,if (rule != null ) deps = rule.getDeps();
LuaBinaryDescription.java,deps = rule.getDeps();,if (rule != null ) deps = rule.getDeps();
PythonUtil.java,deps = rule.getDeps();,if (rule != null ) deps = rule.getDeps();
AbstractBuildRule.java,this.deps = buildRuleParams.getTotalBuildDeps();,if (buildRuleParams != null ) this.deps = buildRuleParams.getTotalBuildDeps();
RustCompileUtils.java,deps = rule.getDeps();,if (rule != null ) deps = rule.getDeps();
RustCompileUtils.java,deps = rule.getDeps();,if (rule != null ) deps = rule.getDeps();
AndroidResourceDescriptionTest.java,ImmutableList<BuildRule> deps = resource.getDeps().asList();,if (resource != null ) ImmutableList<BuildRule> deps = resource.getDeps().asList();
AppleTestDescriptionTest.java,BuildRule binary = strip.getDeps().first();,if (strip != null ) BuildRule binary = strip.getDeps().first();
JavaTestDescriptionTest.java,ImmutableSortedSet<BuildRule> deps = javaTest.getCompiledTestsLibrary().getDeps();,if (javaTest != null ) ImmutableSortedSet<BuildRule> deps = javaTest.getCompiledTestsLibrary().getDeps();
JavaTestDescriptionTest.java,ImmutableSortedSet<BuildRule> deps = javaTest.getCompiledTestsLibrary().getDeps();,if (javaTest != null ) ImmutableSortedSet<BuildRule> deps = javaTest.getCompiledTestsLibrary().getDeps();
AndroidBinaryGraphEnhancer.java,this.originalDeps = originalParams.getDeps();,if (originalParams != null ) this.originalDeps = originalParams.getDeps();
AndroidLibraryGraphEnhancer.java,ImmutableSortedSet<BuildRule> originalDeps = originalBuildRuleParams.getDeps();,if (originalBuildRuleParams != null ) ImmutableSortedSet<BuildRule> originalDeps = originalBuildRuleParams.getDeps();
DefaultJavaLibrary.java,this.deps = params.getDeps();,if (params != null ) this.deps = params.getDeps();
MavenUberJar.java,TraversedDeps traversedDeps = TraversedDeps.traverse(params.getDeps());,if (TraversedDeps != null ) TraversedDeps traversedDeps = TraversedDeps.traverse(params.getDeps());
OcamlRuleBuilder.java,ImmutableList<OcamlLibrary> ocamlInput = OcamlUtil.getTransitiveOcamlInput(params.getDeps());,if (OcamlUtil != null ) ImmutableList<OcamlLibrary> ocamlInput = OcamlUtil.getTransitiveOcamlInput(params.getDeps());
OcamlRuleBuilder.java,ImmutableList<OcamlLibrary> ocamlInput = OcamlUtil.getTransitiveOcamlInput(params.getDeps());,if (OcamlUtil != null ) ImmutableList<OcamlLibrary> ocamlInput = OcamlUtil.getTransitiveOcamlInput(params.getDeps());
AbstractBuildRule.java,this.deps = buildRuleParams.getTotalDeps();,if (buildRuleParams != null ) this.deps = buildRuleParams.getTotalDeps();
RustCompileUtils.java,ImmutableSortedSet<BuildRule> ruledeps = params.getDeps();,if (params != null ) ImmutableSortedSet<BuildRule> ruledeps = params.getDeps();
TargetsCommand.java,Iterable<BuildTarget> dependentTargets = node.getDeps();,if (node != null ) Iterable<BuildTarget> dependentTargets = node.getDeps();
JavaBuckConfigTest.java,JavacOptions javacOptions = javaConfig.getDefaultJavacOptions();,if (javaConfig != null ) JavacOptions javacOptions = javaConfig.getDefaultJavacOptions();
JavaBuckConfigTest.java,JavacOptions javacOptions = javaConfig.getDefaultJavacOptions();,if (javaConfig != null ) JavacOptions javacOptions = javaConfig.getDefaultJavacOptions();
JavacOptionsTest.java,JavacOptions options = createStandardBuilder().build();,if (createStandardBuilder() != null ) JavacOptions options = createStandardBuilder().build();
AbstractJavacOptions.java,Optional<SourcePath> javacJarPath = getJavacSpec().getJavacJarPath();,if (getJavacSpec() != null ) Optional<SourcePath> javacJarPath = getJavacSpec().getJavacJarPath();
AbstractJavacOptions.java,SourcePath sourcePath = javacJarPath.get();,if (javacJarPath != null ) SourcePath sourcePath = javacJarPath.get();
AbstractJavacOptions.java,BuildRule rule = possibleRule.get();,if (possibleRule != null ) BuildRule rule = possibleRule.get();
JavacOptionsFactory.java,JavacSpec.Builder javacSpecBuilder = JavacSpec.builder();,if (JavacSpec != null ) JavacSpec.Builder javacSpecBuilder = JavacSpec.builder();
JavacOptionsFactory.java,SourcePath sourcePath = either.getRight();,if (either != null ) SourcePath sourcePath = either.getRight();
JavacOptionsFactory.java,SourcePath javacJarPath = possibleRule.get().getSourcePathToOutput();,if (possibleRule != null ) SourcePath javacJarPath = possibleRule.get().getSourcePathToOutput();
JavacOptionsFactory.java,JavacSpec.Builder javacSpecBuilder = JavacSpec.builder();,if (JavacSpec != null ) JavacSpec.Builder javacSpecBuilder = JavacSpec.builder();
JvmLibraryArgInterpreterTest.java,SourcePath sourcePath = new FakeSourcePath(externalJavac.toString());,if (FakeSourcePath(externalJavac != null ) SourcePath sourcePath = new FakeSourcePath(externalJavac.toString());
JvmLibraryArgInterpreterTest.java,SourcePath sourcePath = new FakeSourcePath(externalJavac.toString());,if (FakeSourcePath(externalJavac != null ) SourcePath sourcePath = new FakeSourcePath(externalJavac.toString());
JvmLibraryArgInterpreterTest.java,arg.compiler = Optional.empty();,if (Optional != null ) arg.compiler = Optional.empty();
JavacOptionsFactory.java,PrebuiltJar prebuiltJar = (PrebuiltJar) possibleRule.get();,if (possibleRule != null ) PrebuiltJar prebuiltJar = (PrebuiltJar) possibleRule.get();
CompilerTreeApiTest.java,String toString = diagnostic.toString();,if (diagnostic != null ) String toString = diagnostic.toString();
DefaultDependencyFileRuleKeyFactory.java,Result result = builder.buildResult();,if (builder != null ) Result result = builder.buildResult();
InputBasedRuleKeyFactory.java,Result result = super.build();,if (super != null ) Result result = super.build();
RuleKeyBuilderTest.java,RuleKey noop = newBuilder().build();,if (newBuilder() != null ) RuleKey noop = newBuilder().build();
UncachedRuleKeyBuilder.java,RuleKeyBuilder<RuleKey> subKeyBuilder = subKeySupplier.get();,if (subKeySupplier != null ) RuleKeyBuilder<RuleKey> subKeyBuilder = subKeySupplier.get();
UncachedRuleKeyBuilder.java,RuleKey subKey = subKeyBuilder.build();,if (subKeyBuilder != null ) RuleKey subKey = subKeyBuilder.build();
CachingBuildEngine.java,this.ruleKeyFactories = ruleKeyFactoryManager.getProvider();,if (ruleKeyFactoryManager != null ) this.ruleKeyFactories = ruleKeyFactoryManager.getProvider();
CachingBuildEngine.java,final RuleKeyFactories ruleKeyFactory = ruleKeyFactories.apply(rule.getProjectFilesystem());,if (ruleKeyFactories != null ) final RuleKeyFactories ruleKeyFactory = ruleKeyFactories.apply(rule.getProjectFilesystem());
CachingBuildEngine.java,final RuleKeyFactories keyFactories = ruleKeyFactories.apply(rule.getProjectFilesystem());,if (ruleKeyFactories != null ) final RuleKeyFactories keyFactories = ruleKeyFactories.apply(rule.getProjectFilesystem());
CachingBuildEngine.java,final RuleKeyFactories keyFactories = ruleKeyFactories.apply(rule.getProjectFilesystem());,if (ruleKeyFactories != null ) final RuleKeyFactories keyFactories = ruleKeyFactories.apply(rule.getProjectFilesystem());
CachingBuildEngine.java,RuleKeyFactories ruleKeyFactory = ruleKeyFactories.apply(rule.getProjectFilesystem());,if (ruleKeyFactories != null ) RuleKeyFactories ruleKeyFactory = ruleKeyFactories.apply(rule.getProjectFilesystem());
CachingBuildEngineFactory.java,ruleKeyFactoriesFunction = Optional.empty();,if (Optional != null ) ruleKeyFactoriesFunction = Optional.empty();
PosixNmSymbolNameTool.java,"MkdirStep mkdirStep = new MkdirStep(getProjectFilesystem(), output.getParent());","if (output != null ) MkdirStep mkdirStep = new MkdirStep(getProjectFilesystem(), output.getParent());"
MavenUberJar.java,"MkdirStep mkOutputDirStep = new MkdirStep(getProjectFilesystem(), pathToOutput.getParent());","if (pathToOutput != null ) MkdirStep mkOutputDirStep = new MkdirStep(getProjectFilesystem(), pathToOutput.getParent());"
JavaSymbolsRule.java,"Step mkdirStep = new MkdirStep(getProjectFilesystem(), outputPath.getParent());","if (outputPath != null ) Step mkdirStep = new MkdirStep(getProjectFilesystem(), outputPath.getParent());"
InterCellIntegrationTest.java,ProjectWorkspace primary = cells.getFirst();,if (cells != null ) ProjectWorkspace primary = cells.getFirst();
InterCellIntegrationTest.java,ProjectWorkspace primary = cells.getFirst();,if (cells != null ) ProjectWorkspace primary = cells.getFirst();
StubJarTest.java,List<Processor> processors = Collections.emptyList();,if (Collections != null ) List<Processor> processors = Collections.emptyList();
StubJarTest.java,stubJar = stubJarGenerator.getStubJarPath();,if (stubJarGenerator != null ) stubJar = stubJarGenerator.getStubJarPath();
CxxInferEnhancer.java,ImmutableSet<BuildRule> deps = params.getDeps();,if (params != null ) ImmutableSet<BuildRule> deps = params.getDeps();
CxxInferEnhancer.java,ImmutableSet<BuildRule> deps = params.getDeps();,if (params != null ) ImmutableSet<BuildRule> deps = params.getDeps();
CxxLuaExtensionDescription.java,ImmutableSet<BuildRule> deps = params.getDeps();,if (params != null ) ImmutableSet<BuildRule> deps = params.getDeps();
TreeBackedElementResolver.java,NewArrayTree tree = (NewArrayTree) path.getLeaf();,if (path != null ) NewArrayTree tree = (NewArrayTree) path.getLeaf();
JavaBuckConfigTest.java,Javac javac = javacOptions.getJavac();,if (javacOptions != null ) Javac javac = javacOptions.getJavac();
JavaBuckConfigTest.java,JavacOptions options = config.getDefaultJavacOptions();,if (config != null ) JavacOptions options = config.getDefaultJavacOptions();
JavaBuckConfigTest.java,JavacOptions options = config.getDefaultJavacOptions();,if (config != null ) JavacOptions options = config.getDefaultJavacOptions();
JavaBuckConfigTest.java,JavacOptions options = config.getDefaultJavacOptions();,if (config != null ) JavacOptions options = config.getDefaultJavacOptions();
JavacOptionsTest.java,JavacOptions options = createStandardBuilder().build();,if (createStandardBuilder() != null ) JavacOptions options = createStandardBuilder().build();
JavacOptionsTest.java,Platform current = Platform.detect();,if (Platform != null ) Platform current = Platform.detect();
JavacOptionsTest.java,File tempFile = tempPath.toFile();,if (tempPath != null ) File tempFile = tempPath.toFile();
JavacOptionsTest.java,Javac javac = options.getJavac();,if (options != null ) Javac javac = options.getJavac();
JavacOptionsTest.java,JavacVersion seen = javac.getVersion();,if (javac != null ) JavacVersion seen = javac.getVersion();
JavacOptionsTest.java,Javac javac = options.getJavac();,if (options != null ) Javac javac = options.getJavac();
JvmLibraryArgInterpreterTest.java,Javac javac = options.getJavac();,if (options != null ) Javac javac = options.getJavac();
JvmLibraryArgInterpreterTest.java,Javac javac = options.getJavac();,if (options != null ) Javac javac = options.getJavac();
JvmLibraryArgInterpreterTest.java,Javac javac = options.getJavac();,if (options != null ) Javac javac = options.getJavac();
JvmLibraryArgInterpreterTest.java,Javac javac = options.getJavac();,if (options != null ) Javac javac = options.getJavac();
JvmLibraryArgInterpreterTest.java,Javac javac = options.getJavac();,if (options != null ) Javac javac = options.getJavac();
JvmLibraryArgInterpreterTest.java,Javac javac = options.getJavac();,if (options != null ) Javac javac = options.getJavac();
TreeBackedExecutableElement.java,this.tree = (MethodTree) path.getLeaf();,if (path != null ) this.tree = (MethodTree) path.getLeaf();
TreeBackedTypeElement.java,this.tree = (ClassTree) path.getLeaf();,if (path != null ) this.tree = (ClassTree) path.getLeaf();
TreeBackedTypeElement.java,final Tree extendsClause = tree.getExtendsClause();,if (tree != null ) final Tree extendsClause = tree.getExtendsClause();
TreeBackedTypeElement.java,superclass = resolver.getNoneType();,if (resolver != null ) superclass = resolver.getNoneType();
TreeBackedTypeElement.java,superclass = resolver.getJavaLangObject();,if (resolver != null ) superclass = resolver.getJavaLangObject();
TreeBackedTypeParameterElement.java,this.tree = (TypeParameterTree) path.getLeaf();,if (path != null ) this.tree = (TypeParameterTree) path.getLeaf();
TreeBackedTypeParameterElement.java,bounds = Collections.singletonList(resolver.getJavaLangObject());,if (Collections != null ) bounds = Collections.singletonList(resolver.getJavaLangObject());
TreeBackedVariableElement.java,VariableTree tree = (VariableTree) path.getLeaf();,if (path != null ) VariableTree tree = (VariableTree) path.getLeaf();
TreeBackedVariableElement.java,"type = resolver.resolveType(this, tree.getType());","if (tree != null ) type = resolver.resolveType(this, tree.getType());"
TreeResolver.java,Tree tree = path.getLeaf();,if (path != null ) Tree tree = path.getLeaf();
TreeResolver.java,TypeParameterElement element = (TypeParameterElement) typeVar.asElement();,if (typeVar != null ) TypeParameterElement element = (TypeParameterElement) typeVar.asElement();
TreeResolver.java,"List<TypeMirror> typeArguments = getTypes(path, node.getTypeArguments());","if (node != null ) List<TypeMirror> typeArguments = getTypes(path, node.getTypeArguments());"
WatchmanTransportClient.java,Object response = bserDeserializer.deserializeBserValue(watchmanSocket.getInputStream());,if (bserDeserializer != null ) Object response = bserDeserializer.deserializeBserValue(watchmanSocket.getInputStream());
AppleCxxPlatformsTest.java,Tool swiftTool = swiftPlatformOptional.get().getSwift();,if (swiftPlatformOptional != null ) Tool swiftTool = swiftPlatformOptional.get().getSwift();
AppleCxxPlatformsTest.java,Tool swiftTool = swiftPlatformOptional.get().getSwift();,if (swiftPlatformOptional != null ) Tool swiftTool = swiftPlatformOptional.get().getSwift();
DefaultParserTargetGroupFactory.java,UnflavoredBuildTarget unflavoredBuildTarget = target.withoutCell().getUnflavoredBuildTarget();,if (target != null ) UnflavoredBuildTarget unflavoredBuildTarget = target.withoutCell().getUnflavoredBuildTarget();
ParsePipelineTest.java,final Cell cell = fixture.getCell();,if (fixture != null ) final Cell cell = fixture.getCell();
ParsePipelineTest.java,final Cell cell = fixture.getCell();,if (fixture != null ) final Cell cell = fixture.getCell();
ParsePipelineTest.java,final Cell cell = fixture.getCell();,if (fixture != null ) final Cell cell = fixture.getCell();
TargetGraph.java,this.groupsByBuildTarget = builder.build();,if (builder != null ) this.groupsByBuildTarget = builder.build();
JavaSymbolFinder.java,Set<Path> allSourceFilePaths = ImmutableSet.copyOf(symbolsToSourceFiles.values());,if (ImmutableSet != null ) Set<Path> allSourceFilePaths = ImmutableSet.copyOf(symbolsToSourceFiles.values());
JavaSymbolFinder.java,Path buckFileDir = buckFile.getParent();,if (buckFile != null ) Path buckFileDir = buckFile.getParent();
JavaSymbolFinder.java,Path normalizedCandidatePath = candidateFilePath.normalize();,if (candidateFilePath != null ) Path normalizedCandidatePath = candidateFilePath.normalize();
JavaSymbolFinder.java,Path pathForSrc = Paths.get(src).normalize();,if (Paths != null ) Path pathForSrc = Paths.get(src).normalize();
JavaSymbolFinder.java,Path normalizedPathForSrc = projectRelativePathForSrc.normalize();,if (projectRelativePathForSrc != null ) Path normalizedPathForSrc = projectRelativePathForSrc.normalize();
JavaSymbolFinder.java,Path dir = sourceFilePath.getParent();,if (sourceFilePath != null ) Path dir = sourceFilePath.getParent();
JavaSymbolFinder.java,Path buckFile = dir.resolve(parserConfig.getBuildFileName());,if (dir != null ) Path buckFile = dir.resolve(parserConfig.getBuildFileName());
JavaSymbolFinder.java,dir = dir.getParent();,if (dir != null ) dir = dir.getParent();
JavaSymbolFinder.java,Path rootBuckFile = Paths.get(parserConfig.getBuildFileName());,if (Paths != null ) Path rootBuckFile = Paths.get(parserConfig.getBuildFileName());
JavaSymbolFinderIntegrationTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRoot());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRoot());
JavaSymbolFinderIntegrationTest.java,BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();
MissingSymbolsHandlerIntegrationTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRoot());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRoot());
MissingSymbolsHandlerIntegrationTest.java,BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();
SrcRootsFinderIntegrationTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRoot());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRoot());
SrcRootsFinderIntegrationTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRoot());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRoot());
OfflineScribeLogger.java,List<String> categoryLines = logReadDataEntry.getValue().getLines();,if (logReadDataEntry != null ) List<String> categoryLines = logReadDataEntry.getValue().getLines();
Unzip.java,Enumeration<ZipArchiveEntry> entries = zip.getEntries();,if (zip != null ) Enumeration<ZipArchiveEntry> entries = zip.getEntries();
Unzip.java,ZipArchiveEntry entry = entries.nextElement();,if (entries != null ) ZipArchiveEntry entry = entries.nextElement();
Unzip.java,Enumeration<ZipArchiveEntry> entries = zip.getEntries();,if (zip != null ) Enumeration<ZipArchiveEntry> entries = zip.getEntries();
Unzip.java,ZipArchiveEntry entry = entries.nextElement();,if (entries != null ) ZipArchiveEntry entry = entries.nextElement();
AndroidBinaryGraphEnhancer.java,Optional<PackageStringAssets> packageStringAssets = Optional.empty();,if (Optional != null ) Optional<PackageStringAssets> packageStringAssets = Optional.empty();
ClientSideSlb.java,this.schedulerService = config.getSchedulerService();,if (config != null ) this.schedulerService = config.getSchedulerService();
CxxDescriptionEnhancer.java,String pathAsString = convertToPath.apply(input).toString();,if (convertToPath != null ) String pathAsString = convertToPath.apply(input).toString();
ProjectGenerator.java,Optional<String> productName = Optional.empty();,if (Optional != null ) Optional<String> productName = Optional.empty();
ProjectGenerator.java,testHostBundle = Optional.empty();,if (Optional != null ) testHostBundle = Optional.empty();
ProjectGenerator.java,Path xcconfigPath = configurationNameToXcconfigPath.apply(configurationEntry.getKey());,if (configurationNameToXcconfigPath != null ) Path xcconfigPath = configurationNameToXcconfigPath.apply(configurationEntry.getKey());
CachingBuildEngine.java,Path dest = metadataDir.resolve(ent.getKey());,if (metadataDir != null ) Path dest = metadataDir.resolve(ent.getKey());
ClassUsageTracker.java,JavaFileObject result = fileTracker.wrap(inner.next());,if (fileTracker != null ) JavaFileObject result = fileTracker.wrap(inner.next());
ProjectFilesystem.java,this.iter = getContents(directory).iterator();,if (getContents(directory) != null ) this.iter = getContents(directory).iterator();
PrebuiltJarDescription.java,UnflavoredBuildTarget prebuiltJarBuildTarget = params.getBuildTarget().checkUnflavored();,if (params != null ) UnflavoredBuildTarget prebuiltJarBuildTarget = params.getBuildTarget().checkUnflavored();
BuckEventBus.java,Long threadId = threadIdSupplier.get();,if (threadIdSupplier != null ) Long threadId = threadIdSupplier.get();
KnownBuildRuleTypes.java,Flavor overrideFlavor = ImmutableFlavor.of(hostCxxPlatformOverride.get());,if (ImmutableFlavor != null ) Flavor overrideFlavor = ImmutableFlavor.of(hostCxxPlatformOverride.get());
CxxInferEnhancer.java,BuildRuleParams paramsWithInferFlavor = cleanParams.withFlavor(InferFlavors.INFER.get());,if (cleanParams != null ) BuildRuleParams paramsWithInferFlavor = cleanParams.withFlavor(InferFlavors.INFER.get());
CachingBuildEngine.java,this.fileHashCaches = cachingBuildEngineDelegate.createFileHashCacheLoader();,if (cachingBuildEngineDelegate != null ) this.fileHashCaches = cachingBuildEngineDelegate.createFileHashCacheLoader();
CachingBuildEngine.java,this.fileHashCaches = cachingBuildEngineDelegate.createFileHashCacheLoader();,if (cachingBuildEngineDelegate != null ) this.fileHashCaches = cachingBuildEngineDelegate.createFileHashCacheLoader();
CachingBuildEngine.java,final FileHashCache fileHashCache = fileHashCaches.getUnchecked(rule.getProjectFilesystem());,if (fileHashCaches != null ) final FileHashCache fileHashCache = fileHashCaches.getUnchecked(rule.getProjectFilesystem());
DistBuildSlaveExecutor.java,StackedFileHashCache stackedFileHashCache = new StackedFileHashCache(allCachesBuilder.build());,if (StackedFileHashCache(allCachesBuilder != null ) StackedFileHashCache stackedFileHashCache = new StackedFileHashCache(allCachesBuilder.build());
FileContentsProviders.java,byte[] contents = entry.getContents();,if (entry != null ) byte[] contents = entry.getContents();
DistBuildSlaveExecutor.java,ImmutableList<MaterializerProjectFileHashCache> allCaches = allCachesBuilder.build();,if (allCachesBuilder != null ) ImmutableList<MaterializerProjectFileHashCache> allCaches = allCachesBuilder.build();
RecordingProjectFileHashCache.java,boolean pathIsAbsolute = !pathRelativeToProjectRoot.isPresent();,if (!pathRelativeToProjectRoot != null ) boolean pathIsAbsolute = !pathRelativeToProjectRoot.isPresent();
DistBuildFileHashesTest.java,List<BuildJobStateFileHashes> recordedHashes = f.distributedBuildFileHashes.getFileHashes();,if (f != null ) List<BuildJobStateFileHashes> recordedHashes = f.distributedBuildFileHashes.getFileHashes();
DistBuildSlaveExecutor.java,ImmutableList<DistBuildFileMaterializer> allCaches = allCachesBuilder.build();,if (allCachesBuilder != null ) ImmutableList<DistBuildFileMaterializer> allCaches = allCachesBuilder.build();
RecordingFileHashLoader.java,Path realPath = path.toRealPath();,if (path != null ) Path realPath = path.toRealPath();
JsBundleDescriptionTest.java,JsTestScenario scenario = scenarioBuilder.build();,if (scenarioBuilder != null ) JsTestScenario scenario = scenarioBuilder.build();
JsBundleDescriptionTest.java,JsTestScenario scenario = scenarioBuilder.build();,if (scenarioBuilder != null ) JsTestScenario scenario = scenarioBuilder.build();
JsBundleDescriptionTest.java,JsTestScenario scenario = scenarioBuilder.build();,if (scenarioBuilder != null ) JsTestScenario scenario = scenarioBuilder.build();
StubJarTest.java,File inputs = temp.newFolder();,if (temp != null ) File inputs = temp.newFolder();
StubJarTest.java,JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();,if (ToolProvider != null ) JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
StubJarTest.java,Boolean result = compilation.call();,if (compilation != null ) Boolean result = compilation.call();
CompilerTreeApiParameterizedTest.java,CompilerTreeApiFactory result = super.newTreeApiFactory();,if (super != null ) CompilerTreeApiFactory result = super.newTreeApiFactory();
CompilerTreeApiTest.java,JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();,if (ToolProvider != null ) JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
CompilerTreeApiTest.java,elements = javacTask.getElements();,if (javacTask != null ) elements = javacTask.getElements();
CompilerTreeApiTest.java,types = javacTask.getTypes();,if (javacTask != null ) types = javacTask.getTypes();
CompilerTreeApiTest.java,List<File> sourceFiles = new ArrayList<>(fileNamesToContents.size());,if (ArrayList<>(fileNamesToContents != null ) List<File> sourceFiles = new ArrayList<>(fileNamesToContents.size());
CompilerTreeApiTest.java,File parentDir = filePath.getParent().toFile();,if (filePath != null ) File parentDir = filePath.getParent().toFile();
CompilerTreeApiTest.java,String contents = fileNameToContents.getValue();,if (fileNameToContents != null ) String contents = fileNameToContents.getValue();
CompilerTreeApiTest.java,File sourceFile = filePath.toFile();,if (filePath != null ) File sourceFile = filePath.toFile();
CompilerTreeApiTest.java,JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();,if (ToolProvider != null ) JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
ClassReferenceTrackerTest.java,File sourceDir = temp.newFolder();,if (temp != null ) File sourceDir = temp.newFolder();
ClassReferenceTrackerTest.java,JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();,if (ToolProvider != null ) JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
ClassReferenceTrackerTest.java,boolean compilationSucceeded = compilation.call();,if (compilation != null ) boolean compilationSucceeded = compilation.call();
InterfaceValidatorTest.java,String toString = diagnostic.toString();,if (diagnostic != null ) String toString = diagnostic.toString();
JsLibraryDescription.java,final BuildTarget target = params.getBuildTarget();,if (params != null ) final BuildTarget target = params.getBuildTarget();
TreeBackedElementResolver.java,TypeParameterElement element = (TypeParameterElement) typeVar.asElement();,if (typeVar != null ) TypeParameterElement element = (TypeParameterElement) typeVar.asElement();
TreeBackedElementResolver.java,"TypeMirror bound = getType(path, node.getBound());","if (node != null ) TypeMirror bound = getType(path, node.getBound());"
TreeBackedElementResolver.java,"List<TypeMirror> typeArguments = getTypes(path, node.getTypeArguments());","if (node != null ) List<TypeMirror> typeArguments = getTypes(path, node.getTypeArguments());"
TreeBackedElementResolver.java,"TypeMirror containing = getType(path, node.getExpression());","if (node != null ) TypeMirror containing = getType(path, node.getExpression());"
TreeBackedFileScope.java,Tree qualifiedIdentifier = node.getQualifiedIdentifier();,if (node != null ) Tree qualifiedIdentifier = node.getQualifiedIdentifier();
TreeBackedScope.java,Name enclosingName = enclosingElement.getQualifiedName();,if (enclosingElement != null ) Name enclosingName = enclosingElement.getQualifiedName();
TreeBackedTrees.java,final Tree leaf = walker.getLeaf();,if (walker != null ) final Tree leaf = walker.getLeaf();
TreeBackedTrees.java,walker = walker.getParentPath();,if (walker != null ) walker = walker.getParentPath();
TypeResolver.java,TypeElement type = scope.getEnclosingClass();,if (scope != null ) TypeElement type = scope.getEnclosingClass();
TypeResolver.java,TypeElement typeElement = treeToTypeElement(node.getType());,if (treeToTypeElement(node != null ) TypeElement typeElement = treeToTypeElement(node.getType());
TypeResolver.java,TypeMirror elementType = resolveType(node.getType());,if (resolveType(node != null ) TypeMirror elementType = resolveType(node.getType());
TreeBackedScopeTest.java,Scope parentScope = barScope.getEnclosingScope();,if (barScope != null ) Scope parentScope = barScope.getEnclosingScope();
TreeBackedScopeTest.java,Scope fileScope = classScope.getEnclosingScope();,if (classScope != null ) Scope fileScope = classScope.getEnclosingScope();
FrontendOnlyJavacTask.java,elements = new TreeBackedElements(javacTask.getElements());,if (TreeBackedElements(javacTask != null ) elements = new TreeBackedElements(javacTask.getElements());
TreeBackedElements.java,Name name = element.getQualifiedName();,if (element != null ) Name name = element.getQualifiedName();
TreeBackedTrees.java,Name qualifiedName = enclosingScope.buildQualifiedName(node.getSimpleName());,if (enclosingScope != null ) Name qualifiedName = enclosingScope.buildQualifiedName(node.getSimpleName());
CellProvider.java,cellPath = cellPath.toRealPath().normalize();,if (cellPath != null ) cellPath = cellPath.toRealPath().normalize();
AndroidBinaryIntegrationTest.java,Optional<Path> ndkPath = androidResolver.getNdkOrAbsent();,if (androidResolver != null ) Optional<Path> ndkPath = androidResolver.getNdkOrAbsent();
CxxGenruleDescription.java,CxxPlatform cxxPlatform = cxxPlatforms.getRequiredValue(params.getBuildTarget());,if (cxxPlatforms != null ) CxxPlatform cxxPlatform = cxxPlatforms.getRequiredValue(params.getBuildTarget());
HeaderSymlinkTreeWithHeaderMap.java,"Path headerMapPath = getPath(params.getProjectFilesystem(), params.getBuildTarget());","if (params != null ) Path headerMapPath = getPath(params.getProjectFilesystem(), params.getBuildTarget());"
RuleKeyLoggerListener.java,logLinesCount = logLines.size();,if (logLines != null ) logLinesCount = logLines.size();
RuleKeyLoggerListener.java,logLinesCount = logLines.size();,if (logLines != null ) logLinesCount = logLines.size();
RuleKeyLoggerListener.java,logLinesCount = logLines.size();,if (logLines != null ) logLinesCount = logLines.size();
ThriftCompiler.java,this.includes = builder.build();,if (builder != null ) this.includes = builder.build();
ThriftCxxEnhancer.java,final String thriftName = ent.getKey();,if (ent != null ) final String thriftName = ent.getKey();
ThriftCxxEnhancer.java,final ThriftSource source = ent.getValue();,if (ent != null ) final ThriftSource source = ent.getValue();
ThriftCxxEnhancer.java,CxxLibraryDescription.Arg langArgs = CxxLibraryDescription.createEmptyConstructorArg();,if (CxxLibraryDescription != null ) CxxLibraryDescription.Arg langArgs = CxxLibraryDescription.createEmptyConstructorArg();
ThriftCxxEnhancer.java,langArgs.srcs = ImmutableSortedSet.copyOf(srcs.values());,if (ImmutableSortedSet != null ) langArgs.srcs = ImmutableSortedSet.copyOf(srcs.values());
ThriftCxxEnhancer.java,langArgs.canBeAsset = Optional.empty();,if (Optional != null ) langArgs.canBeAsset = Optional.empty();
ThriftJavaEnhancer.java,BuildTarget libraryTarget = CalculateAbi.getLibraryTarget(params.getBuildTarget());,if (CalculateAbi != null ) BuildTarget libraryTarget = CalculateAbi.getLibraryTarget(params.getBuildTarget());
ThriftJavaEnhancer.java,String name = ent.getKey();,if (ent != null ) String name = ent.getKey();
ThriftJavaEnhancer.java,BuildTarget compilerTarget = ent.getValue().getCompileTarget();,if (ent != null ) BuildTarget compilerTarget = ent.getValue().getCompileTarget();
ThriftJavaEnhancer.java,ImmutableSortedSet<BuildRule> sourceZips = sourceZipsBuilder.build();,if (sourceZipsBuilder != null ) ImmutableSortedSet<BuildRule> sourceZips = sourceZipsBuilder.build();
ThriftLibraryDescription.java,ImmutableSortedSet<HeaderSymlinkTree> includeTreeRules = includeTreeRulesBuilder.build();,if (includeTreeRulesBuilder != null ) ImmutableSortedSet<HeaderSymlinkTree> includeTreeRules = includeTreeRulesBuilder.build();
ThriftLibraryDescription.java,ImmutableList<Path> includeRoots = includeRootsBuilder.build();,if (includeRootsBuilder != null ) ImmutableList<Path> includeRoots = includeRootsBuilder.build();
ThriftLibraryDescription.java,ImmutableSet<Path> headerMaps = headerMapsBuilder.build();,if (headerMapsBuilder != null ) ImmutableSet<Path> headerMaps = headerMapsBuilder.build();
ThriftLibraryDescription.java,String name = ent.getKey();,if (ent != null ) String name = ent.getKey();
ThriftLibraryDescription.java,SourcePath source = ent.getValue();,if (ent != null ) SourcePath source = ent.getValue();
ThriftLibraryDescription.java,"BuildTarget compilerTarget = createThriftCompilerBuildTarget(target, ent.getKey());","if (ent != null ) BuildTarget compilerTarget = createThriftCompilerBuildTarget(target, ent.getKey());"
ThriftLibraryDescription.java,BuildTarget target = params.getBuildTarget();,if (params != null ) BuildTarget target = params.getBuildTarget();
ThriftLibraryDescription.java,"Path includeRoot = getIncludeRoot(target, params.getProjectFilesystem());","if (params != null ) Path includeRoot = getIncludeRoot(target, params.getProjectFilesystem());"
ThriftLibraryDescription.java,ThriftLanguageSpecificEnhancer enhancer = enhancerFlavor.get().getValue();,if (enhancerFlavor != null ) ThriftLanguageSpecificEnhancer enhancer = enhancerFlavor.get().getValue();
ThriftLibraryDescription.java,String language = enhancer.getLanguage();,if (enhancer != null ) String language = enhancer.getLanguage();
ThriftLibraryDescription.java,String thriftName = ent.getKey();,if (ent != null ) String thriftName = ent.getKey();
ThriftLibraryDescription.java,List<BuildTarget> deps = Lists.newArrayList();,if (Lists != null ) List<BuildTarget> deps = Lists.newArrayList();
ThriftLibraryDescription.java,ThriftLanguageSpecificEnhancer enhancer = enhancerFlavor.get().getValue();,if (enhancerFlavor != null ) ThriftLanguageSpecificEnhancer enhancer = enhancerFlavor.get().getValue();
ThriftPythonEnhancer.java,PythonLibraryDescription.Arg langArgs = delegate.createUnpopulatedConstructorArg();,if (delegate != null ) PythonLibraryDescription.Arg langArgs = delegate.createUnpopulatedConstructorArg();
ThriftPythonEnhancer.java,ThriftSource source = ent.getValue();,if (ent != null ) ThriftSource source = ent.getValue();
ThriftPythonEnhancer.java,langArgs.srcs = SourceList.ofNamedSources(modulesBuilder.build());,if (SourceList != null ) langArgs.srcs = SourceList.ofNamedSources(modulesBuilder.build());
ThriftBuckConfigTest.java,BuckConfig buckConfig = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig buckConfig = FakeBuckConfig.builder().build();
ThriftCompilerStepTest.java,ExecutionContext context = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext context = TestExecutionContext.newInstance();
ThriftCompilerTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
ThriftCompilerTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
ThriftCxxEnhancerTest.java,options = ImmutableSet.of();,if (ImmutableSet != null ) options = ImmutableSet.of();
ThriftCxxEnhancerTest.java,arg.cppOptions = ImmutableSet.of();,if (ImmutableSet != null ) arg.cppOptions = ImmutableSet.of();
ThriftCxxEnhancerTest.java,BuildRuleParams flavoredParams = new FakeBuildRuleParamsBuilder(TARGET).build();,if (FakeBuildRuleParamsBuilder(TARGET) != null ) BuildRuleParams flavoredParams = new FakeBuildRuleParamsBuilder(TARGET).build();
ThriftCxxEnhancerTest.java,arg.cppHeaderNamespace = Optional.empty();,if (Optional != null ) arg.cppHeaderNamespace = Optional.empty();
ThriftCxxEnhancerTest.java,BuildRuleParams flavoredParams = new FakeBuildRuleParamsBuilder(TARGET).build();,if (FakeBuildRuleParamsBuilder(TARGET) != null ) BuildRuleParams flavoredParams = new FakeBuildRuleParamsBuilder(TARGET).build();
ThriftCxxEnhancerTest.java,arg.cppOptions = ImmutableSet.of();,if (ImmutableSet != null ) arg.cppOptions = ImmutableSet.of();
ThriftCxxEnhancerTest.java,arg.cppDeps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.cppDeps = ImmutableSortedSet.of();
ThriftCxxEnhancerTest.java,BuildRuleParams flavoredParams = new FakeBuildRuleParamsBuilder(TARGET).build();,if (FakeBuildRuleParamsBuilder(TARGET) != null ) BuildRuleParams flavoredParams = new FakeBuildRuleParamsBuilder(TARGET).build();
ThriftCxxEnhancerTest.java,arg.cppOptions = ImmutableSet.of();,if (ImmutableSet != null ) arg.cppOptions = ImmutableSet.of();
ThriftCxxEnhancerTest.java,arg.cppDeps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.cppDeps = ImmutableSortedSet.of();
ThriftCxxEnhancerTest.java,arg.cppHeaderNamespace = Optional.empty();,if (Optional != null ) arg.cppHeaderNamespace = Optional.empty();
ThriftJavaEnhancerTest.java,options = ImmutableSet.of();,if (ImmutableSet != null ) options = ImmutableSet.of();
ThriftJavaEnhancerTest.java,BuildRuleParams flavoredParams = new FakeBuildRuleParamsBuilder(TARGET).build();,if (FakeBuildRuleParamsBuilder(TARGET) != null ) BuildRuleParams flavoredParams = new FakeBuildRuleParamsBuilder(TARGET).build();
ThriftLibraryDescriptionTest.java,ImmutableSet<String> options = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<String> options = ImmutableSet.of();
ThriftLibraryDescriptionTest.java,SourcePath ruleSourcePath = genrule.getSourcePathToOutput();,if (genrule != null ) SourcePath ruleSourcePath = genrule.getSourcePathToOutput();
ThriftLibraryDescriptionTest.java,ProjectFilesystem filesystem = unflavoredParams.getProjectFilesystem();,if (unflavoredParams != null ) ProjectFilesystem filesystem = unflavoredParams.getProjectFilesystem();
ThriftLibraryDescriptionTest.java,BuckConfig buckConfig = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig buckConfig = FakeBuckConfig.builder().build();
ThriftLibraryDescriptionTest.java,ThriftConstructorArg arg = desc.createUnpopulatedConstructorArg();,if (desc != null ) ThriftConstructorArg arg = desc.createUnpopulatedConstructorArg();
ThriftLibraryDescriptionTest.java,arg.deps = ImmutableSortedSet.of(dep.getBuildTarget());,if (ImmutableSortedSet != null ) arg.deps = ImmutableSortedSet.of(dep.getBuildTarget());
ThriftLibraryDescriptionTest.java,arg.flags = ImmutableList.of();,if (ImmutableList != null ) arg.flags = ImmutableList.of();
ThriftLibraryDescriptionTest.java,ImmutableSet<BuildTarget> implicitDeps = ImmutableSet.of(implicitDep.getBuildTarget());,if (ImmutableSet != null ) ImmutableSet<BuildTarget> implicitDeps = ImmutableSet.of(implicitDep.getBuildTarget());
ThriftLibraryDescriptionTest.java,ImmutableSet<String> options = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<String> options = ImmutableSet.of();
ThriftLibraryDescriptionTest.java,ThriftConstructorArg arg = desc.createUnpopulatedConstructorArg();,if (desc != null ) ThriftConstructorArg arg = desc.createUnpopulatedConstructorArg();
ThriftLibraryDescriptionTest.java,arg.deps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.deps = ImmutableSortedSet.of();
ThriftLibraryDescriptionTest.java,arg.flags = ImmutableList.of();,if (ImmutableList != null ) arg.flags = ImmutableList.of();
ThriftLibraryDescriptionTest.java,BuckConfig buckConfig = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig buckConfig = FakeBuckConfig.builder().build();
ThriftLibraryDescriptionTest.java,ThriftConstructorArg constructorArg = desc.createUnpopulatedConstructorArg();,if (desc != null ) ThriftConstructorArg constructorArg = desc.createUnpopulatedConstructorArg();
ThriftLibraryDescriptionTest.java,ImmutableSet<String> options = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<String> options = ImmutableSet.of();
ThriftLibraryDescriptionTest.java,ImmutableSet<BuildTarget> implicitDeps = ImmutableSet.of(implicitDep.getBuildTarget());,if (ImmutableSet != null ) ImmutableSet<BuildTarget> implicitDeps = ImmutableSet.of(implicitDep.getBuildTarget());
ThriftLibraryDescriptionTest.java,ThriftConstructorArg constructorArg = desc.createUnpopulatedConstructorArg();,if (desc != null ) ThriftConstructorArg constructorArg = desc.createUnpopulatedConstructorArg();
ThriftLibraryIntegrationTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
ThriftLibraryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
ThriftLibraryIntegrationTest.java,BuildRuleResolver ruleResolver = actionGraphAndResolver.getResolver();,if (actionGraphAndResolver != null ) BuildRuleResolver ruleResolver = actionGraphAndResolver.getResolver();
ThriftLibraryIntegrationTest.java,ImmutableSortedSet<BuildRule> deps = ruleResolver.getRule(binaryFlavor).getDeps();,if (ruleResolver != null ) ImmutableSortedSet<BuildRule> deps = ruleResolver.getRule(binaryFlavor).getDeps();
ThriftPythonEnhancerTest.java,options = ImmutableSet.of();,if (ImmutableSet != null ) options = ImmutableSet.of();
ThriftPythonEnhancerTest.java,arg.pyOptions = ImmutableSet.of();,if (ImmutableSet != null ) arg.pyOptions = ImmutableSet.of();
ThriftPythonEnhancerTest.java,BuildRuleParams flavoredParams = new FakeBuildRuleParamsBuilder(TARGET).build();,if (FakeBuildRuleParamsBuilder(TARGET) != null ) BuildRuleParams flavoredParams = new FakeBuildRuleParamsBuilder(TARGET).build();
ThriftPythonEnhancerTest.java,arg.pyOptions = ImmutableSet.of();,if (ImmutableSet != null ) arg.pyOptions = ImmutableSet.of();
ThriftPythonEnhancerTest.java,arg.pyBaseModule = Optional.empty();,if (Optional != null ) arg.pyBaseModule = Optional.empty();
PerfTimesEventListener.java,long diff = event.getTimestamp() - buildPhasesLastEvent.get();,if (buildPhasesLastEvent != null ) long diff = event.getTimestamp() - buildPhasesLastEvent.get();
PerfTimesEventListener.java,javaInitTimeMs = event.getDuration();,if (event != null ) javaInitTimeMs = event.getDuration();
DefaultJavaLibraryIntegrationTest.java,Path buildCache = workspace.getPath(BuckConstant.getDefaultCacheDir());,if (workspace != null ) Path buildCache = workspace.getPath(BuckConstant.getDefaultCacheDir());
FilesystemBackedBuildFileTreeTest.java,Path cacheDir = root.resolve(BuckConstant.getDefaultCacheDir());,if (root != null ) Path cacheDir = root.resolve(BuckConstant.getDefaultCacheDir());
PythonLibraryDescription.java,baseTarget = buildTarget.withoutFlavors(pythonPlatform.getKey());,if (buildTarget != null ) baseTarget = buildTarget.withoutFlavors(pythonPlatform.getKey());
CxxLibraryDescriptionTest.java,Set<Flavor> flavors = Sets.newHashSet(libTarget.getFlavors());,if (Sets != null ) Set<Flavor> flavors = Sets.newHashSet(libTarget.getFlavors());
CxxLibraryDescriptionTest.java,TargetGraph targetGraph = TargetGraphFactory.newInstance(ruleBuilder.build());,if (TargetGraphFactory != null ) TargetGraph targetGraph = TargetGraphFactory.newInstance(ruleBuilder.build());
BuckCommand.java,PrintStream stdErr = params.getConsole().getStdErr();,if (params != null ) PrintStream stdErr = params.getConsole().getStdErr();
AndroidBinary.java,this.pathToGeneratedProguardConfigDir = enhancementResult.getPathToGeneratedProguardConfigDir();,if (enhancementResult != null ) this.pathToGeneratedProguardConfigDir = enhancementResult.getPathToGeneratedProguardConfigDir();
AndroidBinary.java,Path proguardConfigDir = resolver.getRelativePath(pathToGeneratedProguardConfigDir.get());,if (resolver != null ) Path proguardConfigDir = resolver.getRelativePath(pathToGeneratedProguardConfigDir.get());
AndroidBinary.java,Path proguardConfigDir = resolver.getRelativePath(pathToGeneratedProguardConfigDir.get());,if (resolver != null ) Path proguardConfigDir = resolver.getRelativePath(pathToGeneratedProguardConfigDir.get());
AaptPackageResources.java,Optional<Path> pathToGeneratedProguardConfig = Optional.empty();,if (Optional != null ) Optional<Path> pathToGeneratedProguardConfig = Optional.empty();
MacroFinder.java,MacroMatchResult result = new MacroFinderAutomaton(blob).next();,if (MacroFinderAutomaton(blob) != null ) MacroMatchResult result = new MacroFinderAutomaton(blob).next();
FakeRustConfig.java,Optional<ToolProvider> compiler = Optional.empty();,if (Optional != null ) Optional<ToolProvider> compiler = Optional.empty();
FakeRustConfig.java,Optional<LinkerProvider> linker = Optional.empty();,if (Optional != null ) Optional<LinkerProvider> linker = Optional.empty();
Main.java,JavacOptions javacOptions = javaBuckConfig.getDefaultJavacOptions();,if (javaBuckConfig != null ) JavacOptions javacOptions = javaBuckConfig.getDefaultJavacOptions();
TestRunning.java,results = callable.call();,if (callable != null ) results = callable.call();
DefaultClassUsageFileReader.java,Path jarAbsolutePath = pathResolver.getAbsolutePath(dep.getSourcePathToOutput());,if (pathResolver != null ) Path jarAbsolutePath = pathResolver.getAbsolutePath(dep.getSourcePathToOutput());
Resolver.java,specifiedDependencies = dependencyBuilder.build();,if (dependencyBuilder != null ) specifiedDependencies = dependencyBuilder.build();
HeaderSymlinkTreeWithHeaderMap.java,"this.headerMapPath = getPath(params.getProjectFilesystem(), params.getBuildTarget());","if (params != null ) this.headerMapPath = getPath(params.getProjectFilesystem(), params.getBuildTarget());"
VersionedTargetGraph.java,UnflavoredBuildTarget unflavoredTarget = target.getUnflavoredBuildTarget();,if (target != null ) UnflavoredBuildTarget unflavoredTarget = target.getUnflavoredBuildTarget();
VersionedTargetGraph.java,flavorMapBuilder = ImmutableMap.builder();,if (ImmutableMap != null ) flavorMapBuilder = ImmutableMap.builder();
VersionedTargetGraph.java,this.flavorMap = flavorMapBuilder.build();,if (flavorMapBuilder != null ) this.flavorMap = flavorMapBuilder.build();
VersionedTargetGraphBuilder.java,this.graph = MutableDirectedGraph.createConcurrent();,if (MutableDirectedGraph != null ) this.graph = MutableDirectedGraph.createConcurrent();
BuildRuleEvent.java,this.ruleKey = ruleKeyFactory.build(rule).toString();,if (ruleKeyFactory != null ) this.ruleKey = ruleKeyFactory.build(rule).toString();
BuildRuleEvent.java,this.ruleKey = ruleKeyFactory.build(rule).toString();,if (ruleKeyFactory != null ) this.ruleKey = ruleKeyFactory.build(rule).toString();
LoggingRuleKeyHasher.java,HASH hash = delegate.hash();,if (delegate != null ) HASH hash = delegate.hash();
AbstractReport.java,watchmanDiagReport = watchmanDiagReportCollector.get().run();,if (watchmanDiagReportCollector != null ) watchmanDiagReport = watchmanDiagReportCollector.get().run();
PerfTimesEventListener.java,javaInitTime = event.getDuration();,if (event != null ) javaInitTime = event.getDuration();
TargetNodeTranslator.java,selectedVersions = Optional.empty();,if (Optional != null ) selectedVersions = Optional.empty();
ThriftPythonEnhancerTest.java,arg.pyOptions = ImmutableSet.of();,if (ImmutableSet != null ) arg.pyOptions = ImmutableSet.of();
ThriftPythonEnhancerTest.java,arg.pyBaseModule = Optional.empty();,if (Optional != null ) arg.pyBaseModule = Optional.empty();
ThriftPythonEnhancerTest.java,arg.pyOptions = ImmutableSet.of();,if (ImmutableSet != null ) arg.pyOptions = ImmutableSet.of();
ThriftPythonEnhancerTest.java,arg.pyTwistedBaseModule = Optional.empty();,if (Optional != null ) arg.pyTwistedBaseModule = Optional.empty();
ThriftPythonEnhancerTest.java,arg.pyOptions = ImmutableSet.of();,if (ImmutableSet != null ) arg.pyOptions = ImmutableSet.of();
ThriftPythonEnhancerTest.java,arg.pyAsyncioBaseModule = Optional.empty();,if (Optional != null ) arg.pyAsyncioBaseModule = Optional.empty();
CxxGenruleDescription.java,ImmutableList<String> asflags = cxxPlatform.get().getAsflags();,if (cxxPlatform != null ) ImmutableList<String> asflags = cxxPlatform.get().getAsflags();
CxxGenruleDescription.java,ImmutableList<String> cflags = cxxPlatform.get().getCflags();,if (cxxPlatform != null ) ImmutableList<String> cflags = cxxPlatform.get().getCflags();
CxxGenruleDescription.java,ImmutableList<String> cxxflags = cxxPlatform.get().getCxxflags();,if (cxxPlatform != null ) ImmutableList<String> cxxflags = cxxPlatform.get().getCxxflags();
ProcessHelper.java,OperatingSystem os = OSHI.getOperatingSystem();,if (OSHI != null ) OperatingSystem os = OSHI.getOperatingSystem();
ProcessHelper.java,processTreeTimestamp = System.nanoTime();,if (System != null ) processTreeTimestamp = System.nanoTime();
FakeProjectFilesystemTest.java,"byte[] contents = ""contents"".getBytes();","if (""contents"" != null ) byte[] contents = ""contents"".getBytes();"
InstallCommand.java,boolean wantUdid = deviceOptions.hasSerialNumber();,if (deviceOptions != null ) boolean wantUdid = deviceOptions.hasSerialNumber();
SwiftLibraryIntegrationTest.java,args.moduleName = Optional.empty();,if (Optional != null ) args.moduleName = Optional.empty();
SwiftLibraryIntegrationTest.java,args.srcs = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) args.srcs = ImmutableSortedSet.of();
SwiftLibraryIntegrationTest.java,args.compilerFlags = ImmutableList.of();,if (ImmutableList != null ) args.compilerFlags = ImmutableList.of();
SwiftLibraryIntegrationTest.java,args.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) args.frameworks = ImmutableSortedSet.of();
SwiftLibraryIntegrationTest.java,args.libraries = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) args.libraries = ImmutableSortedSet.of();
SwiftLibraryIntegrationTest.java,args.enableObjcInterop = Optional.empty();,if (Optional != null ) args.enableObjcInterop = Optional.empty();
SwiftLibraryIntegrationTest.java,args.supportedPlatformsRegex = Optional.empty();,if (Optional != null ) args.supportedPlatformsRegex = Optional.empty();
SwiftLibraryIntegrationTest.java,args.bridgingHeader = Optional.empty();,if (Optional != null ) args.bridgingHeader = Optional.empty();
AbstractAndroidGraphEnhancementResult.java,PackageStringAssets stringAssets = getPackageStringAssets().get();,if (getPackageStringAssets() != null ) PackageStringAssets stringAssets = getPackageStringAssets().get();
AaptPackageResourcesTest.java,assetsDirectories = ImmutableSet.of();,if (ImmutableSet != null ) assetsDirectories = ImmutableSet.of();
AaptPackageResourcesTest.java,extraDeps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) extraDeps = ImmutableSortedSet.of();
BuildThreadStateRenderer.java,accumulatedTime = accumulatedTimeTracker.getTime(buildTarget.get());,if (accumulatedTimeTracker != null ) accumulatedTime = accumulatedTimeTracker.getTime(buildTarget.get());
BuildThreadStateRenderer.java,buildRuleEvent = Optional.empty();,if (Optional != null ) buildRuleEvent = Optional.empty();
BuildThreadStateRenderer.java,buildTarget = Optional.empty();,if (Optional != null ) buildTarget = Optional.empty();
BuildThreadStateRenderer.java,runningStep = Optional.empty();,if (Optional != null ) runningStep = Optional.empty();
BuildThreadStateRenderer.java,Optional<String> stepCategory = Optional.empty();,if (Optional != null ) Optional<String> stepCategory = Optional.empty();
SimpleConsoleEventBusListener.java,timeToRender = totalTime.get();,if (totalTime != null ) timeToRender = totalTime.get();
TestThreadStateRenderer.java,testSummary = Optional.empty();,if (Optional != null ) testSummary = Optional.empty();
TestThreadStateRenderer.java,testStatusMessage = Optional.empty();,if (Optional != null ) testStatusMessage = Optional.empty();
TestThreadStateRenderer.java,accumulatedTime = accumulatedTimeTracker.getTime(buildTarget.get());,if (accumulatedTimeTracker != null ) accumulatedTime = accumulatedTimeTracker.getTime(buildTarget.get());
TestThreadStateRenderer.java,testRuleEvent = Optional.empty();,if (Optional != null ) testRuleEvent = Optional.empty();
TestThreadStateRenderer.java,buildTarget = Optional.empty();,if (Optional != null ) buildTarget = Optional.empty();
TestThreadStateRenderer.java,runningStep = Optional.empty();,if (Optional != null ) runningStep = Optional.empty();
CxxLibraryDescription.java,BuildTarget baseTarget = buildTarget.withoutFlavors(type.getKey());,if (buildTarget != null ) BuildTarget baseTarget = buildTarget.withoutFlavors(type.getKey());
CxxLibraryDescription.java,Optional<CxxHeaders> symlinkTree = Optional.empty();,if (Optional != null ) Optional<CxxHeaders> symlinkTree = Optional.empty();
CxxLibraryDescription.java,baseTarget = baseTarget.withoutFlavors(mode.getFlavor());,if (baseTarget != null ) baseTarget = baseTarget.withoutFlavors(mode.getFlavor());
CxxLibraryDescription.java,CxxPreprocessorInput.Builder cxxPreprocessorInputBuilder = CxxPreprocessorInput.builder();,if (CxxPreprocessorInput != null ) CxxPreprocessorInput.Builder cxxPreprocessorInputBuilder = CxxPreprocessorInput.builder();
CxxLibraryDescription.java,CxxPreprocessorInput cxxPreprocessorInput = cxxPreprocessorInputBuilder.build();,if (cxxPreprocessorInputBuilder != null ) CxxPreprocessorInput cxxPreprocessorInput = cxxPreprocessorInputBuilder.build();
CxxLibraryDescriptionTest.java,TargetGraph targetGraph = TargetGraphFactory.newInstance(libBuilder.build());,if (TargetGraphFactory != null ) TargetGraph targetGraph = TargetGraphFactory.newInstance(libBuilder.build());
CxxGenruleDescription.java,CxxPlatform cxxPlatform = cxxPlatforms.getRequiredValue(params.getBuildTarget());,if (cxxPlatforms != null ) CxxPlatform cxxPlatform = cxxPlatforms.getRequiredValue(params.getBuildTarget());
CxxGenruleDescription.java,ImmutableList<String> asflags = cxxPlatform.getAsflags();,if (cxxPlatform != null ) ImmutableList<String> asflags = cxxPlatform.getAsflags();
CxxGenruleDescription.java,ImmutableList<String> cflags = cxxPlatform.getCflags();,if (cxxPlatform != null ) ImmutableList<String> cflags = cxxPlatform.getCflags();
CxxGenruleDescription.java,ImmutableList<String> cxxflags = cxxPlatform.getCxxflags();,if (cxxPlatform != null ) ImmutableList<String> cxxflags = cxxPlatform.getCxxflags();
CxxGenruleDescription.java,ImmutableList<String> asflags = cxxPlatform.get().getAsflags();,if (cxxPlatform != null ) ImmutableList<String> asflags = cxxPlatform.get().getAsflags();
CxxGenruleDescription.java,ImmutableList<String> cflags = cxxPlatform.get().getCflags();,if (cxxPlatform != null ) ImmutableList<String> cflags = cxxPlatform.get().getCflags();
CxxGenruleDescription.java,ImmutableList<String> cxxflags = cxxPlatform.get().getCxxflags();,if (cxxPlatform != null ) ImmutableList<String> cxxflags = cxxPlatform.get().getCxxflags();
DefaultClock.java,userNanoTimeEnabled = threadMXBean.isThreadCpuTimeEnabled();,if (threadMXBean != null ) userNanoTimeEnabled = threadMXBean.isThreadCpuTimeEnabled();
BuildCommand.java,SourcePath output = rule.getSourcePathToOutput();,if (rule != null ) SourcePath output = rule.getSourcePathToOutput();
StackedDownloader.java,String repo = kv.getValue();,if (kv != null ) String repo = kv.getValue();
CxxLibraryDescriptionTest.java,Set<Flavor> flavors = Sets.newHashSet(libTarget.getFlavors());,if (Sets != null ) Set<Flavor> flavors = Sets.newHashSet(libTarget.getFlavors());
CxxLibraryDescriptionTest.java,TargetGraph targetGraph = TargetGraphFactory.newInstance(ruleBuilder.build());,if (TargetGraphFactory != null ) TargetGraph targetGraph = TargetGraphFactory.newInstance(ruleBuilder.build());
FrontendOnlyJavacTask.java,Name qualifiedName = enclosingScope.buildQualifiedName(node.getSimpleName());,if (enclosingScope != null ) Name qualifiedName = enclosingScope.buildQualifiedName(node.getSimpleName());
AndroidBinaryDescription.java,boolean buildWithObfuscation = packageType.isBuildWithObfuscation();,if (packageType != null ) boolean buildWithObfuscation = packageType.isBuildWithObfuscation();
CxxTestDescriptionTest.java,CxxTestDescription.Arg constructorArg = desc.createUnpopulatedConstructorArg();,if (desc != null ) CxxTestDescription.Arg constructorArg = desc.createUnpopulatedConstructorArg();
CxxTestDescriptionTest.java,constructorArg.env = ImmutableMap.of();,if (ImmutableMap != null ) constructorArg.env = ImmutableMap.of();
CxxTestDescriptionTest.java,constructorArg.args = ImmutableList.of();,if (ImmutableList != null ) constructorArg.args = ImmutableList.of();
CxxTestDescriptionTest.java,constructorArg.linkerFlags = ImmutableList.of();,if (ImmutableList != null ) constructorArg.linkerFlags = ImmutableList.of();
CxxTestDescriptionTest.java,constructorArg.platformLinkerFlags = PatternMatchedCollection.of();,if (PatternMatchedCollection != null ) constructorArg.platformLinkerFlags = PatternMatchedCollection.of();
MergeAndroidResourcesStep.java,RDotTxtEntry resource = parsedEntry.get();,if (parsedEntry != null ) RDotTxtEntry resource = parsedEntry.get();
TreeBackedTypeElement.java,final Tree extendsClause = tree.getExtendsClause();,if (tree != null ) final Tree extendsClause = tree.getExtendsClause();
TreeBackedTypeElement.java,superclass = resolver.getJavaLangObject();,if (resolver != null ) superclass = resolver.getJavaLangObject();
TreeBackedTypeParameterElement.java,bounds = Collections.singletonList(resolver.getJavaLangObject());,if (Collections != null ) bounds = Collections.singletonList(resolver.getJavaLangObject());
Main.java,ImmutableList<Cell> cells = cellsBuilder.build();,if (cellsBuilder != null ) ImmutableList<Cell> cells = cellsBuilder.build();
KnownBuildRuleTypes.java,ImmutableList<ImmutableFlavor> possibleHostFlavors = CxxPlatforms.getAllPossibleHostFlavors();,if (CxxPlatforms != null ) ImmutableList<ImmutableFlavor> possibleHostFlavors = CxxPlatforms.getAllPossibleHostFlavors();
AbstractAndroidGraphEnhancementResult.java,PackageStringAssets stringAssets = getPackageStringAssets().get();,if (getPackageStringAssets() != null ) PackageStringAssets stringAssets = getPackageStringAssets().get();
AaptPackageResourcesTest.java,assetsDirectories = ImmutableSet.of();,if (ImmutableSet != null ) assetsDirectories = ImmutableSet.of();
AaptPackageResourcesTest.java,extraDeps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) extraDeps = ImmutableSortedSet.of();
ThriftCxxEnhancer.java,final Path outputDir = source.getOutputDir();,if (source != null ) final Path outputDir = source.getOutputDir();
ThriftJavaEnhancer.java,BuildRule compilerRule = ent.getValue().getCompileRule();,if (ent != null ) BuildRule compilerRule = ent.getValue().getCompileRule();
ThriftPythonEnhancer.java,Path outputDir = source.getOutputDir();,if (source != null ) Path outputDir = source.getOutputDir();
JsFile.java,final Tool tool = worker.getTool();,if (worker != null ) final Tool tool = worker.getTool();
DefaultAndroidDirectoryResolver.java,Optional<Path> ndkPath = Optional.empty();,if (Optional != null ) Optional<Path> ndkPath = Optional.empty();
DefaultAndroidDirectoryResolver.java,Optional<String> newestVersion = Optional.empty();,if (Optional != null ) Optional<String> newestVersion = Optional.empty();
DefaultAndroidDirectoryResolver.java,newestVersion = Optional.of(ndkVersion.get());,if (Optional != null ) newestVersion = Optional.of(ndkVersion.get());
AbstractCxxSourceRuleFactory.java,CxxSource.Type sourceType = source.getType();,if (source != null ) CxxSource.Type sourceType = source.getType();
AbstractCxxSourceRuleFactory.java,"CxxToolFlags compilerFlags = computeCompilerFlags(sourceType, source.getFlags());","if (source != null ) CxxToolFlags compilerFlags = computeCompilerFlags(sourceType, source.getFlags());"
SourcePathArgTest.java,SourcePathArg arg = new SourcePathArg(rule.getSourcePathToOutput());,if (SourcePathArg(rule != null ) SourcePathArg arg = new SourcePathArg(rule.getSourcePathToOutput());
CxxDescriptionEnhancer.java,exportedPreprocessorFlags = ImmutableMultimap.of();,if (ImmutableMultimap != null ) exportedPreprocessorFlags = ImmutableMultimap.of();
CxxDescriptionEnhancer.java,exportedHeaders = ImmutableMap.of();,if (ImmutableMap != null ) exportedHeaders = ImmutableMap.of();
CxxDescriptionEnhancer.java,Optional<SymlinkTree> sandboxTree = Optional.empty();,if (Optional != null ) Optional<SymlinkTree> sandboxTree = Optional.empty();
JavaTest.java,Path relativeOutputPath = rule.getPathToOutput();,if (rule != null ) Path relativeOutputPath = rule.getPathToOutput();
SourcePathResolver.java,Path path = ruleFinder.getRuleOrThrow(targetSourcePath).getPathToOutput();,if (ruleFinder != null ) Path path = ruleFinder.getRuleOrThrow(targetSourcePath).getPathToOutput();
JavaTestDescription.java,BuildTargetSourcePath sourcePath = (BuildTargetSourcePath) entry.getValue();,if (entry != null ) BuildTargetSourcePath sourcePath = (BuildTargetSourcePath) entry.getValue();
SourcePathResolver.java,Optional<Path> resolvedPath = targetSourcePath.getResolvedPath();,if (targetSourcePath != null ) Optional<Path> resolvedPath = targetSourcePath.getResolvedPath();
SourcePathResolver.java,Path path = ruleFinder.getRuleOrThrow(targetSourcePath).getPathToOutput();,if (ruleFinder != null ) Path path = ruleFinder.getRuleOrThrow(targetSourcePath).getPathToOutput();
SourcePathResolver.java,Optional<Path> explicitPath = sourcePath.getResolvedPath();,if (sourcePath != null ) Optional<Path> explicitPath = sourcePath.getResolvedPath();
SourcePathResolver.java,Path path = explicitPath.get();,if (explicitPath != null ) Path path = explicitPath.get();
GuavaRuleKeyHasher.java,Optional<Path> resolvedPath = targetSourcePath.getResolvedPath();,if (targetSourcePath != null ) Optional<Path> resolvedPath = targetSourcePath.getResolvedPath();
ConstructorArgMarshallerTest.java,BuildTargetSourcePath path = new BuildTargetSourcePath(rule.getBuildTarget());,if (BuildTargetSourcePath(rule != null ) BuildTargetSourcePath path = new BuildTargetSourcePath(rule.getBuildTarget());
ConstructorArgMarshallerTest.java,BuildTargetSourcePath expected = new BuildTargetSourcePath(expectedRule.getBuildTarget());,if (BuildTargetSourcePath(expectedRule != null ) BuildTargetSourcePath expected = new BuildTargetSourcePath(expectedRule.getBuildTarget());
DefaultBuildTargetSourcePathTest.java,BuildTargetSourcePath path = new BuildTargetSourcePath(rule.getBuildTarget());,if (BuildTargetSourcePath(rule != null ) BuildTargetSourcePath path = new BuildTargetSourcePath(rule.getBuildTarget());
DefaultBuildTargetSourcePathTest.java,BuildTargetSourcePath path = new BuildTargetSourcePath(rule.getBuildTarget());,if (BuildTargetSourcePath(rule != null ) BuildTargetSourcePath path = new BuildTargetSourcePath(rule.getBuildTarget());
SourcePathResolverTest.java,SourcePath sourcePath = new BuildTargetSourcePath(rule.getBuildTarget());,if (BuildTargetSourcePath(rule != null ) SourcePath sourcePath = new BuildTargetSourcePath(rule.getBuildTarget());
SourcePathResolverTest.java,SourcePath sourcePath = new BuildTargetSourcePath(rule.getBuildTarget());,if (BuildTargetSourcePath(rule != null ) SourcePath sourcePath = new BuildTargetSourcePath(rule.getBuildTarget());
SourcePathResolverTest.java,SourcePath sourcePath = new BuildTargetSourcePath(rule.getBuildTarget());,if (BuildTargetSourcePath(rule != null ) SourcePath sourcePath = new BuildTargetSourcePath(rule.getBuildTarget());
AndroidManifestDescriptionTest.java,BuildTargetSourcePath skeleton = new BuildTargetSourcePath(ruleWithOutput.getBuildTarget());,if (BuildTargetSourcePath(ruleWithOutput != null ) BuildTargetSourcePath skeleton = new BuildTargetSourcePath(ruleWithOutput.getBuildTarget());
CxxSourceRuleFactoryTest.java,SourcePath input = new BuildTargetSourcePath(dep.getBuildTarget());,if (BuildTargetSourcePath(dep != null ) SourcePath input = new BuildTargetSourcePath(dep.getBuildTarget());
CommandToolTest.java,SourcePath path = new BuildTargetSourcePath(rule.getBuildTarget());,if (BuildTargetSourcePath(rule != null ) SourcePath path = new BuildTargetSourcePath(rule.getBuildTarget());
CommandToolTest.java,SourcePath path = new BuildTargetSourcePath(rule.getBuildTarget());,if (BuildTargetSourcePath(rule != null ) SourcePath path = new BuildTargetSourcePath(rule.getBuildTarget());
ThriftLibraryDescriptionTest.java,SourcePath ruleSourcePath = new BuildTargetSourcePath(genrule.getBuildTarget());,if (BuildTargetSourcePath(genrule != null ) SourcePath ruleSourcePath = new BuildTargetSourcePath(genrule.getBuildTarget());
OcamlNativePluginStep.java,ocamlInput = ocamlInputBuilder.build();,if (ocamlInputBuilder != null ) ocamlInput = ocamlInputBuilder.build();
CxxLinkableEnhancerTest.java,ImmutableList<String> args = Arg.stringify(sharedWithSoname.getArgs());,if (Arg != null ) ImmutableList<String> args = Arg.stringify(sharedWithSoname.getArgs());
CxxLinkableEnhancerTest.java,ImmutableList<String> args = Arg.stringify(staticLink.getArgs());,if (Arg != null ) ImmutableList<String> args = Arg.stringify(staticLink.getArgs());
CxxLinkableEnhancerTest.java,args = Arg.stringify(sharedLink.getArgs());,if (Arg != null ) args = Arg.stringify(sharedLink.getArgs());
HaskellCompileRule.java,SourcePathResolver resolver = context.getSourcePathResolver();,if (context != null ) SourcePathResolver resolver = context.getSourcePathResolver();
WorkerMacroArg.java,startupEnvironment = exe.getEnvironment();,if (exe != null ) startupEnvironment = exe.getEnvironment();
Main.java,ImmutableList<Cell> cells = cellsBuilder.build();,if (cellsBuilder != null ) ImmutableList<Cell> cells = cellsBuilder.build();
AnnotationDefaultValueMirror.java,final AnnotationVisitor annotationVisitor = method.visitAnnotationDefault();,if (method != null ) final AnnotationVisitor annotationVisitor = method.visitAnnotationDefault();
AnnotationMirror.java,this.values = Maps.newTreeMap();,if (Maps != null ) this.values = Maps.newTreeMap();
ClassMirror.java,this.annotations = Sets.newLinkedHashSet();,if (Sets != null ) this.annotations = Sets.newLinkedHashSet();
ClassMirror.java,this.typeAnnotations = Sets.newLinkedHashSet();,if (Sets != null ) this.typeAnnotations = Sets.newLinkedHashSet();
ClassMirror.java,this.fields = Sets.newLinkedHashSet();,if (Sets != null ) this.fields = Sets.newLinkedHashSet();
ClassMirror.java,this.innerClasses = Sets.newLinkedHashSet();,if (Sets != null ) this.innerClasses = Sets.newLinkedHashSet();
ClassMirror.java,this.methods = Sets.newLinkedHashSet();,if (Sets != null ) this.methods = Sets.newLinkedHashSet();
MethodMirror.java,this.annotations = Sets.newTreeSet();,if (Sets != null ) this.annotations = Sets.newTreeSet();
MethodMirror.java,this.typeAnnotations = Sets.newTreeSet();,if (Sets != null ) this.typeAnnotations = Sets.newTreeSet();
MethodMirror.java,char[] chars = desc.toCharArray();,if (desc != null ) char[] chars = desc.toCharArray();
MethodMirror.java,annotationDefault = new AnnotationDefaultValueMirror(super.visitAnnotationDefault());,if (AnnotationDefaultValueMirror(super != null ) annotationDefault = new AnnotationDefaultValueMirror(super.visitAnnotationDefault());
DaemonIntegrationTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
ProjectGenerator.java,Path prefixHeaderRelative = sourcePathResolver.apply(prefixHeaderOptional.get());,if (sourcePathResolver != null ) Path prefixHeaderRelative = sourcePathResolver.apply(prefixHeaderOptional.get());
OcamlLinkStep.java,ocamlInput = ocamlInputBuilder.build();,if (ocamlInputBuilder != null ) ocamlInput = ocamlInputBuilder.build();
CachingBuildEngine.java,final RuleKeyFactories keyFactories = ruleKeyFactories.apply(rule.getProjectFilesystem());,if (ruleKeyFactories != null ) final RuleKeyFactories keyFactories = ruleKeyFactories.apply(rule.getProjectFilesystem());
WorkspaceAndProjectGenerator.java,this.focusModules = builder.build();,if (builder != null ) this.focusModules = builder.build();
DefaultFileHashCache.java,Path absoluteFilePath = archiveMemberPath.getArchivePath();,if (archiveMemberPath != null ) Path absoluteFilePath = archiveMemberPath.getArchivePath();
DefaultFileHashCache.java,Path relativeFilePath = resolvePath(absoluteFilePath).normalize();,if (resolvePath(absoluteFilePath) != null ) Path relativeFilePath = resolvePath(absoluteFilePath).normalize();
Main.java,ImmutableList<FileHashCache> hashCaches = hashCachesBuilder.build();,if (hashCachesBuilder != null ) ImmutableList<FileHashCache> hashCaches = hashCachesBuilder.build();
Main.java,cellHashCache = DefaultFileHashCache.createDefaultFileHashCache(rootCell.getFilesystem());,if (DefaultFileHashCache != null ) cellHashCache = DefaultFileHashCache.createDefaultFileHashCache(rootCell.getFilesystem());
Main.java,FileHashCache fileHashCache = new StackedFileHashCache(allCaches.build());,if (StackedFileHashCache(allCaches != null ) FileHashCache fileHashCache = new StackedFileHashCache(allCaches.build());
AnnotationDefaultValueMirror.java,defaultValue = AnnotationValueMirror.forArray();,if (AnnotationValueMirror != null ) defaultValue = AnnotationValueMirror.forArray();
AnnotationMirror.java,AnnotationValueMirror array = AnnotationValueMirror.forArray();,if (AnnotationValueMirror != null ) AnnotationValueMirror array = AnnotationValueMirror.forArray();
AbstractBuildRuleParams.java,Set<Flavor> flavors = Sets.newHashSet(getBuildTarget().getFlavors());,if (Sets != null ) Set<Flavor> flavors = Sets.newHashSet(getBuildTarget().getFlavors());
AbstractBuildRuleParams.java,Set<Flavor> flavors = Sets.newHashSet(getBuildTarget().getFlavors());,if (Sets != null ) Set<Flavor> flavors = Sets.newHashSet(getBuildTarget().getFlavors());
AppleBundle.java,this.platformName = sdk.getApplePlatform().getName();,if (sdk != null ) this.platformName = sdk.getApplePlatform().getName();
ClassMirror.java,this.annotations = Sets.newTreeSet();,if (Sets != null ) this.annotations = Sets.newTreeSet();
ClassMirror.java,this.fields = Sets.newTreeSet();,if (Sets != null ) this.fields = Sets.newTreeSet();
ClassMirror.java,this.innerClasses = Sets.newTreeSet();,if (Sets != null ) this.innerClasses = Sets.newTreeSet();
ClassMirror.java,this.methods = Sets.newTreeSet();,if (Sets != null ) this.methods = Sets.newTreeSet();
StubJarTest.java,Iterator<M> originalMemberIterator = originalMembers.values().iterator();,if (originalMembers != null ) Iterator<M> originalMemberIterator = originalMembers.values().iterator();
StubJarTest.java,M member = originalMemberIterator.next();,if (originalMemberIterator != null ) M member = originalMemberIterator.next();
ProjectGenerator.java,HasAppleBundleFields bundleArg = bundle.get().getConstructorArg();,if (bundle != null ) HasAppleBundleFields bundleArg = bundle.get().getConstructorArg();
ProjectGenerator.java,AppleNativeTargetDescriptionArg appleArg = appleTargetNode.get().getConstructorArg();,if (appleTargetNode != null ) AppleNativeTargetDescriptionArg appleArg = appleTargetNode.get().getConstructorArg();
ProjectGenerator.java,BuildTarget testTarget = bundleLoaderNode.get().getBuildTarget();,if (bundleLoaderNode != null ) BuildTarget testTarget = bundleLoaderNode.get().getBuildTarget();
ProjectGenerator.java,String bundleLoaderProductName = getProductNameForBuildTarget(bundleLoader.getBuildTarget());,if (getProductNameForBuildTarget(bundleLoader != null ) String bundleLoaderProductName = getProductNameForBuildTarget(bundleLoader.getBuildTarget());
ProjectGenerator.java,Path infoPlistPath = pathRelativizer.outputDirToRootRelative(infoPlistOptional.get());,if (pathRelativizer != null ) Path infoPlistPath = pathRelativizer.outputDirToRootRelative(infoPlistOptional.get());
ProjectGenerator.java,Optional<String> swiftVersion = swiftBuckConfig.getVersion();,if (swiftBuckConfig != null ) Optional<String> swiftVersion = swiftBuckConfig.getVersion();
ProjectGenerator.java,Path prefixHeaderRelative = sourcePathResolver.apply(prefixHeaderOptional.get());,if (sourcePathResolver != null ) Path prefixHeaderRelative = sourcePathResolver.apply(prefixHeaderOptional.get());
WebServerTest.java,List<ContextHandler> handlers = webServer.createHandlers();,if (webServer != null ) List<ContextHandler> handlers = webServer.createHandlers();
DistBuildClientExecutor.java,final BuildId id = job.getBuildId();,if (job != null ) final BuildId id = job.getBuildId();
VerifyCachesCommand.java,FileHashCacheVerificationResult result = params.getFileHashCache().verify();,if (params != null ) FileHashCacheVerificationResult result = params.getFileHashCache().verify();
VerifyCachesCommand.java,DirtyPrintStreamDecorator stdOut = params.getConsole().getStdOut();,if (params != null ) DirtyPrintStreamDecorator stdOut = params.getConsole().getStdOut();
Main.java,WatchedFileHashCache watchedCache = new WatchedFileHashCache(subCell.getFilesystem());,if (WatchedFileHashCache(subCell != null ) WatchedFileHashCache watchedCache = new WatchedFileHashCache(subCell.getFilesystem());
Main.java,this.hashCache = new StackedFileHashCache(hashCaches.build());,if (StackedFileHashCache(hashCaches != null ) this.hashCache = new StackedFileHashCache(hashCaches.build());
PreprocessorFlagsTest.java,RuleKey defaultRuleKey = builder.build();,if (builder != null ) RuleKey defaultRuleKey = builder.build();
PreprocessorFlagsTest.java,RuleKey alteredRuleKey = builder.build();,if (builder != null ) RuleKey alteredRuleKey = builder.build();
DefaultRuleKeyFactoryTest.java,RuleKey expected = builder.build();,if (builder != null ) RuleKey expected = builder.build();
DefaultRuleKeyFactoryTest.java,RuleKey expected = builder.build();,if (builder != null ) RuleKey expected = builder.build();
DefaultRuleKeyFactoryTest.java,RuleKey expected = builder.build();,if (builder != null ) RuleKey expected = builder.build();
DefaultRuleKeyFactoryTest.java,RuleKey expected = builder.build();,if (builder != null ) RuleKey expected = builder.build();
DefaultRuleKeyFactoryTest.java,RuleKey expected = builder.build();,if (builder != null ) RuleKey expected = builder.build();
DefaultRuleKeyFactoryTest.java,RuleKey expected = builder.build();,if (builder != null ) RuleKey expected = builder.build();
DefaultRuleKeyFactoryTest.java,RuleKey expected = builder.build();,if (builder != null ) RuleKey expected = builder.build();
DefaultRuleKeyFactoryTest.java,RuleKey expected = builder.build();,if (builder != null ) RuleKey expected = builder.build();
CachingBuildEngine.java,ListenableFuture<RuleKey> ruleKey = ruleKeys.get(rule.getBuildTarget());,if (ruleKeys != null ) ListenableFuture<RuleKey> ruleKey = ruleKeys.get(rule.getBuildTarget());
CachingBuildEngine.java,final RuleKeyFactories keyFactories = ruleKeyFactories.apply(rule.getProjectFilesystem());,if (ruleKeyFactories != null ) final RuleKeyFactories keyFactories = ruleKeyFactories.apply(rule.getProjectFilesystem());
AbstractBuildRule.java,this.deps = buildRuleParams.getTotalDeps();,if (buildRuleParams != null ) this.deps = buildRuleParams.getTotalDeps();
BuildRuleParams.java,Set<Flavor> flavors = Sets.newHashSet(getBuildTarget().getFlavors());,if (Sets != null ) Set<Flavor> flavors = Sets.newHashSet(getBuildTarget().getFlavors());
BuildRuleParams.java,Set<Flavor> flavors = Sets.newHashSet(getBuildTarget().getFlavors());,if (Sets != null ) Set<Flavor> flavors = Sets.newHashSet(getBuildTarget().getFlavors());
DexProducedFromJavaLibrary.java,this.javaLibrarySourcePath = new BuildTargetSourcePath(javaLibrary.getBuildTarget());,if (BuildTargetSourcePath(javaLibrary != null ) this.javaLibrarySourcePath = new BuildTargetSourcePath(javaLibrary.getBuildTarget());
AppleDebuggableBinary.java,this.binarySourcePath = new BuildTargetSourcePath(binaryRule.getBuildTarget());,if (BuildTargetSourcePath(binaryRule != null ) this.binarySourcePath = new BuildTargetSourcePath(binaryRule.getBuildTarget());
CxxGenruleDescription.java,path = new BuildTargetSourcePath(platformRule.getBuildTarget());,if (BuildTargetSourcePath(platformRule != null ) path = new BuildTargetSourcePath(platformRule.getBuildTarget());
JavaBinaryDescription.java,SourcePath innerJar = new BuildTargetSourcePath(innerJarRule.getBuildTarget());,if (BuildTargetSourcePath(innerJarRule != null ) SourcePath innerJar = new BuildTargetSourcePath(innerJarRule.getBuildTarget());
Project.java,Path absolutePath = resolver.getAbsolutePath(prebuiltJar.getBinaryJar());,if (resolver != null ) Path absolutePath = resolver.getAbsolutePath(prebuiltJar.getBinaryJar());
Project.java,Path binaryJarAbsolutePath = resolver.getAbsolutePath(prebuiltJar.getBinaryJar());,if (resolver != null ) Path binaryJarAbsolutePath = resolver.getAbsolutePath(prebuiltJar.getBinaryJar());
CxxPythonExtensionDescription.java,SourcePath output = new BuildTargetSourcePath(extension.getBuildTarget());,if (BuildTargetSourcePath(extension != null ) SourcePath output = new BuildTargetSourcePath(extension.getBuildTarget());
RustLibraryDescription.java,SourcePath rlib = new BuildTargetSourcePath(rule.getBuildTarget());,if (BuildTargetSourcePath(rule != null ) SourcePath rlib = new BuildTargetSourcePath(rule.getBuildTarget());
RustLibraryDescription.java,SourcePath lib = new BuildTargetSourcePath(rule.getBuildTarget());,if (BuildTargetSourcePath(rule != null ) SourcePath lib = new BuildTargetSourcePath(rule.getBuildTarget());
EventPostingRuleKeyCacheScope.java,startStats = cache.getStats();,if (cache != null ) startStats = cache.getStats();
Main.java,ImmutableList<Cell> cells = cellsBuilder.build();,if (cellsBuilder != null ) ImmutableList<Cell> cells = cellsBuilder.build();
Main.java,WatchedFileHashCache watchedCache = new WatchedFileHashCache(subCell.getFilesystem());,if (WatchedFileHashCache(subCell != null ) WatchedFileHashCache watchedCache = new WatchedFileHashCache(subCell.getFilesystem());
Main.java,ImmutableList<FileHashCache> hashCaches = hashCachesBuilder.build();,if (hashCachesBuilder != null ) ImmutableList<FileHashCache> hashCaches = hashCachesBuilder.build();
Main.java,WatchedFileHashCache watchedCache = new WatchedFileHashCache(subCell.getFilesystem());,if (WatchedFileHashCache(subCell != null ) WatchedFileHashCache watchedCache = new WatchedFileHashCache(subCell.getFilesystem());
Main.java,this.hashCache = new StackedFileHashCache(hashCaches.build());,if (StackedFileHashCache(hashCaches != null ) this.hashCache = new StackedFileHashCache(hashCaches.build());
PreprocessorFlagsTest.java,RuleKey defaultRuleKey = builder.build();,if (builder != null ) RuleKey defaultRuleKey = builder.build();
PreprocessorFlagsTest.java,RuleKey alteredRuleKey = builder.build();,if (builder != null ) RuleKey alteredRuleKey = builder.build();
DefaultRuleKeyFactoryTest.java,RuleKey expected = builder.build();,if (builder != null ) RuleKey expected = builder.build();
DefaultRuleKeyFactoryTest.java,RuleKey expected = builder.build();,if (builder != null ) RuleKey expected = builder.build();
DefaultRuleKeyFactoryTest.java,RuleKey expected = builder.build();,if (builder != null ) RuleKey expected = builder.build();
DefaultRuleKeyFactoryTest.java,RuleKey expected = builder.build();,if (builder != null ) RuleKey expected = builder.build();
DefaultRuleKeyFactoryTest.java,RuleKey expected = builder.build();,if (builder != null ) RuleKey expected = builder.build();
DefaultRuleKeyFactoryTest.java,RuleKey expected = builder.build();,if (builder != null ) RuleKey expected = builder.build();
DefaultRuleKeyFactoryTest.java,RuleKey expected = builder.build();,if (builder != null ) RuleKey expected = builder.build();
DefaultRuleKeyFactoryTest.java,RuleKey expected = builder.build();,if (builder != null ) RuleKey expected = builder.build();
PythonBinary.java,buildTarget = buildTarget.withFlavors();,if (buildTarget != null ) buildTarget = buildTarget.withFlavors();
ProjectGenerator.java,HeaderMap.Builder headerMapBuilder = new HeaderMap.Builder();,if (HeaderMap != null ) HeaderMap.Builder headerMapBuilder = new HeaderMap.Builder();
StubJarTest.java,ClassNode classNode = stubbed.getClassNode();,if (stubbed != null ) ClassNode classNode = stubbed.getClassNode();
StubJarTest.java,ClassNode classNode = stubbed.getClassNode();,if (stubbed != null ) ClassNode classNode = stubbed.getClassNode();
StubJarTest.java,Path sourceStubJar = stubJarGenerator.getStubJarPath();,if (stubJarGenerator != null ) Path sourceStubJar = stubJarGenerator.getStubJarPath();
ArtifactCacheBuckConfig.java,String cacheDir = buckConfig.getLocalCacheDirectory();,if (buckConfig != null ) String cacheDir = buckConfig.getLocalCacheDirectory();
ArtifactCacheBuckConfigTest.java,DirCacheEntry dirCacheConfig = config.getDirCache();,if (config != null ) DirCacheEntry dirCacheConfig = config.getDirCache();
StubJarTest.java,ClassNode classNode = stubbed.getClassNode();,if (stubbed != null ) ClassNode classNode = stubbed.getClassNode();
StubJarTest.java,ClassNode classNode = stubbed.getClassNode();,if (stubbed != null ) ClassNode classNode = stubbed.getClassNode();
StubJarTest.java,stubJar = stubJarGenerator.getStubJarPath();,if (stubJarGenerator != null ) stubJar = stubJarGenerator.getStubJarPath();
StubJarTest.java,ClassNode originalNode = original.getClassNode();,if (original != null ) ClassNode originalNode = original.getClassNode();
StubJarTest.java,ClassNode stubbedNode = stubbed.getClassNode();,if (stubbed != null ) ClassNode stubbedNode = stubbed.getClassNode();
StubJarTest.java,Iterator<M> originalMemberIterator = originalMembers.values().iterator();,if (originalMembers != null ) Iterator<M> originalMemberIterator = originalMembers.values().iterator();
StubJarTest.java,M member = originalMemberIterator.next();,if (originalMemberIterator != null ) M member = originalMemberIterator.next();
ClassVisitorDriverFromElement.java,walker = (TypeElement) enclosingClass.getEnclosingElement();,if (enclosingClass != null ) walker = (TypeElement) enclosingClass.getEnclosingElement();
ClassMirror.java,this.typeAnnotations = Sets.newTreeSet();,if (Sets != null ) this.typeAnnotations = Sets.newTreeSet();
MethodMirror.java,this.typeAnnotations = Sets.newTreeSet();,if (Sets != null ) this.typeAnnotations = Sets.newTreeSet();
MoreElements.java,DeclaredType annotationType = annotation.getAnnotationType();,if (annotation != null ) DeclaredType annotationType = annotation.getAnnotationType();
MoreElements.java,TypeElement annotationTypeElement = (TypeElement) annotationType.asElement();,if (annotationType != null ) TypeElement annotationTypeElement = (TypeElement) annotationType.asElement();
MethodMirror.java,annotationDefault = new AnnotationDefaultValueMirror(super.visitAnnotationDefault());,if (AnnotationDefaultValueMirror(super != null ) annotationDefault = new AnnotationDefaultValueMirror(super.visitAnnotationDefault());
HaskellDescriptionUtils.java,deps = rule.getDeps();,if (rule != null ) deps = rule.getDeps();
AnnotationDefaultValueMirror.java,defaultValue = AnnotationValueMirror.forArray();,if (AnnotationValueMirror != null ) defaultValue = AnnotationValueMirror.forArray();
AnnotationMirror.java,AnnotationValueMirror array = AnnotationValueMirror.forArray();,if (AnnotationValueMirror != null ) AnnotationValueMirror array = AnnotationValueMirror.forArray();
StubJarTest.java,ClassNode classNode = stubbed.getClassNode();,if (stubbed != null ) ClassNode classNode = stubbed.getClassNode();
StubJarTest.java,ClassNode classNode = stubbed.getClassNode();,if (stubbed != null ) ClassNode classNode = stubbed.getClassNode();
StubJarTest.java,Path sourceStubJar = stubJarGenerator.getStubJarPath();,if (stubJarGenerator != null ) Path sourceStubJar = stubJarGenerator.getStubJarPath();
AnnotationProcessingParams.java,JavacPluginProperties safeProcessors = safeProcessorsBuilder.build();,if (safeProcessorsBuilder != null ) JavacPluginProperties safeProcessors = safeProcessorsBuilder.build();
AnnotationProcessingParams.java,JavacPluginProperties unsafeProcessors = unsafeProcessorsBuilder.build();,if (unsafeProcessorsBuilder != null ) JavacPluginProperties unsafeProcessors = unsafeProcessorsBuilder.build();
AnnotationProcessingParams.java,JavacPluginProperties processors = processorsBuilder.build();,if (processorsBuilder != null ) JavacPluginProperties processors = processorsBuilder.build();
DefaultJavaLibraryTest.java,annotationProcessingParamsBuilder = new AnnotationProcessingParams.Builder();,if (AnnotationProcessingParams != null ) annotationProcessingParamsBuilder = new AnnotationProcessingParams.Builder();
AbstractJavacOptions.java,Path generateTo = getAnnotationProcessingParams().getGeneratedSourceFolderName();,if (getAnnotationProcessingParams() != null ) Path generateTo = getAnnotationProcessingParams().getGeneratedSourceFolderName();
Jsr199Javac.java,Iterator<String> iterator = options.iterator();,if (options != null ) Iterator<String> iterator = options.iterator();
Jsr199Javac.java,String curr = iterator.next();,if (iterator != null ) String curr = iterator.next();
Jsr199Javac.java,processorClassPath = iterator.next();,if (iterator != null ) processorClassPath = iterator.next();
Jsr199Javac.java,processorNames = iterator.next();,if (iterator != null ) processorNames = iterator.next();
Jsr199JavacTest.java,ClassLoader baseClassLoader = ToolProvider.getSystemToolClassLoader();,if (ToolProvider != null ) ClassLoader baseClassLoader = ToolProvider.getSystemToolClassLoader();
AnnotationProcessingParams.java,Set<SourcePath> searchPathElements = Sets.newHashSet();,if (Sets != null ) Set<SourcePath> searchPathElements = Sets.newHashSet();
AnnotationProcessingParams.java,SourcePath outputSourcePath = rule.getSourcePathToOutput();,if (rule != null ) SourcePath outputSourcePath = rule.getSourcePathToOutput();
AnnotationProcessingParams.java,ImmutableSet<JavaLibrary> entries = hasClasspathEntries.getTransitiveClasspathDeps();,if (hasClasspathEntries != null ) ImmutableSet<JavaLibrary> entries = hasClasspathEntries.getTransitiveClasspathDeps();
AndroidBuildConfigDescription.java,BuildTarget abiJarTarget = CalculateAbi.getAbiTarget(params.getBuildTarget());,if (CalculateAbi != null ) BuildTarget abiJarTarget = CalculateAbi.getAbiTarget(params.getBuildTarget());
AndroidLibraryDescription.java,BuildTarget abiJarTarget = CalculateAbi.getAbiTarget(params.getBuildTarget());,if (CalculateAbi != null ) BuildTarget abiJarTarget = CalculateAbi.getAbiTarget(params.getBuildTarget());
AndroidPrebuiltAarDescription.java,BuildTarget abiJarTarget = CalculateAbi.getAbiTarget(params.getBuildTarget());,if (CalculateAbi != null ) BuildTarget abiJarTarget = CalculateAbi.getAbiTarget(params.getBuildTarget());
RobolectricTestDescription.java,BuildTarget abiJarTarget = CalculateAbi.getAbiTarget(params.getBuildTarget());,if (CalculateAbi != null ) BuildTarget abiJarTarget = CalculateAbi.getAbiTarget(params.getBuildTarget());
GroovyLibraryDescription.java,BuildTarget abiJarTarget = CalculateAbi.getAbiTarget(params.getBuildTarget());,if (CalculateAbi != null ) BuildTarget abiJarTarget = CalculateAbi.getAbiTarget(params.getBuildTarget());
GroovyTestDescription.java,BuildTarget abiJarTarget = CalculateAbi.getAbiTarget(params.getBuildTarget());,if (CalculateAbi != null ) BuildTarget abiJarTarget = CalculateAbi.getAbiTarget(params.getBuildTarget());
JavaLibraryDescription.java,BuildTarget abiJarTarget = CalculateAbi.getAbiTarget(params.getBuildTarget());,if (CalculateAbi != null ) BuildTarget abiJarTarget = CalculateAbi.getAbiTarget(params.getBuildTarget());
JavaTestDescription.java,BuildTarget abiJarTarget = CalculateAbi.getAbiTarget(params.getBuildTarget());,if (CalculateAbi != null ) BuildTarget abiJarTarget = CalculateAbi.getAbiTarget(params.getBuildTarget());
PrebuiltJarDescription.java,BuildTarget abiJarTarget = CalculateAbi.getAbiTarget(params.getBuildTarget());,if (CalculateAbi != null ) BuildTarget abiJarTarget = CalculateAbi.getAbiTarget(params.getBuildTarget());
KotlinLibraryDescription.java,BuildTarget abiJarTarget = CalculateAbi.getAbiTarget(params.getBuildTarget());,if (CalculateAbi != null ) BuildTarget abiJarTarget = CalculateAbi.getAbiTarget(params.getBuildTarget());
KotlinTestDescription.java,BuildTarget abiJarTarget = CalculateAbi.getAbiTarget(params.getBuildTarget());,if (CalculateAbi != null ) BuildTarget abiJarTarget = CalculateAbi.getAbiTarget(params.getBuildTarget());
ScalaLibraryDescription.java,BuildTarget abiJarTarget = CalculateAbi.getAbiTarget(params.getBuildTarget());,if (CalculateAbi != null ) BuildTarget abiJarTarget = CalculateAbi.getAbiTarget(params.getBuildTarget());
ScalaTestDescription.java,BuildTarget abiJarTarget = CalculateAbi.getAbiTarget(params.getBuildTarget());,if (CalculateAbi != null ) BuildTarget abiJarTarget = CalculateAbi.getAbiTarget(params.getBuildTarget());
ThriftJavaEnhancer.java,BuildTarget abiJarTarget = CalculateAbi.getAbiTarget(params.getBuildTarget());,if (CalculateAbi != null ) BuildTarget abiJarTarget = CalculateAbi.getAbiTarget(params.getBuildTarget());
KotlinLibraryDescription.java,ImmutableSortedSet<Flavor> flavors = target.getFlavors();,if (target != null ) ImmutableSortedSet<Flavor> flavors = target.getFlavors();
AssembleDirectoriesTest.java,Path outputFile = filesystem.resolve(assembleDirectories.getPathToOutput());,if (filesystem != null ) Path outputFile = filesystem.resolve(assembleDirectories.getPathToOutput());
DirectHeaderMapTest.java,headerMapPath = buildRule.getPathToOutput();,if (buildRule != null ) headerMapPath = buildRule.getPathToOutput();
HeaderSymlinkTreeWithHeaderMapTest.java,headerMapPath = symlinkTreeBuildRule.getPathToOutput();,if (symlinkTreeBuildRule != null ) headerMapPath = symlinkTreeBuildRule.getPathToOutput();
JavaBinaryTest.java,String expectedClasspath = basePath + javaBinary.getPathToOutput();,if (javaBinary != null ) String expectedClasspath = basePath + javaBinary.getPathToOutput();
JavaLibraryClasspathProviderTest.java,basePath = filesystem.getRootPath();,if (filesystem != null ) basePath = filesystem.getRootPath();
JavaSourceJarTest.java,Path output = rule.getPathToOutput();,if (rule != null ) Path output = rule.getPathToOutput();
CachingBuildEngineTest.java,final Path input = Preconditions.checkNotNull(genrule.getPathToOutput());,if (Preconditions != null ) final Path input = Preconditions.checkNotNull(genrule.getPathToOutput());
CachingBuildEngineTest.java,final Path input = Preconditions.checkNotNull(genrule.getPathToOutput());,if (Preconditions != null ) final Path input = Preconditions.checkNotNull(genrule.getPathToOutput());
CachingBuildEngineTest.java,final Path input = Preconditions.checkNotNull(genrule.getPathToOutput());,if (Preconditions != null ) final Path input = Preconditions.checkNotNull(genrule.getPathToOutput());
CachingBuildEngineTest.java,final Path input = Preconditions.checkNotNull(genrule.getPathToOutput());,if (Preconditions != null ) final Path input = Preconditions.checkNotNull(genrule.getPathToOutput());
CachingBuildEngineTest.java,final Path input = Preconditions.checkNotNull(genrule.getPathToOutput());,if (Preconditions != null ) final Path input = Preconditions.checkNotNull(genrule.getPathToOutput());
CachingBuildEngineTest.java,final Path input = Preconditions.checkNotNull(genrule.getPathToOutput());,if (Preconditions != null ) final Path input = Preconditions.checkNotNull(genrule.getPathToOutput());
CachingBuildEngineTest.java,final Path input = Preconditions.checkNotNull(genrule.getPathToOutput());,if (Preconditions != null ) final Path input = Preconditions.checkNotNull(genrule.getPathToOutput());
CachingBuildEngineTest.java,final Path input = Preconditions.checkNotNull(genrule.getPathToOutput());,if (Preconditions != null ) final Path input = Preconditions.checkNotNull(genrule.getPathToOutput());
LocationMacroExpanderTest.java,Path outputPath = javaBinary.getPathToOutput();,if (javaBinary != null ) Path outputPath = javaBinary.getPathToOutput();
LocationMacroExpanderTest.java,Path absolutePath = outputPath.toAbsolutePath();,if (outputPath != null ) Path absolutePath = outputPath.toAbsolutePath();
AppleBundle.java,final Path binaryOutputPath = binary.get().getPathToOutput();,if (binary != null ) final Path binaryOutputPath = binary.get().getPathToOutput();
AppleBundle.java,Path dsymPath = appleDsym.get().getPathToOutput();,if (appleDsym != null ) Path dsymPath = appleDsym.get().getPathToOutput();
BuiltinApplePackage.java,Path bundleOutputPath = bundle.getPathToOutput();,if (bundle != null ) Path bundleOutputPath = bundle.getPathToOutput();
BuildCommand.java,Path output = rule.getPathToOutput();,if (rule != null ) Path output = rule.getPathToOutput();
InstallCommand.java,Path buildRuleOutputPath = buildRule.getPathToOutput();,if (buildRule != null ) Path buildRuleOutputPath = buildRule.getPathToOutput();
InstallCommand.java,Optional<Path> helperOverridePath = appleConfig.getAppleDeviceHelperPath();,if (appleConfig != null ) Optional<Path> helperOverridePath = appleConfig.getAppleDeviceHelperPath();
InstallCommand.java,helperPath = projectFilesystem.resolve(helperOverridePath.get());,if (projectFilesystem != null ) helperPath = projectFilesystem.resolve(helperOverridePath.get());
TargetsCommand.java,Optional<Path> outputPathOptional = Optional.ofNullable(rule.getPathToOutput());,if (Optional != null ) Optional<Path> outputPathOptional = Optional.ofNullable(rule.getPathToOutput());
BuildReport.java,outputFile = rule.getPathToOutput();,if (rule != null ) outputFile = rule.getPathToOutput();
BuildReport.java,Path outputFile = rule.getPathToOutput();,if (rule != null ) Path outputFile = rule.getPathToOutput();
BuildCommandTest.java,String observedReport = new BuildReport(buildExecutionResult).generateJsonBuildReport();,if (BuildReport(buildExecutionResult) != null ) String observedReport = new BuildReport(buildExecutionResult).generateJsonBuildReport();
CachingBuildEngine.java,RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getFirst();,if (depFileRuleKeyAndInputs != null ) RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getFirst();
CachingBuildEngine.java,RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getFirst();,if (depFileRuleKeyAndInputs != null ) RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getFirst();
CachingBuildEngine.java,RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getFirst();,if (depFileRuleKeyAndInputs != null ) RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getFirst();
BuildCommand.java,SourcePath output = rule.getSourcePathToOutput();,if (rule != null ) SourcePath output = rule.getSourcePathToOutput();
InstallCommand.java,SourcePath buildRuleOutputPath = buildRule.getSourcePathToOutput();,if (buildRule != null ) SourcePath buildRuleOutputPath = buildRule.getSourcePathToOutput();
InstallCommand.java,Optional<Path> helperOverridePath = appleConfig.getAppleDeviceHelperAbsolutePath();,if (appleConfig != null ) Optional<Path> helperOverridePath = appleConfig.getAppleDeviceHelperAbsolutePath();
InstallCommand.java,helperPath = helperOverridePath.get();,if (helperOverridePath != null ) helperPath = helperOverridePath.get();
BuildReport.java,outputFile = rule.getSourcePathToOutput();,if (rule != null ) outputFile = rule.getSourcePathToOutput();
BuildReport.java,SourcePath outputFile = rule.getSourcePathToOutput();,if (rule != null ) SourcePath outputFile = rule.getSourcePathToOutput();
DefaultDependencyFileRuleKeyFactory.java,Predicate<SourcePath> coveredPathPredicate = rule.getCoveredByDepFilePredicate();,if (rule != null ) Predicate<SourcePath> coveredPathPredicate = rule.getCoveredByDepFilePredicate();
DefaultDependencyFileRuleKeyFactory.java,Predicate<SourcePath> interestingPathPredicate = rule.getExistenceOfInterestPredicate();,if (rule != null ) Predicate<SourcePath> interestingPathPredicate = rule.getExistenceOfInterestPredicate();
DefaultDependencyFileRuleKeyFactory.java,Iterable<SourcePath> inputsSoFar = builder.getIterableInputsSoFar();,if (builder != null ) Iterable<SourcePath> inputsSoFar = builder.getIterableInputsSoFar();
DefaultDependencyFileRuleKeyFactory.java,Predicate<SourcePath> coveredPathPredicate = rule.getCoveredByDepFilePredicate();,if (rule != null ) Predicate<SourcePath> coveredPathPredicate = rule.getCoveredByDepFilePredicate();
DefaultDependencyFileRuleKeyFactory.java,Predicate<SourcePath> interestingPathPredicate = rule.getExistenceOfInterestPredicate();,if (rule != null ) Predicate<SourcePath> interestingPathPredicate = rule.getExistenceOfInterestPredicate();
DefaultDependencyFileRuleKeyFactory.java,ImmutableSet<SourcePath> inputs = ImmutableSet.copyOf(builder.getIterableInputsSoFar());,if (ImmutableSet != null ) ImmutableSet<SourcePath> inputs = ImmutableSet.copyOf(builder.getIterableInputsSoFar());
TestRunning.java,classesItem = sourcePathResolver.getRelativePath(rule.getSourcePathToOutput());,if (sourcePathResolver != null ) classesItem = sourcePathResolver.getRelativePath(rule.getSourcePathToOutput());
MavenUberJar.java,Path pathToOutput = input.getPathToOutput();,if (input != null ) Path pathToOutput = input.getPathToOutput();
AndroidBinary.java,Optional<PackageStringAssets> packageStringAssets = enhancementResult.getPackageStringAssets();,if (enhancementResult != null ) Optional<PackageStringAssets> packageStringAssets = enhancementResult.getPackageStringAssets();
AndroidBinary.java,final Path pathToStringAssetsZip = packageStringAssets.get().getPathToStringAssetsZip();,if (packageStringAssets != null ) final Path pathToStringAssetsZip = packageStringAssets.get().getPathToStringAssetsZip();
DirectHeaderMap.java,"this.headerMapPath = getPath(params.getProjectFilesystem(), params.getBuildTarget());","if (params != null ) this.headerMapPath = getPath(params.getProjectFilesystem(), params.getBuildTarget());"
AbstractAndroidGraphEnhancementResult.java,PackageStringAssets stringAssets = getPackageStringAssets().get();,if (getPackageStringAssets() != null ) PackageStringAssets stringAssets = getPackageStringAssets().get();
AndroidBinary.java,this.primaryApkAssetsZips = enhancementResult.getPrimaryApkAssetZips();,if (enhancementResult != null ) this.primaryApkAssetsZips = enhancementResult.getPrimaryApkAssetZips();
AndroidBinary.java,this.pathToGeneratedProguardConfigDir = enhancementResult.getPathToGeneratedProguardConfigDir();,if (enhancementResult != null ) this.pathToGeneratedProguardConfigDir = enhancementResult.getPathToGeneratedProguardConfigDir();
AndroidBinary.java,Path proguardConfigDir = resolver.getRelativePath(pathToGeneratedProguardConfigDir.get());,if (resolver != null ) Path proguardConfigDir = resolver.getRelativePath(pathToGeneratedProguardConfigDir.get());
AndroidBinary.java,Path proguardConfigDir = resolver.getRelativePath(pathToGeneratedProguardConfigDir.get());,if (resolver != null ) Path proguardConfigDir = resolver.getRelativePath(pathToGeneratedProguardConfigDir.get());
ActionGraphCache.java,final int numberOfNodes = targetGraph.getNodes().size();,if (targetGraph != null ) final int numberOfNodes = targetGraph.getNodes().size();
AndroidBinary.java,Optional<PackageStringAssets> packageStringAssets = enhancementResult.getPackageStringAssets();,if (enhancementResult != null ) Optional<PackageStringAssets> packageStringAssets = enhancementResult.getPackageStringAssets();
AndroidBinary.java,final Path pathToStringAssetsZip = packageStringAssets.get().getPathToStringAssetsZip();,if (packageStringAssets != null ) final Path pathToStringAssetsZip = packageStringAssets.get().getPathToStringAssetsZip();
AppleBundle.java,final Path binaryOutputPath = binary.get().getPathToOutput();,if (binary != null ) final Path binaryOutputPath = binary.get().getPathToOutput();
AppleBundle.java,Path dsymPath = appleDsym.get().getPathToOutput();,if (appleDsym != null ) Path dsymPath = appleDsym.get().getPathToOutput();
BuiltinApplePackage.java,Path bundleOutputPath = bundle.getPathToOutput();,if (bundle != null ) Path bundleOutputPath = bundle.getPathToOutput();
BuildCommand.java,Path output = rule.getPathToOutput();,if (rule != null ) Path output = rule.getPathToOutput();
InstallCommand.java,Path buildRuleOutputPath = buildRule.getPathToOutput();,if (buildRule != null ) Path buildRuleOutputPath = buildRule.getPathToOutput();
InstallCommand.java,Optional<Path> helperOverridePath = appleConfig.getAppleDeviceHelperPath();,if (appleConfig != null ) Optional<Path> helperOverridePath = appleConfig.getAppleDeviceHelperPath();
InstallCommand.java,helperPath = projectFilesystem.resolve(helperOverridePath.get());,if (projectFilesystem != null ) helperPath = projectFilesystem.resolve(helperOverridePath.get());
TargetsCommand.java,Optional<Path> outputPathOptional = Optional.ofNullable(rule.getPathToOutput());,if (Optional != null ) Optional<Path> outputPathOptional = Optional.ofNullable(rule.getPathToOutput());
BuildReport.java,outputFile = rule.getPathToOutput();,if (rule != null ) outputFile = rule.getPathToOutput();
BuildReport.java,Path outputFile = rule.getPathToOutput();,if (rule != null ) Path outputFile = rule.getPathToOutput();
BuildCommandTest.java,String observedReport = new BuildReport(buildExecutionResult).generateJsonBuildReport();,if (BuildReport(buildExecutionResult) != null ) String observedReport = new BuildReport(buildExecutionResult).generateJsonBuildReport();
CxxLibraryDescription.java,ImmutableList<String> extraLdFlags = extraLdFlagsBuilder.build();,if (extraLdFlagsBuilder != null ) ImmutableList<String> extraLdFlags = extraLdFlagsBuilder.build();
DepQueryUtils.java,ListeningExecutorService executorService = MoreExecutors.newDirectExecutorService();,if (MoreExecutors != null ) ListeningExecutorService executorService = MoreExecutors.newDirectExecutorService();
TargetNodeTranslator.java,Optional<A> inner = translate(val.get());,if (translate(val != null ) Optional<A> inner = translate(val.get());
TargetNodeTranslator.java,Optional<A> key = translate(ent.getKey());,if (translate(ent != null ) Optional<A> key = translate(ent.getKey());
TargetNodeTranslator.java,Optional<B> value = translate(ent.getValue());,if (translate(ent != null ) Optional<B> value = translate(ent.getValue());
TargetNodeTranslator.java,Optional<A> key = translate(ent.getKey());,if (translate(ent != null ) Optional<A> key = translate(ent.getKey());
TargetNodeTranslator.java,Optional<B> value = translate(ent.getValue());,if (translate(ent != null ) Optional<B> value = translate(ent.getValue());
TargetNodeTranslator.java,Optional<A> first = translate(val.getFirst());,if (translate(val != null ) Optional<A> first = translate(val.getFirst());
TargetNodeTranslator.java,Optional<B> second = translate(val.getSecond());,if (translate(val != null ) Optional<B> second = translate(val.getSecond());
TargetNodeTranslator.java,Optional<SourcePath> translatedSourcePath = translate(val.getSourcePath());,if (translate(val != null ) Optional<SourcePath> translatedSourcePath = translate(val.getSourcePath());
Main.java,this.hashCache = new WatchedFileHashCache(cell.getFilesystem());,if (WatchedFileHashCache(cell != null ) this.hashCache = new WatchedFileHashCache(cell.getFilesystem());
WatchmanWatcher.java,WatchmanCursor cursor = cursors.get(entry.getKey());,if (cursors != null ) WatchmanCursor cursor = cursors.get(entry.getKey());
MergeAndroidResourcesStep.java,String attrName = styleableResource.name.substring(styleablePrefix.length());,if (styleableResource != null ) String attrName = styleableResource.name.substring(styleablePrefix.length());
AbstractCxxSourceRuleFactory.java,Optional<PrecompiledHeaderReference> precompiledHeaderReference = Optional.empty();,if (Optional != null ) Optional<PrecompiledHeaderReference> precompiledHeaderReference = Optional.empty();
CxxPreprocessAndCompile.java,pch = Optional.empty();,if (Optional != null ) pch = Optional.empty();
AndroidBinaryGraphEnhancer.java,Path buildConfigJar = buildConfigJavaLibrary.getPathToOutput();,if (buildConfigJavaLibrary != null ) Path buildConfigJar = buildConfigJavaLibrary.getPathToOutput();
TestRunning.java,classesItem = rule.getPathToOutput();,if (rule != null ) classesItem = rule.getPathToOutput();
CsharpLibrary.java,Path outputPath = Preconditions.checkNotNull(rule.getPathToOutput());,if (Preconditions != null ) Path outputPath = Preconditions.checkNotNull(rule.getPathToOutput());
GwtBinary.java,Path workingDirectory = getPathToOutput().getParent();,if (getPathToOutput() != null ) Path workingDirectory = getPathToOutput().getParent();
AnnotationProcessingParams.java,Path pathToOutput = rule.getPathToOutput();,if (rule != null ) Path pathToOutput = rule.getPathToOutput();
LocationMacroExpander.java,Path output = rule.getPathToOutput();,if (rule != null ) Path output = rule.getPathToOutput();
BadInstanceMethodTest.java,String value = new BadInstanceMethodImpl().method();,if (BadInstanceMethodImpl() != null ) String value = new BadInstanceMethodImpl().method();
AndroidLibraryDescription.java,ImmutableSet<Path> additionalClasspathEntries = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<Path> additionalClasspathEntries = ImmutableSet.of();
RobolectricTestDescription.java,ImmutableSet<Path> additionalClasspathEntries = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<Path> additionalClasspathEntries = ImmutableSet.of();
KotlinBuckConfigTest.java,Path runtimeJar = kotlinBuckConfig.getPathToRuntimeJar();,if (kotlinBuckConfig != null ) Path runtimeJar = kotlinBuckConfig.getPathToRuntimeJar();
KotlinBuckConfigTest.java,Path runtimeJar = kotlinBuckConfig.getPathToRuntimeJar();,if (kotlinBuckConfig != null ) Path runtimeJar = kotlinBuckConfig.getPathToRuntimeJar();
KotlinBuckConfigTest.java,Path runtimeJar = kotlinBuckConfig.getPathToRuntimeJar();,if (kotlinBuckConfig != null ) Path runtimeJar = kotlinBuckConfig.getPathToRuntimeJar();
SerializableAndroidAar.java,Path jar = preBuiltAar.getBinaryJar();,if (preBuiltAar != null ) Path jar = preBuiltAar.getBinaryJar();
AndroidPrebuiltAarBuilder.java,arg.aar = new FakeSourcePath(binaryAar.toString());,if (FakeSourcePath(binaryAar != null ) arg.aar = new FakeSourcePath(binaryAar.toString());
MergeAndroidResourcesStep.java,RDotTxtEntry resource = parsedEntry.get();,if (parsedEntry != null ) RDotTxtEntry resource = parsedEntry.get();
AdbHelper.java,Optional<ExopackageInfo> exopackageInfo = installableApk.getExopackageInfo();,if (installableApk != null ) Optional<ExopackageInfo> exopackageInfo = installableApk.getExopackageInfo();
AdbHelper.java,InstallEvent.Started started = InstallEvent.started(installableApk.getBuildTarget());,if (InstallEvent != null ) InstallEvent.Started started = InstallEvent.started(installableApk.getBuildTarget());
ExopackageInstaller.java,Optional<ExopackageInfo> exopackageInfo = apkRule.getExopackageInfo();,if (apkRule != null ) Optional<ExopackageInfo> exopackageInfo = apkRule.getExopackageInfo();
JavaTestRuleTest.java,"ImmutableList<String> amended = rule.amendVmArgs(vmArgs, Optional.empty());","if (Optional != null ) ImmutableList<String> amended = rule.amendVmArgs(vmArgs, Optional.empty());"
ClassVisitorDriverFromElement.java,DeclaredType annotationType = annotation.getAnnotationType();,if (annotation != null ) DeclaredType annotationType = annotation.getAnnotationType();
ClassVisitorDriverFromElement.java,TypeElement annotationTypeElement = (TypeElement) annotationType.asElement();,if (annotationType != null ) TypeElement annotationTypeElement = (TypeElement) annotationType.asElement();
ClassVisitorDriverFromElement.java,DeclaredType annotationType = annotationMirror.getAnnotationType();,if (annotationMirror != null ) DeclaredType annotationType = annotationMirror.getAnnotationType();
ClassVisitorDriverFromElement.java,TypeElement annotationTypeElement = (TypeElement) annotationType.asElement();,if (annotationType != null ) TypeElement annotationTypeElement = (TypeElement) annotationType.asElement();
ClassVisitorDriverFromElement.java,AnnotationVisitor annotationVisitor = methodVisitor.visitAnnotationDefault();,if (methodVisitor != null ) AnnotationVisitor annotationVisitor = methodVisitor.visitAnnotationDefault();
StubJarTest.java,final File outputDir = temp.newFolder();,if (temp != null ) final File outputDir = temp.newFolder();
GenerateManifestStep.java,File outManifestFile = outManifestPath.toFile();,if (outManifestPath != null ) File outManifestFile = outManifestPath.toFile();
ManifestMerger.java,String value = attr.getNodeValue();,if (attr != null ) String value = attr.getNodeValue();
ManifestMerger.java,Node end = src.getNextSibling();,if (src != null ) Node end = src.getNextSibling();
ManifestMerger.java,current = forRemoval.getNextSibling();,if (forRemoval != null ) current = forRemoval.getNextSibling();
ManifestMerger.java,NamedNodeMap attrs = node.getAttributes();,if (node != null ) NamedNodeMap attrs = node.getAttributes();
ManifestMerger.java,destMinSdk = destValue.get();,if (destValue != null ) destMinSdk = destValue.get();
ManifestMerger.java,Node prev = start.getPreviousSibling();,if (start != null ) Node prev = start.getPreviousSibling();
ManifestMerger.java,short t = prev.getNodeType();,if (prev != null ) short t = prev.getNodeType();
ManifestMerger.java,String text = prev.getNodeValue();,if (prev != null ) String text = prev.getNodeValue();
ManifestMerger.java,prev = start.getPreviousSibling();,if (start != null ) prev = start.getPreviousSibling();
ManifestMerger.java,Node target = dest.getLastChild();,if (dest != null ) Node target = dest.getLastChild();
ManifestMerger.java,String text = target.getNodeValue();,if (target != null ) String text = target.getNodeValue();
ManifestMerger.java,target = target.getPreviousSibling();,if (target != null ) target = target.getPreviousSibling();
ManifestMerger.java,target = target.getNextSibling();,if (target != null ) target = target.getNextSibling();
ManifestMerger.java,start = start.getNextSibling();,if (start != null ) start = start.getNextSibling();
ManifestMerger.java,Node child = node.getFirstChild();,if (node != null ) Node child = node.getFirstChild();
XmlUtils.java,DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();,if (DocumentBuilderFactory != null ) DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
XmlUtils.java,DocumentBuilder builder = factory.newDocumentBuilder();,if (factory != null ) DocumentBuilder builder = factory.newDocumentBuilder();
XmlUtils.java,DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();,if (DocumentBuilderFactory != null ) DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
XmlUtils.java,DocumentBuilder builder = factory.newDocumentBuilder();,if (factory != null ) DocumentBuilder builder = factory.newDocumentBuilder();
XmlUtils.java,xmlNode = xmlNode.getOwnerDocument();,if (xmlNode != null ) xmlNode = xmlNode.getOwnerDocument();
XmlUtils.java,xmlNode = xmlNode.getOwnerDocument();,if (xmlNode != null ) xmlNode = xmlNode.getOwnerDocument();
XmlUtils.java,String text = node.getNodeValue();,if (node != null ) String text = node.getNodeValue();
XmlUtils.java,Node child = node.getFirstChild();,if (node != null ) Node child = node.getFirstChild();
XmlUtils.java,Transformer tf = TransformerFactory.newInstance().newTransformer();,if (TransformerFactory != null ) Transformer tf = TransformerFactory.newInstance().newTransformer();
XmlUtils.java,Transformer tf = TransformerFactory.newInstance().newTransformer();,if (TransformerFactory != null ) Transformer tf = TransformerFactory.newInstance().newTransformer();
XmlUtils.java,short t = node.getNodeType();,if (node != null ) short t = node.getNodeType();
XmlUtils.java,NamedNodeMap attrs = node.getAttributes();,if (node != null ) NamedNodeMap attrs = node.getAttributes();
XmlUtils.java,String txt = node.getNodeValue().trim();,if (node != null ) String txt = node.getNodeValue().trim();
XmlUtils.java,List<Attr> attrs = sortedAttributeList(node.getAttributes());,if (sortedAttributeList(node != null ) List<Attr> attrs = sortedAttributeList(node.getAttributes());
XmlUtils.java,Node child = node.getFirstChild();,if (node != null ) Node child = node.getFirstChild();
CommandLineParser.java,lastDefault = arg.getCurrentValue();,if (arg != null ) lastDefault = arg.getCurrentValue();
CommandLineParser.java,Arg arg = entry.getValue();,if (entry != null ) Arg arg = entry.getValue();
CommandLineParser.java,Arg arg = entry.getValue();,if (entry != null ) Arg arg = entry.getValue();
CommandLineParser.java,Arg arg = entry.getValue();,if (entry != null ) Arg arg = entry.getValue();
CommandLineParser.java,int n = arg.getLongArg().length();,if (arg != null ) int n = arg.getLongArg().length();
CommandLineParser.java,Arg arg = entry.getValue();,if (entry != null ) Arg arg = entry.getValue();
CommandLineParser.java,Object v = arg.getDefaultValue();,if (arg != null ) Object v = arg.getDefaultValue();
CommandLineParser.java,String[] values = (String[]) arg.getDefaultValue();,if (arg != null ) String[] values = (String[]) arg.getDefaultValue();
CommandLineParser.java,Object v = arg.getCurrentValue();,if (arg != null ) Object v = arg.getCurrentValue();
ManifestMergerTestCase.java,StackTraceElement[] stack = Thread.currentThread().getStackTrace();,if (Thread != null ) StackTraceElement[] stack = Thread.currentThread().getStackTrace();
ManifestMergerTestCase.java,String name = caller.getMethodName();,if (caller != null ) String name = caller.getMethodName();
ManifestMergerTestCase.java,File tempDir = tempFile.getParentFile();,if (tempFile != null ) File tempDir = tempFile.getParentFile();
ManifestMergerTestCase.java,String expectedErrors = testFiles.getExpectedErrors().trim();,if (testFiles != null ) String expectedErrors = testFiles.getExpectedErrors().trim();
ExopackageInstaller.java,OutputStream outToDevice = clientSocket.getOutputStream();,if (clientSocket != null ) OutputStream outToDevice = clientSocket.getOutputStream();
ZipWalker.java,Set<String> names = Sets.newTreeSet();,if (Sets != null ) Set<String> names = Sets.newTreeSet();
ZipWalker.java,FileInputStream fis = new FileInputStream(zipFile.toFile());,if (FileInputStream(zipFile != null ) FileInputStream fis = new FileInputStream(zipFile.toFile());
ExpressionTreeResolutionValidator.java,treesElements = frontendTask.getElements();,if (frontendTask != null ) treesElements = frontendTask.getElements();
ExpressionTreeResolutionValidator.java,Name qualifiedName = javacElement.getQualifiedName();,if (javacElement != null ) Name qualifiedName = javacElement.getQualifiedName();
ValidatingTaskListener.java,trees = frontendTask.getTrees();,if (frontendTask != null ) trees = frontendTask.getTrees();
BuildLogHelper.java,String line = bufferedReader.readLine();,if (bufferedReader != null ) String line = bufferedReader.readLine();
Main.java,env = ImmutableMap.copyOf(System.getenv());,if (ImmutableMap != null ) env = ImmutableMap.copyOf(System.getenv());
EnvironmentFilter.java,String key = envEntry.getKey();,if (envEntry != null ) String key = envEntry.getKey();
BuildTraces.java,String name = nameEl.getAsString();,if (nameEl != null ) String name = nameEl.getAsString();
TracesHandlerDelegate.java,Collection<Path> traceFiles = buildTraces.listTraceFilesByLastModified();,if (buildTraces != null ) Collection<Path> traceFiles = buildTraces.listTraceFilesByLastModified();
TraceDataHandler.java,Iterator<InputStream> traceStreams = tracesHelper.getInputsForTraces(id).iterator();,if (tracesHelper != null ) Iterator<InputStream> traceStreams = tracesHelper.getInputsForTraces(id).iterator();
TracesHandlerDelegate.java,Collection<Path> traceFiles = tracesHelper.listTraceFilesByLastModified();,if (tracesHelper != null ) Collection<Path> traceFiles = tracesHelper.listTraceFilesByLastModified();
CxxCompilationDatabase.java,ImmutableList<String> arguments = compileRule.getCommand();,if (compileRule != null ) ImmutableList<String> arguments = compileRule.getCommand();
BuildSlaveInfo.java,struct.logDirZipContents = iprot.readBinary();,if (iprot != null ) struct.logDirZipContents = iprot.readBinary();
BuildSlaveInfo.java,struct.logDirZipContents = iprot.readBinary();,if (iprot != null ) struct.logDirZipContents = iprot.readBinary();
DistBuildLoggerListener.java,int endIndex = fullLog.size(); // Exclusive,if (Exclusive != null ) int endIndex = fullLog.size(); // Exclusive
PublishCommand.java,ImmutableSet<DeployResult> deployResults = publisher.publish(publishables.build());,if (publisher != null ) ImmutableSet<DeployResult> deployResults = publisher.publish(publishables.build());
Publisher.java,File pom = Pom.generatePomFile(publishable).toFile();,if (Pom != null ) File pom = Pom.generatePomFile(publishable).toFile();
Depfiles.java,Path header = filesystem.getPath(rawHeader).normalize();,if (filesystem != null ) Path header = filesystem.getPath(rawHeader).normalize();
BuildKeepGoingIntegrationTest.java,ObjectMapper mapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper mapper = ObjectMappers.newDefaultInstance();
JavaTest.java,Path relativeOutputPath = rule.getPathToOutput();,if (rule != null ) Path relativeOutputPath = rule.getPathToOutput();
JavaTestGetClassNamesIntegrationTest.java,projectFilesystem = new ProjectFilesystem(temporaryFolder.getRoot());,if (ProjectFilesystem(temporaryFolder != null ) projectFilesystem = new ProjectFilesystem(temporaryFolder.getRoot());
AnnotationProcessingParams.java,Set<Path> searchPathElements = Sets.newHashSet();,if (Sets != null ) Set<Path> searchPathElements = Sets.newHashSet();
DefaultJavaLibraryTest.java,buildRuleIndex = Maps.newHashMap();,if (Maps != null ) buildRuleIndex = Maps.newHashMap();
ProjectFilesystem.java,CustomZipEntry entry = new CustomZipEntry(fileContentsEntry.getKey());,if (CustomZipEntry(fileContentsEntry != null ) CustomZipEntry entry = new CustomZipEntry(fileContentsEntry.getKey());
BuildCommand.java,ImmutableSet<String> aliases = params.getBuckConfig().getAliases();,if (params != null ) ImmutableSet<String> aliases = params.getBuckConfig().getAliases();
AbstractCommand.java,loadLimit = (double) buckConfig.getLoadLimit();,if (buckConfig != null ) loadLimit = (double) buckConfig.getLoadLimit();
GenerateManifestStep.java,BuckEventAndroidLogger logger = new ManifestMergerLogger(context.getBuckEventBus());,if (ManifestMergerLogger(context != null ) BuckEventAndroidLogger logger = new ManifestMergerLogger(context.getBuckEventBus());
GenerateManifestStepTest.java,String output = filesystem.readFileIfItExists(manifestPath).get();,if (filesystem != null ) String output = filesystem.readFileIfItExists(manifestPath).get();
Message.java,mToolName = Optional.absent();,if (Optional != null ) mToolName = Optional.absent();
MessageJsonSerializer.java,mSourcePositionTypeAdapter = mSourceFilePositionTypeAdapter.getSourcePositionTypeAdapter();,if (mSourceFilePositionTypeAdapter != null ) mSourcePositionTypeAdapter = mSourceFilePositionTypeAdapter.getSourcePositionTypeAdapter();
MessageJsonSerializer.java,Optional<String> toolName = Optional.absent();,if (Optional != null ) Optional<String> toolName = Optional.absent();
MessageJsonSerializer.java,String name = in.nextName();,if (in != null ) String name = in.nextName();
MessageJsonSerializer.java,text = in.nextString();,if (in != null ) text = in.nextString();
MessageJsonSerializer.java,rawMessage = in.nextString();,if (in != null ) rawMessage = in.nextString();
MessageJsonSerializer.java,toolName = Optional.of(in.nextString());,if (Optional != null ) toolName = Optional.of(in.nextString());
MessageJsonSerializer.java,ImmutableList<SourceFilePosition> sourceFilePositions = positions.build();,if (positions != null ) ImmutableList<SourceFilePosition> sourceFilePositions = positions.build();
SourceFile.java,String fileName = mSourceFile.getName();,if (mSourceFile != null ) String fileName = mSourceFile.getName();
SourceFileJsonTypeAdapter.java,File file = src.getSourceFile();,if (src != null ) File file = src.getSourceFile();
SourceFileJsonTypeAdapter.java,String description = src.getDescription();,if (src != null ) String description = src.getDescription();
SourceFileJsonTypeAdapter.java,String name = in.nextName();,if (in != null ) String name = in.nextName();
SourceFileJsonTypeAdapter.java,filePath = in.nextString();,if (in != null ) filePath = in.nextString();
SourceFileJsonTypeAdapter.java,description = in.nextString();,if (in != null ) description = in.nextString();
SourceFileJsonTypeAdapter.java,String fileName = in.nextString();,if (in != null ) String fileName = in.nextString();
SourceFilePositionJsonSerializer.java,String name = in.nextName();,if (in != null ) String name = in.nextName();
SourceFilePositionJsonSerializer.java,SourceFile sourceFile = src.getFile();,if (src != null ) SourceFile sourceFile = src.getFile();
SourceFilePositionJsonSerializer.java,SourcePosition position = src.getPosition();,if (src != null ) SourcePosition position = src.getPosition();
SourcePosition.java,mStartLine = copy.getStartLine();,if (copy != null ) mStartLine = copy.getStartLine();
SourcePosition.java,mStartColumn = copy.getStartColumn();,if (copy != null ) mStartColumn = copy.getStartColumn();
SourcePosition.java,mStartOffset = copy.getStartOffset();,if (copy != null ) mStartOffset = copy.getStartOffset();
SourcePosition.java,mEndLine = copy.getEndLine();,if (copy != null ) mEndLine = copy.getEndLine();
SourcePosition.java,mEndColumn = copy.getEndColumn();,if (copy != null ) mEndColumn = copy.getEndColumn();
SourcePosition.java,mEndOffset = copy.getEndOffset();,if (copy != null ) mEndOffset = copy.getEndOffset();
SourcePositionJsonTypeAdapter.java,int startLine = value.getStartLine();,if (value != null ) int startLine = value.getStartLine();
SourcePositionJsonTypeAdapter.java,int startColumn = value.getStartColumn();,if (value != null ) int startColumn = value.getStartColumn();
SourcePositionJsonTypeAdapter.java,int startOffset = value.getStartOffset();,if (value != null ) int startOffset = value.getStartOffset();
SourcePositionJsonTypeAdapter.java,int endLine = value.getEndLine();,if (value != null ) int endLine = value.getEndLine();
SourcePositionJsonTypeAdapter.java,int endColumn = value.getEndColumn();,if (value != null ) int endColumn = value.getEndColumn();
SourcePositionJsonTypeAdapter.java,int endOffset = value.getEndOffset();,if (value != null ) int endOffset = value.getEndOffset();
SourcePositionJsonTypeAdapter.java,String name = in.nextName();,if (in != null ) String name = in.nextName();
SourcePositionJsonTypeAdapter.java,startLine = in.nextInt();,if (in != null ) startLine = in.nextInt();
SourcePositionJsonTypeAdapter.java,startColumn = in.nextInt();,if (in != null ) startColumn = in.nextInt();
SourcePositionJsonTypeAdapter.java,startOffset = in.nextInt();,if (in != null ) startOffset = in.nextInt();
SourcePositionJsonTypeAdapter.java,endLine = in.nextInt();,if (in != null ) endLine = in.nextInt();
SourcePositionJsonTypeAdapter.java,endColumn = in.nextInt();,if (in != null ) endColumn = in.nextInt();
SourcePositionJsonTypeAdapter.java,endOffset = in.nextInt();,if (in != null ) endOffset = in.nextInt();
MergingException.java,int lineNumber = exception.getLineNumber();,if (exception != null ) int lineNumber = exception.getLineNumber();
MergingException.java,List<String> messages = Lists.newArrayListWithCapacity(mMessages.size());,if (Lists != null ) List<String> messages = Lists.newArrayListWithCapacity(mMessages.size());
MergingException.java,List<SourceFilePosition> sourceFilePositions = message.getSourceFilePositions();,if (message != null ) List<SourceFilePosition> sourceFilePositions = message.getSourceFilePositions();
MergingException.java,String text = message.getText();,if (message != null ) String text = message.getText();
MergingException.java,String path = file.getAbsolutePath();,if (file != null ) String path = file.getAbsolutePath();
MergingException.java,int stripStart = path.length();,if (path != null ) int stripStart = path.length();
XmlFormatStyle.java,Element root = doc.getDocumentElement();,if (doc != null ) Element root = doc.getDocumentElement();
XmlFormatStyle.java,String tag = root.getTagName();,if (root != null ) String tag = root.getTagName();
XmlPrettyPrinter.java,lineSeparator = SdkUtils.getLineSeparator();,if (SdkUtils != null ) lineSeparator = SdkUtils.getLineSeparator();
XmlPrettyPrinter.java,String xml = sb.toString();,if (sb != null ) String xml = sb.toString();
XmlPrettyPrinter.java,mIndentString = mPrefs.getOneIndentUnit();,if (mPrefs != null ) mIndentString = mPrefs.getOneIndentUnit();
XmlPrettyPrinter.java,NodeList children = node.getChildNodes();,if (node != null ) NodeList children = node.getChildNodes();
XmlPrettyPrinter.java,short type = node.getNodeType();,if (node != null ) short type = node.getNodeType();
XmlPrettyPrinter.java,short type = node.getNodeType();,if (node != null ) short type = node.getNodeType();
XmlPrettyPrinter.java,String nodeValue = node.getNodeValue();,if (node != null ) String nodeValue = node.getNodeValue();
XmlPrettyPrinter.java,String text = node.getNodeValue();,if (node != null ) String text = node.getNodeValue();
XmlPrettyPrinter.java,String trimmed = text.trim();,if (text != null ) String trimmed = text.trim();
XmlPrettyPrinter.java,firstSuffixNewline = text.length();,if (text != null ) firstSuffixNewline = text.length();
XmlPrettyPrinter.java,Node left = node.getPreviousSibling();,if (node != null ) Node left = node.getPreviousSibling();
XmlPrettyPrinter.java,Node right = node.getNextSibling();,if (node != null ) Node right = node.getNextSibling();
XmlPrettyPrinter.java,Node left = node.getPreviousSibling();,if (node != null ) Node left = node.getPreviousSibling();
XmlPrettyPrinter.java,Node right = node.getNextSibling();,if (node != null ) Node right = node.getNextSibling();
XmlPrettyPrinter.java,String comment = node.getNodeValue();,if (node != null ) String comment = node.getNodeValue();
XmlPrettyPrinter.java,String trimmed = comment.trim();,if (comment != null ) String trimmed = comment.trim();
XmlPrettyPrinter.java,Node previous = node.getPreviousSibling();,if (node != null ) Node previous = node.getPreviousSibling();
XmlPrettyPrinter.java,short type = previous.getNodeType();,if (previous != null ) short type = previous.getNodeType();
XmlPrettyPrinter.java,previous = previous.getPreviousSibling();,if (previous != null ) previous = previous.getPreviousSibling();
XmlPrettyPrinter.java,Node curr = node.getPreviousSibling();,if (node != null ) Node curr = node.getPreviousSibling();
XmlPrettyPrinter.java,String text = curr.getNodeValue();,if (curr != null ) String text = curr.getNodeValue();
XmlPrettyPrinter.java,int end = comment.length();,if (comment != null ) int end = comment.length();
XmlPrettyPrinter.java,Node previous = node.getPreviousSibling();,if (node != null ) Node previous = node.getPreviousSibling();
XmlPrettyPrinter.java,String prevText = previous.getNodeValue();,if (previous != null ) String prevText = previous.getNodeValue();
XmlPrettyPrinter.java,Node next = node.getNextSibling();,if (node != null ) Node next = node.getNextSibling();
XmlPrettyPrinter.java,String text = next.getNodeValue();,if (next != null ) String text = next.getNodeValue();
XmlPrettyPrinter.java,int separatorLength = mLineSeparator.length();,if (mLineSeparator != null ) int separatorLength = mLineSeparator.length();
XmlPrettyPrinter.java,int newLength = mOut.length() - mLineSeparator.length();,if (mLineSeparator != null ) int newLength = mOut.length() - mLineSeparator.length();
XmlPrettyPrinter.java,NamedNodeMap attributes = element.getAttributes();,if (element != null ) NamedNodeMap attributes = element.getAttributes();
XmlPrettyPrinter.java,int attributeCount = attributes.getLength();,if (attributes != null ) int attributeCount = attributes.getLength();
XmlPrettyPrinter.java,Comparator<Attr> comparator = mPrefs.getAttributeComparator();,if (mPrefs != null ) Comparator<Attr> comparator = mPrefs.getAttributeComparator();
XmlPrettyPrinter.java,Node curr = element.getPreviousSibling();,if (element != null ) Node curr = element.getPreviousSibling();
XmlPrettyPrinter.java,short nodeType = curr.getNodeType();,if (curr != null ) short nodeType = curr.getNodeType();
XmlPrettyPrinter.java,String text = curr.getNodeValue();,if (curr != null ) String text = curr.getNodeValue();
XmlPrettyPrinter.java,curr = curr.getPreviousSibling();,if (curr != null ) curr = curr.getPreviousSibling();
XmlPrettyPrinter.java,Node curr = element.getParentNode();,if (element != null ) Node curr = element.getParentNode();
XmlPrettyPrinter.java,curr = curr.getParentNode();,if (curr != null ) curr = curr.getParentNode();
XmlPrettyPrinter.java,String tag = element.getTagName();,if (element != null ) String tag = element.getTagName();
XmlPrettyPrinter.java,String tag = element.getTagName();,if (element != null ) String tag = element.getTagName();
XmlPrettyPrinter.java,List<File> files = Lists.newArrayList();,if (Lists != null ) List<File> files = Lists.newArrayList();
XmlPrettyPrinter.java,XmlFormatPreferences prefs = XmlFormatPreferences.defaults();,if (XmlFormatPreferences != null ) XmlFormatPreferences prefs = XmlFormatPreferences.defaults();
XmlPrettyPrinter.java,File file = new File(arg).getAbsoluteFile();,if (File(arg) != null ) File file = new File(arg).getAbsoluteFile();
XmlPrettyPrinter.java,File[] files = file.listFiles();,if (file != null ) File[] files = file.listFiles();
XmlPrettyPrinter.java,File parent = file.getParentFile();,if (file != null ) File parent = file.getParentFile();
XmlPrettyPrinter.java,String parentName = parent.getName();,if (parent != null ) String parentName = parent.getName();
FileWrapper.java,String p = this.getParent();,if (this != null ) String p = this.getParent();
FolderWrapper.java,String p = this.getParent();,if (this != null ) String p = this.getParent();
AndroidVersion.java,codename = codename.trim();,if (codename != null ) codename = codename.trim();
SdkVersionInfo.java,int n = string.length();,if (string != null ) int n = string.length();
SdkVersionInfo.java,StringBuilder sb = new StringBuilder(string.length());,if (StringBuilder(string != null ) StringBuilder sb = new StringBuilder(string.length());
SdkVersionInfo.java,int n = string.length();,if (string != null ) int n = string.length();
SdkVersionInfo.java,String codeName = version.getCodename();,if (version != null ) String codeName = version.getCodename();
SdkVersionInfo.java,codeName = getCodeName(version.getApiLevel());,if (getCodeName(version != null ) codeName = getCodeName(version.getApiLevel());
SdkVersionInfo.java,String versionString = getVersionString(version.getFeatureLevel());,if (getVersionString(version != null ) String versionString = getVersionString(version.getFeatureLevel());
SdkVersionInfo.java,String codeName = version.getCodename();,if (version != null ) String codeName = version.getCodename();
SdkVersionInfo.java,codeName = getCodeName(version.getFeatureLevel());,if (getCodeName(version != null ) codeName = getCodeName(version.getFeatureLevel());
PositionXmlParser.java,SAXParserFactory factory = SAXParserFactory.newInstance();,if (SAXParserFactory != null ) SAXParserFactory factory = SAXParserFactory.newInstance();
PositionXmlParser.java,SAXParser parser = factory.newSAXParser();,if (factory != null ) SAXParser parser = factory.newSAXParser();
PositionXmlParser.java,XMLReader xmlReader = parser.getXMLReader();,if (parser != null ) XMLReader xmlReader = parser.getXMLReader();
PositionXmlParser.java,String prologue = sb.toString();,if (sb != null ) String prologue = sb.toString();
PositionXmlParser.java,Element root = document.getDocumentElement();,if (document != null ) Element root = document.getDocumentElement();
PositionXmlParser.java,NodeList children = node.getChildNodes();,if (node != null ) NodeList children = node.getChildNodes();
PositionXmlParser.java,NamedNodeMap attributes = node.getAttributes();,if (node != null ) NamedNodeMap attributes = node.getAttributes();
PositionXmlParser.java,Element root = document.getDocumentElement();,if (document != null ) Element root = document.getDocumentElement();
PositionXmlParser.java,NodeList children = node.getChildNodes();,if (node != null ) NodeList children = node.getChildNodes();
PositionXmlParser.java,NamedNodeMap attributes = node.getAttributes();,if (node != null ) NamedNodeMap attributes = node.getAttributes();
PositionXmlParser.java,int startOffset = pos.getOffset();,if (pos != null ) int startOffset = pos.getOffset();
PositionXmlParser.java,int endOffset = pos.getEnd().getOffset();,if (pos != null ) int endOffset = pos.getEnd().getOffset();
PositionXmlParser.java,String name = attr.getName();,if (attr != null ) String name = attr.getName();
PositionXmlParser.java,int line = pos.getLine();,if (pos != null ) int line = pos.getLine();
PositionXmlParser.java,int column = pos.getColumn();,if (pos != null ) int column = pos.getColumn();
PositionXmlParser.java,int startOffset = pos.getOffset();,if (pos != null ) int startOffset = pos.getOffset();
PositionXmlParser.java,int endOffset = pos.getEnd().getOffset();,if (pos != null ) int endOffset = pos.getEnd().getOffset();
PositionXmlParser.java,int line = pos.getLine();,if (pos != null ) int line = pos.getLine();
PositionXmlParser.java,int column = pos.getColumn();,if (pos != null ) int column = pos.getColumn();
PositionXmlParser.java,String text = node.getNodeValue();,if (node != null ) String text = node.getNodeValue();
PositionXmlParser.java,int textLength = text.length();,if (text != null ) int textLength = text.length();
PositionXmlParser.java,DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();,if (DocumentBuilderFactory != null ) DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
PositionXmlParser.java,DocumentBuilder docBuilder = factory.newDocumentBuilder();,if (factory != null ) DocumentBuilder docBuilder = factory.newDocumentBuilder();
PositionXmlParser.java,mDocument = docBuilder.newDocument();,if (docBuilder != null ) mDocument = docBuilder.newDocument();
PositionXmlParser.java,int line = startingPosition.getLine();,if (startingPosition != null ) int line = startingPosition.getLine();
PositionXmlParser.java,int xmlLength = mXml.length();,if (mXml != null ) int xmlLength = mXml.length();
PositionXmlParser.java,Node textNode = mDocument.createTextNode(mPendingText.toString());,if (mDocument != null ) Node textNode = mDocument.createTextNode(mPendingText.toString());
PositionXmlParser.java,endLine = mEnd.getLine();,if (mEnd != null ) endLine = mEnd.getLine();
PositionXmlParser.java,endColumn = mEnd.getColumn();,if (mEnd != null ) endColumn = mEnd.getColumn();
PositionXmlParser.java,endOffset = mEnd.getOffset();,if (mEnd != null ) endOffset = mEnd.getOffset();
SdkUtils.java,int explanationLength = text.length();,if (text != null ) int explanationLength = text.length();
SdkUtils.java,lineWidth -= hangingIndent.length();,if (hangingIndent != null ) lineWidth -= hangingIndent.length();
SdkUtils.java,MalformedURLException ex = new MalformedURLException(e.getLocalizedMessage());,if (MalformedURLException(e != null ) MalformedURLException ex = new MalformedURLException(e.getLocalizedMessage());
SdkUtils.java,String url = fileToUrl(file).toExternalForm();,if (fileToUrl(file) != null ) String url = fileToUrl(file).toExternalForm();
SdkUtils.java,String s = writer.toString();,if (writer != null ) String s = writer.toString();
SdkUtils.java,String lineSeparator = SdkUtils.getLineSeparator();,if (SdkUtils != null ) String lineSeparator = SdkUtils.getLineSeparator();
SdkUtils.java,end -= lineSeparator.length();,if (lineSeparator != null ) end -= lineSeparator.length();
XmlUtils.java,NodeList children = node.getChildNodes();,if (node != null ) NodeList children = node.getChildNodes();
XmlUtils.java,DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();,if (DocumentBuilderFactory != null ) DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
XmlUtils.java,DocumentBuilder builder = factory.newDocumentBuilder();,if (factory != null ) DocumentBuilder builder = factory.newDocumentBuilder();
XmlUtils.java,DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();,if (DocumentBuilderFactory != null ) DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
XmlUtils.java,DocumentBuilder builder = factory.newDocumentBuilder();,if (factory != null ) DocumentBuilder builder = factory.newDocumentBuilder();
XmlUtils.java,short nodeType = node.getNodeType();,if (node != null ) short nodeType = node.getNodeType();
XmlUtils.java,int currentOffset = sb.getOffset();,if (sb != null ) int currentOffset = sb.getOffset();
XmlUtils.java,NodeList children = node.getChildNodes();,if (node != null ) NodeList children = node.getChildNodes();
XmlUtils.java,NamedNodeMap attributes = element.getAttributes();,if (element != null ) NamedNodeMap attributes = element.getAttributes();
XmlUtils.java,NodeList children = element.getChildNodes();,if (element != null ) NodeList children = element.getChildNodes();
XmlUtils.java,int childCount = children.getLength();,if (children != null ) int childCount = children.getLength();
XmlUtils.java,int attributeCount = attributes.getLength();,if (attributes != null ) int attributeCount = attributes.getLength();
XmlUtils.java,column += text.length();,if (text != null ) column += text.length();
XmlUtils.java,XMLInputFactory factory = XMLInputFactory.newFactory();,if (XMLInputFactory != null ) XMLInputFactory factory = XMLInputFactory.newFactory();
XmlUtils.java,int event = xmlStreamReader.next();,if (xmlStreamReader != null ) int event = xmlStreamReader.next();
AndroidManifest.java,String name = fullActivityName.substring(packageName.length());,if (fullActivityName != null ) String name = fullActivityName.substring(packageName.length());
AndroidManifest.java,XPath xpath = AndroidXPathFactory.newXPath();,if (AndroidXPathFactory != null ) XPath xpath = AndroidXPathFactory.newXPath();
AndroidManifest.java,is = file.getContents();,if (file != null ) is = file.getContents();
ActionRecorder.java,NodeKey storageKey = xmlElement.getOriginalId();,if (xmlElement != null ) NodeKey storageKey = xmlElement.getOriginalId();
ActionRecorder.java,nodeDecisionTree = new Actions.DecisionTreeRecord();,if (Actions != null ) nodeDecisionTree = new Actions.DecisionTreeRecord();
ActionRecorder.java,NodeKey storageKey = mergedElement.getOriginalId();,if (mergedElement != null ) NodeKey storageKey = mergedElement.getOriginalId();
ActionRecorder.java,nodeDecisionTree = new Actions.DecisionTreeRecord();,if (Actions != null ) nodeDecisionTree = new Actions.DecisionTreeRecord();
ActionRecorder.java,XmlElement originElement = attribute.getOwnerElement();,if (attribute != null ) XmlElement originElement = attribute.getOwnerElement();
ActionRecorder.java,XmlElement originElement = attribute.getOwnerElement();,if (attribute != null ) XmlElement originElement = attribute.getOwnerElement();
ActionRecorder.java,NodeKey storageKey = originElement.getOriginalId();,if (originElement != null ) NodeKey storageKey = originElement.getOriginalId();
Actions.java,GsonBuilder gson = new GsonBuilder().setPrettyPrinting();,if (GsonBuilder() != null ) GsonBuilder gson = new GsonBuilder().setPrettyPrinting();
Actions.java,DecisionTreeRecord decisionTreeRecord = mRecords.get(element.getId());,if (mRecords != null ) DecisionTreeRecord decisionTreeRecord = mRecords.get(element.getId());
ElementsTrimmer.java,glEsVersionDeclarations = glEsVersionDeclarations.descendingMap();,if (glEsVersionDeclarations != null ) glEsVersionDeclarations = glEsVersionDeclarations.descendingMap();
ManifestMerger2.java,Optional<XmlDocument> xmlDocumentOptional = Optional.absent();,if (Optional != null ) Optional<XmlDocument> xmlDocumentOptional = Optional.absent();
ManifestMerger2.java,XmlDocument finalMergedDocument = xmlDocumentOptional.get();,if (xmlDocumentOptional != null ) XmlDocument finalMergedDocument = xmlDocumentOptional.get();
ManifestMerger2.java,MergingReport mergingReport = mergingReportBuilder.build();,if (mergingReportBuilder != null ) MergingReport mergingReport = mergingReportBuilder.build();
ManifestMerger2.java,XmlElement application = applicationOptional.get();,if (applicationOptional != null ) XmlElement application = applicationOptional.get();
ManifestMerger2.java,String originalAppName = nameAttribute.getValue();,if (nameAttribute != null ) String originalAppName = nameAttribute.getValue();
ManifestMerger2.java,fileWriter = new FileWriter(mReportFile.get());,if (FileWriter(mReportFile != null ) fileWriter = new FileWriter(mReportFile.get());
ManifestMerger2.java,String value = xmlAttribute.getValue();,if (xmlAttribute != null ) String value = xmlAttribute.getValue();
ManifestMerger2.java,String originalPackageName = xmlDocument.getPackageName();,if (xmlDocument != null ) String originalPackageName = xmlDocument.getPackageName();
ManifestMerger2.java,finalPlaceHolderValues = builder.build();,if (builder != null ) finalPlaceHolderValues = builder.build();
ManifestMerger2.java,result = Optional.of(lowerPriorityDocument.getXmlDocument());,if (Optional != null ) result = Optional.of(lowerPriorityDocument.getXmlDocument());
ManifestMerger2.java,MergingReport.Builder builder = new MergingReport.Builder(mergingReportBuilder.getLogger());,if (MergingReport != null ) MergingReport.Builder builder = new MergingReport.Builder(mergingReportBuilder.getLogger());
ManifestModel.java,NodeList childNodes = element.getChildNodes();,if (element != null ) NodeList childNodes = element.getChildNodes();
ManifestModel.java,this.mAttributeModels = attributeModels.build();,if (attributeModels != null ) this.mAttributeModels = attributeModels.build();
ManifestSystemProperty.java,String toolsPrefix = getAndroidPrefix(to.getXml());,if (getAndroidPrefix(to != null ) String toolsPrefix = getAndroidPrefix(to.getXml());
ManifestSystemProperty.java,Element manifest = document.getXml().getDocumentElement();,if (document != null ) Element manifest = document.getXml().getDocumentElement();
ManifestSystemProperty.java,NodeList nodes = manifest.getElementsByTagName(nodeType.toXmlName());,if (manifest != null ) NodeList nodes = manifest.getElementsByTagName(nodeType.toXmlName());
Merger.java,Iterator<String> arguments = Arrays.asList(args).iterator();,if (Arrays != null ) Iterator<String> arguments = Arrays.asList(args).iterator();
Merger.java,String selector = arguments.next();,if (arguments != null ) String selector = arguments.next();
Merger.java,String value = arguments.next();,if (arguments != null ) String value = arguments.next();
Merger.java,arguments = Arrays.asList(args).iterator();,if (Arrays != null ) arguments = Arrays.asList(args).iterator();
Merger.java,String selector = arguments.next();,if (arguments != null ) String selector = arguments.next();
Merger.java,String value = arguments.next();,if (arguments != null ) String value = arguments.next();
Merger.java,File library = checkPath(stringTokenizer.nextToken());,if (checkPath(stringTokenizer != null ) File library = checkPath(stringTokenizer.nextToken());
Merger.java,File library = checkPath(stringTokenizer.nextToken());,if (checkPath(stringTokenizer != null ) File library = checkPath(stringTokenizer.nextToken());
Merger.java,MergingReport merge = invoker.merge();,if (invoker != null ) MergingReport merge = invoker.merge();
OrphanXmlElement.java,String elementName = mXml.getNodeName();,if (mXml != null ) String elementName = mXml.getNodeName();
PlaceholderEncoder.java,Matcher matcher = PlaceholderHandler.PATTERN.matcher(xmlAttribute.getValue());,if (PlaceholderHandler != null ) Matcher matcher = PlaceholderHandler.PATTERN.matcher(xmlAttribute.getValue());
PlaceholderHandler.java,String inputString = xmlAttribute.getValue();,if (xmlAttribute != null ) String inputString = xmlAttribute.getValue();
PostValidator.java,XmlElement manifest = xmlDocument.getRootNode();,if (xmlDocument != null ) XmlElement manifest = xmlDocument.getRootNode();
PostValidator.java,XmlElement applicationElement = element.get();,if (element != null ) XmlElement applicationElement = element.get();
PostValidator.java,List<Node> comments = XmlElement.getLeadingComments(applicationElement.getXml());,if (XmlElement != null ) List<Node> comments = XmlElement.getLeadingComments(applicationElement.getXml());
PostValidator.java,XmlElement usesSdk = element.get();,if (element != null ) XmlElement usesSdk = element.get();
PostValidator.java,Node firstChild = xmlElement.getXml().getFirstChild();,if (xmlElement != null ) Node firstChild = xmlElement.getXml().getFirstChild();
PostValidator.java,List<Node> comments = XmlElement.getLeadingComments(usesSdk.getXml());,if (XmlElement != null ) List<Node> comments = XmlElement.getLeadingComments(usesSdk.getXml());
PostValidator.java,NodeOperationType operationType = xmlElement.getOperationType();,if (xmlElement != null ) NodeOperationType operationType = xmlElement.getOperationType();
PreValidator.java,XmlElement twin = childrenKeys.get(childElement.getId());,if (childrenKeys != null ) XmlElement twin = childrenKeys.get(childElement.getId());
PreValidator.java,NamedNodeMap attributes = element.getXml().getAttributes();,if (element != null ) NamedNodeMap attributes = element.getXml().getAttributes();
PreValidator.java,ManifestModel.NodeKeyResolver nodeKeyResolver = xmlElement.getType().getNodeKeyResolver();,if (xmlElement != null ) ManifestModel.NodeKeyResolver nodeKeyResolver = xmlElement.getType().getNodeKeyResolver();
PreValidator.java,ImmutableList<String> keyAttributesNames = nodeKeyResolver.getKeyAttributesNames();,if (nodeKeyResolver != null ) ImmutableList<String> keyAttributesNames = nodeKeyResolver.getKeyAttributesNames();
PreValidator.java,AttributeModel model = xmlAttribute.getModel();,if (xmlAttribute != null ) AttributeModel model = xmlAttribute.getModel();
Selector.java,Optional<XmlAttribute> packageName = element.getDocument().getPackage();,if (element != null ) Optional<XmlAttribute> packageName = element.getDocument().getPackage();
ToolsInstructionsCleaner.java,NamedNodeMap namedNodeMap = element.getAttributes();,if (element != null ) NamedNodeMap namedNodeMap = element.getAttributes();
ToolsInstructionsCleaner.java,NodeList childNodes = element.getChildNodes();,if (element != null ) NodeList childNodes = element.getChildNodes();
XmlAttribute.java,String value = mXml.getValue();,if (mXml != null ) String value = mXml.getValue();
XmlAttribute.java,String pkg = mOwnerElement.getDocument().getPackageNameForAttributeExpansion();,if (mOwnerElement != null ) String pkg = mOwnerElement.getDocument().getPackageNameForAttributeExpansion();
XmlAttribute.java,XmlAttribute higherPriorityAttribute = higherPriorityAttributeOptional.get();,if (higherPriorityAttributeOptional != null ) XmlAttribute higherPriorityAttribute = higherPriorityAttributeOptional.get();
XmlAttribute.java,String defaultValue = mAttributeModel.getDefaultValue();,if (mAttributeModel != null ) String defaultValue = mAttributeModel.getDefaultValue();
XmlDocument.java,XmlElement usesSdkElement = usesSdk.get();,if (usesSdk != null ) XmlElement usesSdkElement = usesSdk.get();
XmlDocument.java,XmlElement xmlElement = xmlElementOptional.get();,if (xmlElementOptional != null ) XmlElement xmlElement = xmlElementOptional.get();
XmlElement.java,List<Selector> overrideUsesSdkLibrarySelectors = ImmutableList.of();,if (ImmutableList != null ) List<Selector> overrideUsesSdkLibrarySelectors = ImmutableList.of();
XmlElement.java,NamedNodeMap namedNodeMap = getXml().getAttributes();,if (getXml() != null ) NamedNodeMap namedNodeMap = getXml().getAttributes();
XmlElement.java,String instruction = attribute.getLocalName();,if (attribute != null ) String instruction = attribute.getLocalName();
XmlElement.java,selector = new Selector(attribute.getNodeValue());,if (Selector(attribute != null ) selector = new Selector(attribute.getNodeValue());
XmlElement.java,String nodeValue = attribute.getNodeValue();,if (attribute != null ) String nodeValue = attribute.getNodeValue();
XmlElement.java,overrideUsesSdkLibrarySelectors = builder.build();,if (builder != null ) overrideUsesSdkLibrarySelectors = builder.build();
XmlElement.java,mAttributesOperationTypes = attributeOperationTypeBuilder.build();,if (attributeOperationTypeBuilder != null ) mAttributesOperationTypes = attributeOperationTypeBuilder.build();
XmlElement.java,mAttributes = attributesListBuilder.build();,if (attributesListBuilder != null ) mAttributes = attributesListBuilder.build();
XmlElement.java,MergeType mergeType = getType().getMergeType();,if (getType() != null ) MergeType mergeType = getType().getMergeType();
XmlElement.java,Optional<XmlAttribute> myAttribute = getAttribute(attributeModel.getName());,if (getAttribute(attributeModel != null ) Optional<XmlAttribute> myAttribute = getAttribute(attributeModel.getName());
XmlElement.java,ILogger logger = mergingReport.getLogger();,if (mergingReport != null ) ILogger logger = mergingReport.getLogger();
XmlElement.java,XmlElement thisChild = thisChildOptional.get();,if (thisChildOptional != null ) XmlElement thisChild = thisChildOptional.get();
XmlElement.java,String nodeName = customElement.getXml().getNodeName();,if (customElement != null ) String nodeName = customElement.getXml().getNodeName();
XmlElement.java,XmlElement thisChild = thisChildElementOptional.get();,if (thisChildElementOptional != null ) XmlElement thisChild = thisChildElementOptional.get();
XmlElement.java,List<Node> comments = getLeadingComments(elementToBeAdded.getXml());,if (getLeadingComments(elementToBeAdded != null ) List<Node> comments = getLeadingComments(elementToBeAdded.getXml());
XmlElement.java,String thisNS = getXml().getNamespaceURI();,if (getXml() != null ) String thisNS = getXml().getNamespaceURI();
XmlElement.java,String otherNS = otherNode.getXml().getNamespaceURI();,if (otherNode != null ) String otherNS = otherNode.getXml().getNamespaceURI();
XmlElement.java,Optional<String> message = Optional.absent();,if (Optional != null ) Optional<String> message = Optional.absent();
XmlElement.java,XmlAttribute.NodeName attributeName = expectedAttr.getName();,if (expectedAttr != null ) XmlAttribute.NodeName attributeName = expectedAttr.getName();
XmlElement.java,NodeList nodeList = getXml().getChildNodes();,if (getXml() != null ) NodeList nodeList = getXml().getChildNodes();
XmlElement.java,Node previousSibling = nodeToBeAdopted.getPreviousSibling();,if (nodeToBeAdopted != null ) Node previousSibling = nodeToBeAdopted.getPreviousSibling();
XmlElement.java,previousSibling = previousSibling.getPreviousSibling();,if (previousSibling != null ) previousSibling = previousSibling.getPreviousSibling();
XmlNode.java,this.mNamespaceURI = Preconditions.checkNotNull(node.getNamespaceURI());,if (Preconditions != null ) this.mNamespaceURI = Preconditions.checkNotNull(node.getNamespaceURI());
XmlNode.java,this.mPrefix = Preconditions.checkNotNull(node.getPrefix());,if (Preconditions != null ) this.mPrefix = Preconditions.checkNotNull(node.getPrefix());
XmlNode.java,this.mLocalName = Preconditions.checkNotNull(node.getLocalName());,if (Preconditions != null ) this.mLocalName = Preconditions.checkNotNull(node.getLocalName());
Depfiles.java,Path header = Paths.get(rawHeader).normalize();,if (Paths != null ) Path header = Paths.get(rawHeader).normalize();
CxxPreprocessAndCompileTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
AndroidResourceDescription.java,ImmutableSortedSet<SourcePath> inputFiles = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) ImmutableSortedSet<SourcePath> inputFiles = ImmutableSortedSet.of();
AndroidResourceDescription.java,Optional<SourcePath> additionalKey = Optional.empty();,if (Optional != null ) Optional<SourcePath> additionalKey = Optional.empty();
AndroidResourceDescription.java,PathSourcePath path = (PathSourcePath) sourcePath.get();,if (sourcePath != null ) PathSourcePath path = (PathSourcePath) sourcePath.get();
AndroidResourceDescription.java,"inputFiles = collectInputFiles(path.getFilesystem(), path.getRelativePath());","if (path != null ) inputFiles = collectInputFiles(path.getFilesystem(), path.getRelativePath());"
AndroidResourceDescription.java,additionalKey = Optional.of(sourcePath.get());,if (Optional != null ) additionalKey = Optional.of(sourcePath.get());
AndroidResourceTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(buildTarget).build();,if (FakeBuildRuleParamsBuilder(buildTarget) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(buildTarget).build();
DefaultDependencyFileRuleKeyFactory.java,Iterable<SourcePath> inputsSoFar = builder.getIterableInputsSoFar();,if (builder != null ) Iterable<SourcePath> inputsSoFar = builder.getIterableInputsSoFar();
DefaultDependencyFileRuleKeyFactory.java,Optional<Path> pathWithinArchive = entry.pathWithinArchive();,if (entry != null ) Optional<Path> pathWithinArchive = entry.pathWithinArchive();
DependencyFileRuleKeyFactoryTest.java,final BuildTargetSourcePath inputSourcePath = new BuildTargetSourcePath(dep.getBuildTarget());,if (BuildTargetSourcePath(dep != null ) final BuildTargetSourcePath inputSourcePath = new BuildTargetSourcePath(dep.getBuildTarget());
GenerateManifestStep.java,File outManifestFile = outManifestPath.toFile();,if (outManifestPath != null ) File outManifestFile = outManifestPath.toFile();
ManifestMerger.java,String value = attr.getNodeValue();,if (attr != null ) String value = attr.getNodeValue();
ManifestMerger.java,Node end = src.getNextSibling();,if (src != null ) Node end = src.getNextSibling();
ManifestMerger.java,current = forRemoval.getNextSibling();,if (forRemoval != null ) current = forRemoval.getNextSibling();
ManifestMerger.java,NamedNodeMap attrs = node.getAttributes();,if (node != null ) NamedNodeMap attrs = node.getAttributes();
ManifestMerger.java,destMinSdk = destValue.get();,if (destValue != null ) destMinSdk = destValue.get();
ManifestMerger.java,Node prev = start.getPreviousSibling();,if (start != null ) Node prev = start.getPreviousSibling();
ManifestMerger.java,short t = prev.getNodeType();,if (prev != null ) short t = prev.getNodeType();
ManifestMerger.java,String text = prev.getNodeValue();,if (prev != null ) String text = prev.getNodeValue();
ManifestMerger.java,prev = start.getPreviousSibling();,if (start != null ) prev = start.getPreviousSibling();
ManifestMerger.java,Node target = dest.getLastChild();,if (dest != null ) Node target = dest.getLastChild();
ManifestMerger.java,String text = target.getNodeValue();,if (target != null ) String text = target.getNodeValue();
ManifestMerger.java,target = target.getPreviousSibling();,if (target != null ) target = target.getPreviousSibling();
ManifestMerger.java,target = target.getNextSibling();,if (target != null ) target = target.getNextSibling();
ManifestMerger.java,start = start.getNextSibling();,if (start != null ) start = start.getNextSibling();
ManifestMerger.java,Node child = node.getFirstChild();,if (node != null ) Node child = node.getFirstChild();
XmlUtils.java,DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();,if (DocumentBuilderFactory != null ) DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
XmlUtils.java,DocumentBuilder builder = factory.newDocumentBuilder();,if (factory != null ) DocumentBuilder builder = factory.newDocumentBuilder();
XmlUtils.java,DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();,if (DocumentBuilderFactory != null ) DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
XmlUtils.java,DocumentBuilder builder = factory.newDocumentBuilder();,if (factory != null ) DocumentBuilder builder = factory.newDocumentBuilder();
XmlUtils.java,xmlNode = xmlNode.getOwnerDocument();,if (xmlNode != null ) xmlNode = xmlNode.getOwnerDocument();
XmlUtils.java,xmlNode = xmlNode.getOwnerDocument();,if (xmlNode != null ) xmlNode = xmlNode.getOwnerDocument();
XmlUtils.java,String text = node.getNodeValue();,if (node != null ) String text = node.getNodeValue();
XmlUtils.java,Node child = node.getFirstChild();,if (node != null ) Node child = node.getFirstChild();
XmlUtils.java,Transformer tf = TransformerFactory.newInstance().newTransformer();,if (TransformerFactory != null ) Transformer tf = TransformerFactory.newInstance().newTransformer();
XmlUtils.java,Transformer tf = TransformerFactory.newInstance().newTransformer();,if (TransformerFactory != null ) Transformer tf = TransformerFactory.newInstance().newTransformer();
XmlUtils.java,short t = node.getNodeType();,if (node != null ) short t = node.getNodeType();
XmlUtils.java,NamedNodeMap attrs = node.getAttributes();,if (node != null ) NamedNodeMap attrs = node.getAttributes();
XmlUtils.java,String txt = node.getNodeValue().trim();,if (node != null ) String txt = node.getNodeValue().trim();
XmlUtils.java,List<Attr> attrs = sortedAttributeList(node.getAttributes());,if (sortedAttributeList(node != null ) List<Attr> attrs = sortedAttributeList(node.getAttributes());
XmlUtils.java,Node child = node.getFirstChild();,if (node != null ) Node child = node.getFirstChild();
CommandLineParser.java,lastDefault = arg.getCurrentValue();,if (arg != null ) lastDefault = arg.getCurrentValue();
CommandLineParser.java,Arg arg = entry.getValue();,if (entry != null ) Arg arg = entry.getValue();
CommandLineParser.java,Arg arg = entry.getValue();,if (entry != null ) Arg arg = entry.getValue();
CommandLineParser.java,Arg arg = entry.getValue();,if (entry != null ) Arg arg = entry.getValue();
CommandLineParser.java,int n = arg.getLongArg().length();,if (arg != null ) int n = arg.getLongArg().length();
CommandLineParser.java,Arg arg = entry.getValue();,if (entry != null ) Arg arg = entry.getValue();
CommandLineParser.java,Object v = arg.getDefaultValue();,if (arg != null ) Object v = arg.getDefaultValue();
CommandLineParser.java,String[] values = (String[]) arg.getDefaultValue();,if (arg != null ) String[] values = (String[]) arg.getDefaultValue();
CommandLineParser.java,Object v = arg.getCurrentValue();,if (arg != null ) Object v = arg.getCurrentValue();
ManifestMergerTestCase.java,StackTraceElement[] stack = Thread.currentThread().getStackTrace();,if (Thread != null ) StackTraceElement[] stack = Thread.currentThread().getStackTrace();
ManifestMergerTestCase.java,String name = caller.getMethodName();,if (caller != null ) String name = caller.getMethodName();
ManifestMergerTestCase.java,File tempDir = tempFile.getParentFile();,if (tempFile != null ) File tempDir = tempFile.getParentFile();
ManifestMergerTestCase.java,String expectedErrors = testFiles.getExpectedErrors().trim();,if (testFiles != null ) String expectedErrors = testFiles.getExpectedErrors().trim();
BaseRunner.java,TestSelectorList.Builder testSelectorList = TestSelectorList.builder();,if (TestSelectorList != null ) TestSelectorList.Builder testSelectorList = TestSelectorList.builder();
BaseRunner.java,this.testSelectorList = testSelectorList.build();,if (testSelectorList != null ) this.testSelectorList = testSelectorList.build();
DistBuildSlaveExecutor.java,BuckConfig config = args.getRemoteRootCellConfig();,if (args != null ) BuckConfig config = args.getRemoteRootCellConfig();
MinionModeRunner.java,List<BuildTarget> targets = Lists.newArrayList();,if (Lists != null ) List<BuildTarget> targets = Lists.newArrayList();
DistributedBuildStateTest.java,List<BuildTarget> reconstructedTargets = distributedBuildState.createTopLevelBuildTargets();,if (distributedBuildState != null ) List<BuildTarget> reconstructedTargets = distributedBuildState.createTopLevelBuildTargets();
QuickstartCommand.java,String projectDir = getDestDir().trim();,if (getDestDir() != null ) String projectDir = getDestDir().trim();
QuickstartCommand.java,Path origin = resource.get();,if (resource != null ) Path origin = resource.get();
QuickstartCommand.java,AppleConfig appleConfig = new AppleConfig(params.getBuckConfig());,if (AppleConfig(params != null ) AppleConfig appleConfig = new AppleConfig(params.getBuckConfig());
QuickstartCommand.java,Optional<String> version = new VersionCommand().getBuckGitCommitHash();,if (VersionCommand() != null ) Optional<String> version = new VersionCommand().getBuckGitCommitHash();
QuickstartCommand.java,String path = br.readLine();,if (br != null ) String path = br.readLine();
QuickstartIntegrationTest.java,Optional<String> expectedGitHash = new VersionCommand().getBuckGitCommitHash();,if (VersionCommand() != null ) Optional<String> expectedGitHash = new VersionCommand().getBuckGitCommitHash();
DistBuildState.java,Config config = createConfig(remoteCell.getConfig());,if (createConfig(remoteCell != null ) Config config = createConfig(remoteCell.getConfig());
AndroidLibraryDescription.java,String query = constructorArg.depsQuery.get();,if (constructorArg != null ) String query = constructorArg.depsQuery.get();
DepQueryUtils.java,ListeningExecutorService executorService = MoreExecutors.newDirectExecutorService();,if (MoreExecutors != null ) ListeningExecutorService executorService = MoreExecutors.newDirectExecutorService();
TestRunning.java,Path jarFile = rule.getPathToOutput();,if (rule != null ) Path jarFile = rule.getPathToOutput();
CompilerTreeApiTest.java,List<File> sourceFiles = new ArrayList<>(fileNamesToContents.size());,if (ArrayList<>(fileNamesToContents != null ) List<File> sourceFiles = new ArrayList<>(fileNamesToContents.size());
CompilerTreeApiTest.java,String fileName = fileNameToContents.getKey();,if (fileNameToContents != null ) String fileName = fileNameToContents.getKey();
CompilerTreeApiTest.java,String contents = fileNameToContents.getValue();,if (fileNameToContents != null ) String contents = fileNameToContents.getValue();
CompilerTreeApiParameterizedTest.java,TypeVariable typeVariable = (TypeVariable) typeParameter.asType();,if (typeParameter != null ) TypeVariable typeVariable = (TypeVariable) typeParameter.asType();
SwiftLibraryIntegrationTest.java,ImmutableList<String> swiftIncludeArgs = buildRule.getSwiftIncludeArgs();,if (buildRule != null ) ImmutableList<String> swiftIncludeArgs = buildRule.getSwiftIncludeArgs();
ReflectiveRuleKeyFactory.java,throwable = throwable.getCause();,if (throwable != null ) throwable = throwable.getCause();
PrebuiltRustLibrary.java,this.crate = crate.orElse(getBuildTarget().getShortName());,if (crate != null ) this.crate = crate.orElse(getBuildTarget().getShortName());
RustCompile.java,Path ruleOutput = linkable.getLinkPath();,if (linkable != null ) Path ruleOutput = linkable.getLinkPath();
RustCompile.java,Tool compiler = this.compiler.get();,if (this != null ) Tool compiler = this.compiler.get();
RustLibraryDescription.java,ToolProvider compiler = rustBuckConfig.getRustCompiler();,if (rustBuckConfig != null ) ToolProvider compiler = rustBuckConfig.getRustCompiler();
RustLinkables.java,SourcePath sourcePath = arg.getPath();,if (arg != null ) SourcePath sourcePath = arg.getPath();
RustLinkables.java,SourcePathResolver sourcePathResolver = arg.getPathResolver();,if (arg != null ) SourcePathResolver sourcePathResolver = arg.getPathResolver();
RustBinaryDescriptionTest.java,ImmutableSortedSet<BuildRule> deps = binary.getDeps();,if (binary != null ) ImmutableSortedSet<BuildRule> deps = binary.getDeps();
CachingBuildEngine.java,Optional<Integer> inputsCount = Optional.empty();,if (Optional != null ) Optional<Integer> inputsCount = Optional.empty();
CachingBuildEngine.java,Optional<Long> inputsSize = Optional.empty();,if (Optional != null ) Optional<Long> inputsSize = Optional.empty();
CachingBuildEngine.java,inputsCount = Optional.of(inputs.getInputsCount());,if (Optional != null ) inputsCount = Optional.of(inputs.getInputsCount());
CachingBuildEngine.java,inputsSize = Optional.of(inputs.getInputsSize());,if (Optional != null ) inputsSize = Optional.of(inputs.getInputsSize());
CachingBuildEngine.java,ex = (Exception) ex.getCause();,if (ex != null ) ex = (Exception) ex.getCause();
InputCountingRuleKeyFactory.java,inputsCount += result.getInputsCount();,if (result != null ) inputsCount += result.getInputsCount();
InputCountingRuleKeyFactory.java,inputsSize += result.getInputsSize();,if (result != null ) inputsSize += result.getInputsSize();
SourcePathResolver.java,Optional<Path> resolvedPath = buildTargetSourcePath.getResolvedPath();,if (buildTargetSourcePath != null ) Optional<Path> resolvedPath = buildTargetSourcePath.getResolvedPath();
SourcePathResolver.java,toReturn = resolvedPath.get();,if (resolvedPath != null ) toReturn = resolvedPath.get();
SourcePathResolver.java,toReturn = ruleFinder.getRuleOrThrow(buildTargetSourcePath).getPathToOutput();,if (ruleFinder != null ) toReturn = ruleFinder.getRuleOrThrow(buildTargetSourcePath).getPathToOutput();
RuleKeyBuilder.java,addToKey = ideallyRelative.getFileName();,if (ideallyRelative != null ) addToKey = ideallyRelative.getFileName();
RuleKeyBuilder.java,pathForKey = resolver.getRelativePath(sourcePath).toString();,if (resolver != null ) pathForKey = resolver.getRelativePath(sourcePath).toString();
RuleKeyBuilder.java,pathForKey = resolver.getRelativePath(sourcePath).toString();,if (resolver != null ) pathForKey = resolver.getRelativePath(sourcePath).toString();
CxxCompilationDatabaseTest.java,List<Step> buildSteps = compilationDatabase.getPostBuildSteps();,if (compilationDatabase != null ) List<Step> buildSteps = compilationDatabase.getPostBuildSteps();
RuleKeyBuilder.java,RuleKey ruleKey = new RuleKey(hasher.hash());,if (RuleKey(hasher != null ) RuleKey ruleKey = new RuleKey(hasher.hash());
RuleKeyBuilder.java,int oldSize = keyStack.size();,if (keyStack != null ) int oldSize = keyStack.size();
ExternalJavacTest.java,RuleKey expected = builder.build();,if (builder != null ) RuleKey expected = builder.build();
ExternalJavacTest.java,RuleKey seen = builder.build();,if (builder != null ) RuleKey seen = builder.build();
ExternalJavacTest.java,RuleKey expected = builder.build();,if (builder != null ) RuleKey expected = builder.build();
ExternalJavacTest.java,RuleKey seen = builder.build();,if (builder != null ) RuleKey seen = builder.build();
RuleKeyBuilderTest.java,List<String> list = ImmutableList.of();,if (ImmutableList != null ) List<String> list = ImmutableList.of();
BuildCommand.java,Path output = rule.getPathToOutput();,if (rule != null ) Path output = rule.getPathToOutput();
BuildCommand.java,ProjectFilesystem projectFilesystem = rule.getProjectFilesystem();,if (rule != null ) ProjectFilesystem projectFilesystem = rule.getProjectFilesystem();
PreprocessorDelegate.java,String absoluteString = path.toString();,if (path != null ) String absoluteString = path.toString();
PreprocessorDelegate.java,String relativeString = relativePath.toString();,if (relativePath != null ) String relativeString = relativePath.toString();
AbstractPreprocessorFlags.java,Path absPath = resolver.getAbsolutePath(getPrefixHeader().get());,if (resolver != null ) Path absPath = resolver.getAbsolutePath(getPrefixHeader().get());
DefaultDependencyFileRuleKeyFactory.java,ImmutableSet<SourcePath> inputs = builder.getInputsSoFar();,if (builder != null ) ImmutableSet<SourcePath> inputs = builder.getInputsSoFar();
TreeBackedTypes.java,TypeElement typeElement = treeToTypeElement(node.getType());,if (treeToTypeElement(node != null ) TypeElement typeElement = treeToTypeElement(node.getType());
TreeBackedTypeElementTest.java,DeclaredType fooSuperclass = (DeclaredType) fooElement.getSuperclass();,if (fooElement != null ) DeclaredType fooSuperclass = (DeclaredType) fooElement.getSuperclass();
TreeBackedTypeElementTest.java,DeclaredType barSuperclass = (DeclaredType) barElement.getSuperclass();,if (barElement != null ) DeclaredType barSuperclass = (DeclaredType) barElement.getSuperclass();
FrontendOnlyJavacTask.java,Name qualifiedName = node.getSimpleName();,if (node != null ) Name qualifiedName = node.getSimpleName();
ExpressionTreeResolutionValidator.java,treesElements = treeResolver.getElements();,if (treeResolver != null ) treesElements = treeResolver.getElements();
TreeBackedElements.java,List<TypeElement> treeBackedElements = new ArrayList<>(knownTypes.values());,if (ArrayList<>(knownTypes != null ) List<TypeElement> treeBackedElements = new ArrayList<>(knownTypes.values());
TreeResolver.java,Name qualifiedName = node.getSimpleName();,if (node != null ) Name qualifiedName = node.getSimpleName();
ValidatingTaskListener.java,"treeResolver = new TreeResolver(trees, javacTask.getElements());","if (javacTask != null ) treeResolver = new TreeResolver(trees, javacTask.getElements());"
CompilerTreeApiTest.java,javacElements = javacTask.getElements();,if (javacTask != null ) javacElements = javacTask.getElements();
CompilerTreeApiTest.java,javacTypes = javacTask.getTypes();,if (javacTask != null ) javacTypes = javacTask.getTypes();
CompilerTreeApiTest.java,"treeResolver = new TreeResolver(javacTrees, javacTask.getElements());","if (javacTask != null ) treeResolver = new TreeResolver(javacTrees, javacTask.getElements());"
CompilerTreeApiTest.java,treesElements = treeResolver.getElements();,if (treeResolver != null ) treesElements = treeResolver.getElements();
CompilerTreeApiTest.java,treesTrees = treeResolver.getTrees();,if (treeResolver != null ) treesTrees = treeResolver.getTrees();
CompilerTreeApiTest.java,treesTypes = treeResolver.getTypes();,if (treeResolver != null ) treesTypes = treeResolver.getTypes();
TreeResolver.java,scope = treeToName(node.getPackageName());,if (treeToName(node != null ) scope = treeToName(node.getPackageName());
TreeResolver.java,scope = typeElement.getQualifiedName();,if (typeElement != null ) scope = typeElement.getQualifiedName();
TargetNodeTranslator.java,A constructorArg = node.getConstructorArg();,if (node != null ) A constructorArg = node.getConstructorArg();
TargetNodeTranslator.java,A newConstructorArg = node.getDescription().createUnpopulatedConstructorArg();,if (node != null ) A newConstructorArg = node.getDescription().createUnpopulatedConstructorArg();
AppleCxxPlatforms.java,buildVersion = Optional.empty();,if (Optional != null ) buildVersion = Optional.empty();
AppleCxxPlatforms.java,buildVersion = Optional.empty();,if (Optional != null ) buildVersion = Optional.empty();
AppleCxxPlatforms.java,buildVersion = Optional.empty();,if (Optional != null ) buildVersion = Optional.empty();
DefaultDependencyFileRuleKeyFactory.java,Optional<RuleKey> ruleKey = builder.build();,if (builder != null ) Optional<RuleKey> ruleKey = builder.build();
DefaultDependencyFileRuleKeyFactory.java,Optional<RuleKey> ruleKey = builder.build();,if (builder != null ) Optional<RuleKey> ruleKey = builder.build();
InputBasedRuleKeyFactory.java,Optional<RuleKey> ruleKey = result.getRuleKey();,if (result != null ) Optional<RuleKey> ruleKey = result.getRuleKey();
DefaultJavaLibraryTest.java,RuleKey originalRuleKey = factory.build(library).get();,if (factory != null ) RuleKey originalRuleKey = factory.build(library).get();
DefaultJavaLibraryTest.java,RuleKey unaffectedRuleKey = factory.build(library).get();,if (factory != null ) RuleKey unaffectedRuleKey = factory.build(library).get();
DefaultJavaLibraryTest.java,RuleKey affectedRuleKey = factory.build(library).get();,if (factory != null ) RuleKey affectedRuleKey = factory.build(library).get();
DefaultJavaLibraryTest.java,RuleKey originalRuleKey = factory.build(library).get();,if (factory != null ) RuleKey originalRuleKey = factory.build(library).get();
DefaultJavaLibraryTest.java,RuleKey unaffectedRuleKey = factory.build(library).get();,if (factory != null ) RuleKey unaffectedRuleKey = factory.build(library).get();
DefaultJavaLibraryTest.java,RuleKey affectedRuleKey = factory.build(library).get();,if (factory != null ) RuleKey affectedRuleKey = factory.build(library).get();
DefaultJavaLibraryTest.java,RuleKey originalRuleKey = factory.build(library).get();,if (factory != null ) RuleKey originalRuleKey = factory.build(library).get();
DefaultJavaLibraryTest.java,RuleKey unaffectedRuleKey = factory.build(library).get();,if (factory != null ) RuleKey unaffectedRuleKey = factory.build(library).get();
DefaultJavaLibraryTest.java,RuleKey affectedRuleKey = factory.build(library).get();,if (factory != null ) RuleKey affectedRuleKey = factory.build(library).get();
DefaultJavaLibraryTest.java,RuleKey originalRuleKey = factory.build(library).get();,if (factory != null ) RuleKey originalRuleKey = factory.build(library).get();
DefaultJavaLibraryTest.java,RuleKey unaffectedRuleKey = factory.build(library).get();,if (factory != null ) RuleKey unaffectedRuleKey = factory.build(library).get();
DefaultJavaLibraryTest.java,RuleKey affectedRuleKey = factory.build(library).get();,if (factory != null ) RuleKey affectedRuleKey = factory.build(library).get();
GenruleTest.java,RuleKey originalInputRuleKey = inputBasedRuleKeyFactory.build(rule).get();,if (inputBasedRuleKeyFactory != null ) RuleKey originalInputRuleKey = inputBasedRuleKeyFactory.build(rule).get();
GenruleTest.java,RuleKey unchangedInputBasedRuleKey = inputBasedRuleKeyFactory.build(rule).get();,if (inputBasedRuleKeyFactory != null ) RuleKey unchangedInputBasedRuleKey = inputBasedRuleKeyFactory.build(rule).get();
GenruleTest.java,RuleKey changedInputBasedRuleKey = inputBasedRuleKeyFactory.build(rule).get();,if (inputBasedRuleKeyFactory != null ) RuleKey changedInputBasedRuleKey = inputBasedRuleKeyFactory.build(rule).get();
GenruleTest.java,RuleKey originalInputRuleKey = inputBasedRuleKeyFactory.build(rule).get();,if (inputBasedRuleKeyFactory != null ) RuleKey originalInputRuleKey = inputBasedRuleKeyFactory.build(rule).get();
GenruleTest.java,RuleKey unchangedInputBasedRuleKey = inputBasedRuleKeyFactory.build(rule).get();,if (inputBasedRuleKeyFactory != null ) RuleKey unchangedInputBasedRuleKey = inputBasedRuleKeyFactory.build(rule).get();
GenruleTest.java,RuleKey changedInputBasedRuleKey = inputBasedRuleKeyFactory.build(rule).get();,if (inputBasedRuleKeyFactory != null ) RuleKey changedInputBasedRuleKey = inputBasedRuleKeyFactory.build(rule).get();
GenruleTest.java,RuleKey originalInputRuleKey = inputBasedRuleKeyFactory.build(rule).get();,if (inputBasedRuleKeyFactory != null ) RuleKey originalInputRuleKey = inputBasedRuleKeyFactory.build(rule).get();
GenruleTest.java,RuleKey unchangedInputBasedRuleKey = inputBasedRuleKeyFactory.build(rule).get();,if (inputBasedRuleKeyFactory != null ) RuleKey unchangedInputBasedRuleKey = inputBasedRuleKeyFactory.build(rule).get();
GenruleTest.java,RuleKey changedInputBasedRuleKey = inputBasedRuleKeyFactory.build(rule).get();,if (inputBasedRuleKeyFactory != null ) RuleKey changedInputBasedRuleKey = inputBasedRuleKeyFactory.build(rule).get();
PrebuiltCxxLibraryDescriptionTest.java,PrebuiltCxxLibraryDescription.Arg arg = libBuilder.build().getConstructorArg();,if (libBuilder != null ) PrebuiltCxxLibraryDescription.Arg arg = libBuilder.build().getConstructorArg();
ValidatingTaskListener.java,treeResolver = new TreeResolver(javacTask.getElements());,if (TreeResolver(javacTask != null ) treeResolver = new TreeResolver(javacTask.getElements());
CompilerTreeApiTest.java,treeResolver = new TreeResolver(javacTask.getElements());,if (TreeResolver(javacTask != null ) treeResolver = new TreeResolver(javacTask.getElements());
TreeBackedTypes.java,TypeMirror elementType = resolveType(node.getType());,if (resolveType(node != null ) TypeMirror elementType = resolveType(node.getType());
WorkerShellStep.java,process = pool.borrowWorkerProcess(); // blocks until a WorkerProcess becomes available,if (available != null ) process = pool.borrowWorkerProcess(); // blocks until a WorkerProcess becomes available
WorkerShellStep.java,WorkerJobParams paramsToUse = getWorkerJobParamsToUse(context.getPlatform());,if (getWorkerJobParamsToUse(context != null ) WorkerJobParams paramsToUse = getWorkerJobParamsToUse(context.getPlatform());
WorkerShellStep.java,processPoolMap = context.getPersistentWorkerPools().get();,if (context != null ) processPoolMap = context.getPersistentWorkerPools().get();
WorkerShellStep.java,key = paramsToUse.getPersistentWorkerKey().get();,if (paramsToUse != null ) key = paramsToUse.getPersistentWorkerKey().get();
WorkerShellStep.java,workerHash = paramsToUse.getWorkerHash().get();,if (paramsToUse != null ) workerHash = paramsToUse.getWorkerHash().get();
WorkerShellStep.java,processPoolMap = context.getWorkerProcessPools();,if (context != null ) processPoolMap = context.getWorkerProcessPools();
WorkerShellStep.java,final Path workerTmpDir = paramsToUse.getTempDir();,if (paramsToUse != null ) final Path workerTmpDir = paramsToUse.getTempDir();
WorkerShellStep.java,int poolCapacity = pool.getCapacity();,if (pool != null ) int poolCapacity = pool.getCapacity();
WorkerShellStep.java,Path tmpDir = getWorkerJobParamsToUse(context.getPlatform()).getTempDir();,if (getWorkerJobParamsToUse(context != null ) Path tmpDir = getWorkerJobParamsToUse(context.getPlatform()).getTempDir();
BuildCommand.java,ArtifactCache artifactCache = params.getArtifactCache();,if (params != null ) ArtifactCache artifactCache = params.getArtifactCache();
CacheCommand.java,ArtifactCache cache = params.getArtifactCache();,if (params != null ) ArtifactCache cache = params.getArtifactCache();
MergeAndroidResourceSourcesStep.java,ResourceSet set = new ResourceSet(resPath.toString());,if (ResourceSet(resPath != null ) ResourceSet set = new ResourceSet(resPath.toString());
AbstractCxxSourceRuleFactory.java,templateTarget = getParams().getBuildTarget();,if (getParams() != null ) templateTarget = getParams().getBuildTarget();
PrecompiledHeaderFeatureTest.java,final TargetGraph graph = TargetGraphFactory.newInstance();,if (TargetGraphFactory != null ) final TargetGraph graph = TargetGraphFactory.newInstance();
PrecompiledHeaderFeatureTest.java,ExportFileDescription.Arg bazArgs = descriptionBaz.createUnpopulatedConstructorArg();,if (descriptionBaz != null ) ExportFileDescription.Arg bazArgs = descriptionBaz.createUnpopulatedConstructorArg();
PrecompiledHeaderFeatureTest.java,bazArgs.out = Optional.empty();,if (Optional != null ) bazArgs.out = Optional.empty();
PrecompiledHeaderFeatureTest.java,final TargetGraph graph = TargetGraphFactory.newInstance();,if (TargetGraphFactory != null ) final TargetGraph graph = TargetGraphFactory.newInstance();
PrecompiledHeaderFeatureTest.java,ExportFileDescription.Arg bazArgs = descriptionBaz.createUnpopulatedConstructorArg();,if (descriptionBaz != null ) ExportFileDescription.Arg bazArgs = descriptionBaz.createUnpopulatedConstructorArg();
PrecompiledHeaderFeatureTest.java,bazArgs.out = Optional.empty();,if (Optional != null ) bazArgs.out = Optional.empty();
AbstractElfSymbolTableScrubberStep.java,int addressPosition = body.position();,if (body != null ) int addressPosition = body.position();
AbstractElfSymbolTableScrubberStep.java,int sizePosition = body.position();,if (body != null ) int sizePosition = body.position();
AbstractElfSymbolTableScrubberStep.java,int shndxPosition = body.position();,if (body != null ) int shndxPosition = body.position();
AbstractElfSymbolTableScrubberStep.java,int shndxPosition = body.position();,if (body != null ) int shndxPosition = body.position();
AbstractElfSymbolTableScrubberStep.java,int addressPosition = body.position();,if (body != null ) int addressPosition = body.position();
AbstractElfSymbolTableScrubberStep.java,int sizePosition = body.position();,if (body != null ) int sizePosition = body.position();
TreeBackedTypeElement.java,TypeElement typeElement = treeToTypeElement(node.getType());,if (treeToTypeElement(node != null ) TypeElement typeElement = treeToTypeElement(node.getType());
TreeResolver.java,scope = expressionToName(node.getPackageName());,if (expressionToName(node != null ) scope = expressionToName(node.getPackageName());
TreeBackedElements.java,List<TypeElement> treeBackedElements = new ArrayList<>(types.values());,if (ArrayList<>(types != null ) List<TypeElement> treeBackedElements = new ArrayList<>(types.values());
DefaultDependencyFileRuleKeyFactory.java,ImmutableSet<SourcePath> inputs = ImmutableSet.copyOf(builder.getIterableInputsSoFar());,if (ImmutableSet != null ) ImmutableSet<SourcePath> inputs = ImmutableSet.copyOf(builder.getIterableInputsSoFar());
InputBasedRuleKeyFactoryTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
AbstractCxxSourceRuleFactory.java,targetToBuildFor = getParams().getBuildTarget();,if (getParams() != null ) targetToBuildFor = getParams().getBuildTarget();
AbstractCxxSourceRuleFactory.java,"CxxToolFlags compilerFlags = computeCompilerFlags(source.getType(), source.getFlags());","if (source != null ) CxxToolFlags compilerFlags = computeCompilerFlags(source.getType(), source.getFlags());"
AbstractPreprocessorFlags.java,ExplicitCxxToolFlags.Builder builder = CxxToolFlags.explicitBuilder();,if (CxxToolFlags != null ) ExplicitCxxToolFlags.Builder builder = CxxToolFlags.explicitBuilder();
ClientSideSlb.java,LoadBalancerPingEventData.Builder data = LoadBalancerPingEventData.builder();,if (LoadBalancerPingEventData != null ) LoadBalancerPingEventData.Builder data = LoadBalancerPingEventData.builder();
ClientSideSlb.java,long nowMillis = clock.currentTimeMillis();,if (clock != null ) long nowMillis = clock.currentTimeMillis();
ClientSideSlb.java,Response response = pingClient.newCall(request).execute();,if (pingClient != null ) Response response = pingClient.newCall(request).execute();
AbstractIncludeLogEntry.java,final int stripCount = getParameterAsPath().getNameCount();,if (getParameterAsPath() != null ) final int stripCount = getParameterAsPath().getNameCount();
AbstractIncludeLogEntry.java,final int thisNameCount = getCurrentFile().getNameCount();,if (getCurrentFile() != null ) final int thisNameCount = getCurrentFile().getNameCount();
AbstractIncludeLogEntry.java,line = line.trim();,if (line != null ) line = line.trim();
AbstractIncludeLogEntry.java,parent = Optional.empty();,if (Optional != null ) parent = Optional.empty();
CxxPreprocessAndCompileStep.java,ProcessExecutor executor = new DefaultProcessExecutor(Console.createNullConsole());,if (DefaultProcessExecutor(Console != null ) ProcessExecutor executor = new DefaultProcessExecutor(Console.createNullConsole());
CxxPreprocessAndCompileStep.java,int preprocessStatus = executor.waitForLaunchedProcess(preprocess).getExitCode();,if (executor != null ) int preprocessStatus = executor.waitForLaunchedProcess(preprocess).getExitCode();
CxxPreprocessAndCompileStep.java,String preprocessErr = new String(preprocessError.toByteArray());,if (String(preprocessError != null ) String preprocessErr = new String(preprocessError.toByteArray());
CxxPreprocessAndCompileStep.java,final Path outputDir = output.getParent();,if (output != null ) final Path outputDir = output.getParent();
CxxPreprocessAndCompileStep.java,final String filenameBase = outputDir.relativize(output).toString();,if (outputDir != null ) final String filenameBase = outputDir.relativize(output).toString();
IncludeLogCParser.java,line = line.trim();,if (line != null ) line = line.trim();
IncludeLogCParser.java,flag = flag.trim();,if (flag != null ) flag = flag.trim();
IncludeLogEntryTest.java,final String serialized = sw.toString();,if (sw != null ) final String serialized = sw.toString();
DefaultDependencyFileRuleKeyFactory.java,ImmutableSet<SourcePath> inputs = builder.getInputsSoFar();,if (builder != null ) ImmutableSet<SourcePath> inputs = builder.getInputsSoFar();
AndroidManifestTest.java,ProjectFilesystem filesystem = androidManifest.getProjectFilesystem();,if (androidManifest != null ) ProjectFilesystem filesystem = androidManifest.getProjectFilesystem();
DefaultDependencyFileRuleKeyFactory.java,Optional<RuleKey> ruleKey = builder.build();,if (builder != null ) Optional<RuleKey> ruleKey = builder.build();
DefaultDependencyFileRuleKeyFactory.java,Optional<RuleKey> ruleKey = builder.build();,if (builder != null ) Optional<RuleKey> ruleKey = builder.build();
InputBasedRuleKeyFactory.java,Optional<RuleKey> ruleKey = result.getRuleKey();,if (result != null ) Optional<RuleKey> ruleKey = result.getRuleKey();
DefaultJavaLibraryTest.java,RuleKey originalRuleKey = factory.build(library).get();,if (factory != null ) RuleKey originalRuleKey = factory.build(library).get();
DefaultJavaLibraryTest.java,RuleKey unaffectedRuleKey = factory.build(library).get();,if (factory != null ) RuleKey unaffectedRuleKey = factory.build(library).get();
DefaultJavaLibraryTest.java,RuleKey affectedRuleKey = factory.build(library).get();,if (factory != null ) RuleKey affectedRuleKey = factory.build(library).get();
DefaultJavaLibraryTest.java,RuleKey originalRuleKey = factory.build(library).get();,if (factory != null ) RuleKey originalRuleKey = factory.build(library).get();
DefaultJavaLibraryTest.java,RuleKey unaffectedRuleKey = factory.build(library).get();,if (factory != null ) RuleKey unaffectedRuleKey = factory.build(library).get();
DefaultJavaLibraryTest.java,RuleKey affectedRuleKey = factory.build(library).get();,if (factory != null ) RuleKey affectedRuleKey = factory.build(library).get();
DefaultJavaLibraryTest.java,RuleKey originalRuleKey = factory.build(library).get();,if (factory != null ) RuleKey originalRuleKey = factory.build(library).get();
DefaultJavaLibraryTest.java,RuleKey unaffectedRuleKey = factory.build(library).get();,if (factory != null ) RuleKey unaffectedRuleKey = factory.build(library).get();
DefaultJavaLibraryTest.java,RuleKey affectedRuleKey = factory.build(library).get();,if (factory != null ) RuleKey affectedRuleKey = factory.build(library).get();
DefaultJavaLibraryTest.java,RuleKey originalRuleKey = factory.build(library).get();,if (factory != null ) RuleKey originalRuleKey = factory.build(library).get();
DefaultJavaLibraryTest.java,RuleKey unaffectedRuleKey = factory.build(library).get();,if (factory != null ) RuleKey unaffectedRuleKey = factory.build(library).get();
DefaultJavaLibraryTest.java,RuleKey affectedRuleKey = factory.build(library).get();,if (factory != null ) RuleKey affectedRuleKey = factory.build(library).get();
GenruleTest.java,RuleKey originalInputRuleKey = inputBasedRuleKeyFactory.build(rule).get();,if (inputBasedRuleKeyFactory != null ) RuleKey originalInputRuleKey = inputBasedRuleKeyFactory.build(rule).get();
GenruleTest.java,RuleKey unchangedInputBasedRuleKey = inputBasedRuleKeyFactory.build(rule).get();,if (inputBasedRuleKeyFactory != null ) RuleKey unchangedInputBasedRuleKey = inputBasedRuleKeyFactory.build(rule).get();
GenruleTest.java,RuleKey changedInputBasedRuleKey = inputBasedRuleKeyFactory.build(rule).get();,if (inputBasedRuleKeyFactory != null ) RuleKey changedInputBasedRuleKey = inputBasedRuleKeyFactory.build(rule).get();
GenruleTest.java,RuleKey originalInputRuleKey = inputBasedRuleKeyFactory.build(rule).get();,if (inputBasedRuleKeyFactory != null ) RuleKey originalInputRuleKey = inputBasedRuleKeyFactory.build(rule).get();
GenruleTest.java,RuleKey unchangedInputBasedRuleKey = inputBasedRuleKeyFactory.build(rule).get();,if (inputBasedRuleKeyFactory != null ) RuleKey unchangedInputBasedRuleKey = inputBasedRuleKeyFactory.build(rule).get();
GenruleTest.java,RuleKey changedInputBasedRuleKey = inputBasedRuleKeyFactory.build(rule).get();,if (inputBasedRuleKeyFactory != null ) RuleKey changedInputBasedRuleKey = inputBasedRuleKeyFactory.build(rule).get();
GenruleTest.java,RuleKey originalInputRuleKey = inputBasedRuleKeyFactory.build(rule).get();,if (inputBasedRuleKeyFactory != null ) RuleKey originalInputRuleKey = inputBasedRuleKeyFactory.build(rule).get();
GenruleTest.java,RuleKey unchangedInputBasedRuleKey = inputBasedRuleKeyFactory.build(rule).get();,if (inputBasedRuleKeyFactory != null ) RuleKey unchangedInputBasedRuleKey = inputBasedRuleKeyFactory.build(rule).get();
GenruleTest.java,RuleKey changedInputBasedRuleKey = inputBasedRuleKeyFactory.build(rule).get();,if (inputBasedRuleKeyFactory != null ) RuleKey changedInputBasedRuleKey = inputBasedRuleKeyFactory.build(rule).get();
RunCommand.java,SourcePathResolver resolver = new SourcePathResolver(build.getRuleResolver());,if (SourcePathResolver(build != null ) SourcePathResolver resolver = new SourcePathResolver(build.getRuleResolver());
SourcePathResolver.java,BuildRule rule = ruleResolver.getRule(sourcePath.getTarget());,if (ruleResolver != null ) BuildRule rule = ruleResolver.getRule(sourcePath.getTarget());
SourcePathResolverTest.java,SourcePath buildTargetSourcePath = new BuildTargetSourcePath(rule.getBuildTarget());,if (BuildTargetSourcePath(rule != null ) SourcePath buildTargetSourcePath = new BuildTargetSourcePath(rule.getBuildTarget());
CalculateAbiStepTest.java,Path outDir = temp.newFolder().toAbsolutePath();,if (temp != null ) Path outDir = temp.newFolder().toAbsolutePath();
RageCommand.java,DirtyPrintStreamDecorator stdOut = params.getConsole().getStdOut();,if (params != null ) DirtyPrintStreamDecorator stdOut = params.getConsole().getStdOut();
DoctorCommand.java,"Optional<DefectSubmitResult> rageResult = generateRageReport(params, entry.get());","if (entry != null ) Optional<DefectSubmitResult> rageResult = generateRageReport(params, entry.get());"
RuleKeyBuilder.java,addToKey = ideallyRelative.getFileName();,if (ideallyRelative != null ) addToKey = ideallyRelative.getFileName();
TestRunning.java,DefaultJavaPackageFinder defaultJavaPackageFinder = defaultJavaPackageFinderOptional.get();,if (defaultJavaPackageFinderOptional != null ) DefaultJavaPackageFinder defaultJavaPackageFinder = defaultJavaPackageFinderOptional.get();
TestRunning.java,ImmutableSet<Path> javaSrcs = rule.getJavaSrcs();,if (rule != null ) ImmutableSet<Path> javaSrcs = rule.getJavaSrcs();
TestRunning.java,Path directory = filesystem.getPathForRelativePath(javaSrcPath.getParent());,if (filesystem != null ) Path directory = filesystem.getPathForRelativePath(javaSrcPath.getParent());
ExpressionTreeResolutionValidator.java,Name qualifiedName = javacElement.getQualifiedName();,if (javacElement != null ) Name qualifiedName = javacElement.getQualifiedName();
TreeResolver.java,scope = expressionToName(node.getPackageName());,if (expressionToName(node != null ) scope = expressionToName(node.getPackageName());
TreeResolver.java,Name qualifiedName = node.getSimpleName();,if (node != null ) Name qualifiedName = node.getSimpleName();
TreeResolver.java,scope = typeElement.getQualifiedName();,if (typeElement != null ) scope = typeElement.getQualifiedName();
TreeBackedTypeElementTest.java,JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();,if (ToolProvider != null ) JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
TreeBackedTypeElementTest.java,javacElements = task.getElements();,if (task != null ) javacElements = task.getElements();
TreeBackedTypeElementTest.java,TreeResolver treeResolver = new TreeResolver(task.getElements());,if (TreeResolver(task != null ) TreeResolver treeResolver = new TreeResolver(task.getElements());
TreeBackedTypeElementTest.java,treesElements = treeResolver.getElements();,if (treeResolver != null ) treesElements = treeResolver.getElements();
CxxDescriptionEnhancer.java,"Path linkOutput = getLinkOutputPath(target, params.getProjectFilesystem());","if (params != null ) Path linkOutput = getLinkOutputPath(target, params.getProjectFilesystem());"
CxxLibraryIntegrationTest.java,log = workspace.getBuildLog();,if (workspace != null ) log = workspace.getBuildLog();
CxxLibraryIntegrationTest.java,log = workspace.getBuildLog();,if (workspace != null ) log = workspace.getBuildLog();
CxxLibraryIntegrationTest.java,log = workspace.getBuildLog();,if (workspace != null ) log = workspace.getBuildLog();
CxxLibraryIntegrationTest.java,log = workspace.getBuildLog();,if (workspace != null ) log = workspace.getBuildLog();
CxxLibraryIntegrationTest.java,log = workspace.getBuildLog();,if (workspace != null ) log = workspace.getBuildLog();
CxxLibraryIntegrationTest.java,log = workspace.getBuildLog();,if (workspace != null ) log = workspace.getBuildLog();
CxxLibraryIntegrationTest.java,log = workspace.getBuildLog();,if (workspace != null ) log = workspace.getBuildLog();
AppleSdkDiscovery.java,AppleSdk mostRecentSdkForPlatform = orderedSdksForPlatform.get(platform).last();,if (orderedSdksForPlatform != null ) AppleSdk mostRecentSdkForPlatform = orderedSdksForPlatform.get(platform).last();
TranslatingJavacPhaseTracer.java,final ClassLoader compilerClassLoader = task.getClass().getClassLoader();,if (task != null ) final ClassLoader compilerClassLoader = task.getClass().getClassLoader();
DexMerger.java,long start = System.nanoTime();,if (System != null ) long start = System.nanoTime();
Simulator.java,type = requiredArrayType.getComponentType();,if (requiredArrayType != null ) type = requiredArrayType.getComponentType();
Simulator.java,type = requiredArrayType.getComponentType();,if (requiredArrayType != null ) type = requiredArrayType.getComponentType();
ClassPathOpener.java,byte[] bytes = baos.toByteArray();,if (baos != null ) byte[] bytes = baos.toByteArray();
Main.java,int constantPoolSize = cf.getConstantPool().size();,if (cf != null ) int constantPoolSize = cf.getConstantPool().size();
Main.java,fileNames = parser.getRemaining();,if (parser != null ) fileNames = parser.getRemaining();
Main.java,CstType fieldClass = item.getDefiningClass();,if (item != null ) CstType fieldClass = item.getDefiningClass();
DexMerger.java,this.tocSection = getSection(dex.getTableOfContents());,if (getSection(dex != null ) this.tocSection = getSection(dex.getTableOfContents());
DexMerger.java,int offset = dbSection.getPosition();,if (dbSection != null ) int offset = dbSection.getPosition();
DexMerger.java,UnsortedValue uValue = sorted.peek();,if (sorted != null ) UnsortedValue uValue = sorted.peek();
DexMerger.java,uValue = sorted.next();,if (sorted != null ) uValue = sorted.next();
RegisterSpec.java,found = theInterningItem.toRegisterSpec();,if (theInterningItem != null ) found = theInterningItem.toRegisterSpec();
CstType.java,CstType cst = interns.get(type.getDescriptor());,if (interns != null ) CstType cst = interns.get(type.getDescriptor());
Prototype.java,String descriptor = desc.getDescriptor();,if (desc != null ) String descriptor = desc.getDescriptor();
Type.java,String descriptor = type.getDescriptor();,if (type != null ) String descriptor = type.getDescriptor();
LiteralOpUpgrader.java,final TranslationAdvice advice = optimizer.getAdvice();,if (optimizer != null ) final TranslationAdvice advice = optimizer.getAdvice();
PhiTypeResolver.java,Type mergedType = first.getType();,if (first != null ) Type mergedType = first.getType();
ClassReferenceListBuilder.java,String descriptor = type.getDescriptor();,if (type != null ) String descriptor = type.getDescriptor();
IjModuleFactory.java,Path parent = path.getParent();,if (path != null ) Path parent = path.getParent();
IjModuleGraph.java,Path basePath = input.getBuildTarget().getBasePath();,if (input != null ) Path basePath = input.getBuildTarget().getBasePath();
IjModuleGraph.java,Path basePath = input.getBuildTarget().getBasePath();,if (input != null ) Path basePath = input.getBuildTarget().getBasePath();
IjModuleGraph.java,minimumDepth = Optional.empty();,if (Optional != null ) minimumDepth = Optional.empty();
AbstractIjModule.java,IjModuleGraph.DependencyType dependencyType = entry.getValue();,if (entry != null ) IjModuleGraph.DependencyType dependencyType = entry.getValue();
IjProjectTemplateDataPreparer.java,IjModuleGraph.DependencyType dependencyType = entry.getValue();,if (entry != null ) IjModuleGraph.DependencyType dependencyType = entry.getValue();
IjModuleFactory.java,this.androidFacetBuilder = Optional.empty();,if (Optional != null ) this.androidFacetBuilder = Optional.empty();
IjModuleFactory.java,this.generatedSourceCodeFoldersBuilder = ImmutableSet.builder();,if (ImmutableSet != null ) this.generatedSourceCodeFoldersBuilder = ImmutableSet.builder();
IjModuleFactory.java,this.dependencyOriginMap = HashMultimap.create();,if (HashMultimap != null ) this.dependencyOriginMap = HashMultimap.create();
IjModuleFactory.java,androidFacetBuilder = Optional.of(IjModuleAndroidFacet.builder());,if (Optional != null ) androidFacetBuilder = Optional.of(IjModuleAndroidFacet.builder());
IjModuleFactory.java,Path path = folder.getPath();,if (folder != null ) Path path = folder.getPath();
OcamlDebugLauncherStep.java,"Step chmod = new MakeExecutableStep(filesystem, args.getOutput());","if (args != null ) Step chmod = new MakeExecutableStep(filesystem, args.getOutput());"
ClientSideSlb.java,Stopwatch stopwatch = Stopwatch.createStarted();,if (Stopwatch != null ) Stopwatch stopwatch = Stopwatch.createStarted();
DefaultDependencyFileRuleKeyFactory.java,ImmutableSet<SourcePath> inputs = builder.getInputsSoFar();,if (builder != null ) ImmutableSet<SourcePath> inputs = builder.getInputsSoFar();
DefaultDependencyFileRuleKeyFactory.java,Optional<RuleKey> ruleKey = builder.build();,if (builder != null ) Optional<RuleKey> ruleKey = builder.build();
DefaultDependencyFileRuleKeyFactory.java,Iterable<SourcePath> inputsSoFar = builder.getIterableInputsSoFar();,if (builder != null ) Iterable<SourcePath> inputsSoFar = builder.getIterableInputsSoFar();
DefaultDependencyFileRuleKeyFactory.java,Optional<RuleKey> ruleKey = builder.build();,if (builder != null ) Optional<RuleKey> ruleKey = builder.build();
NativeRelinker.java,BuildRule baseRule = resolver.getRule(source).get();,if (resolver != null ) BuildRule baseRule = resolver.getRule(source).get();
TestRunning.java,JavaLibrary library = rulesUnderTest.iterator().next();,if (rulesUnderTest != null ) JavaLibrary library = rulesUnderTest.iterator().next();
TestRunning.java,rulesUnderTest = ImmutableSet.of();,if (ImmutableSet != null ) rulesUnderTest = ImmutableSet.of();
ProjectGenerator.java,BuildRuleType type = targetNode.getType();,if (targetNode != null ) BuildRuleType type = targetNode.getType();
ProjectCommand.java,BuildRuleType nodeType = node.get().getType();,if (node != null ) BuildRuleType nodeType = node.get().getType();
ProjectCommand.java,BuildRuleType type = inputNode.getType();,if (inputNode != null ) BuildRuleType type = inputNode.getType();
ProjectCommand.java,BuildRuleType type = node.getType();,if (node != null ) BuildRuleType type = node.getType();
DefaultIjLibraryFactory.java,IjLibraryRule rule = libraryRuleIndex.get(targetNode.getType());,if (libraryRuleIndex != null ) IjLibraryRule rule = libraryRuleIndex.get(targetNode.getType());
IjModuleFactory.java,BuildRuleType type = targetNode.getType();,if (targetNode != null ) BuildRuleType type = targetNode.getType();
IjModuleGraph.java,BuildRuleType type = node.getType();,if (node != null ) BuildRuleType type = node.getType();
AppleBundleIntegrationTest.java,String resultContents = filesystem.readFileIfItExists(dryRunResultsPath).get();,if (filesystem != null ) String resultContents = filesystem.readFileIfItExists(dryRunResultsPath).get();
TopologicalSort.java,Iterable<T> roots = ImmutableSortedSet.copyOf(graph.getNodesWithNoIncomingEdges());,if (ImmutableSortedSet != null ) Iterable<T> roots = ImmutableSortedSet.copyOf(graph.getNodesWithNoIncomingEdges());
TopologicalSort.java,int nodeCount = Iterables.size(graph.getNodes());,if (Iterables != null ) int nodeCount = Iterables.size(graph.getNodes());
HaskellLibraryDescription.java,BuildTarget target = baseTarget.withFlavors(cxxPlatform.getFlavor());,if (baseTarget != null ) BuildTarget target = baseTarget.withFlavors(cxxPlatform.getFlavor());
AbstractCxxSourceRuleFactory.java,Set<Flavor> flavors = target.getFlavors();,if (target != null ) Set<Flavor> flavors = target.getFlavors();
AbstractCxxSourceRuleFactory.java,"BuildTarget target = createPreprocessBuildTarget(name, source.getType());","if (source != null ) BuildTarget target = createPreprocessBuildTarget(name, source.getType());"
AbstractCxxSourceRuleFactory.java,"BuildTarget target = createPreprocessBuildTarget(name, source.getType());","if (source != null ) BuildTarget target = createPreprocessBuildTarget(name, source.getType());"
CxxCompilationDatabase.java,Optional<CxxPreprocessAndCompile> preprocessRule = Optional.empty();,if (Optional != null ) Optional<CxxPreprocessAndCompile> preprocessRule = Optional.empty();
CxxCompilationDatabase.java,SourcePath inputSourcePath = preprocessRule.orElse(compileRule).getInput();,if (preprocessRule != null ) SourcePath inputSourcePath = preprocessRule.orElse(compileRule).getInput();
CxxCompilationDatabase.java,ProjectFilesystem inputFilesystem = preprocessRule.orElse(compileRule).getProjectFilesystem();,if (preprocessRule != null ) ProjectFilesystem inputFilesystem = preprocessRule.orElse(compileRule).getProjectFilesystem();
CxxPreprocessAndCompile.java,PreprocessorDelegate effectivePreprocessorDelegate = preprocessRule.preprocessDelegate.get();,if (preprocessRule != null ) PreprocessorDelegate effectivePreprocessorDelegate = preprocessRule.preprocessDelegate.get();
CxxPreprocessorOutputTransformerFactory.java,replacementPath = Escaper.escapePathForCIncludeString(normalizedPath.get());,if (Escaper != null ) replacementPath = Escaper.escapePathForCIncludeString(normalizedPath.get());
NdkCxxPlatformTest.java,preprocessRukeKeys = Maps.newHashMap();,if (Maps != null ) preprocessRukeKeys = Maps.newHashMap();
CxxBinaryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
CxxBinaryIntegrationTest.java,String contents = workspace.getFileContents(output.toString());,if (workspace != null ) String contents = workspace.getFileContents(output.toString());
CxxPreprocessAndCompileTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxPreprocessorOutputTransformerFactoryTest.java,HeaderPathNormalizer normalizer = normalizerBuilder.build();,if (normalizerBuilder != null ) HeaderPathNormalizer normalizer = normalizerBuilder.build();
CxxPreprocessAndCompileStep.java,ProcessExecutor executor = new DefaultProcessExecutor(Console.createNullConsole());,if (DefaultProcessExecutor(Console != null ) ProcessExecutor executor = new DefaultProcessExecutor(Console.createNullConsole());
CxxPreprocessAndCompileStep.java,int compileStatus = executor.waitForLaunchedProcess(compile).getExitCode();,if (executor != null ) int compileStatus = executor.waitForLaunchedProcess(compile).getExitCode();
CxxPreprocessAndCompileStep.java,int preprocessStatus = executor.waitForLaunchedProcess(preprocess).getExitCode();,if (executor != null ) int preprocessStatus = executor.waitForLaunchedProcess(preprocess).getExitCode();
CxxPreprocessAndCompileStep.java,String preprocessErr = new String(preprocessError.toByteArray());,if (String(preprocessError != null ) String preprocessErr = new String(preprocessError.toByteArray());
CxxPreprocessAndCompileStep.java,String compileErr = new String(compileError.toByteArray());,if (String(compileError != null ) String compileErr = new String(compileError.toByteArray());
QueryTargetsMacroExpanderTest.java,expander = new QueryMacroExpander(Optional.empty());,if (QueryMacroExpander(Optional != null ) expander = new QueryMacroExpander(Optional.empty());
HttpDownloaderIntegrationTest.java,downloader = new HttpDownloader(Optional.empty());,if (HttpDownloader(Optional != null ) downloader = new HttpDownloader(Optional.empty());
HttpDownloaderTest.java,Downloader downloader = new HttpDownloader(Optional.empty());,if (HttpDownloader(Optional != null ) Downloader downloader = new HttpDownloader(Optional.empty());
JavaLibraryDescription.java,baseLibrary = optionalBaseLibrary.get();,if (optionalBaseLibrary != null ) baseLibrary = optionalBaseLibrary.get();
TargetsCommand.java,Optional<DefaultRuleKeyBuilderFactory> ruleKeyBuilderFactory = Optional.empty();,if (Optional != null ) Optional<DefaultRuleKeyBuilderFactory> ruleKeyBuilderFactory = Optional.empty();
BuildRuleEvent.java,this.ruleKey = ruleKeyBuilderFactory.build(rule).toString();,if (ruleKeyBuilderFactory != null ) this.ruleKey = ruleKeyBuilderFactory.build(rule).toString();
BuildRuleEvent.java,this.ruleKey = ruleKeyBuilderFactory.build(rule).toString();,if (ruleKeyBuilderFactory != null ) this.ruleKey = ruleKeyBuilderFactory.build(rule).toString();
GenruleTest.java,RuleKey originalInputRuleKey = inputBasedRuleKeyBuilderFactory.build(rule).get();,if (inputBasedRuleKeyBuilderFactory != null ) RuleKey originalInputRuleKey = inputBasedRuleKeyBuilderFactory.build(rule).get();
GenruleTest.java,RuleKey unchangedInputBasedRuleKey = inputBasedRuleKeyBuilderFactory.build(rule).get();,if (inputBasedRuleKeyBuilderFactory != null ) RuleKey unchangedInputBasedRuleKey = inputBasedRuleKeyBuilderFactory.build(rule).get();
GenruleTest.java,RuleKey changedInputBasedRuleKey = inputBasedRuleKeyBuilderFactory.build(rule).get();,if (inputBasedRuleKeyBuilderFactory != null ) RuleKey changedInputBasedRuleKey = inputBasedRuleKeyBuilderFactory.build(rule).get();
GenruleTest.java,RuleKey originalInputRuleKey = inputBasedRuleKeyBuilderFactory.build(rule).get();,if (inputBasedRuleKeyBuilderFactory != null ) RuleKey originalInputRuleKey = inputBasedRuleKeyBuilderFactory.build(rule).get();
GenruleTest.java,RuleKey unchangedInputBasedRuleKey = inputBasedRuleKeyBuilderFactory.build(rule).get();,if (inputBasedRuleKeyBuilderFactory != null ) RuleKey unchangedInputBasedRuleKey = inputBasedRuleKeyBuilderFactory.build(rule).get();
GenruleTest.java,RuleKey changedInputBasedRuleKey = inputBasedRuleKeyBuilderFactory.build(rule).get();,if (inputBasedRuleKeyBuilderFactory != null ) RuleKey changedInputBasedRuleKey = inputBasedRuleKeyBuilderFactory.build(rule).get();
GenruleTest.java,RuleKey originalInputRuleKey = inputBasedRuleKeyBuilderFactory.build(rule).get();,if (inputBasedRuleKeyBuilderFactory != null ) RuleKey originalInputRuleKey = inputBasedRuleKeyBuilderFactory.build(rule).get();
GenruleTest.java,RuleKey unchangedInputBasedRuleKey = inputBasedRuleKeyBuilderFactory.build(rule).get();,if (inputBasedRuleKeyBuilderFactory != null ) RuleKey unchangedInputBasedRuleKey = inputBasedRuleKeyBuilderFactory.build(rule).get();
GenruleTest.java,RuleKey changedInputBasedRuleKey = inputBasedRuleKeyBuilderFactory.build(rule).get();,if (inputBasedRuleKeyBuilderFactory != null ) RuleKey changedInputBasedRuleKey = inputBasedRuleKeyBuilderFactory.build(rule).get();
IjProjectWriter.java,languageLevel = languageLevelFromConfig.get();,if (languageLevelFromConfig != null ) languageLevel = languageLevelFromConfig.get();
Genrule.java,Path basePath = getBuildTarget().getBasePath();,if (getBuildTarget() != null ) Path basePath = getBuildTarget().getBasePath();
Genrule.java,Path canonicalPath = absolutePath.normalize();,if (absolutePath != null ) Path canonicalPath = absolutePath.normalize();
Genrule.java,localPath = canonicalPath.getFileName();,if (canonicalPath != null ) localPath = canonicalPath.getFileName();
JavacStep.java,String invoker = invokingRule.toString();,if (invokingRule != null ) String invoker = invokingRule.toString();
JavacStep.java,ImmutableSet<String> suggestions = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<String> suggestions = ImmutableSet.of();
JavacStep.java,returnedStderr = Optional.empty();,if (Optional != null ) returnedStderr = Optional.empty();
TopologicalSort.java,Queue<T> nextLevel = Queues.newArrayDeque(graph.getNodesWithNoOutgoingEdges());,if (Queues != null ) Queue<T> nextLevel = Queues.newArrayDeque(graph.getNodesWithNoOutgoingEdges());
TopologicalSort.java,Set<T> visitedNodes = Sets.newHashSet();,if (Sets != null ) Set<T> visitedNodes = Sets.newHashSet();
TopologicalSort.java,nextLevel = Queues.newArrayDeque();,if (Queues != null ) nextLevel = Queues.newArrayDeque();
TopologicalSort.java,Set<T> level = Sets.newTreeSet();,if (Sets != null ) Set<T> level = Sets.newTreeSet();
TopologicalSort.java,T node = toExplore.remove();,if (toExplore != null ) T node = toExplore.remove();
BaseRunner.java,TestSelectorList testSelectorList = TestSelectorList.empty();,if (TestSelectorList != null ) TestSelectorList testSelectorList = TestSelectorList.empty();
BuildCommand.java,ImmutableSet<String> aliases = params.getBuckConfig().getAliases();,if (params != null ) ImmutableSet<String> aliases = params.getBuckConfig().getAliases();
BuildCommand.java,ImmutableSet<String> aliases = params.getBuckConfig().getAliases();,if (params != null ) ImmutableSet<String> aliases = params.getBuckConfig().getAliases();
RustCompileStep.java,ImmutableList<String> args = argsbuilder.build();,if (argsbuilder != null ) ImmutableList<String> args = argsbuilder.build();
HgCmdLineInterfaceIntegrationTest.java,Path tempFolderPath = tempFolder.getRoot().toPath();,if (tempFolder != null ) Path tempFolderPath = tempFolder.getRoot().toPath();
BuckConfig.java,String value = aliasEntry.getValue();,if (aliasEntry != null ) String value = aliasEntry.getValue();
TestCommand.java,PrintStream out = console.getStdOut();,if (console != null ) PrintStream out = console.getStdOut();
GoTest.java,ImmutableList<TestCaseSummary> summaries = ImmutableList.of();,if (ImmutableList != null ) ImmutableList<TestCaseSummary> summaries = ImmutableList.of();
PythonTest.java,ObjectMapper mapper = executionContext.getObjectMapper();,if (executionContext != null ) ObjectMapper mapper = executionContext.getObjectMapper();
ShTest.java,ObjectMapper mapper = context.getObjectMapper();,if (context != null ) ObjectMapper mapper = context.getObjectMapper();
AbstractErrorLogRecord.java,String message = getRecord().getMessage();,if (getRecord() != null ) String message = getRecord().getMessage();
AbstractErrorLogRecord.java,String logger = getRecord().getLoggerName();,if (getRecord() != null ) String logger = getRecord().getLoggerName();
BuckConfig.java,BuildTarget buildTarget = buildTargetPoundIdx.getFirst();,if (buildTargetPoundIdx != null ) BuildTarget buildTarget = buildTargetPoundIdx.getFirst();
BuckConfig.java,int poundIdx = buildTargetPoundIdx.getSecond();,if (buildTargetPoundIdx != null ) int poundIdx = buildTargetPoundIdx.getSecond();
TargetPatternEvaluator.java,BuildTarget alias = buckConfig.getBuildTargetForAlias(pattern).getFirst();,if (buckConfig != null ) BuildTarget alias = buckConfig.getBuildTargetForAlias(pattern).getFirst();
DaemonicParserState.java,this.cachedEnvironment = ImmutableMap.of();,if (ImmutableMap != null ) this.cachedEnvironment = ImmutableMap.of();
DefaultJavaLibraryTest.java,Path root = libraryOne.getProjectFilesystem().getRootPath();,if (libraryOne != null ) Path root = libraryOne.getProjectFilesystem().getRootPath();
DefaultClassUsageFileReader.java,Optional<SourcePath> depAbiJar = depWithJavaAbi.getAbiJar();,if (depWithJavaAbi != null ) Optional<SourcePath> depAbiJar = depWithJavaAbi.getAbiJar();
ResourcePoolTest.java,Phaser phaser = new Phaser(f.getMaxResources());,if (Phaser(f != null ) Phaser phaser = new Phaser(f.getMaxResources());
TestResultFormatter.java,numFailures += summary.getFailureCount();,if (summary != null ) numFailures += summary.getFailureCount();
TestResultFormatter.java,numTestResults += testCaseSummary.getFailureCount() + testCaseSummary.getPassedCount();,if (testCaseSummary != null ) numTestResults += testCaseSummary.getFailureCount() + testCaseSummary.getPassedCount();
TestResultFormatter.java,numTestResults += testCaseSummary.getSkippedCount();,if (testCaseSummary != null ) numTestResults += testCaseSummary.getSkippedCount();
TestResultFormatter.java,ImmutableList<Path> testLogPaths = testLogPathsBuilder.build();,if (testLogPathsBuilder != null ) ImmutableList<Path> testLogPaths = testLogPathsBuilder.build();
TestSelectorList.java,String lastLine = formatEverythingElseLine(lastTestSelector.isInclusive());,if (formatEverythingElseLine(lastTestSelector != null ) String lastLine = formatEverythingElseLine(lastTestSelector.isInclusive());
JUnitRunner.java,String methodName = description.getMethodName();,if (description != null ) String methodName = description.getMethodName();
JUnitRunner.java,String className = description.getClassName();,if (description != null ) String className = description.getClassName();
JUnitRunner.java,boolean isTestClassAbstract = Modifier.isAbstract(testClass.getModifiers());,if (Modifier != null ) boolean isTestClassAbstract = Modifier.isAbstract(testClass.getModifiers());
JUnitRunner.java,results = Collections.emptyList();,if (Collections != null ) results = Collections.emptyList();
JUnitRunner.java,String message = testResult.failure.getMessage();,if (testResult != null ) String message = testResult.failure.getMessage();
TestNGRunner.java,String methodName = result.getTestName();,if (result != null ) String methodName = result.getTestName();
BuildTargetPatternParser.java,cellPath = cellPathResolver.apply(Optional.empty());,if (cellPathResolver != null ) cellPath = cellPathResolver.apply(Optional.empty());
Parser.java,T constructorArg = targetNode.getConstructorArg();,if (targetNode != null ) T constructorArg = targetNode.getConstructorArg();
AbstractTypeCoercerFactory.java,Type rawType = parameterizedType.getRawType();,if (parameterizedType != null ) Type rawType = parameterizedType.getRawType();
MapTypeCoercer.java,K key = entry.getKey();,if (entry != null ) K key = entry.getKey();
MapTypeCoercer.java,V value = entry.getValue();,if (entry != null ) V value = entry.getValue();
NeededCoverageSpecTypeCoercer.java,Float ratio = object.getNeededCoverageRatio();,if (object != null ) Float ratio = object.getNeededCoverageRatio();
NeededCoverageSpecTypeCoercer.java,BuildTarget buildTarget = object.getBuildTarget();,if (object != null ) BuildTarget buildTarget = object.getBuildTarget();
NeededCoverageSpecTypeCoercer.java,Optional<String> pathName = object.getPathName();,if (object != null ) Optional<String> pathName = object.getPathName();
OcamlSourceTypeCoercer.java,String name = object.getName();,if (object != null ) String name = object.getName();
OcamlSourceTypeCoercer.java,SourcePath sourcePath = object.getSource();,if (object != null ) SourcePath sourcePath = object.getSource();
PairTypeCoercer.java,FIRST first = object.getFirst();,if (object != null ) FIRST first = object.getFirst();
PairTypeCoercer.java,SECOND second = object.getSecond();,if (object != null ) SECOND second = object.getSecond();
PatternMatchedCollectionTypeCoercer.java,Pattern pattern = patternAndValue.getFirst();,if (patternAndValue != null ) Pattern pattern = patternAndValue.getFirst();
PatternMatchedCollectionTypeCoercer.java,T value = patternAndValue.getSecond();,if (patternAndValue != null ) T value = patternAndValue.getSecond();
SortedMapTypeCoercer.java,K key = entry.getKey();,if (entry != null ) K key = entry.getKey();
SortedMapTypeCoercer.java,V value = entry.getValue();,if (entry != null ) V value = entry.getValue();
SortedSetTypeCoercer.java,SortedSet<T> builder = Sets.newTreeSet();,if (Sets != null ) SortedSet<T> builder = Sets.newTreeSet();
SourceWithFlagsTypeCoercer.java,flags = ImmutableList.of();,if (ImmutableList != null ) flags = ImmutableList.of();
SourceWithFlagsTypeCoercer.java,source = iterator.next();,if (iterator != null ) source = iterator.next();
SourceWithFlagsTypeCoercer.java,flags = iterator.next();,if (iterator != null ) flags = iterator.next();
VersionMatchedCollectionTypeCoercer.java,T value = pair.getSecond();,if (pair != null ) T value = pair.getSecond();
GoLibraryDescription.java,Arg args = targetNode.getConstructorArg();,if (targetNode != null ) Arg args = targetNode.getConstructorArg();
GoLibraryDescription.java,Arg args = targetNode.getConstructorArg();,if (targetNode != null ) Arg args = targetNode.getConstructorArg();
GoTestDescription.java,Arg args = targetNode.getConstructorArg();,if (targetNode != null ) Arg args = targetNode.getConstructorArg();
GoTestDescription.java,GoLibraryDescription.Arg libraryArg = args.library.get().getConstructorArg();,if (args != null ) GoLibraryDescription.Arg libraryArg = args.library.get().getConstructorArg();
IjModuleFactory.java,Path parent = input.getParent();,if (input != null ) Path parent = input.getParent();
Main.java,Verbosity verbosity = console.getVerbosity();,if (console != null ) Verbosity verbosity = console.getVerbosity();
TestResultFormatter.java,numTestsFailed += summary.getFailureCount();,if (summary != null ) numTestsFailed += summary.getFailureCount();
TestResultFormatter.java,isDryRun = isDryRun || testCaseSummary.isDryRun();,if (testCaseSummary != null ) isDryRun = isDryRun || testCaseSummary.isDryRun();
TestResultFormatter.java,numTestsPassed += testCaseSummary.getPassedCount();,if (testCaseSummary != null ) numTestsPassed += testCaseSummary.getPassedCount();
TestResultFormatter.java,numTestsSkipped += testCaseSummary.getSkippedCount();,if (testCaseSummary != null ) numTestsSkipped += testCaseSummary.getSkippedCount();
TestResultFormatter.java,ImmutableList<Path> testLogPaths = testLogPathsBuilder.build();,if (testLogPathsBuilder != null ) ImmutableList<Path> testLogPaths = testLogPathsBuilder.build();
JUnitRunner.java,int klassModifiers = klass.getModifiers();,if (klass != null ) int klassModifiers = klass.getModifiers();
JUnitRunner.java,String methodName = description.getMethodName();,if (description != null ) String methodName = description.getMethodName();
JUnitRunner.java,String className = description.getClassName();,if (description != null ) String className = description.getClassName();
TestNGRunner.java,int klassModifiers = klass.getModifiers();,if (klass != null ) int klassModifiers = klass.getModifiers();
TestNGRunner.java,String className = testMethod.getDeclaringClass().getName();,if (testMethod != null ) String className = testMethod.getDeclaringClass().getName();
TestNGRunner.java,String methodName = testMethod.getName();,if (testMethod != null ) String methodName = testMethod.getName();
TestNGRunner.java,String methodName = result.getMethod().getMethodName();,if (result != null ) String methodName = result.getMethod().getMethodName();
AbstractIncludeLogEntry.java,ret = ret.getParent();,if (ret != null ) ret = ret.getParent();
TestResultFormatter.java,numFailures += summary.getFailureCount();,if (summary != null ) numFailures += summary.getFailureCount();
TestResultFormatter.java,numTestResults += testCaseSummary.getFailureCount() + testCaseSummary.getPassedCount();,if (testCaseSummary != null ) numTestResults += testCaseSummary.getFailureCount() + testCaseSummary.getPassedCount();
TestResultFormatter.java,numTestResults += testCaseSummary.getSkippedCount();,if (testCaseSummary != null ) numTestResults += testCaseSummary.getSkippedCount();
TestResultFormatter.java,ImmutableList<Path> testLogPaths = testLogPathsBuilder.build();,if (testLogPathsBuilder != null ) ImmutableList<Path> testLogPaths = testLogPathsBuilder.build();
JUnitRunner.java,String methodName = description.getMethodName();,if (description != null ) String methodName = description.getMethodName();
JUnitRunner.java,String className = description.getClassName();,if (description != null ) String className = description.getClassName();
JUnitRunner.java,boolean isTestClassAbstract = Modifier.isAbstract(testClass.getModifiers());,if (Modifier != null ) boolean isTestClassAbstract = Modifier.isAbstract(testClass.getModifiers());
JUnitRunner.java,results = Collections.emptyList();,if (Collections != null ) results = Collections.emptyList();
JUnitRunner.java,String message = testResult.failure.getMessage();,if (testResult != null ) String message = testResult.failure.getMessage();
TestNGRunner.java,String methodName = result.getTestName();,if (result != null ) String methodName = result.getTestName();
CachingBuildEngine.java,Path dest = metadataDir.resolve(ent.getKey());,if (metadataDir != null ) Path dest = metadataDir.resolve(ent.getKey());
ProvisioningProfileCopyStep.java,prefix = ProvisioningProfileMetadata.prefixFromEntitlements(entitlements.get());,if (ProvisioningProfileMetadata != null ) prefix = ProvisioningProfileMetadata.prefixFromEntitlements(entitlements.get());
WorkerShellStep.java,workerHash = paramsToUse.getWorkerHash().get();,if (paramsToUse != null ) workerHash = paramsToUse.getWorkerHash().get();
EventSerializationTest.java,HashSet<String> expectedFields = Sets.newHashSet(expected.fieldNames());,if (Sets != null ) HashSet<String> expectedFields = Sets.newHashSet(expected.fieldNames());
EventSerializationTest.java,HashSet<String> actualFields = Sets.newHashSet(actual.fieldNames());,if (Sets != null ) HashSet<String> actualFields = Sets.newHashSet(actual.fieldNames());
EventSerializationTest.java,JsonFactory factory = MAPPER.getFactory();,if (MAPPER != null ) JsonFactory factory = MAPPER.getFactory();
MultiArtifactCache.java,outputPath = BorrowablePath.borrowablePath(output.getUnchecked());,if (BorrowablePath != null ) outputPath = BorrowablePath.borrowablePath(output.getUnchecked());
MultiArtifactCache.java,outputPath = BorrowablePath.notBorrowablePath(output.getUnchecked());,if (BorrowablePath != null ) outputPath = BorrowablePath.notBorrowablePath(output.getUnchecked());
MultiArtifactCache.java,output = BorrowablePath.borrowablePath(output.getPath());,if (BorrowablePath != null ) output = BorrowablePath.borrowablePath(output.getPath());
MultiArtifactCache.java,output = BorrowablePath.notBorrowablePath(output.getPath());,if (BorrowablePath != null ) output = BorrowablePath.notBorrowablePath(output.getPath());
ProjectBuildFileParserPool.java,this.createdParsers = ArrayListMultimap.create();,if (ArrayListMultimap != null ) this.createdParsers = ArrayListMultimap.create();
ProjectBuildFileParserPool.java,ProjectBuildFileParser parser = parserRequest.getLeft();,if (parserRequest != null ) ProjectBuildFileParser parser = parserRequest.getLeft();
ProjectBuildFileParserPool.java,SettableFuture<Void> parserFuture = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<Void> parserFuture = SettableFuture.create();
ProjectBuildFileParserPool.java,ProjectBuildFileParser parser = parserQueue.pollFirst();,if (parserQueue != null ) ProjectBuildFileParser parser = parserQueue.pollFirst();
ProjectBuildFileParserPool.java,SettableFuture<Void> nextRequest = parserRequests.get(cell).pollFirst();,if (parserRequests != null ) SettableFuture<Void> nextRequest = parserRequests.get(cell).pollFirst();
ProjectBuildFileParserPool.java,parkedParsersCount += projectBuildFileParsers.size();,if (projectBuildFileParsers != null ) parkedParsersCount += projectBuildFileParsers.size();
BuildTargetPatternParser.java,cellPath = cellNames.getCellPath(Optional.empty());,if (cellNames != null ) cellPath = cellNames.getCellPath(Optional.empty());
AbstractTypeCoercerFactory.java,Type rawType = parameterizedType.getRawType();,if (parameterizedType != null ) Type rawType = parameterizedType.getRawType();
TopologicalSort.java,Iterable<T> roots = ImmutableSortedSet.copyOf(graph.getNodesWithNoIncomingEdges());,if (ImmutableSortedSet != null ) Iterable<T> roots = ImmutableSortedSet.copyOf(graph.getNodesWithNoIncomingEdges());
TopologicalSort.java,int nodeCount = Iterables.size(graph.getNodes());,if (Iterables != null ) int nodeCount = Iterables.size(graph.getNodes());
TopologicalSort.java,Queue<T> nextLevel = Queues.newArrayDeque(graph.getNodesWithNoOutgoingEdges());,if (Queues != null ) Queue<T> nextLevel = Queues.newArrayDeque(graph.getNodesWithNoOutgoingEdges());
TopologicalSort.java,Set<T> visitedNodes = Sets.newHashSet();,if (Sets != null ) Set<T> visitedNodes = Sets.newHashSet();
TopologicalSort.java,nextLevel = Queues.newArrayDeque();,if (Queues != null ) nextLevel = Queues.newArrayDeque();
TopologicalSort.java,Set<T> level = Sets.newTreeSet();,if (Sets != null ) Set<T> level = Sets.newTreeSet();
TopologicalSort.java,T node = toExplore.remove();,if (toExplore != null ) T node = toExplore.remove();
AbstractBottomUpTraversal.java,this.visitedNodes = Sets.newHashSet();,if (Sets != null ) this.visitedNodes = Sets.newHashSet();
AbstractBottomUpTraversal.java,this.nodesToExplore = Lists.newLinkedList();,if (Lists != null ) this.nodesToExplore = Lists.newLinkedList();
AbstractBottomUpTraversal.java,this.effectiveOutDegreesOfExplorableNodes = Maps.newHashMap();,if (Maps != null ) this.effectiveOutDegreesOfExplorableNodes = Maps.newHashMap();
AbstractBottomUpTraversal.java,T node = nodesToExplore.remove();,if (nodesToExplore != null ) T node = nodesToExplore.remove();
DoctorReportHelper.java,rulekeyLog = Optional.empty();,if (Optional != null ) rulekeyLog = Optional.empty();
DefaultTraversableGraph.java,this.nodes = graph.createImmutableCopyOfNodes();,if (graph != null ) this.nodes = graph.createImmutableCopyOfNodes();
DefaultTraversableGraph.java,this.outgoingEdges = graph.createImmutableCopyOfOutgoingEdges();,if (graph != null ) this.outgoingEdges = graph.createImmutableCopyOfOutgoingEdges();
DefaultTraversableGraph.java,this.incomingEdges = graph.createImmutableCopyOfIncomingEdges();,if (graph != null ) this.incomingEdges = graph.createImmutableCopyOfIncomingEdges();
DefaultTraversableGraph.java,this.isAcyclic = graph.isAcyclic();,if (graph != null ) this.isAcyclic = graph.isAcyclic();
ProvisioningProfileCopyStepTest.java,Future<ProvisioningProfileMetadata> profileFuture = step.getSelectedProvisioningProfileFuture();,if (step != null ) Future<ProvisioningProfileMetadata> profileFuture = step.getSelectedProvisioningProfileFuture();
ProvisioningProfileCopyStepTest.java,ProvisioningProfileMetadata selectedProfile = step.getSelectedProvisioningProfileFuture().get();,if (step != null ) ProvisioningProfileMetadata selectedProfile = step.getSelectedProvisioningProfileFuture().get();
ProvisioningProfileCopyStepTest.java,ProvisioningProfileMetadata selectedProfile = step.getSelectedProvisioningProfileFuture().get();,if (step != null ) ProvisioningProfileMetadata selectedProfile = step.getSelectedProvisioningProfileFuture().get();
CacheCommand.java,PrintStream stdOut = params.getConsole().getStdOut();,if (params != null ) PrintStream stdOut = params.getConsole().getStdOut();
CxxDescriptionEnhancer.java,Optional<SymlinkTree> sandboxTree = Optional.empty();,if (Optional != null ) Optional<SymlinkTree> sandboxTree = Optional.empty();
CxxDescriptionEnhancer.java,Optional<SymlinkTree> sandboxTree = Optional.empty();,if (Optional != null ) Optional<SymlinkTree> sandboxTree = Optional.empty();
CxxBinaryIntegrationTest.java,BuckBuildLog buildLog = workspace.getBuildLog();,if (workspace != null ) BuckBuildLog buildLog = workspace.getBuildLog();
SuperConsoleEventBusListener.java,int testPassesVal = testPasses.get();,if (testPasses != null ) int testPassesVal = testPasses.get();
SuperConsoleEventBusListener.java,int testFailuresVal = testFailures.get();,if (testFailures != null ) int testFailuresVal = testFailures.get();
SuperConsoleEventBusListener.java,int testSkipsVal = testSkips.get();,if (testSkips != null ) int testSkipsVal = testSkips.get();
AbstractCxxSourceRuleFactory.java,"CxxToolFlags compilerFlags = computeCompilerFlags(source.getType(), source.getFlags());","if (source != null ) CxxToolFlags compilerFlags = computeCompilerFlags(source.getType(), source.getFlags());"
CxxLibraryDescription.java,SourcePath sourcePath = source.getPath();,if (source != null ) SourcePath sourcePath = source.getPath();
CxxBinaryIntegrationTest.java,BuckConfig buckConfig = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig buckConfig = FakeBuckConfig.builder().build();
CxxBinaryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
TestCommand.java,explicitBuildTargets = ImmutableSet.of();,if (ImmutableSet != null ) explicitBuildTargets = ImmutableSet.of();
TestCommand.java,targetGraph = result.getTargetGraph();,if (result != null ) targetGraph = result.getTargetGraph();
TestCommand.java,explicitBuildTargets = result.getBuildTargets();,if (result != null ) explicitBuildTargets = result.getBuildTargets();
CxxDescriptionEnhancer.java,"Path linkOutput = getLinkOutputPath(params.getBuildTarget(), params.getProjectFilesystem());","if (params != null ) Path linkOutput = getLinkOutputPath(params.getBuildTarget(), params.getProjectFilesystem());"
CxxDescriptionEnhancer.java,BuildTarget linkRuleTarget = createCxxLinkTarget(params.getBuildTarget());,if (createCxxLinkTarget(params != null ) BuildTarget linkRuleTarget = createCxxLinkTarget(params.getBuildTarget());
OcamlRuleBuilder.java,ImmutableList<OCamlLibrary> ocamlInput = OCamlUtil.getTransitiveOCamlInput(params.getDeps());,if (OCamlUtil != null ) ImmutableList<OCamlLibrary> ocamlInput = OCamlUtil.getTransitiveOCamlInput(params.getDeps());
OcamlRuleBuilder.java,ImmutableList<OCamlLibrary> ocamlInput = OCamlUtil.getTransitiveOCamlInput(params.getDeps());,if (OCamlUtil != null ) ImmutableList<OCamlLibrary> ocamlInput = OCamlUtil.getTransitiveOCamlInput(params.getDeps());
OcamlRuleBuilder.java,OCamlGeneratedBuildRules result = generator.generate();,if (generator != null ) OCamlGeneratedBuildRules result = generator.generate();
KnownBuildRuleTypes.java,BuildRuleType type = description.getBuildRuleType();,if (description != null ) BuildRuleType type = description.getBuildRuleType();
OwnersReportTest.java,FakeDescription.FakeArg arg = description.createUnpopulatedConstructorArg();,if (description != null ) FakeDescription.FakeArg arg = description.createUnpopulatedConstructorArg();
TargetNodeVisibilityTest.java,FakeDescription.FakeArg arg = description.createUnpopulatedConstructorArg();,if (description != null ) FakeDescription.FakeArg arg = description.createUnpopulatedConstructorArg();
DefaultTargetNodeToBuildRuleTransformer.java,Description<T> description = targetNode.getDescription();,if (targetNode != null ) Description<T> description = targetNode.getDescription();
DoctorReportHelper.java,String reportLocation = result.get().getReportSubmitLocation();,if (result != null ) String reportLocation = result.get().getReportSubmitLocation();
AbstractReport.java,String reportLocation = defectSubmitResult.get().getReportSubmitLocation();,if (defectSubmitResult != null ) String reportLocation = defectSubmitResult.get().getReportSubmitLocation();
DefectReporterTest.java,Path reportPath = filesystem.resolve(defectSubmitResult.getReportSubmitLocation());,if (filesystem != null ) Path reportPath = filesystem.resolve(defectSubmitResult.getReportSubmitLocation());
DefectReporterTest.java,Path reportPath = filesystem.resolve(defectSubmitResult.getReportSubmitLocation());,if (filesystem != null ) Path reportPath = filesystem.resolve(defectSubmitResult.getReportSubmitLocation());
RageCommandIntegrationTest.java,ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();
MultiarchFile.java,BuildRule rule = maybeRule.get();,if (maybeRule != null ) BuildRule rule = maybeRule.get();
MultiarchFile.java,Path source = maybeLinkerMapPath.get();,if (maybeLinkerMapPath != null ) Path source = maybeLinkerMapPath.get();
MultiarchFile.java,Path dest = linkMapDir.resolve(source.getFileName());,if (linkMapDir != null ) Path dest = linkMapDir.resolve(source.getFileName());
AppleBundle.java,this.momc = appleCxxPlatform.getMomc();,if (appleCxxPlatform != null ) this.momc = appleCxxPlatform.getMomc();
AppleBundle.java,this.sdkRoot = appleCxxPlatform.getAppleSdkPaths().getSdkPath();,if (appleCxxPlatform != null ) this.sdkRoot = appleCxxPlatform.getAppleSdkPaths().getSdkPath();
PrebuiltCxxLibrary.java,CxxPreprocessorInput.Builder builder = CxxPreprocessorInput.builder();,if (CxxPreprocessorInput != null ) CxxPreprocessorInput.Builder builder = CxxPreprocessorInput.builder();
WorkerProcessPool.java,WorkerProcess workerProcess = workerProcesses.poll();,if (workerProcesses != null ) WorkerProcess workerProcess = workerProcesses.poll();
DaemonicParserState.java,Path cellPath = entry.getKey();,if (entry != null ) Path cellPath = entry.getKey();
DaemonicParserState.java,DaemonicCellState state = entry.getValue();,if (entry != null ) DaemonicCellState state = entry.getValue();
DaemonicParserState.java,Path cellPath = entry.getKey();,if (entry != null ) Path cellPath = entry.getKey();
DaemonicParserState.java,DaemonicCellState state = entry.getValue();,if (entry != null ) DaemonicCellState state = entry.getValue();
DoctorCommand.java,RageConfig rageConfig = RageBuckConfig.create(params.getBuckConfig());,if (RageBuckConfig != null ) RageConfig rageConfig = RageBuckConfig.create(params.getBuckConfig());
JavaDepsFinder.java,BuildRuleType buildRuleType = node.getDescription().getBuildRuleType();,if (node != null ) BuildRuleType buildRuleType = node.getDescription().getBuildRuleType();
JavaDepsFinder.java,JavaLibraryDescription.Arg arg = (JavaLibraryDescription.Arg) node.getConstructorArg();,if (node != null ) JavaLibraryDescription.Arg arg = (JavaLibraryDescription.Arg) node.getConstructorArg();
JavaDepsFinder.java,providedDeps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) providedDeps = ImmutableSortedSet.of();
JavaDepsFinder.java,exportedDeps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) exportedDeps = ImmutableSortedSet.of();
SwiftLibraryIntegrationTest.java,args.headersSearchPath = ImmutableMap.of();,if (ImmutableMap != null ) args.headersSearchPath = ImmutableMap.of();
AppleResources.java,ProjectFilesystem filesystem = targetNode.getRuleFactoryParams().getProjectFilesystem();,if (targetNode != null ) ProjectFilesystem filesystem = targetNode.getRuleFactoryParams().getProjectFilesystem();
NewNativeTargetProjectMutator.java,ProjectFilesystem filesystem = targetNode.getRuleFactoryParams().getProjectFilesystem();,if (targetNode != null ) ProjectFilesystem filesystem = targetNode.getRuleFactoryParams().getProjectFilesystem();
DefaultTargetNodeToBuildRuleTransformer.java,BuildRuleFactoryParams ruleFactoryParams = targetNode.getRuleFactoryParams();,if (targetNode != null ) BuildRuleFactoryParams ruleFactoryParams = targetNode.getRuleFactoryParams();
TargetGraphHashing.java,ProjectFilesystem cellFilesystem = node.getRuleFactoryParams().getProjectFilesystem();,if (node != null ) ProjectFilesystem cellFilesystem = node.getRuleFactoryParams().getProjectFilesystem();
AbstractNodeBuilder.java,this.cellRoots = new FakeCellPathResolver(factoryParams.getProjectFilesystem());,if (FakeCellPathResolver(factoryParams != null ) this.cellRoots = new FakeCellPathResolver(factoryParams.getProjectFilesystem());
BuckEventsQueue.java,String eventName = event.getEventName();,if (event != null ) String eventName = event.getEventName();
DefaultProcessExecutor.java,this.stdOutStream = console.getStdOut();,if (console != null ) this.stdOutStream = console.getStdOut();
DefaultProcessExecutor.java,this.stdErrStream = console.getStdErr();,if (console != null ) this.stdErrStream = console.getStdErr();
DefaultProcessExecutor.java,this.ansi = console.getAnsi();,if (console != null ) this.ansi = console.getAnsi();
DefaultProcessExecutor.java,this.processHelper = ProcessHelper.getInstance();,if (ProcessHelper != null ) this.processHelper = ProcessHelper.getInstance();
DefaultProcessExecutor.java,this.processRegistry = ProcessRegistry.getInstance();,if (ProcessRegistry != null ) this.processRegistry = ProcessRegistry.getInstance();
IjProjectWriter.java,Optional<String> languageLevel = projectConfig.getProjectLanguageLevel();,if (projectConfig != null ) Optional<String> languageLevel = projectConfig.getProjectLanguageLevel();
CachingBuildEngine.java,RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getFirst();,if (depFileRuleKeyAndInputs != null ) RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getFirst();
IjModuleFactory.java,sdkName = Optional.empty();,if (Optional != null ) sdkName = Optional.empty();
IjModuleFactory.java,Optional<String> sdkName = Optional.empty();,if (Optional != null ) Optional<String> sdkName = Optional.empty();
IjProjectBuckConfig.java,javaLibrarySdkNames = Collections.emptyMap();,if (Collections != null ) javaLibrarySdkNames = Collections.emptyMap();
WorkerToolDescriptionTest.java,args.args = Optional.empty();,if (Optional != null ) args.args = Optional.empty();
Genrule.java,Path output = rule.getPathToOutput();,if (rule != null ) Path output = rule.getPathToOutput();
GenruleTest.java,List<String> keysInOrder = ImmutableList.copyOf(environmentVariables.keySet());,if (ImmutableList != null ) List<String> keysInOrder = ImmutableList.copyOf(environmentVariables.keySet());
CxxPythonExtensionDescription.java,String extensionName = getExtensionName(params.getBuildTarget());,if (getExtensionName(params != null ) String extensionName = getExtensionName(params.getBuildTarget());
HttpArtifactCacheEvent.java,this.data = Maps.newHashMap();,if (Maps != null ) this.data = Maps.newHashMap();
AbstractConsoleEventBusListener.java,Optional<Long> artifactSizeBytes = event.getArtifactSizeBytes();,if (event != null ) Optional<Long> artifactSizeBytes = event.getArtifactSizeBytes();
HttpArtifactCacheUploadListener.java,totalUploadedBytes += event.getArtifactSizeBytes().get();,if (event != null ) totalUploadedBytes += event.getArtifactSizeBytes().get();
RuleKeyLoggerListenerTest.java,Set<RuleKey> ruleKeys = Sets.newHashSet();,if (Sets != null ) Set<RuleKey> ruleKeys = Sets.newHashSet();
DoctorReportHelper.java,rageUrl = Optional.empty();,if (Optional != null ) rageUrl = Optional.empty();
Watchman.java,Optional<String> clockId = Optional.empty();,if (Optional != null ) Optional<String> clockId = Optional.empty();
ProjectBuildFileParser.java,ProjectWatch projectWatch = options.getWatchman().getProjectWatch();,if (options != null ) ProjectWatch projectWatch = options.getWatchman().getProjectWatch();
AbstractBuildFileSpec.java,ProjectWatch projectWatch = watchman.getProjectWatch();,if (watchman != null ) ProjectWatch projectWatch = watchman.getProjectWatch();
AppleConfig.java,this.versionCache = new MapMaker().makeMap();,if (MapMaker() != null ) this.versionCache = new MapMaker().makeMap();
Watchman.java,long startTimeNanos = clock.nanoTime();,if (clock != null ) long startTimeNanos = clock.nanoTime();
Watchman.java,long projectWatchTimeNanos = clock.nanoTime();,if (clock != null ) long projectWatchTimeNanos = clock.nanoTime();
Watchman.java,long secondProjectWatchTimeNanos = clock.nanoTime();,if (clock != null ) long secondProjectWatchTimeNanos = clock.nanoTime();
Watchman.java,Path absoluteRootPath = rootPath.toAbsolutePath();,if (rootPath != null ) Path absoluteRootPath = rootPath.toAbsolutePath();
Watchman.java,long secondProjectWatchTimeNanos = clock.nanoTime();,if (clock != null ) long secondProjectWatchTimeNanos = clock.nanoTime();
Watchman.java,Optional<String> initialClock = Optional.empty();,if (Optional != null ) Optional<String> initialClock = Optional.empty();
Watchman.java,long clockStartTimeNanos = clock.nanoTime();,if (clock != null ) long clockStartTimeNanos = clock.nanoTime();
BuckPyFunction.java,this.name = info.getName();,if (info != null ) this.name = info.getName();
BuckPyFunction.java,this.pythonName = info.getPythonName();,if (info != null ) this.pythonName = info.getPythonName();
BuckPyFunction.java,this.optional = info.isOptional();,if (info != null ) this.optional = info.isOptional();
AbstractCellConfig.java,builder = ImmutableMap.builder();,if (ImmutableMap != null ) builder = ImmutableMap.builder();
AbstractCellConfig.java,cell = Maps.newLinkedHashMap();,if (Maps != null ) cell = Maps.newLinkedHashMap();
AbstractCellConfig.java,section = Maps.newLinkedHashMap();,if (Maps != null ) section = Maps.newLinkedHashMap();
IjModuleFactory.java,sdkName = Optional.empty();,if (Optional != null ) sdkName = Optional.empty();
JavaBuckConfigTest.java,JavaOptions options = config.getDefaultJavaOptions();,if (config != null ) JavaOptions options = config.getDefaultJavaOptions();
JavaBuckConfigTest.java,JavaOptions options = config.getDefaultJavaOptions();,if (config != null ) JavaOptions options = config.getDefaultJavaOptions();
JavaBuckConfigTest.java,JavaOptions options = config.getDefaultJavaOptionsForTests();,if (config != null ) JavaOptions options = config.getDefaultJavaOptionsForTests();
RelinkerRule.java,BuildTarget buildTarget = buildRuleParams.getBuildTarget();,if (buildRuleParams != null ) BuildTarget buildTarget = buildRuleParams.getBuildTarget();
MultiarchFile.java,BuildRule rule = maybeRule.get();,if (maybeRule != null ) BuildRule rule = maybeRule.get();
MultiarchFile.java,Path source = maybeLinkerMapPath.get();,if (maybeLinkerMapPath != null ) Path source = maybeLinkerMapPath.get();
MultiarchFile.java,Path dest = linkMapDir.resolve(source.getFileName());,if (linkMapDir != null ) Path dest = linkMapDir.resolve(source.getFileName());
CxxBinaryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
DoctorCommandIntegrationTest.java,"DoctorEndpointRequest request = helper.generateEndpointRequest(entry, Optional.empty());","if (Optional != null ) DoctorEndpointRequest request = helper.generateEndpointRequest(entry, Optional.empty());"
DoctorCommandIntegrationTest.java,"DoctorEndpointRequest request = helper.generateEndpointRequest(entry, Optional.empty());","if (Optional != null ) DoctorEndpointRequest request = helper.generateEndpointRequest(entry, Optional.empty());"
ProjectGenerator.java,UnflavoredBuildTarget unflavoredTarget = buildTarget.getUnflavoredBuildTarget();,if (buildTarget != null ) UnflavoredBuildTarget unflavoredTarget = buildTarget.getUnflavoredBuildTarget();
BuildContextTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
ProjectBuildFileParserTest.java,this.watchmanDiagnostics = Sets.newConcurrentHashSet();,if (Sets != null ) this.watchmanDiagnostics = Sets.newConcurrentHashSet();
JavaSymbolFinder.java,srcRoots = srcRootsFinder.getAllSrcRootPaths(config.getSrcRoots());,if (srcRootsFinder != null ) srcRoots = srcRootsFinder.getAllSrcRootPaths(config.getSrcRoots());
BuildCommandOptionsTest.java,DefaultJavaPackageFinder javaPackageFinder = buckConfig.createDefaultJavaPackageFinder();,if (buckConfig != null ) DefaultJavaPackageFinder javaPackageFinder = buckConfig.createDefaultJavaPackageFinder();
BuildCommandOptionsTest.java,DefaultJavaPackageFinder javaPackageFinder = buckConfig.createDefaultJavaPackageFinder();,if (buckConfig != null ) DefaultJavaPackageFinder javaPackageFinder = buckConfig.createDefaultJavaPackageFinder();
MultiarchFile.java,BuildRule rule = maybeRule.get();,if (maybeRule != null ) BuildRule rule = maybeRule.get();
MultiarchFile.java,Path source = maybeLinkerMapPath.get();,if (maybeLinkerMapPath != null ) Path source = maybeLinkerMapPath.get();
MultiarchFile.java,Path dest = linkMapDir.resolve(source.getFileName());,if (linkMapDir != null ) Path dest = linkMapDir.resolve(source.getFileName());
CxxDescriptionEnhancer.java,"Path linkOutput = getLinkOutputPath(params.getBuildTarget(), params.getProjectFilesystem());","if (params != null ) Path linkOutput = getLinkOutputPath(params.getBuildTarget(), params.getProjectFilesystem());"
CxxDescriptionEnhancer.java,BuildTarget linkRuleTarget = createCxxLinkTarget(params.getBuildTarget());,if (createCxxLinkTarget(params != null ) BuildTarget linkRuleTarget = createCxxLinkTarget(params.getBuildTarget());
VcsInfoCollector.java,ImmutableSet<String> baseBookmarks = baseBookmarksBuilder.build();,if (baseBookmarksBuilder != null ) ImmutableSet<String> baseBookmarks = baseBookmarksBuilder.build();
VcsInfoCollector.java,Optional<String> baseRevisionId = Optional.empty();,if (Optional != null ) Optional<String> baseRevisionId = Optional.empty();
VcsInfoCollector.java,Optional<String> diff = Optional.empty();,if (Optional != null ) Optional<String> diff = Optional.empty();
CxxPreprocessAndCompileTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxPreprocessAndCompileTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxPreprocessAndCompile.java,arguments = compilerDelegate.getArguments(CxxToolFlags.of());,if (compilerDelegate != null ) arguments = compilerDelegate.getArguments(CxxToolFlags.of());
DistributedBuildFileHashesTest.java,eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) eventBus = BuckEventBusFactory.newInstance();
EventTime.java,userCpuTimeStartNs = perfTime.getUserCpuTimeNs();,if (perfTime != null ) userCpuTimeStartNs = perfTime.getUserCpuTimeNs();
EventTime.java,systemCpuTimeStartNs = perfTime.getSystemCpuTimeNs();,if (perfTime != null ) systemCpuTimeStartNs = perfTime.getSystemCpuTimeNs();
DefaultPerfTimer.java,bean = Optional.ofNullable(ManagementFactory.getThreadMXBean());,if (Optional != null ) bean = Optional.ofNullable(ManagementFactory.getThreadMXBean());
EventTimeTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
Main.java,watchmanQueryUUID = Optional.empty();,if (Optional != null ) watchmanQueryUUID = Optional.empty();
Main.java,watchmanQueryUUID = Optional.of(UUID.randomUUID());,if (Optional != null ) watchmanQueryUUID = Optional.of(UUID.randomUUID());
BuckClient.java,int port = wsPortUtils.getPort(mProject.getBasePath());,if (wsPortUtils != null ) int port = wsPortUtils.getPort(mProject.getBasePath());
BuckCommandHandler.java,Iterator<String> lines = LineHandlerHelper.splitText(text).iterator();,if (LineHandlerHelper != null ) Iterator<String> lines = LineHandlerHelper.splitText(text).iterator();
BuckCommandHandler.java,String line = lines.next();,if (lines != null ) String line = lines.next();
BuckQueryCommandHandler.java,String outputLine = lines.next();,if (lines != null ) String outputLine = lines.next();
DefaultClassUsageFileReader.java,Path jarAbsolutePath = absolutifier.apply(dep.getPathToOutput());,if (absolutifier != null ) Path jarAbsolutePath = absolutifier.apply(dep.getPathToOutput());
QuickstartCommand.java,Optional<Path> possibleSdkDir = platformTargetSupplier.get().getSdkDirectory();,if (platformTargetSupplier != null ) Optional<Path> possibleSdkDir = platformTargetSupplier.get().getSdkDirectory();
TestEventConfigurator.java,Clock clock = eventBus.getClock();,if (eventBus != null ) Clock clock = eventBus.getClock();
GwtModule.java,BuildTarget target = params.getBuildTarget();,if (params != null ) BuildTarget target = params.getBuildTarget();
GwtModule.java,Path workingDirectory = outputFile.getParent();,if (outputFile != null ) Path workingDirectory = outputFile.getParent();
VcsInfoCollector.java,ImmutableSet<String> diffBaseBookmarks = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<String> diffBaseBookmarks = ImmutableSet.of();
VcsInfoCollector.java,Optional<String> producedDiff = Optional.empty();,if (Optional != null ) Optional<String> producedDiff = Optional.empty();
VersionControlStatsGenerator.java,String currentRevisionId = vcCmdLineInterface.currentRevisionId();,if (vcCmdLineInterface != null ) String currentRevisionId = vcCmdLineInterface.currentRevisionId();
VersionControlStatsGeneratorTest.java,Capture<VersionControlStatsEvent> eventCapture = Capture.newInstance();,if (Capture != null ) Capture<VersionControlStatsEvent> eventCapture = Capture.newInstance();
VersionControlStatsGeneratorTest.java,AbstractVersionControlStats vcStats = eventCapture.getValue().getVersionControlStats();,if (eventCapture != null ) AbstractVersionControlStats vcStats = eventCapture.getValue().getVersionControlStats();
DefaultAndroidDirectoryResolver.java,ImmutableSortedSet<Path> repositoryContents = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) ImmutableSortedSet<Path> repositoryContents = ImmutableSortedSet.of();
QuickstartCommand.java,String sdkLocation = getAndroidSdkDir(params.getAndroidPlatformTargetSupplier());,if (getAndroidSdkDir(params != null ) String sdkLocation = getAndroidSdkDir(params.getAndroidPlatformTargetSupplier());
QuickstartCommand.java,sdkLocation = sdkLocationFile.getAbsoluteFile().toString();,if (sdkLocationFile != null ) sdkLocation = sdkLocationFile.getAbsoluteFile().toString();
ProjectGenerator.java,additionalCombinedTestTargets = ImmutableMultimap.of();,if (ImmutableMultimap != null ) additionalCombinedTestTargets = ImmutableMultimap.of();
WorkspaceAndProjectGenerator.java,groupedTestsBuilder = ImmutableMultimap.builder();,if (ImmutableMultimap != null ) groupedTestsBuilder = ImmutableMultimap.builder();
WorkspaceAndProjectGenerator.java,ungroupedTestsBuilder = ImmutableSetMultimap.builder();,if (ImmutableSetMultimap != null ) ungroupedTestsBuilder = ImmutableSetMultimap.builder();
WorkspaceAndProjectGenerator.java,selectedTestsBuilder = ImmutableSetMultimap.builder();,if (ImmutableSetMultimap != null ) selectedTestsBuilder = ImmutableSetMultimap.builder();
WorkspaceAndProjectGenerator.java,String schemeName = testEntry.getKey();,if (testEntry != null ) String schemeName = testEntry.getKey();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
WorkspaceAndProjectGeneratorTest.java,XCScheme.TestAction testAction = scheme.getTestAction().get();,if (scheme != null ) XCScheme.TestAction testAction = scheme.getTestAction().get();
WorkspaceAndProjectGeneratorTest.java,XCScheme.BuildAction buildAction = scheme.getBuildAction().get();,if (scheme != null ) XCScheme.BuildAction buildAction = scheme.getBuildAction().get();
WorkspaceAndProjectGeneratorTest.java,groupedTestsMapBuilder = ImmutableMultimap.builder();,if (ImmutableMultimap != null ) groupedTestsMapBuilder = ImmutableMultimap.builder();
WorkspaceAndProjectGeneratorTest.java,ungroupedTestsMapBuilder = ImmutableSetMultimap.builder();,if (ImmutableSetMultimap != null ) ungroupedTestsMapBuilder = ImmutableSetMultimap.builder();
WorkspaceAndProjectGeneratorTest.java,groupedTestsMap = groupedTestsMapBuilder.build();,if (groupedTestsMapBuilder != null ) groupedTestsMap = groupedTestsMapBuilder.build();
WorkspaceAndProjectGeneratorTest.java,groupedTests = ImmutableList.copyOf(groupedTestsMap.entries());,if (ImmutableList != null ) groupedTests = ImmutableList.copyOf(groupedTestsMap.entries());
WorkspaceAndProjectGeneratorTest.java,groupedTestsMapBuilder = ImmutableMultimap.builder();,if (ImmutableMultimap != null ) groupedTestsMapBuilder = ImmutableMultimap.builder();
WorkspaceAndProjectGeneratorTest.java,ungroupedTestsMapBuilder = ImmutableSetMultimap.builder();,if (ImmutableSetMultimap != null ) ungroupedTestsMapBuilder = ImmutableSetMultimap.builder();
WorkspaceAndProjectGeneratorTest.java,groupedTestsMap = groupedTestsMapBuilder.build();,if (groupedTestsMapBuilder != null ) groupedTestsMap = groupedTestsMapBuilder.build();
WorkspaceAndProjectGeneratorTest.java,groupedTests = ImmutableList.copyOf(groupedTestsMap.entries());,if (ImmutableList != null ) groupedTests = ImmutableList.copyOf(groupedTestsMap.entries());
WorkspaceAndProjectGeneratorTest.java,groupedTestsMapBuilder = ImmutableMultimap.builder();,if (ImmutableMultimap != null ) groupedTestsMapBuilder = ImmutableMultimap.builder();
WorkspaceAndProjectGeneratorTest.java,ungroupedTestsMapBuilder = ImmutableSetMultimap.builder();,if (ImmutableSetMultimap != null ) ungroupedTestsMapBuilder = ImmutableSetMultimap.builder();
WorkspaceAndProjectGeneratorTest.java,groupedTestsMap = groupedTestsMapBuilder.build();,if (groupedTestsMapBuilder != null ) groupedTestsMap = groupedTestsMapBuilder.build();
WorkspaceAndProjectGeneratorTest.java,groupedTests = ImmutableList.copyOf(groupedTestsMap.entries());,if (ImmutableList != null ) groupedTests = ImmutableList.copyOf(groupedTestsMap.entries());
DiffRuleKeysScriptIntegrationTest.java,ruleKeyBuilderLogger = Logger.getLogger(RuleKeyBuilder.class.getName());,if (Logger != null ) ruleKeyBuilderLogger = Logger.getLogger(RuleKeyBuilder.class.getName());
BuckQueryCommandHandler.java,String outputLine = lines.next();,if (lines != null ) String outputLine = lines.next();
BuckQueryCommandHandler.java,JsonArray targets = jsonElement.getAsJsonArray();,if (jsonElement != null ) JsonArray targets = jsonElement.getAsJsonArray();
BuckEventsConsumer.java,mConnection = mProject.getMessageBus().connect();,if (mProject != null ) mConnection = mProject.getMessageBus().connect();
BuckEventsConsumer.java,ImmutableList<CompilerErrorItem> errorItems = errorExtractor.getErrors();,if (errorExtractor != null ) ImmutableList<CompilerErrorItem> errorItems = errorExtractor.getErrors();
BuckEventsConsumer.java,currentFilePath = currentErrorItem.getFilePath();,if (currentErrorItem != null ) currentFilePath = currentErrorItem.getFilePath();
BuckEventsConsumer.java,Set<String> targetsWithErrors = mErrors.keySet();,if (mErrors != null ) Set<String> targetsWithErrors = mErrors.keySet();
BuckEventsConsumer.java,long time = testCaseSummary.getTotalTime();,if (testCaseSummary != null ) long time = testCaseSummary.getTotalTime();
BuckTreeCellRenderer.java,BuildElementRenderer renderer = mRenderers.get(value.getClass());,if (mRenderers != null ) BuildElementRenderer renderer = mRenderers.get(value.getClass());
ErrorExtractor.java,lastMatchEnd = matcher.end();,if (matcher != null ) lastMatchEnd = matcher.end();
ErrorExtractor.java,currentErrorMessage = errorMessage.substring(lastMatchEnd).trim();,if (errorMessage != null ) currentErrorMessage = errorMessage.substring(lastMatchEnd).trim();
ErrorExtractor.java,mErrors = builder.build();,if (builder != null ) mErrors = builder.build();
BuckEventsQueue.java,String eventName = event.getEventName();,if (event != null ) String eventName = event.getEventName();
BuckEventsConsumerFactory.java,mBus = project.getMessageBus();,if (project != null ) mBus = project.getMessageBus();
DexProducedFromJavaLibrary.java,Path pathToOutputFile = javaLibrary.getPathToOutput();,if (javaLibrary != null ) Path pathToOutputFile = javaLibrary.getPathToOutput();
ComputeExopackageDepsAbi.java,String resourceApkHash = aaptPackageResources.getResourcePackageHash().toString();,if (aaptPackageResources != null ) String resourceApkHash = aaptPackageResources.getResourcePackageHash().toString();
CachingBuildEngineTest.java,BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();
CachingBuildEngineTest.java,BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();
CachingBuildEngineTest.java,BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();
CachingBuildEngineTest.java,BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();
CachingBuildEngineTest.java,BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();
ProjectGenerator.java,String oldCompDir = cxxPlatform.getDebugPathSanitizer().getCompilationDirectory();,if (cxxPlatform != null ) String oldCompDir = cxxPlatform.getDebugPathSanitizer().getCompilationDirectory();
NdkCxxPlatforms.java,ImmutableList<String> sanitizerFlags = debugPathSanitizer.getCompilationFlags();,if (debugPathSanitizer != null ) ImmutableList<String> sanitizerFlags = debugPathSanitizer.getCompilationFlags();
CxxPlatformsTest.java,Archiver archiver = DefaultCxxPlatforms.build(buckConfig).getAr();,if (DefaultCxxPlatforms != null ) Archiver archiver = DefaultCxxPlatforms.build(buckConfig).getAr();
ChromeTraceBuildListener.java,ProcessResourceConsumption res = event.getResourceConsumption();,if (event != null ) ProcessResourceConsumption res = event.getResourceConsumption();
ProcessTracker.java,Long pid = entry.getKey();,if (entry != null ) Long pid = entry.getKey();
ProcessTracker.java,ProcessInfo info = entry.getValue();,if (entry != null ) ProcessInfo info = entry.getValue();
DistBuildState.java,"Path cellRoot = Files.createTempDirectory(sandboxPath, remoteCell.getNameHint());","if (remoteCell != null ) Path cellRoot = Files.createTempDirectory(sandboxPath, remoteCell.getNameHint());"
VersionedTargetGraphBuilder.java,A constructorArg = node.getConstructorArg();,if (node != null ) A constructorArg = node.getConstructorArg();
VersionedTargetGraphBuilder.java,A newConstructorArg = node.getDescription().createUnpopulatedConstructorArg();,if (node != null ) A newConstructorArg = node.getDescription().createUnpopulatedConstructorArg();
VersionedTargetGraphBuilder.java,BuildTarget target = node.getBuildTarget();,if (node != null ) BuildTarget target = node.getBuildTarget();
VersionedTargetGraphBuilder.java,Collection<BuildTarget> versionedDeps = info.getVersionDomain().keySet();,if (info != null ) Collection<BuildTarget> versionedDeps = info.getVersionDomain().keySet();
VersionedTargetGraphBuilder.java,ImmutableList<BuildTarget> newInternalDeclaredDeps = newInternalDeclaredDepsBuilder.build();,if (newInternalDeclaredDepsBuilder != null ) ImmutableList<BuildTarget> newInternalDeclaredDeps = newInternalDeclaredDepsBuilder.build();
VersionedTargetGraphBuilder.java,ImmutableList<BuildTarget> newExternalDeclaredDeps = newExternalDeclaredDepsBuilder.build();,if (newExternalDeclaredDepsBuilder != null ) ImmutableList<BuildTarget> newExternalDeclaredDeps = newExternalDeclaredDepsBuilder.build();
DexWithClasses.java,final int linearAllocEstimate = preDex.getLinearAllocEstimate();,if (preDex != null ) final int linearAllocEstimate = preDex.getLinearAllocEstimate();
EstimateDexWeightStep.java,this.linearAllocEstimate = (Integer) traversal.getResult();,if (traversal != null ) this.linearAllocEstimate = (Integer) traversal.getResult();
PreDexedFilesSorter.java,primaryDexSize += dexWithClasses.getSizeEstimate();,if (dexWithClasses != null ) primaryDexSize += dexWithClasses.getSizeEstimate();
PreDexedFilesSorter.java,currentDexSize += canary.getSizeEstimate();,if (canary != null ) currentDexSize += canary.getSizeEstimate();
PreDexedFilesSorter.java,currentDexSize += dexWithClasses.getSizeEstimate();,if (dexWithClasses != null ) currentDexSize += dexWithClasses.getSizeEstimate();
DefaultZipOutputStreamHelper.java,String name = fileLike.getRelativePath();,if (fileLike != null ) String name = fileLike.getRelativePath();
DefaultZipSplitter.java,entrySize = entry.getSize();,if (entry != null ) entrySize = entry.getSize();
DefaultZipSplitter.java,long entrySize = entry.getSize();,if (entry != null ) long entrySize = entry.getSize();
DefaultZipSplitterTest.java,testInZips = Sets.newLinkedHashSet();,if (Sets != null ) testInZips = Sets.newLinkedHashSet();
DefaultZipSplitterTest.java,ZipFile zip = new ZipFile(file.toFile());,if (ZipFile(file != null ) ZipFile zip = new ZipFile(file.toFile());
DefaultZipSplitterTest.java,ZipEntry entry = entries.nextElement();,if (entries != null ) ZipEntry entry = entries.nextElement();
GenruleIntegrationTest.java,ZipFile zipOne = new ZipFile(outputOne.toFile());,if (ZipFile(outputOne != null ) ZipFile zipOne = new ZipFile(outputOne.toFile());
ZipScrubberStep.java,int cdEntries = map.getShort();  // Total number of central directory records;,if (records; != null ) int cdEntries = map.getShort();  // Total number of central directory records;
ZipScrubberStep.java,int cdOffset = map.getInt();  // Offset of start of central directory.,if (directory != null ) int cdOffset = map.getInt();  // Offset of start of central directory.
ZipScrubberStep.java,ByteBuffer entry = map.slice();,if (map != null ) ByteBuffer entry = map.slice();
CxxLibraryDescription.java,hasObjects = Predicates.alwaysTrue();,if (Predicates != null ) hasObjects = Predicates.alwaysTrue();
CxxLibraryDescription.java,hasExportedHeaders = Predicates.alwaysTrue();,if (Predicates != null ) hasExportedHeaders = Predicates.alwaysTrue();
JavaTestDescription.java,Predicate<BuildRule> shouldInclude = Predicates.alwaysTrue();,if (Predicates != null ) Predicate<BuildRule> shouldInclude = Predicates.alwaysTrue();
DistBuildFactory.java,"DistBuildState state = DistBuildState.load(jobState, params.getCell());","if (params != null ) DistBuildState state = DistBuildState.load(jobState, params.getCell());"
CachingBuildEngineTest.java,final Path input = Preconditions.checkNotNull(genrule.getPathToOutput());,if (Preconditions != null ) final Path input = Preconditions.checkNotNull(genrule.getPathToOutput());
DxStep.java,String customDx = getPathToCustomDx.get();,if (getPathToCustomDx != null ) String customDx = getPathToCustomDx.get();
Watchman.java,long watchStartTimeNanos = clock.nanoTime();,if (clock != null ) long watchStartTimeNanos = clock.nanoTime();
Watchman.java,long secondWatchStartTimeNanos = clock.nanoTime();,if (clock != null ) long secondWatchStartTimeNanos = clock.nanoTime();
WatchmanWatcher.java,projectRoot = projectRoot.resolve(watchPrefix.get());,if (projectRoot != null ) projectRoot = projectRoot.resolve(watchPrefix.get());
AbstractProvisioningProfileMetadata.java,ProcessExecutor processExecutor = new DefaultProcessExecutor(Console.createNullConsole());,if (DefaultProcessExecutor(Console != null ) ProcessExecutor processExecutor = new DefaultProcessExecutor(Console.createNullConsole());
Symbols.java,ProcessExecutor executor = new DefaultProcessExecutor(Console.createNullConsole());,if (DefaultProcessExecutor(Console != null ) ProcessExecutor executor = new DefaultProcessExecutor(Console.createNullConsole());
DxStepTest.java,ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();,if (FakeProjectFilesystem != null ) ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();
DxStepTest.java,ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();,if (FakeProjectFilesystem != null ) ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();
AndroidLibraryDescriptionTest.java,ImmutableBuildContext.Builder builder = ImmutableBuildContext.builder();,if (ImmutableBuildContext != null ) ImmutableBuildContext.Builder builder = ImmutableBuildContext.builder();
BuildContextTest.java,ImmutableBuildContext.Builder builder = ImmutableBuildContext.builder();,if (ImmutableBuildContext != null ) ImmutableBuildContext.Builder builder = ImmutableBuildContext.builder();
AaptPackageResources.java,Optional<Path> pathToGeneratedProguardConfig = Optional.absent();,if (Optional != null ) Optional<Path> pathToGeneratedProguardConfig = Optional.absent();
AndroidAarDescription.java,CopyNativeLibraries copyNativeLibraries = input.get(apkModuleGraph.getRootAPKModule());,if (input != null ) CopyNativeLibraries copyNativeLibraries = input.get(apkModuleGraph.getRootAPKModule());
AndroidBinary.java,Optional<Path> proguardFullConfigFile = Optional.absent();,if (Optional != null ) Optional<Path> proguardFullConfigFile = Optional.absent();
AndroidBinary.java,Optional<Path> proguardMappingFile = Optional.absent();,if (Optional != null ) Optional<Path> proguardMappingFile = Optional.absent();
AndroidBinary.java,additionalDexDirs = Optional.absent();,if (Optional != null ) additionalDexDirs = Optional.absent();
AndroidBinary.java,secondaryDexDir = Optional.absent();,if (Optional != null ) secondaryDexDir = Optional.absent();
AndroidBinary.java,secondaryOutputToInputs = Optional.absent();,if (Optional != null ) secondaryOutputToInputs = Optional.absent();
AndroidBinaryGraphEnhancer.java,Optional<PackageStringAssets> packageStringAssets = Optional.absent();,if (Optional != null ) Optional<PackageStringAssets> packageStringAssets = Optional.absent();
AndroidBinaryGraphEnhancer.java,Optional<PreDexMerge> preDexMerge = Optional.absent();,if (Optional != null ) Optional<PreDexMerge> preDexMerge = Optional.absent();
AndroidBinaryGraphEnhancer.java,Optional<ComputeExopackageDepsAbi> computeExopackageDepsAbi = Optional.absent();,if (Optional != null ) Optional<ComputeExopackageDepsAbi> computeExopackageDepsAbi = Optional.absent();
AndroidInstrumentationTest.java,Optional<Path> apkUnderTestPath = Optional.absent();,if (Optional != null ) Optional<Path> apkUnderTestPath = Optional.absent();
AndroidResourceDescription.java,Optional<SourcePath> additionalKey = Optional.absent();,if (Optional != null ) Optional<SourcePath> additionalKey = Optional.absent();
DefaultAndroidDirectoryResolver.java,this.sdkErrorMessage = Optional.absent();,if (Optional != null ) this.sdkErrorMessage = Optional.absent();
DefaultAndroidDirectoryResolver.java,this.buildToolsErrorMessage = Optional.absent();,if (Optional != null ) this.buildToolsErrorMessage = Optional.absent();
DefaultAndroidDirectoryResolver.java,this.ndkErrorMessage = Optional.absent();,if (Optional != null ) this.ndkErrorMessage = Optional.absent();
DefaultAndroidDirectoryResolver.java,Optional<Path> repository = Optional.absent();,if (Optional != null ) Optional<Path> repository = Optional.absent();
DefaultAndroidDirectoryResolver.java,Optional<Path> directory = Optional.absent();,if (Optional != null ) Optional<Path> directory = Optional.absent();
DefaultAndroidDirectoryResolver.java,Optional<Path> ndkPath = Optional.absent();,if (Optional != null ) Optional<Path> ndkPath = Optional.absent();
DefaultAndroidDirectoryResolver.java,Optional<String> newestVersion = Optional.absent();,if (Optional != null ) Optional<String> newestVersion = Optional.absent();
MergeAndroidResourcesStep.java,uberRDotTxtIds = Optional.absent();,if (Optional != null ) uberRDotTxtIds = Optional.absent();
NativeLibraryMergeEnhancer.java,Optional<NativeLinkable> glueLinkable = Optional.absent();,if (Optional != null ) Optional<NativeLinkable> glueLinkable = Optional.absent();
NativeRelinker.java,BuildRule baseRule = resolver.getRule(source).orNull();,if (resolver != null ) BuildRule baseRule = resolver.getRule(source).orNull();
AppleBinaryDescription.java,Optional<Path> stubBinaryPath = Optional.absent();,if (Optional != null ) Optional<Path> stubBinaryPath = Optional.absent();
AppleBundle.java,signingEntitlementsTempPath = Optional.absent();,if (Optional != null ) signingEntitlementsTempPath = Optional.absent();
AppleBundle.java,Optional<Path> entitlementsPlist = Optional.absent();,if (Optional != null ) Optional<Path> entitlementsPlist = Optional.absent();
AppleCxxPlatforms.java,Optional<String> xcodeBuildVersion = Optional.absent();,if (Optional != null ) Optional<String> xcodeBuildVersion = Optional.absent();
AppleCxxPlatforms.java,buildVersion = Optional.absent();,if (Optional != null ) buildVersion = Optional.absent();
AppleCxxPlatforms.java,buildVersion = Optional.absent();,if (Optional != null ) buildVersion = Optional.absent();
AppleCxxPlatforms.java,buildVersion = Optional.absent();,if (Optional != null ) buildVersion = Optional.absent();
AppleDescriptions.java,Optional<String> appIcon = Optional.absent();,if (Optional != null ) Optional<String> appIcon = Optional.absent();
AppleDescriptions.java,Optional<String> launchImage = Optional.absent();,if (Optional != null ) Optional<String> launchImage = Optional.absent();
AppleDescriptions.java,appleDsym = Optional.absent();,if (Optional != null ) appleDsym = Optional.absent();
AppleTest.java,this.xctoolStdoutReader = Optional.absent();,if (Optional != null ) this.xctoolStdoutReader = Optional.absent();
AppleTest.java,this.xctestOutputReader = Optional.absent();,if (Optional != null ) this.xctestOutputReader = Optional.absent();
AppleTest.java,Optional<Path> testHostAppPath = Optional.absent();,if (Optional != null ) Optional<Path> testHostAppPath = Optional.absent();
AppleTestDescription.java,testHostInfo = Optional.absent();,if (Optional != null ) testHostInfo = Optional.absent();
ProvisioningProfileStore.java,prefix = Optional.absent();,if (Optional != null ) prefix = Optional.absent();
ProvisioningProfileStore.java,Optional<ProvisioningProfileMetadata> bestMatch = Optional.absent();,if (Optional != null ) Optional<ProvisioningProfileMetadata> bestMatch = Optional.absent();
ProjectGenerator.java,Optional<String> productName = Optional.absent();,if (Optional != null ) Optional<String> productName = Optional.absent();
ProjectGenerator.java,Optional<PBXTarget> result = Optional.absent();,if (Optional != null ) Optional<PBXTarget> result = Optional.absent();
ProjectGenerator.java,testHostBundle = Optional.absent();,if (Optional != null ) testHostBundle = Optional.absent();
WorkspaceAndProjectGenerator.java,this.combinedProjectGenerator = Optional.absent();,if (Optional != null ) this.combinedProjectGenerator = Optional.absent();
WorkspaceAndProjectGenerator.java,remoteRunnablePath = Optional.absent();,if (Optional != null ) remoteRunnablePath = Optional.absent();
WorkspaceAndProjectGenerator.java,Optional<String> productName = Optional.absent();,if (Optional != null ) Optional<String> productName = Optional.absent();
WorkspaceGenerator.java,Optional<Path> groupPath = Optional.absent();,if (Optional != null ) Optional<Path> groupPath = Optional.absent();
AppleCoreSimulatorServiceController.java,Optional<Path> result = Optional.absent();,if (Optional != null ) Optional<Path> result = Optional.absent();
PBXBuildFile.java,this.settings = Optional.absent();,if (Optional != null ) this.settings = Optional.absent();
PBXFileReference.java,explicitFileType = Optional.absent();,if (Optional != null ) explicitFileType = Optional.absent();
PBXFileReference.java,lastKnownFileType = Optional.absent();,if (Optional != null ) lastKnownFileType = Optional.absent();
PBXFileReference.java,lastKnownFileType = Optional.absent();,if (Optional != null ) lastKnownFileType = Optional.absent();
XCConfigurationList.java,defaultConfigurationName = Optional.absent();,if (Optional != null ) defaultConfigurationName = Optional.absent();
XCVersionGroup.java,currentVersion = Optional.absent();,if (Optional != null ) currentVersion = Optional.absent();
DirArtifactCache.java,Optional<Path> borrowedAndStoredArtifactPath = Optional.absent();,if (Optional != null ) Optional<Path> borrowedAndStoredArtifactPath = Optional.absent();
DirArtifactCache.java,"Path artifactPath = getPathForRuleKey(ruleKey, Optional.absent());","if (Optional != null ) Path artifactPath = getPathForRuleKey(ruleKey, Optional.absent());"
MultiArtifactCache.java,Optional<RuntimeException> throwable = Optional.absent();,if (Optional != null ) Optional<RuntimeException> throwable = Optional.absent();
CommandLineTargetNodeSpecParser.java,Optional<String> nameAfterColon = Optional.absent();,if (Optional != null ) Optional<String> nameAfterColon = Optional.absent();
InstallCommand.java,Optional<AppleSimulator> simulatorByUdid = Optional.absent();,if (Optional != null ) Optional<AppleSimulator> simulatorByUdid = Optional.absent();
InstallCommand.java,Optional<AppleSimulator> simulatorByName = Optional.absent();,if (Optional != null ) Optional<AppleSimulator> simulatorByName = Optional.absent();
InstallCommand.java,Optional<AppleSimulator> defaultSimulator = Optional.absent();,if (Optional != null ) Optional<AppleSimulator> defaultSimulator = Optional.absent();
Main.java,watchmanQueryUUID = Optional.absent();,if (Optional != null ) watchmanQueryUUID = Optional.absent();
Main.java,Optional<WebServer> webServer = Optional.absent();,if (Optional != null ) Optional<WebServer> webServer = Optional.absent();
Main.java,color = Optional.absent();,if (Optional != null ) color = Optional.absent();
Main.java,processManager = Optional.absent();,if (Optional != null ) processManager = Optional.absent();
Main.java,commandSemaphoreNgClient = Optional.absent();,if (Optional != null ) commandSemaphoreNgClient = Optional.absent();
Main.java,commandSemaphoreNgClient = Optional.absent();,if (Optional != null ) commandSemaphoreNgClient = Optional.absent();
ProjectCommand.java,ProjectCommand.Ide projectIde = getIdeFromBuckConfig(buckConfig).orNull();,if (getIdeFromBuckConfig(buckConfig) != null ) ProjectCommand.Ide projectIde = getIdeFromBuckConfig(buckConfig).orNull();
ProjectCommand.java,Ide projectIde = getIdeFromBuckConfig(params.getBuckConfig()).orNull();,if (getIdeFromBuckConfig(params != null ) Ide projectIde = getIdeFromBuckConfig(params.getBuckConfig()).orNull();
ProjectCommand.java,Ide projectIde = getIdeFromBuckConfig(buckConfig).orNull();,if (getIdeFromBuckConfig(buckConfig) != null ) Ide projectIde = getIdeFromBuckConfig(buckConfig).orNull();
ProjectCommand.java,result = Optional.fromNullable(bufferedStdinReader.readLine());,if (Optional != null ) result = Optional.fromNullable(bufferedStdinReader.readLine());
ProjectCommand.java,workspaceArgs.workspaceName = Optional.absent();,if (Optional != null ) workspaceArgs.workspaceName = Optional.absent();
ProjectCommand.java,workspaceArgs.isRemoteRunnable = Optional.absent();,if (Optional != null ) workspaceArgs.isRemoteRunnable = Optional.absent();
ProjectCommand.java,workspaceArgs.explicitRunnablePath = Optional.absent();,if (Optional != null ) workspaceArgs.explicitRunnablePath = Optional.absent();
ProjectCommand.java,workspaceArgs.launchStyle = Optional.absent();,if (Optional != null ) workspaceArgs.launchStyle = Optional.absent();
TargetsCommand.java,Optional<ActionGraph> actionGraph = Optional.absent();,if (Optional != null ) Optional<ActionGraph> actionGraph = Optional.absent();
TargetsCommand.java,Optional<BuildRuleResolver> buildRuleResolver = Optional.absent();,if (Optional != null ) Optional<BuildRuleResolver> buildRuleResolver = Optional.absent();
TargetsCommand.java,Optional<DefaultRuleKeyBuilderFactory> ruleKeyBuilderFactory = Optional.absent();,if (Optional != null ) Optional<DefaultRuleKeyBuilderFactory> ruleKeyBuilderFactory = Optional.absent();
TargetsCommand.java,Optional<Path> outputPathOptional = Optional.fromNullable(rule.getPathToOutput());,if (Optional != null ) Optional<Path> outputPathOptional = Optional.fromNullable(rule.getPathToOutput());
BuildReport.java,Optional<BuildRuleSuccessType> success = Optional.absent();,if (Optional != null ) Optional<BuildRuleSuccessType> success = Optional.absent();
BuildReport.java,Optional<BuildRuleSuccessType> success = Optional.absent();,if (Optional != null ) Optional<BuildRuleSuccessType> success = Optional.absent();
AbstractCxxSourceRuleFactory.java,Optional<PrecompiledHeaderReference> precompiledHeaderReference = Optional.absent();,if (Optional != null ) Optional<PrecompiledHeaderReference> precompiledHeaderReference = Optional.absent();
CxxBoostTest.java,Optional<String> currentTest = Optional.absent();,if (Optional != null ) Optional<String> currentTest = Optional.absent();
CxxBoostTest.java,currentTest = Optional.absent();,if (Optional != null ) currentTest = Optional.absent();
CxxCompilationDatabase.java,Optional<CxxPreprocessAndCompile> preprocessRule = Optional.absent();,if (Optional != null ) Optional<CxxPreprocessAndCompile> preprocessRule = Optional.absent();
CxxCompilationDatabase.java,SourcePath inputSourcePath = preprocessRule.or(compileRule).getInput();,if (preprocessRule != null ) SourcePath inputSourcePath = preprocessRule.or(compileRule).getInput();
CxxCompilationDatabase.java,ProjectFilesystem inputFilesystem = preprocessRule.or(compileRule).getProjectFilesystem();,if (preprocessRule != null ) ProjectFilesystem inputFilesystem = preprocessRule.or(compileRule).getProjectFilesystem();
CxxDescriptionEnhancer.java,Optional<CxxStrip> cxxStrip = Optional.absent();,if (Optional != null ) Optional<CxxStrip> cxxStrip = Optional.absent();
CxxGtestTest.java,Optional<String> currentTest = Optional.absent();,if (Optional != null ) Optional<String> currentTest = Optional.absent();
CxxGtestTest.java,currentTest = Optional.absent();,if (Optional != null ) currentTest = Optional.absent();
CxxLibraryDescription.java,arg.prefixHeader = Optional.absent();,if (Optional != null ) arg.prefixHeader = Optional.absent();
CxxLibraryDescription.java,arg.cxxRuntimeType = Optional.absent();,if (Optional != null ) arg.cxxRuntimeType = Optional.absent();
CxxLibraryDescription.java,arg.forceStatic = Optional.absent();,if (Optional != null ) arg.forceStatic = Optional.absent();
CxxLibraryDescription.java,arg.preferredLinkage = Optional.absent();,if (Optional != null ) arg.preferredLinkage = Optional.absent();
CxxLibraryDescription.java,arg.linkWhole = Optional.absent();,if (Optional != null ) arg.linkWhole = Optional.absent();
CxxLibraryDescription.java,arg.headerNamespace = Optional.absent();,if (Optional != null ) arg.headerNamespace = Optional.absent();
CxxLibraryDescription.java,arg.soname = Optional.absent();,if (Optional != null ) arg.soname = Optional.absent();
CxxLibraryDescription.java,arg.supportedPlatformsRegex = Optional.absent();,if (Optional != null ) arg.supportedPlatformsRegex = Optional.absent();
CxxLibraryDescription.java,arg.linkStyle = Optional.absent();,if (Optional != null ) arg.linkStyle = Optional.absent();
CxxLibraryDescription.java,arg.bridgingHeader = Optional.absent();,if (Optional != null ) arg.bridgingHeader = Optional.absent();
CxxLibraryDescription.java,arg.moduleName = Optional.absent();,if (Optional != null ) arg.moduleName = Optional.absent();
CxxLibraryDescription.java,arg.xcodePublicHeadersSymlinks = Optional.absent();,if (Optional != null ) arg.xcodePublicHeadersSymlinks = Optional.absent();
CxxLibraryDescription.java,arg.xcodePrivateHeadersSymlinks = Optional.absent();,if (Optional != null ) arg.xcodePrivateHeadersSymlinks = Optional.absent();
CxxPreprocessAndCompile.java,preprocessorCommand = Optional.absent();,if (Optional != null ) preprocessorCommand = Optional.absent();
CxxPreprocessAndCompile.java,compilerCommand = Optional.absent();,if (Optional != null ) compilerCommand = Optional.absent();
InferBuckConfig.java,"String versionOutput = stderr.or("""").trim();","if (stderr != null ) String versionOutput = stderr.or("""").trim();"
Omnibus.java,Optional<SourcePath> realOmnibus = Optional.absent();,if (Optional != null ) Optional<SourcePath> realOmnibus = Optional.absent();
PrebuiltCxxLibraryDescription.java,MacroHandler macroHandler = getMacroHandler(Optional.absent());,if (getMacroHandler(Optional != null ) MacroHandler macroHandler = getMacroHandler(Optional.absent());
PrebuiltCxxLibraryDescription.java,MacroHandler macroHandler = getMacroHandler(Optional.absent());,if (getMacroHandler(Optional != null ) MacroHandler macroHandler = getMacroHandler(Optional.absent());
DistBuildClientExecutor.java,Optional<String> lastLine = Optional.absent();,if (Optional != null ) Optional<String> lastLine = Optional.absent();
BuildThreadStateRenderer.java,Optional<BuildTarget> buildTarget = Optional.absent();,if (Optional != null ) Optional<BuildTarget> buildTarget = Optional.absent();
BuildThreadStateRenderer.java,buildRuleEvent = Optional.absent();,if (Optional != null ) buildRuleEvent = Optional.absent();
BuildThreadStateRenderer.java,buildTarget = Optional.absent();,if (Optional != null ) buildTarget = Optional.absent();
BuildThreadStateRenderer.java,runningStep = Optional.absent();,if (Optional != null ) runningStep = Optional.absent();
BuildThreadStateRenderer.java,Optional<String> stepCategory = Optional.absent();,if (Optional != null ) Optional<String> stepCategory = Optional.absent();
SuperConsoleEventBusListener.java,this.distBuildStatus = Optional.absent();,if (Optional != null ) this.distBuildStatus = Optional.absent();
TestThreadStateRenderer.java,Optional<BuildTarget> buildTarget = Optional.absent();,if (Optional != null ) Optional<BuildTarget> buildTarget = Optional.absent();
TestThreadStateRenderer.java,testSummary = Optional.absent();,if (Optional != null ) testSummary = Optional.absent();
TestThreadStateRenderer.java,testStatusMessage = Optional.absent();,if (Optional != null ) testStatusMessage = Optional.absent();
TestThreadStateRenderer.java,testRuleEvent = Optional.absent();,if (Optional != null ) testRuleEvent = Optional.absent();
TestThreadStateRenderer.java,buildTarget = Optional.absent();,if (Optional != null ) buildTarget = Optional.absent();
TestThreadStateRenderer.java,runningStep = Optional.absent();,if (Optional != null ) runningStep = Optional.absent();
TestThreadStateRenderer.java,Optional<String> stepCategory = Optional.absent();,if (Optional != null ) Optional<String> stepCategory = Optional.absent();
GoCompile.java,asmHeaderPath = Optional.absent();,if (Optional != null ) asmHeaderPath = Optional.absent();
GoTest.java,Optional<String> currentTest = Optional.absent();,if (Optional != null ) Optional<String> currentTest = Optional.absent();
GoTest.java,currentTest = Optional.absent();,if (Optional != null ) currentTest = Optional.absent();
HalideLibraryDescription.java,Optional<SourcePath> prefixHeader = Optional.absent();,if (Optional != null ) Optional<SourcePath> prefixHeader = Optional.absent();
ArtifactCacheHandler.java,this.artifactCache = Optional.absent();,if (Optional != null ) this.artifactCache = Optional.absent();
WebServer.java,this.port = Optional.absent();,if (Optional != null ) this.port = Optional.absent();
PathOrGlobMatcher.java,this.globPattern = Optional.absent();,if (Optional != null ) this.globPattern = Optional.absent();
PathOrGlobMatcher.java,this.globMatcher = Optional.absent();,if (Optional != null ) this.globMatcher = Optional.absent();
PathOrGlobMatcher.java,this.basePath = Optional.absent();,if (Optional != null ) this.basePath = Optional.absent();
Watchman.java,Optional<WatchmanClient> watchmanClient = Optional.absent();,if (Optional != null ) Optional<WatchmanClient> watchmanClient = Optional.absent();
Watchman.java,Optional<String> initialClock = Optional.absent();,if (Optional != null ) Optional<String> initialClock = Optional.absent();
DefaultJavaLibrary.java,this.outputJar = Optional.absent();,if (Optional != null ) this.outputJar = Optional.absent();
ExternalJavac.java,"String output = stderr.or("""").trim();","if (stderr != null ) String output = stderr.or("""").trim();"
JUnitStep.java,Optional<Long> pid = Optional.absent();,if (Optional != null ) Optional<Long> pid = Optional.absent();
DefaultIjLibraryFactory.java,String libraryName = Util.intelliJLibraryName(targetNode.getBuildTarget());,if (Util != null ) String libraryName = Util.intelliJLibraryName(targetNode.getBuildTarget());
DefaultIjLibraryFactory.java,IjLibrary.Builder libraryBuilder = IjLibrary.builder();,if (IjLibrary != null ) IjLibrary.Builder libraryBuilder = IjLibrary.builder();
IjModuleFactory.java,this.androidFacetBuilder = Optional.absent();,if (Optional != null ) this.androidFacetBuilder = Optional.absent();
IjModuleFactory.java,sdkName = Optional.absent();,if (Optional != null ) sdkName = Optional.absent();
IjModuleFactory.java,Optional<String> result = Optional.absent();,if (Optional != null ) Optional<String> result = Optional.absent();
IjModuleFactory.java,Optional<String> sdkName = Optional.absent();,if (Optional != null ) Optional<String> sdkName = Optional.absent();
IjModuleGraph.java,minimumDepth = Optional.absent();,if (Optional != null ) minimumDepth = Optional.absent();
Project.java,rJava = Optional.absent();,if (Optional != null ) rJava = Optional.absent();
Project.java,module.resFolder = intellijConfig.getAndroidResources().orNull();,if (intellijConfig != null ) module.resFolder = intellijConfig.getAndroidResources().orNull();
Project.java,module.assetFolder = intellijConfig.getAndroidAssets().orNull();,if (intellijConfig != null ) module.assetFolder = intellijConfig.getAndroidAssets().orNull();
Project.java,module.resFolder = intellijConfig.getAndroidResources().orNull();,if (intellijConfig != null ) module.resFolder = intellijConfig.getAndroidResources().orNull();
Project.java,module.assetFolder = intellijConfig.getAndroidAssets().orNull();,if (intellijConfig != null ) module.assetFolder = intellijConfig.getAndroidAssets().orNull();
Project.java,Path manifestPath = intellijConfig.getAndroidManifest().orNull();,if (intellijConfig != null ) Path manifestPath = intellijConfig.getAndroidManifest().orNull();
Project.java,String javadocUrl = prebuiltJar.getJavadocUrl().orNull();,if (prebuiltJar != null ) String javadocUrl = prebuiltJar.getJavadocUrl().orNull();
AbstractErrorLogRecord.java,Optional<String> initialErr = Optional.absent();,if (Optional != null ) Optional<String> initialErr = Optional.absent();
AbstractErrorLogRecord.java,Optional<String> initialErrorMsg = Optional.absent();,if (Optional != null ) Optional<String> initialErrorMsg = Optional.absent();
AbstractErrorLogRecord.java,Optional<String> errorMsg = Optional.absent();,if (Optional != null ) Optional<String> errorMsg = Optional.absent();
LuaBinaryDescription.java,Optional<Path> relativeModulesDir = Optional.absent();,if (Optional != null ) Optional<Path> relativeModulesDir = Optional.absent();
LuaBinaryDescription.java,Optional<Path> relativePythonModulesDir = Optional.absent();,if (Optional != null ) Optional<Path> relativePythonModulesDir = Optional.absent();
LuaBinaryDescription.java,Optional<Path> relativeNativeLibsDir = Optional.absent();,if (Optional != null ) Optional<Path> relativeNativeLibsDir = Optional.absent();
PrebuiltOCamlLibraryDescription.java,final String libName = args.libName.or(target.getShortName());,if (args != null ) final String libName = args.libName.or(target.getShortName());
BuildTargetParser.java,Optional<String> givenCellName = Optional.absent();,if (Optional != null ) Optional<String> givenCellName = Optional.absent();
BuildTargetPatternParser.java,cellPath = cellNames.getCellPath(Optional.absent());,if (cellNames != null ) cellPath = cellNames.getCellPath(Optional.absent());
AbstractReport.java,Optional<String> extraInfo = Optional.absent();,if (Optional != null ) Optional<String> extraInfo = Optional.absent();
VcsInfoCollector.java,Optional<String> producedDiff = Optional.absent();,if (Optional != null ) Optional<String> producedDiff = Optional.absent();
CachingBuildEngine.java,Optional<Long> outputSize = Optional.absent();,if (Optional != null ) Optional<Long> outputSize = Optional.absent();
CachingBuildEngine.java,Optional<HashCode> outputHash = Optional.absent();,if (Optional != null ) Optional<HashCode> outputHash = Optional.absent();
CachingBuildEngine.java,Optional<BuildRuleSuccessType> successType = Optional.absent();,if (Optional != null ) Optional<BuildRuleSuccessType> successType = Optional.absent();
CachingBuildEngine.java,Optional<Integer> inputsCount = Optional.absent();,if (Optional != null ) Optional<Integer> inputsCount = Optional.absent();
CachingBuildEngine.java,Optional<Long> inputsSize = Optional.absent();,if (Optional != null ) Optional<Long> inputsSize = Optional.absent();
KnownBuildRuleTypes.java,Optional<AppleToolchain> swiftToolChain = Optional.absent();,if (Optional != null ) Optional<AppleToolchain> swiftToolChain = Optional.absent();
ParamInfo.java,result = Optional.absent();,if (Optional != null ) result = Optional.absent();
NeededCoverageSpecTypeCoercer.java,Optional<String> pathName = Optional.absent();,if (Optional != null ) Optional<String> pathName = Optional.absent();
PrebuiltRustLibrary.java,this.crate = crate.or(getBuildTarget().getShortName());,if (crate != null ) this.crate = crate.or(getBuildTarget().getShortName());
Genrule.java,Arg cmdArg = this.cmd.orNull();,if (this != null ) Arg cmdArg = this.cmd.orNull();
Genrule.java,Arg bashArg = this.bash.orNull();,if (this != null ) Arg bashArg = this.bash.orNull();
Genrule.java,Arg cmdExeArg = this.cmdExe.orNull();,if (this != null ) Arg cmdExeArg = this.cmdExe.orNull();
ShellStep.java,this.stdout = Optional.absent();,if (Optional != null ) this.stdout = Optional.absent();
ShellStep.java,this.stderr = Optional.absent();,if (Optional != null ) this.stderr = Optional.absent();
ThriftCxxEnhancer.java,langArgs.canBeAsset = Optional.absent();,if (Optional != null ) langArgs.canBeAsset = Optional.absent();
DefaultPerfTimer.java,bean = Optional.fromNullable(ManagementFactory.getThreadMXBean());,if (Optional != null ) bean = Optional.fromNullable(ManagementFactory.getThreadMXBean());
ClassLoaderCache.java,Optional<IOException> caughtEx = Optional.absent();,if (Optional != null ) Optional<IOException> caughtEx = Optional.absent();
AssertScopeExclusiveAccess.java,inScopeStack = Optional.absent();,if (Optional != null ) inScopeStack = Optional.absent();
TrimUberRDotJavaTest.java,Optional<String> keepResourcePattern = Optional.absent();,if (Optional != null ) Optional<String> keepResourcePattern = Optional.absent();
ProjectGeneratorTestUtils.java,value = Optional.absent();,if (Optional != null ) value = Optional.absent();
PrebuiltCxxLibraryDescriptionTest.java,String libName = arg.libName.or(TARGET.getShortName());,if (arg != null ) String libName = arg.libName.or(TARGET.getShortName());
PrebuiltCxxLibraryDescriptionTest.java,String libName = arg.libName.or(TARGET.getShortName());,if (arg != null ) String libName = arg.libName.or(TARGET.getShortName());
PrebuiltCxxLibraryDescriptionTest.java,String libName = arg.libName.or(TARGET.getShortName());,if (arg != null ) String libName = arg.libName.or(TARGET.getShortName());
PrebuiltCxxLibraryDescriptionTest.java,String libName = arg.libName.or(TARGET.getShortName());,if (arg != null ) String libName = arg.libName.or(TARGET.getShortName());
EventSerializationTest.java,"ParseEvent.Finished event = ParseEvent.finished(started, Optional.absent());","if (Optional != null ) ParseEvent.Finished event = ParseEvent.finished(started, Optional.absent());"
TestEventConfigerator.java,this.timestampNanos = Optional.absent();,if (Optional != null ) this.timestampNanos = Optional.absent();
HttpDownloaderIntegrationTest.java,downloader = new HttpDownloader(Optional.absent());,if (HttpDownloader(Optional != null ) downloader = new HttpDownloader(Optional.absent());
HttpDownloaderTest.java,Downloader downloader = new HttpDownloader(Optional.absent());,if (HttpDownloader(Optional != null ) Downloader downloader = new HttpDownloader(Optional.absent());
StackedDownloaderTest.java,"Downloader downloader = StackedDownloader.createFromConfig(config, Optional.absent());","if (Optional != null ) Downloader downloader = StackedDownloader.createFromConfig(config, Optional.absent());"
StackedDownloaderTest.java,"Downloader downloader = StackedDownloader.createFromConfig(config, Optional.absent());","if (Optional != null ) Downloader downloader = StackedDownloader.createFromConfig(config, Optional.absent());"
JavaTestRuleTest.java,"ImmutableList<String> amended = rule.amendVmArgs(vmArgs, Optional.absent());","if (Optional != null ) ImmutableList<String> amended = rule.amendVmArgs(vmArgs, Optional.absent());"
JvmLibraryArgInterpreterTest.java,arg.source = Optional.absent();,if (Optional != null ) arg.source = Optional.absent();
JvmLibraryArgInterpreterTest.java,arg.target = Optional.absent();,if (Optional != null ) arg.target = Optional.absent();
JvmLibraryArgInterpreterTest.java,arg.target = Optional.absent();,if (Optional != null ) arg.target = Optional.absent();
JvmLibraryArgInterpreterTest.java,arg.source = Optional.absent();,if (Optional != null ) arg.source = Optional.absent();
JvmLibraryArgInterpreterTest.java,arg.compiler = Optional.absent();,if (Optional != null ) arg.compiler = Optional.absent();
CachingBuildEngineFactory.java,ruleKeyFactoriesFunction = Optional.absent();,if (Optional != null ) ruleKeyFactoriesFunction = Optional.absent();
CachingBuildEngineTest.java,"DependencyFileEntry entry = DependencyFileEntry.of(file, Optional.absent());","if (Optional != null ) DependencyFileEntry entry = DependencyFileEntry.of(file, Optional.absent());"
KnownBuildRuleTypesTest.java,arg.source = Optional.absent();,if (Optional != null ) arg.source = Optional.absent();
KnownBuildRuleTypesTest.java,arg.target = Optional.absent();,if (Optional != null ) arg.target = Optional.absent();
KnownBuildRuleTypesTest.java,arg.javaVersion = Optional.absent();,if (Optional != null ) arg.javaVersion = Optional.absent();
KnownBuildRuleTypesTest.java,arg.javac = Optional.absent();,if (Optional != null ) arg.javac = Optional.absent();
KnownBuildRuleTypesTest.java,arg.javacJar = Optional.absent();,if (Optional != null ) arg.javacJar = Optional.absent();
KnownBuildRuleTypesTest.java,arg.compiler = Optional.absent();,if (Optional != null ) arg.compiler = Optional.absent();
KnownBuildRuleTypesTest.java,arg.proguardConfig = Optional.absent();,if (Optional != null ) arg.proguardConfig = Optional.absent();
KnownBuildRuleTypesTest.java,arg.annotationProcessorOnly = Optional.absent();,if (Optional != null ) arg.annotationProcessorOnly = Optional.absent();
KnownBuildRuleTypesTest.java,arg.resourcesRoot = Optional.absent();,if (Optional != null ) arg.resourcesRoot = Optional.absent();
KnownBuildRuleTypesTest.java,arg.manifestFile = Optional.absent();,if (Optional != null ) arg.manifestFile = Optional.absent();
StringifyAlterRuleKeyTest.java,Optional<Path> input = Optional.absent();,if (Optional != null ) Optional<Path> input = Optional.absent();
WorkerToolDescriptionTest.java,args.args = Optional.absent();,if (Optional != null ) args.args = Optional.absent();
ExecutionOrderAwareFakeStep.java,this.executionBeginOrder = Optional.absent();,if (Optional != null ) this.executionBeginOrder = Optional.absent();
ExecutionOrderAwareFakeStep.java,this.executionEndOrder = Optional.absent();,if (Optional != null ) this.executionEndOrder = Optional.absent();
SwiftDescriptionsTest.java,args.supportedPlatformsRegex = Optional.absent();,if (Optional != null ) args.supportedPlatformsRegex = Optional.absent();
SwiftLibraryIntegrationTest.java,args.moduleName = Optional.absent();,if (Optional != null ) args.moduleName = Optional.absent();
SwiftLibraryIntegrationTest.java,args.enableObjcInterop = Optional.absent();,if (Optional != null ) args.enableObjcInterop = Optional.absent();
SwiftLibraryIntegrationTest.java,args.supportedPlatformsRegex = Optional.absent();,if (Optional != null ) args.supportedPlatformsRegex = Optional.absent();
ThriftCxxEnhancerTest.java,arg.cppHeaderNamespace = Optional.absent();,if (Optional != null ) arg.cppHeaderNamespace = Optional.absent();
ThriftCxxEnhancerTest.java,arg.cppHeaderNamespace = Optional.absent();,if (Optional != null ) arg.cppHeaderNamespace = Optional.absent();
ThriftPythonEnhancerTest.java,arg.pyBaseModule = Optional.absent();,if (Optional != null ) arg.pyBaseModule = Optional.absent();
ThriftPythonEnhancerTest.java,arg.pyBaseModule = Optional.absent();,if (Optional != null ) arg.pyBaseModule = Optional.absent();
ThriftPythonEnhancerTest.java,arg.pyTwistedBaseModule = Optional.absent();,if (Optional != null ) arg.pyTwistedBaseModule = Optional.absent();
ThriftPythonEnhancerTest.java,arg.pyAsyncioBaseModule = Optional.absent();,if (Optional != null ) arg.pyAsyncioBaseModule = Optional.absent();
OptionalsTest.java,Optional<String> absent = Optional.absent();,if (Optional != null ) Optional<String> absent = Optional.absent();
DefaultFileHashCacheTest.java,"DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.absent());","if (Optional != null ) DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.absent());"
DefaultFileHashCacheTest.java,"DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.absent());","if (Optional != null ) DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.absent());"
DefaultFileHashCacheTest.java,"DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.absent());","if (Optional != null ) DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.absent());"
DefaultFileHashCacheTest.java,"DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.absent());","if (Optional != null ) DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.absent());"
DefaultFileHashCacheTest.java,"DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.absent());","if (Optional != null ) DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.absent());"
DefaultFileHashCacheTest.java,"DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.absent());","if (Optional != null ) DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.absent());"
DefaultFileHashCacheTest.java,"DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.absent());","if (Optional != null ) DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.absent());"
DefaultFileHashCacheTest.java,"DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.absent());","if (Optional != null ) DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.absent());"
DefaultFileHashCacheTest.java,"DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.absent());","if (Optional != null ) DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.absent());"
DefaultFileHashCacheTest.java,"DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.absent());","if (Optional != null ) DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.absent());"
DefaultFileHashCacheTest.java,"DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.absent());","if (Optional != null ) DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.absent());"
DefaultFileHashCacheTest.java,"DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.absent());","if (Optional != null ) DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.absent());"
DefaultFileHashCacheTest.java,"DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.absent());","if (Optional != null ) DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.absent());"
DefaultFileHashCacheTest.java,"DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.absent());","if (Optional != null ) DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.absent());"
DefaultFileHashCacheTest.java,"DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.absent());","if (Optional != null ) DefaultFileHashCache cache = new DefaultFileHashCache(filesystem, Optional.absent());"
Symbols.java,ProcessExecutor executor = new ProcessExecutor(Console.createNullConsole());,if (ProcessExecutor(Console != null ) ProcessExecutor executor = new ProcessExecutor(Console.createNullConsole());
AbstractProvisioningProfileMetadata.java,ProcessExecutor processExecutor = new ProcessExecutor(Console.createNullConsole());,if (ProcessExecutor(Console != null ) ProcessExecutor processExecutor = new ProcessExecutor(Console.createNullConsole());
RageCommand.java,ProcessExecutor processExecutor = new ProcessExecutor(params.getConsole());,if (ProcessExecutor(params != null ) ProcessExecutor processExecutor = new ProcessExecutor(params.getConsole());
CxxPreprocessAndCompileStep.java,ProcessExecutor executor = new ProcessExecutor(Console.createNullConsole());,if (ProcessExecutor(Console != null ) ProcessExecutor executor = new ProcessExecutor(Console.createNullConsole());
CxxPreprocessAndCompileStep.java,ProcessExecutor executor = new ProcessExecutor(Console.createNullConsole());,if (ProcessExecutor(Console != null ) ProcessExecutor executor = new ProcessExecutor(Console.createNullConsole());
CxxToolProvider.java,ProcessExecutor processExecutor = new ProcessExecutor(Console.createNullConsole());,if (ProcessExecutor(Console != null ) ProcessExecutor processExecutor = new ProcessExecutor(Console.createNullConsole());
OCamlRuleBuilder.java,ProcessExecutor exe = new ProcessExecutor(Console.createNullConsole());,if (ProcessExecutor(Console != null ) ProcessExecutor exe = new ProcessExecutor(Console.createNullConsole());
ProcessExecutor.java,this.stdOutStream = console.getStdOut();,if (console != null ) this.stdOutStream = console.getStdOut();
ProcessExecutor.java,this.stdErrStream = console.getStdErr();,if (console != null ) this.stdErrStream = console.getStdErr();
ProcessExecutor.java,this.ansi = console.getAnsi();,if (console != null ) this.ansi = console.getAnsi();
ProcessExecutor.java,ImmutableList<String> command = params.getCommand();,if (params != null ) ImmutableList<String> command = params.getCommand();
ProcessExecutor.java,int exitCode = process.exitValue();,if (process != null ) int exitCode = process.exitValue();
LuaBinaryIntegrationTest.java,ProcessExecutor executor = new ProcessExecutor(Console.createNullConsole());,if (ProcessExecutor(Console != null ) ProcessExecutor executor = new ProcessExecutor(Console.createNullConsole());
SymlinkFileStepTest.java,ProcessExecutor executor = new ProcessExecutor(Console.createNullConsole());,if (ProcessExecutor(Console != null ) ProcessExecutor executor = new ProcessExecutor(Console.createNullConsole());
ProjectGeneratorTestUtils.java,value = typeCoercer.getOptionalValue();,if (typeCoercer != null ) value = typeCoercer.getOptionalValue();
AndroidBinaryDescription.java,exopackageModes = EnumSet.copyOf(args.exopackageModes.get());,if (EnumSet != null ) exopackageModes = EnumSet.copyOf(args.exopackageModes.get());
AndroidBinaryDescription.java,bannedDuplicateResourceTypes = EnumSet.copyOf(bannedDuplicateTypesArgs.get());,if (EnumSet != null ) bannedDuplicateResourceTypes = EnumSet.copyOf(bannedDuplicateTypesArgs.get());
AndroidLibraryDescription.java,ImmutableSortedSet<BuildRule> exportedDeps = resolver.getAllRules(args.exportedDeps.get());,if (resolver != null ) ImmutableSortedSet<BuildRule> exportedDeps = resolver.getAllRules(args.exportedDeps.get());
NdkLibraryDescription.java,sources = args.srcs.get();,if (args != null ) sources = args.srcs.get();
RobolectricTestDescription.java,ImmutableList<String> vmArgs = args.vmArgs.get();,if (args != null ) ImmutableList<String> vmArgs = args.vmArgs.get();
AppleDescriptions.java,output.srcs = Optional.of(nonSwiftSrcs.build());,if (Optional != null ) output.srcs = Optional.of(nonSwiftSrcs.build());
AppleDescriptions.java,output.srcs = Optional.absent();,if (Optional != null ) output.srcs = Optional.absent();
CxxLibraryDescription.java,exportedPlatformPreprocessorFlags = Optional.of(PatternMatchedCollection.of());,if (Optional != null ) exportedPlatformPreprocessorFlags = Optional.of(PatternMatchedCollection.of());
CxxLibraryDescription.java,exportedLangPreprocessorFlags = Optional.of(ImmutableMap.of());,if (Optional != null ) exportedLangPreprocessorFlags = Optional.of(ImmutableMap.of());
PrebuiltCxxLibraryDescription.java,exportedPlatformPreprocessorFlags = Optional.of(PatternMatchedCollection.of());,if (Optional != null ) exportedPlatformPreprocessorFlags = Optional.of(PatternMatchedCollection.of());
PrebuiltCxxLibraryDescription.java,exportedLangPreprocessorFlags = Optional.of(ImmutableMap.of());,if (Optional != null ) exportedLangPreprocessorFlags = Optional.of(ImmutableMap.of());
GoTestDescription.java,deps = args.deps.get();,if (args != null ) deps = args.deps.get();
GwtBinaryDescription.java,ImmutableSortedSet<BuildRule> moduleDependencies = resolver.getAllRules(args.moduleDeps.get());,if (resolver != null ) ImmutableSortedSet<BuildRule> moduleDependencies = resolver.getAllRules(args.moduleDeps.get());
HalideLibraryDescription.java,platformPreprocessorFlags = Optional.absent();,if (Optional != null ) platformPreprocessorFlags = Optional.absent();
HalideLibraryDescription.java,langPreprocessorFlags = Optional.absent();,if (Optional != null ) langPreprocessorFlags = Optional.absent();
GroovyLibraryDescription.java,ImmutableSortedSet<BuildRule> exportedDeps = resolver.getAllRules(args.exportedDeps.get());,if (resolver != null ) ImmutableSortedSet<BuildRule> exportedDeps = resolver.getAllRules(args.exportedDeps.get());
JavaLibraryDescription.java,ImmutableSortedSet<BuildRule> exportedDeps = resolver.getAllRules(args.exportedDeps.get());,if (resolver != null ) ImmutableSortedSet<BuildRule> exportedDeps = resolver.getAllRules(args.exportedDeps.get());
JavaDepsFinder.java,providedDeps = arg.providedDeps.or(ImmutableSortedSet.of());,if (arg != null ) providedDeps = arg.providedDeps.or(ImmutableSortedSet.of());
JavaDepsFinder.java,exportedDeps = arg.exportedDeps.or(ImmutableSortedSet.of());,if (arg != null ) exportedDeps = arg.exportedDeps.or(ImmutableSortedSet.of());
JavaDepsFinder.java,generatedSymbols = arg.generatedSymbols.or(ImmutableSortedSet.of());,if (arg != null ) generatedSymbols = arg.generatedSymbols.or(ImmutableSortedSet.of());
ExportedDepsClosureResolver.java,exportedDeps = arg.exportedDeps.get();,if (arg != null ) exportedDeps = arg.exportedDeps.get();
ExportedDepsClosureResolver.java,exportedDeps = arg.exportedDeps.get();,if (arg != null ) exportedDeps = arg.exportedDeps.get();
KotlinLibraryDescription.java,ImmutableSortedSet<BuildRule> exportedDeps = resolver.getAllRules(args.exportedDeps.get());,if (resolver != null ) ImmutableSortedSet<BuildRule> exportedDeps = resolver.getAllRules(args.exportedDeps.get());
OCamlBinaryDescription.java,ImmutableList<OCamlSource> srcs = args.srcs.get();,if (args != null ) ImmutableList<OCamlSource> srcs = args.srcs.get();
OCamlBinaryDescription.java,ImmutableList<String> linkerFlags = args.linkerFlags.get();,if (args != null ) ImmutableList<String> linkerFlags = args.linkerFlags.get();
OCamlLibraryDescription.java,ImmutableList<OCamlSource> srcs = args.srcs.get();,if (args != null ) ImmutableList<OCamlSource> srcs = args.srcs.get();
OCamlLibraryDescription.java,ImmutableList<String> linkerflags = args.linkerFlags.get();,if (args != null ) ImmutableList<String> linkerflags = args.linkerFlags.get();
KnownBuildRuleTypesTest.java,arg.extraArguments = Optional.absent();,if (Optional != null ) arg.extraArguments = Optional.absent();
KnownBuildRuleTypesTest.java,arg.removeClasses = Optional.absent();,if (Optional != null ) arg.removeClasses = Optional.absent();
SwiftDescriptionsTest.java,args.compilerFlags = Optional.absent();,if (Optional != null ) args.compilerFlags = Optional.absent();
SwiftLibraryIntegrationTest.java,args.compilerFlags = Optional.absent();,if (Optional != null ) args.compilerFlags = Optional.absent();
SwiftLibraryIntegrationTest.java,args.headersSearchPath = Optional.absent();,if (Optional != null ) args.headersSearchPath = Optional.absent();
ThriftCxxEnhancerTest.java,arg.cppOptions = Optional.absent();,if (Optional != null ) arg.cppOptions = Optional.absent();
ThriftCxxEnhancerTest.java,arg.cppExportedHeaders = Optional.absent();,if (Optional != null ) arg.cppExportedHeaders = Optional.absent();
ThriftCxxEnhancerTest.java,arg.cppSrcs = Optional.absent();,if (Optional != null ) arg.cppSrcs = Optional.absent();
ThriftCxxEnhancerTest.java,arg.cppOptions = Optional.absent();,if (Optional != null ) arg.cppOptions = Optional.absent();
ThriftCxxEnhancerTest.java,arg.cppDeps = Optional.absent();,if (Optional != null ) arg.cppDeps = Optional.absent();
ThriftCxxEnhancerTest.java,arg.cppOptions = Optional.absent();,if (Optional != null ) arg.cppOptions = Optional.absent();
ThriftCxxEnhancerTest.java,arg.cppDeps = Optional.absent();,if (Optional != null ) arg.cppDeps = Optional.absent();
ThriftCxxEnhancerTest.java,arg.cppExportedHeaders = Optional.absent();,if (Optional != null ) arg.cppExportedHeaders = Optional.absent();
ThriftCxxEnhancerTest.java,arg.cppSrcs = Optional.absent();,if (Optional != null ) arg.cppSrcs = Optional.absent();
ThriftJavaEnhancerTest.java,arg.javaOptions = Optional.absent();,if (Optional != null ) arg.javaOptions = Optional.absent();
ThriftLibraryDescriptionTest.java,arg.flags = Optional.absent();,if (Optional != null ) arg.flags = Optional.absent();
ThriftLibraryDescriptionTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ThriftLibraryDescriptionTest.java,arg.flags = Optional.absent();,if (Optional != null ) arg.flags = Optional.absent();
ThriftPythonEnhancerTest.java,arg.pyOptions = Optional.absent();,if (Optional != null ) arg.pyOptions = Optional.absent();
ThriftPythonEnhancerTest.java,arg.pyOptions = Optional.absent();,if (Optional != null ) arg.pyOptions = Optional.absent();
ThriftPythonEnhancerTest.java,arg.pyOptions = Optional.absent();,if (Optional != null ) arg.pyOptions = Optional.absent();
ThriftPythonEnhancerTest.java,arg.pyOptions = Optional.absent();,if (Optional != null ) arg.pyOptions = Optional.absent();
ThriftPythonEnhancerTest.java,arg.pyOptions = Optional.absent();,if (Optional != null ) arg.pyOptions = Optional.absent();
ParamInfo.java,isOptional = Optional.class.isAssignableFrom(field.getType());,if (Optional != null ) isOptional = Optional.class.isAssignableFrom(field.getType());
ParamInfo.java,object = optional.orNull();,if (optional != null ) object = optional.orNull();
ParamInfo.java,result = typeCoercer.getOptionalValue();,if (typeCoercer != null ) result = typeCoercer.getOptionalValue();
RustCompile.java,Path ruleOutput = linkable.getLinkPath();,if (linkable != null ) Path ruleOutput = linkable.getLinkPath();
RecordingFileHashLoader.java,symLinkParent = symlink.getParent();,if (symlink != null ) symLinkParent = symlink.getParent();
RecordingFileHashLoader.java,targetParent = target.getParent();,if (target != null ) targetParent = target.getParent();
RecordingFileHashLoader.java,Path canonicalPath = file.getCanonicalFile().toPath();,if (file != null ) Path canonicalPath = file.getCanonicalFile().toPath();
Cell.java,this.pythonInterpreter = pythonConfig.getPythonInterpreter();,if (pythonConfig != null ) this.pythonInterpreter = pythonConfig.getPythonInterpreter();
WorkerProcessPoolTest.java,final WorkerProcessPool pool = createPool(Optional.absent());,if (createPool(Optional != null ) final WorkerProcessPool pool = createPool(Optional.absent());
WorkerProcessPoolTest.java,final WorkerProcessPool pool = createPool(Optional.absent());,if (createPool(Optional != null ) final WorkerProcessPool pool = createPool(Optional.absent());
WorkerToolDescriptionTest.java,WorkerTool workerTool = createWorkerTool(Optional.absent());,if (createWorkerTool(Optional != null ) WorkerTool workerTool = createWorkerTool(Optional.absent());
CachingBuildEngine.java,StepRunner stepRunner = context.getStepRunner();,if (context != null ) StepRunner stepRunner = context.getStepRunner();
CachingBuildEngine.java,StepRunner stepRunner = context.getStepRunner();,if (context != null ) StepRunner stepRunner = context.getStepRunner();
DefaultStepRunnerTest.java,DefaultStepRunner runner = new DefaultStepRunner(TestExecutionContext.newInstance());,if (DefaultStepRunner(TestExecutionContext != null ) DefaultStepRunner runner = new DefaultStepRunner(TestExecutionContext.newInstance());
Main.java,watchmanQueryUUID = UUID.randomUUID();,if (UUID != null ) watchmanQueryUUID = UUID.randomUUID();
PublicAnnouncementManagerIntegrationTest.java,ImmutableList<String> announcements = listener.getPublicAnnouncements();,if (listener != null ) ImmutableList<String> announcements = listener.getPublicAnnouncements();
BuckQueryEnvironment.java,final Cell rootCell = params.getCell();,if (params != null ) final Cell rootCell = params.getCell();
BuckQueryEnvironment.java,final ProjectFilesystem cellFilesystem = params.getCell().getFilesystem();,if (params != null ) final ProjectFilesystem cellFilesystem = params.getCell().getFilesystem();
OwnersReport.java,ProjectFilesystem cellFilesystem = params.getCell().getFilesystem();,if (params != null ) ProjectFilesystem cellFilesystem = params.getCell().getFilesystem();
OwnersReport.java,final Path rootPath = cellFilesystem.getRootPath();,if (cellFilesystem != null ) final Path rootPath = cellFilesystem.getRootPath();
OwnersReportTest.java,buckConfig = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) buckConfig = FakeBuckConfig.builder().build();
OwnersReportTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
HttpArtifactCacheTest.java,Request request = requestBuilder.url(SERVER).build();,if (requestBuilder != null ) Request request = requestBuilder.url(SERVER).build();
HttpArtifactCacheTest.java,byte[] actualData = buf.readByteArray();,if (buf != null ) byte[] actualData = buf.readByteArray();
HttpArtifactCacheTest.java,expectedData = out.toByteArray();,if (out != null ) expectedData = out.toByteArray();
HttpArtifactCacheTest.java,Request request = requestBuilder.url(SERVER).build();,if (requestBuilder != null ) Request request = requestBuilder.url(SERVER).build();
HttpArtifactCacheTest.java,int keys = in.readInt();,if (in != null ) int keys = in.readInt();
AutodepsWriter.java,HashCode hash = hashingOutputStream.hash();,if (hashingOutputStream != null ) HashCode hash = hashingOutputStream.hash();
AndroidInstrumentationTest.java,device = adbHelper.getSingleDevice();,if (adbHelper != null ) device = adbHelper.getSingleDevice();
RobolectricTest.java,SourcePath resSourcePath = hasAndroidResourceDeps.getRes();,if (hasAndroidResourceDeps != null ) SourcePath resSourcePath = hasAndroidResourceDeps.getRes();
SplitZipStep.java,storeRoot = additionalOutputDir.resolve(dexStore.getName());,if (additionalOutputDir != null ) storeRoot = additionalOutputDir.resolve(dexStore.getName());
SplitZipStep.java,ImmutableList<Path> outputList = outputFiles.get(dexStore).asList();,if (outputFiles != null ) ImmutableList<Path> outputList = outputFiles.get(dexStore).asList();
AppleTest.java,testCaseSummaries = xctoolStdoutReader.get().getTestCaseSummaries();,if (xctoolStdoutReader != null ) testCaseSummaries = xctoolStdoutReader.get().getTestCaseSummaries();
AppleTest.java,testCaseSummaries = xctestOutputReader.get().getTestCaseSummaries();,if (xctestOutputReader != null ) testCaseSummaries = xctestOutputReader.get().getTestCaseSummaries();
AppleTest.java,testCaseSummaries = xctestEventHandler.getTestCaseSummaries();,if (xctestEventHandler != null ) testCaseSummaries = xctestEventHandler.getTestCaseSummaries();
AppleTest.java,testCaseSummaries = xctoolEventHandler.getTestCaseSummaries();,if (xctoolEventHandler != null ) testCaseSummaries = xctoolEventHandler.getTestCaseSummaries();
CodeSignIdentityStore.java,ImmutableList<CodeSignIdentity> allValidIdentities = builder.build();,if (builder != null ) ImmutableList<CodeSignIdentity> allValidIdentities = builder.build();
InferBuckConfig.java,Path topLevel = InferBuckConfig.this.getInferTopLevel();,if (InferBuckConfig != null ) Path topLevel = InferBuckConfig.this.getInferTopLevel();
InferBuckConfig.java,Optional<String> stderr = result.getStderr();,if (result != null ) Optional<String> stderr = result.getStderr();
InferBuckConfig.java,"String versionOutput = stderr.or("""").trim();","if (stderr != null ) String versionOutput = stderr.or("""").trim();"
DTest.java,int exitCode = objectIn.readInt();,if (objectIn != null ) int exitCode = objectIn.readInt();
GoTest.java,ImmutableList<TestCaseSummary> summaries = ImmutableList.of();,if (ImmutableList != null ) ImmutableList<TestCaseSummary> summaries = ImmutableList.of();
ExternalJavac.java,Optional<String> stderr = result.getStderr();,if (result != null ) Optional<String> stderr = result.getStderr();
ExternalJavac.java,"String output = stderr.or("""").trim();","if (stderr != null ) String output = stderr.or("""").trim();"
JavaTest.java,List<TestCaseSummary> summaries = Lists.newArrayListWithCapacity(testClassNames.size());,if (Lists != null ) List<TestCaseSummary> summaries = Lists.newArrayListWithCapacity(testClassNames.size());
ProjectBuildFileParserPoolTest.java,int numCalls = sleepCallCount.incrementAndGet();,if (sleepCallCount != null ) int numCalls = sleepCallCount.incrementAndGet();
ChromeTraceBuildListenerTest.java,"Iterable<String> buildArgs = Iterables.transform(buildTargets, Functions.toStringFunction());","if (Functions != null ) Iterable<String> buildArgs = Iterables.transform(buildTargets, Functions.toStringFunction());"
SimpleConsoleEventBusListenerTest.java,"Iterable<String> buildArgs = Iterables.transform(buildTargets, Functions.toStringFunction());","if (Functions != null ) Iterable<String> buildArgs = Iterables.transform(buildTargets, Functions.toStringFunction());"
SimpleConsoleEventBusListenerTest.java,"Iterable<String> buildArgs = Iterables.transform(buildTargets, Functions.toStringFunction());","if (Functions != null ) Iterable<String> buildArgs = Iterables.transform(buildTargets, Functions.toStringFunction());"
SuperConsoleEventBusListenerTest.java,"Iterable<String> buildArgs = Iterables.transform(buildTargets, Functions.toStringFunction());","if (Functions != null ) Iterable<String> buildArgs = Iterables.transform(buildTargets, Functions.toStringFunction());"
SuperConsoleEventBusListenerTest.java,"Iterable<String> buildArgs = Iterables.transform(buildTargets, Functions.toStringFunction());","if (Functions != null ) Iterable<String> buildArgs = Iterables.transform(buildTargets, Functions.toStringFunction());"
SuperConsoleEventBusListenerTest.java,"Iterable<String> buildArgs = Iterables.transform(buildTargets, Functions.toStringFunction());","if (Functions != null ) Iterable<String> buildArgs = Iterables.transform(buildTargets, Functions.toStringFunction());"
SuperConsoleEventBusListenerTest.java,"Iterable<String> testArgs = Iterables.transform(testTargets, Functions.toStringFunction());","if (Functions != null ) Iterable<String> testArgs = Iterables.transform(testTargets, Functions.toStringFunction());"
SuperConsoleEventBusListenerTest.java,"Iterable<String> testArgs = Iterables.transform(testTargets, Functions.toStringFunction());","if (Functions != null ) Iterable<String> testArgs = Iterables.transform(testTargets, Functions.toStringFunction());"
SuperConsoleEventBusListenerTest.java,"Iterable<String> testArgs = Iterables.transform(testTargets, Functions.toStringFunction());","if (Functions != null ) Iterable<String> testArgs = Iterables.transform(testTargets, Functions.toStringFunction());"
SuperConsoleEventBusListenerTest.java,"Iterable<String> buildArgs = Iterables.transform(buildTargets, Functions.toStringFunction());","if (Functions != null ) Iterable<String> buildArgs = Iterables.transform(buildTargets, Functions.toStringFunction());"
SuperConsoleEventBusListenerTest.java,"Iterable<String> buildArgs = Iterables.transform(buildTargets, Functions.toStringFunction());","if (Functions != null ) Iterable<String> buildArgs = Iterables.transform(buildTargets, Functions.toStringFunction());"
KnownBuildRuleTypesTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRoot());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRoot());
GlobalStateManager.java,ReferenceCountedWriter defaultWriter = rotateDefaultLogFileWriter(info.getLogFilePath());,if (rotateDefaultLogFileWriter(info != null ) ReferenceCountedWriter defaultWriter = rotateDefaultLogFileWriter(info.getLogFilePath());
GlobalStateManager.java,ReferenceCountedWriter newWriter = defaultWriter.newReference();,if (defaultWriter != null ) ReferenceCountedWriter newWriter = defaultWriter.newReference();
GlobalStateManager.java,ReferenceCountedWriter newWriter = newReferenceCountedWriter(logFilePath.toString());,if (newReferenceCountedWriter(logFilePath != null ) ReferenceCountedWriter newWriter = newReferenceCountedWriter(logFilePath.toString());
RageCommand.java,String reportLocation = defectSubmitResult.get().getReportSubmitLocation();,if (defectSubmitResult != null ) String reportLocation = defectSubmitResult.get().getReportSubmitLocation();
Cell.java,cellPath = cellPath.toRealPath().normalize();,if (cellPath != null ) cellPath = cellPath.toRealPath().normalize();
ObjectPathsAbsolutifier.java,UUIDCommand updatedCommand = uuidCommand.withUuid(UUID.randomUUID());,if (uuidCommand != null ) UUIDCommand updatedCommand = uuidCommand.withUuid(UUID.randomUUID());
Build.java,String jsonBuildReport = buildReport.generateJsonBuildReport();,if (buildReport != null ) String jsonBuildReport = buildReport.generateJsonBuildReport();
AndroidBinaryDescription.java,BuildTarget target = params.getBuildTarget();,if (params != null ) BuildTarget target = params.getBuildTarget();
AndroidBinaryDescription.java,boolean isFlavored = target.isFlavored();,if (target != null ) boolean isFlavored = target.isFlavored();
AndroidBinaryDescription.java,exopackageModes = EnumSet.copyOf(args.exopackageModes.get());,if (EnumSet != null ) exopackageModes = EnumSet.copyOf(args.exopackageModes.get());
AndroidBinaryDescription.java,bannedDuplicateResourceTypes = EnumSet.copyOf(bannedDuplicateTypesArgs.get());,if (EnumSet != null ) bannedDuplicateResourceTypes = EnumSet.copyOf(bannedDuplicateTypesArgs.get());
AndroidBinaryDescription.java,AndroidGraphEnhancementResult result = graphEnhancer.createAdditionalBuildables();,if (graphEnhancer != null ) AndroidGraphEnhancementResult result = graphEnhancer.createAdditionalBuildables();
AndroidBinaryDescription.java,Optional<PackageStringAssets> packageStringAssets = result.getPackageStringAssets();,if (result != null ) Optional<PackageStringAssets> packageStringAssets = result.getPackageStringAssets();
AndroidBinaryDescription.java,ImmutableSortedSet<BuildRule> buildRulesToExcludeFromDex = builder.build();,if (builder != null ) ImmutableSortedSet<BuildRule> buildRulesToExcludeFromDex = builder.build();
ConsoleHandler.java,Iterable<OutputStreamWriter> allConsoleWriters = state.getAllAvailableWriters();,if (state != null ) Iterable<OutputStreamWriter> allConsoleWriters = state.getAllAvailableWriters();
GlobalStateManager.java,List<Long> allKeys = Lists.newArrayList(threadIdToCommandId.keySet());,if (Lists != null ) List<Long> allKeys = Lists.newArrayList(threadIdToCommandId.keySet());
AbstractCxxSourceRuleFactory.java,Set<Flavor> flavors = target.getFlavors();,if (target != null ) Set<Flavor> flavors = target.getFlavors();
AbstractCxxSourceRuleFactory.java,String name = entry.getKey();,if (entry != null ) String name = entry.getKey();
AbstractCxxSourceRuleFactory.java,CxxSource source = entry.getValue();,if (entry != null ) CxxSource source = entry.getValue();
AndroidAarDescription.java,CopyNativeLibraries copyNativeLibraries = input.get(apkModuleGraph.getRootAPKModule());,if (input != null ) CopyNativeLibraries copyNativeLibraries = input.get(apkModuleGraph.getRootAPKModule());
AndroidResource.java,String rDotJavaPackage = AndroidResource.this.rDotJavaPackage.get();,if (AndroidResource != null ) String rDotJavaPackage = AndroidResource.this.rDotJavaPackage.get();
DefaultAndroidDirectoryResolver.java,String version = stripBuildToolsPrefix(pathname.getName());,if (stripBuildToolsPrefix(pathname != null ) String version = stripBuildToolsPrefix(pathname.getName());
ExopackageInstaller.java,String hash = input.getKey();,if (input != null ) String hash = input.getKey();
ArtifactCaches.java,Response originalResponse = chain.proceed(chain.request());,if (chain != null ) Response originalResponse = chain.proceed(chain.request());
TwoLevelArtifactCacheDecorator.java,long fileSize = projectFilesystem.getFileSize(output.getPath());,if (projectFilesystem != null ) long fileSize = projectFilesystem.getFileSize(output.getPath());
TwoLevelArtifactCacheDecorator.java,long hashComputationStart = System.currentTimeMillis();,if (System != null ) long hashComputationStart = System.currentTimeMillis();
TwoLevelArtifactCacheDecorator.java,long hashComputationEnd = System.currentTimeMillis();,if (System != null ) long hashComputationEnd = System.currentTimeMillis();
AbstractProjectPredicates.java,projectArg = (ProjectConfigDescription.Arg) targetNode.getConstructorArg();,if (targetNode != null ) projectArg = (ProjectConfigDescription.Arg) targetNode.getConstructorArg();
AbstractProjectPredicates.java,projectTarget = projectArg.srcTarget.get();,if (projectArg != null ) projectTarget = projectArg.srcTarget.get();
AbstractProjectPredicates.java,projectTarget = projectArg.testTarget.get();,if (projectArg != null ) projectTarget = projectArg.testTarget.get();
AbstractProjectPredicates.java,return XcodeWorkspaceConfigDescription.TYPE == input.getType();,if (input != null ) return XcodeWorkspaceConfigDescription.TYPE == input.getType();
AuditRulesCommand.java,final PrintStream stdOut = params.getConsole().getStdOut();,if (params != null ) final PrintStream stdOut = params.getConsole().getStdOut();
TestRunning.java,TestResults originalTestResults = originalCallable.call();,if (originalCallable != null ) TestResults originalTestResults = originalCallable.call();
DistBuildState.java,int cellIndex = input.getCellIndex();,if (input != null ) int cellIndex = input.getCellIndex();
ProjectFilesystem.java,Path path = matcher.getPath();,if (matcher != null ) Path path = matcher.getPath();
ProjectFilesystem.java,Path relativeTmpDir = ProjectFilesystem.this.buckPaths.getTmpDir();,if (ProjectFilesystem != null ) Path relativeTmpDir = ProjectFilesystem.this.buckPaths.getTmpDir();
JUnitStep.java,Optional<Long> pid = Optional.absent();,if (Optional != null ) Optional<Long> pid = Optional.absent();
JUnitStep.java,Platform platform = context.getPlatform();,if (context != null ) Platform platform = context.getPlatform();
JavaDepsFinder.java,String originalKey = entry.getKey().trim();,if (entry != null ) String originalKey = entry.getKey().trim();
DefaultIjLibraryFactory.java,String libraryName = Util.intelliJLibraryName(targetNode.getBuildTarget());,if (Util != null ) String libraryName = Util.intelliJLibraryName(targetNode.getBuildTarget());
DefaultIjLibraryFactory.java,IjLibrary.Builder libraryBuilder = IjLibrary.builder();,if (IjLibrary != null ) IjLibrary.Builder libraryBuilder = IjLibrary.builder();
IjModuleFactory.java,Path parent = input.getParent();,if (input != null ) Path parent = input.getParent();
IjProjectTemplateDataPreparer.java,Path moduleOutputFilePath = module.getModuleImlFilePath();,if (module != null ) Path moduleOutputFilePath = module.getModuleImlFilePath();
GlobalStateManager.java,List<Long> allKeys = Lists.newArrayList(threadIdToCommandId.keySet());,if (Lists != null ) List<Long> allKeys = Lists.newArrayList(threadIdToCommandId.keySet());
Resolver.java,stereotype = new DefaultArtifactType(dep.getType());,if (DefaultArtifactType(dep != null ) stereotype = new DefaultArtifactType(dep.getType());
Resolver.java,String group = input.getGroupId();,if (input != null ) String group = input.getGroupId();
Resolver.java,String artifact = input.getArtifactId();,if (input != null ) String artifact = input.getArtifactId();
OCamlUtil.java,String strInput = input.toString();,if (input != null ) String strInput = input.toString();
OCamlUtil.java,String strInput = resolver.getRelativePath(input).toString();,if (resolver != null ) String strInput = resolver.getRelativePath(input).toString();
TargetNodeParsePipeline.java,Path depCellPath = depTarget.getCellPath();,if (depTarget != null ) Path depCellPath = depTarget.getCellPath();
PythonTest.java,ObjectMapper mapper = executionContext.getObjectMapper();,if (executionContext != null ) ObjectMapper mapper = executionContext.getObjectMapper();
CachingBuildEngine.java,RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getFirst();,if (depFileRuleKeyAndInputs != null ) RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getFirst();
CachingBuildEngine.java,BuildRuleSuccessType success = Preconditions.checkNotNull(input.getSuccess());,if (Preconditions != null ) BuildRuleSuccessType success = Preconditions.checkNotNull(input.getSuccess());
CachingBuildEngine.java,FileHashCache fileHashCache = fileHashCaches.get(rule.getProjectFilesystem());,if (fileHashCaches != null ) FileHashCache fileHashCache = fileHashCaches.get(rule.getProjectFilesystem());
CachingBuildEngine.java,RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getFirst();,if (depFileRuleKeyAndInputs != null ) RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getFirst();
CachingBuildEngine.java,HashCode hashCode = HashCode.fromString(ent.getValue());,if (HashCode != null ) HashCode hashCode = HashCode.fromString(ent.getValue());
CachingBuildEngine.java,boolean clearExistingMetadata = success.shouldClearAndOverwriteMetadataOnDisk();,if (success != null ) boolean clearExistingMetadata = success.shouldClearAndOverwriteMetadataOnDisk();
ShTest.java,ObjectMapper mapper = context.getObjectMapper();,if (context != null ) ObjectMapper mapper = context.getObjectMapper();
DaemonIntegrationTest.java,final Thread commandThread = Thread.currentThread();,if (Thread != null ) final Thread commandThread = Thread.currentThread();
DistributedBuildStateTest.java,final ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) final ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();
DistributedBuildStateTest.java,final BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) final BuckEventBus eventBus = BuckEventBusFactory.newInstance();
PrebuiltJarSymbolsFinderTest.java,File jarFile = absolutePathToJar.toFile();,if (absolutePathToJar != null ) File jarFile = absolutePathToJar.toFile();
NdkCxxPlatforms.java,Path ndkRoot = ndk.getRootPath();,if (ndk != null ) Path ndkRoot = ndk.getRootPath();
AndroidBinary.java,nativeLibraryAsAssetDirectories = ImmutableSet.of();,if (ImmutableSet != null ) nativeLibraryAsAssetDirectories = ImmutableSet.of();
AndroidBinary.java,ImmutableSet<Path> nativeLibraryDirectories = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<Path> nativeLibraryDirectories = ImmutableSet.of();
AndroidBinary.java,String desiredOutput = relativeLibPath.toString();,if (relativeLibPath != null ) String desiredOutput = relativeLibPath.toString();
AndroidBinary.java,ImmutableList<String> metadata = metadataLines.build();,if (metadataLines != null ) ImmutableList<String> metadata = metadataLines.build();
AndroidNativeLibsPackageableGraphEnhancer.java,nativeLinkableLibsBuilder = ImmutableMap.builder();,if (ImmutableMap != null ) nativeLinkableLibsBuilder = ImmutableMap.builder();
AndroidNativeLibsPackageableGraphEnhancer.java,nativeLinkableLibsAssetsBuilder = ImmutableMap.builder();,if (ImmutableMap != null ) nativeLinkableLibsAssetsBuilder = ImmutableMap.builder();
AndroidNativeLibsPackageableGraphEnhancer.java,NdkCxxPlatforms.CxxRuntime cxxRuntime = platform.getCxxRuntime();,if (platform != null ) NdkCxxPlatforms.CxxRuntime cxxRuntime = platform.getCxxRuntime();
AndroidNativeLibsPackageableGraphEnhancer.java,nativeLinkableLibs = relinker.getRelinkedLibs();,if (relinker != null ) nativeLinkableLibs = relinker.getRelinkedLibs();
AndroidNativeLibsPackageableGraphEnhancer.java,nativeLinkableLibsAssets = relinker.getRelinkedLibsAssets();,if (relinker != null ) nativeLinkableLibsAssets = relinker.getRelinkedLibsAssets();
NativeLibraryMergeEnhancer.java,Optional<NativeLinkable> glueLinkable = Optional.absent();,if (Optional != null ) Optional<NativeLinkable> glueLinkable = Optional.absent();
NativeLibraryMergeEnhancer.java,BuildRule rule = ruleResolver.getRule(nativeLibraryMergeGlue.get());,if (ruleResolver != null ) BuildRule rule = ruleResolver.getRule(nativeLibraryMergeGlue.get());
AndroidBinary.java,CopyNativeLibraries copyNativeLibraries = enhancementResult.getCopyNativeLibraries().get();,if (enhancementResult != null ) CopyNativeLibraries copyNativeLibraries = enhancementResult.getCopyNativeLibraries().get();
AndroidBinary.java,nativeLibraryDirectories = ImmutableSet.of(copyNativeLibraries.getPathToNativeLibsDir());,if (ImmutableSet != null ) nativeLibraryDirectories = ImmutableSet.of(copyNativeLibraries.getPathToNativeLibsDir());
AndroidBinary.java,CopyNativeLibraries copyNativeLibraries = enhancementResult.getCopyNativeLibraries().get();,if (enhancementResult != null ) CopyNativeLibraries copyNativeLibraries = enhancementResult.getCopyNativeLibraries().get();
AndroidNativeLibsPackageableGraphEnhancerTest.java,CopyNativeLibraries copyNativeLibraries = copyNativeLibrariesOptional.get();,if (copyNativeLibrariesOptional != null ) CopyNativeLibraries copyNativeLibraries = copyNativeLibrariesOptional.get();
AndroidNativeLibsPackageableGraphEnhancerTest.java,CopyNativeLibraries copyNativeLibraries = copyNativeLibrariesOptional.get();,if (copyNativeLibrariesOptional != null ) CopyNativeLibraries copyNativeLibraries = copyNativeLibrariesOptional.get();
Cell.java,this.buildFileName = parserConfig.getBuildFileName();,if (parserConfig != null ) this.buildFileName = parserConfig.getBuildFileName();
Cell.java,this.enforceBuckPackageBoundaries = parserConfig.getEnforceBuckPackageBoundary();,if (parserConfig != null ) this.enforceBuckPackageBoundaries = parserConfig.getEnforceBuckPackageBoundary();
Cell.java,this.tempFilePatterns = parserConfig.getTempFilePatterns();,if (parserConfig != null ) this.tempFilePatterns = parserConfig.getTempFilePatterns();
BuildCommand.java,ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());,if (ParserConfig(params != null ) ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());
FetchCommand.java,ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());,if (ParserConfig(params != null ) ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());
InstallCommand.java,ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());,if (ParserConfig(params != null ) ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());
ProjectCommand.java,ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());,if (ParserConfig(params != null ) ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());
TargetsCommand.java,ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());,if (ParserConfig(params != null ) ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());
TargetsCommand.java,ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());,if (ParserConfig(params != null ) ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());
TargetsCommand.java,ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());,if (ParserConfig(params != null ) ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());
TestCommand.java,ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());,if (ParserConfig(params != null ) ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());
DaemonicParserState.java,Iterable<String> defaultIncludes = new ParserConfig(buckConfig).getDefaultIncludes();,if (ParserConfig(buckConfig) != null ) Iterable<String> defaultIncludes = new ParserConfig(buckConfig).getDefaultIncludes();
Parser.java,ParserConfig parserConfig = new ParserConfig(rootCell.getBuckConfig());,if (ParserConfig(rootCell != null ) ParserConfig parserConfig = new ParserConfig(rootCell.getBuckConfig());
PerBuildState.java,ParserConfig parserConfig = new ParserConfig(rootCell.getBuckConfig());,if (ParserConfig(rootCell != null ) ParserConfig parserConfig = new ParserConfig(rootCell.getBuckConfig());
ExportFileDescription.java,String name = buildTarget.getBasePathWithSlash() + buildTarget.getShortName();,if (buildTarget != null ) String name = buildTarget.getBasePathWithSlash() + buildTarget.getShortName();
Genrule.java,String basePath = getBuildTarget().getBasePathWithSlash();,if (getBuildTarget() != null ) String basePath = getBuildTarget().getBasePathWithSlash();
Genrule.java,int basePathLength = basePath.length();,if (basePath != null ) int basePathLength = basePath.length();
Genrule.java,canonicalPath = absolutePath.normalize();,if (absolutePath != null ) canonicalPath = absolutePath.normalize();
Genrule.java,localPath = canonicalPath.getFileName().toString();,if (canonicalPath != null ) localPath = canonicalPath.getFileName().toString();
AppendingHasherTest.java,HashCode firstHash = appendingHasher.hash();,if (appendingHasher != null ) HashCode firstHash = appendingHasher.hash();
AppendingHasherTest.java,HashCode secondHash = appendingHasher.hash();,if (appendingHasher != null ) HashCode secondHash = appendingHasher.hash();
AppendingHasherTest.java,HashCode thirdHash = appendingHasher.hash();,if (appendingHasher != null ) HashCode thirdHash = appendingHasher.hash();
CxxPreprocessAndCompileTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
WorkerShellStep.java,Path tmpDir = getWorkerJobParamsToUse(context.getPlatform()).getTempDir();,if (getWorkerJobParamsToUse(context != null ) Path tmpDir = getWorkerJobParamsToUse(context.getPlatform()).getTempDir();
RuleKeyBuilder.java,String key = keyStack.pop();,if (keyStack != null ) String key = keyStack.pop();
RuleKeyBuilder.java,String key = keyStack.pop();,if (keyStack != null ) String key = keyStack.pop();
AndroidBinary.java,ImmutableList<Path> inputAssetLibraries = inputAssetLibrariesBuilder.build();,if (inputAssetLibrariesBuilder != null ) ImmutableList<Path> inputAssetLibraries = inputAssetLibrariesBuilder.build();
AppendingHasher.java,LinkedList<Hasher> hashers = Lists.newLinkedList();,if (Lists != null ) LinkedList<Hasher> hashers = Lists.newLinkedList();
IjModuleFactory.java,JavacOptions defaultJavacOptions = javaBuckConfig.getDefaultJavacOptions();,if (javaBuckConfig != null ) JavacOptions defaultJavacOptions = javaBuckConfig.getDefaultJavacOptions();
ArchiveStepIntegrationTest.java,Tool archiver = platform.getAr();,if (platform != null ) Tool archiver = platform.getAr();
ArchiveStepIntegrationTest.java,Tool archiver = platform.getAr();,if (platform != null ) Tool archiver = platform.getAr();
ArchiveStepIntegrationTest.java,Tool archiver = platform.getAr();,if (platform != null ) Tool archiver = platform.getAr();
ArchiveStepIntegrationTest.java,Tool archiver = platform.getAr();,if (platform != null ) Tool archiver = platform.getAr();
BuildContext.java,List<Path> bootclasspathEntries = androidPlatformTarget.getBootclasspathEntries();,if (androidPlatformTarget != null ) List<Path> bootclasspathEntries = androidPlatformTarget.getBootclasspathEntries();
BuildContextTest.java,ImmutableBuildContext.Builder builder = ImmutableBuildContext.builder();,if (ImmutableBuildContext != null ) ImmutableBuildContext.Builder builder = ImmutableBuildContext.builder();
BuildContextTest.java,BuildContext context = builder.build();,if (builder != null ) BuildContext context = builder.build();
BuildContextTest.java,Supplier<String> androidBootclasspathSupplier = context.getAndroidBootclasspathSupplier();,if (context != null ) Supplier<String> androidBootclasspathSupplier = context.getAndroidBootclasspathSupplier();
BuildContextTest.java,Supplier<String> androidBootclasspathSupplier = context.getAndroidBootclasspathSupplier();,if (context != null ) Supplier<String> androidBootclasspathSupplier = context.getAndroidBootclasspathSupplier();
BuildContextTest.java,ImmutableBuildContext.Builder builder = ImmutableBuildContext.builder();,if (ImmutableBuildContext != null ) ImmutableBuildContext.Builder builder = ImmutableBuildContext.builder();
BuildContextTest.java,BuildContext context = builder.build();,if (builder != null ) BuildContext context = builder.build();
BuildContextTest.java,Supplier<String> androidBootclasspathSupplier = context.getAndroidBootclasspathSupplier();,if (context != null ) Supplier<String> androidBootclasspathSupplier = context.getAndroidBootclasspathSupplier();
Symbols.java,int exitCode = executor.waitForLaunchedProcess(p).getExitCode();,if (executor != null ) int exitCode = executor.waitForLaunchedProcess(p).getExitCode();
AppleSimulatorDiscovery.java,int processExitCode = processExecutor.waitForLaunchedProcess(simctlListProcess).getExitCode();,if (processExecutor != null ) int processExitCode = processExecutor.waitForLaunchedProcess(simctlListProcess).getExitCode();
ProjectBuildFileParser.java,int exitCode = processExecutor.waitForLaunchedProcess(buckPyProcess).getExitCode();,if (processExecutor != null ) int exitCode = processExecutor.waitForLaunchedProcess(buckPyProcess).getExitCode();
GroovycStep.java,exitCode = processExecutor.launchAndExecute(params).getExitCode();,if (processExecutor != null ) exitCode = processExecutor.launchAndExecute(params).getExitCode();
HgCmdLineInterface.java,Optional<String> stderr = result.getStderr();,if (result != null ) Optional<String> stderr = result.getStderr();
AuditRulesCommand.java,ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());,if (ParserConfig(params != null ) ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());
CxxLinkableEnhancer.java,ImmutableList<Arg> allArgs = argsBuilder.build();,if (argsBuilder != null ) ImmutableList<Arg> allArgs = argsBuilder.build();
AbstractBuildRule.java,this.deps = buildRuleParams.getDeps();,if (buildRuleParams != null ) this.deps = buildRuleParams.getDeps();
AbstractBuildRule.java,this.deps = buildRuleParams.getTotalDeps();,if (buildRuleParams != null ) this.deps = buildRuleParams.getTotalDeps();
AppleToolchainDiscovery.java,String identifier = identifierObject.toString();,if (identifierObject != null ) String identifier = identifierObject.toString();
AppleToolchainDiscovery.java,AppleToolchain.Builder toolchainBuilder = AppleToolchain.builder();,if (AppleToolchain != null ) AppleToolchain.Builder toolchainBuilder = AppleToolchain.builder();
AppleToolchainDiscovery.java,AppleToolchain toolchain = toolchainBuilder.build();,if (toolchainBuilder != null ) AppleToolchain toolchain = toolchainBuilder.build();
ProjectGenerator.java,String newHashCode = getHeaderSymlinkTreeHashCode(resolvedContents).toString();,if (getHeaderSymlinkTreeHashCode(resolvedContents) != null ) String newHashCode = getHeaderSymlinkTreeHashCode(resolvedContents).toString();
DistBuildFileHashes.java,boolean pathIsAbsolute = !pathRelativeToProjectRoot.isPresent();,if (!pathRelativeToProjectRoot != null ) boolean pathIsAbsolute = !pathRelativeToProjectRoot.isPresent();
ExternalJavac.java,StringBuilder builder = new StringBuilder(pathToJavac.toString());,if (StringBuilder(pathToJavac != null ) StringBuilder builder = new StringBuilder(pathToJavac.toString());
JavacOptionsFactory.java,BuildRule rule = possibleRule.get();,if (possibleRule != null ) BuildRule rule = possibleRule.get();
JavaBuckConfigTest.java,final Path javac = temporaryFolder.newExecutableFile();,if (temporaryFolder != null ) final Path javac = temporaryFolder.newExecutableFile();
CxxPlatforms.java,nm = new PosixNmSymbolNameTool(configNm.get());,if (PosixNmSymbolNameTool(configNm != null ) nm = new PosixNmSymbolNameTool(configNm.get());
Watchman.java,Optional<String> initialClock = Optional.absent();,if (Optional != null ) Optional<String> initialClock = Optional.absent();
Watchman.java,long clockStartTimeNanos = clock.nanoTime();,if (clock != null ) long clockStartTimeNanos = clock.nanoTime();
GlobalStateManager.java,ReferenceCountedWriter writer = rotateDefaultLogFileWriter(info.getLogFilePath());,if (rotateDefaultLogFileWriter(info != null ) ReferenceCountedWriter writer = rotateDefaultLogFileWriter(info.getLogFilePath());
GlobalStateManager.java,ReferenceCountedWriter newWriter = newReferenceCounterWriter(logFilePath.toString());,if (newReferenceCounterWriter(logFilePath != null ) ReferenceCountedWriter newWriter = newReferenceCounterWriter(logFilePath.toString());
NativeLinkables.java,BuildTarget depTarget = dep.getBuildTarget();,if (dep != null ) BuildTarget depTarget = dep.getBuildTarget();
HashingDeterministicJarWriterTest.java,JarEntry manifestEntry = jar.getNextJarEntry();,if (jar != null ) JarEntry manifestEntry = jar.getNextJarEntry();
MacroFinder.java,MacroMatchResult.Builder result = MacroMatchResult.builder();,if (MacroMatchResult != null ) MacroMatchResult.Builder result = MacroMatchResult.builder();
MacroFinder.java,lastEnd = matcher.end();,if (matcher != null ) lastEnd = matcher.end();
MacroFinder.java,MatchResult matchResult = matcher.toMatchResult();,if (matcher != null ) MatchResult matchResult = matcher.toMatchResult();
MacroFinder.java,MacroMatchResult.Builder result = MacroMatchResult.builder();,if (MacroMatchResult != null ) MacroMatchResult.Builder result = MacroMatchResult.builder();
HaskellLibraryDescription.java,BuildTarget target = baseParams.getBuildTarget();,if (baseParams != null ) BuildTarget target = baseParams.getBuildTarget();
HaskellLibraryDescription.java,BuildTarget buildTarget = params.getBuildTarget();,if (params != null ) BuildTarget buildTarget = params.getBuildTarget();
WorkerShellStepTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
ProjectCommand.java,AppleConfig appleConfig = new AppleConfig(params.getBuckConfig());,if (AppleConfig(params != null ) AppleConfig appleConfig = new AppleConfig(params.getBuckConfig());
ProjectCommand.java,HalideBuckConfig halideBuckConfig = new HalideBuckConfig(params.getBuckConfig());,if (HalideBuckConfig(params != null ) HalideBuckConfig halideBuckConfig = new HalideBuckConfig(params.getBuckConfig());
ProjectCommand.java,CxxBuckConfig cxxBuckConfig = new CxxBuckConfig(params.getBuckConfig());,if (CxxBuckConfig(params != null ) CxxBuckConfig cxxBuckConfig = new CxxBuckConfig(params.getBuckConfig());
AppleCxxPlatformsTest.java,Path tempRoot = temp.getRoot().toPath();,if (temp != null ) Path tempRoot = temp.getRoot().toPath();
AppleCxxPlatformsTest.java,Path tempRoot = temp.getRoot().toPath();,if (temp != null ) Path tempRoot = temp.getRoot().toPath();
AppleBundle.java,this.swiftStdlibTool = appleCxxPlatform.getSwiftStdlibTool();,if (appleCxxPlatform != null ) this.swiftStdlibTool = appleCxxPlatform.getSwiftStdlibTool();
AppleCxxPlatforms.java,ApplePlatform platform = targetSdk.getApplePlatform();,if (targetSdk != null ) ApplePlatform platform = targetSdk.getApplePlatform();
SwiftLibraryDescription.java,final BuildTarget buildTarget = params.getBuildTarget();,if (params != null ) final BuildTarget buildTarget = params.getBuildTarget();
SwiftLibraryDescription.java,Optional<Tool> swiftCompiler = appleCxxPlatform.getSwift();,if (appleCxxPlatform != null ) Optional<Tool> swiftCompiler = appleCxxPlatform.getSwift();
SwiftRuntimeNativeLinkable.java,swiftRuntimePaths = appleCxxPlatform.getSwiftRuntimePaths();,if (appleCxxPlatform != null ) swiftRuntimePaths = appleCxxPlatform.getSwiftRuntimePaths();
RustLinkable.java,Path ruleOutput = buildRule.getPathToOutput();,if (buildRule != null ) Path ruleOutput = buildRule.getPathToOutput();
ProjectGenerator.java,Path link = entry.getKey();,if (entry != null ) Path link = entry.getKey();
ProjectGenerator.java,Path existing = entry.getValue();,if (entry != null ) Path existing = entry.getValue();
VersionControlStatsGenerator.java,"int workingDirectoryChanges = vcCmdLineInterface.changedFiles(""."").size();","if (vcCmdLineInterface != null ) int workingDirectoryChanges = vcCmdLineInterface.changedFiles(""."").size();"
CxxPreprocessAndCompileStep.java,int compileStatus = compile.waitFor();,if (compile != null ) int compileStatus = compile.waitFor();
CxxPreprocessAndCompileStep.java,int preprocessStatus = preprocess.waitFor();,if (preprocess != null ) int preprocessStatus = preprocess.waitFor();
CxxPreprocessAndCompileStep.java,exitCode = process.waitFor();,if (process != null ) exitCode = process.waitFor();
LuaBinaryIntegrationTest.java,int exitCode = process.waitFor();,if (process != null ) int exitCode = process.waitFor();
SymlinkFileStepTest.java,File tmp = tmpDir.getRoot();,if (tmpDir != null ) File tmp = tmpDir.getRoot();
QuickstartCommand.java,AppleConfig appleConfig = new AppleConfig(params.getBuckConfig());,if (AppleConfig(params != null ) AppleConfig appleConfig = new AppleConfig(params.getBuckConfig());
ExopackageInstaller.java,Iterator<String> lineIter = lines.iterator();,if (lines != null ) Iterator<String> lineIter = lines.iterator();
ExopackageInstaller.java,pmPath = lineIter.next();,if (lineIter != null ) pmPath = lineIter.next();
GroovycStep.java,exitCode = processExecutor.execute(p).getExitCode();,if (processExecutor != null ) exitCode = processExecutor.execute(p).getExitCode();
ExternalJavac.java,ProcessBuilder processBuilder = new ProcessBuilder(command.build());,if (ProcessBuilder(command != null ) ProcessBuilder processBuilder = new ProcessBuilder(command.build());
AbstractTestStep.java,ProcessExecutor executor = context.getProcessExecutor();,if (context != null ) ProcessExecutor executor = context.getProcessExecutor();
DistBuildFactory.java,"DistributedBuildState state = DistributedBuildState.load(jobState, params.getCell());","if (params != null ) DistributedBuildState state = DistributedBuildState.load(jobState, params.getCell());"
BuckAutoDepsContributor.java,String newLine = documentEvent.getNewFragment().toString();,if (documentEvent != null ) String newLine = documentEvent.getNewFragment().toString();
BuckAutoDepsContributor.java,String currentClassPath = currentClass.get().getPath();,if (currentClass != null ) String currentClassPath = currentClass.get().getPath();
BuckDeps.java,startOfDeps = startMatcher.end();,if (startMatcher != null ) startOfDeps = startMatcher.end();
BuckDeps.java,startOfVisibility = startMatcher.end();,if (startMatcher != null ) startOfVisibility = startMatcher.end();
MountsCommand.java,Optional<EdenClient> client = EdenClient.newInstance();,if (EdenClient != null ) Optional<EdenClient> client = EdenClient.newInstance();
MountsCommand.java,List<MountInfo> mountInfos = client.get().getMountInfos();,if (client != null ) List<MountInfo> mountInfos = client.get().getMountInfos();
DefaultDefectReporter.java,URI uri = rageConfig.getReportUploadUri().get();,if (rageConfig != null ) URI uri = rageConfig.getReportUploadUri().get();
JarDirectoryStepHelper.java,ByteArrayInputStream rawManifest = new ByteArrayInputStream(output.toByteArray());,if (ByteArrayInputStream(output != null ) ByteArrayInputStream rawManifest = new ByteArrayInputStream(output.toByteArray());
MutableDirectedGraph.java,this.nodes = Sets.newHashSet();,if (Sets != null ) this.nodes = Sets.newHashSet();
MutableDirectedGraph.java,this.outgoingEdges = HashMultimap.create();,if (HashMultimap != null ) this.outgoingEdges = HashMultimap.create();
MutableDirectedGraph.java,this.incomingEdges = HashMultimap.create();,if (HashMultimap != null ) this.incomingEdges = HashMultimap.create();
CxxTestStep.java,ProcessExecutor executor = context.getProcessExecutor();,if (context != null ) ProcessExecutor executor = context.getProcessExecutor();
DTestStep.java,ProcessExecutor executor = context.getProcessExecutor();,if (context != null ) ProcessExecutor executor = context.getProcessExecutor();
GoTestStep.java,ProcessExecutor executor = context.getProcessExecutor();,if (context != null ) ProcessExecutor executor = context.getProcessExecutor();
TestRunning.java,ImmutableSet<JavaLibrary> transitiveDeps = javaTest.getTransitiveClasspathDeps();,if (javaTest != null ) ImmutableSet<JavaLibrary> transitiveDeps = javaTest.getTransitiveClasspathDeps();
CachingBuildEngine.java,amounts = ruleScheduleInfo.getResourceAmounts();,if (ruleScheduleInfo != null ) amounts = ruleScheduleInfo.getResourceAmounts();
RageCommand.java,DefectSubmitResult defectSubmitResult = report.collectAndSubmitResult();,if (report != null ) DefectSubmitResult defectSubmitResult = report.collectAndSubmitResult();
RageCommandIntegrationTest.java,DefectSubmitResult defectSubmitResult = automatedReport.collectAndSubmitResult();,if (automatedReport != null ) DefectSubmitResult defectSubmitResult = automatedReport.collectAndSubmitResult();
PythonTest.java,ObjectMapper mapper = executionContext.getObjectMapper();,if (executionContext != null ) ObjectMapper mapper = executionContext.getObjectMapper();
ShTest.java,ObjectMapper mapper = context.getObjectMapper();,if (context != null ) ObjectMapper mapper = context.getObjectMapper();
MaximumResourceAmounts.java,ResourceAmounts estimated = ResourceAmountsEstimator.getEstimatedAmounts();,if (ResourceAmountsEstimator != null ) ResourceAmounts estimated = ResourceAmountsEstimator.getEstimatedAmounts();
BatchingLogger.java,this.batch = ImmutableList.builder();,if (ImmutableList != null ) this.batch = ImmutableList.builder();
BatchingLogger.java,currentBatchSize += logLine.length();,if (logLine != null ) currentBatchSize += logLine.length();
BatchingLogger.java,ImmutableList<BatchEntry> toSend = batch.build();,if (batch != null ) ImmutableList<BatchEntry> toSend = batch.build();
BatchingLogger.java,batch = ImmutableList.builder();,if (ImmutableList != null ) batch = ImmutableList.builder();
ExportFile.java,BuildTarget target = params.getBuildTarget();,if (params != null ) BuildTarget target = params.getBuildTarget();
ExportFile.java,this.name = args.out.or(target.getShortNameAndFlavorPostfix());,if (args != null ) this.name = args.out.or(target.getShortNameAndFlavorPostfix());
ExportFile.java,this.src = args.src.get();,if (args != null ) this.src = args.src.get();
JavaBinary.java,includePaths = ImmutableSortedSet.copyOf(getTransitiveClasspathEntries().values());,if (ImmutableSortedSet != null ) includePaths = ImmutableSortedSet.copyOf(getTransitiveClasspathEntries().values());
JavaLibraryClasspathProvider.java,classpathEntriesForExportedsDeps = ImmutableSetMultimap.of();,if (ImmutableSetMultimap != null ) classpathEntriesForExportedsDeps = ImmutableSetMultimap.of();
AndroidBinaryGraphEnhancer.java,preDexBuildConfigs = ImmutableList.of();,if (ImmutableList != null ) preDexBuildConfigs = ImmutableList.of();
AndroidBinaryGraphEnhancer.java,buildConfigJarFiles = ImmutableList.of();,if (ImmutableList != null ) buildConfigJarFiles = ImmutableList.of();
AndroidBinaryGraphEnhancer.java,preDexBuildConfigs = preDexBuildConfigsBuilder.build();,if (preDexBuildConfigsBuilder != null ) preDexBuildConfigs = preDexBuildConfigsBuilder.build();
AndroidBinaryGraphEnhancer.java,buildConfigJarFiles = buildConfigJarFilesBuilder.build();,if (buildConfigJarFilesBuilder != null ) buildConfigJarFiles = buildConfigJarFilesBuilder.build();
SwiftDescriptions.java,output.moduleName = Optional.of(buildTarget.getShortName());,if (Optional != null ) output.moduleName = Optional.of(buildTarget.getShortName());
PomIntegrationTest.java,File pomFile = pomPath.toFile();,if (pomPath != null ) File pomFile = pomPath.toFile();
PomIntegrationTest.java,List<Dependency> dependencies = pomModel.getDependencies();,if (pomModel != null ) List<Dependency> dependencies = pomModel.getDependencies();
AdbHelper.java,deviceTypeMatches = (emulatorsOnly.asBoolean() == device.isEmulator());,if (device != null ) deviceTypeMatches = (emulatorsOnly.asBoolean() == device.isEmulator());
TestCommand.java,PrintStream out = console.getStdOut();,if (console != null ) PrintStream out = console.getStdOut();
GoTest.java,ImmutableList<TestCaseSummary> summaries = ImmutableList.of();,if (ImmutableList != null ) ImmutableList<TestCaseSummary> summaries = ImmutableList.of();
PythonTest.java,ObjectMapper mapper = executionContext.getObjectMapper();,if (executionContext != null ) ObjectMapper mapper = executionContext.getObjectMapper();
ShTest.java,ObjectMapper mapper = context.getObjectMapper();,if (context != null ) ObjectMapper mapper = context.getObjectMapper();
ListeningMultiSemaphore.java,Iterator<ListeningSemaphoreArrayPendingItem> iterator = pending.iterator();,if (pending != null ) Iterator<ListeningSemaphoreArrayPendingItem> iterator = pending.iterator();
ListeningMultiSemaphore.java,ListeningSemaphoreArrayPendingItem item = iterator.next();,if (iterator != null ) ListeningSemaphoreArrayPendingItem item = iterator.next();
BuckVersion.java,struct.version = iprot.readString();,if (iprot != null ) struct.version = iprot.readString();
BuckVersion.java,struct.version = iprot.readString();,if (iprot != null ) struct.version = iprot.readString();
ProcessExecutor.java,exitCode = process.exitValue();,if (process != null ) exitCode = process.exitValue();
ListeningSemaphore.java,SettableFuture<Void> future = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<Void> future = SettableFuture.create();
ListeningSemaphore.java,size += entry.getKey();,if (entry != null ) size += entry.getKey();
ListeningSemaphore.java,failed += entry.getKey();,if (entry != null ) failed += entry.getKey();
SwiftLibrary.java,Set<Path> swiftRuntimePaths = ImmutableSet.of();,if (ImmutableSet != null ) Set<Path> swiftRuntimePaths = ImmutableSet.of();
SwiftLibrary.java,swiftRuntimePaths = appleCxxPlatform.getSwiftStaticRuntimePaths();,if (appleCxxPlatform != null ) swiftRuntimePaths = appleCxxPlatform.getSwiftStaticRuntimePaths();
SwiftLibrary.java,swiftRuntimePaths = appleCxxPlatform.getSwiftRuntimePaths();,if (appleCxxPlatform != null ) swiftRuntimePaths = appleCxxPlatform.getSwiftRuntimePaths();
Main.java,ImmutableSet<Path> projectWatches = cellPathResolver.getKnownRoots();,if (cellPathResolver != null ) ImmutableSet<Path> projectWatches = cellPathResolver.getKnownRoots();
Watchman.java,Path absoluteRootPath = path.toAbsolutePath();,if (path != null ) Path absoluteRootPath = path.toAbsolutePath();
Watchman.java,long watchStartTimeNanos = clock.nanoTime();,if (clock != null ) long watchStartTimeNanos = clock.nanoTime();
WatchmanWatcher.java,String watchRoot = projectWatch.getWatchRoot();,if (projectWatch != null ) String watchRoot = projectWatch.getWatchRoot();
CxxPreprocessAndCompileTest.java,ImmutableList<String> actualCompileCommand = buildRule.makeMainStep(scratchDir).getCommand();,if (buildRule != null ) ImmutableList<String> actualCompileCommand = buildRule.makeMainStep(scratchDir).getCommand();
CxxPreprocessAndCompileTest.java,ImmutableList<String> actualPreprocessCommand = buildRule.makeMainStep(scratchDir).getCommand();,if (buildRule != null ) ImmutableList<String> actualPreprocessCommand = buildRule.makeMainStep(scratchDir).getCommand();
CxxSourceRuleFactoryTest.java,ImmutableList<String> command = rule.makeMainStep(scratchDir).getCommand();,if (rule != null ) ImmutableList<String> command = rule.makeMainStep(scratchDir).getCommand();
Main.java,Optional<URI> remoteLogUrl = config.getRemoteLogUrl();,if (config != null ) Optional<URI> remoteLogUrl = config.getRemoteLogUrl();
RemoteLogUploaderEventListener.java,ListenableFuture<Void> drain = remoteLogger.close();,if (remoteLogger != null ) ListenableFuture<Void> drain = remoteLogger.close();
RemoteLogUploaderEventListenerTest.java,private ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) private ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();
RemoteLogUploaderEventListenerTest.java,int i = logCount.incrementAndGet();,if (logCount != null ) int i = logCount.incrementAndGet();
RemoteLogFactoryIntegrationTest.java,private ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) private ObjectMapper objectMapper = ObjectMappers.newDefaultInstance();
RemoteLogFactoryIntegrationTest.java,ImmutableList<JsonNode> events = eventsBuilder.build();,if (eventsBuilder != null ) ImmutableList<JsonNode> events = eventsBuilder.build();
Watchman.java,Path absoluteRootPath = rootPath.toAbsolutePath();,if (rootPath != null ) Path absoluteRootPath = rootPath.toAbsolutePath();
Watchman.java,long watchStartTimeNanos = clock.nanoTime();,if (clock != null ) long watchStartTimeNanos = clock.nanoTime();
WatchmanWatcher.java,projectRoot = projectRoot.resolve(watchPrefix.get());,if (projectRoot != null ) projectRoot = projectRoot.resolve(watchPrefix.get());
DefectReporterTest.java,RageConfig config = RageConfig.builder().build();,if (RageConfig != null ) RageConfig config = RageConfig.builder().build();
DefectReporterTest.java,RageConfig config = RageConfig.builder().build();,if (RageConfig != null ) RageConfig config = RageConfig.builder().build();
InteractiveReportIntegrationTest.java,BuckConfig buckConfig = workspace.asCell().getBuckConfig();,if (workspace != null ) BuckConfig buckConfig = workspace.asCell().getBuckConfig();
InteractiveReportIntegrationTest.java,DefectSubmitResult defectSubmitResult = interactiveReport.collectAndSubmitResult();,if (interactiveReport != null ) DefectSubmitResult defectSubmitResult = interactiveReport.collectAndSubmitResult();
CxxPreprocessAndCompile.java,command = compilerDelegate.getCommand(CxxToolFlags.of());,if (compilerDelegate != null ) command = compilerDelegate.getCommand(CxxToolFlags.of());
ReplCommandIntegrationTest.java,BuckConfig buckConfig = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig buckConfig = FakeBuckConfig.builder().build();
IjModuleGraph.java,Path blockedPath = node.getBuildTarget().getBasePath();,if (node != null ) Path blockedPath = node.getBuildTarget().getBasePath();
ListeningMultiSemaphore.java,this.maximumValues = maximumValuesBuilder.build();,if (maximumValuesBuilder != null ) this.maximumValues = maximumValuesBuilder.build();
ListeningMultiSemaphore.java,Integer currentValue = actualCounters.get(entry.getKey());,if (actualCounters != null ) Integer currentValue = actualCounters.get(entry.getKey());
ListeningMultiSemaphore.java,final Integer maximumValue = maximumValues.get(entry.getKey());,if (maximumValues != null ) final Integer maximumValue = maximumValues.get(entry.getKey());
ListeningMultiSemaphore.java,Integer oldValue = actualCounters.get(entry.getKey());,if (actualCounters != null ) Integer oldValue = actualCounters.get(entry.getKey());
ListeningMultiSemaphore.java,Integer newValue = oldValue + entry.getValue();,if (entry != null ) Integer newValue = oldValue + entry.getValue();
ListeningMultiSemaphore.java,Integer oldValue = actualCounters.get(entry.getKey());,if (actualCounters != null ) Integer oldValue = actualCounters.get(entry.getKey());
ListeningMultiSemaphore.java,Integer newValue = oldValue - entry.getValue();,if (entry != null ) Integer newValue = oldValue - entry.getValue();
ProjectBuildFileParser.java,String buildFileString = buildFile.toString();,if (buildFile != null ) String buildFileString = buildFile.toString();
TargetGraphAndTargets.java,sourceUnderTest = argWithSourceUnderTest.getSourceUnderTest();,if (argWithSourceUnderTest != null ) sourceUnderTest = argWithSourceUnderTest.getSourceUnderTest();
JavaLibraryDescription.java,BuildTarget libraryTarget = javaLibraryParams.getBuildTarget();,if (javaLibraryParams != null ) BuildTarget libraryTarget = javaLibraryParams.getBuildTarget();
BuildCommand.java,BuckConfig rootCellBuckConfig = state.getRootCell().getBuckConfig();,if (state != null ) BuckConfig rootCellBuckConfig = state.getRootCell().getBuckConfig();
BuildCommand.java,"DistributedBuildState state = DistributedBuildState.load(protocol, params.getCell());","if (params != null ) DistributedBuildState state = DistributedBuildState.load(protocol, params.getCell());"
BuildCommand.java,DistBuildConfig config = new DistBuildConfig(params.getBuckConfig());,if (DistBuildConfig(params != null ) DistBuildConfig config = new DistBuildConfig(params.getBuckConfig());
BuildCommand.java,OkHttpClient client = config.createOkHttpClient();,if (config != null ) OkHttpClient client = config.createOkHttpClient();
DistBuildCommand.java,DistBuildConfig config = new DistBuildConfig(params.getBuckConfig());,if (DistBuildConfig(params != null ) DistBuildConfig config = new DistBuildConfig(params.getBuckConfig());
DistBuildCommand.java,OkHttpClient client = config.createOkHttpClient();,if (config != null ) OkHttpClient client = config.createOkHttpClient();
BuildJobStateSerializerTest.java,data = outStream.toByteArray();,if (outStream != null ) data = outStream.toByteArray();
QuickstartCommand.java,Optional<Path> possibleSdkDir = platformTargetSupplier.get().getSdkDirectory();,if (platformTargetSupplier != null ) Optional<Path> possibleSdkDir = platformTargetSupplier.get().getSdkDirectory();
QuickstartCommand.java,String projectDir = getDestDir().trim();,if (getDestDir() != null ) String projectDir = getDestDir().trim();
QuickstartCommand.java,Path origin = resource.get();,if (resource != null ) Path origin = resource.get();
QuickstartCommand.java,String sdkLocation = getAndroidSdkDir(params.getAndroidPlatformTargetSupplier());,if (getAndroidSdkDir(params != null ) String sdkLocation = getAndroidSdkDir(params.getAndroidPlatformTargetSupplier());
QuickstartCommand.java,sdkLocation = sdkLocationFile.getAbsoluteFile().toString();,if (sdkLocationFile != null ) sdkLocation = sdkLocationFile.getAbsoluteFile().toString();
QuickstartCommand.java,AppleConfig appleConfig = new AppleConfig(params.getBuckConfig());,if (AppleConfig(params != null ) AppleConfig appleConfig = new AppleConfig(params.getBuckConfig());
QuickstartCommand.java,String path = br.readLine();,if (br != null ) String path = br.readLine();
AppleBundle.java,Path resourcesDestinationPath = bundleRoot.resolve(this.destinations.getResourcesPath());,if (bundleRoot != null ) Path resourcesDestinationPath = bundleRoot.resolve(this.destinations.getResourcesPath());
SwiftDescriptions.java,BuildTarget parentTarget = parentParams.getBuildTarget();,if (parentParams != null ) BuildTarget parentTarget = parentParams.getBuildTarget();
SwiftDescriptions.java,ImmutableSortedSet<SourcePath> swiftSrcs = swiftSrcsBuilder.build();,if (swiftSrcsBuilder != null ) ImmutableSortedSet<SourcePath> swiftSrcs = swiftSrcsBuilder.build();
SwiftDescriptions.java,Optional<Tool> swiftCompiler = appleCxxPlatform.getSwift();,if (appleCxxPlatform != null ) Optional<Tool> swiftCompiler = appleCxxPlatform.getSwift();
SwiftLibrary.java,Iterable<CxxHeaders> cxxHeaderses = cxxPreprocessorInput.getIncludes();,if (cxxPreprocessorInput != null ) Iterable<CxxHeaders> cxxHeaderses = cxxPreprocessorInput.getIncludes();
SwiftLibrary.java,Optional<SourcePath> headerMap = cxxHeaders.getHeaderMap();,if (cxxHeaders != null ) Optional<SourcePath> headerMap = cxxHeaders.getHeaderMap();
SwiftLibraryDescription.java,BuildTarget buildTarget = params.getBuildTarget();,if (params != null ) BuildTarget buildTarget = params.getBuildTarget();
SwiftLibraryDescription.java,Optional<Tool> swiftCompiler = appleCxxPlatform.getSwift();,if (appleCxxPlatform != null ) Optional<Tool> swiftCompiler = appleCxxPlatform.getSwift();
TestRunning.java,ImmutableSet<BuildRule> sourceUnderTest = javaTest.getSourceUnderTest();,if (javaTest != null ) ImmutableSet<BuildRule> sourceUnderTest = javaTest.getSourceUnderTest();
ThriftOverHttpService.java,TSerializer serializer = new TSerializer(new TSimpleJSONProtocol.Factory());,if (TSimpleJSONProtocol != null ) TSerializer serializer = new TSerializer(new TSimpleJSONProtocol.Factory());
Watchman.java,ImmutableSet<Capability> capabilities = deriveCapabilities(rawVersion.get());,if (deriveCapabilities(rawVersion != null ) ImmutableSet<Capability> capabilities = deriveCapabilities(rawVersion.get());
JavaBuckConfig.java,File file = new File(path.get());,if (File(path != null ) File file = new File(path.get());
OCamlBuildStep.java,ImmutableList<Path> sortedInput = sortDependency(depToolStep.getStdout());,if (sortDependency(depToolStep != null ) ImmutableList<Path> sortedInput = sortDependency(depToolStep.getStdout());
XctoolRunTestsStep.java,stderr = outputReader.getStdErr();,if (outputReader != null ) stderr = outputReader.getStdErr();
TestRunning.java,Path pathToOutput = rule.getPathToOutput();,if (rule != null ) Path pathToOutput = rule.getPathToOutput();
BuildCommand.java,BuckConfig rootCellBuckConfig = state.getRootCell().getBuckConfig();,if (state != null ) BuckConfig rootCellBuckConfig = state.getRootCell().getBuckConfig();
BuildCommand.java,DistBuildConfig config = new DistBuildConfig(params.getBuckConfig());,if (DistBuildConfig(params != null ) DistBuildConfig config = new DistBuildConfig(params.getBuckConfig());
BuildCommand.java,OkHttpClient client = config.createOkHttpClient();,if (config != null ) OkHttpClient client = config.createOkHttpClient();
DistBuildService.java,BuildJob job = response.getCreateBuildResponse().getBuildJob();,if (response != null ) BuildJob job = response.getCreateBuildResponse().getBuildJob();
DistBuildService.java,final BuildId id = job.getBuildId();,if (job != null ) final BuildId id = job.getBuildId();
DistBuildService.java,job = response.getStartBuildResponse().getBuildJob();,if (response != null ) job = response.getStartBuildResponse().getBuildJob();
DistBuildService.java,Stopwatch stopwatch = Stopwatch.createStarted();,if (Stopwatch != null ) Stopwatch stopwatch = Stopwatch.createStarted();
DistBuildService.java,job = response.getBuildStatusResponse().getBuildJob();,if (response != null ) job = response.getBuildStatusResponse().getBuildJob();
DistBuildService.java,Optional<String> lastLine = Optional.absent();,if (Optional != null ) Optional<String> lastLine = Optional.absent();
MountsCommand.java,EdenClient client = EdenClient.newInstance();,if (EdenClient != null ) EdenClient client = EdenClient.newInstance();
MountsCommand.java,List<MountInfo> mountInfos = client.getMountInfos();,if (client != null ) List<MountInfo> mountInfos = client.getMountInfos();
Sha1Command.java,EdenClient client = EdenClient.newInstance();,if (EdenClient != null ) EdenClient client = EdenClient.newInstance();
EdenProjectFilesystemDelegate.java,this.delegate = new DefaultProjectFilesystemDelegate(mount.getProjectRoot());,if (DefaultProjectFilesystemDelegate(mount != null ) this.delegate = new DefaultProjectFilesystemDelegate(mount.getProjectRoot());
ProjectBuildFileParser.java,this.pathToBuckPy = Optional.absent();,if (Optional != null ) this.pathToBuckPy = Optional.absent();
ProjectBuildFileParser.java,Path normalizedBuckDotPyPath = buckDotPy.normalize();,if (buckDotPy != null ) Path normalizedBuckDotPyPath = buckDotPy.normalize();
HaskellLibraryDescription.java,BuildTarget target = baseParams.getBuildTarget();,if (baseParams != null ) BuildTarget target = baseParams.getBuildTarget();
AppleBundle.java,Optional<Path> entitlementsPlist = Optional.absent();,if (Optional != null ) Optional<Path> entitlementsPlist = Optional.absent();
EdenClient.java,String mountPointStr = mountPoint.toString();,if (mountPoint != null ) String mountPointStr = mountPoint.toString();
EdenProjectFilesystemDelegate.java,this.delegate = new DefaultProjectFilesystemDelegate(mount.getMountPoint());,if (DefaultProjectFilesystemDelegate(mount != null ) this.delegate = new DefaultProjectFilesystemDelegate(mount.getMountPoint());
EdenClientTest.java,FileSystem fs = Jimfs.newFileSystem(Configuration.unix());,if (Jimfs != null ) FileSystem fs = Jimfs.newFileSystem(Configuration.unix());
EdenMountTest.java,FileSystem fs = Jimfs.newFileSystem(Configuration.unix());,if (Jimfs != null ) FileSystem fs = Jimfs.newFileSystem(Configuration.unix());
AppleBundle.java,signingEntitlementsTempPath = Optional.absent();,if (Optional != null ) signingEntitlementsTempPath = Optional.absent();
AppleBundle.java,Optional<Path> entitlementsPlist = Optional.absent();,if (Optional != null ) Optional<Path> entitlementsPlist = Optional.absent();
DistBuildService.java,job = response.getStartBuild().getBuildJob();,if (response != null ) job = response.getStartBuild().getBuildJob();
DistBuildService.java,job = response.getBuildStatus().getBuildJob();,if (response != null ) job = response.getBuildStatus().getBuildJob();
AppleBundle.java,Optional<Path> entitlementsPlist = Optional.absent();,if (Optional != null ) Optional<Path> entitlementsPlist = Optional.absent();
DistBuildService.java,BuildJob job = response.getStartBuild().getBuildJob();,if (response != null ) BuildJob job = response.getStartBuild().getBuildJob();
LuaBinaryDescription.java,"Path output = getOutputPath(baseParams.getBuildTarget(), baseParams.getProjectFilesystem());","if (baseParams != null ) Path output = getOutputPath(baseParams.getBuildTarget(), baseParams.getProjectFilesystem());"
LuaBinaryDescription.java,LuaPackageComponents components = builder.build();,if (builder != null ) LuaPackageComponents components = builder.build();
LuaBinaryDescription.java,Optional<Path> relativeModulesDir = Optional.absent();,if (Optional != null ) Optional<Path> relativeModulesDir = Optional.absent();
LuaBinaryDescription.java,Optional<Path> relativePythonModulesDir = Optional.absent();,if (Optional != null ) Optional<Path> relativePythonModulesDir = Optional.absent();
LuaBinaryDescription.java,Optional<Path> relativeNativeLibsDir = Optional.absent();,if (Optional != null ) Optional<Path> relativeNativeLibsDir = Optional.absent();
Omnibus.java,"BuildTarget rootTarget = getRootTarget(params.getBuildTarget(), root.getBuildTarget());","if (root != null ) BuildTarget rootTarget = getRootTarget(params.getBuildTarget(), root.getBuildTarget());"
BserSerializer.java,int listLen = list.size();,if (list != null ) int listLen = list.size();
SwiftLibrary.java,SwiftCompile rule = requireSwiftCompileRule(cxxPlatform.getFlavor());,if (requireSwiftCompileRule(cxxPlatform != null ) SwiftCompile rule = requireSwiftCompileRule(cxxPlatform.getFlavor());
AppleBinaryDescription.java,CxxBinaryDescription.Arg delegateArg = delegate.createUnpopulatedConstructorArg();,if (delegate != null ) CxxBinaryDescription.Arg delegateArg = delegate.createUnpopulatedConstructorArg();
OfflineScribeLogger.java,File logFile = logPath.toFile();,if (logPath != null ) File logFile = logPath.toFile();
WorkspaceAndProjectGenerator.java,List<GenerationResult> generationResults = Futures.allAsList(projectGeneratorFutures).get();,if (Futures != null ) List<GenerationResult> generationResults = Futures.allAsList(projectGeneratorFutures).get();
CacheRateStatsKeeper.java,CacheResult cacheResult = finished.getCacheResult();,if (finished != null ) CacheResult cacheResult = finished.getCacheResult();
TwoLevelArtifactCacheDecorator.java,Path scratchDir = projectFilesystem.getBuckPaths().getScratchDir();,if (projectFilesystem != null ) Path scratchDir = projectFilesystem.getBuckPaths().getScratchDir();
TempDirectoryCreatorTest.java,Optional<Path> noPath = Optional.absent();,if (Optional != null ) Optional<Path> noPath = Optional.absent();
TempDirectoryCreatorTest.java,FileSystem vfs = Jimfs.newFileSystem(Configuration.unix());,if (Jimfs != null ) FileSystem vfs = Jimfs.newFileSystem(Configuration.unix());
Parser.java,Set<BuildTarget> deps = Sets.newHashSet();,if (Sets != null ) Set<BuildTarget> deps = Sets.newHashSet();
AppleSdkDiscovery.java,String toolchainId = toolchainIdObject.toString();,if (toolchainIdObject != null ) String toolchainId = toolchainIdObject.toString();
EstimateLinearAllocStepTest.java,ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
ClasspathTraversalTest.java,contents = new FileLikeCharSource(fileLike).read();,if (FileLikeCharSource(fileLike) != null ) contents = new FileLikeCharSource(fileLike).read();
DaemonicParserState.java,DaemonicCellState state = cellPathToDaemonicState.get(cell.getRoot());,if (cellPathToDaemonicState != null ) DaemonicCellState state = cellPathToDaemonicState.get(cell.getRoot());
DaemonicParserState.java,DaemonicCellState state = cellPathToDaemonicState.get(cell.getRoot());,if (cellPathToDaemonicState != null ) DaemonicCellState state = cellPathToDaemonicState.get(cell.getRoot());
DaemonicParserState.java,configs = builder.build();,if (builder != null ) configs = builder.build();
DaemonicParserState.java,BuckConfig buckConfig = cell.getBuckConfig();,if (cell != null ) BuckConfig buckConfig = cell.getBuckConfig();
DaemonicParserState.java,Iterable<String> defaultIncludes = new ParserConfig(buckConfig).getDefaultIncludes();,if (ParserConfig(buckConfig) != null ) Iterable<String> defaultIncludes = new ParserConfig(buckConfig).getDefaultIncludes();
ParsePipeline.java,ListenableFuture<V> targetNodeJob = jobSupplier.get();,if (jobSupplier != null ) ListenableFuture<V> targetNodeJob = jobSupplier.get();
ParsePipeline.java,Path pathToCheck = buildTarget.getBasePath();,if (buildTarget != null ) Path pathToCheck = buildTarget.getBasePath();
ParsePipeline.java,Path depCellPath = depTarget.getCellPath();,if (depTarget != null ) Path depCellPath = depTarget.getCellPath();
JarDirectoryStepHelper.java,String entryName = entry.getName();,if (entry != null ) String entryName = entry.getName();
SuperConsoleEventBusListener.java,CacheResult cacheResult = finished.getCacheResult();,if (finished != null ) CacheResult cacheResult = finished.getCacheResult();
SuperConsoleEventBusListenerTest.java,lines = ImmutableList.builder();,if (ImmutableList != null ) lines = ImmutableList.builder();
SuperConsoleEventBusListenerTest.java,lines = ImmutableList.builder();,if (ImmutableList != null ) lines = ImmutableList.builder();
SuperConsoleEventBusListenerTest.java,lines = ImmutableList.builder();,if (ImmutableList != null ) lines = ImmutableList.builder();
SuperConsoleEventBusListenerTest.java,lines = ImmutableList.builder();,if (ImmutableList != null ) lines = ImmutableList.builder();
CxxDescriptionEnhancer.java,Optional<Path> headerMapLocation = Optional.absent();,if (Optional != null ) Optional<Path> headerMapLocation = Optional.absent();
AndroidBinaryIntegrationTest.java,Optional<Path> ndkPath = androidResolver.getNdkOrAbsent();,if (androidResolver != null ) Optional<Path> ndkPath = androidResolver.getNdkOrAbsent();
AndroidBinaryIntegrationTest.java,NdkCxxPlatform platform = platforms.iterator().next();,if (platforms != null ) NdkCxxPlatform platform = platforms.iterator().next();
DefaultIjLibraryFactory.java,AndroidPrebuiltAarDescription.Arg arg = targetNode.getConstructorArg();,if (targetNode != null ) AndroidPrebuiltAarDescription.Arg arg = targetNode.getConstructorArg();
AndroidAarIntegrationTest.java,filesystem = new ProjectFilesystem(tmp.getRootPath());,if (ProjectFilesystem(tmp != null ) filesystem = new ProjectFilesystem(tmp.getRootPath());
AppleBundleIntegrationTest.java,filesystem = new ProjectFilesystem(tmp.getRootPath());,if (ProjectFilesystem(tmp != null ) filesystem = new ProjectFilesystem(tmp.getRootPath());
AppleTestIntegrationTest.java,filesystem = new ProjectFilesystem(tmp.getRootPath());,if (ProjectFilesystem(tmp != null ) filesystem = new ProjectFilesystem(tmp.getRootPath());
AppleTestIntegrationTest.java,Path projectRoot = tmp.getRootPath().toRealPath();,if (tmp != null ) Path projectRoot = tmp.getRootPath().toRealPath();
BuiltinApplePackageIntegrationTest.java,filesystem = new ProjectFilesystem(tmp.getRootPath());,if (ProjectFilesystem(tmp != null ) filesystem = new ProjectFilesystem(tmp.getRootPath());
ProvisioningProfileCopyStepTest.java,tempOutputDir = tmp.getRootPath();,if (tmp != null ) tempOutputDir = tmp.getRootPath();
ProjectIntegrationTest.java,String workspacePathString = temporaryFolder.getRootPath().toString();,if (temporaryFolder != null ) String workspacePathString = temporaryFolder.getRootPath().toString();
BuckConfigTestUtils.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRootPath());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRootPath());
PathArgumentsTest.java,Path projectRoot = tmp.getRootPath();,if (tmp != null ) Path projectRoot = tmp.getRootPath();
CxxBinaryIntegrationTest.java,final Path rootWorkspacePath = tmp.getRootPath();,if (tmp != null ) final Path rootWorkspacePath = tmp.getRootPath();
CxxCompilationDatabaseIntegrationTest.java,Path rootPath = tmp.getRootPath();,if (tmp != null ) Path rootPath = tmp.getRootPath();
CxxCompilationDatabaseIntegrationTest.java,Path rootPath = tmp.getRootPath();,if (tmp != null ) Path rootPath = tmp.getRootPath();
CxxCompilationDatabaseIntegrationTest.java,Path rootPath = tmp.getRootPath();,if (tmp != null ) Path rootPath = tmp.getRootPath();
CxxCompilationDatabaseIntegrationTest.java,Path rootPath = tmp.getRootPath();,if (tmp != null ) Path rootPath = tmp.getRootPath();
DBinaryIntegrationTest.java,filesystem = new ProjectFilesystem(tmp.getRootPath());,if (ProjectFilesystem(tmp != null ) filesystem = new ProjectFilesystem(tmp.getRootPath());
MorePathsTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRootPath());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRootPath());
MorePathsTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRootPath());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRootPath());
MorePathsTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRootPath());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRootPath());
GroovyBuckConfigTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRootPath());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRootPath());
CleanClasspathIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRootPath());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRootPath());
DefaultJavaLibraryIntegrationTest.java,filesystem = new ProjectFilesystem(tmp.getRootPath());,if (ProjectFilesystem(tmp != null ) filesystem = new ProjectFilesystem(tmp.getRootPath());
JavaBuckConfigTest.java,defaultFilesystem = new ProjectFilesystem(temporaryFolder.getRootPath());,if (ProjectFilesystem(temporaryFolder != null ) defaultFilesystem = new ProjectFilesystem(temporaryFolder.getRootPath());
JavaSymbolFinderIntegrationTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRootPath());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRootPath());
JavaTestGetClassNamesIntegrationTest.java,projectFilesystem = new ProjectFilesystem(temporaryFolder.getRootPath());,if (ProjectFilesystem(temporaryFolder != null ) projectFilesystem = new ProjectFilesystem(temporaryFolder.getRootPath());
MissingSymbolsHandlerIntegrationTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRootPath());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRootPath());
SrcRootsFinderIntegrationTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRootPath());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRootPath());
SrcRootsFinderIntegrationTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRootPath());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRootPath());
JavaLibrarySymbolsFinderTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRootPath());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRootPath());
JavaLibrarySymbolsFinderTest.java,final ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRootPath());,if (ProjectFilesystem(tmp != null ) final ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRootPath());
JavaSymbolsRuleTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRootPath());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRootPath());
PrebuiltJarSymbolsFinderTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRootPath());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRootPath());
LuaBinaryIntegrationTest.java,Config rawConfig = Configs.createDefaultConfig(tmp.getRootPath());,if (Configs != null ) Config rawConfig = Configs.createDefaultConfig(tmp.getRootPath());
OCamlIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRootPath());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRootPath());
ParserBenchmark.java,Path root = tempDir.getRootPath();,if (tempDir != null ) Path root = tempDir.getRootPath();
PythonBinaryIntegrationTest.java,Config rawConfig = Configs.createDefaultConfig(tmp.getRootPath());,if (Configs != null ) Config rawConfig = Configs.createDefaultConfig(tmp.getRootPath());
DefectReporterTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRootPath());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRootPath());
DefectReporterTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRootPath());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRootPath());
RageCommandIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRootPath());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRootPath());
RageCommandIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRootPath());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRootPath());
RageCommandIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRootPath());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRootPath());
StackedFileHashCacheTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRootPath());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRootPath());
WatchedFileHashCacheTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRootPath());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRootPath());
DefaultCellPathResolver.java,Path cellRoot = entry.getValue();,if (entry != null ) Path cellRoot = entry.getValue();
NdkCxxPlatformTest.java,Path root = tmp.newFolder(dir).toPath();,if (tmp != null ) Path root = tmp.newFolder(dir).toPath();
NdkCxxPlatformTest.java,FakeProjectFilesystem filesystem = new FakeProjectFilesystem(root.toFile());,if (FakeProjectFilesystem(root != null ) FakeProjectFilesystem filesystem = new FakeProjectFilesystem(root.toFile());
ProvisioningProfileCopyStepTest.java,projectFilesystem = new FakeProjectFilesystem(testdataDir.toFile());,if (FakeProjectFilesystem(testdataDir != null ) projectFilesystem = new FakeProjectFilesystem(testdataDir.toFile());
HeaderSymlinkTreeWithHeaderMapTest.java,Path aFile = tmpDir.newFile().toPath();,if (tmpDir != null ) Path aFile = tmpDir.newFile().toPath();
MoreFilesIntegrationTest.java,Path root = tmp.newFolder().toPath();,if (tmp != null ) Path root = tmp.newFolder().toPath();
MorePathsTest.java,File root = tmp.getRoot();,if (tmp != null ) File root = tmp.getRoot();
Jsr199JavacIntegrationTest.java,File srcsListFile = pathToSrcsList.toFile();,if (pathToSrcsList != null ) File srcsListFile = pathToSrcsList.toFile();
Jsr199JavacIntegrationTest.java,File srcsListFile = pathToSrcsList.toFile();,if (pathToSrcsList != null ) File srcsListFile = pathToSrcsList.toFile();
ResolverIntegrationTest.java,buckRepoRoot = temp.newFolder().toPath();,if (temp != null ) buckRepoRoot = temp.newFolder().toPath();
ResolverIntegrationTest.java,localRepo = temp.newFolder().toPath();,if (temp != null ) localRepo = temp.newFolder().toPath();
KnownBuildRuleTypesTest.java,javac = temporaryFolder.newFile();,if (temporaryFolder != null ) javac = temporaryFolder.newFile();
KnownBuildRuleTypesTest.java,Path javacPath = javac.toPath();,if (javac != null ) Path javacPath = javac.toPath();
KnownBuildRuleTypesTest.java,final File javac = temporaryFolder.newFile();,if (temporaryFolder != null ) final File javac = temporaryFolder.newFile();
KnownBuildRuleTypesTest.java,File javac = temporaryFolder.newFile();,if (temporaryFolder != null ) File javac = temporaryFolder.newFile();
SymlinkTreeTest.java,Path aFile = tmpDir.newFile().toPath();,if (tmpDir != null ) Path aFile = tmpDir.newFile().toPath();
ExportFileTest.java,FakeProjectFilesystem filesystem = new FakeProjectFilesystem(root.toFile());,if (FakeProjectFilesystem(root != null ) FakeProjectFilesystem filesystem = new FakeProjectFilesystem(root.toFile());
IjProjectTemplateDataPreparer.java,manifestPath = androidManifestPath.get();,if (androidManifestPath != null ) manifestPath = androidManifestPath.get();
AbstractErrorLogRecord.java,String commandId = MAPPER.threadIdToCommandId(getRecord().getThreadID());,if (MAPPER != null ) String commandId = MAPPER.threadIdToCommandId(getRecord().getThreadID());
DefaultJavaLibrary.java,Optional<SourcePath> depAbiJar = depWithJavaAbi.getAbiJar();,if (depWithJavaAbi != null ) Optional<SourcePath> depAbiJar = depWithJavaAbi.getAbiJar();
DefaultJavaLibrary.java,Path jarAbsolutePath = absolutifier.apply(dep.getPathToOutput());,if (absolutifier != null ) Path jarAbsolutePath = absolutifier.apply(dep.getPathToOutput());
DefaultJavaLibrary.java,Path jarAbsolutePath = jarUsedClassesEntry.getKey();,if (jarUsedClassesEntry != null ) Path jarAbsolutePath = jarUsedClassesEntry.getKey();
DefaultJavaLibrary.java,Collection<Path> classAbsolutePaths = jarUsedClassesEntry.getValue();,if (jarUsedClassesEntry != null ) Collection<Path> classAbsolutePaths = jarUsedClassesEntry.getValue();
ProjectGenerator.java,BuildTarget buildTarget = input.getBuildTarget();,if (input != null ) BuildTarget buildTarget = input.getBuildTarget();
HalideCompile.java,String shortName = getBuildTarget().getShortName();,if (getBuildTarget() != null ) String shortName = getBuildTarget().getShortName();
HalideLibraryDescriptionTest.java,"Path headerPath = HalideCompile.headerOutputPath(flavoredLibTarget, lib.getProjectFilesystem());","if (lib != null ) Path headerPath = HalideCompile.headerOutputPath(flavoredLibTarget, lib.getProjectFilesystem());"
DefaultAndroidDirectoryResolver.java,Optional<Path> sdkPath = Optional.absent();,if (Optional != null ) Optional<Path> sdkPath = Optional.absent();
DefaultPropertyFinder.java,localProperties = Optional.absent();,if (Optional != null ) localProperties = Optional.absent();
ProjectWorkspace.java,Path destLocalProperties = destPath.resolve(localProperties.getFileName());,if (destPath != null ) Path destLocalProperties = destPath.resolve(localProperties.getFileName());
PropertyFinderTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
PropertyFinderTest.java,Optional<Properties> properties = Optional.absent();,if (Optional != null ) Optional<Properties> properties = Optional.absent();
PropertyFinderTest.java,HostFilesystem hostFilesystem = FakeHostFilesystem.empty();,if (FakeHostFilesystem != null ) HostFilesystem hostFilesystem = FakeHostFilesystem.empty();
PropertyFinderTest.java,HostFilesystem hostFilesystem = FakeHostFilesystem.empty();,if (FakeHostFilesystem != null ) HostFilesystem hostFilesystem = FakeHostFilesystem.empty();
PropertyFinderTest.java,Optional<Properties> properties = Optional.absent();,if (Optional != null ) Optional<Properties> properties = Optional.absent();
PropertyFinderTest.java,Optional<Properties> properties = Optional.absent();,if (Optional != null ) Optional<Properties> properties = Optional.absent();
PropertyFinderTest.java,HostFilesystem hostFilesystem = FakeHostFilesystem.empty();,if (FakeHostFilesystem != null ) HostFilesystem hostFilesystem = FakeHostFilesystem.empty();
PropertyFinderTest.java,Optional<Properties> properties = Optional.absent();,if (Optional != null ) Optional<Properties> properties = Optional.absent();
PropertyFinderTest.java,HostFilesystem hostFilesystem = FakeHostFilesystem.empty();,if (FakeHostFilesystem != null ) HostFilesystem hostFilesystem = FakeHostFilesystem.empty();
AnalyseRuleKeysRequest.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
AnalyseRuleKeysResponse.java,schemeField = iprot.readFieldBegin();,if (iprot != null ) schemeField = iprot.readFieldBegin();
OfflineScribeLoggerTest.java,OfflineScribeLogger.ScribeData data = it.next();,if (it != null ) OfflineScribeLogger.ScribeData data = it.next();
AbstractErrorLogRecord.java,String logger = record.getLoggerName();,if (record != null ) String logger = record.getLoggerName();
AbstractErrorLogRecord.java,Throwable throwable = record.getThrown();,if (record != null ) Throwable throwable = record.getThrown();
AbstractErrorLogRecord.java,logger = record.getLoggerName();,if (record != null ) logger = record.getLoggerName();
AbstractErrorLogRecord.java,Throwable throwable = record.getThrown();,if (record != null ) Throwable throwable = record.getThrown();
ErrorLogRecord.java,String logger = getRecord().getLoggerName();,if (getRecord() != null ) String logger = getRecord().getLoggerName();
ErrorLogRecord.java,logger = getRecord().getLoggerName();,if (getRecord() != null ) logger = getRecord().getLoggerName();
ErrorLogRecord.java,Throwable throwable = getRecord().getThrown();,if (getRecord() != null ) Throwable throwable = getRecord().getThrown();
ErrorLogRecord.java,Throwable throwable = getRecord().getThrown();,if (getRecord() != null ) Throwable throwable = getRecord().getThrown();
ErrorLogRecord.java,Throwable throwable = getRecord().getThrown();,if (getRecord() != null ) Throwable throwable = getRecord().getThrown();
ErrorLogRecord.java,Throwable throwable = getRecord().getThrown();,if (getRecord() != null ) Throwable throwable = getRecord().getThrown();
ErrorLogRecord.java,Throwable throwable = getRecord().getThrown();,if (getRecord() != null ) Throwable throwable = getRecord().getThrown();
DistributedBuildFileHashes.java,entryKey = pathRelativeToProjectRoot.get();,if (pathRelativeToProjectRoot != null ) entryKey = pathRelativeToProjectRoot.get();
AbstractErrorLogRecord.java,String logger = record.getLoggerName();,if (record != null ) String logger = record.getLoggerName();
AbstractErrorLogRecord.java,Throwable throwable = record.getThrown();,if (record != null ) Throwable throwable = record.getThrown();
AbstractErrorLogRecord.java,logger = record.getLoggerName();,if (record != null ) logger = record.getLoggerName();
AbstractErrorLogRecord.java,Throwable throwable = record.getThrown();,if (record != null ) Throwable throwable = record.getThrown();
CxxLibraryDescription.java,CxxSymlinkTreeHeaders.Builder headers = CxxSymlinkTreeHeaders.builder();,if (CxxSymlinkTreeHeaders != null ) CxxSymlinkTreeHeaders.Builder headers = CxxSymlinkTreeHeaders.builder();
PythonUtil.java,CxxPythonExtension extension = includedExtensions.get(root.getKey());,if (includedExtensions != null ) CxxPythonExtension extension = includedExtensions.get(root.getKey());
LuaBinaryDescription.java,"Path output = getOutputPath(params.getBuildTarget(), params.getProjectFilesystem());","if (params != null ) Path output = getOutputPath(params.getBuildTarget(), params.getProjectFilesystem());"
LuaBinaryDescription.java,Optional<Path> relativePythonModulesLinkTreeRoot = Optional.absent();,if (Optional != null ) Optional<Path> relativePythonModulesLinkTreeRoot = Optional.absent();
LuaBinaryDescription.java,Optional<Path> relativeNativeLibsLinkTreeRoot = Optional.absent();,if (Optional != null ) Optional<Path> relativeNativeLibsLinkTreeRoot = Optional.absent();
LuaBinaryDescription.java,Optional<SourcePath> nativeStarter = Optional.absent();,if (Optional != null ) Optional<SourcePath> nativeStarter = Optional.absent();
HttpArtifactCacheEvent.java,requestDurationMillis = timestamp - startedEvent.getTimestamp();,if (startedEvent != null ) requestDurationMillis = timestamp - startedEvent.getTimestamp();
DirArtifactCache.java,long maxSizeBytes = maxCacheSizeBytes.get();,if (maxCacheSizeBytes != null ) long maxSizeBytes = maxCacheSizeBytes.get();
DirArtifactCache.java,Optional<Integer> maxTrimMark = Optional.absent();,if (Optional != null ) Optional<Integer> maxTrimMark = Optional.absent();
DirArtifactCache.java,currentSizeBytes += file.length();,if (file != null ) currentSizeBytes += file.length();
DirArtifactCacheTest.java,ImmutableList<File> cachedFiles = ImmutableList.copyOf(dirArtifactCache.getAllFilesInCache());,if (ImmutableList != null ) ImmutableList<File> cachedFiles = ImmutableList.copyOf(dirArtifactCache.getAllFilesInCache());
DirArtifactCacheTest.java,File[] filesInCache = dirArtifactCache.getAllFilesInCache();,if (dirArtifactCache != null ) File[] filesInCache = dirArtifactCache.getAllFilesInCache();
BuildSimulator.java,SimulateReport.Builder simulateReport = SimulateReport.builder();,if (SimulateReport != null ) SimulateReport.Builder simulateReport = SimulateReport.builder();
BuildSimulator.java,Queue<BuildTarget> leafNodes = Queues.newArrayDeque();,if (Queues != null ) Queue<BuildTarget> leafNodes = Queues.newArrayDeque();
BuildSimulator.java,BuildTarget target = buildableNodes.remove();,if (buildableNodes != null ) BuildTarget target = buildableNodes.remove();
BuildSimulator.java,currentMillis = threadPool.getNextFinishingTargetMillis();,if (threadPool != null ) currentMillis = threadPool.getNextFinishingTargetMillis();
BuildSimulator.java,BuildTarget target = rule.getBuildTarget();,if (rule != null ) BuildTarget target = rule.getBuildTarget();
BuildSimulator.java,List<BuildRule> deps = Lists.newArrayList();,if (Lists != null ) List<BuildRule> deps = Lists.newArrayList();
BuildSimulator.java,totalDagEdges = rule.getDeps().size();,if (rule != null ) totalDagEdges = rule.getDeps().size();
BuildSimulator.java,this.dependantNodes = Lists.newArrayList();,if (Lists != null ) this.dependantNodes = Lists.newArrayList();
BuildSimulator.java,List<SimulationNode> finishedNodes = Lists.newArrayList();,if (Lists != null ) List<SimulationNode> finishedNodes = Lists.newArrayList();
SimulateTimes.java,LinkedHashSet<String> timeAggregates = Sets.newLinkedHashSet();,if (Sets != null ) LinkedHashSet<String> timeAggregates = Sets.newLinkedHashSet();
SimulateTimes.java,buildTargetTimes = Maps.newHashMap();,if (Maps != null ) buildTargetTimes = Maps.newHashMap();
BuildSimulatorTest.java,SimulateTimes times = SimulateTimesTest.createDefaultTestInstance();,if (SimulateTimesTest != null ) SimulateTimes times = SimulateTimesTest.createDefaultTestInstance();
ActionGraphCacheTest.java,ImmutableList<Counter> counters = cache.getCounters();,if (cache != null ) ImmutableList<Counter> counters = cache.getCounters();
ActionGraphCacheTest.java,counters = cache.getCounters();,if (cache != null ) counters = cache.getCounters();
ActionGraphCacheTest.java,ImmutableList<Counter> counters = cache.getCounters();,if (cache != null ) ImmutableList<Counter> counters = cache.getCounters();
ActionGraphCacheTest.java,counters = cache.getCounters();,if (cache != null ) counters = cache.getCounters();
ActionGraphCacheTest.java,counters = cache.getCounters();,if (cache != null ) counters = cache.getCounters();
ActionGraphCacheTest.java,ImmutableList<Counter> counters = cache.getCounters();,if (cache != null ) ImmutableList<Counter> counters = cache.getCounters();
OverwritingZipOutputStream.java,currentOffset += entry.getSize();,if (entry != null ) currentOffset += entry.getSize();
EntryAccounting.java,int requiredExtractVersion = method.getRequiredExtractVersion();,if (method != null ) int requiredExtractVersion = method.getRequiredExtractVersion();
SmartDexingStep.java,ImmutableList<Path> secondaryDexJars = secondaryDexJarsBuilder.build();,if (secondaryDexJarsBuilder != null ) ImmutableList<Path> secondaryDexJars = secondaryDexJarsBuilder.build();
DalvikAwareZipSplitter.java,String relativePath = entry.getRelativePath();,if (entry != null ) String relativePath = entry.getRelativePath();
AndroidBinaryGraphEnhancer.java,ImmutableSet<DexProducedFromJavaLibrary> preDexedLibraries = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<DexProducedFromJavaLibrary> preDexedLibraries = ImmutableSet.of();
PreDexedFilesSorter.java,List<DexWithClasses> primaryDexContents = Lists.newArrayList();,if (Lists != null ) List<DexWithClasses> primaryDexContents = Lists.newArrayList();
PreDexedFilesSorter.java,primaryDexSize += rDotJavaDex.get().getSizeEstimate();,if (rDotJavaDex != null ) primaryDexSize += rDotJavaDex.get().getSizeEstimate();
PreDexedFilesSorter.java,primaryDexSize += dexWithClasses.getSizeEstimate();,if (dexWithClasses != null ) primaryDexSize += dexWithClasses.getSizeEstimate();
PreDexedFilesSorter.java,currentSecondaryDexSize = canary.getSizeEstimate();,if (canary != null ) currentSecondaryDexSize = canary.getSizeEstimate();
PreDexedFilesSorter.java,currentSecondaryDexSize += dexWithClasses.getSizeEstimate();,if (dexWithClasses != null ) currentSecondaryDexSize += dexWithClasses.getSizeEstimate();
PreDexedFilesSorter.java,final String relativePathToClassFile = fileLike.getRelativePath();,if (fileLike != null ) final String relativePathToClassFile = fileLike.getRelativePath();
BuildJobStateFileHashes.java,struct.fileSystemRootName = iprot.readString();,if (iprot != null ) struct.fileSystemRootName = iprot.readString();
BuildJobStateFileHashes.java,struct.fileSystemRootName = iprot.readString();,if (iprot != null ) struct.fileSystemRootName = iprot.readString();
DistributedBuildState.java,i = index.size();,if (index != null ) i = index.size();
DistributedBuildFileHashesTest.java,String name = hashes.getFileSystemRootName();,if (hashes != null ) String name = hashes.getFileSystemRootName();
Cell.java,Path cellPath = entry.getValue();,if (entry != null ) Path cellPath = entry.getValue();
Cell.java,builder = RawConfig.builder();,if (RawConfig != null ) builder = RawConfig.builder();
Cell.java,ImmutableSet<Path> allPossibleRoots = transitiveCellPathMapping.keySet();,if (transitiveCellPathMapping != null ) ImmutableSet<Path> allPossibleRoots = transitiveCellPathMapping.keySet();
Cell.java,Path cellPath = entry.getKey();,if (entry != null ) Path cellPath = entry.getKey();
BuildCommand.java,BuckConfig buckConfig = params.getBuckConfig();,if (params != null ) BuckConfig buckConfig = params.getBuckConfig();
DistributedBuildState.java,BuildJobStateBuckConfig remoteBuckConfig = remoteState.getBuckConfig();,if (remoteState != null ) BuildJobStateBuckConfig remoteBuckConfig = remoteState.getBuckConfig();
DistributedBuildTargetGraphCodec.java,i = index.size();,if (index != null ) i = index.size();
DistributedBuildStateTest.java,ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();,if (FakeProjectFilesystem != null ) ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();
DistributedBuildStateTest.java,ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();,if (FakeProjectFilesystem != null ) ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();
DistributedBuildStateTest.java,ProjectFilesystem projectFilesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();,if (FakeProjectFilesystem != null ) ProjectFilesystem projectFilesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();
Cell.java,cellPath = cellPath.toRealPath().normalize();,if (cellPath != null ) cellPath = cellPath.toRealPath().normalize();
Cell.java,Config config = constructionData.getConfig();,if (constructionData != null ) Config config = constructionData.getConfig();
Cell.java,BuckConfig parentConfig = parent.getBuckConfig();,if (parent != null ) BuckConfig parentConfig = parent.getBuckConfig();
Cell.java,final Path cellPath = target.getCellPath();,if (target != null ) final Path cellPath = target.getCellPath();
ObjectPathsAbsolutifier.java,path = path.toRealPath();,if (path != null ) path = path.toRealPath();
ZipOutputStreamTest.java,byte[] expected = Files.readAllBytes(reference.toPath());,if (Files != null ) byte[] expected = Files.readAllBytes(reference.toPath());
ZipOutputStreamTest.java,byte[] expected = Files.readAllBytes(reference.toPath());,if (Files != null ) byte[] expected = Files.readAllBytes(reference.toPath());
ZipOutputStreamTest.java,byte[] expected = Files.readAllBytes(reference.toPath());,if (Files != null ) byte[] expected = Files.readAllBytes(reference.toPath());
ZipOutputStreamTest.java,"byte[] bytes = ""cheese"".getBytes();","if (""cheese"" != null ) byte[] bytes = ""cheese"".getBytes();"
ZipOutputStreamTest.java,byte[] expected = Files.readAllBytes(reference.toPath());,if (Files != null ) byte[] expected = Files.readAllBytes(reference.toPath());
ZipOutputStreamTest.java,"byte[] bytes = ""cheese"".getBytes();","if (""cheese"" != null ) byte[] bytes = ""cheese"".getBytes();"
ZipOutputStreamTest.java,byte[] expected = Files.readAllBytes(reference.toPath());,if (Files != null ) byte[] expected = Files.readAllBytes(reference.toPath());
ZipOutputStreamTest.java,List<String> names = Lists.newArrayList();,if (Lists != null ) List<String> names = Lists.newArrayList();
ZipOutputStreamTest.java,List<String> names = Lists.newArrayList();,if (Lists != null ) List<String> names = Lists.newArrayList();
ZipOutputStreamTest.java,Calendar cal = Calendar.getInstance();,if (Calendar != null ) Calendar cal = Calendar.getInstance();
ZipOutputStreamTest.java,long old = getTimeRoundedToSeconds(cal.getTime());,if (getTimeRoundedToSeconds(cal != null ) long old = getTimeRoundedToSeconds(cal.getTime());
ZipOutputStreamTest.java,ZipEntry entry = in.getNextEntry();,if (in != null ) ZipEntry entry = in.getNextEntry();
ZipOutputStreamTest.java,entry = in.getNextEntry();,if (in != null ) entry = in.getNextEntry();
ZipOutputStreamTest.java,long time = date.getTime();,if (date != null ) long time = date.getTime();
ZipOutputStreamTest.java,"byte[] bytes = ""stored"".getBytes();","if (""stored"" != null ) byte[] bytes = ""stored"".getBytes();"
ZipOutputStreamTest.java,ZipEntry entry = in.getNextEntry();,if (in != null ) ZipEntry entry = in.getNextEntry();
ZipOutputStreamTest.java,long defaultCompressedSize = entry.getCompressedSize();,if (entry != null ) long defaultCompressedSize = entry.getCompressedSize();
ZipOutputStreamTest.java,entry = in.getNextEntry();,if (in != null ) entry = in.getNextEntry();
ZipOutputStreamTest.java,entry = in.getNextEntry();,if (in != null ) entry = in.getNextEntry();
ZipOutputStreamTest.java,byte[] expected = Files.readAllBytes(reference.toPath());,if (Files != null ) byte[] expected = Files.readAllBytes(reference.toPath());
ZipOutputStreamTest.java,ZipEntry entry = in.getNextEntry();,if (in != null ) ZipEntry entry = in.getNextEntry();
ZipOutputStreamTest.java,Enumeration<ZipArchiveEntry> entries = in.getEntries();,if (in != null ) Enumeration<ZipArchiveEntry> entries = in.getEntries();
ZipOutputStreamTest.java,ZipArchiveEntry entry = entries.nextElement();,if (entries != null ) ZipArchiveEntry entry = entries.nextElement();
ZipOutputStreamTest.java,TimeZone previousDefault = TimeZone.getDefault();,if (TimeZone != null ) TimeZone previousDefault = TimeZone.getDefault();
ZipOutputStreamTest.java,String[] availableIDs = TimeZone.getAvailableIDs();,if (TimeZone != null ) String[] availableIDs = TimeZone.getAvailableIDs();
BuckPyFunction.java,SortedSet<ParamInfo> mandatory = Sets.newTreeSet();,if (Sets != null ) SortedSet<ParamInfo> mandatory = Sets.newTreeSet();
BuckPyFunction.java,SortedSet<ParamInfo> optional = Sets.newTreeSet();,if (Sets != null ) SortedSet<ParamInfo> optional = Sets.newTreeSet();
ActionGraphCacheTest.java,ActionGraphCache cache = new ActionGraphCache(MoreExecutors.newDirectExecutorService());,if (ActionGraphCache(MoreExecutors != null ) ActionGraphCache cache = new ActionGraphCache(MoreExecutors.newDirectExecutorService());
ActionGraphCacheTest.java,ActionGraphCache cache = new ActionGraphCache(MoreExecutors.newDirectExecutorService());,if (ActionGraphCache(MoreExecutors != null ) ActionGraphCache cache = new ActionGraphCache(MoreExecutors.newDirectExecutorService());
KnownBuildRuleTypes.java,Optional<String> hostCxxPlatform = cxxBuckConfig.getHostPlatform();,if (cxxBuckConfig != null ) Optional<String> hostCxxPlatform = cxxBuckConfig.getHostPlatform();
KnownBuildRuleTypes.java,ImmutableFlavor hostFlavor = ImmutableFlavor.of(hostCxxPlatform.get());,if (ImmutableFlavor != null ) ImmutableFlavor hostFlavor = ImmutableFlavor.of(hostCxxPlatform.get());
KnownBuildRuleTypes.java,cxxPlatformsMap = cxxPlatformsBuilder.build();,if (cxxPlatformsBuilder != null ) cxxPlatformsMap = cxxPlatformsBuilder.build();
BuckConfig.java,Path path = MorePaths.expandHomeDir(root.get());,if (MorePaths != null ) Path path = MorePaths.expandHomeDir(root.get());
Cell.java,this.knownRoots = roots.build();,if (roots != null ) this.knownRoots = roots.build();
Cell.java,this.rootToCellMapDeprecated = rootsMap.build();,if (rootsMap != null ) this.rootToCellMapDeprecated = rootsMap.build();
Cell.java,BuckConfig parentConfig = parent.getBuckConfig();,if (parent != null ) BuckConfig parentConfig = parent.getBuckConfig();
ProjectWorkspace.java,"Config config = Configs.createDefaultConfig(getDestPath(), CellConfig.of());","if (CellConfig != null ) Config config = Configs.createDefaultConfig(getDestPath(), CellConfig.of());"
ShellStep.java,startTime = System.currentTimeMillis();,if (System != null ) startTime = System.currentTimeMillis();
ShellStep.java,"exitCode = launchAndInteractWithProcess(context, builder.build());","if (builder != null ) exitCode = launchAndInteractWithProcess(context, builder.build());"
Main.java,PrintStream stdErr = console.getStdErr();,if (console != null ) PrintStream stdErr = console.getStdErr();
Main.java,final boolean isDaemon = context.isPresent();,if (context != null ) final boolean isDaemon = context.isPresent();
CxxPlatforms.java,CxxPlatform.Builder builder = CxxPlatform.builder();,if (CxxPlatform != null ) CxxPlatform.Builder builder = CxxPlatform.builder();
AppleCxxPlatformsTest.java,CxxPlatform defaultCxxPlatform = appleCxxPlatform.getCxxPlatform();,if (appleCxxPlatform != null ) CxxPlatform defaultCxxPlatform = appleCxxPlatform.getCxxPlatform();
BuildThreadStateRenderer.java,accumulatedTime = accumulatedTimesByRule.get(buildTarget.get());,if (accumulatedTimesByRule != null ) accumulatedTime = accumulatedTimesByRule.get(buildTarget.get());
TestThreadStateRenderer.java,accumulatedTime = accumulatedTimesByRule.get(buildTarget.get());,if (accumulatedTimesByRule != null ) accumulatedTime = accumulatedTimesByRule.get(buildTarget.get());
BuildJobStateBuildTarget.java,struct.cellPath = iprot.readString();,if (iprot != null ) struct.cellPath = iprot.readString();
BuildJobStateBuildTarget.java,struct.cellPath = iprot.readString();,if (iprot != null ) struct.cellPath = iprot.readString();
BuildTargetParser.java,BuildTarget.Builder builder = BuildTarget.builder(unflavoredBuilder.build());,if (BuildTarget != null ) BuildTarget.Builder builder = BuildTarget.builder(unflavoredBuilder.build());
AuditOwnerCommand.java,ProjectFilesystem cellFilesystem = params.getCell().getFilesystem();,if (params != null ) ProjectFilesystem cellFilesystem = params.getCell().getFilesystem();
AuditOwnerCommand.java,final Path rootPath = cellFilesystem.getRootPath();,if (cellFilesystem != null ) final Path rootPath = cellFilesystem.getRootPath();
AuditOwnerCommand.java,OwnersReport report = OwnersReport.emptyReport();,if (OwnersReport != null ) OwnersReport report = OwnersReport.emptyReport();
AuditOwnerCommand.java,Set<Path> inputs = Sets.newHashSet();,if (Sets != null ) Set<Path> inputs = Sets.newHashSet();
AuditOwnerCommand.java,Set<String> nonExistentInputs = Sets.newHashSet();,if (Sets != null ) Set<String> nonExistentInputs = Sets.newHashSet();
AuditOwnerCommand.java,Set<String> nonFileInputs = Sets.newHashSet();,if (Sets != null ) Set<String> nonFileInputs = Sets.newHashSet();
AuditOwnerCommand.java,Set<Path> ruleInputs = targetNode.getInputs();,if (targetNode != null ) Set<Path> ruleInputs = targetNode.getInputs();
AuditOwnerCommandTest.java,AuditOwnerCommand.OwnersReport report = AuditOwnerCommand.OwnersReport.emptyReport();,if (AuditOwnerCommand != null ) AuditOwnerCommand.OwnersReport report = AuditOwnerCommand.OwnersReport.emptyReport();
AuditOwnerCommandTest.java,ObjectMapper mapper = ObjectMappers.newDefaultInstance();,if (ObjectMappers != null ) ObjectMapper mapper = ObjectMappers.newDefaultInstance();
VcsInfoCollector.java,String currentRevisionId = vcCmdLineInterface.currentRevisionId();,if (vcCmdLineInterface != null ) String currentRevisionId = vcCmdLineInterface.currentRevisionId();
VcsInfoCollector.java,"diffBase = getCommonAncestorRevisionId(currentRevisionId, masterRevisionId.get());","if (masterRevisionId != null ) diffBase = getCommonAncestorRevisionId(currentRevisionId, masterRevisionId.get());"
CxxInferCaptureTransitive.java,this.cellPathResolver = params.getCellRoots();,if (params != null ) this.cellPathResolver = params.getCellRoots();
CxxInferComputeReport.java,this.cellPathResolver = buildRuleParams.getCellRoots();,if (buildRuleParams != null ) this.cellPathResolver = buildRuleParams.getCellRoots();
InferLogLineTest.java,Path p = cellToRootPathMap.get(cellName.get());,if (cellToRootPathMap != null ) Path p = cellToRootPathMap.get(cellName.get());
AuditOwnerCommand.java,PrintStream out = params.getConsole().getStdOut();,if (params != null ) PrintStream out = params.getConsole().getStdOut();
AuditOwnerCommand.java,Ansi ansi = params.getConsole().getAnsi();,if (params != null ) Ansi ansi = params.getConsole().getAnsi();
JavaBuckConfigTest.java,File java = temporaryFolder.newExecutableFile();,if (temporaryFolder != null ) File java = temporaryFolder.newExecutableFile();
JavaBuckConfigTest.java,String javaCommand = java.toPath().toString();,if (java != null ) String javaCommand = java.toPath().toString();
JavaBuckConfigTest.java,File javac = temporaryFolder.newExecutableFile();,if (temporaryFolder != null ) File javac = temporaryFolder.newExecutableFile();
JavaBuckConfigTest.java,File javac = temporaryFolder.newFile();,if (temporaryFolder != null ) File javac = temporaryFolder.newFile();
JavaBuckConfigTest.java,final File javac = temporaryFolder.newFile();,if (temporaryFolder != null ) final File javac = temporaryFolder.newFile();
ProjectCommand.java,ImmutableSet<BuildTarget> supplementalGraphRoots = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<BuildTarget> supplementalGraphRoots = ImmutableSet.of();
Parser.java,targetFutures = ImmutableList.builder();,if (ImmutableList != null ) targetFutures = ImmutableList.builder();
FilesystemBackedBuildFileTree.java,filePath = filePath.getParent();,if (filePath != null ) filePath = filePath.getParent();
BuildCommand.java,buildTargets = result.getBuildTargets();,if (result != null ) buildTargets = result.getBuildTargets();
DefaultTypeCoercerFactory.java,Type rawType = parameterizedType.getRawType();,if (parameterizedType != null ) Type rawType = parameterizedType.getRawType();
TargetNodeFactory.java,ImmutableSet<Path> paths = pathsBuilder.build();,if (pathsBuilder != null ) ImmutableSet<Path> paths = pathsBuilder.build();
TargetNodeFactory.java,Path basePath = target.getBasePath();,if (target != null ) Path basePath = target.getBasePath();
ThriftCompiler.java,this.includes = builder.build();,if (builder != null ) this.includes = builder.build();
ThriftCxxEnhancer.java,final String thriftName = ent.getKey();,if (ent != null ) final String thriftName = ent.getKey();
ThriftCxxEnhancer.java,final ThriftSource source = ent.getValue();,if (ent != null ) final ThriftSource source = ent.getValue();
ThriftCxxEnhancer.java,final Path outputDir = source.getOutputDir();,if (source != null ) final Path outputDir = source.getOutputDir();
ThriftCxxEnhancer.java,CxxLibraryDescription.Arg langArgs = CxxLibraryDescription.createEmptyConstructorArg();,if (CxxLibraryDescription != null ) CxxLibraryDescription.Arg langArgs = CxxLibraryDescription.createEmptyConstructorArg();
ThriftCxxEnhancer.java,langArgs.canBeAsset = Optional.absent();,if (Optional != null ) langArgs.canBeAsset = Optional.absent();
ThriftJavaEnhancer.java,String name = ent.getKey();,if (ent != null ) String name = ent.getKey();
ThriftJavaEnhancer.java,BuildRule compilerRule = ent.getValue().getCompileRule();,if (ent != null ) BuildRule compilerRule = ent.getValue().getCompileRule();
ThriftJavaEnhancer.java,ImmutableSortedSet<BuildRule> sourceZips = sourceZipsBuilder.build();,if (sourceZipsBuilder != null ) ImmutableSortedSet<BuildRule> sourceZips = sourceZipsBuilder.build();
ThriftLibraryDescription.java,ImmutableSortedSet<HeaderSymlinkTree> includeTreeRules = includeTreeRulesBuilder.build();,if (includeTreeRulesBuilder != null ) ImmutableSortedSet<HeaderSymlinkTree> includeTreeRules = includeTreeRulesBuilder.build();
ThriftLibraryDescription.java,ImmutableList<Path> includeRoots = includeRootsBuilder.build();,if (includeRootsBuilder != null ) ImmutableList<Path> includeRoots = includeRootsBuilder.build();
ThriftLibraryDescription.java,ImmutableSet<Path> headerMaps = headerMapsBuilder.build();,if (headerMapsBuilder != null ) ImmutableSet<Path> headerMaps = headerMapsBuilder.build();
ThriftLibraryDescription.java,String name = ent.getKey();,if (ent != null ) String name = ent.getKey();
ThriftLibraryDescription.java,SourcePath source = ent.getValue();,if (ent != null ) SourcePath source = ent.getValue();
ThriftLibraryDescription.java,BuildTarget target = params.getBuildTarget();,if (params != null ) BuildTarget target = params.getBuildTarget();
ThriftLibraryDescription.java,ThriftLanguageSpecificEnhancer enhancer = enhancerFlavor.get().getValue();,if (enhancerFlavor != null ) ThriftLanguageSpecificEnhancer enhancer = enhancerFlavor.get().getValue();
ThriftLibraryDescription.java,String language = enhancer.getLanguage();,if (enhancer != null ) String language = enhancer.getLanguage();
ThriftLibraryDescription.java,String thriftName = ent.getKey();,if (ent != null ) String thriftName = ent.getKey();
ThriftLibraryDescription.java,List<BuildTarget> deps = Lists.newArrayList();,if (Lists != null ) List<BuildTarget> deps = Lists.newArrayList();
ThriftLibraryDescription.java,ThriftLanguageSpecificEnhancer enhancer = enhancerFlavor.get().getValue();,if (enhancerFlavor != null ) ThriftLanguageSpecificEnhancer enhancer = enhancerFlavor.get().getValue();
ThriftPythonEnhancer.java,ThriftSource source = ent.getValue();,if (ent != null ) ThriftSource source = ent.getValue();
ThriftPythonEnhancer.java,Path outputDir = source.getOutputDir();,if (source != null ) Path outputDir = source.getOutputDir();
ThriftBuckConfigTest.java,BuckConfig buckConfig = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig buckConfig = FakeBuckConfig.builder().build();
ThriftCompilerStepTest.java,ExecutionContext context = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext context = TestExecutionContext.newInstance();
ThriftCompilerTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
ThriftCompilerTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
ThriftCxxEnhancerTest.java,options = ImmutableSet.of();,if (ImmutableSet != null ) options = ImmutableSet.of();
ThriftCxxEnhancerTest.java,arg.cppOptions = Optional.absent();,if (Optional != null ) arg.cppOptions = Optional.absent();
ThriftCxxEnhancerTest.java,BuildRuleParams flavoredParams = new FakeBuildRuleParamsBuilder(TARGET).build();,if (FakeBuildRuleParamsBuilder(TARGET) != null ) BuildRuleParams flavoredParams = new FakeBuildRuleParamsBuilder(TARGET).build();
ThriftCxxEnhancerTest.java,arg.cppHeaderNamespace = Optional.absent();,if (Optional != null ) arg.cppHeaderNamespace = Optional.absent();
ThriftCxxEnhancerTest.java,arg.cppExportedHeaders = Optional.absent();,if (Optional != null ) arg.cppExportedHeaders = Optional.absent();
ThriftCxxEnhancerTest.java,arg.cppSrcs = Optional.absent();,if (Optional != null ) arg.cppSrcs = Optional.absent();
ThriftCxxEnhancerTest.java,BuildRuleParams flavoredParams = new FakeBuildRuleParamsBuilder(TARGET).build();,if (FakeBuildRuleParamsBuilder(TARGET) != null ) BuildRuleParams flavoredParams = new FakeBuildRuleParamsBuilder(TARGET).build();
ThriftCxxEnhancerTest.java,arg.cppOptions = Optional.absent();,if (Optional != null ) arg.cppOptions = Optional.absent();
ThriftCxxEnhancerTest.java,arg.cppDeps = Optional.absent();,if (Optional != null ) arg.cppDeps = Optional.absent();
ThriftCxxEnhancerTest.java,BuildRuleParams flavoredParams = new FakeBuildRuleParamsBuilder(TARGET).build();,if (FakeBuildRuleParamsBuilder(TARGET) != null ) BuildRuleParams flavoredParams = new FakeBuildRuleParamsBuilder(TARGET).build();
ThriftCxxEnhancerTest.java,arg.cppOptions = Optional.absent();,if (Optional != null ) arg.cppOptions = Optional.absent();
ThriftCxxEnhancerTest.java,arg.cppDeps = Optional.absent();,if (Optional != null ) arg.cppDeps = Optional.absent();
ThriftCxxEnhancerTest.java,arg.cppHeaderNamespace = Optional.absent();,if (Optional != null ) arg.cppHeaderNamespace = Optional.absent();
ThriftCxxEnhancerTest.java,arg.cppExportedHeaders = Optional.absent();,if (Optional != null ) arg.cppExportedHeaders = Optional.absent();
ThriftCxxEnhancerTest.java,arg.cppSrcs = Optional.absent();,if (Optional != null ) arg.cppSrcs = Optional.absent();
ThriftJavaEnhancerTest.java,options = ImmutableSet.of();,if (ImmutableSet != null ) options = ImmutableSet.of();
ThriftJavaEnhancerTest.java,arg.javaOptions = Optional.absent();,if (Optional != null ) arg.javaOptions = Optional.absent();
ThriftJavaEnhancerTest.java,BuildRuleParams flavoredParams = new FakeBuildRuleParamsBuilder(TARGET).build();,if (FakeBuildRuleParamsBuilder(TARGET) != null ) BuildRuleParams flavoredParams = new FakeBuildRuleParamsBuilder(TARGET).build();
ThriftLibraryDescriptionTest.java,ImmutableSet<String> options = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<String> options = ImmutableSet.of();
ThriftLibraryDescriptionTest.java,SourcePath ruleSourcePath = new BuildTargetSourcePath(genrule.getBuildTarget());,if (BuildTargetSourcePath(genrule != null ) SourcePath ruleSourcePath = new BuildTargetSourcePath(genrule.getBuildTarget());
ThriftLibraryDescriptionTest.java,ProjectFilesystem filesystem = unflavoredParams.getProjectFilesystem();,if (unflavoredParams != null ) ProjectFilesystem filesystem = unflavoredParams.getProjectFilesystem();
ThriftLibraryDescriptionTest.java,BuckConfig buckConfig = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig buckConfig = FakeBuckConfig.builder().build();
ThriftLibraryDescriptionTest.java,ThriftConstructorArg arg = desc.createUnpopulatedConstructorArg();,if (desc != null ) ThriftConstructorArg arg = desc.createUnpopulatedConstructorArg();
ThriftLibraryDescriptionTest.java,arg.flags = Optional.absent();,if (Optional != null ) arg.flags = Optional.absent();
ThriftLibraryDescriptionTest.java,ImmutableSet<BuildTarget> implicitDeps = ImmutableSet.of(implicitDep.getBuildTarget());,if (ImmutableSet != null ) ImmutableSet<BuildTarget> implicitDeps = ImmutableSet.of(implicitDep.getBuildTarget());
ThriftLibraryDescriptionTest.java,ImmutableSet<String> options = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<String> options = ImmutableSet.of();
ThriftLibraryDescriptionTest.java,ThriftConstructorArg arg = desc.createUnpopulatedConstructorArg();,if (desc != null ) ThriftConstructorArg arg = desc.createUnpopulatedConstructorArg();
ThriftLibraryDescriptionTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ThriftLibraryDescriptionTest.java,arg.flags = Optional.absent();,if (Optional != null ) arg.flags = Optional.absent();
ThriftLibraryDescriptionTest.java,BuckConfig buckConfig = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig buckConfig = FakeBuckConfig.builder().build();
ThriftLibraryDescriptionTest.java,ThriftConstructorArg constructorArg = desc.createUnpopulatedConstructorArg();,if (desc != null ) ThriftConstructorArg constructorArg = desc.createUnpopulatedConstructorArg();
ThriftLibraryDescriptionTest.java,ImmutableSet<String> options = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<String> options = ImmutableSet.of();
ThriftLibraryDescriptionTest.java,ImmutableSet<BuildTarget> implicitDeps = ImmutableSet.of(implicitDep.getBuildTarget());,if (ImmutableSet != null ) ImmutableSet<BuildTarget> implicitDeps = ImmutableSet.of(implicitDep.getBuildTarget());
ThriftLibraryDescriptionTest.java,ThriftConstructorArg constructorArg = desc.createUnpopulatedConstructorArg();,if (desc != null ) ThriftConstructorArg constructorArg = desc.createUnpopulatedConstructorArg();
ThriftLibraryIntegrationTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
ThriftLibraryIntegrationTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());,if (ProjectFilesystem(workspace != null ) ProjectFilesystem filesystem = new ProjectFilesystem(workspace.getDestPath());
ThriftLibraryIntegrationTest.java,BuildRuleResolver ruleResolver = actionGraphAndResolver.getResolver();,if (actionGraphAndResolver != null ) BuildRuleResolver ruleResolver = actionGraphAndResolver.getResolver();
ThriftLibraryIntegrationTest.java,ImmutableSortedSet<BuildRule> deps = ruleResolver.getRule(binaryFlavor).getDeps();,if (ruleResolver != null ) ImmutableSortedSet<BuildRule> deps = ruleResolver.getRule(binaryFlavor).getDeps();
ThriftPythonEnhancerTest.java,options = ImmutableSet.of();,if (ImmutableSet != null ) options = ImmutableSet.of();
ThriftPythonEnhancerTest.java,arg.pyOptions = Optional.absent();,if (Optional != null ) arg.pyOptions = Optional.absent();
ThriftPythonEnhancerTest.java,BuildRuleParams flavoredParams = new FakeBuildRuleParamsBuilder(TARGET).build();,if (FakeBuildRuleParamsBuilder(TARGET) != null ) BuildRuleParams flavoredParams = new FakeBuildRuleParamsBuilder(TARGET).build();
ThriftPythonEnhancerTest.java,arg.pyOptions = Optional.absent();,if (Optional != null ) arg.pyOptions = Optional.absent();
ThriftPythonEnhancerTest.java,arg.pyBaseModule = Optional.absent();,if (Optional != null ) arg.pyBaseModule = Optional.absent();
ThriftPythonEnhancerTest.java,arg.pyOptions = Optional.absent();,if (Optional != null ) arg.pyOptions = Optional.absent();
ThriftPythonEnhancerTest.java,arg.pyBaseModule = Optional.absent();,if (Optional != null ) arg.pyBaseModule = Optional.absent();
ThriftPythonEnhancerTest.java,arg.pyOptions = Optional.absent();,if (Optional != null ) arg.pyOptions = Optional.absent();
ThriftPythonEnhancerTest.java,arg.pyTwistedBaseModule = Optional.absent();,if (Optional != null ) arg.pyTwistedBaseModule = Optional.absent();
ThriftPythonEnhancerTest.java,arg.pyOptions = Optional.absent();,if (Optional != null ) arg.pyOptions = Optional.absent();
ThriftPythonEnhancerTest.java,arg.pyAsyncioBaseModule = Optional.absent();,if (Optional != null ) arg.pyAsyncioBaseModule = Optional.absent();
SuperConsoleEventBusListener.java,boolean stdoutDirty = console.getStdOut().isDirty();,if (console != null ) boolean stdoutDirty = console.getStdOut().isDirty();
SuperConsoleEventBusListener.java,boolean stderrDirty = console.getStdErr().isDirty();,if (console != null ) boolean stderrDirty = console.getStdErr().isDirty();
VcsInfoCollector.java,String currentRevisionId = vcCmdLineInterface.currentRevisionId();,if (vcCmdLineInterface != null ) String currentRevisionId = vcCmdLineInterface.currentRevisionId();
WorkspaceAndProjectGenerator.java,ImmutableSet<BuildTarget> requiredBuildTargets = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<BuildTarget> requiredBuildTargets = ImmutableSet.of();
WorkspaceAndProjectGenerator.java,projectName = projectDirectory.getFileName().toString();,if (projectDirectory != null ) projectName = projectDirectory.getFileName().toString();
WorkspaceAndProjectGenerator.java,Iterable<PBXTarget> synthesizedCombinedTestTargets = ImmutableList.of();,if (ImmutableList != null ) Iterable<PBXTarget> synthesizedCombinedTestTargets = ImmutableList.of();
WorkspaceAndProjectGenerator.java,Path workspacePath = workspaceGenerator.writeWorkspace();,if (workspaceGenerator != null ) Path workspacePath = workspaceGenerator.writeWorkspace();
WorkspaceAndProjectGenerator.java,synthesizedCombinedTestTargets = generator.getBuildableCombinedTestTargets();,if (generator != null ) synthesizedCombinedTestTargets = generator.getBuildableCombinedTestTargets();
WorkspaceAndProjectGenerator.java,synthesizedCombinedTestTargets = generator.getBuildableCombinedTestTargets();,if (generator != null ) synthesizedCombinedTestTargets = generator.getBuildableCombinedTestTargets();
WorkspaceAndProjectGenerator.java,BuildTarget buildTarget = targetNode.getBuildTarget();,if (targetNode != null ) BuildTarget buildTarget = targetNode.getBuildTarget();
WorkspaceAndProjectGenerator.java,projectName = projectDirectory.getFileName().toString();,if (projectDirectory != null ) projectName = projectDirectory.getFileName().toString();
AutodepsCommand.java,ConcurrencyLimit concurrencyLimit = getConcurrencyLimit(params.getBuckConfig());,if (getConcurrencyLimit(params != null ) ConcurrencyLimit concurrencyLimit = getConcurrencyLimit(params.getBuckConfig());
AutodepsCommand.java,Cell cell = params.getCell();,if (params != null ) Cell cell = params.getCell();
AutodepsCommand.java,WeightedListeningExecutorService executorService = pool.getExecutor();,if (pool != null ) WeightedListeningExecutorService executorService = pool.getExecutor();
AutodepsCommand.java,BuckEventBus eventBus = params.getBuckEventBus();,if (params != null ) BuckEventBus eventBus = params.getBuckEventBus();
AutodepsCommand.java,Console console = params.getConsole();,if (params != null ) Console console = params.getConsole();
VcsInfoCollector.java,String currentRevisionId = vcCmdLineInterface.currentRevisionId();,if (vcCmdLineInterface != null ) String currentRevisionId = vcCmdLineInterface.currentRevisionId();
ProjectBuildFileParserPool.java,parkedParsersCount += projectBuildFileParsers.size();,if (projectBuildFileParsers != null ) parkedParsersCount += projectBuildFileParsers.size();
XctoolRunTestsStep.java,stderr = CharStreams.toString(bufferedStderrReader).trim();,if (CharStreams != null ) stderr = CharStreams.toString(bufferedStderrReader).trim();
AbstractCommand.java,RawConfig.Builder builder = RawConfig.builder();,if (RawConfig != null ) RawConfig.Builder builder = RawConfig.builder();
Main.java,"Config config = Configs.createDefaultConfig(canonicalRootPath, command.getConfigOverrides());","if (command != null ) Config config = Configs.createDefaultConfig(canonicalRootPath, command.getConfigOverrides());"
Cell.java,"Config config = Configs.createDefaultConfig(cellPath, RawConfig.of());","if (RawConfig != null ) Config config = Configs.createDefaultConfig(cellPath, RawConfig.of());"
Cell.java,BuckConfig parentConfig = parent.getBuckConfig();,if (parent != null ) BuckConfig parentConfig = parent.getBuckConfig();
ProjectWorkspace.java,"Config config = Configs.createDefaultConfig(getDestPath(), RawConfig.of());","if (RawConfig != null ) Config config = Configs.createDefaultConfig(getDestPath(), RawConfig.of());"
Resolver.java,this.repos = builder.build();,if (builder != null ) this.repos = builder.build();
Resolver.java,this.locator = AetherUtil.initServiceLocator();,if (AetherUtil != null ) this.locator = AetherUtil.initServiceLocator();
ReactNativeDeps.java,String inputsHash = hasher.hash().toString();,if (hasher != null ) String inputsHash = hasher.hash().toString();
ReactNativeLibraryGraphEnhancer.java,BuildTarget originalBuildTarget = params.getBuildTarget();,if (params != null ) BuildTarget originalBuildTarget = params.getBuildTarget();
DummyRDotJava.java,javaSourceFilePaths = mergeStep.getRDotJavaFiles();,if (mergeStep != null ) javaSourceFilePaths = mergeStep.getRDotJavaFiles();
DaemonicParserState.java,UnflavoredBuildTarget unflavoredBuildTarget = target.withoutCell().getUnflavoredBuildTarget();,if (target != null ) UnflavoredBuildTarget unflavoredBuildTarget = target.withoutCell().getUnflavoredBuildTarget();
DaemonicParserState.java,Object constructorArg = description.createUnpopulatedConstructorArg();,if (description != null ) Object constructorArg = description.createUnpopulatedConstructorArg();
AppleBundle.java,Path unstrippedOutput = unstrippedBinaryRule.get().getPathToOutput();,if (unstrippedBinaryRule != null ) Path unstrippedOutput = unstrippedBinaryRule.get().getPathToOutput();
AppleBundle.java,dwarfFilename = unstrippedOutput.getFileName().toString();,if (unstrippedOutput != null ) dwarfFilename = unstrippedOutput.getFileName().toString();
PerBuildState.java,Path symlinkTarget = projectFilesystem.resolve(subpath).toRealPath();,if (projectFilesystem != null ) Path symlinkTarget = projectFilesystem.resolve(subpath).toRealPath();
AppleCxxPlatforms.java,ImmutableList<Path> toolSearchPaths = toolSearchPathsBuilder.build();,if (toolSearchPathsBuilder != null ) ImmutableList<Path> toolSearchPaths = toolSearchPathsBuilder.build();
AppleCxxPlatforms.java,ImmutableList<String> asflags = cflagsBuilder.build();,if (cflagsBuilder != null ) ImmutableList<String> asflags = cflagsBuilder.build();
AppleCxxPlatforms.java,ImmutableList<String> ldflags = ldflagsBuilder.build();,if (ldflagsBuilder != null ) ImmutableList<String> ldflags = ldflagsBuilder.build();
AppleCxxPlatforms.java,String xcodeVersion = xcodeVersionObject.toString();,if (xcodeVersionObject != null ) String xcodeVersion = xcodeVersionObject.toString();
CachingBuildEngine.java,Iterable<BuildRule> deps = rule.getDeps();,if (rule != null ) Iterable<BuildRule> deps = rule.getDeps();
WorkspaceAndProjectGeneratorTest.java,groupedTestsMapBuilder = ImmutableMultimap.builder();,if (ImmutableMultimap != null ) groupedTestsMapBuilder = ImmutableMultimap.builder();
WorkspaceAndProjectGeneratorTest.java,ungroupedTestsMapBuilder = ImmutableSetMultimap.builder();,if (ImmutableSetMultimap != null ) ungroupedTestsMapBuilder = ImmutableSetMultimap.builder();
WorkspaceAndProjectGeneratorTest.java,groupedTestsMap = groupedTestsMapBuilder.build();,if (groupedTestsMapBuilder != null ) groupedTestsMap = groupedTestsMapBuilder.build();
WorkspaceAndProjectGeneratorTest.java,groupedTests = ImmutableList.copyOf(groupedTestsMap.entries());,if (ImmutableList != null ) groupedTests = ImmutableList.copyOf(groupedTestsMap.entries());
ChromeTraceBuildListener.java,Path traceDirectory = projectFilesystem.getPathForRelativePath(BuckConstant.getBuckTraceDir());,if (projectFilesystem != null ) Path traceDirectory = projectFilesystem.getPathForRelativePath(BuckConstant.getBuckTraceDir());
ConsoleLogLevelOverrider.java,consoleHandler = JavaUtilLogHandlers.getConsoleHandler();,if (JavaUtilLogHandlers != null ) consoleHandler = JavaUtilLogHandlers.getConsoleHandler();
JavaUtilLogHandlers.java,Object innerHandler = callable.call();,if (callable != null ) Object innerHandler = callable.call();
ConsoleHandler.java,Collection<OutputStreamWriter> allConsoleWriters = commandIdToConsoleWriter.values();,if (commandIdToConsoleWriter != null ) Collection<OutputStreamWriter> allConsoleWriters = commandIdToConsoleWriter.values();
Resolver.java,this.localRepo = new LocalRepository(localRepoPath.toFile());,if (LocalRepository(localRepoPath != null ) this.localRepo = new LocalRepository(localRepoPath.toFile());
JarDirectoryStepTest.java,ExecutionContext context = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext context = TestExecutionContext.newInstance();
JarDirectoryStepTest.java,int returnCode = step.execute(context).getExitCode();,if (step != null ) int returnCode = step.execute(context).getExitCode();
AppleCxxPlatforms.java,Optional<Path> developerPath = sdkPaths.getDeveloperPath();,if (sdkPaths != null ) Optional<Path> developerPath = sdkPaths.getDeveloperPath();
AppleCxxPlatforms.java,Path xcodeBundlePath = developerPath.get().getParent();,if (developerPath != null ) Path xcodeBundlePath = developerPath.get().getParent();
AppleToolchainDiscovery.java,String version = versionObject.toString();,if (versionObject != null ) String version = versionObject.toString();
DeterministicJarManifestWriter.java,int lineLength = builder.length();,if (builder != null ) int lineLength = builder.length();
RuleKeyBuilder.java,addToKey = ideallyRelative.getFileName();,if (ideallyRelative != null ) addToKey = ideallyRelative.getFileName();
TargetGraphHashing.java,HashCode result = hasher.hash();,if (hasher != null ) HashCode result = hasher.hash();
TargetGraphHashing.java,HashCode targetRuleHashCode = node.getRawInputsHashCode();,if (node != null ) HashCode targetRuleHashCode = node.getRawInputsHashCode();
TargetNode.java,T arg = description.createUnpopulatedConstructorArg();,if (description != null ) T arg = description.createUnpopulatedConstructorArg();
TargetNode.java,Path basePath = getBuildTarget().getBasePath();,if (getBuildTarget() != null ) Path basePath = getBuildTarget().getBasePath();
TargetNode.java,BuildFileTree buildFileTree = ruleFactoryParams.getBuildFileTree();,if (ruleFactoryParams != null ) BuildFileTree buildFileTree = ruleFactoryParams.getBuildFileTree();
JavaInMemoryFileManagerTest.java,JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();,if (ToolProvider != null ) JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
Main.java,cellHashCache = new DefaultFileHashCache(rootCell.getFilesystem());,if (DefaultFileHashCache(rootCell != null ) cellHashCache = new DefaultFileHashCache(rootCell.getFilesystem());
CxxTestDescriptionTest.java,DefaultFileHashCache fileHashCache = new DefaultFileHashCache(rule.getProjectFilesystem());,if (DefaultFileHashCache(rule != null ) DefaultFileHashCache fileHashCache = new DefaultFileHashCache(rule.getProjectFilesystem());
ShTestDescriptionTest.java,DefaultFileHashCache fileHashCache = new DefaultFileHashCache(rule.getProjectFilesystem());,if (DefaultFileHashCache(rule != null ) DefaultFileHashCache fileHashCache = new DefaultFileHashCache(rule.getProjectFilesystem());
ProjectFilesystemTest.java,ImmutableSet<Path> ignorePaths = filesystem.getIgnorePaths();,if (filesystem != null ) ImmutableSet<Path> ignorePaths = filesystem.getIgnorePaths();
ProjectFilesystem.java,this.globPattern = Optional.absent();,if (Optional != null ) this.globPattern = Optional.absent();
ProjectFilesystem.java,this.globMatcher = Optional.absent();,if (Optional != null ) this.globMatcher = Optional.absent();
ProjectFilesystem.java,this.basePath = Optional.absent();,if (Optional != null ) this.basePath = Optional.absent();
FileContentsScrubberOverflowTest.java,FileContentsScrubber scrubber = ObjectFileScrubbers.createDateUidGidScrubber();,if (ObjectFileScrubbers != null ) FileContentsScrubber scrubber = ObjectFileScrubbers.createDateUidGidScrubber();
VersionControlStatsGenerator.java,boolean workingDirectoryChanges = vcCmdLineInterface.hasWorkingDirectoryChanges();,if (vcCmdLineInterface != null ) boolean workingDirectoryChanges = vcCmdLineInterface.hasWorkingDirectoryChanges();
Types.java,boolean isOptional = Optional.class.isAssignableFrom(field.getType());,if (Optional != null ) boolean isOptional = Optional.class.isAssignableFrom(field.getType());
Types.java,Type type = field.getGenericType();,if (field != null ) Type type = field.getGenericType();
BuckClient.java,BuckClient.this.mLastActionTime = (new Date()).getTime();,if (Date()) != null ) BuckClient.this.mLastActionTime = (new Date()).getTime();
BuckClient.java,mLastActionTime = (new Date()).getTime();,if (Date()) != null ) mLastActionTime = (new Date()).getTime();
BuckClient.java,mLastActionTime = (new Date()).getTime();,if (Date()) != null ) mLastActionTime = (new Date()).getTime();
VersionControlStatsGeneratorTest.java,VersionControlStats vcStats = eventCapture.getValue().getVersionControlStats();,if (eventCapture != null ) VersionControlStats vcStats = eventCapture.getValue().getVersionControlStats();
XmlTestResultParser.java,List<TestResultSummary> testResults = Lists.newArrayListWithCapacity(testElements.getLength());,if (Lists != null ) List<TestResultSummary> testResults = Lists.newArrayListWithCapacity(testElements.getLength());
KnownBuildRuleTypesTest.java,final File javac = temporaryFolder.newFile();,if (temporaryFolder != null ) final File javac = temporaryFolder.newFile();
Configs.java,Optional<Path> root = configConfig.getProjectRoot();,if (configConfig != null ) Optional<Path> root = configConfig.getProjectRoot();
Cell.java,BuckConfig parentConfig = Cell.this.getBuckConfig();,if (Cell != null ) BuckConfig parentConfig = Cell.this.getBuckConfig();
FileContentsScrubberOverflowTest.java,FileScrubber scrubber = ObjectFileScrubbers.createDateUidGidScrubber();,if (ObjectFileScrubbers != null ) FileScrubber scrubber = ObjectFileScrubbers.createDateUidGidScrubber();
ApplePackageDescription.java,targetWithPlatform = params.getBuildTarget();,if (params != null ) targetWithPlatform = params.getBuildTarget();
Main.java,"Config config = Configs.createDefaultConfig(canonicalRootPath, command.getConfigOverrides());","if (command != null ) Config config = Configs.createDefaultConfig(canonicalRootPath, command.getConfigOverrides());"
Cell.java,"Config config = Configs.createDefaultConfig(cellPath, RawConfig.of());","if (RawConfig != null ) Config config = Configs.createDefaultConfig(cellPath, RawConfig.of());"
Cell.java,BuckConfig parentConfig = parent.getBuckConfig();,if (parent != null ) BuckConfig parentConfig = parent.getBuckConfig();
ProjectWorkspace.java,"Config config = Configs.createDefaultConfig(getDestPath(), RawConfig.of());","if (RawConfig != null ) Config config = Configs.createDefaultConfig(getDestPath(), RawConfig.of());"
TargetsCommand.java,outputPath = rule.getPathToOutput();,if (rule != null ) outputPath = rule.getPathToOutput();
DaemonicParserState.java,this.targetsCornucopia = HashMultimap.create();,if (HashMultimap != null ) this.targetsCornucopia = HashMultimap.create();
DaemonicParserState.java,this.buildFileDependents = HashMultimap.create();,if (HashMultimap != null ) this.buildFileDependents = HashMultimap.create();
InterCellIntegrationTest.java,ProjectWorkspace primary = cells.getFirst();,if (cells != null ) ProjectWorkspace primary = cells.getFirst();
ObjectPathsAbsolutifier.java,String stringPath = optionalPath.get();,if (optionalPath != null ) String stringPath = optionalPath.get();
SymTabCommandUtilsTest.java,byte[] commandBytes = SymTabCommandTestData.getBigEndian();,if (SymTabCommandTestData != null ) byte[] commandBytes = SymTabCommandTestData.getBigEndian();
ProjectGenerator.java,String compDir = cxxPlatform.getDebugPathSanitizer().getCompilationDirectory();,if (cxxPlatform != null ) String compDir = cxxPlatform.getDebugPathSanitizer().getCompilationDirectory();
WorkspaceAndProjectGeneratorTest.java,String script = phase.getShellScript();,if (phase != null ) String script = phase.getShellScript();
CxxGenruleDescription.java,Optional<CxxPlatform> cxxPlatform = cxxPlatforms.getValue(params.getBuildTarget());,if (cxxPlatforms != null ) Optional<CxxPlatform> cxxPlatform = cxxPlatforms.getValue(params.getBuildTarget());
ObjectPathsAbsolutifier.java,UUIDCommand updatedCommand = uuidCommand.withUuid(UUID.randomUUID());,if (uuidCommand != null ) UUIDCommand updatedCommand = uuidCommand.withUuid(UUID.randomUUID());
BuckBuildAction.java,BuckBuildManager buildManager = BuckBuildManager.getInstance(e.getProject());,if (BuckBuildManager != null ) BuckBuildManager buildManager = BuckBuildManager.getInstance(e.getProject());
BuckBuildAction.java,String target = buildManager.getCurrentSavedTarget(e.getProject());,if (buildManager != null ) String target = buildManager.getCurrentSavedTarget(e.getProject());
BuckInstallAction.java,BuckBuildManager buildManager = BuckBuildManager.getInstance(e.getProject());,if (BuckBuildManager != null ) BuckBuildManager buildManager = BuckBuildManager.getInstance(e.getProject());
BuckInstallAction.java,String target = buildManager.getCurrentSavedTarget(e.getProject());,if (buildManager != null ) String target = buildManager.getCurrentSavedTarget(e.getProject());
BuckProjectGenerationAction.java,BuckBuildManager buildManager = BuckBuildManager.getInstance(e.getProject());,if (BuckBuildManager != null ) BuckBuildManager buildManager = BuckBuildManager.getInstance(e.getProject());
BuckProjectGenerationAction.java,String target = buildManager.getCurrentSavedTarget(e.getProject());,if (buildManager != null ) String target = buildManager.getCurrentSavedTarget(e.getProject());
BuckTestAction.java,BuckBuildManager buildManager = BuckBuildManager.getInstance(e.getProject());,if (BuckBuildManager != null ) BuckBuildManager buildManager = BuckBuildManager.getInstance(e.getProject());
BuckTestAction.java,String target = buildManager.getCurrentSavedTarget(e.getProject());,if (buildManager != null ) String target = buildManager.getCurrentSavedTarget(e.getProject());
BuckUninstallAction.java,BuckBuildManager buildManager = BuckBuildManager.getInstance(e.getProject());,if (BuckBuildManager != null ) BuckBuildManager buildManager = BuckBuildManager.getInstance(e.getProject());
BuckUninstallAction.java,String target = buildManager.getCurrentSavedTarget(e.getProject());,if (buildManager != null ) String target = buildManager.getCurrentSavedTarget(e.getProject());
Util.java,String name = path.toString();,if (path != null ) String name = path.toString();
CachingBuildEngine.java,RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getFirst();,if (depFileRuleKeyAndInputs != null ) RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getFirst();
AppleBundle.java,Path bundleDir = assetCatalog.get().getOutputDir();,if (assetCatalog != null ) Path bundleDir = assetCatalog.get().getOutputDir();
StackedDownloaderTest.java,FileSystem vfs = Jimfs.newFileSystem(Configuration.unix());,if (Jimfs != null ) FileSystem vfs = Jimfs.newFileSystem(Configuration.unix());
CachingBuildEngine.java,RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getFirst();,if (depFileRuleKeyAndInputs != null ) RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getFirst();
ArtifactCaches.java,OkHttpClient fetchClient = storeClient.clone();,if (storeClient != null ) OkHttpClient fetchClient = storeClient.clone();
ClientSideSlb.java,this.pingClient = config.getPingHttpClient();,if (config != null ) this.pingClient = config.getPingHttpClient();
LoadCommandUtils.java,relativeCommandOffset += command.getCmdsize().intValue();,if (command != null ) relativeCommandOffset += command.getCmdsize().intValue();
SegmentCommandUtils.java,int offset = buffer.position();,if (buffer != null ) int offset = buffer.position();
SegmentCommandUtils.java,UnsignedInteger cmd = UnsignedInteger.fromIntBits(buffer.getInt());,if (UnsignedInteger != null ) UnsignedInteger cmd = UnsignedInteger.fromIntBits(buffer.getInt());
SegmentCommandUtils.java,UnsignedInteger cmdsize = UnsignedInteger.fromIntBits(buffer.getInt());,if (UnsignedInteger != null ) UnsignedInteger cmdsize = UnsignedInteger.fromIntBits(buffer.getInt());
HttpArtifactCache.java,tmp = output.getPath();,if (output != null ) tmp = output.getPath();
BuckBuildAction.java,BuckEventsConsumer buckEventsConsumer = new BuckEventsConsumer(e.getProject());,if (BuckEventsConsumer(e != null ) BuckEventsConsumer buckEventsConsumer = new BuckEventsConsumer(e.getProject());
BuckInstallAction.java,BuckEventsConsumer buckEventsConsumer = new BuckEventsConsumer(e.getProject());,if (BuckEventsConsumer(e != null ) BuckEventsConsumer buckEventsConsumer = new BuckEventsConsumer(e.getProject());
BuckProjectGenerationAction.java,BuckEventsConsumer buckEventsConsumer = new BuckEventsConsumer(e.getProject());,if (BuckEventsConsumer(e != null ) BuckEventsConsumer buckEventsConsumer = new BuckEventsConsumer(e.getProject());
BuckTestAction.java,BuckEventsConsumer buckEventsConsumer = new BuckEventsConsumer(e.getProject());,if (BuckEventsConsumer(e != null ) BuckEventsConsumer buckEventsConsumer = new BuckEventsConsumer(e.getProject());
BuckUninstallAction.java,BuckEventsConsumer buckEventsConsumer = new BuckEventsConsumer(e.getProject());,if (BuckEventsConsumer(e != null ) BuckEventsConsumer buckEventsConsumer = new BuckEventsConsumer(e.getProject());
BuckModule.java,FileTypeManager fileTypeManager = FileTypeManagerImpl.getInstance();,if (FileTypeManagerImpl != null ) FileTypeManager fileTypeManager = FileTypeManagerImpl.getInstance();
AppleTestDescription.java,appleCxxPlatform = appleCxxPlatformFlavorDomain.getValue(cxxPlatform.getFlavor());,if (appleCxxPlatformFlavorDomain != null ) appleCxxPlatform = appleCxxPlatformFlavorDomain.getValue(cxxPlatform.getFlavor());
AppleTestDescription.java,ImmutableSet<BuildTarget> blacklist = nativeLinkables.keySet();,if (nativeLinkables != null ) ImmutableSet<BuildTarget> blacklist = nativeLinkables.keySet();
AndroidBinaryGraphEnhancer.java,ImmutableSet<DexProducedFromJavaLibrary> allPreDexDeps = preDexDeps.build();,if (preDexDeps != null ) ImmutableSet<DexProducedFromJavaLibrary> allPreDexDeps = preDexDeps.build();
AndroidBinaryGraphEnhancer.java,packageableCollection = collector.build();,if (collector != null ) packageableCollection = collector.build();
DistBuildService.java,this.frontendUrl = client.getBestServer().toString();,if (client != null ) this.frontendUrl = client.getBestServer().toString();
DistBuildService.java,job = response.getStartBuild().getBuildJob();,if (response != null ) job = response.getStartBuild().getBuildJob();
DistBuildService.java,id = job.getBuildId();,if (job != null ) id = job.getBuildId();
DistBuildService.java,Stopwatch stopwatch = Stopwatch.createStarted();,if (Stopwatch != null ) Stopwatch stopwatch = Stopwatch.createStarted();
DistBuildService.java,job = response.getBuildStatus().getBuildJob();,if (response != null ) job = response.getBuildStatus().getBuildJob();
ThriftOverHttp.java,TSerializer serializer = new TSerializer(new TSimpleJSONProtocol.Factory());,if (TSimpleJSONProtocol != null ) TSerializer serializer = new TSerializer(new TSimpleJSONProtocol.Factory());
AppleTestDescription.java,boolean addDefaultPlatform = nonLibraryFlavors.isEmpty();,if (nonLibraryFlavors != null ) boolean addDefaultPlatform = nonLibraryFlavors.isEmpty();
AppleTestDescription.java,blacklist = ImmutableSet.copyOf(nativeLinkables.keySet());,if (ImmutableSet != null ) blacklist = ImmutableSet.copyOf(nativeLinkables.keySet());
AppleTestDescription.java,testHostApp = Optional.absent();,if (Optional != null ) testHostApp = Optional.absent();
AppleTestDescription.java,testHostAppBinarySourcePath = Optional.absent();,if (Optional != null ) testHostAppBinarySourcePath = Optional.absent();
AppleTestDescription.java,blacklist = ImmutableSet.of();,if (ImmutableSet != null ) blacklist = ImmutableSet.of();
AppleTestDescription.java,xctool = Optional.absent();,if (Optional != null ) xctool = Optional.absent();
CachingBuildEngine.java,RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getFirst();,if (depFileRuleKeyAndInputs != null ) RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getFirst();
CxxLibraryTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
BuckEventBus.java,ExecutorService executorService = executorAndBus.getFirst();,if (executorAndBus != null ) ExecutorService executorService = executorAndBus.getFirst();
BuckEventBus.java,ImmutableSet<ExecutorService> leftoverExecutors = leftoverExecutorsBuilder.build();,if (leftoverExecutorsBuilder != null ) ImmutableSet<ExecutorService> leftoverExecutors = leftoverExecutorsBuilder.build();
CachingBuildEngine.java,RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getFirst();,if (depFileRuleKeyAndInputs != null ) RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getFirst();
DefaultAndroidDirectoryResolver.java,String version = stripBuildToolsPrefix(pathname.getName());,if (stripBuildToolsPrefix(pathname != null ) String version = stripBuildToolsPrefix(pathname.getName());
DefaultAndroidDirectoryResolver.java,StringTokenizer stringTokenizer = new StringTokenizer(contents.get());,if (StringTokenizer(contents != null ) StringTokenizer stringTokenizer = new StringTokenizer(contents.get());
DefaultAndroidDirectoryResolver.java,Path ndkPath = path.get();,if (path != null ) Path ndkPath = path.get();
DefaultAndroidDirectoryResolver.java,String ndkVersion = ndkVersionOptional.get();,if (ndkVersionOptional != null ) String ndkVersion = ndkVersionOptional.get();
DefaultAndroidDirectoryResolver.java,Optional<Path> path = Optional.absent();,if (Optional != null ) Optional<Path> path = Optional.absent();
DefaultAndroidDirectoryResolver.java,Path repositoryPath = repositoryPathOptional.get();,if (repositoryPathOptional != null ) Path repositoryPath = repositoryPathOptional.get();
StubJar.java,String fileName = relativizedPath.toString();,if (relativizedPath != null ) String fileName = relativizedPath.toString();
DefectReporter.java,URI uri = rageConfig.getReportUploadUri().get();,if (rageConfig != null ) URI uri = rageConfig.getReportUploadUri().get();
FakeProjectFilesystem.java,FileSystem vfs = Jimfs.newFileSystem(Configuration.unix());,if (Jimfs != null ) FileSystem vfs = Jimfs.newFileSystem(Configuration.unix());
AndroidPlatformTarget.java,Path androidSdkDir = androidDirectoryResolver.findAndroidSdkDir();,if (androidDirectoryResolver != null ) Path androidSdkDir = androidDirectoryResolver.findAndroidSdkDir();
AndroidPlatformTarget.java,Path buildToolsDir = androidDirectoryResolver.findAndroidBuildToolsDir();,if (androidDirectoryResolver != null ) Path buildToolsDir = androidDirectoryResolver.findAndroidBuildToolsDir();
AndroidPlatformTarget.java,Path androidSdkDir = androidDirectoryResolver.findAndroidSdkDir();,if (androidDirectoryResolver != null ) Path androidSdkDir = androidDirectoryResolver.findAndroidSdkDir();
FetchCommand.java,Optional<Path> sdkDir = resolver.findAndroidSdkDirSafe();,if (resolver != null ) Optional<Path> sdkDir = resolver.findAndroidSdkDirSafe();
Main.java,Optional<Path> androidSdkDirOption = androidDirectoryResolver.findAndroidSdkDirSafe();,if (androidDirectoryResolver != null ) Optional<Path> androidSdkDirOption = androidDirectoryResolver.findAndroidSdkDirSafe();
KnownBuildRuleTypes.java,Optional<Path> ndkRoot = androidDirectoryResolver.findAndroidNdkDir();,if (androidDirectoryResolver != null ) Optional<Path> ndkRoot = androidDirectoryResolver.findAndroidNdkDir();
AndroidBinaryIntegrationTest.java,Optional<Path> ndkPath = androidResolver.findAndroidNdkDir();,if (androidResolver != null ) Optional<Path> ndkPath = androidResolver.findAndroidNdkDir();
NdkCxxPlatformIntegrationTest.java,Optional<Path> ndkDir = resolver.findAndroidNdkDir();,if (resolver != null ) Optional<Path> ndkDir = resolver.findAndroidNdkDir();
DepsForBuildFilesTest.java,Path directory = buildFileWithDeps.getBasePath();,if (buildFileWithDeps != null ) Path directory = buildFileWithDeps.getBasePath();
LuaBinaryDescription.java,"Path output = getOutputPath(baseParams.getBuildTarget(), baseParams.getProjectFilesystem());","if (baseParams != null ) Path output = getOutputPath(baseParams.getBuildTarget(), baseParams.getProjectFilesystem());"
CachingBuildEngine.java,CacheResult cacheResult = cacheResultFuture.get();,if (cacheResultFuture != null ) CacheResult cacheResult = cacheResultFuture.get();
CachingBuildEngine.java,RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getFirst();,if (depFileRuleKeyAndInputs != null ) RuleKey depFileRuleKey = depFileRuleKeyAndInputs.get().getFirst();
CachingBuildEngineTest.java,BuildResult result = buildResult.get();,if (buildResult != null ) BuildResult result = buildResult.get();
OCamlBuildStep.java,"int genExitCode = generateSources(context, filesystem.getRootPath());","if (filesystem != null ) int genExitCode = generateSources(context, filesystem.getRootPath());"
OCamlBuildStep.java,"int nativeLinkExitCode = executeNativeLinking(context, nativeLinkerInputs.build());","if (nativeLinkerInputs != null ) int nativeLinkExitCode = executeNativeLinking(context, nativeLinkerInputs.build());"
OCamlBuildStep.java,"int bytecodeLinkExitCode =  executeBytecodeLinking(context, bytecodeLinkerInputs.build());","if (bytecodeLinkerInputs != null ) int bytecodeLinkExitCode =  executeBytecodeLinking(context, bytecodeLinkerInputs.build());"
BuckAutoDepsContributor.java,String newLine = documentEvent.getNewFragment().toString();,if (documentEvent != null ) String newLine = documentEvent.getNewFragment().toString();
BuckAutoDepsContributor.java,String currentClassPath = currentClass.getPath();,if (currentClass != null ) String currentClassPath = currentClass.getPath();
AppleTest.java,testRunningTool = otest.get();,if (otest != null ) testRunningTool = otest.get();
TargetsCommand.java,Optional<RuleKeyBuilderFactory> ruleKeyBuilderFactory = Optional.absent();,if (Optional != null ) Optional<RuleKeyBuilderFactory> ruleKeyBuilderFactory = Optional.absent();
UncachedRuleKeyBuilder.java,RuleKeyBuilder subKeyBuilder = subKeySupplier.get();,if (subKeySupplier != null ) RuleKeyBuilder subKeyBuilder = subKeySupplier.get();
CxxLibrary.java,Arg libraryArg = archive.toArg();,if (archive != null ) Arg libraryArg = archive.toArg();
Main.java,Path canonicalRootPath = projectRoot.toRealPath().normalize();,if (projectRoot != null ) Path canonicalRootPath = projectRoot.toRealPath().normalize();
Main.java,"Config config = Configs.createDefaultConfig(canonicalRootPath, command.getConfigOverrides());","if (command != null ) Config config = Configs.createDefaultConfig(canonicalRootPath, command.getConfigOverrides());"
BuckLogHandler.java,LogManager manager = LogManager.getLogManager();,if (LogManager != null ) LogManager manager = LogManager.getLogManager();
BuckLogHandler.java,LogManager manager = LogManager.getLogManager();,if (LogManager != null ) LogManager manager = LogManager.getLogManager();
InterCellIntegrationTest.java,final Path buckOut = workspace.getPath(BuckConstant.getBuckOutputDirectory());,if (workspace != null ) final Path buckOut = workspace.getPath(BuckConstant.getBuckOutputDirectory());
FilesystemBackedBuildFileTreeTest.java,Path buckOut = root.resolve(BuckConstant.getBuckOutputPath());,if (root != null ) Path buckOut = root.resolve(BuckConstant.getBuckOutputPath());
ProgressEstimatorTest.java,Path p = new FakeProjectFilesystem().getRootPath();,if (FakeProjectFilesystem() != null ) Path p = new FakeProjectFilesystem().getRootPath();
ProgressEstimatorTest.java,Path p = new FakeProjectFilesystem().getRootPath();,if (FakeProjectFilesystem() != null ) Path p = new FakeProjectFilesystem().getRootPath();
ProgressEstimatorTest.java,Path p = new FakeProjectFilesystem().getRootPath();,if (FakeProjectFilesystem() != null ) Path p = new FakeProjectFilesystem().getRootPath();
ProgressEstimatorTest.java,Path p = new FakeProjectFilesystem().getRootPath();,if (FakeProjectFilesystem() != null ) Path p = new FakeProjectFilesystem().getRootPath();
JavaTest.java,List<String> pathsList = Lists.newArrayList();,if (Lists != null ) List<String> pathsList = Lists.newArrayList();
ExportFileTest.java,ProjectFilesystem projectFilesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();,if (FakeProjectFilesystem != null ) ProjectFilesystem projectFilesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();
ExportFileTest.java,ProjectFilesystem projectFilesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();,if (FakeProjectFilesystem != null ) ProjectFilesystem projectFilesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();
ExportFileTest.java,ProjectFilesystem projectFilesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();,if (FakeProjectFilesystem != null ) ProjectFilesystem projectFilesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();
AndroidBinary.java,this.primaryDexPath = getPrimaryDexPath(params.getBuildTarget());,if (getPrimaryDexPath(params != null ) this.primaryDexPath = getPrimaryDexPath(params.getBuildTarget());
AndroidInstrumentationApkDescription.java,Path primaryDexPath = AndroidBinary.getPrimaryDexPath(params.getBuildTarget());,if (AndroidBinary != null ) Path primaryDexPath = AndroidBinary.getPrimaryDexPath(params.getBuildTarget());
CxxDescriptionEnhancer.java,Path linkOutput = getLinkOutputPath(params.getBuildTarget());,if (getLinkOutputPath(params != null ) Path linkOutput = getLinkOutputPath(params.getBuildTarget());
LuaBinaryDescription.java,Path output = getOutputPath(baseParams.getBuildTarget());,if (getOutputPath(baseParams != null ) Path output = getOutputPath(baseParams.getBuildTarget());
LuaBinaryDescription.java,final Path output = getOutputPath(baseParams.getBuildTarget());,if (getOutputPath(baseParams != null ) final Path output = getOutputPath(baseParams.getBuildTarget());
LuaBinaryDescription.java,Path output = getOutputPath(params.getBuildTarget());,if (getOutputPath(params != null ) Path output = getOutputPath(params.getBuildTarget());
CachingBuildEngine.java,Path metadataDir = BuildInfo.getPathToMetadataDirectory(rule.getBuildTarget());,if (BuildInfo != null ) Path metadataDir = BuildInfo.getPathToMetadataDirectory(rule.getBuildTarget());
AppleBundle.java,Path variantDirectory = variantFilePath.getParent();,if (variantFilePath != null ) Path variantDirectory = variantFilePath.getParent();
AppleBundle.java,Path destinationPath = bundleVariantDestinationPath.resolve(variantFilePath.getFileName());,if (bundleVariantDestinationPath != null ) Path destinationPath = bundleVariantDestinationPath.resolve(variantFilePath.getFileName());
AppleDescriptions.java,ImmutableSet<SourcePath> bundleDirs = bundleDirsBuilder.build();,if (bundleDirsBuilder != null ) ImmutableSet<SourcePath> bundleDirs = bundleDirsBuilder.build();
AppleDescriptions.java,ImmutableSet<SourcePath> dirsContainingResourceDirs = dirsContainingResourceDirsBuilder.build();,if (dirsContainingResourceDirsBuilder != null ) ImmutableSet<SourcePath> dirsContainingResourceDirs = dirsContainingResourceDirsBuilder.build();
AppleDescriptions.java,ImmutableSet<SourcePath> bundleFiles = bundleFilesBuilder.build();,if (bundleFilesBuilder != null ) ImmutableSet<SourcePath> bundleFiles = bundleFilesBuilder.build();
AppleDescriptions.java,ImmutableSet<SourcePath> bundleVariantFiles = bundleVariantFilesBuilder.build();,if (bundleVariantFilesBuilder != null ) ImmutableSet<SourcePath> bundleVariantFiles = bundleVariantFilesBuilder.build();
AppleTestDescription.java,ImmutableSet<SourcePath> resourceDirs = resourceDirsBuilder.build();,if (resourceDirsBuilder != null ) ImmutableSet<SourcePath> resourceDirs = resourceDirsBuilder.build();
AppleTestDescription.java,ImmutableSet<SourcePath> dirsContainingResourceDirs = dirsContainingResourceDirsBuilder.build();,if (dirsContainingResourceDirsBuilder != null ) ImmutableSet<SourcePath> dirsContainingResourceDirs = dirsContainingResourceDirsBuilder.build();
AppleTestDescription.java,ImmutableSet<SourcePath> resourceFiles = resourceFilesBuilder.build();,if (resourceFilesBuilder != null ) ImmutableSet<SourcePath> resourceFiles = resourceFilesBuilder.build();
AppleTestDescription.java,ImmutableSet<SourcePath> resourceVariantFiles = resourceVariantFilesBuilder.build();,if (resourceVariantFilesBuilder != null ) ImmutableSet<SourcePath> resourceVariantFiles = resourceVariantFilesBuilder.build();
AppleDescriptions.java,output.cxxRuntimeType = Optional.absent();,if (Optional != null ) output.cxxRuntimeType = Optional.absent();
AppleDescriptions.java,output.linkStyle = Optional.absent();,if (Optional != null ) output.linkStyle = Optional.absent();
AppleDescriptions.java,output.soname = Optional.absent();,if (Optional != null ) output.soname = Optional.absent();
PrebuiltJarIntegrationTest.java,BuildRuleEvent.Finished finished = getRuleFinished(result.getCapturedEvents());,if (getRuleFinished(result != null ) BuildRuleEvent.Finished finished = getRuleFinished(result.getCapturedEvents());
PrebuiltJarIntegrationTest.java,finished = getRuleFinished(result.getCapturedEvents());,if (getRuleFinished(result != null ) finished = getRuleFinished(result.getCapturedEvents());
AssumptionViolationsTest.java,List<BuckEvent> capturedEvents = result.getCapturedEvents();,if (result != null ) List<BuckEvent> capturedEvents = result.getCapturedEvents();
AssumptionViolationsTest.java,message = builder.toString();,if (builder != null ) message = builder.toString();
PrebuiltPythonLibraryIntegrationTest.java,public DebuggableTemporaryFolder tmp = new DebuggableTemporaryFolder().doNotDeleteOnExit();,if (DebuggableTemporaryFolder() != null ) public DebuggableTemporaryFolder tmp = new DebuggableTemporaryFolder().doNotDeleteOnExit();
PythonBinaryIntegrationTest.java,ProcessExecutor.Result result = workspace.runCommand(link.toString());,if (workspace != null ) ProcessExecutor.Result result = workspace.runCommand(link.toString());
PythonTestIntegrationTest.java,String stderr = result.getStderr();,if (result != null ) String stderr = result.getStderr();
RageCommand.java,defectSubmitResult = interactiveReport.collectAndSubmitResult();,if (interactiveReport != null ) defectSubmitResult = interactiveReport.collectAndSubmitResult();
RageCommand.java,defectSubmitResult = automatedReport.collectAndSubmitResult();,if (automatedReport != null ) defectSubmitResult = automatedReport.collectAndSubmitResult();
AutomatedReport.java,Optional<SourceControlInfo> sourceControlInfo = Optional.absent();,if (Optional != null ) Optional<SourceControlInfo> sourceControlInfo = Optional.absent();
AutomatedReport.java,ImmutableList<BuildLogEntry> buildLogs = buildLogHelper.getBuildLogs();,if (buildLogHelper != null ) ImmutableList<BuildLogEntry> buildLogs = buildLogHelper.getBuildLogs();
InteractiveReport.java,UserReport.Builder userReport = UserReport.builder();,if (UserReport != null ) UserReport.Builder userReport = UserReport.builder();
InteractiveReport.java,Optional<SourceControlInfo> sourceControlInfo = Optional.absent();,if (Optional != null ) Optional<SourceControlInfo> sourceControlInfo = Optional.absent();
RageCommand.java,RageConfig rageConfig = RageBuckConfig.create(params.getBuckConfig());,if (RageBuckConfig != null ) RageConfig rageConfig = RageBuckConfig.create(params.getBuckConfig());
AutomatedReport.java,ImmutableList<BuildLogEntry> buildLogs = buildLogHelper.getBuildLogs();,if (buildLogHelper != null ) ImmutableList<BuildLogEntry> buildLogs = buildLogHelper.getBuildLogs();
RuleKeyBuilder.java,RuleKey subKey = subKeyBuilder.build();,if (subKeyBuilder != null ) RuleKey subKey = subKeyBuilder.build();
NumberFormatter.java,item = blockingQueue.take();,if (blockingQueue != null ) item = blockingQueue.take();
NumberFormatter.java,int capacity = Runtime.getRuntime().availableProcessors();,if (Runtime != null ) int capacity = Runtime.getRuntime().availableProcessors();
WorkerShellStep.java,String errorMessage = process.getStdErrorOutput();,if (process != null ) String errorMessage = process.getStdErrorOutput();
SimpleProcessListener.java,int bytesAvailable = buffer.remaining();,if (buffer != null ) int bytesAvailable = buffer.remaining();
SimpleProcessListener.java,int oldLimit = stdinToWrite.limit();,if (stdinToWrite != null ) int oldLimit = stdinToWrite.limit();
CoreDataModelDescription.java,ProjectFilesystem projectFilesystem = params.getProjectFilesystem();,if (params != null ) ProjectFilesystem projectFilesystem = params.getProjectFilesystem();
ProjectCommand.java,ActionGraph actionGraph = result.getActionGraph();,if (result != null ) ActionGraph actionGraph = result.getActionGraph();
ProjectTest.java,ActionGraph actionGraph = new ActionGraph(ruleResolver.getBuildRules());,if (ActionGraph(ruleResolver != null ) ActionGraph actionGraph = new ActionGraph(ruleResolver.getBuildRules());
CxxCompilableEnhancer.java,String extension = Files.getFileExtension(ent.getKey());,if (Files != null ) String extension = Files.getFileExtension(ent.getKey());
IjModuleGraph.java,Path parent = basePath.getParent();,if (basePath != null ) Path parent = basePath.getParent();
IjModuleGraph.java,parent = basePath.getParent();,if (basePath != null ) parent = basePath.getParent();
IjModuleGraphTest.java,ImmutableSet<Path> dummyAggregationStops = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<Path> dummyAggregationStops = ImmutableSet.of();
FakeDirectoryTraverser.java,this.pathsToEntries = ImmutableMap.of();,if (ImmutableMap != null ) this.pathsToEntries = ImmutableMap.of();
FakeDirectoryTraverser.java,String traversalRootPath = MorePaths.pathWithUnixSeparators(traversal.getRoot());,if (MorePaths != null ) String traversalRootPath = MorePaths.pathWithUnixSeparators(traversal.getRoot());
CxxBoostTestTest.java,ExecutionContext context = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext context = TestExecutionContext.newInstance();
CxxGtestTestTest.java,ExecutionContext context = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext context = TestExecutionContext.newInstance();
DefaultDependencyFileRuleKeyBuilderFactory.java,ImmutableSet<SourcePath> inputs = builder.getInputsSoFar();,if (builder != null ) ImmutableSet<SourcePath> inputs = builder.getInputsSoFar();
BuildFileSpecTest.java,BuildFileSpec nonRecursiveSpec = BuildFileSpec.fromPath(buildFile.getParent());,if (BuildFileSpec != null ) BuildFileSpec nonRecursiveSpec = BuildFileSpec.fromPath(buildFile.getParent());
BuildFileSpecTest.java,BuildFileSpec recursiveSpec = BuildFileSpec.fromRecursivePath(buildFile.getParent());,if (BuildFileSpec != null ) BuildFileSpec recursiveSpec = BuildFileSpec.fromRecursivePath(buildFile.getParent());
BuildFileSpecTest.java,BuildFileSpec recursiveSpec = BuildFileSpec.fromRecursivePath(buildFile.getParent());,if (BuildFileSpec != null ) BuildFileSpec recursiveSpec = BuildFileSpec.fromRecursivePath(buildFile.getParent());
BuildFileSpecTest.java,BuildFileSpec recursiveSpec = BuildFileSpec.fromRecursivePath(buildFile.getParent());,if (BuildFileSpec != null ) BuildFileSpec recursiveSpec = BuildFileSpec.fromRecursivePath(buildFile.getParent());
BuildFileSpecTest.java,BuildFileSpec recursiveSpec = BuildFileSpec.fromRecursivePath(buildFile.getParent());,if (BuildFileSpec != null ) BuildFileSpec recursiveSpec = BuildFileSpec.fromRecursivePath(buildFile.getParent());
BuildFileSpecTest.java,BuildFileSpec recursiveSpec = BuildFileSpec.fromRecursivePath(buildFile.getParent());,if (BuildFileSpec != null ) BuildFileSpec recursiveSpec = BuildFileSpec.fromRecursivePath(buildFile.getParent());
JavaDepsFinder.java,BuildTarget buildTarget = node.getBuildTarget();,if (node != null ) BuildTarget buildTarget = node.getBuildTarget();
ClassUsageTracker.java,JavaFileObject result = fileTracker.wrap(inner.next());,if (fileTracker != null ) JavaFileObject result = fileTracker.wrap(inner.next());
IjModuleGraph.java,IjLibrary library = libraryFactory.getLibrary(targetNode).orNull();,if (libraryFactory != null ) IjLibrary library = libraryFactory.getLibrary(targetNode).orNull();
HaskellDescriptionUtils.java,ImmutableList<String> flags = flagsBuilder.build();,if (flagsBuilder != null ) ImmutableList<String> flags = flagsBuilder.build();
Main.java,color = Optional.absent();,if (Optional != null ) color = Optional.absent();
DummyRDotJava.java,Path pathToJarOutputDir = outputJar.getParent();,if (outputJar != null ) Path pathToJarOutputDir = outputJar.getParent();
DefaultDependencyFileRuleKeyBuilderFactory.java,ImmutableSet<SourcePath> inputs = builder.getInputsSoFar();,if (builder != null ) ImmutableSet<SourcePath> inputs = builder.getInputsSoFar();
BuckQueryEnvironment.java,Optional<Path> path = buildFileTree.getBasePathOfAncestorTarget(buildTarget.getBasePath());,if (buildFileTree != null ) Optional<Path> path = buildFileTree.getBasePathOfAncestorTarget(buildTarget.getBasePath());
BuckEventsConsumer.java,long time = testCaseSummary.getTotalTime();,if (testCaseSummary != null ) long time = testCaseSummary.getTotalTime();
DefaultFileHashCache.java,HashCodeAndFileType.Builder builder = HashCodeAndFileType.builder();,if (HashCodeAndFileType != null ) HashCodeAndFileType.Builder builder = HashCodeAndFileType.builder();
DefaultJavaLibrary.java,Optional<Path> usedClassesFilePath = Optional.absent();,if (Optional != null ) Optional<Path> usedClassesFilePath = Optional.absent();
JarManifestWriter.java,int lineLength = builder.length();,if (builder != null ) int lineLength = builder.length();
StubJar.java,String file = fileHashCode.getKey();,if (fileHashCode != null ) String file = fileHashCode.getKey();
StubJar.java,String hashCode = fileHashCode.getValue().toString();,if (fileHashCode != null ) String hashCode = fileHashCode.getValue().toString();
IjSourceRootSimplifier.java,ImmutableSet<IjFolder> foldersToMerge = foldersToMergeBuilder.build();,if (foldersToMergeBuilder != null ) ImmutableSet<IjFolder> foldersToMerge = foldersToMergeBuilder.build();
TestFolder.java,IJFolderFactory factory = otherFolder.getFactory();,if (otherFolder != null ) IJFolderFactory factory = otherFolder.getFactory();
HaskellBinaryDescription.java,CommandTool.Builder executableBuilder = new CommandTool.Builder();,if (CommandTool != null ) CommandTool.Builder executableBuilder = new CommandTool.Builder();
HaskellBinaryDescription.java,ImmutableList<String> linkFlags = linkFlagsBuilder.build();,if (linkFlagsBuilder != null ) ImmutableList<String> linkFlags = linkFlagsBuilder.build();
HaskellBinaryDescription.java,final CommandTool executable = executableBuilder.build();,if (executableBuilder != null ) final CommandTool executable = executableBuilder.build();
HaskellDescriptionUtils.java,deps = rule.getDeps();,if (rule != null ) deps = rule.getDeps();
HaskellDescriptionUtils.java,String name = target.getShortName();,if (target != null ) String name = target.getShortName();
HaskellDescriptionUtils.java,ImmutableList<Arg> args = argsBuilder.build();,if (argsBuilder != null ) ImmutableList<Arg> args = argsBuilder.build();
HaskellDescriptionUtils.java,ImmutableList<String> flags = flagsBuilder.build();,if (flagsBuilder != null ) ImmutableList<String> flags = flagsBuilder.build();
HaskellLibraryDescription.java,BuildTarget buildTarget = params.getBuildTarget();,if (params != null ) BuildTarget buildTarget = params.getBuildTarget();
HaskellTestUtils.java,Optional<Path> compilerOptional = fakeConfig.getSystemCompiler();,if (fakeConfig != null ) Optional<Path> compilerOptional = fakeConfig.getSystemCompiler();
AppleBinaryDescription.java,Optional<BuildRule> existingRule = resolver.getRuleOptional(params.getBuildTarget());,if (resolver != null ) Optional<BuildRule> existingRule = resolver.getRuleOptional(params.getBuildTarget());
AppleBinaryDescription.java,CxxBinaryDescription.Arg delegateArg = delegate.createUnpopulatedConstructorArg();,if (delegate != null ) CxxBinaryDescription.Arg delegateArg = delegate.createUnpopulatedConstructorArg();
AppleBinaryDescription.java,Optional<BuildRule> existingRule = resolver.getRuleOptional(params.getBuildTarget());,if (resolver != null ) Optional<BuildRule> existingRule = resolver.getRuleOptional(params.getBuildTarget());
DefaultJavaLibrary.java,this.usedClassesFile = Optional.absent();,if (Optional != null ) this.usedClassesFile = Optional.absent();
ClassUsageTracker.java,boolean matches = classFileMatcher.matches();,if (classFileMatcher != null ) boolean matches = classFileMatcher.matches();
IjSourceRootSimplifier.java,IjFolder aChild = presentChildren.iterator().next();,if (presentChildren != null ) IjFolder aChild = presentChildren.iterator().next();
CachingBuildEngine.java,outputSize = Optional.of(buildInfoRecorder.getOutputSize());,if (Optional != null ) outputSize = Optional.of(buildInfoRecorder.getOutputSize());
TargetsCommand.java,String target = current.getKey();,if (current != null ) String target = current.getKey();
TargetsCommand.java,"HashCode hashCode = getHashCodeOrThrow(finalHashes, targetNode.getBuildTarget());","if (targetNode != null ) HashCode hashCode = getHashCodeOrThrow(finalHashes, targetNode.getBuildTarget());"
TargetsCommand.java,String targetFullyQualifiedName = targetNode.getBuildTarget().getFullyQualifiedName();,if (targetNode != null ) String targetFullyQualifiedName = targetNode.getBuildTarget().getFullyQualifiedName();
DefaultOnDiskBuildInfo.java,JsonElement element = new JsonStreamParser(input).next();,if (JsonStreamParser(input) != null ) JsonElement element = new JsonStreamParser(input).next();
DefaultOnDiskBuildInfo.java,JsonArray array = element.getAsJsonArray();,if (element != null ) JsonArray array = element.getAsJsonArray();
DefaultFileHashCache.java,path = relativePath.get();,if (relativePath != null ) path = relativePath.get();
TargetsCommand.java,Iterable<BuildTarget> matchingBuildTargetsWithTests = targetsAndGraph.getBuildTargets();,if (targetsAndGraph != null ) Iterable<BuildTarget> matchingBuildTargetsWithTests = targetsAndGraph.getBuildTargets();
TargetsCommand.java,TargetGraph targetGraphWithTests = targetsAndGraph.getTargetGraph();,if (targetsAndGraph != null ) TargetGraph targetGraphWithTests = targetsAndGraph.getTargetGraph();
TargetsCommand.java,String hash = hasher.hash().toString();,if (hasher != null ) String hash = hasher.hash().toString();
TargetsCommand.java,TargetGraph targetGraphWithTests = targetGraphAndNodes.getTargetGraph();,if (targetGraphAndNodes != null ) TargetGraph targetGraphWithTests = targetGraphAndNodes.getTargetGraph();
TargetsCommand.java,String targetFullyQualifiedName = targetNode.getBuildTarget().getFullyQualifiedName();,if (targetNode != null ) String targetFullyQualifiedName = targetNode.getBuildTarget().getFullyQualifiedName();
AbstractTargetGraphAndTargetNodes.java,TargetGraph targetGraph = targetGraphAndBuildTargets.getTargetGraph();,if (targetGraphAndBuildTargets != null ) TargetGraph targetGraph = targetGraphAndBuildTargets.getTargetGraph();
DefaultAndroidDirectoryResolver.java,StringTokenizer stringTokenizer = new StringTokenizer(contents.get());,if (StringTokenizer(contents != null ) StringTokenizer stringTokenizer = new StringTokenizer(contents.get());
TargetGraphToActionGraph.java,ActionGraphEvent.Started started = ActionGraphEvent.started();,if (ActionGraphEvent != null ) ActionGraphEvent.Started started = ActionGraphEvent.started();
TargetGraphToActionGraph.java,final int numberOfNodes = targetGraph.getNodes().size();,if (targetGraph != null ) final int numberOfNodes = targetGraph.getNodes().size();
TargetsCommand.java,Iterable<BuildTarget> matchingBuildTargetsWithTests = targetsAndGraph.getBuildTargets();,if (targetsAndGraph != null ) Iterable<BuildTarget> matchingBuildTargetsWithTests = targetsAndGraph.getBuildTargets();
TargetsCommand.java,TargetGraph targetGraphWithTests = targetsAndGraph.getTargetGraph();,if (targetsAndGraph != null ) TargetGraph targetGraphWithTests = targetsAndGraph.getTargetGraph();
TargetsCommand.java,String hash = hasher.hash().toString();,if (hasher != null ) String hash = hasher.hash().toString();
StubJar.java,String fileName = relativizedPath.toString();,if (relativizedPath != null ) String fileName = relativizedPath.toString();
AndroidDebugger.java,IDevice[] devices = AndroidDebugBridge.getBridge().getDevices();,if (AndroidDebugBridge != null ) IDevice[] devices = AndroidDebugBridge.getBridge().getDevices();
AndroidDebugger.java,String debugPort = String.valueOf(client.getDebuggerListenPort());,if (String != null ) String debugPort = String.valueOf(client.getDebuggerListenPort());
BuckSettingsProvider.java,state.buckExecutable = BuckExecutableDetector.getBuckExecutable();,if (BuckExecutableDetector != null ) state.buckExecutable = BuckExecutableDetector.getBuckExecutable();
PrebuiltCxxLibraryIntegrationTest.java,buildLog = workspace.getBuildLog();,if (workspace != null ) buildLog = workspace.getBuildLog();
ProjectGenerator.java,boolean skipRNBundle = ReactNativeFlavors.skipBundling(buildTargetNode.getBuildTarget());,if (ReactNativeFlavors != null ) boolean skipRNBundle = ReactNativeFlavors.skipBundling(buildTargetNode.getBuildTarget());
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
BuildSimulator.java,BuildTarget target = targetsRunning.remove().getTarget();,if (targetsRunning != null ) BuildTarget target = targetsRunning.remove().getTarget();
BuildSimulator.java,simulationCurrentMillis = targetsRunning.peek().getExpectedFinishMillis();,if (targetsRunning != null ) simulationCurrentMillis = targetsRunning.peek().getExpectedFinishMillis();
AppleDebuggableBinary.java,this.binarySourcePath = new BuildTargetSourcePath(strippedBinaryRule.getBuildTarget());,if (BuildTargetSourcePath(strippedBinaryRule != null ) this.binarySourcePath = new BuildTargetSourcePath(strippedBinaryRule.getBuildTarget());
AppleBundleDescription.java,Flavor debugFormatFlavor = flavoredDebugInfoFormat.getFlavor();,if (flavoredDebugInfoFormat != null ) Flavor debugFormatFlavor = flavoredDebugInfoFormat.getFlavor();
BuckWSServerPortUtils.java,Process p = commandLine.createProcess();,if (commandLine != null ) Process p = commandLine.createProcess();
CachingBuildEngineTest.java,BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();
CachingBuildEngineTest.java,BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();
CachingBuildEngineTest.java,BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();
CachingBuildEngineTest.java,Iterator<BuildRuleEvent> itr = orderedEvents.values().iterator();,if (orderedEvents != null ) Iterator<BuildRuleEvent> itr = orderedEvents.values().iterator();
CachingBuildEngineTest.java,Iterator<BuckEvent> eventIter = events.iterator();,if (events != null ) Iterator<BuckEvent> eventIter = events.iterator();
CachingBuildEngineTest.java,List<BuckEvent> events = listener.getEvents();,if (listener != null ) List<BuckEvent> events = listener.getEvents();
CachingBuildEngineTest.java,Iterator<BuckEvent> eventIter = events.iterator();,if (events != null ) Iterator<BuckEvent> eventIter = events.iterator();
CachingBuildEngineTest.java,Iterator<BuckEvent> eventIter = events.iterator();,if (events != null ) Iterator<BuckEvent> eventIter = events.iterator();
CxxCompilationDatabase.java,this.runtimeDeps = runtimeDepsBuilder.build();,if (runtimeDepsBuilder != null ) this.runtimeDeps = runtimeDepsBuilder.build();
CxxDescriptionEnhancer.java,exportedHeaderSymlinkTree = Optional.absent();,if (Optional != null ) exportedHeaderSymlinkTree = Optional.absent();
RuleKeyBuilder.java,this.logElms = Lists.newArrayList();,if (Lists != null ) this.logElms = Lists.newArrayList();
DaemonicParserState.java,UnflavoredBuildTarget unflavoredBuildTarget = target.getUnflavoredBuildTarget();,if (target != null ) UnflavoredBuildTarget unflavoredBuildTarget = target.getUnflavoredBuildTarget();
PerBuildState.java,target = target.withoutCell();,if (target != null ) target = target.withoutCell();
TargetGraphToActionGraph.java,hashOfTargetGraph = targetGraph.hashCode();,if (targetGraph != null ) hashOfTargetGraph = targetGraph.hashCode();
TargetsCommand.java,matchingBuildTargets = res.getBuildTargets();,if (res != null ) matchingBuildTargets = res.getBuildTargets();
TargetsCommand.java,targetGraph = res.getTargetGraph();,if (res != null ) targetGraph = res.getTargetGraph();
TargetsCommand.java,Iterable<BuildTarget> matchingBuildTargetsWithTests = targetsAndGraph.getFirst();,if (targetsAndGraph != null ) Iterable<BuildTarget> matchingBuildTargetsWithTests = targetsAndGraph.getFirst();
TargetsCommand.java,TargetGraph targetGraphWithTests = targetsAndGraph.getSecond();,if (targetsAndGraph != null ) TargetGraph targetGraphWithTests = targetsAndGraph.getSecond();
AndroidBinary.java,classpathEntriesToDex = enhancementResult.getClasspathEntriesToDex();,if (enhancementResult != null ) classpathEntriesToDex = enhancementResult.getClasspathEntriesToDex();
ArchiveStep.java,"Iterable<String> arguments = Iterables.transform(inputs, Functions.toStringFunction());","if (Functions != null ) Iterable<String> arguments = Iterables.transform(inputs, Functions.toStringFunction());"
ArchiveStepTest.java,ExecutionContext context = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext context = TestExecutionContext.newInstance();
PythonRunTestsStep.java,String testsToRunRegex = getTestsToRunRegexFromListOutput(listStep.getStdout());,if (getTestsToRunRegexFromListOutput(listStep != null ) String testsToRunRegex = getTestsToRunRegexFromListOutput(listStep.getStdout());
BuckSettingsProvider.java,public String buckExecutable = BuckExecutableDetector.detect();,if (BuckExecutableDetector != null ) public String buckExecutable = BuckExecutableDetector.detect();
BuildCommand.java,buildTargets = result.getFirst();,if (result != null ) buildTargets = result.getFirst();
TargetsCommand.java,matchingBuildTargets = res.getFirst();,if (res != null ) matchingBuildTargets = res.getFirst();
TargetsCommand.java,targetGraph = res.getSecond();,if (res != null ) targetGraph = res.getSecond();
TestCommand.java,targetGraph = result.getSecond();,if (result != null ) targetGraph = result.getSecond();
TestCommand.java,explicitBuildTargets = result.getFirst();,if (result != null ) explicitBuildTargets = result.getFirst();
UninstallCommand.java,buildTargets = result.getFirst();,if (result != null ) buildTargets = result.getFirst();
WorkspaceAndProjectGenerator.java,runnablePath = Optional.absent();,if (Optional != null ) runnablePath = Optional.absent();
ProjectCommand.java,BuildRuleResolver ruleResolver = result.getSecond();,if (result != null ) BuildRuleResolver ruleResolver = result.getSecond();
ProjectCommand.java,ActionGraph actionGraph = result.getFirst();,if (result != null ) ActionGraph actionGraph = result.getFirst();
TargetsCommand.java,actionGraph = Optional.of(result.getFirst());,if (Optional != null ) actionGraph = Optional.of(result.getFirst());
TargetsCommand.java,buildRuleResolver = Optional.of(result.getSecond());,if (Optional != null ) buildRuleResolver = Optional.of(result.getSecond());
ThriftLibraryIntegrationTest.java,BuildRuleResolver ruleResolver = actionGraphAndResolver.getSecond();,if (actionGraphAndResolver != null ) BuildRuleResolver ruleResolver = actionGraphAndResolver.getSecond();
BuckConfig.java,RawConfig.Builder builder = RawConfig.builder();,if (RawConfig != null ) RawConfig.Builder builder = RawConfig.builder();
BuckConfig.java,Path filePath = entry.getKey();,if (entry != null ) Path filePath = entry.getKey();
BuckConfig.java,Reader reader = entry.getValue();,if (entry != null ) Reader reader = entry.getValue();
BuckConfig.java,Config config = new Config(builder.build());,if (Config(builder != null ) Config config = new Config(builder.build());
Config.java,ImmutableList<Path> configFiles = configFileBuilder.build();,if (configFileBuilder != null ) ImmutableList<Path> configFiles = configFileBuilder.build();
AppleBinaryDescription.java,CxxBinaryDescription.Arg delegateArg = delegate.createUnpopulatedConstructorArg();,if (delegate != null ) CxxBinaryDescription.Arg delegateArg = delegate.createUnpopulatedConstructorArg();
DirArtifactCache.java,"result = CacheResult.hit(name, metadata.build());","if (metadata != null ) result = CacheResult.hit(name, metadata.build());"
PythonTestDescription.java,BuildRule buildRule = resolver.getRule(coveragePair.getSecond());,if (resolver != null ) BuildRule buildRule = resolver.getRule(coveragePair.getSecond());
HttpArtifactCache.java,Path file = output.get();,if (output != null ) Path file = output.get();
LoadBalancedService.java,Response response = call.execute();,if (call != null ) Response response = call.execute();
BuckBuildCommandHandler.java,VirtualFile projectPath = project.getBaseDir();,if (project != null ) VirtualFile projectPath = project.getBaseDir();
TwoLeveArtifactCacheDecoratorTest.java,LazyPath dummyFile = LazyPath.ofInstance(tmp.newFile());,if (LazyPath != null ) LazyPath dummyFile = LazyPath.ofInstance(tmp.newFile());
TwoLeveArtifactCacheDecoratorTest.java,LazyPath dummyFile = LazyPath.ofInstance(tmp.newFile());,if (LazyPath != null ) LazyPath dummyFile = LazyPath.ofInstance(tmp.newFile());
TwoLeveArtifactCacheDecoratorTest.java,LazyPath dummyFile = LazyPath.ofInstance(tmp.newFile());,if (LazyPath != null ) LazyPath dummyFile = LazyPath.ofInstance(tmp.newFile());
XctestRunTestsStep.java,ProcessExecutorParams.Builder builder = ProcessExecutorParams.builder();,if (ProcessExecutorParams != null ) ProcessExecutorParams.Builder builder = ProcessExecutorParams.builder();
ProjectFilesystemTest.java,Enumeration<ZipArchiveEntry> entries = zip.getEntries();,if (zip != null ) Enumeration<ZipArchiveEntry> entries = zip.getEntries();
ProjectFilesystemTest.java,ZipArchiveEntry entry = entries.nextElement();,if (entries != null ) ZipArchiveEntry entry = entries.nextElement();
CxxHeaders.java,CxxHeaders.Builder builder = CxxHeaders.builder();,if (CxxHeaders != null ) CxxHeaders.Builder builder = CxxHeaders.builder();
CxxLibraryDescription.java,CxxHeaders.Builder headers = CxxHeaders.builder();,if (CxxHeaders != null ) CxxHeaders.Builder headers = CxxHeaders.builder();
CxxPreprocessAndCompileStep.java,ImmutableSet<Path> values = ImmutableSet.copyOf(replacementPaths.values());,if (ImmutableSet != null ) ImmutableSet<Path> values = ImmutableSet.copyOf(replacementPaths.values());
PreprocessorDelegate.java,String absoluteString = path.toString();,if (path != null ) String absoluteString = path.toString();
PreprocessorDelegate.java,String relativeString = relativePath.toString();,if (relativePath != null ) String relativeString = relativePath.toString();
PreprocessorDelegate.java,Path root = resolver.getAbsolutePath(include.getRoot());,if (resolver != null ) Path root = resolver.getAbsolutePath(include.getRoot());
TestRunning.java,Verbosity verbosity = params.getConsole().getVerbosity();,if (params != null ) Verbosity verbosity = params.getConsole().getVerbosity();
IjProjectTemplateDataPreparer.java,fileToLookupPackageIn = folder.getInputs().first();,if (folder != null ) fileToLookupPackageIn = folder.getInputs().first();
ArchivesTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
ProjectCommand.java,ImmutableSet<BuildTarget> requiredBuildTargets = project.write();,if (project != null ) ImmutableSet<BuildTarget> requiredBuildTargets = project.write();
GoToBuckFile.java,VirtualFile parent = virtualFile.getParent();,if (virtualFile != null ) VirtualFile parent = virtualFile.getParent();
GoToBuckFile.java,VirtualFile buckFile = parent.findChild(BuckFileUtil.getBuildFileName());,if (parent != null ) VirtualFile buckFile = parent.findChild(BuckFileUtil.getBuildFileName());
GoToBuckFile.java,parent = parent.getParent();,if (parent != null ) parent = parent.getParent();
GoToBuckFile.java,buckFile = parent.findChild(BuckFileUtil.getBuildFileName());,if (parent != null ) buckFile = parent.findChild(BuckFileUtil.getBuildFileName());
JavaBuckConfig.java,File javac = new File(path.get());,if (File(path != null ) File javac = new File(path.get());
JavaBuckConfigTest.java,File javac = temporaryFolder.newFile();,if (temporaryFolder != null ) File javac = temporaryFolder.newFile();
SymlinkTree.java,this.fullLinks = fullLinks.build();,if (fullLinks != null ) this.fullLinks = fullLinks.build();
CxxPrecompiledHeader.java,replacementPaths = preprocessorDelegate.getReplacementPaths();,if (preprocessorDelegate != null ) replacementPaths = preprocessorDelegate.getReplacementPaths();
CxxDescriptionEnhancerTest.java,ProjectFilesystem filesystem = libParams.getProjectFilesystem();,if (libParams != null ) ProjectFilesystem filesystem = libParams.getProjectFilesystem();
CxxDescriptionEnhancerTest.java,ProjectFilesystem filesystem = libParams.getProjectFilesystem();,if (libParams != null ) ProjectFilesystem filesystem = libParams.getProjectFilesystem();
PrebuiltCxxLibraryDescriptionTest.java,Path path = genRule.getPathToOutput().toAbsolutePath();,if (genRule != null ) Path path = genRule.getPathToOutput().toAbsolutePath();
AbstractConsoleEventBusListener.java,elapsedTimeMs = finishedEvent.getTimestamp() - startEvent.getTimestamp();,if (startEvent != null ) elapsedTimeMs = finishedEvent.getTimestamp() - startEvent.getTimestamp();
AbstractConsoleEventBusListener.java,elapsedTimeMs = currentMillis - startEvent.getTimestamp();,if (startEvent != null ) elapsedTimeMs = currentMillis - startEvent.getTimestamp();
CxxPreprocessablesTest.java,Path rootPath = bottom.getProjectFilesystem().getRootPath();,if (bottom != null ) Path rootPath = bottom.getProjectFilesystem().getRootPath();
DepsForBuildFiles.java,this.depsForShortName = TreeMultimap.create();,if (TreeMultimap != null ) this.depsForShortName = TreeMultimap.create();
JavaDepsFinder.java,int numCandidates = candidateProviders.size();,if (candidateProviders != null ) int numCandidates = candidateProviders.size();
JavaDepsFinder.java,int numNewCandidates = newCandidates.size();,if (newCandidates != null ) int numNewCandidates = newCandidates.size();
JavaFileParser.java,totalRequiredSymbols = requiredSymbolsFromExplicitImports.build();,if (requiredSymbolsFromExplicitImports != null ) totalRequiredSymbols = requiredSymbolsFromExplicitImports.build();
ProjectWorkspace.java,expectedObject = BinaryPropertyListParser.parse(file.toFile());,if (BinaryPropertyListParser != null ) expectedObject = BinaryPropertyListParser.parse(file.toFile());
ProjectWorkspace.java,observedObject = BinaryPropertyListParser.parse(observedFile.toFile());,if (BinaryPropertyListParser != null ) observedObject = BinaryPropertyListParser.parse(observedFile.toFile());
AutodepsCommand.java,ListeningExecutorService executorService = pool.getExecutor();,if (pool != null ) ListeningExecutorService executorService = pool.getExecutor();
CxxPreprocessAndCompileTest.java,ImmutableList<String> actualCompileCommand = buildRule.makeMainStep().getCommand();,if (buildRule != null ) ImmutableList<String> actualCompileCommand = buildRule.makeMainStep().getCommand();
CxxPreprocessAndCompileTest.java,ImmutableList<String> actualPreprocessCommand = buildRule.makeMainStep().getCommand();,if (buildRule != null ) ImmutableList<String> actualPreprocessCommand = buildRule.makeMainStep().getCommand();
CxxSourceRuleFactoryTest.java,CxxPreprocessAndCompileStep step = objcPreprocessAndCompile.makeMainStep();,if (objcPreprocessAndCompile != null ) CxxPreprocessAndCompileStep step = objcPreprocessAndCompile.makeMainStep();
CxxSourceRuleFactoryTest.java,ImmutableList<String> command = rule.makeMainStep().getCommand();,if (rule != null ) ImmutableList<String> command = rule.makeMainStep().getCommand();
CxxBinaryDescriptionTest.java,CxxLink rule = binRule.getRule();,if (binRule != null ) CxxLink rule = binRule.getRule();
CxxInferEnhancer.java,CxxSourceSet.Builder sourcesBuilder = CxxSourceSet.builder();,if (CxxSourceSet != null ) CxxSourceSet.Builder sourcesBuilder = CxxSourceSet.builder();
CxxInferEnhancer.java,Set<Flavor> flavors = Sets.newHashSet(buildTarget.getFlavors());,if (Sets != null ) Set<Flavor> flavors = Sets.newHashSet(buildTarget.getFlavors());
InstrumentationStep.java,IDevice device = adbHelper.getSingleDevice();,if (adbHelper != null ) IDevice device = adbHelper.getSingleDevice();
AndroidInstrumentationTest.java,devices = Lists.newArrayList();,if (Lists != null ) devices = Lists.newArrayList();
AndroidInstrumentationTest.java,devices = Lists.newArrayList();,if (Lists != null ) devices = Lists.newArrayList();
InstrumentationStep.java,BuckXmlTestRunListener listener = new BuckXmlTestRunListener(device.getSerialNumber());,if (BuckXmlTestRunListener(device != null ) BuckXmlTestRunListener listener = new BuckXmlTestRunListener(device.getSerialNumber());
Parser.java,Set<BuildTarget> deps = Sets.newHashSet();,if (Sets != null ) Set<BuildTarget> deps = Sets.newHashSet();
Parser.java,BuildTarget unflavoredTarget = BuildTarget.of(target.getUnflavoredBuildTarget());,if (BuildTarget != null ) BuildTarget unflavoredTarget = BuildTarget.of(target.getUnflavoredBuildTarget());
TargetGraphHashing.java,HashCode result = hasher.hash();,if (hasher != null ) HashCode result = hasher.hash();
TargetGraphHashing.java,HashCode targetRuleHashCode = node.getRawInputsHashCode();,if (node != null ) HashCode targetRuleHashCode = node.getRawInputsHashCode();
Main.java,ImmutableList<BuckEventListener> eventListeners = ImmutableList.of();,if (ImmutableList != null ) ImmutableList<BuckEventListener> eventListeners = ImmutableList.of();
Main.java,cellHashCache = new DefaultFileHashCache(rootCell.getFilesystem());,if (DefaultFileHashCache(rootCell != null ) cellHashCache = new DefaultFileHashCache(rootCell.getFilesystem());
Main.java,FileHashCache fileHashCache = new StackedFileHashCache(allCaches.build());,if (StackedFileHashCache(allCaches != null ) FileHashCache fileHashCache = new StackedFileHashCache(allCaches.build());
Main.java,Locale locale = Locale.getDefault();,if (Locale != null ) Locale locale = Locale.getDefault();
Main.java,processManager = Optional.absent();,if (Optional != null ) processManager = Optional.absent();
Main.java,Optional<Path> eventsOutputPath = subcommand.getEventsOutputPath();,if (subcommand != null ) Optional<Path> eventsOutputPath = subcommand.getEventsOutputPath();
CxxPreprocessAndCompileStep.java,preprocess = preprocessBuilder.start();,if (preprocessBuilder != null ) preprocess = preprocessBuilder.start();
CxxPreprocessAndCompileStep.java,compile = compileBuilder.start();,if (compileBuilder != null ) compile = compileBuilder.start();
CxxPreprocessAndCompileStep.java,Process process = builder.start();,if (builder != null ) Process process = builder.start();
CxxTestStep.java,process = builder.start();,if (builder != null ) process = builder.start();
DTestStep.java,process = builder.start();,if (builder != null ) process = builder.start();
GoTestStep.java,process = builder.start();,if (builder != null ) process = builder.start();
ListeningProcessExecutor.java,NuProcess process = processBuilder.start();,if (processBuilder != null ) NuProcess process = processBuilder.start();
LuaBinaryIntegrationTest.java,Process process = builder.start();,if (builder != null ) Process process = builder.start();
SymlinkFileStepTest.java,Process process = builder.start();,if (builder != null ) Process process = builder.start();
TargetsCommand.java,matchingBuildTargets = res.getFirst();,if (res != null ) matchingBuildTargets = res.getFirst();
TargetsCommand.java,targetGraph = res.getSecond();,if (res != null ) targetGraph = res.getSecond();
TargetsCommand.java,List<String> resolvedAliases = Lists.newArrayList();,if (Lists != null ) List<String> resolvedAliases = Lists.newArrayList();
UnixDomainSocketLibrary.java,byte[] pathBytes = path.getBytes();,if (path != null ) byte[] pathBytes = path.getBytes();
AdbHelperTest.java,byte[] outputBytes = output.getBytes();,if (output != null ) byte[] outputBytes = output.getBytes();
ProjectFilesystemTest.java,byte[] bytes = content.getBytes();,if (content != null ) byte[] bytes = content.getBytes();
ProjectBuildFileParser.java,numRules = result.size();,if (result != null ) numRules = result.size();
ProjectBuildFileParser.java,Process process = processBuilder.start();,if (processBuilder != null ) Process process = processBuilder.start();
ParsePipeline.java,Path depCellPath = depTarget.getCellPath();,if (depTarget != null ) Path depCellPath = depTarget.getCellPath();
Parser.java,ParserConfig parserConfig = new ParserConfig(rootCell.getBuckConfig());,if (ParserConfig(rootCell != null ) ParserConfig parserConfig = new ParserConfig(rootCell.getBuckConfig());
Parser.java,buildFileSearchMethod = parserConfig.getBuildFileSearchMethod().get();,if (parserConfig != null ) buildFileSearchMethod = parserConfig.getBuildFileSearchMethod().get();
AppleLibraryIntegrationTest.java,Path projectRoot = tmp.getRootPath().toRealPath();,if (tmp != null ) Path projectRoot = tmp.getRootPath().toRealPath();
AppleLibraryIntegrationTest.java,Path projectRoot = tmp.getRootPath().toRealPath();,if (tmp != null ) Path projectRoot = tmp.getRootPath().toRealPath();
CxxInferEnhancer.java,BuildTarget inferAnalyzeBuildTarget = createInferAnalyzeBuildTarget(params.getBuildTarget());,if (createInferAnalyzeBuildTarget(params != null ) BuildTarget inferAnalyzeBuildTarget = createInferAnalyzeBuildTarget(params.getBuildTarget());
BuckBuildAction.java,BuckEventsConsumer bu = new BuckEventsConsumer(e.getProject());,if (BuckEventsConsumer(e != null ) BuckEventsConsumer bu = new BuckEventsConsumer(e.getProject());
BuckProjectGenerationAction.java,BuckEventsConsumer bu = new BuckEventsConsumer(e.getProject());,if (BuckEventsConsumer(e != null ) BuckEventsConsumer bu = new BuckEventsConsumer(e.getProject());
BuckTestAction.java,BuckEventsConsumer bu = new BuckEventsConsumer(e.getProject());,if (BuckEventsConsumer(e != null ) BuckEventsConsumer bu = new BuckEventsConsumer(e.getProject());
TargetsCommand.java,fileHashLoader = params.getFileHashCache();,if (params != null ) fileHashLoader = params.getFileHashCache();
TargetsCommand.java,String hash = hasher.hash().toString();,if (hasher != null ) String hash = hasher.hash().toString();
CxxLibrary.java,Linker linker = cxxPlatform.getLd();,if (cxxPlatform != null ) Linker linker = cxxPlatform.getLd();
CxxLinkableEnhancer.java,final Linker linker = cxxPlatform.getLd();,if (cxxPlatform != null ) final Linker linker = cxxPlatform.getLd();
PrebuiltCxxLibrary.java,Linker linker = cxxPlatform.getLd();,if (cxxPlatform != null ) Linker linker = cxxPlatform.getLd();
CxxLibraryDescriptionTest.java,Linker linker = cxxPlatform.getLd();,if (cxxPlatform != null ) Linker linker = cxxPlatform.getLd();
CxxLibraryDescriptionTest.java,Linker linker = cxxPlatform.getLd();,if (cxxPlatform != null ) Linker linker = cxxPlatform.getLd();
BuckConfig.java,Optional<BuildRule> rule = resolver.getRuleOptional(target.get());,if (resolver != null ) Optional<BuildRule> rule = resolver.getRuleOptional(target.get());
AbstractCxxSourceRuleFactory.java,"Compiler compiler = CxxSourceTypes.getCompiler(getCxxPlatform(), source.getType());","if (source != null ) Compiler compiler = CxxSourceTypes.getCompiler(getCxxPlatform(), source.getType());"
DBinaryDescription.java,ImmutableList<SourcePath> sources = args.srcs.getPaths();,if (args != null ) ImmutableList<SourcePath> sources = args.srcs.getPaths();
DTestDescription.java,ImmutableList<SourcePath> sources = args.srcs.getPaths();,if (args != null ) ImmutableList<SourcePath> sources = args.srcs.getPaths();
WorkspaceAndProjectGenerator.java,ProjectFilesystem targetFilesystem = projectCell.getFilesystem();,if (projectCell != null ) ProjectFilesystem targetFilesystem = projectCell.getFilesystem();
ProjectFilesystem.java,String entryName = path.toString();,if (path != null ) String entryName = path.toString();
WorkspaceAndProjectGenerator.java,projectName = projectDirectory.getFileName().toString();,if (projectDirectory != null ) projectName = projectDirectory.getFileName().toString();
DaemonicParserState.java,AbstractDescriptionArg constructorArg = description.createUnpopulatedConstructorArg();,if (description != null ) AbstractDescriptionArg constructorArg = description.createUnpopulatedConstructorArg();
BuildRuleResolver.java,Description<T> description = node.getDescription();,if (node != null ) Description<T> description = node.getDescription();
AppleBundle.java,final Path binaryOutputPath = binary.get().getPathToOutput();,if (binary != null ) final Path binaryOutputPath = binary.get().getPathToOutput();
TargetsCommand.java,"showRulesResult = computeShowRules(params, pool.getExecutor());","if (pool != null ) showRulesResult = computeShowRules(params, pool.getExecutor());"
TargetsCommand.java,matchingBuildTargets = ImmutableSet.of();,if (ImmutableSet != null ) matchingBuildTargets = ImmutableSet.of();
TargetsCommand.java,matchingBuildTargets = results.getFirst();,if (results != null ) matchingBuildTargets = results.getFirst();
TargetsCommand.java,graph = results.getSecond();,if (results != null ) graph = results.getSecond();
TargetsCommand.java,matchingNodes = ImmutableSortedMap.of();,if (ImmutableSortedMap != null ) matchingNodes = ImmutableSortedMap.of();
TargetsCommand.java,ImmutableSet<BuildRuleType> buildRuleTypes = buildRuleTypesBuilder.build();,if (buildRuleTypesBuilder != null ) ImmutableSet<BuildRuleType> buildRuleTypes = buildRuleTypesBuilder.build();
TargetsCommand.java,ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());,if (ParserConfig(params != null ) ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());
AndroidBuildConfigTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(buildTarget).build();,if (FakeBuildRuleParamsBuilder(buildTarget) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(buildTarget).build();
DummyRDotJavaTest.java,String genFolder = targetGenPath().toString();,if (targetGenPath() != null ) String genFolder = targetGenPath().toString();
CachingBuildEngineTest.java,final ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) final ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();
CachingBuildEngineTest.java,List<Step> buildSteps = Lists.newArrayList();,if (Lists != null ) List<Step> buildSteps = Lists.newArrayList();
CachingBuildEngineTest.java,List<BuckEvent> events = listener.getEvents();,if (listener != null ) List<BuckEvent> events = listener.getEvents();
CachingBuildEngineTest.java,Iterator<BuckEvent> eventIter = events.iterator();,if (events != null ) Iterator<BuckEvent> eventIter = events.iterator();
CachingBuildEngineTest.java,ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();
CachingBuildEngineTest.java,BuildResult result = buildResult.get();,if (buildResult != null ) BuildResult result = buildResult.get();
CachingBuildEngineTest.java,List<BuckEvent> events = listener.getEvents();,if (listener != null ) List<BuckEvent> events = listener.getEvents();
CachingBuildEngineTest.java,Iterator<BuckEvent> eventIter = events.iterator();,if (events != null ) Iterator<BuckEvent> eventIter = events.iterator();
CachingBuildEngineTest.java,ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();
CachingBuildEngineTest.java,BuildResult result = buildResult.get();,if (buildResult != null ) BuildResult result = buildResult.get();
CachingBuildEngineTest.java,ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();
CachingBuildEngineTest.java,BuildResult result = buildResult.get();,if (buildResult != null ) BuildResult result = buildResult.get();
CachingBuildEngineTest.java,ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();
CachingBuildEngineTest.java,List<BuckEvent> events = listener.getEvents();,if (listener != null ) List<BuckEvent> events = listener.getEvents();
CachingBuildEngineTest.java,Iterator<BuckEvent> eventIter = events.iterator();,if (events != null ) Iterator<BuckEvent> eventIter = events.iterator();
CachingBuildEngineTest.java,ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();
CachingBuildEngineTest.java,List<BuckEvent> events = listener.getEvents();,if (listener != null ) List<BuckEvent> events = listener.getEvents();
CachingBuildEngineTest.java,Iterator<BuckEvent> eventIter = events.iterator();,if (events != null ) Iterator<BuckEvent> eventIter = events.iterator();
CachingBuildEngineTest.java,ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();
CachingBuildEngineTest.java,List<BuckEvent> events = listener.getEvents();,if (listener != null ) List<BuckEvent> events = listener.getEvents();
CachingBuildEngineTest.java,Iterator<BuckEvent> eventIter = events.iterator();,if (events != null ) Iterator<BuckEvent> eventIter = events.iterator();
CachingBuildEngineTest.java,ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();
CachingBuildEngineTest.java,ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,final ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) final ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,final ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) final ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,final Path input = Preconditions.checkNotNull(genrule.getPathToOutput());,if (Preconditions != null ) final Path input = Preconditions.checkNotNull(genrule.getPathToOutput());
CachingBuildEngineTest.java,final ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) final ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,final ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) final ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,final Path input = Preconditions.checkNotNull(genrule.getPathToOutput());,if (Preconditions != null ) final Path input = Preconditions.checkNotNull(genrule.getPathToOutput());
CachingBuildEngineTest.java,final ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) final ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,final Path input = Preconditions.checkNotNull(genrule.getPathToOutput());,if (Preconditions != null ) final Path input = Preconditions.checkNotNull(genrule.getPathToOutput());
CachingBuildEngineTest.java,final ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) final ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,final Path input = Preconditions.checkNotNull(genrule.getPathToOutput());,if (Preconditions != null ) final Path input = Preconditions.checkNotNull(genrule.getPathToOutput());
CachingBuildEngineTest.java,final ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) final ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,final Path input = Preconditions.checkNotNull(genrule.getPathToOutput());,if (Preconditions != null ) final Path input = Preconditions.checkNotNull(genrule.getPathToOutput());
CachingBuildEngineTest.java,final ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) final ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,final Path input = Preconditions.checkNotNull(genrule.getPathToOutput());,if (Preconditions != null ) final Path input = Preconditions.checkNotNull(genrule.getPathToOutput());
CachingBuildEngineTest.java,final ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) final ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,final Path input = Preconditions.checkNotNull(genrule.getPathToOutput());,if (Preconditions != null ) final Path input = Preconditions.checkNotNull(genrule.getPathToOutput());
CachingBuildEngineTest.java,ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
ApplePackage.java,BuildRule binary = appleBundle.getBinary().get();,if (appleBundle != null ) BuildRule binary = appleBundle.getBinary().get();
AppleBundle.java,final Path binaryOutputPath = binary.get().getPathToOutput();,if (binary != null ) final Path binaryOutputPath = binary.get().getPathToOutput();
AppleDebuggableBinary.java,Set<BuildTarget> buildTargets = Sets.newHashSet();,if (Sets != null ) Set<BuildTarget> buildTargets = Sets.newHashSet();
AppleDescriptions.java,appleCxxPlatform = fatBinaryInfo.get().getRepresentativePlatform();,if (fatBinaryInfo != null ) appleCxxPlatform = fatBinaryInfo.get().getRepresentativePlatform();
AppleDescriptions.java,CxxPlatform cxxPlatform = appleCxxPlatform.getCxxPlatform();,if (appleCxxPlatform != null ) CxxPlatform cxxPlatform = appleCxxPlatform.getCxxPlatform();
CxxLibrary.java,cxxPreprocessorInputCache = Maps.newHashMap();,if (Maps != null ) cxxPreprocessorInputCache = Maps.newHashMap();
PrebuiltCxxLibrary.java,cxxPreprocessorInputCache = Maps.newHashMap();,if (Maps != null ) cxxPreprocessorInputCache = Maps.newHashMap();
HalideLibrary.java,result = builder.build();,if (builder != null ) result = builder.build();
AppleBundle.java,final Path binaryOutputPath = binary.get().getPathToOutput();,if (binary != null ) final Path binaryOutputPath = binary.get().getPathToOutput();
AppleBundleDescription.java,Flavor debugFormatFlavor = flavoredDebugInfoFormat.getFlavor();,if (flavoredDebugInfoFormat != null ) Flavor debugFormatFlavor = flavoredDebugInfoFormat.getFlavor();
ParserLeaseVendor.java,this.createdParsers = ArrayListMultimap.create();,if (ArrayListMultimap != null ) this.createdParsers = ArrayListMultimap.create();
ParserLeaseVendor.java,P parser = Preconditions.checkNotNull(parserQueue.pop());,if (Preconditions != null ) P parser = Preconditions.checkNotNull(parserQueue.pop());
ParserLeaseVendor.java,SettableFuture<P> parserFututre = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<P> parserFututre = SettableFuture.create();
ParserLeaseVendor.java,SettableFuture<P> nextRequest = parserRequests.get(cell).pollFirst();,if (parserRequests != null ) SettableFuture<P> nextRequest = parserRequests.get(cell).pollFirst();
ParsePipelineTest.java,Cell cell = fixture.getCell();,if (fixture != null ) Cell cell = fixture.getCell();
ParserLeaseVendorTest.java,ListeningExecutorService directExecutor = MoreExecutors.newDirectExecutorService();,if (MoreExecutors != null ) ListeningExecutorService directExecutor = MoreExecutors.newDirectExecutorService();
ParserLeaseVendorTest.java,int numCalls = sleepCallCount.incrementAndGet();,if (sleepCallCount != null ) int numCalls = sleepCallCount.incrementAndGet();
AppleDescriptions.java,output.supportedPlatformsRegex = Optional.absent();,if (Optional != null ) output.supportedPlatformsRegex = Optional.absent();
AbstractCxxSourceRuleFactory.java,Compiler compiler = getCompiler(source.getType());,if (getCompiler(source != null ) Compiler compiler = getCompiler(source.getType());
AbstractCxxSourceRuleFactory.java,Compiler compiler = getCompiler(source.getType());,if (getCompiler(source != null ) Compiler compiler = getCompiler(source.getType());
PrebuiltCxxLibraryDescription.java,MacroHandler macroHandler = getMacroHandler(cxxPlatform.getFlavor().toString());,if (getMacroHandler(cxxPlatform != null ) MacroHandler macroHandler = getMacroHandler(cxxPlatform.getFlavor().toString());
PrebuiltCxxLibraryDescription.java,final BuildTarget target = params.getBuildTarget();,if (params != null ) final BuildTarget target = params.getBuildTarget();
PrebuiltCxxLibraryDescriptionTest.java,Optional<String> soname = Optional.absent();,if (Optional != null ) Optional<String> soname = Optional.absent();
DefaultJavaLibraryIntegrationTest.java,int totalArtifactsCount = getAllFilesInPath(buildCache).size();,if (getAllFilesInPath(buildCache) != null ) int totalArtifactsCount = getAllFilesInPath(buildCache).size();
BuckModule.java,int port = wsPortUtils.getPort(this.mProject.getBasePath());,if (wsPortUtils != null ) int port = wsPortUtils.getPort(this.mProject.getBasePath());
BuckWSServerPortUtils.java,p = commandLine.createProcess();,if (commandLine != null ) p = commandLine.createProcess();
CxxPreprocessAndCompileTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxPreprocessAndCompileTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
BuckEventAdapter.java,JsonObject jsonObject =  jsonElement.getAsJsonObject();,if (jsonElement != null ) JsonObject jsonObject =  jsonElement.getAsJsonObject();
BuckEventAdapter.java,String typeFromJSON = prim.getAsString();,if (prim != null ) String typeFromJSON = prim.getAsString();
BuckEventBuildFinished.java,BuckBuildEndConsumer publisher = factory.getBuildEndConsumer();,if (factory != null ) BuckBuildEndConsumer publisher = factory.getBuildEndConsumer();
BuckEventBuildParseEnd.java,RulesParsingEndConsumer consumer = factory.getRulesParsingEndConsumer();,if (factory != null ) RulesParsingEndConsumer consumer = factory.getRulesParsingEndConsumer();
BuckEventBuildParseProgress.java,RulesParsingProgressUpdateConsumer consumer = factory.getRulesParsingProgressUpdateConsumer();,if (factory != null ) RulesParsingProgressUpdateConsumer consumer = factory.getRulesParsingProgressUpdateConsumer();
BuckEventBuildParseStart.java,RulesParsingStartConsumer consumer = factory.getRulesParsingStartConsumer();,if (factory != null ) RulesParsingStartConsumer consumer = factory.getRulesParsingStartConsumer();
BuckEventBuildProgressUpdated.java,BuckBuildProgressUpdateConsumer consumer = factory.getBuckBuildProgressUpdateConsumer();,if (factory != null ) BuckBuildProgressUpdateConsumer consumer = factory.getBuckBuildProgressUpdateConsumer();
BuckEventBuildStart.java,BuckBuildStartConsumer publisher = factory.getBuildStartConsumer();,if (factory != null ) BuckBuildStartConsumer publisher = factory.getBuildStartConsumer();
BuckEventCompilerError.java,CompilerErrorConsumer consumer = factory.getCompilerErrorConsumer();,if (factory != null ) CompilerErrorConsumer consumer = factory.getCompilerErrorConsumer();
BuckEventHandler.java,mGson = builder.create();,if (builder != null ) mGson = builder.create();
BuckClientTest.java,BuckEventInterface event = queue.getLastEvent();,if (queue != null ) BuckEventInterface event = queue.getLastEvent();
GoCompile.java,this.tests = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) this.tests = ImmutableSortedSet.of();
GoDescriptors.java,BuildTarget target = createSymlinkTreeTarget(sourceParams.getBuildTarget());,if (createSymlinkTreeTarget(sourceParams != null ) BuildTarget target = createSymlinkTreeTarget(sourceParams.getBuildTarget());
GoDescriptors.java,BuildTarget target = createTransitiveSymlinkTreeTarget(sourceParams.getBuildTarget());,if (createTransitiveSymlinkTreeTarget(sourceParams != null ) BuildTarget target = createTransitiveSymlinkTreeTarget(sourceParams.getBuildTarget());
GoLinkable.java,String extension = Files.getFileExtension(ruleOutput.toString());,if (Files != null ) String extension = Files.getFileExtension(ruleOutput.toString());
GoSymlinkTree.java,this.symlinkMap = mapBuilder.build();,if (mapBuilder != null ) this.symlinkMap = mapBuilder.build();
GoTestDescription.java,BuildRule untypedLibrary = resolver.getRule(args.library.get());,if (resolver != null ) BuildRule untypedLibrary = resolver.getRule(args.library.get());
GoTestDescription.java,packageName = Paths.get(args.packageName.get());,if (Paths != null ) packageName = Paths.get(args.packageName.get());
GoTestDescription.java,packageName = goBuckConfig.getDefaultPackageName(params.getBuildTarget());,if (goBuckConfig != null ) packageName = goBuckConfig.getDefaultPackageName(params.getBuildTarget());
CachingBuildEngine.java,ruleDeps = Maps.newConcurrentMap();,if (Maps != null ) ruleDeps = Maps.newConcurrentMap();
DaemonicParserState.java,this.cachedEnvironment = Optional.absent();,if (Optional != null ) this.cachedEnvironment = Optional.absent();
DaemonicParserState.java,Iterable<String> expected = cachedIncludes.get(cell.getRoot());,if (cachedIncludes != null ) Iterable<String> expected = cachedIncludes.get(cell.getRoot());
DistBuildService.java,Date date = new Date(log.getTimestampMillis());,if (Date(log != null ) Date date = new Date(log.getTimestampMillis());
DefaultJavaLibraryIntegrationTest.java,Set<String> allNames = zip.getFileNames();,if (zip != null ) Set<String> allNames = zip.getFileNames();
JavaDepsFinder.java,BuildTarget buildTarget = node.getBuildTarget();,if (node != null ) BuildTarget buildTarget = node.getBuildTarget();
JavaDepsFinder.java,JavaLibraryDescription.Arg arg = (JavaLibraryDescription.Arg) node.getConstructorArg();,if (node != null ) JavaLibraryDescription.Arg arg = (JavaLibraryDescription.Arg) node.getConstructorArg();
JavaDepsFinder.java,ProjectFilesystem filesystem = sourcePath.getFilesystem();,if (sourcePath != null ) ProjectFilesystem filesystem = sourcePath.getFilesystem();
JavaDepsFinder.java,Path absolutePath = filesystem.resolve(sourcePath.getRelativePath());,if (filesystem != null ) Path absolutePath = filesystem.resolve(sourcePath.getRelativePath());
MoreSuppliersTest.java,List<Object> results = Futures.allAsList(futures).get();,if (Futures != null ) List<Object> results = Futures.allAsList(futures).get();
PythonTestIntegrationTest.java,String stderr = result.getStderr();,if (result != null ) String stderr = result.getStderr();
ConcurrentMapCache.java,value = Preconditions.checkNotNull(loader.call());,if (Preconditions != null ) value = Preconditions.checkNotNull(loader.call());
DaemonicParserState.java,ImmutableSet<Path> dependentsOfEveryNode = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<Path> dependentsOfEveryNode = ImmutableSet.of();
DaemonicParserState.java,configs = builder.build();,if (builder != null ) configs = builder.build();
DaemonicParserState.java,BuckConfig buckConfig = cell.getBuckConfig();,if (cell != null ) BuckConfig buckConfig = cell.getBuckConfig();
Parser.java,TargetNodeSpec spec = specBuildFilePath.getKey();,if (specBuildFilePath != null ) TargetNodeSpec spec = specBuildFilePath.getKey();
Parser.java,Path buildFile = specBuildFilePath.getValue();,if (specBuildFilePath != null ) Path buildFile = specBuildFilePath.getValue();
PerBuildState.java,this.buildInputPathsUnderSymlink = Sets.newHashSet();,if (Sets != null ) this.buildInputPathsUnderSymlink = Sets.newHashSet();
PerBuildState.java,this.closer = Closer.create();,if (Closer != null ) this.closer = Closer.create();
PerBuildState.java,lastSeen = (BuildFileParseException) e.getCause();,if (e != null ) lastSeen = (BuildFileParseException) e.getCause();
PerBuildState.java,node = getTargetNode(processingScope.getBuildTarget());,if (getTargetNode(processingScope != null ) node = getTargetNode(processingScope.getBuildTarget());
AbstractConsoleEventBusListener.java,distributedBuildProgress = event.getStatus().getPercentProgress();,if (event != null ) distributedBuildProgress = event.getStatus().getPercentProgress();
EventSerializationTest.java,JsonFactory factory = mapper.getFactory();,if (mapper != null ) JsonFactory factory = mapper.getFactory();
CxxSourceRuleFactoryTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
DaemonicParserState.java,this.cachedEnvironment = ImmutableMap.of();,if (ImmutableMap != null ) this.cachedEnvironment = ImmutableMap.of();
CounterRegistryImpl.java,CountersSnapshotEvent.Started startedEvent = CountersSnapshotEvent.started();,if (CountersSnapshotEvent != null ) CountersSnapshotEvent.Started startedEvent = CountersSnapshotEvent.started();
CounterRegistryImplTest.java,this.countersStartEvent = EasyMock.newCapture();,if (EasyMock != null ) this.countersStartEvent = EasyMock.newCapture();
CounterRegistryImplTest.java,this.countersFinishEvent = EasyMock.newCapture();,if (EasyMock != null ) this.countersFinishEvent = EasyMock.newCapture();
Counter.java,CounterSnapshot.Builder builder = CounterSnapshot.builder();,if (CounterSnapshot != null ) CounterSnapshot.Builder builder = CounterSnapshot.builder();
SamplingCounterTest.java,CounterSnapshot snapshot = counter.getSnapshot();,if (counter != null ) CounterSnapshot snapshot = counter.getSnapshot();
InferMergeReportsStep.java,this.destinationFileOutputStream = new FileOutputStream(destination.toFile());,if (FileOutputStream(destination != null ) this.destinationFileOutputStream = new FileOutputStream(destination.toFile());
JsonConcatenateStepTest.java,ProjectFilesystem fs = new ProjectFilesystem(tmp.getRootPath());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem fs = new ProjectFilesystem(tmp.getRootPath());
JsonConcatenateStepTest.java,"List<Object> bugs = InferHelper.loadInferReport(workspace, mergedReport.toString());","if (mergedReport != null ) List<Object> bugs = InferHelper.loadInferReport(workspace, mergedReport.toString());"
JsonConcatenateStepTest.java,String result = workspace.getFileContents(mergedReport.toString());,if (workspace != null ) String result = workspace.getFileContents(mergedReport.toString());
JsonConcatenateStepTest.java,"List<Object> bugs = InferHelper.loadInferReport(workspace, mergedReport.toString());","if (mergedReport != null ) List<Object> bugs = InferHelper.loadInferReport(workspace, mergedReport.toString());"
JsonConcatenateStepTest.java,String result = workspace.getFileContents(mergedReport.toString());,if (workspace != null ) String result = workspace.getFileContents(mergedReport.toString());
JsonConcatenateStepTest.java,"List<Object> bugs = InferHelper.loadInferReport(workspace, mergedReport.toString());","if (mergedReport != null ) List<Object> bugs = InferHelper.loadInferReport(workspace, mergedReport.toString());"
JsonConcatenateStepTest.java,String result = workspace.getFileContents(mergedReport.toString());,if (workspace != null ) String result = workspace.getFileContents(mergedReport.toString());
JsonConcatenateStepTest.java,"List<Object> bugs = InferHelper.loadInferReport(workspace, mergedReport.toString());","if (mergedReport != null ) List<Object> bugs = InferHelper.loadInferReport(workspace, mergedReport.toString());"
BuckJobTest.java,TSerializer serializer = new TSerializer(new TBinaryProtocol.Factory());,if (TBinaryProtocol != null ) TSerializer serializer = new TSerializer(new TBinaryProtocol.Factory());
BuckJobTest.java,TDeserializer deserializer = new TDeserializer(new TBinaryProtocol.Factory());,if (TBinaryProtocol != null ) TDeserializer deserializer = new TDeserializer(new TBinaryProtocol.Factory());
LuaBinaryIntegrationTest.java,Process process = builder.start();,if (builder != null ) Process process = builder.start();
LuaBinaryIntegrationTest.java,int exitCode = process.waitFor();,if (process != null ) int exitCode = process.waitFor();
AbstractLuaPackageComponents.java,LuaPackageComponents.Builder builder = LuaPackageComponents.builder();,if (LuaPackageComponents != null ) LuaPackageComponents.Builder builder = LuaPackageComponents.builder();
LuaBinaryIntegrationTest.java,Optional<Path> luaOptional = config.getSystemLua();,if (config != null ) Optional<Path> luaOptional = config.getSystemLua();
AbstractCxxSourceRuleFactory.java,"Preprocessor tool = CxxSourceTypes.getPreprocessor(getCxxPlatform(), source.getType());","if (source != null ) Preprocessor tool = CxxSourceTypes.getPreprocessor(getCxxPlatform(), source.getType());"
PrebuiltPythonLibraryIntegrationTest.java,public DebuggableTemporaryFolder tmp = new DebuggableTemporaryFolder().doNotDeleteOnExit();,if (DebuggableTemporaryFolder() != null ) public DebuggableTemporaryFolder tmp = new DebuggableTemporaryFolder().doNotDeleteOnExit();
PythonBinaryIntegrationTest.java,ProcessExecutor.Result result = workspace.runCommand(link.toString());,if (workspace != null ) ProcessExecutor.Result result = workspace.runCommand(link.toString());
PythonTestIntegrationTest.java,String stderr = result.getStderr();,if (result != null ) String stderr = result.getStderr();
SrcZipAwareFileBundler.java,destination = absolute.getFileName();,if (absolute != null ) destination = absolute.getFileName();
SrcZipAwareFileBundlerTest.java,ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();,if (FakeProjectFilesystem != null ) ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();
SrcZipAwareFileBundlerTest.java,SrcZipAwareFileBundler bundler = new SrcZipAwareFileBundler(filesystem.getRootPath());,if (SrcZipAwareFileBundler(filesystem != null ) SrcZipAwareFileBundler bundler = new SrcZipAwareFileBundler(filesystem.getRootPath());
JavaFileParser.java,dotIndex = fullyQualifiedName.length();,if (fullyQualifiedName != null ) dotIndex = fullyQualifiedName.length();
OCamlBuildStep.java,"int nativeLinkExitCode = executeLinking(context, nativeLinkerInputs.build());","if (nativeLinkerInputs != null ) int nativeLinkExitCode = executeLinking(context, nativeLinkerInputs.build());"
OCamlIntegrationTest.java,buildLog = workspace.getBuildLog();,if (workspace != null ) buildLog = workspace.getBuildLog();
MultiArtifactCache.java,Path outputPath = output.getUnchecked();,if (output != null ) Path outputPath = output.getUnchecked();
DaemonicParserState.java,Object constructorArg = description.createUnpopulatedConstructorArg();,if (description != null ) Object constructorArg = description.createUnpopulatedConstructorArg();
OCamlBuildStep.java,"int nativeLinkExitCode = executeNativeLinking(context, nativeLinkerInputs.build());","if (nativeLinkerInputs != null ) int nativeLinkExitCode = executeNativeLinking(context, nativeLinkerInputs.build());"
OCamlRuleBuilder.java,List<NativeLinkableInput> inputs = Lists.newArrayList();,if (Lists != null ) List<NativeLinkableInput> inputs = Lists.newArrayList();
OCamlStaticLibrary.java,UnflavoredBuildTarget staticBuildTarget = staticLibraryTarget.getUnflavoredBuildTarget();,if (staticLibraryTarget != null ) UnflavoredBuildTarget staticBuildTarget = staticLibraryTarget.getUnflavoredBuildTarget();
OCamlIntegrationTest.java,BuckBuildLog buildLog = workspace.getBuildLog();,if (workspace != null ) BuckBuildLog buildLog = workspace.getBuildLog();
DirArtifactCache.java,Path artifactPath = cacheDir.resolve(ruleKey.toString());,if (cacheDir != null ) Path artifactPath = cacheDir.resolve(ruleKey.toString());
OCamlBuildStep.java,"int nativeLinkExitCode = executeLinking(context, nativeLinkerInputs.build());","if (nativeLinkerInputs != null ) int nativeLinkExitCode = executeLinking(context, nativeLinkerInputs.build());"
OCamlIntegrationTest.java,buildLog = workspace.getBuildLog();,if (workspace != null ) buildLog = workspace.getBuildLog();
OCamlBuild.java,Path baseArtifactDir = ocamlContext.getOutput().getParent();,if (ocamlContext != null ) Path baseArtifactDir = ocamlContext.getOutput().getParent();
OCamlBuildStep.java,"int nativeLinkExitCode = executeLinking(context, linkerInputs.build());","if (linkerInputs != null ) int nativeLinkExitCode = executeLinking(context, linkerInputs.build());"
OCamlBuildStep.java,"int bytecodeExitCode =  executeBytecodeLinking(context, bytecodeLinkerInputs.build());","if (bytecodeLinkerInputs != null ) int bytecodeExitCode =  executeBytecodeLinking(context, bytecodeLinkerInputs.build());"
GoTestDescription.java,Path defaultPackageName = goBuckConfig.getDefaultPackageName(params.getBuildTarget());,if (goBuckConfig != null ) Path defaultPackageName = goBuckConfig.getDefaultPackageName(params.getBuildTarget());
AbstractCxxSourceRuleFactory.java,"Preprocessor tool = CxxSourceTypes.getPreprocessor(cxxPlatform, source.getType());","if (source != null ) Preprocessor tool = CxxSourceTypes.getPreprocessor(cxxPlatform, source.getType());"
CxxPreprocessAndCompile.java,Optional<SupportsColorsInOutput> colorSupport = Optional.absent();,if (Optional != null ) Optional<SupportsColorsInOutput> colorSupport = Optional.absent();
CxxSourceRuleFactoryTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxSourceRuleFactoryTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxSourceRuleFactoryTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxSourceRuleFactoryTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxSourceRuleFactoryTest.java,SourcePath input = new BuildTargetSourcePath(dep.getBuildTarget());,if (BuildTargetSourcePath(dep != null ) SourcePath input = new BuildTargetSourcePath(dep.getBuildTarget());
CxxSourceRuleFactoryTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxSourceRuleFactoryTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxSourceRuleFactoryTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxSourceRuleFactoryTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxSourceRuleFactoryTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxSourceRuleFactoryTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxSourceRuleFactoryTest.java,CxxPreprocessAndCompileStep step = objcPreprocessAndCompile.makeMainStep();,if (objcPreprocessAndCompile != null ) CxxPreprocessAndCompileStep step = objcPreprocessAndCompile.makeMainStep();
CxxSourceRuleFactoryTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxPreprocessAndCompile.java,preprocessorEnvironment = Optional.absent();,if (Optional != null ) preprocessorEnvironment = Optional.absent();
CxxPreprocessAndCompile.java,compilerEnvironment = Optional.absent();,if (Optional != null ) compilerEnvironment = Optional.absent();
PythonRunTestsStep.java,String testsToRunRegex = getTestsToRunRegexFromListOutput(listStep.getStdout());,if (getTestsToRunRegexFromListOutput(listStep != null ) String testsToRunRegex = getTestsToRunRegexFromListOutput(listStep.getStdout());
Config.java,String value = rawValue.get();,if (rawValue != null ) String value = rawValue.get();
Config.java,String value = rawValue.get();,if (rawValue != null ) String value = rawValue.get();
Config.java,lastIndex = input.length();,if (input != null ) lastIndex = input.length();
Inis.java,Config config = ini.getConfig();,if (ini != null ) Config config = ini.getConfig();
JavaFileParser.java,parent = parent.getParent();,if (parent != null ) parent = parent.getParent();
AuditRulesCommand.java,JsonFactory factory = mapper.getJsonFactory();,if (mapper != null ) JsonFactory factory = mapper.getJsonFactory();
EventSerializationTest.java,JsonFactory factory = mapper.getJsonFactory();,if (mapper != null ) JsonFactory factory = mapper.getJsonFactory();
JavaFileParser.java,PackageDeclaration packageDecl = compilationUnit.getPackage();,if (compilationUnit != null ) PackageDeclaration packageDecl = compilationUnit.getPackage();
NdkCxxPlatforms.java,Compiler.Type compilerType = targetConfiguration.getCompiler().getType();,if (targetConfiguration != null ) Compiler.Type compilerType = targetConfiguration.getCompiler().getType();
ProjectFilesystem.java,this.projectRoot = root.normalize();,if (root != null ) this.projectRoot = root.normalize();
ProjectFilesystem.java,path = path.normalize();,if (path != null ) path = path.normalize();
Parser.java,ImmutableSet<Path> allBuildSpecs = buildFiles.build();,if (buildFiles != null ) ImmutableSet<Path> allBuildSpecs = buildFiles.build();
DirArtifactCache.java,Path artifactPath = cacheDir.resolve(ruleKey.toString());,if (cacheDir != null ) Path artifactPath = cacheDir.resolve(ruleKey.toString());
CxxLibraryDescription.java,TypeAndPlatform typeAndPlatform = getTypeAndPlatform(params.getBuildTarget());,if (getTypeAndPlatform(params != null ) TypeAndPlatform typeAndPlatform = getTypeAndPlatform(params.getBuildTarget());
Omnibus.java,NativeLinkable nativeLinkable = entry.getValue();,if (entry != null ) NativeLinkable nativeLinkable = entry.getValue();
AuditRulesCommand.java,PrintStream out = params.getConsole().getStdOut();,if (params != null ) PrintStream out = params.getConsole().getStdOut();
AuditRulesCommand.java,LinkedHashSet<String> properties = Sets.newLinkedHashSet();,if (Sets != null ) LinkedHashSet<String> properties = Sets.newLinkedHashSet();
AuditRulesCommand.java,SortedSet<String> customProperties = Sets.newTreeSet();,if (Sets != null ) SortedSet<String> customProperties = Sets.newTreeSet();
SuperConsoleEventBusListener.java,ImmutableList<Long> threadIds = renderer.getSortedThreadIds();,if (renderer != null ) ImmutableList<Long> threadIds = renderer.getSortedThreadIds();
SuperConsoleEventBusListener.java,int fullLines = threadIds.size();,if (threadIds != null ) int fullLines = threadIds.size();
MultiArtifactCacheTest.java,Path output = tmp.newFile();,if (tmp != null ) Path output = tmp.newFile();
ServedCacheIntegrationTest.java,Path fetchedContents = tmpDir.newFile();,if (tmpDir != null ) Path fetchedContents = tmpDir.newFile();
ServedCacheIntegrationTest.java,Path fetchedContents = tmpDir.newFile();,if (tmpDir != null ) Path fetchedContents = tmpDir.newFile();
ServedCacheIntegrationTest.java,Path fetchedContents = tmpDir.newFile();,if (tmpDir != null ) Path fetchedContents = tmpDir.newFile();
ServedCacheIntegrationTest.java,Path fetchedContents = tmpDir.newFile();,if (tmpDir != null ) Path fetchedContents = tmpDir.newFile();
ServedCacheIntegrationTest.java,Path fetchedContents = tmpDir.newFile();,if (tmpDir != null ) Path fetchedContents = tmpDir.newFile();
ServedCacheIntegrationTest.java,Path fetchedContents = tmpDir.newFile();,if (tmpDir != null ) Path fetchedContents = tmpDir.newFile();
ServedCacheIntegrationTest.java,Path fetchedContents = tmpDir.newFile();,if (tmpDir != null ) Path fetchedContents = tmpDir.newFile();
CxxPythonExtensionDescription.java,Set<BuildRule> extraDeps = Sets.newHashSet(originalExtraDeps.get());,if (Sets != null ) Set<BuildRule> extraDeps = Sets.newHashSet(originalExtraDeps.get());
CxxPythonExtensionDescription.java,Optional<BuildTarget> cxxLibraryTarget = python.getCxxLibrary();,if (python != null ) Optional<BuildTarget> cxxLibraryTarget = python.getCxxLibrary();
AppleNativeIntegrationTestUtils.java,BuckConfig buckConfig = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig buckConfig = FakeBuckConfig.builder().build();
FilterResourcesStep.java,Set<Path> rootResourceDirs = inResDirToOutResDirMap.keySet();,if (inResDirToOutResDirMap != null ) Set<Path> rootResourceDirs = inResDirToOutResDirMap.keySet();
AbstractFatBinaryInfo.java,sdk = platform.getAppleSdk();,if (platform != null ) sdk = platform.getAppleSdk();
AppleDescriptions.java,appleCxxPlatform = fatBinaryInfo.get().getRepresentativePlatform();,if (fatBinaryInfo != null ) appleCxxPlatform = fatBinaryInfo.get().getRepresentativePlatform();
BuckEventBuildRuleFinished.java,BuildRuleEndConsumer publisher = notifier.getBuildRuleEndConsumer();,if (notifier != null ) BuildRuleEndConsumer publisher = notifier.getBuildRuleEndConsumer();
BuckEventBuildRuleStarted.java,BuildRuleStartConsumer publisher = notifier.getBuildRuleStartConsumer();,if (notifier != null ) BuildRuleStartConsumer publisher = notifier.getBuildRuleStartConsumer();
BuckEventBuildRuleSuspended.java,BuildRuleSuspendedConsumer consumer = factory.getBuildRuleSuspendedConsumer();,if (factory != null ) BuildRuleSuspendedConsumer consumer = factory.getBuildRuleSuspendedConsumer();
BuckEventsQueue.java,BuckEventInterface currentEvent = mLowPri.poll();,if (mLowPri != null ) BuckEventInterface currentEvent = mLowPri.poll();
DefaultAndroidDirectoryResolver.java,List<File> apiVersionDirectories = Lists.newArrayList();,if (Lists != null ) List<File> apiVersionDirectories = Lists.newArrayList();
DefaultAndroidDirectoryResolver.java,List<File> androidVersionDirectories = Lists.newArrayList();,if (Lists != null ) List<File> androidVersionDirectories = Lists.newArrayList();
BuckQueryEnvironment.java,executor = Executors.newSingleThreadExecutor();,if (Executors != null ) executor = Executors.newSingleThreadExecutor();
BuckQueryEnvironmentTest.java,executor = Executors.newSingleThreadExecutor();,if (Executors != null ) executor = Executors.newSingleThreadExecutor();
TargetsCommandTest.java,executor = Executors.newSingleThreadExecutor();,if (Executors != null ) executor = Executors.newSingleThreadExecutor();
HalideLibrary.java,this.archiver = cxxPlatform.getAr();,if (cxxPlatform != null ) this.archiver = cxxPlatform.getAr();
HalideLibrary.java,this.ranlib = cxxPlatform.getRanlib();,if (cxxPlatform != null ) this.ranlib = cxxPlatform.getRanlib();
HalideLibrary.java,String shortName = getBuildTarget().getShortName();,if (getBuildTarget() != null ) String shortName = getBuildTarget().getShortName();
HalideLibraryDescription.java,BuildTarget target = createHalideCompilerBuildTarget(params.getBuildTarget());,if (createHalideCompilerBuildTarget(params != null ) BuildTarget target = createHalideCompilerBuildTarget(params.getBuildTarget());
HalideLibraryDescription.java,CxxBinary compilerRule = (CxxBinary) rule.get();,if (rule != null ) CxxBinary compilerRule = (CxxBinary) rule.get();
HalideLibraryDescription.java,CxxBinary halideCompiler = (CxxBinary) rule.get();,if (rule != null ) CxxBinary halideCompiler = (CxxBinary) rule.get();
FilterResourcesStep.java,Set<Path> rootResourceDirs = inResDirToOutResDirMap.keySet();,if (inResDirToOutResDirMap != null ) Set<Path> rootResourceDirs = inResDirToOutResDirMap.keySet();
FilterResourcesStep.java,Collection<Path> drawables = getDrawableFolders(inResDirToOutResDirMap.values());,if (getDrawableFolders(inResDirToOutResDirMap != null ) Collection<Path> drawables = getDrawableFolders(inResDirToOutResDirMap.values());
AndroidPlatformTarget.java,"buildToolsPath = ""build-tools/"" + newestBuildToolsDir.getName();","if (newestBuildToolsDir != null ) buildToolsPath = ""build-tools/"" + newestBuildToolsDir.getName();"
AndroidPlatformTarget.java,List<File> apiVersionDirectories = Lists.newArrayList();,if (Lists != null ) List<File> apiVersionDirectories = Lists.newArrayList();
AndroidPlatformTarget.java,List<File> androidVersionDirectories = Lists.newArrayList();,if (Lists != null ) List<File> androidVersionDirectories = Lists.newArrayList();
AndroidPlatformTargetTest.java,File androidSdkDir = tempDir.newFolder();,if (tempDir != null ) File androidSdkDir = tempDir.newFolder();
AndroidPlatformTargetTest.java,Path pathToAndroidSdkDir = androidSdkDir.toPath();,if (androidSdkDir != null ) Path pathToAndroidSdkDir = androidSdkDir.toPath();
AndroidPlatformTargetTest.java,AndroidPlatformTarget androidPlatformTarget = androidPlatformTargetOption.get();,if (androidPlatformTargetOption != null ) AndroidPlatformTarget androidPlatformTarget = androidPlatformTargetOption.get();
AndroidPlatformTargetTest.java,File androidSdkDir = tempDir.newFolder();,if (tempDir != null ) File androidSdkDir = tempDir.newFolder();
AndroidPlatformTargetTest.java,Path pathToAndroidSdkDir = androidSdkDir.toPath();,if (androidSdkDir != null ) Path pathToAndroidSdkDir = androidSdkDir.toPath();
AndroidPlatformTargetTest.java,AndroidPlatformTarget androidPlatformTarget = androidPlatformTargetOption.get();,if (androidPlatformTargetOption != null ) AndroidPlatformTarget androidPlatformTarget = androidPlatformTargetOption.get();
AndroidPlatformTargetTest.java,File androidSdkDir = tempDir.newFolder();,if (tempDir != null ) File androidSdkDir = tempDir.newFolder();
AndroidPlatformTargetTest.java,File androidSdkDir = tempDir.newFolder();,if (tempDir != null ) File androidSdkDir = tempDir.newFolder();
HalideLibrary.java,this.halideTargetMap = halideBuckConfig.getHalideTargetMap();,if (halideBuckConfig != null ) this.halideTargetMap = halideBuckConfig.getHalideTargetMap();
HalideLibrary.java,Tool archiver = cxxPlatform.getAr();,if (cxxPlatform != null ) Tool archiver = cxxPlatform.getAr();
AppleBundle.java,final Path binaryOutputPath = binary.get().getPathToOutput();,if (binary != null ) final Path binaryOutputPath = binary.get().getPathToOutput();
AppleDebuggableBinary.java,Set<BuildTarget> buildTargets = Sets.newHashSet();,if (Sets != null ) Set<BuildTarget> buildTargets = Sets.newHashSet();
AppleDescriptions.java,CxxPlatform cxxPlatform = appleCxxPlatform.getCxxPlatform();,if (appleCxxPlatform != null ) CxxPlatform cxxPlatform = appleCxxPlatform.getCxxPlatform();
HalideLibraryDescription.java,platformPreprocessorFlags = Optional.absent();,if (Optional != null ) platformPreprocessorFlags = Optional.absent();
HalideLibraryDescription.java,langPreprocessorFlags = Optional.absent();,if (Optional != null ) langPreprocessorFlags = Optional.absent();
TargetsCommand.java,outputPath = rule.getPathToOutput();,if (rule != null ) outputPath = rule.getPathToOutput();
QuickstartCommand.java,origin = filePath.getParent();,if (filePath != null ) origin = filePath.getParent();
SrcZipAwareFileBundlerTest.java,ImmutableList<Step> builtStepList = immutableStepList.build();,if (immutableStepList != null ) ImmutableList<Step> builtStepList = immutableStepList.build();
SrcZipAwareFileBundlerTest.java,filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) filesystem = new ProjectFilesystem(tmp.getRoot());
SrcZipAwareFileBundlerTest.java,filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) filesystem = new ProjectFilesystem(tmp.getRoot());
FilterResourcesStepTest.java,Path scaleSourceDir = scaleSource.getParent();,if (scaleSource != null ) Path scaleSourceDir = scaleSource.getParent();
FilterResourcesStepTest.java,Predicate<Path> capturedPred = predCapture.getValue();,if (predCapture != null ) Predicate<Path> capturedPred = predCapture.getValue();
ResourceFilters.java,this.others = othersBuilder.toString();,if (othersBuilder != null ) this.others = othersBuilder.toString();
ServerHealthState.java,this.latencies = Lists.newLinkedList();,if (Lists != null ) this.latencies = Lists.newLinkedList();
ServerHealthState.java,this.errors = Lists.newLinkedList();,if (Lists != null ) this.errors = Lists.newLinkedList();
ServerHealthState.java,ListIterator<Long> iterator = errors.listIterator(errors.size());,if (errors != null ) ListIterator<Long> iterator = errors.listIterator(errors.size());
ServerHealthState.java,long errorMillis = iterator.previous();,if (iterator != null ) long errorMillis = iterator.previous();
ServerHealthState.java,ListIterator<LatencySample> iterator = latencies.listIterator(latencies.size());,if (latencies != null ) ListIterator<LatencySample> iterator = latencies.listIterator(latencies.size());
ServerHealthState.java,ListIterator<Long> iterator =  errors.listIterator(errors.size());,if (errors != null ) ListIterator<Long> iterator =  errors.listIterator(errors.size());
ServerHealthState.java,long errorMillis = iterator.previous();,if (iterator != null ) long errorMillis = iterator.previous();
ServerHealthState.java,ListIterator<LatencySample> iterator =  latencies.listIterator(latencies.size());,if (latencies != null ) ListIterator<LatencySample> iterator =  latencies.listIterator(latencies.size());
ServerHealthState.java,LatencySample sample = iterator.previous();,if (iterator != null ) LatencySample sample = iterator.previous();
ServerHealthState.java,sum += sample.getLatencyMillis();,if (sample != null ) sum += sample.getLatencyMillis();
SrcZipAwareFileBundler.java,destination = absolute.getFileName();,if (absolute != null ) destination = absolute.getFileName();
SrcZipAwareFileBundlerTest.java,ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();,if (FakeProjectFilesystem != null ) ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();
SrcZipAwareFileBundlerTest.java,SrcZipAwareFileBundler bundler = new SrcZipAwareFileBundler(filesystem.getRootPath());,if (SrcZipAwareFileBundler(filesystem != null ) SrcZipAwareFileBundler bundler = new SrcZipAwareFileBundler(filesystem.getRootPath());
AppleBundle.java,final Path binaryOutputPath = binary.get().getPathToOutput();,if (binary != null ) final Path binaryOutputPath = binary.get().getPathToOutput();
AppleBundleDescription.java,Flavor debugFormatFlavor = flavoredDebugInfoFormat.getFlavor();,if (flavoredDebugInfoFormat != null ) Flavor debugFormatFlavor = flavoredDebugInfoFormat.getFlavor();
TargetsCommand.java,matchingBuildTargets = result.getFirst();,if (result != null ) matchingBuildTargets = result.getFirst();
TargetsCommand.java,targetGraph = result.getSecond();,if (result != null ) targetGraph = result.getSecond();
BuckEventBuildParseEnd.java,RulesParsingEndConsumer consumer = factory.getRulesParsingEndConsumer();,if (factory != null ) RulesParsingEndConsumer consumer = factory.getRulesParsingEndConsumer();
BuckEventBuildProgressUpdated.java,RulesParsingEndConsumer consumer = factory.getRulesParsingEndConsumer();,if (factory != null ) RulesParsingEndConsumer consumer = factory.getRulesParsingEndConsumer();
Project.java,jdkDependency = SerializableDependentModule.newStandardJdk();,if (SerializableDependentModule != null ) jdkDependency = SerializableDependentModule.newStandardJdk();
BuckConfig.java,BuildTarget target = getBuildTargetForFullyQualifiedTarget(value.get());,if (getBuildTargetForFullyQualifiedTarget(value != null ) BuildTarget target = getBuildTargetForFullyQualifiedTarget(value.get());
JavaTest.java,String source = path.toString();,if (path != null ) String source = path.toString();
Publisher.java,File pom = Pom.generatePomFile(publishable).toFile();,if (Pom != null ) File pom = Pom.generatePomFile(publishable).toFile();
SuperConsoleEventBusListener.java,int bufferSize = lastRenderClear.length();,if (lastRenderClear != null ) int bufferSize = lastRenderClear.length();
SuperConsoleEventBusListener.java,bufferSize += part.length();,if (part != null ) bufferSize += part.length();
ParallelPerBuildState.java,this.buildInputPathsUnderSymlink = Sets.newHashSet();,if (Sets != null ) this.buildInputPathsUnderSymlink = Sets.newHashSet();
ParallelPerBuildState.java,this.stdout = new PrintStream(ByteStreams.nullOutputStream());,if (PrintStream(ByteStreams != null ) this.stdout = new PrintStream(ByteStreams.nullOutputStream());
ParallelPerBuildState.java,this.stderr = new PrintStream(ByteStreams.nullOutputStream());,if (PrintStream(ByteStreams != null ) this.stderr = new PrintStream(ByteStreams.nullOutputStream());
ParallelPerBuildState.java,this.closer = Closer.create();,if (Closer != null ) this.closer = Closer.create();
ParallelPerBuildState.java,target = target.withoutCell();,if (target != null ) target = target.withoutCell();
ParallelPerBuildState.java,Path root = cell.getFilesystem().getRootPath();,if (cell != null ) Path root = cell.getFilesystem().getRootPath();
ParallelPerBuildState.java,Cell cell = cells.get(target.getCellPath());,if (cells != null ) Cell cell = cells.get(target.getCellPath());
ParallelPerBuildState.java,Path symlinkTarget = projectFilesystem.resolve(subpath).toRealPath();,if (projectFilesystem != null ) Path symlinkTarget = projectFilesystem.resolve(subpath).toRealPath();
ParallelPerBuildState.java,lastSeen = (BuildFileParseException) e.getCause();,if (e != null ) lastSeen = (BuildFileParseException) e.getCause();
ParallelPerBuildState.java,node = getTargetNode(processingScope.getBuildTarget());,if (getTargetNode(processingScope != null ) node = getTargetNode(processingScope.getBuildTarget());
Parser.java,ParserConfig config = new ParserConfig(rootCell.getBuckConfig());,if (ParserConfig(rootCell != null ) ParserConfig config = new ParserConfig(rootCell.getBuckConfig());
Parser.java,Set<BuildTarget> deps = Sets.newHashSet();,if (Sets != null ) Set<BuildTarget> deps = Sets.newHashSet();
Parser.java,BuildTarget unflavoredTarget = BuildTarget.of(target.getUnflavoredBuildTarget());,if (BuildTarget != null ) BuildTarget unflavoredTarget = BuildTarget.of(target.getUnflavoredBuildTarget());
Parser.java,ParserConfig parserConfig = new ParserConfig(rootCell.getBuckConfig());,if (ParserConfig(rootCell != null ) ParserConfig parserConfig = new ParserConfig(rootCell.getBuckConfig());
SerialPerBuildState.java,this.buildInputPathsUnderSymlink = Sets.newHashSet();,if (Sets != null ) this.buildInputPathsUnderSymlink = Sets.newHashSet();
SerialPerBuildState.java,this.stdout = new PrintStream(ByteStreams.nullOutputStream());,if (PrintStream(ByteStreams != null ) this.stdout = new PrintStream(ByteStreams.nullOutputStream());
SerialPerBuildState.java,this.stderr = new PrintStream(ByteStreams.nullOutputStream());,if (PrintStream(ByteStreams != null ) this.stderr = new PrintStream(ByteStreams.nullOutputStream());
SerialPerBuildState.java,target = target.withoutCell();,if (target != null ) target = target.withoutCell();
SerialPerBuildState.java,Path root = cell.getFilesystem().getRootPath();,if (cell != null ) Path root = cell.getFilesystem().getRootPath();
SerialPerBuildState.java,Cell cell = cells.get(target.getCellPath());,if (cells != null ) Cell cell = cells.get(target.getCellPath());
SerialPerBuildState.java,Path symlinkTarget = projectFilesystem.resolve(subpath).toRealPath();,if (projectFilesystem != null ) Path symlinkTarget = projectFilesystem.resolve(subpath).toRealPath();
ProjectFilesystemTest.java,FileSystem vfs = Jimfs.newFileSystem(Configuration.unix());,if (Jimfs != null ) FileSystem vfs = Jimfs.newFileSystem(Configuration.unix());
ProjectFilesystemTest.java,FileSystem vfs = Jimfs.newFileSystem(Configuration.osX());,if (Jimfs != null ) FileSystem vfs = Jimfs.newFileSystem(Configuration.osX());
ProjectFilesystemTest.java,FileSystem vfs = FakeFilesystems.windowsTurkishFilesystem();,if (FakeFilesystems != null ) FileSystem vfs = FakeFilesystems.windowsTurkishFilesystem();
AndroidResourceDescription.java,String fileOrDirName = fileOrDir.getFileName().toString();,if (fileOrDir != null ) String fileOrDirName = fileOrDir.getFileName().toString();
AndroidResourceDescriptionTest.java,FileSystem fakeFilesystem = FakeFilesystems.windowsTurkishFilesystem();,if (FakeFilesystems != null ) FileSystem fakeFilesystem = FakeFilesystems.windowsTurkishFilesystem();
AppleBinaryDescription.java,Optional<Path> stubBinaryPath = Optional.absent();,if (Optional != null ) Optional<Path> stubBinaryPath = Optional.absent();
AppleBinaryDescription.java,stubBinaryPath = appleCxxPlatform.get().getStubBinary();,if (appleCxxPlatform != null ) stubBinaryPath = appleCxxPlatform.get().getStubBinary();
AppleBinaryDescription.java,CxxBinaryDescription.Arg delegateArg = delegate.createUnpopulatedConstructorArg();,if (delegate != null ) CxxBinaryDescription.Arg delegateArg = delegate.createUnpopulatedConstructorArg();
CxxLibrary.java,Linker linker = cxxPlatform.getLd();,if (cxxPlatform != null ) Linker linker = cxxPlatform.getLd();
WorkspaceAndProjectGenerator.java,mainTargetNode = targetGraph.get(mainTarget.get());,if (targetGraph != null ) mainTargetNode = targetGraph.get(mainTarget.get());
ProjectCommand.java,BuildRuleType nodeType = node.getType();,if (node != null ) BuildRuleType nodeType = node.getType();
AndroidResourceDescription.java,String dirName = dir.getFileName().toString();,if (dir != null ) String dirName = dir.getFileName().toString();
AndroidResourceDescription.java,String filename = file.getFileName().toString();,if (file != null ) String filename = file.getFileName().toString();
ParallelDaemonicParserState.java,this.targetsCornucopia = HashMultimap.create();,if (HashMultimap != null ) this.targetsCornucopia = HashMultimap.create();
ParallelDaemonicParserState.java,this.buildFileDependents = HashMultimap.create();,if (HashMultimap != null ) this.buildFileDependents = HashMultimap.create();
ParallelDaemonicParserState.java,this.cachedEnvironment = ImmutableMap.of();,if (ImmutableMap != null ) this.cachedEnvironment = ImmutableMap.of();
ParallelDaemonicParserState.java,ImmutableSet<Path> dependentsOfEveryNode = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<Path> dependentsOfEveryNode = ImmutableSet.of();
ParallelDaemonicParserState.java,Object constructorArg = description.createUnpopulatedConstructorArg();,if (description != null ) Object constructorArg = description.createUnpopulatedConstructorArg();
ParallelDaemonicParserState.java,Path path = (Path) event.context();,if (event != null ) Path path = (Path) event.context();
ParallelDaemonicParserState.java,final String fileName = path.getFileName().toString();,if (path != null ) final String fileName = path.getFileName().toString();
ParallelDaemonicParserState.java,Iterable<String> expected = cachedIncludes.get(cell.getRoot());,if (cachedIncludes != null ) Iterable<String> expected = cachedIncludes.get(cell.getRoot());
SerialDaemonicParserState.java,this.targetsCornucopia = HashMultimap.create();,if (HashMultimap != null ) this.targetsCornucopia = HashMultimap.create();
SerialDaemonicParserState.java,this.buildFileDependents = HashMultimap.create();,if (HashMultimap != null ) this.buildFileDependents = HashMultimap.create();
SerialDaemonicParserState.java,this.cachedEnvironment = ImmutableMap.of();,if (ImmutableMap != null ) this.cachedEnvironment = ImmutableMap.of();
SerialDaemonicParserState.java,ImmutableSet<Path> dependentsOfEveryNode = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<Path> dependentsOfEveryNode = ImmutableSet.of();
SerialDaemonicParserState.java,Object constructorArg = description.createUnpopulatedConstructorArg();,if (description != null ) Object constructorArg = description.createUnpopulatedConstructorArg();
SerialDaemonicParserState.java,Path path = (Path) event.context();,if (event != null ) Path path = (Path) event.context();
SerialDaemonicParserState.java,final String fileName = path.getFileName().toString();,if (path != null ) final String fileName = path.getFileName().toString();
SerialDaemonicParserState.java,Iterable<String> expected = cachedIncludes.get(cell.getRoot());,if (cachedIncludes != null ) Iterable<String> expected = cachedIncludes.get(cell.getRoot());
CxxPythonExtensionDescription.java,Optional<BuildTarget> cxxLibraryTarget = python.getCxxLibrary();,if (python != null ) Optional<BuildTarget> cxxLibraryTarget = python.getCxxLibrary();
StringResources.java,byte[] resourceBytes = getUnescapedStringBytes(entry.getValue());,if (getUnescapedStringBytes(entry != null ) byte[] resourceBytes = getUnescapedStringBytes(entry.getValue());
StringResources.java,byte[] pluralValue = getUnescapedStringBytes(cat.getValue());,if (getUnescapedStringBytes(cat != null ) byte[] pluralValue = getUnescapedStringBytes(cat.getValue());
ArtifactCaches.java,URI url = cacheDescription.getUrl();,if (cacheDescription != null ) URI url = cacheDescription.getUrl();
ArtifactCaches.java,int timeoutSeconds = cacheDescription.getTimeoutSeconds();,if (cacheDescription != null ) int timeoutSeconds = cacheDescription.getTimeoutSeconds();
ArtifactCaches.java,boolean doStore = cacheDescription.getCacheReadMode().isDoStore();,if (cacheDescription != null ) boolean doStore = cacheDescription.getCacheReadMode().isDoStore();
ArtifactCaches.java,OkHttpClient fetchClient = client.clone();,if (client != null ) OkHttpClient fetchClient = client.clone();
HttpArtifactCache.java,Request request = builder.build();,if (builder != null ) Request request = builder.build();
JavacOptionsTest.java,ImmutableList<String> args = allArgs.build();,if (allArgs != null ) ImmutableList<String> args = allArgs.build();
JavacOptionsTest.java,ImmutableList<String> args = allArgs.build();,if (allArgs != null ) ImmutableList<String> args = allArgs.build();
JavacOptionsTest.java,ImmutableList<String> params = paramBuilder.build();,if (paramBuilder != null ) ImmutableList<String> params = paramBuilder.build();
IjProjectTemplateDataPreparer.java,Path moduleLocation = getModuleOutputFilePath(module.getName());,if (getModuleOutputFilePath(module != null ) Path moduleLocation = getModuleOutputFilePath(module.getName());
IjProjectTemplateDataPreparer.java,Path moduleOutputFilePath = getModuleOutputFilePath(module.getName());,if (getModuleOutputFilePath(module != null ) Path moduleOutputFilePath = getModuleOutputFilePath(module.getName());
IjProjectWriter.java,Path path = IjProjectTemplateDataPreparer.getModuleOutputFilePath(module.getName());,if (IjProjectTemplateDataPreparer != null ) Path path = IjProjectTemplateDataPreparer.getModuleOutputFilePath(module.getName());
AbstractBreadthFirstTraversal.java,toExplore = Lists.newLinkedList();,if (Lists != null ) toExplore = Lists.newLinkedList();
AbstractBreadthFirstTraversal.java,explored = Sets.newHashSet();,if (Sets != null ) explored = Sets.newHashSet();
AbstractBreadthFirstTraversal.java,Node currentNode = toExplore.remove();,if (toExplore != null ) Node currentNode = toExplore.remove();
TargetPatternEvaluator.java,targets = resolveBuildTargetPattern(alias.getFullyQualifiedName());,if (resolveBuildTargetPattern(alias != null ) targets = resolveBuildTargetPattern(alias.getFullyQualifiedName());
AndroidLibraryDescription.java,JavacOptions javacOptions = javacOptionsBuilder.build();,if (javacOptionsBuilder != null ) JavacOptions javacOptions = javacOptionsBuilder.build();
RobolectricTestDescription.java,JavacOptions javacOptions = javacOptionsBuilder.build();,if (javacOptionsBuilder != null ) JavacOptions javacOptions = javacOptionsBuilder.build();
JavaLibraryDescription.java,JavacOptions javacOptions = javacOptionsBuilder.build();,if (javacOptionsBuilder != null ) JavacOptions javacOptions = javacOptionsBuilder.build();
JavaLibraryDescription.java,SourcePath sourcePath = either.getRight();,if (either != null ) SourcePath sourcePath = either.getRight();
JavaLibraryDescription.java,BuildRule rule = possibleRule.get();,if (possibleRule != null ) BuildRule rule = possibleRule.get();
JavaLibraryDescription.java,AnnotationProcessingParams.Builder builder = new AnnotationProcessingParams.Builder();,if (AnnotationProcessingParams != null ) AnnotationProcessingParams.Builder builder = new AnnotationProcessingParams.Builder();
JavaTestDescription.java,JavacOptions javacOptions = javacOptionsBuilder.build();,if (javacOptionsBuilder != null ) JavacOptions javacOptions = javacOptionsBuilder.build();
JavaLibraryDescriptionTest.java,arg = new JavaLibraryDescription(defaults).createUnpopulatedConstructorArg();,if (JavaLibraryDescription(defaults) != null ) arg = new JavaLibraryDescription(defaults).createUnpopulatedConstructorArg();
JavaLibraryDescriptionTest.java,arg.source = Optional.absent();,if (Optional != null ) arg.source = Optional.absent();
JavaLibraryDescriptionTest.java,arg.target = Optional.absent();,if (Optional != null ) arg.target = Optional.absent();
JavaLibraryDescriptionTest.java,arg.target = Optional.absent();,if (Optional != null ) arg.target = Optional.absent();
JavaLibraryDescriptionTest.java,arg.source = Optional.absent();,if (Optional != null ) arg.source = Optional.absent();
JavaLibraryDescriptionTest.java,Javac javac = options.getJavac();,if (options != null ) Javac javac = options.getJavac();
JavaLibraryDescriptionTest.java,Javac javac = options.getJavac();,if (options != null ) Javac javac = options.getJavac();
JavaLibraryDescriptionTest.java,Javac javac = options.getJavac();,if (options != null ) Javac javac = options.getJavac();
JavaLibraryDescriptionTest.java,SourcePath sourcePath = new FakeSourcePath(externalJavac.toString());,if (FakeSourcePath(externalJavac != null ) SourcePath sourcePath = new FakeSourcePath(externalJavac.toString());
JavaLibraryDescriptionTest.java,Javac javac = options.getJavac();,if (options != null ) Javac javac = options.getJavac();
JavaLibraryDescriptionTest.java,Javac javac = options.getJavac();,if (options != null ) Javac javac = options.getJavac();
JavaLibraryDescriptionTest.java,arg.compiler = Optional.absent();,if (Optional != null ) arg.compiler = Optional.absent();
JavaLibraryDescriptionTest.java,Javac javac = options.getJavac();,if (options != null ) Javac javac = options.getJavac();
ProjectGeneratorTest.java,String fixUUIDScriptPath = ProjectGenerator.getFixUUIDScriptPath();,if (ProjectGenerator != null ) String fixUUIDScriptPath = ProjectGenerator.getFixUUIDScriptPath();
ProjectGeneratorTest.java,String codesignScriptPath = ProjectGenerator.getCodesignScriptPath();,if (ProjectGenerator != null ) String codesignScriptPath = ProjectGenerator.getCodesignScriptPath();
CxxPythonExtension.java,SourcePath output = new BuildTargetSourcePath(extension.getBuildTarget());,if (BuildTargetSourcePath(extension != null ) SourcePath output = new BuildTargetSourcePath(extension.getBuildTarget());
CxxLinkableEnhancer.java,Linker linker = cxxPlatform.getLd();,if (cxxPlatform != null ) Linker linker = cxxPlatform.getLd();
EntryAccounting.java,Calendar instance = Calendar.getInstance();,if (Calendar != null ) Calendar instance = Calendar.getInstance();
TestResultFormatterTest.java,FileSystem vfs = Jimfs.newFileSystem(Configuration.unix());,if (Jimfs != null ) FileSystem vfs = Jimfs.newFileSystem(Configuration.unix());
TestResultFormatterTest.java,FileSystem vfs = Jimfs.newFileSystem(Configuration.unix());,if (Jimfs != null ) FileSystem vfs = Jimfs.newFileSystem(Configuration.unix());
TestResultFormatterTest.java,FileSystem vfs = Jimfs.newFileSystem(Configuration.unix());,if (Jimfs != null ) FileSystem vfs = Jimfs.newFileSystem(Configuration.unix());
TestResultFormatterTest.java,FileSystem vfs = Jimfs.newFileSystem(Configuration.unix());,if (Jimfs != null ) FileSystem vfs = Jimfs.newFileSystem(Configuration.unix());
TestResultFormatterTest.java,FileSystem vfs = Jimfs.newFileSystem(Configuration.unix());,if (Jimfs != null ) FileSystem vfs = Jimfs.newFileSystem(Configuration.unix());
TestResultFormatterTest.java,FileSystem vfs = Jimfs.newFileSystem(Configuration.unix());,if (Jimfs != null ) FileSystem vfs = Jimfs.newFileSystem(Configuration.unix());
DefaultJavaLibrary.java,Path output = outputJar.get();,if (outputJar != null ) Path output = outputJar.get();
JarDirectoryStepHelper.java,Set<String> alreadyAddedEntries = Sets.newHashSet();,if (Sets != null ) Set<String> alreadyAddedEntries = Sets.newHashSet();
ProjectCommand.java,passedInTargetsSet = traversalResult.getFirst();,if (traversalResult != null ) passedInTargetsSet = traversalResult.getFirst();
ProjectCommand.java,Ide projectIde = getIdeFromBuckConfig(params.getBuckConfig()).orNull();,if (getIdeFromBuckConfig(params != null ) Ide projectIde = getIdeFromBuckConfig(params.getBuckConfig()).orNull();
ProjectCommand.java,explicitTestTargets = ImmutableSet.of();,if (ImmutableSet != null ) explicitTestTargets = ImmutableSet.of();
WatchmanWatcher.java,final long parseStartTimeMillis = clock.currentTimeMillis();,if (clock != null ) final long parseStartTimeMillis = clock.currentTimeMillis();
WatchmanWatcher.java,InputStream jsonInput = watchmanProcess.getInputStream();,if (watchmanProcess != null ) InputStream jsonInput = watchmanProcess.getInputStream();
WatchmanWatcher.java,JsonToken token = jsonParser.nextToken();,if (jsonParser != null ) JsonToken token = jsonParser.nextToken();
WatchmanWatcher.java,String fieldName = jsonParser.getCurrentName();,if (jsonParser != null ) String fieldName = jsonParser.getCurrentName();
WatchmanWatcher.java,Boolean newInstance = jsonParser.nextBooleanValue();,if (jsonParser != null ) Boolean newInstance = jsonParser.nextBooleanValue();
WatchmanWatcher.java,String message = jsonParser.nextTextValue();,if (jsonParser != null ) String message = jsonParser.nextTextValue();
WatchmanWatcher.java,token = jsonParser.nextToken();,if (jsonParser != null ) token = jsonParser.nextToken();
Main.java,ImmutableList<BuckEventListener> eventListeners = ImmutableList.of();,if (ImmutableList != null ) ImmutableList<BuckEventListener> eventListeners = ImmutableList.of();
Main.java,cellHashCache = new DefaultFileHashCache(rootCell.getFilesystem());,if (DefaultFileHashCache(rootCell != null ) cellHashCache = new DefaultFileHashCache(rootCell.getFilesystem());
Main.java,FileHashCache fileHashCache = new StackedFileHashCache(allCaches.build());,if (StackedFileHashCache(allCaches != null ) FileHashCache fileHashCache = new StackedFileHashCache(allCaches.build());
Main.java,Locale locale = Locale.getDefault();,if (Locale != null ) Locale locale = Locale.getDefault();
Main.java,processManager = Optional.absent();,if (Optional != null ) processManager = Optional.absent();
Main.java,Optional<Path> eventsOutputPath = subcommand.getEventsOutputPath();,if (subcommand != null ) Optional<Path> eventsOutputPath = subcommand.getEventsOutputPath();
Watchman.java,String stdout = listener.getStdout();,if (listener != null ) String stdout = listener.getStdout();
AutoCloseableReadWriteUpdateLock.java,AutoCloseableLock lock = new AutoCloseableLock(reentrantReadWriteUpdateLock.readLock());,if (AutoCloseableLock(reentrantReadWriteUpdateLock != null ) AutoCloseableLock lock = new AutoCloseableLock(reentrantReadWriteUpdateLock.readLock());
AutoCloseableReadWriteUpdateLock.java,AutoCloseableLock lock = new AutoCloseableLock(reentrantReadWriteUpdateLock.updateLock());,if (AutoCloseableLock(reentrantReadWriteUpdateLock != null ) AutoCloseableLock lock = new AutoCloseableLock(reentrantReadWriteUpdateLock.updateLock());
AutoCloseableReadWriteUpdateLock.java,AutoCloseableLock lock = new AutoCloseableLock(reentrantReadWriteUpdateLock.writeLock());,if (AutoCloseableLock(reentrantReadWriteUpdateLock != null ) AutoCloseableLock lock = new AutoCloseableLock(reentrantReadWriteUpdateLock.writeLock());
DefaultJavaLibraryTest.java,ImmutableList<Step> steps = commands.build();,if (commands != null ) ImmutableList<Step> steps = commands.build();
GoTestIntegrationTest.java,String stderr = result.getStderr();,if (result != null ) String stderr = result.getStderr();
FetchCommand.java,buildTargets = ruleGenerator.getDownloadableTargets();,if (ruleGenerator != null ) buildTargets = ruleGenerator.getDownloadableTargets();
ProjectCommand.java,ImmutableSet<BuildTarget> passedInTargetsSet = traversalResult.getFirst();,if (traversalResult != null ) ImmutableSet<BuildTarget> passedInTargetsSet = traversalResult.getFirst();
ProjectCommand.java,Ide projectIde = getIdeFromBuckConfig(params.getBuckConfig()).orNull();,if (getIdeFromBuckConfig(params != null ) Ide projectIde = getIdeFromBuckConfig(params.getBuckConfig()).orNull();
ProjectCommand.java,ImmutableSet<BuildTarget> supplementalGraphRoots = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<BuildTarget> supplementalGraphRoots = ImmutableSet.of();
TargetsCommand.java,matchingBuildTargets = ImmutableSet.of();,if (ImmutableSet != null ) matchingBuildTargets = ImmutableSet.of();
TargetsCommand.java,matchingBuildTargets = results.getFirst();,if (results != null ) matchingBuildTargets = results.getFirst();
TargetsCommand.java,graph = results.getSecond();,if (results != null ) graph = results.getSecond();
TargetsCommand.java,matchingNodes = ImmutableSortedMap.of();,if (ImmutableSortedMap != null ) matchingNodes = ImmutableSortedMap.of();
TargetsCommand.java,ImmutableSet<BuildRuleType> buildRuleTypes = buildRuleTypesBuilder.build();,if (buildRuleTypesBuilder != null ) ImmutableSet<BuildRuleType> buildRuleTypes = buildRuleTypesBuilder.build();
TargetsCommand.java,ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());,if (ParserConfig(params != null ) ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());
TestCommand.java,explicitBuildTargets = ImmutableSet.of();,if (ImmutableSet != null ) explicitBuildTargets = ImmutableSet.of();
TestCommand.java,targetGraph = result.getSecond();,if (result != null ) targetGraph = result.getSecond();
TestCommand.java,explicitBuildTargets = result.getFirst();,if (result != null ) explicitBuildTargets = result.getFirst();
TestCommand.java,ImmutableSet<BuildTarget> testTargets = testTargetsBuilder.build();,if (testTargetsBuilder != null ) ImmutableSet<BuildTarget> testTargets = testTargetsBuilder.build();
PerBuildState.java,this.buildInputPathsUnderSymlink = Sets.newHashSet();,if (Sets != null ) this.buildInputPathsUnderSymlink = Sets.newHashSet();
PerBuildState.java,this.stdout = new PrintStream(ByteStreams.nullOutputStream());,if (PrintStream(ByteStreams != null ) this.stdout = new PrintStream(ByteStreams.nullOutputStream());
PerBuildState.java,this.stderr = new PrintStream(ByteStreams.nullOutputStream());,if (PrintStream(ByteStreams != null ) this.stderr = new PrintStream(ByteStreams.nullOutputStream());
PerBuildState.java,target = target.withoutCell();,if (target != null ) target = target.withoutCell();
PerBuildState.java,Path root = cell.getFilesystem().getRootPath();,if (cell != null ) Path root = cell.getFilesystem().getRootPath();
PerBuildState.java,Cell cell = cells.get(target.getCellPath());,if (cells != null ) Cell cell = cells.get(target.getCellPath());
PerBuildState.java,Path symlinkTarget = projectFilesystem.resolve(subpath).toRealPath();,if (projectFilesystem != null ) Path symlinkTarget = projectFilesystem.resolve(subpath).toRealPath();
ParallelDaemonicParserState.java,Iterable<String> expected = cachedIncludes.get(cell.getRoot());,if (cachedIncludes != null ) Iterable<String> expected = cachedIncludes.get(cell.getRoot());
DaemonicParserState.java,this.targetsCornucopia = HashMultimap.create();,if (HashMultimap != null ) this.targetsCornucopia = HashMultimap.create();
DaemonicParserState.java,this.buildFileDependents = HashMultimap.create();,if (HashMultimap != null ) this.buildFileDependents = HashMultimap.create();
DaemonicParserState.java,this.cachedEnvironment = ImmutableMap.of();,if (ImmutableMap != null ) this.cachedEnvironment = ImmutableMap.of();
DaemonicParserState.java,ImmutableSet<Path> dependentsOfEveryNode = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<Path> dependentsOfEveryNode = ImmutableSet.of();
DaemonicParserState.java,Object constructorArg = description.createUnpopulatedConstructorArg();,if (description != null ) Object constructorArg = description.createUnpopulatedConstructorArg();
DaemonicParserState.java,Path path = (Path) event.context();,if (event != null ) Path path = (Path) event.context();
DaemonicParserState.java,final String fileName = path.getFileName().toString();,if (path != null ) final String fileName = path.getFileName().toString();
DaemonicParserState.java,Iterable<String> expected = cachedIncludes.get(cell.getRoot());,if (cachedIncludes != null ) Iterable<String> expected = cachedIncludes.get(cell.getRoot());
AndroidBinary.java,SourcePath sourcePath = entry.getKey();,if (entry != null ) SourcePath sourcePath = entry.getKey();
AndroidBinary.java,Path relativePath = entry.getValue();,if (entry != null ) Path relativePath = entry.getValue();
RobolectricTestRuleTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRootPath());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRootPath());
RobolectricTestRuleTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRootPath());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRootPath());
TargetsCommand.java,Path outputPath = rule.getPathToOutput();,if (rule != null ) Path outputPath = rule.getPathToOutput();
AndroidBinaryGraphEnhancer.java,Path buildConfigJar = buildConfigJavaLibrary.getPathToOutput();,if (buildConfigJavaLibrary != null ) Path buildConfigJar = buildConfigJavaLibrary.getPathToOutput();
RobolectricTestRuleTest.java,ProjectFilesystem filesystem = new FakeProjectFilesystem(temporaryFolder.getRoot());,if (FakeProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new FakeProjectFilesystem(temporaryFolder.getRoot());
RobolectricTestRuleTest.java,ProjectFilesystem filesystem = new FakeProjectFilesystem(temporaryFolder.getRoot());,if (FakeProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new FakeProjectFilesystem(temporaryFolder.getRoot());
SuperConsoleEventBusListener.java,eventName = summaryEvent.get().getTestName();,if (summaryEvent != null ) eventName = summaryEvent.get().getTestName();
SuperConsoleEventBusListener.java,eventTime = summaryEvent.get().getTimestamp();,if (summaryEvent != null ) eventTime = summaryEvent.get().getTimestamp();
SuperConsoleEventBusListener.java,eventName = leafEvent.get().getCategory();,if (leafEvent != null ) eventName = leafEvent.get().getCategory();
SuperConsoleEventBusListener.java,eventTime = leafEvent.get().getTimestamp();,if (leafEvent != null ) eventTime = leafEvent.get().getTimestamp();
AndroidLibraryGraphEnhancer.java,androidResourceDeps = ImmutableSet.of();,if (ImmutableSet != null ) androidResourceDeps = ImmutableSet.of();
AppleBuildRules.java,deps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) deps = ImmutableSortedSet.of();
TargetsCommand.java,Optional<ActionGraph> actionGraph = Optional.absent();,if (Optional != null ) Optional<ActionGraph> actionGraph = Optional.absent();
TargetsCommand.java,Optional<BuildRuleResolver> buildRuleResolver = Optional.absent();,if (Optional != null ) Optional<BuildRuleResolver> buildRuleResolver = Optional.absent();
TargetsCommand.java,Optional<RuleKeyBuilderFactory> ruleKeyBuilderFactory = Optional.absent();,if (Optional != null ) Optional<RuleKeyBuilderFactory> ruleKeyBuilderFactory = Optional.absent();
TargetsCommand.java,actionGraph = Optional.of(result.getFirst());,if (Optional != null ) actionGraph = Optional.of(result.getFirst());
TargetsCommand.java,buildRuleResolver = Optional.of(result.getSecond());,if (Optional != null ) buildRuleResolver = Optional.of(result.getSecond());
TargetsCommand.java,Path outputPath = rule.getPathToOutput();,if (rule != null ) Path outputPath = rule.getPathToOutput();
BuildCommand.java,loadLimit = (double) buckConfig.getLoadLimit();,if (buckConfig != null ) loadLimit = (double) buckConfig.getLoadLimit();
ProjectGeneratorTest.java,PBXBuildPhase fixUUIDPhase = Iterables.getLast(buildWithBuckTarget.getBuildPhases());,if (Iterables != null ) PBXBuildPhase fixUUIDPhase = Iterables.getLast(buildWithBuckTarget.getBuildPhases());
ProjectGenerator.java,BuildTarget buildTarget = input.getBuildTarget();,if (input != null ) BuildTarget buildTarget = input.getBuildTarget();
ProjectGenerator.java,String shortName = buildTarget.getShortName();,if (buildTarget != null ) String shortName = buildTarget.getShortName();
HalideBuckConfig.java,Optional<String> target = Optional.absent();,if (Optional != null ) Optional<String> target = Optional.absent();
SizeUnit.java,SizeUnit[] sizeUnits = SizeUnit.values();,if (SizeUnit != null ) SizeUnit[] sizeUnits = SizeUnit.values();
RuleMap.java,Iterable<BuildRule> rules = params.getBuildRules();,if (params != null ) Iterable<BuildRule> rules = params.getBuildRules();
InstallCommand.java,ActionGraph graph = build.getActionGraph();,if (build != null ) ActionGraph graph = build.getActionGraph();
InstallCommand.java,Build build = super.getBuild();,if (super != null ) Build build = super.getBuild();
InstallCommand.java,ActionGraph graph = build.getActionGraph();,if (build != null ) ActionGraph graph = build.getActionGraph();
InstallCommand.java,BuildRule buildRule = graph.findBuildRuleByTarget(helperTarget.get());,if (graph != null ) BuildRule buildRule = graph.findBuildRuleByTarget(helperTarget.get());
ActionGraph.java,index = builder.build();,if (builder != null ) index = builder.build();
BuildSimulator.java,Queue<BuildTarget> leafNodes = Queues.newArrayDeque();,if (Queues != null ) Queue<BuildTarget> leafNodes = Queues.newArrayDeque();
ProjectTest.java,ActionGraph actionGraph = project.getActionGraph();,if (project != null ) ActionGraph actionGraph = project.getActionGraph();
BuildSimulatorTest.java,List<BuildRule> nodes = Lists.newArrayList();,if (Lists != null ) List<BuildRule> nodes = Lists.newArrayList();
Parser.java,buildFileTree = supplier.get();,if (supplier != null ) buildFileTree = supplier.get();
Parser.java,currentBuildId = event.getBuildId();,if (event != null ) currentBuildId = event.getBuildId();
Parser.java,BuildTarget buildTarget = targetNode.getBuildTarget();,if (targetNode != null ) BuildTarget buildTarget = targetNode.getBuildTarget();
Parser.java,Set<BuildTarget> deps = Sets.newHashSet();,if (Sets != null ) Set<BuildTarget> deps = Sets.newHashSet();
Parser.java,Path path = (Path) event.context();,if (event != null ) Path path = (Path) event.context();
Parser.java,final String fileName = path.getFileName().toString();,if (path != null ) final String fileName = path.getFileName().toString();
Parser.java,List<Path> packageBuildFiles = Lists.newArrayList();,if (Lists != null ) List<Path> packageBuildFiles = Lists.newArrayList();
Parser.java,filePath = cell.getAbsolutePathToBuildFile(buildTarget).toString();,if (cell != null ) filePath = cell.getAbsolutePathToBuildFile(buildTarget).toString();
Parser.java,this.memoizedTargetNodes = CacheBuilder.newBuilder().build();,if (CacheBuilder != null ) this.memoizedTargetNodes = CacheBuilder.newBuilder().build();
Parser.java,this.symlinkExistenceCache = Maps.newHashMap();,if (Maps != null ) this.symlinkExistenceCache = Maps.newHashMap();
Parser.java,this.buildInputPathsUnderSymlink = Sets.newHashSet();,if (Sets != null ) this.buildInputPathsUnderSymlink = Sets.newHashSet();
Parser.java,this.parsedBuildFiles = ArrayListMultimap.create();,if (ArrayListMultimap != null ) this.parsedBuildFiles = ArrayListMultimap.create();
Parser.java,this.pathsToBuildTargets = ArrayListMultimap.create();,if (ArrayListMultimap != null ) this.pathsToBuildTargets = ArrayListMultimap.create();
Parser.java,this.buildFileDependents = ArrayListMultimap.create();,if (ArrayListMultimap != null ) this.buildFileDependents = ArrayListMultimap.create();
Parser.java,Object constructorArg = description.createUnpopulatedConstructorArg();,if (description != null ) Object constructorArg = description.createUnpopulatedConstructorArg();
Parser.java,Path symlinkTarget = projectFilesystem.resolve(subpath).toRealPath();,if (projectFilesystem != null ) Path symlinkTarget = projectFilesystem.resolve(subpath).toRealPath();
AppleCxxPlatforms.java,stubBinaryPath = Optional.absent();,if (Optional != null ) stubBinaryPath = Optional.absent();
AndroidBinary.java,hasNativeLibraryAssets = copyNativeLibraries.hasAssetLibraries();,if (copyNativeLibraries != null ) hasNativeLibraryAssets = copyNativeLibraries.hasAssetLibraries();
Cell.java,cellPath = cellPath.toRealPath().normalize();,if (cellPath != null ) cellPath = cellPath.toRealPath().normalize();
Cell.java,BuckConfig parentConfig = parent.getBuckConfig();,if (parent != null ) BuckConfig parentConfig = parent.getBuckConfig();
Cell.java,Path cellPath = target.getCellPath();,if (target != null ) Path cellPath = target.getCellPath();
AppleLibraryDescription.java,cxxPlatformFlavor = cxxPlatformFlavorDomain.getFlavor(buildTarget.getFlavors());,if (cxxPlatformFlavorDomain != null ) cxxPlatformFlavor = cxxPlatformFlavorDomain.getFlavor(buildTarget.getFlavors());
PrebuiltCxxLibraryDescriptionTest.java,TargetGraph targetGraph = TargetGraphFactory.newInstance(libBuilder.build());,if (TargetGraphFactory != null ) TargetGraph targetGraph = TargetGraphFactory.newInstance(libBuilder.build());
PrebuiltCxxLibraryDescriptionTest.java,PrebuiltCxxLibraryDescription.Arg arg = libBuilder.build().getConstructorArg();,if (libBuilder != null ) PrebuiltCxxLibraryDescription.Arg arg = libBuilder.build().getConstructorArg();
PrebuiltCxxLibraryDescriptionTest.java,PrebuiltCxxLibraryDescription.Arg arg = libBuilder.build().getConstructorArg();,if (libBuilder != null ) PrebuiltCxxLibraryDescription.Arg arg = libBuilder.build().getConstructorArg();
PrebuiltCxxLibraryDescriptionTest.java,PrebuiltCxxLibraryDescription.Arg arg = libBuilder.build().getConstructorArg();,if (libBuilder != null ) PrebuiltCxxLibraryDescription.Arg arg = libBuilder.build().getConstructorArg();
PrebuiltCxxLibraryDescriptionTest.java,PrebuiltCxxLibraryDescription.Arg arg = libBuilder.build().getConstructorArg();,if (libBuilder != null ) PrebuiltCxxLibraryDescription.Arg arg = libBuilder.build().getConstructorArg();
DefaultJavaLibraryTest.java,String fullyQualified = entry.getValue();,if (entry != null ) String fullyQualified = entry.getValue();
BuildSimulator.java,Queue<BuildTarget> leafNodes = Queues.newArrayDeque();,if (Queues != null ) Queue<BuildTarget> leafNodes = Queues.newArrayDeque();
Cell.java,cellPath = cellPath.toRealPath();,if (cellPath != null ) cellPath = cellPath.toRealPath();
CxxSourceRuleFactory.java,"Preprocessor preprocessor = CxxSourceTypes.getPreprocessor(cxxPlatform, source.getType());","if (source != null ) Preprocessor preprocessor = CxxSourceTypes.getPreprocessor(cxxPlatform, source.getType());"
AppleBundle.java,Path bundleDestinationPath = bundleRoot.resolve(this.destinations.getResourcesPath());,if (bundleRoot != null ) Path bundleDestinationPath = bundleRoot.resolve(this.destinations.getResourcesPath());
AppleBundle.java,Path destinationPath = bundleDestinationPath.resolve(resolvedFilePath.getFileName());,if (bundleDestinationPath != null ) Path destinationPath = bundleDestinationPath.resolve(resolvedFilePath.getFileName());
HalideLibraryBuilder.java,BuckConfig buckConfig = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig buckConfig = FakeBuckConfig.builder().build();
OCamlLinkStep.java,String linkInput = linkInputArg.stringify();,if (linkInputArg != null ) String linkInput = linkInputArg.stringify();
CxxBinaryDescriptionTest.java,BuildRuleParams depParams = new FakeBuildRuleParamsBuilder(depTarget).build();,if (FakeBuildRuleParamsBuilder(depTarget) != null ) BuildRuleParams depParams = new FakeBuildRuleParamsBuilder(depTarget).build();
CxxLibraryDescriptionTest.java,BuildRuleParams depParams = new FakeBuildRuleParamsBuilder(depTarget).build();,if (FakeBuildRuleParamsBuilder(depTarget) != null ) BuildRuleParams depParams = new FakeBuildRuleParamsBuilder(depTarget).build();
CxxLibraryDescriptionTest.java,BuildRuleParams depParams = new FakeBuildRuleParamsBuilder(depTarget).build();,if (FakeBuildRuleParamsBuilder(depTarget) != null ) BuildRuleParams depParams = new FakeBuildRuleParamsBuilder(depTarget).build();
CachingBuildEngine.java,RuleKeyFactories cellData = ruleKeyFactories.get(rule.getProjectFilesystem());,if (ruleKeyFactories != null ) RuleKeyFactories cellData = ruleKeyFactories.get(rule.getProjectFilesystem());
CxxPreprocessAndCompileStepTest.java,Path expected = replacement.toAbsolutePath();,if (replacement != null ) Path expected = replacement.toAbsolutePath();
AppleBundle.java,Path bundleDir = assetCatalog.get().getOutputDir();,if (assetCatalog != null ) Path bundleDir = assetCatalog.get().getOutputDir();
OCamlBuildStep.java,ImmutableList<String> sortedInput = sortDependency(depToolStep.getStdout());,if (sortDependency(depToolStep != null ) ImmutableList<String> sortedInput = sortDependency(depToolStep.getStdout());
OCamlBuildStep.java,ImmutableList<String> cObjects = cLinkerInputs.build();,if (cLinkerInputs != null ) ImmutableList<String> cObjects = cLinkerInputs.build();
OCamlLinkStep.java,this.ocamlInput = ocamlInputBuilder.build();,if (ocamlInputBuilder != null ) this.ocamlInput = ocamlInputBuilder.build();
DefaultExecutionEnvironment.java,String allNetworks = allNetworksResult.getStdout().get();,if (allNetworksResult != null ) String allNetworks = allNetworksResult.getStdout().get();
AbstractOCamlBuildContext.java,Path parent = mlFile.getParent();,if (mlFile != null ) Path parent = mlFile.getParent();
AbstractOCamlBuildContext.java,String yaccFileName = yaccInput.getFileName().toString();,if (yaccInput != null ) String yaccFileName = yaccInput.getFileName().toString();
AppleBundleDescription.java,appleCxxPlatform = fatBinaryInfo.get().getRepresentativePlatform();,if (fatBinaryInfo != null ) appleCxxPlatform = fatBinaryInfo.get().getRepresentativePlatform();
AppleBundleDescription.java,AppleCxxPlatform appleCxxPlatform = getAppleCxxPlatformForBuildTarget(params.getBuildTarget());,if (getAppleCxxPlatformForBuildTarget(params != null ) AppleCxxPlatform appleCxxPlatform = getAppleCxxPlatformForBuildTarget(params.getBuildTarget());
AppleBundleDescription.java,ImmutableSet<SourcePath> bundleDirs = bundleDirsBuilder.build();,if (bundleDirsBuilder != null ) ImmutableSet<SourcePath> bundleDirs = bundleDirsBuilder.build();
AppleBundleDescription.java,ImmutableSet<SourcePath> dirsContainingResourceDirs = dirsContainingResourceDirsBuilder.build();,if (dirsContainingResourceDirsBuilder != null ) ImmutableSet<SourcePath> dirsContainingResourceDirs = dirsContainingResourceDirsBuilder.build();
AppleBundleDescription.java,ImmutableSet<SourcePath> bundleFiles = bundleFilesBuilder.build();,if (bundleFilesBuilder != null ) ImmutableSet<SourcePath> bundleFiles = bundleFilesBuilder.build();
AppleBundleDescription.java,ImmutableSet<SourcePath> bundleVariantFiles = bundleVariantFilesBuilder.build();,if (bundleVariantFilesBuilder != null ) ImmutableSet<SourcePath> bundleVariantFiles = bundleVariantFilesBuilder.build();
AppleBundleDescription.java,String platformName = appleBundle.getPlatformName();,if (appleBundle != null ) String platformName = appleBundle.getPlatformName();
AppleBundleDescription.java,destinationPath = destinations.getWatchAppPath();,if (destinations != null ) destinationPath = destinations.getWatchAppPath();
AppleBundleDescription.java,destinationPath = destinations.getPlugInsPath();,if (destinations != null ) destinationPath = destinations.getPlugInsPath();
CxxDescriptionEnhancer.java,Description<T> description = node.getDescription();,if (node != null ) Description<T> description = node.getDescription();
CxxDescriptionEnhancer.java,T args = node.getConstructorArg();,if (node != null ) T args = node.getConstructorArg();
CxxLibraryDescriptionTest.java,BuildRuleParams depParams = new FakeBuildRuleParamsBuilder(depTarget).build();,if (FakeBuildRuleParamsBuilder(depTarget) != null ) BuildRuleParams depParams = new FakeBuildRuleParamsBuilder(depTarget).build();
CxxLibraryDescriptionTest.java,BuildRuleParams depParams = new FakeBuildRuleParamsBuilder(depTarget).build();,if (FakeBuildRuleParamsBuilder(depTarget) != null ) BuildRuleParams depParams = new FakeBuildRuleParamsBuilder(depTarget).build();
ExportFileDescription.java,String name = buildTarget.getBasePathWithSlash() + buildTarget.getShortNameAndFlavorPostfix();,if (buildTarget != null ) String name = buildTarget.getBasePathWithSlash() + buildTarget.getShortNameAndFlavorPostfix();
AuditOwnerCommand.java,ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());,if (ParserConfig(params != null ) ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());
BuckQueryEnvironment.java,this.parserConfig = new ParserConfig(params.getBuckConfig());,if (ParserConfig(params != null ) this.parserConfig = new ParserConfig(params.getBuckConfig());
Main.java,ParserConfig.AllowSymlinks allowSymlinks = parserConfig.getAllowSymlinks();,if (parserConfig != null ) ParserConfig.AllowSymlinks allowSymlinks = parserConfig.getAllowSymlinks();
QueryCommand.java,ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());,if (ParserConfig(params != null ) ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());
TargetPatternEvaluator.java,this.parserConfig = new ParserConfig(params.getBuckConfig());,if (ParserConfig(params != null ) this.parserConfig = new ParserConfig(params.getBuckConfig());
TargetsCommand.java,ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());,if (ParserConfig(params != null ) ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());
TargetsCommand.java,ParserConfig config = new ParserConfig(params.getBuckConfig());,if (ParserConfig(params != null ) ParserConfig config = new ParserConfig(params.getBuckConfig());
TestCommand.java,ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());,if (ParserConfig(params != null ) ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());
CopyResourcesStep.java,relativeSymlinkPath = pathToResource.getFileName();,if (pathToResource != null ) relativeSymlinkPath = pathToResource.getFileName();
CachingBuildEngine.java,RuleKeyFactories cellData = ruleKeyFactories.getUnchecked(rule.getProjectFilesystem());,if (ruleKeyFactories != null ) RuleKeyFactories cellData = ruleKeyFactories.getUnchecked(rule.getProjectFilesystem());
TargetGraph.java,this.targetsToNodes = builder.build();,if (builder != null ) this.targetsToNodes = builder.build();
BuildRuleResolver.java,this.buildRuleIndex = Maps.newConcurrentMap();,if (Maps != null ) this.buildRuleIndex = Maps.newConcurrentMap();
TypeCoercerFactory.java,Type rawType = parameterizedType.getRawType();,if (parameterizedType != null ) Type rawType = parameterizedType.getRawType();
TestResults.java,failureCount += result.getFailureCount();,if (result != null ) failureCount += result.getFailureCount();
TestResults.java,this.failures = failures.build();,if (failures != null ) this.failures = failures.build();
GoTestDescription.java,Path defaultPackageName = params.getBuildTarget().getBasePath();,if (params != null ) Path defaultPackageName = params.getBuildTarget().getBasePath();
DefaultJavaLibraryTest.java,List<Step> steps = stepsBuilder.build();,if (stepsBuilder != null ) List<Step> steps = stepsBuilder.build();
DefaultJavaLibraryTest.java,List<Step> steps = stepsBuilder.build();,if (stepsBuilder != null ) List<Step> steps = stepsBuilder.build();
KnownBuildRuleTypesTest.java,BuckConfig buckConfig = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig buckConfig = FakeBuckConfig.builder().build();
KnownBuildRuleTypesTest.java,Javac javac = libraryRule.getJavacOptions().getJavac();,if (libraryRule != null ) Javac javac = libraryRule.getJavacOptions().getJavac();
KnownBuildRuleTypesTest.java,final File javac = temporaryFolder.newFile();,if (temporaryFolder != null ) final File javac = temporaryFolder.newFile();
KnownBuildRuleTypesTest.java,BuckConfig buckConfig = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig buckConfig = FakeBuckConfig.builder().build();
KnownBuildRuleTypesTest.java,AndroidLibraryDescription.Arg arg = new AndroidLibraryDescription.Arg();,if (AndroidLibraryDescription != null ) AndroidLibraryDescription.Arg arg = new AndroidLibraryDescription.Arg();
KnownBuildRuleTypesTest.java,arg.manifest = Optional.absent();,if (Optional != null ) arg.manifest = Optional.absent();
KnownBuildRuleTypesTest.java,Javac javac = rule.getJavacOptions().getJavac();,if (rule != null ) Javac javac = rule.getJavacOptions().getJavac();
KnownBuildRuleTypesTest.java,final File javac = temporaryFolder.newFile();,if (temporaryFolder != null ) final File javac = temporaryFolder.newFile();
KnownBuildRuleTypesTest.java,AndroidLibraryDescription.Arg arg = new AndroidLibraryDescription.Arg();,if (AndroidLibraryDescription != null ) AndroidLibraryDescription.Arg arg = new AndroidLibraryDescription.Arg();
KnownBuildRuleTypesTest.java,arg.manifest = Optional.absent();,if (Optional != null ) arg.manifest = Optional.absent();
TargetsCommand.java,actionGraph = Optional.absent();,if (Optional != null ) actionGraph = Optional.absent();
AbstractBuildRule.java,this.ruleKeyBuilderFactory = buildRuleParams.getRuleKeyBuilderFactory();,if (buildRuleParams != null ) this.ruleKeyBuilderFactory = buildRuleParams.getRuleKeyBuilderFactory();
BuildRuleEvent.java,ruleKey = rule.getRuleKey().toString();,if (rule != null ) ruleKey = rule.getRuleKey().toString();
BuildRuleEvent.java,ruleKey = getBuildRule().getRuleKey();,if (getBuildRule() != null ) ruleKey = getBuildRule().getRuleKey();
CachingBuildEngine.java,StackedFileHashCache fileHashCache = new StackedFileHashCache(caches.build());,if (StackedFileHashCache(caches != null ) StackedFileHashCache fileHashCache = new StackedFileHashCache(caches.build());
DummyRDotJavaTest.java,ProjectFilesystem filesystem = dummyRDotJava.getProjectFilesystem();,if (dummyRDotJava != null ) ProjectFilesystem filesystem = dummyRDotJava.getProjectFilesystem();
FakeBuildRuleParamsBuilder.java,hashCache = fileHashCache.get();,if (fileHashCache != null ) hashCache = fileHashCache.get();
DefaultRuleKeyBuilderFactoryTest.java,RuleKey expected = builder.build();,if (builder != null ) RuleKey expected = builder.build();
Genrule.java,String localPath = MorePaths.pathWithUnixSeparators(entry.getKey());,if (MorePaths != null ) String localPath = MorePaths.pathWithUnixSeparators(entry.getKey());
Genrule.java,canonicalPath = MorePaths.absolutify(entry.getValue());,if (MorePaths != null ) canonicalPath = MorePaths.absolutify(entry.getValue());
AbiRuleKeyBuilderFactory.java,AbiRule abiRule = (AbiRule) input.getSecond();,if (input != null ) AbiRule abiRule = (AbiRule) input.getSecond();
DefaultRuleKeyBuilderFactory.java,AbstractBuildRule abstractBuildRule = (AbstractBuildRule) input.getSecond();,if (input != null ) AbstractBuildRule abstractBuildRule = (AbstractBuildRule) input.getSecond();
CachingBuildEngineTest.java,ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
AndroidPrebuiltAarBuilder.java,arg.aar = new TestSourcePath(binaryAar.toString());,if (TestSourcePath(binaryAar != null ) arg.aar = new TestSourcePath(binaryAar.toString());
JavaLibraryDescriptionTest.java,SourcePath sourcePath = new TestSourcePath(externalJavac.toString());,if (TestSourcePath(externalJavac != null ) SourcePath sourcePath = new TestSourcePath(externalJavac.toString());
JavaLibraryDescription.java,SourcePath right = left.getRight();,if (left != null ) SourcePath right = left.getRight();
DefaultOnDiskBuildInfo.java,JsonElement element = new JsonStreamParser(input).next();,if (JsonStreamParser(input) != null ) JsonElement element = new JsonStreamParser(input).next();
DefaultOnDiskBuildInfo.java,JsonArray array = element.getAsJsonArray();,if (element != null ) JsonArray array = element.getAsJsonArray();
DefaultOnDiskBuildInfo.java,JsonElement element = new JsonStreamParser(input).next();,if (JsonStreamParser(input) != null ) JsonElement element = new JsonStreamParser(input).next();
DefaultOnDiskBuildInfo.java,JsonObject multimap = element.getAsJsonObject();,if (element != null ) JsonObject multimap = element.getAsJsonObject();
DefaultRuleKeyBuilderFactory.java,BuildRule rule = input.getSecond();,if (input != null ) BuildRule rule = input.getSecond();
TestResultsGrouper.java,ImmutableSet<BuildRule> sourcesUnderTest = testRule.getSourceUnderTest();,if (testRule != null ) ImmutableSet<BuildRule> sourcesUnderTest = testRule.getSourceUnderTest();
TestResultsGrouper.java,String targetName = finishedTest.getBuildTarget().getFullyQualifiedName();,if (finishedTest != null ) String targetName = finishedTest.getBuildTarget().getFullyQualifiedName();
TestResultsGrouper.java,Set<BuildRule> allDeps = Sets.newHashSet();,if (Sets != null ) Set<BuildRule> allDeps = Sets.newHashSet();
TestResultsGrouper.java,Set<BuildRule> seen = Sets.newHashSet();,if (Sets != null ) Set<BuildRule> seen = Sets.newHashSet();
TestResultsGrouper.java,BuildRule node = queue.remove();,if (queue != null ) BuildRule node = queue.remove();
MockedMealTest.java,List<String> testNames = Lists.newArrayList();,if (Lists != null ) List<String> testNames = Lists.newArrayList();
MockedMealTest.java,List<TestRule> empty = ImmutableList.of();,if (ImmutableList != null ) List<TestRule> empty = ImmutableList.of();
MockedMealTest.java,Set<TestRule> actual = actualFlushedTestResults.keySet();,if (actualFlushedTestResults != null ) Set<TestRule> actual = actualFlushedTestResults.keySet();
MockingDSL.java,ImmutableSortedSet<BuildRule> dependenciesSet = builder.build();,if (builder != null ) ImmutableSortedSet<BuildRule> dependenciesSet = builder.build();
VacationFixture.java,List<TestName> testsSeen = Lists.newArrayList();,if (Lists != null ) List<TestName> testsSeen = Lists.newArrayList();
AppleDescriptions.java,output.cxxRuntimeType = Optional.absent();,if (Optional != null ) output.cxxRuntimeType = Optional.absent();
CxxLibraryDescription.java,arg.cxxRuntimeType = Optional.absent();,if (Optional != null ) arg.cxxRuntimeType = Optional.absent();
NativeLinkables.java,List<NativeLinkable> filtered = Lists.newArrayListWithExpectedSize(nativeLinkables.size());,if (Lists != null ) List<NativeLinkable> filtered = Lists.newArrayListWithExpectedSize(nativeLinkables.size());
NativeLinkables.java,List<NativeLinkableNode> initial = Lists.newArrayList();,if (Lists != null ) List<NativeLinkableNode> initial = Lists.newArrayList();
NativeLinkables.java,List<NativeLinkableInput> nativeLinkableInputs = Lists.newArrayList();,if (Lists != null ) List<NativeLinkableInput> nativeLinkableInputs = Lists.newArrayList();
Project.java,AnnotationProcessingParams processingParams = javaLibrary.getAnnotationProcessingParams();,if (javaLibrary != null ) AnnotationProcessingParams processingParams = javaLibrary.getAnnotationProcessingParams();
Project.java,Path annotationGenSrc = processingParams.getGeneratedSourceFolderName();,if (processingParams != null ) Path annotationGenSrc = processingParams.getGeneratedSourceFolderName();
AndroidLibraryTest.java,AnnotationProcessingParams processingParams = library.getAnnotationProcessingParams();,if (library != null ) AnnotationProcessingParams processingParams = library.getAnnotationProcessingParams();
CopyNativeLibraries.java,Optional<String> abiDirectoryComponent = getAbiDirectoryComponent(entry.getKey().getFirst());,if (getAbiDirectoryComponent(entry != null ) Optional<String> abiDirectoryComponent = getAbiDirectoryComponent(entry.getKey().getFirst());
InstallCommand.java,Optional<String> helperTarget = Optional.absent();,if (Optional != null ) Optional<String> helperTarget = Optional.absent();
InstallCommand.java,AppleConfig appleConfig = new AppleConfig(params.getBuckConfig());,if (AppleConfig(params != null ) AppleConfig appleConfig = new AppleConfig(params.getBuckConfig());
InstallCommand.java,Optional<BuildTarget> deviceHelperTarget = appleConfig.getAppleDeviceHelperTarget();,if (appleConfig != null ) Optional<BuildTarget> deviceHelperTarget = appleConfig.getAppleDeviceHelperTarget();
InstallCommand.java,InstallEvent.Started started = InstallEvent.started(appleBundle.getBuildTarget());,if (InstallEvent != null ) InstallEvent.Started started = InstallEvent.started(appleBundle.getBuildTarget());
JUnitStepTest.java,ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();,if (FakeProjectFilesystem != null ) ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();
JUnitStepTest.java,ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();,if (FakeProjectFilesystem != null ) ProjectFilesystem filesystem = FakeProjectFilesystem.createJavaOnlyFilesystem();
AdbHelper.java,final File apk = installableApk.getApkPath().toFile();,if (installableApk != null ) final File apk = installableApk.getApkPath().toFile();
AdbHelper.java,Path pathToManifest = installableApk.getManifestPath();,if (installableApk != null ) Path pathToManifest = installableApk.getManifestPath();
AdbHelper.java,Path pathToManifest = androidBinaryRule.getManifestPath();,if (androidBinaryRule != null ) Path pathToManifest = androidBinaryRule.getManifestPath();
AdbHelper.java,Path pathToManifest = androidBinaryRule.getManifestPath();,if (androidBinaryRule != null ) Path pathToManifest = androidBinaryRule.getManifestPath();
ExopackageInstaller.java,final File apk = apkRule.getApkPath().toFile();,if (apkRule != null ) final File apk = apkRule.getApkPath().toFile();
ExopackageInstaller.java,String targetFileName = dataRoot.resolve(pathRelativeToDataRoot).toString();,if (dataRoot != null ) String targetFileName = dataRoot.resolve(pathRelativeToDataRoot).toString();
AndroidResourceDescription.java,ImmutableSortedSet<Path> inputFiles = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) ImmutableSortedSet<Path> inputFiles = ImmutableSortedSet.of();
GenAidlTest.java,FileSystem vfs = Jimfs.newFileSystem(Configuration.unix());,if (Jimfs != null ) FileSystem vfs = Jimfs.newFileSystem(Configuration.unix());
ProGuardConfigTest.java,Optional<Path> proGuardJarOverride = proGuardConfig.getProguardJarOverride();,if (proGuardConfig != null ) Optional<Path> proGuardJarOverride = proGuardConfig.getProguardJarOverride();
ProGuardConfigTest.java,Optional<Path> proGuardJarOverride = proGuardConfig.getProguardJarOverride();,if (proGuardConfig != null ) Optional<Path> proGuardJarOverride = proGuardConfig.getProguardJarOverride();
ArtifactCaches.java,DirCacheEntry dirCacheConfig = buckConfig.getDirCache();,if (buckConfig != null ) DirCacheEntry dirCacheConfig = buckConfig.getDirCache();
Project.java,module.keystorePath = relativePath.relativize(keystoreProperties.getKeystore());,if (relativePath != null ) module.keystorePath = relativePath.relativize(keystoreProperties.getKeystore());
CxxPreprocessAndCompile.java,preprocessorCommand = Optional.absent();,if (Optional != null ) preprocessorCommand = Optional.absent();
ArtifactCaches.java,Path cacheDir = buckConfig.getCacheDir();,if (buckConfig != null ) Path cacheDir = buckConfig.getCacheDir();
ArtifactCaches.java,boolean doStore = buckConfig.getDirCacheReadMode().isDoStore();,if (buckConfig != null ) boolean doStore = buckConfig.getDirCacheReadMode().isDoStore();
NewNativeTargetProjectMutator.java,List<String> customFlags = sourceWithFlags.getFlags();,if (sourceWithFlags != null ) List<String> customFlags = sourceWithFlags.getFlags();
ProjectGenerator.java,ImmutableSet<String> allCxxFlags = allCxxFlagsBuilder.build();,if (allCxxFlagsBuilder != null ) ImmutableSet<String> allCxxFlags = allCxxFlagsBuilder.build();
DaemonicParserState.java,this.allRawNodes = CacheBuilder.newBuilder().build();,if (CacheBuilder != null ) this.allRawNodes = CacheBuilder.newBuilder().build();
DaemonicParserState.java,this.allTargetNodes = CacheBuilder.newBuilder().build();,if (CacheBuilder != null ) this.allTargetNodes = CacheBuilder.newBuilder().build();
BuildFileSpecTest.java,ImmutableSet<Path> ignore = ImmutableSet.of(ignoredBuildFile.getParent());,if (ImmutableSet != null ) ImmutableSet<Path> ignore = ImmutableSet.of(ignoredBuildFile.getParent());
ComputeExopackageDepsAbi.java,Path path = entry.getKey();,if (entry != null ) Path path = entry.getKey();
BuildCommand.java,ArtifactCache artifactCache = params.getArtifactCache();,if (params != null ) ArtifactCache artifactCache = params.getArtifactCache();
HangMonitorTest.java,String report = result.get();,if (result != null ) String report = result.get();
ProjectGenerator.java,String compDir = cxxPlatform.getDebugPathSanitizer().getCompilationDirectory();,if (cxxPlatform != null ) String compDir = cxxPlatform.getDebugPathSanitizer().getCompilationDirectory();
ProjectGenerator.java,String escapedBuildTarget = Escaper.escapeAsBashString(buildTarget.getFullyQualifiedName());,if (Escaper != null ) String escapedBuildTarget = Escaper.escapeAsBashString(buildTarget.getFullyQualifiedName());
BuildFileSpecTest.java,ImmutableSet<Path> ignore = ImmutableSet.of(ignoredBuildFile.getParent());,if (ImmutableSet != null ) ImmutableSet<Path> ignore = ImmutableSet.of(ignoredBuildFile.getParent());
AbstractBuildRule.java,ruleKey = ruleKeyBuilderFactory.newInstance(this).build();,if (ruleKeyBuilderFactory != null ) ruleKey = ruleKeyBuilderFactory.newInstance(this).build();
CxxPreprocessAndCompileTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxPreprocessAndCompileTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxPreprocessAndCompileTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxPreprocessAndCompileTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
CxxPreprocessAndCompileTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
DefaultJavaLibraryTest.java,RuleKey originalRuleKey = factory.newInstance(library).build();,if (factory != null ) RuleKey originalRuleKey = factory.newInstance(library).build();
DefaultJavaLibraryTest.java,RuleKey unaffectedRuleKey = factory.newInstance(library).build();,if (factory != null ) RuleKey unaffectedRuleKey = factory.newInstance(library).build();
DefaultJavaLibraryTest.java,RuleKey affectedRuleKey = factory.newInstance(library).build();,if (factory != null ) RuleKey affectedRuleKey = factory.newInstance(library).build();
DefaultJavaLibraryTest.java,RuleKey originalRuleKey = factory.newInstance(library).build();,if (factory != null ) RuleKey originalRuleKey = factory.newInstance(library).build();
DefaultJavaLibraryTest.java,RuleKey unaffectedRuleKey = factory.newInstance(library).build();,if (factory != null ) RuleKey unaffectedRuleKey = factory.newInstance(library).build();
DefaultJavaLibraryTest.java,RuleKey affectedRuleKey = factory.newInstance(library).build();,if (factory != null ) RuleKey affectedRuleKey = factory.newInstance(library).build();
DefaultJavaLibraryTest.java,RuleKey originalRuleKey = factory.newInstance(library).build();,if (factory != null ) RuleKey originalRuleKey = factory.newInstance(library).build();
DefaultJavaLibraryTest.java,RuleKey unaffectedRuleKey = factory.newInstance(library).build();,if (factory != null ) RuleKey unaffectedRuleKey = factory.newInstance(library).build();
DefaultJavaLibraryTest.java,RuleKey affectedRuleKey = factory.newInstance(library).build();,if (factory != null ) RuleKey affectedRuleKey = factory.newInstance(library).build();
DefaultJavaLibraryTest.java,RuleKey originalRuleKey = factory.newInstance(library).build();,if (factory != null ) RuleKey originalRuleKey = factory.newInstance(library).build();
DefaultJavaLibraryTest.java,RuleKey unaffectedRuleKey = factory.newInstance(library).build();,if (factory != null ) RuleKey unaffectedRuleKey = factory.newInstance(library).build();
DefaultJavaLibraryTest.java,RuleKey affectedRuleKey = factory.newInstance(library).build();,if (factory != null ) RuleKey affectedRuleKey = factory.newInstance(library).build();
KnownBuildRuleTypesTest.java,RuleKey configuredKey = factory.newInstance(configuredRule).build();,if (factory != null ) RuleKey configuredKey = factory.newInstance(configuredRule).build();
KnownBuildRuleTypesTest.java,RuleKey libraryKey = factory.newInstance(libraryRule).build();,if (factory != null ) RuleKey libraryKey = factory.newInstance(libraryRule).build();
GenruleTest.java,RuleKey originalRuleKey = defaultRuleKeyBuilderFactory.newInstance(rule).build();,if (defaultRuleKeyBuilderFactory != null ) RuleKey originalRuleKey = defaultRuleKeyBuilderFactory.newInstance(rule).build();
GenruleTest.java,RuleKey originalInputRuleKey = inputBasedRuleKeyBuilderFactory.newInstance(rule).build();,if (inputBasedRuleKeyBuilderFactory != null ) RuleKey originalInputRuleKey = inputBasedRuleKeyBuilderFactory.newInstance(rule).build();
GenruleTest.java,RuleKey unchangedRuleKey = defaultRuleKeyBuilderFactory.newInstance(rule).build();,if (defaultRuleKeyBuilderFactory != null ) RuleKey unchangedRuleKey = defaultRuleKeyBuilderFactory.newInstance(rule).build();
GenruleTest.java,RuleKey unchangedInputBasedRuleKey = inputBasedRuleKeyBuilderFactory.newInstance(rule).build();,if (inputBasedRuleKeyBuilderFactory != null ) RuleKey unchangedInputBasedRuleKey = inputBasedRuleKeyBuilderFactory.newInstance(rule).build();
GenruleTest.java,RuleKey changedInputBasedRuleKey = inputBasedRuleKeyBuilderFactory.newInstance(rule).build();,if (inputBasedRuleKeyBuilderFactory != null ) RuleKey changedInputBasedRuleKey = inputBasedRuleKeyBuilderFactory.newInstance(rule).build();
GenruleTest.java,RuleKey originalRuleKey = defaultRuleKeyBuilderFactory.newInstance(rule).build();,if (defaultRuleKeyBuilderFactory != null ) RuleKey originalRuleKey = defaultRuleKeyBuilderFactory.newInstance(rule).build();
GenruleTest.java,RuleKey originalInputRuleKey = inputBasedRuleKeyBuilderFactory.newInstance(rule).build();,if (inputBasedRuleKeyBuilderFactory != null ) RuleKey originalInputRuleKey = inputBasedRuleKeyBuilderFactory.newInstance(rule).build();
GenruleTest.java,RuleKey unchangedRuleKey = defaultRuleKeyBuilderFactory.newInstance(rule).build();,if (defaultRuleKeyBuilderFactory != null ) RuleKey unchangedRuleKey = defaultRuleKeyBuilderFactory.newInstance(rule).build();
GenruleTest.java,RuleKey unchangedInputBasedRuleKey = inputBasedRuleKeyBuilderFactory.newInstance(rule).build();,if (inputBasedRuleKeyBuilderFactory != null ) RuleKey unchangedInputBasedRuleKey = inputBasedRuleKeyBuilderFactory.newInstance(rule).build();
GenruleTest.java,RuleKey changedInputBasedRuleKey = inputBasedRuleKeyBuilderFactory.newInstance(rule).build();,if (inputBasedRuleKeyBuilderFactory != null ) RuleKey changedInputBasedRuleKey = inputBasedRuleKeyBuilderFactory.newInstance(rule).build();
GenruleTest.java,RuleKey originalRuleKey = defaultRuleKeyBuilderFactory.newInstance(rule).build();,if (defaultRuleKeyBuilderFactory != null ) RuleKey originalRuleKey = defaultRuleKeyBuilderFactory.newInstance(rule).build();
GenruleTest.java,RuleKey originalInputRuleKey = inputBasedRuleKeyBuilderFactory.newInstance(rule).build();,if (inputBasedRuleKeyBuilderFactory != null ) RuleKey originalInputRuleKey = inputBasedRuleKeyBuilderFactory.newInstance(rule).build();
GenruleTest.java,RuleKey unchangedRuleKey = defaultRuleKeyBuilderFactory.newInstance(rule).build();,if (defaultRuleKeyBuilderFactory != null ) RuleKey unchangedRuleKey = defaultRuleKeyBuilderFactory.newInstance(rule).build();
GenruleTest.java,RuleKey unchangedInputBasedRuleKey = inputBasedRuleKeyBuilderFactory.newInstance(rule).build();,if (inputBasedRuleKeyBuilderFactory != null ) RuleKey unchangedInputBasedRuleKey = inputBasedRuleKeyBuilderFactory.newInstance(rule).build();
GenruleTest.java,RuleKey changedInputBasedRuleKey = inputBasedRuleKeyBuilderFactory.newInstance(rule).build();,if (inputBasedRuleKeyBuilderFactory != null ) RuleKey changedInputBasedRuleKey = inputBasedRuleKeyBuilderFactory.newInstance(rule).build();
NdkLibraryDescription.java,final Path makefilePath = getGeneratedMakefilePath(params.getBuildTarget());,if (getGeneratedMakefilePath(params != null ) final Path makefilePath = getGeneratedMakefilePath(params.getBuildTarget());
AndroidResourceDescription.java,ImmutableSortedSet<Path> inputResFiles = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) ImmutableSortedSet<Path> inputResFiles = ImmutableSortedSet.of();
AndroidResourceDescription.java,ProjectFilesystem filesystem = params.getProjectFilesystem();,if (params != null ) ProjectFilesystem filesystem = params.getProjectFilesystem();
IjModuleFactory.java,AndroidResourceDescription.Arg arg = target.getConstructorArg();,if (target != null ) AndroidResourceDescription.Arg arg = target.getConstructorArg();
CompileStringsStep.java,this.resourceNameToIdMap = Maps.newHashMap();,if (Maps != null ) this.resourceNameToIdMap = Maps.newHashMap();
AaptPackageResources.java,assetsDirectory = Optional.absent();,if (Optional != null ) assetsDirectory = Optional.absent();
AaptPackageResourcesTest.java,Set<SourcePath> assetsDirectories = ImmutableSet.of(resourceOne.getAssets());,if (ImmutableSet != null ) Set<SourcePath> assetsDirectories = ImmutableSet.of(resourceOne.getAssets());
AppleBundle.java,Optional<CodeSignIdentity> foundIdentity = Optional.absent();,if (Optional != null ) Optional<CodeSignIdentity> foundIdentity = Optional.absent();
AppleBundle.java,Optional<HashCode> fingerprint = CodeSignIdentity.toFingerprint(customIdentity.get());,if (CodeSignIdentity != null ) Optional<HashCode> fingerprint = CodeSignIdentity.toFingerprint(customIdentity.get());
AppleBundle.java,foundIdentity = codeSignIdentityStore.findIdentityMatchingFingerprint(fingerprint.get());,if (codeSignIdentityStore != null ) foundIdentity = codeSignIdentityStore.findIdentityMatchingFingerprint(fingerprint.get());
AppleBundle.java,this.codeSignIdentity = Optional.absent();,if (Optional != null ) this.codeSignIdentity = Optional.absent();
AndroidManifestTest.java,ProjectFilesystem filesystem = androidManifest.getProjectFilesystem();,if (androidManifest != null ) ProjectFilesystem filesystem = androidManifest.getProjectFilesystem();
OCamlUtil.java,String strInput = resolver.deprecatedGetPath(input).toString();,if (resolver != null ) String strInput = resolver.deprecatedGetPath(input).toString();
ComputeExopackageDepsAbi.java,Path path = entry.getKey();,if (entry != null ) Path path = entry.getKey();
AppleBinaryIntegrationTest.java,Path projectRoot = tmp.getRootPath().toRealPath();,if (tmp != null ) Path projectRoot = tmp.getRootPath().toRealPath();
AppleSdkDiscoveryTest.java,Path root = temp.newFolder().toPath();,if (temp != null ) Path root = temp.newFolder().toPath();
CompilationDatabaseIntegrationTest.java,Path tmpRoot = tmp.getRootPath().toRealPath();,if (tmp != null ) Path tmpRoot = tmp.getRootPath().toRealPath();
HttpArtifactCache.java,Started startedEvent = HttpArtifactCacheEvent.newFetchStartedEvent();,if (HttpArtifactCacheEvent != null ) Started startedEvent = HttpArtifactCacheEvent.newFetchStartedEvent();
HttpArtifactCache.java,Started startedEvent = HttpArtifactCacheEvent.newStoreStartedEvent();,if (HttpArtifactCacheEvent != null ) Started startedEvent = HttpArtifactCacheEvent.newStoreStartedEvent();
HttpArtifactCacheTest.java,HttpArtifactCacheEvent.Started started = HttpArtifactCacheEvent.newFetchStartedEvent();,if (HttpArtifactCacheEvent != null ) HttpArtifactCacheEvent.Started started = HttpArtifactCacheEvent.newFetchStartedEvent();
HttpArtifactCacheEventTest.java,HttpArtifactCacheEvent.Started startedEvent = HttpArtifactCacheEvent.newStoreStartedEvent();,if (HttpArtifactCacheEvent != null ) HttpArtifactCacheEvent.Started startedEvent = HttpArtifactCacheEvent.newStoreStartedEvent();
HttpArtifactCacheEventListenerTest.java,HttpArtifactCacheEvent.Started startedEvent = HttpArtifactCacheEvent.newFetchStartedEvent();,if (HttpArtifactCacheEvent != null ) HttpArtifactCacheEvent.Started startedEvent = HttpArtifactCacheEvent.newFetchStartedEvent();
ProjectBuildFileParser.java,String buildFileString = buildFile.toString();,if (buildFile != null ) String buildFileString = buildFile.toString();
ProjectBuildFileParser.java,int numRules = result.size();,if (result != null ) int numRules = result.size();
JarDirectoryStepHelper.java,Set<String> alreadyAddedEntries = Sets.newHashSet();,if (Sets != null ) Set<String> alreadyAddedEntries = Sets.newHashSet();
SourcePathResolver.java,Optional<Path> resolvedPath = buildTargetSourcePath.getResolvedPath();,if (buildTargetSourcePath != null ) Optional<Path> resolvedPath = buildTargetSourcePath.getResolvedPath();
SourcePathResolver.java,Optional<Path> resolvedPath = buildTargetSourcePath.getResolvedPath();,if (buildTargetSourcePath != null ) Optional<Path> resolvedPath = buildTargetSourcePath.getResolvedPath();
SourcePathResolver.java,toReturn = resolvedPath.get();,if (resolvedPath != null ) toReturn = resolvedPath.get();
GoSymlinkTree.java,this.symlinkMap = mapBuilder.build();,if (mapBuilder != null ) this.symlinkMap = mapBuilder.build();
GoSymlinkTree.java,this.symlinkMap = mapBuilder.build();,if (mapBuilder != null ) this.symlinkMap = mapBuilder.build();
GoTest.java,Optional<String> currentTest = Optional.absent();,if (Optional != null ) Optional<String> currentTest = Optional.absent();
GoTest.java,List<String> stdout = Lists.newArrayList();,if (Lists != null ) List<String> stdout = Lists.newArrayList();
GoTest.java,currentTest = Optional.absent();,if (Optional != null ) currentTest = Optional.absent();
GoTest.java,ImmutableList<TestCaseSummary> summaries = ImmutableList.of();,if (ImmutableList != null ) ImmutableList<TestCaseSummary> summaries = ImmutableList.of();
GoTestDescription.java,Path defaultPackageName = params.getBuildTarget().getBasePath();,if (params != null ) Path defaultPackageName = params.getBuildTarget().getBasePath();
GoTestStep.java,process = builder.start();,if (builder != null ) process = builder.start();
GoTestStep.java,ProcessExecutor executor = context.getProcessExecutor();,if (context != null ) ProcessExecutor executor = context.getProcessExecutor();
CxxDescriptionEnhancer.java,BuildTarget lexYaccTarget = createLexYaccSourcesBuildTarget(params.getBuildTarget());,if (createLexYaccSourcesBuildTarget(params != null ) BuildTarget lexYaccTarget = createLexYaccSourcesBuildTarget(params.getBuildTarget());
CxxDescriptionEnhancer.java,lexYaccSources = CxxHeaderSourceSpec.builder().build();,if (CxxHeaderSourceSpec != null ) lexYaccSources = CxxHeaderSourceSpec.builder().build();
CxxDescriptionEnhancer.java,final String name = ent.getKey();,if (ent != null ) final String name = ent.getKey();
CxxDescriptionEnhancer.java,final SourcePath source = ent.getValue();,if (ent != null ) final SourcePath source = ent.getValue();
CxxDescriptionEnhancer.java,final String name = ent.getKey();,if (ent != null ) final String name = ent.getKey();
CxxDescriptionEnhancer.java,final SourcePath source = ent.getValue();,if (ent != null ) final SourcePath source = ent.getValue();
CxxDescriptionEnhancerTest.java,SourcePath lexSource = new BuildTargetSourcePath(genrule.getBuildTarget());,if (BuildTargetSourcePath(genrule != null ) SourcePath lexSource = new BuildTargetSourcePath(genrule.getBuildTarget());
CxxLexYaccIntegrationTest.java,BuckBuildLog buildLog = workspace.getBuildLog();,if (workspace != null ) BuckBuildLog buildLog = workspace.getBuildLog();
CxxLexYaccIntegrationTest.java,buildLog = workspace.getBuildLog();,if (workspace != null ) buildLog = workspace.getBuildLog();
CxxLexYaccIntegrationTest.java,buildLog = workspace.getBuildLog();,if (workspace != null ) buildLog = workspace.getBuildLog();
LexStepTest.java,ExecutionContext context = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext context = TestExecutionContext.newInstance();
LexTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
YaccStepTest.java,Step firstStep = yaccStep.iterator().next();,if (yaccStep != null ) Step firstStep = yaccStep.iterator().next();
YaccTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
GoSymlinkTree.java,this.symlinkMap = mapBuilder.build();,if (mapBuilder != null ) this.symlinkMap = mapBuilder.build();
ProjectBuildFileParser.java,String format = bufferedReader.readLine();,if (bufferedReader != null ) String format = bufferedReader.readLine();
ProjectBuildFileParser.java,result = buckPyStdoutParser.nextRules();,if (buckPyStdoutParser != null ) result = buckPyStdoutParser.nextRules();
RawParser.java,JsonPrimitive primitive = json.getAsJsonPrimitive();,if (json != null ) JsonPrimitive primitive = json.getAsJsonPrimitive();
RawParser.java,Number number = primitive.getAsNumber();,if (primitive != null ) Number number = primitive.getAsNumber();
RawParser.java,JsonArray array = json.getAsJsonArray();,if (json != null ) JsonArray array = json.getAsJsonArray();
RawParser.java,List<Object> out = Lists.newArrayListWithCapacity(array.size());,if (Lists != null ) List<Object> out = Lists.newArrayListWithCapacity(array.size());
BuildFileToJsonParserTest.java,tokens = parser.nextRules();,if (parser != null ) tokens = parser.nextRules();
AppleBundle.java,Path binaryOutputPath = binary.get().getPathToOutput();,if (binary != null ) Path binaryOutputPath = binary.get().getPathToOutput();
UnzipAar.java,ImmutableSet<Path> entriesToJar = entriesToJarBuilder.build();,if (entriesToJarBuilder != null ) ImmutableSet<Path> entriesToJar = entriesToJarBuilder.build();
JavaBinary.java,includePaths = ImmutableSet.copyOf(getTransitiveClasspathEntries().values());,if (ImmutableSet != null ) includePaths = ImmutableSet.copyOf(getTransitiveClasspathEntries().values());
JavaLibraryDescription.java,BuildTarget originalBuildTarget = buildRule.getBuildTarget();,if (buildRule != null ) BuildTarget originalBuildTarget = buildRule.getBuildTarget();
JavaLibraryDescription.java,GwtModule gwtModule = gwtModuleOptional.get();,if (gwtModuleOptional != null ) GwtModule gwtModule = gwtModuleOptional.get();
PrebuiltJarDescription.java,UnflavoredBuildTarget prebuiltJarBuildTarget = buildRule.getBuildTarget().checkUnflavored();,if (buildRule != null ) UnflavoredBuildTarget prebuiltJarBuildTarget = buildRule.getBuildTarget().checkUnflavored();
PrebuiltJarDescription.java,inputToCompareToOutput = arg.gwtJar.get();,if (arg != null ) inputToCompareToOutput = arg.gwtJar.get();
PrebuiltJarDescription.java,inputToCompareToOutput = arg.sourceJar.get();,if (arg != null ) inputToCompareToOutput = arg.sourceJar.get();
SrcZipAwareFileBundler.java,destination = resolved.getFileName();,if (resolved != null ) destination = resolved.getFileName();
UnzipStep.java,Path zip = filesystem.getPathForRelativeExistingPath(zipFile).toAbsolutePath();,if (filesystem != null ) Path zip = filesystem.getPathForRelativeExistingPath(zipFile).toAbsolutePath();
OCamlUtil.java,String strInput = resolver.getPath(input).toString();,if (resolver != null ) String strInput = resolver.getPath(input).toString();
RuleKeyBuilder.java,Path path = relativePath.get();,if (relativePath != null ) Path path = relativePath.get();
AuditOwnerCommand.java,ProjectFilesystem cellFilesystem = params.getCell().getFilesystem();,if (params != null ) ProjectFilesystem cellFilesystem = params.getCell().getFilesystem();
AuditOwnerCommand.java,final Path rootPath = cellFilesystem.getRootPath();,if (cellFilesystem != null ) final Path rootPath = cellFilesystem.getRootPath();
TargetsCommand.java,ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());,if (ParserConfig(params != null ) ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());
IjModuleFactory.java,AndroidBinaryDescription.Arg arg = target.getConstructorArg();,if (target != null ) AndroidBinaryDescription.Arg arg = target.getConstructorArg();
ProjectGenerator.java,String binaryName = AppleBundle.getBinaryName(targetToBuildWithBuck.get());,if (AppleBundle != null ) String binaryName = AppleBundle.getBinaryName(targetToBuildWithBuck.get());
ProjectGenerator.java,Path bundleDestination = getScratchPathForAppBundle(targetToBuildWithBuck.get());,if (getScratchPathForAppBundle(targetToBuildWithBuck != null ) Path bundleDestination = getScratchPathForAppBundle(targetToBuildWithBuck.get());
ProjectGenerator.java,Path dsymDestination = getScratchPathForDsymBundle(targetToBuildWithBuck.get());,if (getScratchPathForDsymBundle(targetToBuildWithBuck != null ) Path dsymDestination = getScratchPathForDsymBundle(targetToBuildWithBuck.get());
ProjectGenerator.java,String bundleLoaderProductName = getProductName(bundleLoader.getBuildTarget());,if (getProductName(bundleLoader != null ) String bundleLoaderProductName = getProductName(bundleLoader.getBuildTarget());
ProjectGenerator.java,String productName = getProductName(targetNode.getBuildTarget());,if (getProductName(targetNode != null ) String productName = getProductName(targetNode.getBuildTarget());
BuildCommand.java,actionGraph = targetGraphToActionGraph.apply(result.getSecond());,if (targetGraphToActionGraph != null ) actionGraph = targetGraphToActionGraph.apply(result.getSecond());
BuildCommand.java,resolver = targetGraphToActionGraph.getRuleResolver();,if (targetGraphToActionGraph != null ) resolver = targetGraphToActionGraph.getRuleResolver();
BuildCommand.java,Iterable<BuildRule> actionGraphRules = Preconditions.checkNotNull(actionGraph.getNodes());,if (Preconditions != null ) Iterable<BuildRule> actionGraphRules = Preconditions.checkNotNull(actionGraph.getNodes());
FetchCommand.java,actionGraph = transformer.apply(result.getSecond());,if (transformer != null ) actionGraph = transformer.apply(result.getSecond());
UninstallCommand.java,actionGraph = targetGraphTransformer.apply(result.getSecond());,if (targetGraphTransformer != null ) actionGraph = targetGraphTransformer.apply(result.getSecond());
TargetGraphToActionGraph.java,ActionGraph result = new ActionGraph(resolver.getBuildRules());,if (ActionGraph(resolver != null ) ActionGraph result = new ActionGraph(resolver.getBuildRules());
AppleBundle.java,this.provisioningProfiles = Optional.absent();,if (Optional != null ) this.provisioningProfiles = Optional.absent();
ProvisioningProfileCopyStep.java,String profileBundleID = appID.getSecond();,if (appID != null ) String profileBundleID = appID.getSecond();
ProvisioningProfileCopyStep.java,bestMatchLength = profileBundleID.length();,if (profileBundleID != null ) bestMatchLength = profileBundleID.length();
AppleBundle.java,searchPath = provisioningProfileSearchPath.get();,if (provisioningProfileSearchPath != null ) searchPath = provisioningProfileSearchPath.get();
ProjectGenerator.java,Optional<String> productName = Optional.absent();,if (Optional != null ) Optional<String> productName = Optional.absent();
ProjectGenerator.java,String bundleLoaderProductName = getProductNameForBuildTarget(bundleLoader.getBuildTarget());,if (getProductNameForBuildTarget(bundleLoader != null ) String bundleLoaderProductName = getProductNameForBuildTarget(bundleLoader.getBuildTarget());
WorkspaceAndProjectGenerator.java,Optional<String> productName = Optional.absent();,if (Optional != null ) Optional<String> productName = Optional.absent();
AuditOwnerCommand.java,ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());,if (ParserConfig(params != null ) ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());
BuckQueryEnvironment.java,this.parserConfig = new ParserConfig(params.getBuckConfig());,if (ParserConfig(params != null ) this.parserConfig = new ParserConfig(params.getBuckConfig());
Main.java,ParserConfig.AllowSymlinks allowSymlinks = parserConfig.getAllowSymlinks();,if (parserConfig != null ) ParserConfig.AllowSymlinks allowSymlinks = parserConfig.getAllowSymlinks();
QueryCommand.java,ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());,if (ParserConfig(params != null ) ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());
TargetPatternEvaluator.java,this.parserConfig = new ParserConfig(params.getBuckConfig());,if (ParserConfig(params != null ) this.parserConfig = new ParserConfig(params.getBuckConfig());
TargetsCommand.java,ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());,if (ParserConfig(params != null ) ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());
TargetsCommand.java,ParserConfig config = new ParserConfig(params.getBuckConfig());,if (ParserConfig(params != null ) ParserConfig config = new ParserConfig(params.getBuckConfig());
TestCommand.java,ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());,if (ParserConfig(params != null ) ParserConfig parserConfig = new ParserConfig(params.getBuckConfig());
Parser.java,buildFileTree = supplier.get();,if (supplier != null ) buildFileTree = supplier.get();
Parser.java,currentBuildId = event.getBuildId();,if (event != null ) currentBuildId = event.getBuildId();
Parser.java,BuildTarget buildTarget = targetNode.getBuildTarget();,if (targetNode != null ) BuildTarget buildTarget = targetNode.getBuildTarget();
Parser.java,Set<BuildTarget> deps = Sets.newHashSet();,if (Sets != null ) Set<BuildTarget> deps = Sets.newHashSet();
Parser.java,Path path = (Path) event.context();,if (event != null ) Path path = (Path) event.context();
Parser.java,final String fileName = path.getFileName().toString();,if (path != null ) final String fileName = path.getFileName().toString();
Parser.java,List<Path> packageBuildFiles = Lists.newArrayList();,if (Lists != null ) List<Path> packageBuildFiles = Lists.newArrayList();
Parser.java,filePath = cell.getAbsolutePathToBuildFile(buildTarget).toString();,if (cell != null ) filePath = cell.getAbsolutePathToBuildFile(buildTarget).toString();
Parser.java,this.memoizedTargetNodes = CacheBuilder.newBuilder().build();,if (CacheBuilder != null ) this.memoizedTargetNodes = CacheBuilder.newBuilder().build();
Parser.java,this.symlinkExistenceCache = Maps.newHashMap();,if (Maps != null ) this.symlinkExistenceCache = Maps.newHashMap();
Parser.java,this.buildInputPathsUnderSymlink = Sets.newHashSet();,if (Sets != null ) this.buildInputPathsUnderSymlink = Sets.newHashSet();
Parser.java,this.parsedBuildFiles = ArrayListMultimap.create();,if (ArrayListMultimap != null ) this.parsedBuildFiles = ArrayListMultimap.create();
Parser.java,this.pathsToBuildTargets = ArrayListMultimap.create();,if (ArrayListMultimap != null ) this.pathsToBuildTargets = ArrayListMultimap.create();
Parser.java,this.buildFileDependents = ArrayListMultimap.create();,if (ArrayListMultimap != null ) this.buildFileDependents = ArrayListMultimap.create();
Parser.java,Object constructorArg = description.createUnpopulatedConstructorArg();,if (description != null ) Object constructorArg = description.createUnpopulatedConstructorArg();
Parser.java,Path symlinkTarget = projectFilesystem.resolve(subpath).toRealPath();,if (projectFilesystem != null ) Path symlinkTarget = projectFilesystem.resolve(subpath).toRealPath();
HalideLibraryDescription.java,BuildTarget compilerTarget = createHalideCompilerBuildTarget(target.getUnflavoredBuildTarget());,if (createHalideCompilerBuildTarget(target != null ) BuildTarget compilerTarget = createHalideCompilerBuildTarget(target.getUnflavoredBuildTarget());
PerBuildState.java,stdout = new PrintStream(ByteStreams.nullOutputStream());,if (PrintStream(ByteStreams != null ) stdout = new PrintStream(ByteStreams.nullOutputStream());
PerBuildState.java,stderr = new PrintStream(ByteStreams.nullOutputStream());,if (PrintStream(ByteStreams != null ) stderr = new PrintStream(ByteStreams.nullOutputStream());
AppleBundle.java,Iterator<CodeSignIdentity> it = allValidCodeSignIdentities.iterator();,if (allValidCodeSignIdentities != null ) Iterator<CodeSignIdentity> it = allValidCodeSignIdentities.iterator();
AppleBundle.java,foundIdentity = Optional.of(it.next());,if (Optional != null ) foundIdentity = Optional.of(it.next());
AppleConfig.java,ImmutableSet<CodeSignIdentity> allValidIdentities = builder.build();,if (builder != null ) ImmutableSet<CodeSignIdentity> allValidIdentities = builder.build();
ParserNgTest.java,Cell toUse = repoBuilder.build();,if (repoBuilder != null ) Cell toUse = repoBuilder.build();
ParserNgTest.java,BuckConfig config = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig config = FakeBuckConfig.builder().build();
ParserNgTest.java,BuckConfig config = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig config = FakeBuckConfig.builder().build();
ParserNgTest.java,BuckConfig config = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig config = FakeBuckConfig.builder().build();
ParserNgTest.java,BuckConfig config = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig config = FakeBuckConfig.builder().build();
ParserNgTest.java,BuckConfig config = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig config = FakeBuckConfig.builder().build();
ParserNgTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
ParserNgTest.java,BuckConfig config = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig config = FakeBuckConfig.builder().build();
ParserNgTest.java,BuckConfig config = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig config = FakeBuckConfig.builder().build();
ParserNgTest.java,BuckConfig config = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig config = FakeBuckConfig.builder().build();
ParserNgTest.java,BuckConfig config = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig config = FakeBuckConfig.builder().build();
ParserNgTest.java,Path rootPath = tempDir.getRoot().toRealPath();,if (tempDir != null ) Path rootPath = tempDir.getRoot().toRealPath();
ParserNgTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
ParserNgTest.java,BuckConfig config = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig config = FakeBuckConfig.builder().build();
ParserNgTest.java,Path rootPath = tempDir.getRoot().toRealPath();,if (tempDir != null ) Path rootPath = tempDir.getRoot().toRealPath();
ParserNgTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
ParserNgTest.java,BuckConfig config = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig config = FakeBuckConfig.builder().build();
ParserNgTest.java,Path rootPath = tempDir.getRoot().toRealPath();,if (tempDir != null ) Path rootPath = tempDir.getRoot().toRealPath();
ParserNgTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
ParserNgTest.java,BuckConfig config = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig config = FakeBuckConfig.builder().build();
ParserNgTest.java,BuckConfig config = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig config = FakeBuckConfig.builder().build();
ParserNgTest.java,BuckConfig config = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig config = FakeBuckConfig.builder().build();
ParserNgTest.java,BuckConfig config = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) BuckConfig config = FakeBuckConfig.builder().build();
TestCellBuilder.java,buckConfig = FakeBuckConfig.builder().build();,if (FakeBuckConfig != null ) buckConfig = FakeBuckConfig.builder().build();
ProjectFilesystem.java,Path path = (Path) event.context();,if (event != null ) Path path = (Path) event.context();
ParserTest.java,WatchEvent<Object> event = WatchEvents.createOverflowEvent();,if (WatchEvents != null ) WatchEvent<Object> event = WatchEvents.createOverflowEvent();
CxxTestDescriptionTest.java,constructorArg.env = Optional.absent();,if (Optional != null ) constructorArg.env = Optional.absent();
CxxTestDescriptionTest.java,constructorArg.args = Optional.absent();,if (Optional != null ) constructorArg.args = Optional.absent();
CxxLinkableEnhancer.java,Optional<BuildRule> bundleLoaderRule = resolver.getRule(bundleLoader.get());,if (resolver != null ) Optional<BuildRule> bundleLoaderRule = resolver.getRule(bundleLoader.get());
CxxLinkableEnhancer.java,ImmutableList<String> args = argsBuilder.build();,if (argsBuilder != null ) ImmutableList<String> args = argsBuilder.build();
DLibrary.java,ImmutableList<String> linkerArgs = ImmutableList.of(getPathToOutput().toString());,if (ImmutableList != null ) ImmutableList<String> linkerArgs = ImmutableList.of(getPathToOutput().toString());
CxxLibraryDescriptionTest.java,ImmutableList<SourcePath> inputs = ImmutableList.copyOf(input.getInputs());,if (ImmutableList != null ) ImmutableList<SourcePath> inputs = ImmutableList.copyOf(input.getInputs());
CxxLibraryDescriptionTest.java,ImmutableList<String> args = cxxLink.getArgs();,if (cxxLink != null ) ImmutableList<String> args = cxxLink.getArgs();
CxxLinkableEnhancerTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
HalideLibraryDescriptionTest.java,ImmutableList<SourcePath> inputs = ImmutableList.copyOf(input.getInputs());,if (ImmutableList != null ) ImmutableList<SourcePath> inputs = ImmutableList.copyOf(input.getInputs());
AppleBundle.java,Path plugInsDestPath = bundleRoot.resolve(destinations.getPlugInsPath());,if (bundleRoot != null ) Path plugInsDestPath = bundleRoot.resolve(destinations.getPlugInsPath());
BuckBuildCommandHandler.java,boolean failed = parseOutputLine(lines.next());,if (parseOutputLine(lines != null ) boolean failed = parseOutputLine(lines.next());
ProjectGenerator.java,String binaryName = AppleBundle.getBinaryName(targetToBuildWithBuck.get());,if (AppleBundle != null ) String binaryName = AppleBundle.getBinaryName(targetToBuildWithBuck.get());
ProjectGenerator.java,Path bundleDestination = getScratchPathForAppBundle(targetToBuildWithBuck.get());,if (getScratchPathForAppBundle(targetToBuildWithBuck != null ) Path bundleDestination = getScratchPathForAppBundle(targetToBuildWithBuck.get());
ProjectGenerator.java,Path dsymDestination = getScratchPathForDsymBundle(targetToBuildWithBuck.get());,if (getScratchPathForDsymBundle(targetToBuildWithBuck != null ) Path dsymDestination = getScratchPathForDsymBundle(targetToBuildWithBuck.get());
ProjectGenerator.java,String bundleLoaderProductName = getProductName(bundleLoader.getBuildTarget());,if (getProductName(bundleLoader != null ) String bundleLoaderProductName = getProductName(bundleLoader.getBuildTarget());
ProjectGenerator.java,String productName = getProductName(targetNode.getBuildTarget());,if (getProductName(targetNode != null ) String productName = getProductName(targetNode.getBuildTarget());
ArtifactCaches.java,URI uri = buckConfig.getHttpCacheUrl();,if (buckConfig != null ) URI uri = buckConfig.getHttpCacheUrl();
ArtifactCaches.java,int timeoutSeconds = buckConfig.getHttpCacheTimeoutSeconds();,if (buckConfig != null ) int timeoutSeconds = buckConfig.getHttpCacheTimeoutSeconds();
ArtifactCaches.java,boolean doStore = buckConfig.getHttpCacheReadMode().isDoStore();,if (buckConfig != null ) boolean doStore = buckConfig.getHttpCacheReadMode().isDoStore();
ArtifactCaches.java,final String host = buckConfig.getHostToReportToRemoteCacheServer();,if (buckConfig != null ) final String host = buckConfig.getHostToReportToRemoteCacheServer();
Publisher.java,File pom = Pom.generatePomFile(publishable).toFile();,if (Pom != null ) File pom = Pom.generatePomFile(publishable).toFile();
BuildCommand.java,resolvers = targetGraphToActionGraph.getRuleResolvers();,if (targetGraphToActionGraph != null ) resolvers = targetGraphToActionGraph.getRuleResolvers();
Parser.java,Cell targetCell = cell.getCell(buildTarget.getCell());,if (cell != null ) Cell targetCell = cell.getCell(buildTarget.getCell());
CachingBuildEngine.java,this.ruleKeyFactories = factories.build();,if (factories != null ) this.ruleKeyFactories = factories.build();
CachingBuildEngine.java,RuleKeyFactories cellData = this.ruleKeyFactories.get(rule.getProjectFilesystem());,if (this != null ) RuleKeyFactories cellData = this.ruleKeyFactories.get(rule.getProjectFilesystem());
Cell.java,Cell targetCell = getCell(target.getCell());,if (getCell(target != null ) Cell targetCell = getCell(target.getCell());
TargetGraphToActionGraph.java,BuildRuleResolver ruleResolver = data.getFirst();,if (data != null ) BuildRuleResolver ruleResolver = data.getFirst();
TargetGraphToActionGraph.java,ActionGraph result = new ActionGraph(allRules.build());,if (ActionGraph(allRules != null ) ActionGraph result = new ActionGraph(allRules.build());
TargetGraphToActionGraph.java,ProjectFilesystem filesystem = buildRule.getProjectFilesystem();,if (buildRule != null ) ProjectFilesystem filesystem = buildRule.getProjectFilesystem();
TargetGraphToActionGraph.java,BuildRuleResolver toUse = getResolver(target.getUnflavoredBuildTarget()).get();,if (getResolver(target != null ) BuildRuleResolver toUse = getResolver(target.getUnflavoredBuildTarget()).get();
TargetGraphToActionGraph.java,Optional<BuildRuleResolver> toUse = getResolver(target.getUnflavoredBuildTarget());,if (getResolver(target != null ) Optional<BuildRuleResolver> toUse = getResolver(target.getUnflavoredBuildTarget());
TargetGraphToActionGraph.java,Optional<BuildRuleResolver> toUse = getResolver(target.getUnflavoredBuildTarget());,if (getResolver(target != null ) Optional<BuildRuleResolver> toUse = getResolver(target.getUnflavoredBuildTarget());
TargetGraphToActionGraph.java,ProjectFilesystem filesystem = nameResolver.apply(target.getCell());,if (nameResolver != null ) ProjectFilesystem filesystem = nameResolver.apply(target.getCell());
CellTest.java,Cell repo = new TestCellBuilder().build();,if (TestCellBuilder() != null ) Cell repo = new TestCellBuilder().build();
CellTest.java,Cell repo = new TestCellBuilder().build();,if (TestCellBuilder() != null ) Cell repo = new TestCellBuilder().build();
Parser.java,this.targetsToFile = Maps.newHashMap();,if (Maps != null ) this.targetsToFile = Maps.newHashMap();
Parser.java,UnflavoredBuildTarget unflavored = buildTarget.getUnflavoredBuildTarget();,if (buildTarget != null ) UnflavoredBuildTarget unflavored = buildTarget.getUnflavoredBuildTarget();
HalideLibraryDescription.java,BuildTarget target = createHalideCompilerBuildTarget(params.getBuildTarget());,if (createHalideCompilerBuildTarget(params != null ) BuildTarget target = createHalideCompilerBuildTarget(params.getBuildTarget());
AbstractOCamlBuildContext.java,UnflavoredBuildTarget plainTarget = target.getUnflavoredBuildTarget();,if (target != null ) UnflavoredBuildTarget plainTarget = target.getUnflavoredBuildTarget();
AbstractOCamlBuildContext.java,UnflavoredBuildTarget plainTarget = getBuildTarget().getUnflavoredBuildTarget();,if (getBuildTarget() != null ) UnflavoredBuildTarget plainTarget = getBuildTarget().getUnflavoredBuildTarget();
TargetGraphToActionGraph.java,BuildRuleResolver toUse = getResolver(target).get();,if (getResolver(target) != null ) BuildRuleResolver toUse = getResolver(target).get();
CxxDescriptionEnhancerTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
BuildCommandOptionsTest.java,BuckConfig buckConfig = new FakeBuckConfig(command.getConfigOverrides());,if (FakeBuckConfig(command != null ) BuckConfig buckConfig = new FakeBuckConfig(command.getConfigOverrides());
RunCommandTest.java,String stderrText = console.getTextWrittenToStdErr();,if (console != null ) String stderrText = console.getTextWrittenToStdErr();
TargetGraphHashing.java,HashCode targetRuleHashCode = buildTargetToRuleHashCode.apply(node.getBuildTarget());,if (buildTargetToRuleHashCode != null ) HashCode targetRuleHashCode = buildTargetToRuleHashCode.apply(node.getBuildTarget());
ArtifactCacheBuckConfig.java,doStore = CacheMode.valueOf(cacheMode).isDoStore();,if (CacheMode != null ) doStore = CacheMode.valueOf(cacheMode).isDoStore();
ArtifactCaches.java,boolean doStore = buckConfig.getDirCacheReadMode();,if (buckConfig != null ) boolean doStore = buckConfig.getDirCacheReadMode();
ArtifactCaches.java,boolean doStore = buckConfig.getHttpCacheReadMode();,if (buckConfig != null ) boolean doStore = buckConfig.getHttpCacheReadMode();
AppleCxxPlatforms.java,String flavourName = platform.getFlavor().getName();,if (platform != null ) String flavourName = platform.getFlavor().getName();
AppleBinaryDescription.java,CxxBinaryDescription.Arg delegateArg = delegate.createUnpopulatedConstructorArg();,if (delegate != null ) CxxBinaryDescription.Arg delegateArg = delegate.createUnpopulatedConstructorArg();
HgCmdLineInterface.java,Optional<String> resultString = result.getStdout();,if (result != null ) Optional<String> resultString = result.getStdout();
KnownBuildRuleTypes.java,Optional<String> javaBinOverride = javaConfig.getJavaBinOverride();,if (javaConfig != null ) Optional<String> javaBinOverride = javaConfig.getJavaBinOverride();
JarFattenerTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
JarFattenerTest.java,BuildTargetSourcePath jarSourcePath = new BuildTargetSourcePath(jarFattener.getBuildTarget());,if (BuildTargetSourcePath(jarFattener != null ) BuildTargetSourcePath jarSourcePath = new BuildTargetSourcePath(jarFattener.getBuildTarget());
JarFattenerTest.java,String expectedJarPath = sourceResolver.getResolvedPath(jarSourcePath).toString();,if (sourceResolver != null ) String expectedJarPath = sourceResolver.getResolvedPath(jarSourcePath).toString();
JarFattenerTest.java,BuildTargetSourcePath jarSourcePath = new BuildTargetSourcePath(jarFattener.getBuildTarget());,if (BuildTargetSourcePath(jarFattener != null ) BuildTargetSourcePath jarSourcePath = new BuildTargetSourcePath(jarFattener.getBuildTarget());
JarFattenerTest.java,String expectedJarPath = sourceResolver.getResolvedPath(jarSourcePath).toString();,if (sourceResolver != null ) String expectedJarPath = sourceResolver.getResolvedPath(jarSourcePath).toString();
JavaBinaryTest.java,String expectedClasspath = basePath + javaBinary.getPathToOutput();,if (javaBinary != null ) String expectedClasspath = basePath + javaBinary.getPathToOutput();
JavaBuckConfigTest.java,Optional<String> javaBinOverride = config.getJavaBinOverride();,if (config != null ) Optional<String> javaBinOverride = config.getJavaBinOverride();
JavaBuckConfigTest.java,Optional<String> javaBinOverride = config.getJavaBinOverride();,if (config != null ) Optional<String> javaBinOverride = config.getJavaBinOverride();
KnownBuildRuleTypesTest.java,JavaBinaryDescription.Args arg = new JavaBinaryDescription.Args();,if (JavaBinaryDescription != null ) JavaBinaryDescription.Args arg = new JavaBinaryDescription.Args();
CommandHelper.java,BuildTarget buildTarget = targetNode.getBuildTarget();,if (targetNode != null ) BuildTarget buildTarget = targetNode.getBuildTarget();
AppleTest.java,Optional<Path> xcodeDeveloperDir = xcodeDeveloperDirSupplier.get();,if (xcodeDeveloperDirSupplier != null ) Optional<Path> xcodeDeveloperDir = xcodeDeveloperDirSupplier.get();
AppleBundle.java,searchPath = resolver.getResolvedPath(provisioningProfileSearchPath.get());,if (resolver != null ) searchPath = resolver.getResolvedPath(provisioningProfileSearchPath.get());
InstallCommand.java,ReactNativeBuckConfig buckConfig = new ReactNativeBuckConfig(params.getBuckConfig());,if (ReactNativeBuckConfig(params != null ) ReactNativeBuckConfig buckConfig = new ReactNativeBuckConfig(params.getBuckConfig());
ProjectFilesystem.java,this.projectRoot = root.toAbsolutePath();,if (root != null ) this.projectRoot = root.toAbsolutePath();
Main.java,final boolean isDaemon = context.isPresent();,if (context != null ) final boolean isDaemon = context.isPresent();
TargetGraphToActionGraph.java,ProjectFilesystem filesystem = nameResolver.apply(target.getCell());,if (nameResolver != null ) ProjectFilesystem filesystem = nameResolver.apply(target.getCell());
TargetGraphToActionGraph.java,BuildTarget withoutCell = target.withoutCell();,if (target != null ) BuildTarget withoutCell = target.withoutCell();
TargetGraphToActionGraph.java,ProjectFilesystem filesystem = nameResolver.apply(target.getCell());,if (nameResolver != null ) ProjectFilesystem filesystem = nameResolver.apply(target.getCell());
TargetGraphToActionGraph.java,ProjectFilesystem filesystem = nameResolver.apply(target.getCell());,if (nameResolver != null ) ProjectFilesystem filesystem = nameResolver.apply(target.getCell());
FilesystemBackedBuildFileTreeTest.java,File tempDir = tmp.getRoot();,if (tmp != null ) File tempDir = tmp.getRoot();
FilesystemBackedBuildFileTreeTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tempDir.toPath());,if (ProjectFilesystem(tempDir != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tempDir.toPath());
FilesystemBackedBuildFileTreeTest.java,File tempDir = tmp.getRoot();,if (tmp != null ) File tempDir = tmp.getRoot();
FilesystemBackedBuildFileTreeTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(tempDir.toPath());,if (ProjectFilesystem(tempDir != null ) ProjectFilesystem filesystem = new ProjectFilesystem(tempDir.toPath());
FilesystemBackedBuildFileTreeTest.java,File tempDir = tmp.getRoot();,if (tmp != null ) File tempDir = tmp.getRoot();
FilesystemBackedBuildFileTreeTest.java,Path root = tmp.getRoot().toPath();,if (tmp != null ) Path root = tmp.getRoot().toPath();
FilesystemBackedBuildFileTreeTest.java,Path root = tmp.getRoot().toPath();,if (tmp != null ) Path root = tmp.getRoot().toPath();
ParserTest.java,File root = tempDir.getRoot();,if (tempDir != null ) File root = tempDir.getRoot();
ParserTest.java,Path testFooJavaFilePath = testFooJavaFile.toPath();,if (testFooJavaFile != null ) Path testFooJavaFilePath = testFooJavaFile.toPath();
PythonBinaryDescriptionTest.java,PythonBinaryDescription.Arg arg = desc.createUnpopulatedConstructorArg();,if (desc != null ) PythonBinaryDescription.Arg arg = desc.createUnpopulatedConstructorArg();
PythonBinaryDescriptionTest.java,arg.mainModule = Optional.absent();,if (Optional != null ) arg.mainModule = Optional.absent();
PythonBinaryDescriptionTest.java,arg.baseModule = Optional.absent();,if (Optional != null ) arg.baseModule = Optional.absent();
PythonBinaryDescriptionTest.java,arg.zipSafe = Optional.absent();,if (Optional != null ) arg.zipSafe = Optional.absent();
PythonBinaryDescriptionTest.java,arg.buildArgs = Optional.absent();,if (Optional != null ) arg.buildArgs = Optional.absent();
PythonBinaryDescriptionTest.java,PythonBinaryDescription.Arg arg = desc.createUnpopulatedConstructorArg();,if (desc != null ) PythonBinaryDescription.Arg arg = desc.createUnpopulatedConstructorArg();
PythonBinaryDescriptionTest.java,arg.mainModule = Optional.absent();,if (Optional != null ) arg.mainModule = Optional.absent();
PythonBinaryDescriptionTest.java,arg.baseModule = Optional.absent();,if (Optional != null ) arg.baseModule = Optional.absent();
PythonBinaryDescriptionTest.java,arg.zipSafe = Optional.absent();,if (Optional != null ) arg.zipSafe = Optional.absent();
PythonBinaryDescriptionTest.java,arg.buildArgs = Optional.absent();,if (Optional != null ) arg.buildArgs = Optional.absent();
PythonBinaryDescriptionTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
PythonBinaryDescriptionTest.java,PythonBinaryDescription.Arg arg = desc.createUnpopulatedConstructorArg();,if (desc != null ) PythonBinaryDescription.Arg arg = desc.createUnpopulatedConstructorArg();
PythonBinaryDescriptionTest.java,arg.mainModule = Optional.absent();,if (Optional != null ) arg.mainModule = Optional.absent();
PythonBinaryDescriptionTest.java,arg.zipSafe = Optional.absent();,if (Optional != null ) arg.zipSafe = Optional.absent();
PythonBinaryDescriptionTest.java,arg.buildArgs = Optional.absent();,if (Optional != null ) arg.buildArgs = Optional.absent();
PythonBinaryDescriptionTest.java,arg.baseModule = Optional.absent();,if (Optional != null ) arg.baseModule = Optional.absent();
PythonBinaryDescriptionTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
PythonBinaryDescriptionTest.java,PythonBinaryDescription.Arg arg = desc.createUnpopulatedConstructorArg();,if (desc != null ) PythonBinaryDescription.Arg arg = desc.createUnpopulatedConstructorArg();
PythonBinaryDescriptionTest.java,arg.main = Optional.absent();,if (Optional != null ) arg.main = Optional.absent();
PythonBinaryDescriptionTest.java,arg.baseModule = Optional.absent();,if (Optional != null ) arg.baseModule = Optional.absent();
PythonBinaryDescriptionTest.java,arg.zipSafe = Optional.absent();,if (Optional != null ) arg.zipSafe = Optional.absent();
PythonBinaryDescriptionTest.java,arg.buildArgs = Optional.absent();,if (Optional != null ) arg.buildArgs = Optional.absent();
PythonBinaryDescriptionTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
PythonBinaryDescriptionTest.java,PythonBinaryDescription.Arg arg = desc.createUnpopulatedConstructorArg();,if (desc != null ) PythonBinaryDescription.Arg arg = desc.createUnpopulatedConstructorArg();
PythonBinaryDescriptionTest.java,arg.main = Optional.absent();,if (Optional != null ) arg.main = Optional.absent();
PythonBinaryDescriptionTest.java,arg.baseModule = Optional.absent();,if (Optional != null ) arg.baseModule = Optional.absent();
PythonBinaryDescriptionTest.java,arg.zipSafe = Optional.absent();,if (Optional != null ) arg.zipSafe = Optional.absent();
PythonBinaryDescriptionTest.java,arg.buildArgs = Optional.absent();,if (Optional != null ) arg.buildArgs = Optional.absent();
PythonLibraryDescriptionTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
PythonLibraryDescriptionTest.java,PythonLibraryDescription.Arg arg = desc.createUnpopulatedConstructorArg();,if (desc != null ) PythonLibraryDescription.Arg arg = desc.createUnpopulatedConstructorArg();
PythonLibraryDescriptionTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
PythonLibraryDescriptionTest.java,arg.resources = Optional.absent();,if (Optional != null ) arg.resources = Optional.absent();
PythonLibraryDescriptionTest.java,arg.baseModule = Optional.absent();,if (Optional != null ) arg.baseModule = Optional.absent();
PythonTestDescriptionTest.java,PythonTestDescription.Arg arg = desc.createUnpopulatedConstructorArg();,if (desc != null ) PythonTestDescription.Arg arg = desc.createUnpopulatedConstructorArg();
PythonTestDescriptionTest.java,arg.resources = Optional.absent();,if (Optional != null ) arg.resources = Optional.absent();
PythonTestDescriptionTest.java,arg.baseModule = Optional.absent();,if (Optional != null ) arg.baseModule = Optional.absent();
PythonTestDescriptionTest.java,arg.contacts = Optional.absent();,if (Optional != null ) arg.contacts = Optional.absent();
PythonTestDescriptionTest.java,arg.labels = Optional.absent();,if (Optional != null ) arg.labels = Optional.absent();
PythonTestDescriptionTest.java,arg.sourceUnderTest = Optional.absent();,if (Optional != null ) arg.sourceUnderTest = Optional.absent();
PythonTestDescriptionTest.java,arg.zipSafe = Optional.absent();,if (Optional != null ) arg.zipSafe = Optional.absent();
PythonTestDescriptionTest.java,arg.buildArgs = Optional.absent();,if (Optional != null ) arg.buildArgs = Optional.absent();
PythonTestDescriptionTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
PythonTestDescriptionTest.java,PythonTestDescription.Arg arg = desc.createUnpopulatedConstructorArg();,if (desc != null ) PythonTestDescription.Arg arg = desc.createUnpopulatedConstructorArg();
PythonTestDescriptionTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
PythonTestDescriptionTest.java,arg.resources = Optional.absent();,if (Optional != null ) arg.resources = Optional.absent();
PythonTestDescriptionTest.java,arg.contacts = Optional.absent();,if (Optional != null ) arg.contacts = Optional.absent();
PythonTestDescriptionTest.java,arg.labels = Optional.absent();,if (Optional != null ) arg.labels = Optional.absent();
PythonTestDescriptionTest.java,arg.sourceUnderTest = Optional.absent();,if (Optional != null ) arg.sourceUnderTest = Optional.absent();
PythonTestDescriptionTest.java,arg.zipSafe = Optional.absent();,if (Optional != null ) arg.zipSafe = Optional.absent();
PythonTestDescriptionTest.java,arg.buildArgs = Optional.absent();,if (Optional != null ) arg.buildArgs = Optional.absent();
PythonTestDescriptionTest.java,arg.baseModule = Optional.absent();,if (Optional != null ) arg.baseModule = Optional.absent();
OCamlLinkStep.java,this.aAndOInput = aAndOInputBuilder.build().reverse();,if (aAndOInputBuilder != null ) this.aAndOInput = aAndOInputBuilder.build().reverse();
OCamlLinkStep.java,this.systemSoLibs = systemSoLibsBuilder.build();,if (systemSoLibsBuilder != null ) this.systemSoLibs = systemSoLibsBuilder.build();
AppleTest.java,xctoolBinaryPath = xctoolPath.get();,if (xctoolPath != null ) xctoolBinaryPath = xctoolPath.get();
AppleTestDescription.java,xctoolZipBuildRule = Optional.absent();,if (Optional != null ) xctoolZipBuildRule = Optional.absent();
CxxPythonExtensionDescription.java,"Path extensionPath = getExtensionPath(params.getBuildTarget(), cxxPlatform.getFlavor());","if (cxxPlatform != null ) Path extensionPath = getExtensionPath(params.getBuildTarget(), cxxPlatform.getFlavor());"
CxxPythonExtensionDescriptionTest.java,FlavorDomain<CxxPlatform> cxxPlatforms = CxxPythonExtensionBuilder.createDefaultPlatforms();,if (CxxPythonExtensionBuilder != null ) FlavorDomain<CxxPlatform> cxxPlatforms = CxxPythonExtensionBuilder.createDefaultPlatforms();
CxxPythonExtensionDescriptionTest.java,CxxPlatform cxxPlatform = CxxPythonExtensionBuilder.createDefaultPlatform();,if (CxxPythonExtensionBuilder != null ) CxxPlatform cxxPlatform = CxxPythonExtensionBuilder.createDefaultPlatform();
CxxPythonExtensionDescriptionTest.java,CxxPlatform cxxPlatform = CxxPythonExtensionBuilder.createDefaultPlatform();,if (CxxPythonExtensionBuilder != null ) CxxPlatform cxxPlatform = CxxPythonExtensionBuilder.createDefaultPlatform();
CxxPythonExtensionDescriptionTest.java,BuildRuleParams depParams = new FakeBuildRuleParamsBuilder(depTarget).build();,if (FakeBuildRuleParamsBuilder(depTarget) != null ) BuildRuleParams depParams = new FakeBuildRuleParamsBuilder(depTarget).build();
CxxPythonExtensionDescriptionTest.java,CxxPlatform cxxPlatform = CxxPythonExtensionBuilder.createDefaultPlatform();,if (CxxPythonExtensionBuilder != null ) CxxPlatform cxxPlatform = CxxPythonExtensionBuilder.createDefaultPlatform();
HttpArtifactCacheBinaryProtocol.java,FetchResponseReadResult.Builder result = FetchResponseReadResult.builder();,if (FetchResponseReadResult != null ) FetchResponseReadResult.Builder result = FetchResponseReadResult.builder();
HttpArtifactCacheBinaryProtocol.java,StoreWriteResult.Builder result = StoreWriteResult.builder();,if (StoreWriteResult != null ) StoreWriteResult.Builder result = StoreWriteResult.builder();
MergeAndroidResourcesStepTest.java,ExecutionContext executionContext = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext executionContext = TestExecutionContext.newInstance();
ProgressEstimator.java,double cacheCheckProgress = numberOfStartedRules.get() / numberOfRules.doubleValue();,if (numberOfRules != null ) double cacheCheckProgress = numberOfStartedRules.get() / numberOfRules.doubleValue();
CxxDescriptionEnhancer.java,Path output = getOutputPath(params.getBuildTarget());,if (getOutputPath(params != null ) Path output = getOutputPath(params.getBuildTarget());
AppleBinaryDescription.java,CxxBinaryDescription.Arg delegateArg = delegate.createUnpopulatedConstructorArg();,if (delegate != null ) CxxBinaryDescription.Arg delegateArg = delegate.createUnpopulatedConstructorArg();
JavacStep.java,String invoker = invokingRule.toString();,if (invokingRule != null ) String invoker = invokingRule.toString();
BuildCommandTest.java,String observedReport = new BuildReport(ruleToResult).generateJsonBuildReport();,if (BuildReport(ruleToResult) != null ) String observedReport = new BuildReport(ruleToResult).generateJsonBuildReport();
Main.java,"webServer = createWebServer(cell.getBuckConfig(), cell.getFilesystem());","if (cell != null ) webServer = createWebServer(cell.getBuckConfig(), cell.getFilesystem());"
Parser.java,this.state = new CachedState(cell.getBuildFileName());,if (CachedState(cell != null ) this.state = new CachedState(cell.getBuildFileName());
TestCommand.java,List<String> infoFileArgs = Lists.newArrayList();,if (Lists != null ) List<String> infoFileArgs = Lists.newArrayList();
TestCommand.java,RuleKey ruleKey = buildEngine.getRuleKey(testRule.getBuildTarget());,if (buildEngine != null ) RuleKey ruleKey = buildEngine.getRuleKey(testRule.getBuildTarget());
BaseRunner.java,TestSelectorList testSelectorList = TestSelectorList.empty();,if (TestSelectorList != null ) TestSelectorList testSelectorList = TestSelectorList.empty();
CxxPrepareForLinkStepTest.java,ExecutionContext context = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext context = TestExecutionContext.newInstance();
AuditRulesCommand.java,ProjectFilesystem projectFilesystem = params.getRepository().getFilesystem();,if (params != null ) ProjectFilesystem projectFilesystem = params.getRepository().getFilesystem();
CleanCommand.java,ProjectFilesystem projectFilesystem = params.getRepository().getFilesystem();,if (params != null ) ProjectFilesystem projectFilesystem = params.getRepository().getFilesystem();
Main.java,this.hashCache = new WatchedFileHashCache(repository.getFilesystem());,if (WatchedFileHashCache(repository != null ) this.hashCache = new WatchedFileHashCache(repository.getFilesystem());
Main.java,"webServer = createWebServer(repository.getBuckConfig(), repository.getFilesystem());","if (repository != null ) webServer = createWebServer(repository.getBuckConfig(), repository.getFilesystem());"
Main.java,Path rootPath = repository.getFilesystem().getRootPath();,if (repository != null ) Path rootPath = repository.getFilesystem().getRootPath();
Main.java,Path parserRoot = repository.getFilesystem().getRootPath();,if (repository != null ) Path parserRoot = repository.getFilesystem().getRootPath();
Main.java,repoHashCache = new DefaultFileHashCache(rootRepository.getFilesystem());,if (DefaultFileHashCache(rootRepository != null ) repoHashCache = new DefaultFileHashCache(rootRepository.getFilesystem());
BuildTargetParser.java,Optional<String> givenRepoName = Optional.absent();,if (Optional != null ) Optional<String> givenRepoName = Optional.absent();
Parser.java,this.state = new CachedState(repository.getBuildFileName());,if (CachedState(repository != null ) this.state = new CachedState(repository.getBuildFileName());
Parser.java,filePath = repository.getAbsolutePathToBuildFile(buildTarget).toString();,if (repository != null ) filePath = repository.getAbsolutePathToBuildFile(buildTarget).toString();
CachingBuildEngine.java,RuleKeyFactories repoData = this.ruleKeyFactories.get(rule.getProjectFilesystem());,if (this != null ) RuleKeyFactories repoData = this.ruleKeyFactories.get(rule.getProjectFilesystem());
Cell.java,Repository targetRepo = getRepository(target.getRepository());,if (getRepository(target != null ) Repository targetRepo = getRepository(target.getRepository());
TargetGraphToActionGraph.java,ProjectFilesystem filesystem = nameResolver.apply(target.getRepository());,if (nameResolver != null ) ProjectFilesystem filesystem = nameResolver.apply(target.getRepository());
TargetGraphToActionGraph.java,BuildTarget withoutCell = target.withoutRepository();,if (target != null ) BuildTarget withoutCell = target.withoutRepository();
TargetGraphToActionGraph.java,ProjectFilesystem filesystem = nameResolver.apply(target.getRepository());,if (nameResolver != null ) ProjectFilesystem filesystem = nameResolver.apply(target.getRepository());
TargetGraphToActionGraph.java,ProjectFilesystem filesystem = nameResolver.apply(target.getRepository());,if (nameResolver != null ) ProjectFilesystem filesystem = nameResolver.apply(target.getRepository());
ExternalTestRunnerIntegrationTest.java,public DebuggableTemporaryFolder tmp = new DebuggableTemporaryFolder().doNotDeleteOnExit();,if (DebuggableTemporaryFolder() != null ) public DebuggableTemporaryFolder tmp = new DebuggableTemporaryFolder().doNotDeleteOnExit();
ParserTest.java,Repository toUse = repoBuilder.build();,if (repoBuilder != null ) Repository toUse = repoBuilder.build();
CellTest.java,Repository repo = new TestRepositoryBuilder().build();,if (TestRepositoryBuilder() != null ) Repository repo = new TestRepositoryBuilder().build();
CellTest.java,Repository repo = new TestRepositoryBuilder().build();,if (TestRepositoryBuilder() != null ) Repository repo = new TestRepositoryBuilder().build();
FetchCommand.java,DownloadConfig downloadConfig = new DownloadConfig(params.getBuckConfig());,if (DownloadConfig(params != null ) DownloadConfig downloadConfig = new DownloadConfig(params.getBuckConfig());
FetchCommand.java,Optional<String> defaultMavenRepo = downloadConfig.getMavenRepo();,if (downloadConfig != null ) Optional<String> defaultMavenRepo = downloadConfig.getMavenRepo();
FetchCommand.java,Optional<Proxy> proxy = downloadConfig.getProxy();,if (downloadConfig != null ) Optional<Proxy> proxy = downloadConfig.getProxy();
KnownBuildRuleTypes.java,Optional<String> defaultMavenRepo = downloadConfig.getMavenRepo();,if (downloadConfig != null ) Optional<String> defaultMavenRepo = downloadConfig.getMavenRepo();
KnownBuildRuleTypes.java,Optional<Proxy> proxy = downloadConfig.getProxy();,if (downloadConfig != null ) Optional<Proxy> proxy = downloadConfig.getProxy();
KnownBuildRuleTypes.java,boolean downloadAtRuntimeOk = downloadConfig.isDownloadAtRuntimeOk();,if (downloadConfig != null ) boolean downloadAtRuntimeOk = downloadConfig.isDownloadAtRuntimeOk();
ProjectFilesystem.java,this.projectRoot = projectRoot.toAbsolutePath();,if (projectRoot != null ) this.projectRoot = projectRoot.toAbsolutePath();
TargetGraphToActionGraph.java,ProjectFilesystem filesystem = node.getRuleFactoryParams().getProjectFilesystem();,if (node != null ) ProjectFilesystem filesystem = node.getRuleFactoryParams().getProjectFilesystem();
TargetGraphToActionGraph.java,ruleResolvers = resolvers.build();,if (resolvers != null ) ruleResolvers = resolvers.build();
Watchman.java,long start = System.currentTimeMillis();,if (System != null ) long start = System.currentTimeMillis();
ListeningProcessExecutorTest.java,ByteBuffer subBuffer = bufferToWrite.slice();,if (bufferToWrite != null ) ByteBuffer subBuffer = bufferToWrite.slice();
TestsFunction.java,tests = Sets.newHashSet();,if (Sets != null ) tests = Sets.newHashSet();
TestsFunction.java,Iterator<T> it = tests.iterator();,if (tests != null ) Iterator<T> it = tests.iterator();
TestsFunction.java,T test = it.next();,if (it != null ) T test = it.next();
HttpArtifactCacheBinaryProtocol.java,FetchResponseReadResult.Builder result = FetchResponseReadResult.builder();,if (FetchResponseReadResult != null ) FetchResponseReadResult.Builder result = FetchResponseReadResult.builder();
HttpArtifactCacheBinaryProtocol.java,int metadataSize = input.readInt();,if (input != null ) int metadataSize = input.readInt();
CxxPrepareForLinkStepTest.java,ExecutionContext context = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext context = TestExecutionContext.newInstance();
BuildCommand.java,resolver = targetGraphToActionGraph.getRuleResolver();,if (targetGraphToActionGraph != null ) resolver = targetGraphToActionGraph.getRuleResolver();
FetchCommand.java,SourcePathResolver pathResolver = new SourcePathResolver(transformer.getRuleResolver());,if (SourcePathResolver(transformer != null ) SourcePathResolver pathResolver = new SourcePathResolver(transformer.getRuleResolver());
CachingBuildEngine.java,RuleKey inputRuleKey = inputBasedRuleKeyBuilderFactory.newInstance(rule).build();,if (inputBasedRuleKeyBuilderFactory != null ) RuleKey inputRuleKey = inputBasedRuleKeyBuilderFactory.newInstance(rule).build();
CachingBuildEngine.java,RuleKey abiRuleKey = abiRuleKeyBuilderFactory.newInstance(rule).build();,if (abiRuleKeyBuilderFactory != null ) RuleKey abiRuleKey = abiRuleKeyBuilderFactory.newInstance(rule).build();
TargetGraphToActionGraph.java,ActionGraph result = new ActionGraph(ruleResolver.getBuildRules());,if (ActionGraph(ruleResolver != null ) ActionGraph result = new ActionGraph(ruleResolver.getBuildRules());
CachingBuildEngineTest.java,FakeProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) FakeProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,final FakeProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) final FakeProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,FakeProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) FakeProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,FakeProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) FakeProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,final FakeProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) final FakeProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,FakeProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) FakeProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,final FakeProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) final FakeProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,final FakeProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) final FakeProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,FakeProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) FakeProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,FakeProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) FakeProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,FakeProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) FakeProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
ArtifactCaches.java,URL url = buckConfig.getHttpCacheUrl();,if (buckConfig != null ) URL url = buckConfig.getHttpCacheUrl();
HttpArtifactCacheBinaryProtocol.java,int metadataSize = input.readInt();,if (input != null ) int metadataSize = input.readInt();
HttpArtifactCacheBinaryProtocol.java,int size = metadataIn.readInt();,if (metadataIn != null ) int size = metadataIn.readInt();
HttpArtifactCacheBinaryProtocol.java,size = metadataIn.readInt();,if (metadataIn != null ) size = metadataIn.readInt();
HttpArtifactCacheBinaryProtocol.java,String key = metadataIn.readUTF();,if (metadataIn != null ) String key = metadataIn.readUTF();
HttpArtifactCacheBinaryProtocol.java,int valSize = metadataIn.readInt();,if (metadataIn != null ) int valSize = metadataIn.readInt();
InstallCommand.java,Optional<Path> helperOverridePath = appleConfig.getAppleDeviceHelperPath();,if (appleConfig != null ) Optional<Path> helperOverridePath = appleConfig.getAppleDeviceHelperPath();
InstallCommand.java,helperPath = projectFilesystem.resolve(helperOverridePath.get());,if (projectFilesystem != null ) helperPath = projectFilesystem.resolve(helperOverridePath.get());
StackedFileHashCache.java,ProjectFilesystem filesystem = cache.getFilesystem();,if (cache != null ) ProjectFilesystem filesystem = cache.getFilesystem();
StackedFileHashCacheTest.java,ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
QuickstartCommand.java,String sdkLocation = getAndroidSdkDir(params.getAndroidPlatformTargetSupplier());,if (getAndroidSdkDir(params != null ) String sdkLocation = getAndroidSdkDir(params.getAndroidPlatformTargetSupplier());
QuickstartCommand.java,sdkLocation = sdkLocationFile.getAbsoluteFile().toString();,if (sdkLocationFile != null ) sdkLocation = sdkLocationFile.getAbsoluteFile().toString();
QuickstartCommand.java,Optional<Path> androidSdkDir = androidDirectoryResolver.findAndroidSdkDirSafe();,if (androidDirectoryResolver != null ) Optional<Path> androidSdkDir = androidDirectoryResolver.findAndroidSdkDirSafe();
QuickstartCommand.java,String sdkLocation = getAndroidSdkDir(params.getRepository().getAndroidDirectoryResolver());,if (getAndroidSdkDir(params != null ) String sdkLocation = getAndroidSdkDir(params.getRepository().getAndroidDirectoryResolver());
ProjectCommand.java,ImmutableSet<BuildTarget> requiredBuildTargets = requiredBuildTargetsBuilder.build();,if (requiredBuildTargetsBuilder != null ) ImmutableSet<BuildTarget> requiredBuildTargets = requiredBuildTargetsBuilder.build();
ApkGenruleDescription.java,ImmutableList<SourcePath> srcs = args.srcs.get();,if (args != null ) ImmutableList<SourcePath> srcs = args.srcs.get();
HttpArtifactCacheBinaryProtocol.java,Hasher hasher = hashFunction.newHasher();,if (hashFunction != null ) Hasher hasher = hashFunction.newHasher();
HttpArtifactCacheBinaryProtocol.java,Hasher artifactOnlyHasher = hashFunction.newHasher();,if (hashFunction != null ) Hasher artifactOnlyHasher = hashFunction.newHasher();
HttpArtifactCacheBinaryProtocol.java,Hasher hasher = hashFunction.newHasher();,if (hashFunction != null ) Hasher hasher = hashFunction.newHasher();
HttpArtifactCacheBinaryProtocol.java,Hasher hasher = hashFunction.newHasher();,if (hashFunction != null ) Hasher hasher = hashFunction.newHasher();
TestRepositoryBuilder.java,name = Optional.absent();,if (Optional != null ) name = Optional.absent();
HttpArtifactCache.java,Hasher hasher = hashFunction.newHasher();,if (hashFunction != null ) Hasher hasher = hashFunction.newHasher();
HttpArtifactCache.java,int metadataSize = input.readInt();,if (input != null ) int metadataSize = input.readInt();
HttpArtifactCache.java,Set<RuleKey> ruleKeys = Sets.newHashSet();,if (Sets != null ) Set<RuleKey> ruleKeys = Sets.newHashSet();
HttpArtifactCache.java,int size = metadataIn.readInt();,if (metadataIn != null ) int size = metadataIn.readInt();
HttpArtifactCache.java,size = metadataIn.readInt();,if (metadataIn != null ) size = metadataIn.readInt();
HttpArtifactCache.java,String key = metadataIn.readUTF();,if (metadataIn != null ) String key = metadataIn.readUTF();
HttpArtifactCache.java,int valSize = metadataIn.readInt();,if (metadataIn != null ) int valSize = metadataIn.readInt();
HttpArtifactCache.java,metadata = metadataBuilder.build();,if (metadataBuilder != null ) metadata = metadataBuilder.build();
HttpArtifactCache.java,Hasher artifactOnlyHasher = hashFunction.newHasher();,if (hashFunction != null ) Hasher artifactOnlyHasher = hashFunction.newHasher();
HttpArtifactCache.java,HashCode actualHashCode = hasher.hash();,if (hasher != null ) HashCode actualHashCode = hasher.hash();
HttpArtifactCache.java,Hasher hasher = hashFunction.newHasher();,if (hashFunction != null ) Hasher hasher = hashFunction.newHasher();
HttpArtifactCache.java,Hasher hasher = hashFunction.newHasher();,if (hashFunction != null ) Hasher hasher = hashFunction.newHasher();
TargetGraphToActionGraph.java,ActionGraph result = bottomUpTraversal.getResult();,if (bottomUpTraversal != null ) ActionGraph result = bottomUpTraversal.getResult();
AbstractBottomUpTraversalTest.java,List<String> visitedNodes = traversal.getResult();,if (traversal != null ) List<String> visitedNodes = traversal.getResult();
AbstractBottomUpTraversalTest.java,List<String> visitedNodes = traversal.getResult();,if (traversal != null ) List<String> visitedNodes = traversal.getResult();
TargetsCommand.java,BuildTarget buildTarget = targetNode.getBuildTarget();,if (targetNode != null ) BuildTarget buildTarget = targetNode.getBuildTarget();
DalvikStatsCache.java,stats = DalvikStatsTool.getEstimate(entry.getInput());,if (DalvikStatsTool != null ) stats = DalvikStatsTool.getEstimate(entry.getInput());
CxxGtestTest.java,testStdout = Lists.newArrayList();,if (Lists != null ) testStdout = Lists.newArrayList();
AndroidResource.java,String rDotJavaPackageFromAndroidManifest = androidManifestReader.getPackage();,if (androidManifestReader != null ) String rDotJavaPackageFromAndroidManifest = androidManifestReader.getPackage();
ArtifactCacheBuckConfig.java,ImmutableList<ArtifactCache> artifactCaches = builder.build();,if (builder != null ) ImmutableList<ArtifactCache> artifactCaches = builder.build();
ArtifactCacheBuckConfig.java,final String localhost = buckConfig.getLocalhost();,if (buckConfig != null ) final String localhost = buckConfig.getLocalhost();
ArtifactCacheBuckConfig.java,OkHttpClient fetchClient = client.clone();,if (client != null ) OkHttpClient fetchClient = client.clone();
BuckConfig.java,ImmutableList<ArtifactCache> artifactCaches = builder.build();,if (builder != null ) ImmutableList<ArtifactCache> artifactCaches = builder.build();
BuckConfig.java,OkHttpClient fetchClient = client.clone();,if (client != null ) OkHttpClient fetchClient = client.clone();
LoggingArtifactCacheFactory.java,this.createdArtifactCaches = Lists.newArrayList();,if (Lists != null ) this.createdArtifactCaches = Lists.newArrayList();
LoggingArtifactCacheFactory.java,ArtifactCacheConnectEvent.Started started = ArtifactCacheConnectEvent.started();,if (ArtifactCacheConnectEvent != null ) ArtifactCacheConnectEvent.Started started = ArtifactCacheConnectEvent.started();
AndroidPrebuiltAarGraphEnhancer.java,ImmutableSet<Path> entriesToJar = entriesToJarBuilder.build();,if (entriesToJarBuilder != null ) ImmutableSet<Path> entriesToJar = entriesToJarBuilder.build();
ProjectGenerator.java,AppleNativeTargetDescriptionArg arg = targetNode.getConstructorArg();,if (targetNode != null ) AppleNativeTargetDescriptionArg arg = targetNode.getConstructorArg();
Main.java,this.hashCache = new DefaultFileHashCache(repository.getFilesystem());,if (DefaultFileHashCache(repository != null ) this.hashCache = new DefaultFileHashCache(repository.getFilesystem());
ExopackageInstaller.java,String libAbi = relativePath.getParent().toString();,if (relativePath != null ) String libAbi = relativePath.getParent().toString();
Build.java,Set<BuildRule> allBuildRules = Sets.newHashSet();,if (Sets != null ) Set<BuildRule> allBuildRules = Sets.newHashSet();
Build.java,ImmutableSortedSet<BuildRule> deps = buildRule.getDeps();,if (buildRule != null ) ImmutableSortedSet<BuildRule> deps = buildRule.getDeps();
GenruleDescription.java,ImmutableList<SourcePath> srcs = args.srcs.get();,if (args != null ) ImmutableList<SourcePath> srcs = args.srcs.get();
AbstractBuildRule.java,this.deps = buildRuleParams.getDeps();,if (buildRuleParams != null ) this.deps = buildRuleParams.getDeps();
TestRunning.java,ImmutableSortedSet<String> pathsFromRoot = defaultJavaPackageFinder.getPathsFromRoot();,if (defaultJavaPackageFinder != null ) ImmutableSortedSet<String> pathsFromRoot = defaultJavaPackageFinder.getPathsFromRoot();
TestRunning.java,ImmutableSet<String> pathElements = defaultJavaPackageFinder.getPathElements();,if (defaultJavaPackageFinder != null ) ImmutableSet<String> pathElements = defaultJavaPackageFinder.getPathElements();
TestRunning.java,Path directory = filesystem.getPathForRelativePath(javaSrcPath.getParent());,if (filesystem != null ) Path directory = filesystem.getPathForRelativePath(javaSrcPath.getParent());
TestRunning.java,directory = directory.getParent();,if (directory != null ) directory = directory.getParent();
TestRunning.java,String directoryPath = directory.toString();,if (directory != null ) String directoryPath = directory.toString();
TargetsCommand.java,BuildTarget buildTarget = targetNode.getBuildTarget();,if (targetNode != null ) BuildTarget buildTarget = targetNode.getBuildTarget();
BatchingLogger.java,currentBatchSize += jsonBlob.length();,if (jsonBlob != null ) currentBatchSize += jsonBlob.length();
Main.java,Path parserRoot = daemon.getParser().getProjectRoot();,if (daemon != null ) Path parserRoot = daemon.getParser().getProjectRoot();
ApkBuilderStep.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
ApkBuilderStep.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
CompileStringsStep.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
CopyNativeLibraries.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
CopyNativeLibraries.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
DexJarAnalysisStep.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
DxStep.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
FilterResourcesStep.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
GenStringSourceMapStep.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
GenStringSourceMapStep.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
GenStringSourceMapStep.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
GenerateBuildConfigStep.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
GenerateManifestStep.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
GetStringsFilesStep.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
NdkBuildStep.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
SmartDexingStep.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
SplitZipStep.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
PlistProcessStep.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
XctestRunTestsStep.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
CxxTestStep.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
DTestStep.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
EstimateLinearAllocStep.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
CalculateAbiStep.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
JarDirectoryStepHelper.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
JarDirectoryStepHelper.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
JavacStep.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
MavenUberJar.java,MkdirStep mkOutputDirStep = new MkdirStep(pathToOutput.getParent());,if (MkdirStep(pathToOutput != null ) MkdirStep mkOutputDirStep = new MkdirStep(pathToOutput.getParent());
OCamlBuildStep.java,MakeCleanDirectoryStep mkDir = new MakeCleanDirectoryStep(ocamlContext.getCompileOutputDir());,if (MakeCleanDirectoryStep(ocamlContext != null ) MakeCleanDirectoryStep mkDir = new MakeCleanDirectoryStep(ocamlContext.getCompileOutputDir());
OCamlBuildStep.java,MakeCleanDirectoryStep mkDir = new MakeCleanDirectoryStep(ocamlContext.getGeneratedSourceDir());,if (MakeCleanDirectoryStep(ocamlContext != null ) MakeCleanDirectoryStep mkDir = new MakeCleanDirectoryStep(ocamlContext.getGeneratedSourceDir());
OCamlDebugLauncherStep.java,Step chmod = new MakeExecutableStep(args.getOutput());,if (MakeExecutableStep(args != null ) Step chmod = new MakeExecutableStep(args.getOutput());
PexStep.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
RecordFileSha1Step.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
RunShTestAndRecordResultStep.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
SymlinkFilesIntoDirectoryStep.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
FindAndReplaceStep.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
MkdirStep.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
MoveStep.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
RmStep.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
XzStep.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
RepackZipEntriesStep.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
UnzipStep.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
UnzipStep.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
ZipStep.java,final ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) final ProjectFilesystem filesystem = context.getProjectFilesystem();
DexProducedFromJavaLibraryThatContainsClassFilesTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(buildTarget).build();,if (FakeBuildRuleParamsBuilder(buildTarget) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(buildTarget).build();
RmStepTest.java,File file = tmpDir.newFile();,if (tmpDir != null ) File file = tmpDir.newFile();
RmStepTest.java,File dir = tmpDir.newFolder();,if (tmpDir != null ) File dir = tmpDir.newFolder();
RepackZipEntriesStepTest.java,byte[] expected = Files.readAllBytes(zipFile.toPath());,if (Files != null ) byte[] expected = Files.readAllBytes(zipFile.toPath());
RepackZipEntriesStepTest.java,byte[] actual = Files.readAllBytes(out.toPath());,if (Files != null ) byte[] actual = Files.readAllBytes(out.toPath());
RepackZipEntriesStepTest.java,byte[] expected = Files.readAllBytes(zipFile.toPath());,if (Files != null ) byte[] expected = Files.readAllBytes(zipFile.toPath());
RepackZipEntriesStepTest.java,byte[] actual = Files.readAllBytes(out.toPath());,if (Files != null ) byte[] actual = Files.readAllBytes(out.toPath());
DefaultOnDiskBuildInfo.java,JsonElement element = new JsonStreamParser(input).next();,if (JsonStreamParser(input) != null ) JsonElement element = new JsonStreamParser(input).next();
DefaultOnDiskBuildInfo.java,JsonArray array = element.getAsJsonArray();,if (element != null ) JsonArray array = element.getAsJsonArray();
CachingBuildEngine.java,outputSize = Optional.of(buildInfoRecorder.getOutputSize());,if (Optional != null ) outputSize = Optional.of(buildInfoRecorder.getOutputSize());
TargetPatternEvaluator.java,targets = builder.build();,if (builder != null ) targets = builder.build();
AbstractBuildRule.java,this.extraDeps = buildRuleParams.getExtraDeps();,if (buildRuleParams != null ) this.extraDeps = buildRuleParams.getExtraDeps();
AbstractBuildRule.java,RuleKey ruleKeyWithoutDeps = builder.build();,if (builder != null ) RuleKey ruleKeyWithoutDeps = builder.build();
AbstractBuildRule.java,RuleKey totalRuleKey = builder.build();,if (builder != null ) RuleKey totalRuleKey = builder.build();
CachingBuildEngine.java,RuleKey ruleKeyNoDeps = rule.getRuleKeyWithoutDeps();,if (rule != null ) RuleKey ruleKeyNoDeps = rule.getRuleKeyWithoutDeps();
CachingBuildEngineTest.java,ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();
CachingBuildEngineTest.java,BuildResult result = buildResult.get();,if (buildResult != null ) BuildResult result = buildResult.get();
CachingBuildEngineTest.java,List<BuckEvent> events = listener.getEvents();,if (listener != null ) List<BuckEvent> events = listener.getEvents();
CachingBuildEngineTest.java,Iterator<BuckEvent> eventIter = events.iterator();,if (events != null ) Iterator<BuckEvent> eventIter = events.iterator();
CachingBuildEngineTest.java,ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());,if (FakeProjectFilesystem(tmp != null ) ProjectFilesystem filesystem = new FakeProjectFilesystem(tmp.getRoot());
CachingBuildEngineTest.java,BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();
CachingBuildEngineTest.java,BuildResult result = buildResult.get();,if (buildResult != null ) BuildResult result = buildResult.get();
CachingBuildEngineTest.java,List<BuckEvent> events = listener.getEvents();,if (listener != null ) List<BuckEvent> events = listener.getEvents();
CachingBuildEngineTest.java,Iterator<BuckEvent> eventIter = events.iterator();,if (events != null ) Iterator<BuckEvent> eventIter = events.iterator();
CachingBuildEngineTest.java,String hash = ruleKey.getHashCode().toString();,if (ruleKey != null ) String hash = ruleKey.getHashCode().toString();
RuleKeyTest.java,BuildRuleParams depParams = new FakeBuildRuleParamsBuilder(depTarget).build();,if (FakeBuildRuleParamsBuilder(depTarget) != null ) BuildRuleParams depParams = new FakeBuildRuleParamsBuilder(depTarget).build();
NewNativeTargetProjectMutator.java,Path variantDirectory = variantFilePath.getParent();,if (variantFilePath != null ) Path variantDirectory = variantFilePath.getParent();
NewNativeTargetProjectMutator.java,String variantDirectoryName = variantDirectory.getFileName().toString();,if (variantDirectory != null ) String variantDirectoryName = variantDirectory.getFileName().toString();
NewNativeTargetProjectMutator.java,String variantFileName = variantFilePath.getFileName().toString();,if (variantFilePath != null ) String variantFileName = variantFilePath.getFileName().toString();
NewNativeTargetProjectMutator.java,ImmutableList<String> assetCatalogs = assetCatalogsBuilder.build();,if (assetCatalogsBuilder != null ) ImmutableList<String> assetCatalogs = assetCatalogsBuilder.build();
NewNativeTargetProjectMutatorTest.java,AppleAssetCatalogDescription.Arg arg = new AppleAssetCatalogDescription.Arg();,if (AppleAssetCatalogDescription != null ) AppleAssetCatalogDescription.Arg arg = new AppleAssetCatalogDescription.Arg();
NewNativeTargetProjectMutatorTest.java,int lineLength = line.length();,if (line != null ) int lineLength = line.length();
CachingBuildEngine.java,final OnDiskBuildInfo onDiskBuildInfo = context.createOnDiskBuildInfoFor(rule.getBuildTarget());,if (context != null ) final OnDiskBuildInfo onDiskBuildInfo = context.createOnDiskBuildInfoFor(rule.getBuildTarget());
CachingBuildEngineTest.java,BuildRuleParams buildRuleParams = new FakeBuildRuleParamsBuilder(buildTarget).build();,if (FakeBuildRuleParamsBuilder(buildTarget) != null ) BuildRuleParams buildRuleParams = new FakeBuildRuleParamsBuilder(buildTarget).build();
CachingBuildEngineTest.java,BuildRuleParams buildRuleParams = new FakeBuildRuleParamsBuilder(buildTarget).build();,if (FakeBuildRuleParamsBuilder(buildTarget) != null ) BuildRuleParams buildRuleParams = new FakeBuildRuleParamsBuilder(buildTarget).build();
CachingBuildEngineTest.java,BuildRuleParams buildRuleParams = new FakeBuildRuleParamsBuilder(buildTarget).build();,if (FakeBuildRuleParamsBuilder(buildTarget) != null ) BuildRuleParams buildRuleParams = new FakeBuildRuleParamsBuilder(buildTarget).build();
DefaultExecutionEnvironment.java,localHostname = InetAddress.getLocalHost().getHostName();,if (InetAddress != null ) localHostname = InetAddress.getLocalHost().getHostName();
AidlStep.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
FilterResourcesStep.java,Console console = context.getConsole();,if (context != null ) Console console = context.getConsole();
ExternalJavac.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
Genrule.java,File workingDirectory = new File(absolutePathToSrcDirectory.toString());,if (File(absolutePathToSrcDirectory != null ) File workingDirectory = new File(absolutePathToSrcDirectory.toString());
DexProducedFromJavaLibraryThatContainsClassFilesTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(buildTarget).build();,if (FakeBuildRuleParamsBuilder(buildTarget) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(buildTarget).build();
GenAidlTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
ProGuardObfuscateStepTest.java,Iterator<String> argsIt = commandLineHelperStep.getParameters(context).iterator();,if (commandLineHelperStep != null ) Iterator<String> argsIt = commandLineHelperStep.getParameters(context).iterator();
CachingBuildEngineTest.java,ZipEntry entry = new ZipEntry(mapEntry.getKey());,if (ZipEntry(mapEntry != null ) ZipEntry entry = new ZipEntry(mapEntry.getKey());
AbstractBuckEvent.java,eventKey = EventKey.of();,if (EventKey != null ) eventKey = EventKey.of();
AbstractBuckEvent.java,eventKey = event.getEventKey();,if (event != null ) eventKey = event.getEventKey();
ParsingJavaPackageFinder.java,Path parentPath = pathRelativeToProjectRoot.getParent();,if (pathRelativeToProjectRoot != null ) Path parentPath = pathRelativeToProjectRoot.getParent();
ParsingJavaPackageFinder.java,Path path = pathRelativeToProjectRoot.getParent();,if (pathRelativeToProjectRoot != null ) Path path = pathRelativeToProjectRoot.getParent();
ParsingJavaPackageFinder.java,Path suffix = path.relativize(pathRelativeToProjectRoot.getParent());,if (path != null ) Path suffix = path.relativize(pathRelativeToProjectRoot.getParent());
ParsingJavaPackageFinder.java,path = path.getParent();,if (path != null ) path = path.getParent();
SchemeGenerator.java,XCScheme.BuildAction buildAction = new XCScheme.BuildAction();,if (XCScheme != null ) XCScheme.BuildAction buildAction = new XCScheme.BuildAction();
RuleKey.java,this.logElms = Lists.newArrayList();,if (Lists != null ) this.logElms = Lists.newArrayList();
RuleKey.java,Path path = relativePath.get();,if (relativePath != null ) Path path = relativePath.get();
RuleKey.java,RuleKey ruleKey = new RuleKey(hasher.hash());,if (RuleKey(hasher != null ) RuleKey ruleKey = new RuleKey(hasher.hash());
NewNativeTargetProjectMutatorTest.java,NSDictionary barBuildFileSettings = barHeaderBuildFile.getSettings().get();,if (barHeaderBuildFile != null ) NSDictionary barBuildFileSettings = barHeaderBuildFile.getSettings().get();
NewNativeTargetProjectMutatorTest.java,NSDictionary blechBuildFileSettings = bazHeaderBuildFile.getSettings().get();,if (bazHeaderBuildFile != null ) NSDictionary blechBuildFileSettings = bazHeaderBuildFile.getSettings().get();
ProjectGeneratorTest.java,List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();,if (projectGenerator != null ) List<Path> headerSymlinkTrees = projectGenerator.getGeneratedHeaderSymlinkTrees();
ProjectGeneratorTest.java,PBXBuildFile headerBuildFile = Iterables.getOnlyElement(headersBuildPhase.getFiles());,if (Iterables != null ) PBXBuildFile headerBuildFile = Iterables.getOnlyElement(headersBuildPhase.getFiles());
ProjectGeneratorTest.java,PBXFileReference frameworkProductReference = frameworkPbxTarget.getProductReference();,if (frameworkPbxTarget != null ) PBXFileReference frameworkProductReference = frameworkPbxTarget.getProductReference();
Main.java,ParserConfig parserConfig = new ParserConfig(repository.getBuckConfig());,if (ParserConfig(repository != null ) ParserConfig parserConfig = new ParserConfig(repository.getBuckConfig());
Parser.java,this.buildFileDependents = ArrayListMultimap.create();,if (ArrayListMultimap != null ) this.buildFileDependents = ArrayListMultimap.create();
SuperConsoleEventBusListener.java,lastNumLinesPrinted = lines.size() + logLines.size();,if (logLines != null ) lastNumLinesPrinted = lines.size() + logLines.size();
SuperConsoleEventBusListener.java,ImmutableList<String> logEventLines = logEventLinesBuilder.build();,if (logEventLinesBuilder != null ) ImmutableList<String> logEventLines = logEventLinesBuilder.build();
ProjectGenerator.java,String thisTargetName = targetNode.getBuildTarget().getFullyQualifiedName();,if (targetNode != null ) String thisTargetName = targetNode.getBuildTarget().getFullyQualifiedName();
ProjectGenerator.java,String conflictingTargetName = gidsToTargetNames.get(targetGid.get());,if (gidsToTargetNames != null ) String conflictingTargetName = gidsToTargetNames.get(targetGid.get());
NewNativeTargetProjectMutator.java,GenruleDescription.Arg arg = (GenruleDescription.Arg) node.getConstructorArg();,if (node != null ) GenruleDescription.Arg arg = (GenruleDescription.Arg) node.getConstructorArg();
BuckConfigTest.java,ImmutableSet<Path> ignorePaths = config.getIgnorePaths();,if (config != null ) ImmutableSet<Path> ignorePaths = config.getIgnorePaths();
BuckConfigTest.java,ImmutableSet<Path> ignorePaths = config.getIgnorePaths();,if (config != null ) ImmutableSet<Path> ignorePaths = config.getIgnorePaths();
ProjectBuildFileParser.java,OutputStream stdin = buckPyProcess.getOutputStream();,if (buckPyProcess != null ) OutputStream stdin = buckPyProcess.getOutputStream();
ProjectBuildFileParser.java,InputStream stderr = buckPyProcess.getErrorStream();,if (buckPyProcess != null ) InputStream stderr = buckPyProcess.getErrorStream();
ProjectBuildFileParser.java,String format = bufferedReader.readLine();,if (bufferedReader != null ) String format = bufferedReader.readLine();
AndroidBinary.java,ImmutableList<Path> outputAssetLibraries = outputAssetLibrariesBuilder.build();,if (outputAssetLibrariesBuilder != null ) ImmutableList<Path> outputAssetLibraries = outputAssetLibrariesBuilder.build();
AndroidBinary.java,String output = relativeLibPath.toString();,if (relativeLibPath != null ) String output = relativeLibPath.toString();
Parser.java,this.memoizedTargetNodes = Maps.newHashMap();,if (Maps != null ) this.memoizedTargetNodes = Maps.newHashMap();
AuditOwnerCommand.java,OwnersReport report = OwnersReport.emptyReport();,if (OwnersReport != null ) OwnersReport report = OwnersReport.emptyReport();
Pom.java,DefaultArtifact artifact = new DefaultArtifact(mavenCoords.get());,if (DefaultArtifact(mavenCoords != null ) DefaultArtifact artifact = new DefaultArtifact(mavenCoords.get());
ApplePackageIntegrationTest.java,public DebuggableTemporaryFolder tmp = new DebuggableTemporaryFolder().doNotDeleteOnExit();,if (DebuggableTemporaryFolder() != null ) public DebuggableTemporaryFolder tmp = new DebuggableTemporaryFolder().doNotDeleteOnExit();
Main.java,ParserConfig parserConfig = new ParserConfig(rootRepository.getBuckConfig());,if (ParserConfig(rootRepository != null ) ParserConfig parserConfig = new ParserConfig(rootRepository.getBuckConfig());
ParserTest.java,buildRuleTypes = repository.getKnownBuildRuleTypes();,if (repository != null ) buildRuleTypes = repository.getKnownBuildRuleTypes();
AppleBundle.java,this.ipaPath = Optional.absent();,if (Optional != null ) this.ipaPath = Optional.absent();
ThriftPythonEnhancer.java,String thriftBaseName = Files.getNameWithoutExtension(ent.getKey());,if (Files != null ) String thriftBaseName = Files.getNameWithoutExtension(ent.getKey());
ThriftBuckConfigTest.java,BuildTarget thriftTarget = thriftRule.getBuildTarget();,if (thriftRule != null ) BuildTarget thriftTarget = thriftRule.getBuildTarget();
DalvikAwareZipSplitter.java,String relativePath = entry.getRelativePath();,if (entry != null ) String relativePath = entry.getRelativePath();
AuditDependenciesCommandTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
AppleDescriptions.java,output.canBeAsset = Optional.absent();,if (Optional != null ) output.canBeAsset = Optional.absent();
CxxLibraryDescription.java,SourceWithFlagsList sourceWithFlagsList = args.srcs.get();,if (args != null ) SourceWithFlagsList sourceWithFlagsList = args.srcs.get();
NewNativeTargetProjectMutator.java,ProjectFilesystem filesystem = targetNode.getRuleFactoryParams().getProjectFilesystem();,if (targetNode != null ) ProjectFilesystem filesystem = targetNode.getRuleFactoryParams().getProjectFilesystem();
NewNativeTargetProjectMutator.java,ReactNativeLibraryArgs args = (ReactNativeLibraryArgs) targetNode.getConstructorArg();,if (targetNode != null ) ReactNativeLibraryArgs args = (ReactNativeLibraryArgs) targetNode.getConstructorArg();
ProjectGenerator.java,boolean skipRNBundle = ReactNativeFlavors.skipBundling(buildTargetNode.getBuildTarget());,if (ReactNativeFlavors != null ) boolean skipRNBundle = ReactNativeFlavors.skipBundling(buildTargetNode.getBuildTarget());
AndroidBinary.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
AndroidInstrumentationTest.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
AndroidInstrumentationTest.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
AndroidPrebuiltAarGraphEnhancer.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
ComputeExopackageDepsAbi.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
ExopackageInstaller.java,this.projectFilesystem = context.getProjectFilesystem();,if (context != null ) this.projectFilesystem = context.getProjectFilesystem();
MergeAndroidResourcesStep.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
PreDexMerge.java,ProjectFilesystem filesystem = executionContext.getProjectFilesystem();,if (executionContext != null ) ProjectFilesystem filesystem = executionContext.getProjectFilesystem();
PreDexedFilesSorter.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
ProguardTranslatorFactory.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
ProguardTranslatorFactory.java,List<String> lines = projectFilesystem.readLines(proguardMappingFile.get());,if (projectFilesystem != null ) List<String> lines = projectFilesystem.readLines(proguardMappingFile.get());
MiniAapt.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
TestRuleKeyFileHelper.java,Path outputDir = testRule.getPathToTestOutputDirectory();,if (testRule != null ) Path outputDir = testRule.getPathToTestOutputDirectory();
TestRuleKeyFileHelper.java,Path outputDir = testRule.getPathToTestOutputDirectory();,if (testRule != null ) Path outputDir = testRule.getPathToTestOutputDirectory();
CxxCompilationDatabase.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
CxxTest.java,ProjectFilesystem filesystem = executionContext.getProjectFilesystem();,if (executionContext != null ) ProjectFilesystem filesystem = executionContext.getProjectFilesystem();
DTest.java,ProjectFilesystem filesystem = executionContext.getProjectFilesystem();,if (executionContext != null ) ProjectFilesystem filesystem = executionContext.getProjectFilesystem();
GwtBinary.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
JavaTest.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
ReactNativeBundle.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
ReactNativeDeps.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
ReactNativeDeps.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
PythonTest.java,ProjectFilesystem fs = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem fs = context.getProjectFilesystem();
PythonTest.java,ProjectFilesystem filesystem = executionContext.getProjectFilesystem();,if (executionContext != null ) ProjectFilesystem filesystem = executionContext.getProjectFilesystem();
ShTest.java,ProjectFilesystem filesystem = executionContext.getProjectFilesystem();,if (executionContext != null ) ProjectFilesystem filesystem = executionContext.getProjectFilesystem();
ShTest.java,final ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) final ProjectFilesystem filesystem = context.getProjectFilesystem();
CxxCompilationDatabaseTest.java,BuildRuleParams testBuildRuleParams = new FakeBuildRuleParamsBuilder(testBuildTarget).build();,if (FakeBuildRuleParamsBuilder(testBuildTarget) != null ) BuildRuleParams testBuildRuleParams = new FakeBuildRuleParamsBuilder(testBuildTarget).build();
CxxCompilationDatabaseTest.java,compileBuildRuleParams = new FakeBuildRuleParamsBuilder(compileTarget).build();,if (FakeBuildRuleParamsBuilder(compileTarget) != null ) compileBuildRuleParams = new FakeBuildRuleParamsBuilder(compileTarget).build();
CxxCompilationDatabaseTest.java,compileBuildRuleParams = new FakeBuildRuleParamsBuilder(compileTarget).build();,if (FakeBuildRuleParamsBuilder(compileTarget) != null ) compileBuildRuleParams = new FakeBuildRuleParamsBuilder(compileTarget).build();
CxxCompilationDatabaseTest.java,BuildRuleParams testBuildRuleParams = new FakeBuildRuleParamsBuilder(testBuildTarget).build();,if (FakeBuildRuleParamsBuilder(testBuildTarget) != null ) BuildRuleParams testBuildRuleParams = new FakeBuildRuleParamsBuilder(testBuildTarget).build();
ConcatStep.java,this.inputs = inputs.build();,if (inputs != null ) this.inputs = inputs.build();
IjProjectTemplateDataPreparer.java,fileToLookupPackageIn = folder.getInputs().first();,if (folder != null ) fileToLookupPackageIn = folder.getInputs().first();
IjSourceRootSimplifier.java,ImmutableSet<IjFolder> foldersToMerge = foldersToMergeBuilder.build();,if (foldersToMergeBuilder != null ) ImmutableSet<IjFolder> foldersToMerge = foldersToMergeBuilder.build();
IjSourceRootSimplifier.java,Path path = folder.getPath();,if (folder != null ) Path path = folder.getPath();
IjSourceRootSimplifier.java,Path parent = path.getParent();,if (path != null ) Path parent = path.getParent();
IjSourceRootSimplifier.java,IjFolder aChild = presentChildren.iterator().next();,if (presentChildren != null ) IjFolder aChild = presentChildren.iterator().next();
IjSourceRootSimplifier.java,Path childPackage = packagePathCache.lookup(child).get();,if (packagePathCache != null ) Path childPackage = packagePathCache.lookup(child).get();
IjSourceRootSimplifier.java,delegate = new ParsingJavaPackageFinder.PackagePathCache();,if (ParsingJavaPackageFinder != null ) delegate = new ParsingJavaPackageFinder.PackagePathCache();
ParsingJavaPackageFinder.java,Path parentPath = pathRelativeToProjectRoot.getParent();,if (pathRelativeToProjectRoot != null ) Path parentPath = pathRelativeToProjectRoot.getParent();
ParsingJavaPackageFinder.java,Path path = pathRelativeToProjectRoot.getParent();,if (pathRelativeToProjectRoot != null ) Path path = pathRelativeToProjectRoot.getParent();
ParsingJavaPackageFinder.java,Path suffix = path.relativize(pathRelativeToProjectRoot.getParent());,if (path != null ) Path suffix = path.relativize(pathRelativeToProjectRoot.getParent());
ParsingJavaPackageFinder.java,path = path.getParent();,if (path != null ) path = path.getParent();
ParsingJavaPackageFinder.java,Path parentPath = pathRelativeToProjectRoot.getParent();,if (pathRelativeToProjectRoot != null ) Path parentPath = pathRelativeToProjectRoot.getParent();
ParsingJavaPackageFinder.java,Path path = pathRelativeToProjectRoot.getParent();,if (pathRelativeToProjectRoot != null ) Path path = pathRelativeToProjectRoot.getParent();
ParsingJavaPackageFinder.java,Path suffix = path.relativize(pathRelativeToProjectRoot.getParent());,if (path != null ) Path suffix = path.relativize(pathRelativeToProjectRoot.getParent());
ParsingJavaPackageFinder.java,path = path.getParent();,if (path != null ) path = path.getParent();
SuperConsoleEventBusListener.java,lastNumLinesPrinted = lines.size();,if (lines != null ) lastNumLinesPrinted = lines.size();
SuperConsoleEventBusListener.java,lastNumLinesPrinted += logLines.size();,if (logLines != null ) lastNumLinesPrinted += logLines.size();
DependenciesOptimizer.java,BuckValueArray array = property.getValue().getValueArray();,if (property != null ) BuckValueArray array = property.getValue().getValueArray();
DependenciesOptimizer.java,BuckArrayElements arrayElements = array.getArrayElements();,if (array != null ) BuckArrayElements arrayElements = array.getArrayElements();
DependenciesOptimizer.java,PsiElement[] arrayValues = arrayElements.getChildren();,if (arrayElements != null ) PsiElement[] arrayValues = arrayElements.getChildren();
DependenciesOptimizer.java,oldValues[i] = arrayValues[i].copy();,if (arrayValues[i] != null ) oldValues[i] = arrayValues[i].copy();
AbstractProvisioningProfileMetadata.java,fileAsString = matcher.group();,if (matcher != null ) fileAsString = matcher.group();
CxxBinaryIntegrationTest.java,Path inferTopLevel = InferHelper.assumeInferIsInstalled();,if (InferHelper != null ) Path inferTopLevel = InferHelper.assumeInferIsInstalled();
CxxBinaryIntegrationTest.java,Path inferTopLevel = InferHelper.assumeInferIsInstalled();,if (InferHelper != null ) Path inferTopLevel = InferHelper.assumeInferIsInstalled();
CxxBinaryIntegrationTest.java,InferHelper.InferBug bug = bugs.iterator().next();,if (bugs != null ) InferHelper.InferBug bug = bugs.iterator().next();
CxxBinaryIntegrationTest.java,Path inferTopLevel = InferHelper.assumeInferIsInstalled();,if (InferHelper != null ) Path inferTopLevel = InferHelper.assumeInferIsInstalled();
CxxBinaryIntegrationTest.java,InferHelper.InferBug bug = bugs.iterator().next();,if (bugs != null ) InferHelper.InferBug bug = bugs.iterator().next();
CxxBinaryIntegrationTest.java,Path inferTopLevel = InferHelper.assumeInferIsInstalled();,if (InferHelper != null ) Path inferTopLevel = InferHelper.assumeInferIsInstalled();
CxxBinaryIntegrationTest.java,Path inferTopLevel = InferHelper.assumeInferIsInstalled();,if (InferHelper != null ) Path inferTopLevel = InferHelper.assumeInferIsInstalled();
CxxLibraryIntegrationTest.java,Path inferTopLevel = InferHelper.assumeInferIsInstalled();,if (InferHelper != null ) Path inferTopLevel = InferHelper.assumeInferIsInstalled();
AppleBundle.java,Path bundleDir = bundledAssetCatalog.getOutputDir();,if (bundledAssetCatalog != null ) Path bundleDir = bundledAssetCatalog.getOutputDir();
AppleBundle.java,Path bundleDir = mergedAssetCatalog.get().getOutputDir();,if (mergedAssetCatalog != null ) Path bundleDir = mergedAssetCatalog.get().getOutputDir();
AppleBundleDescription.java,Optional<AppleAssetCatalog> mergedAssetCatalog = collectedAssetCatalogs.getMergedAssetCatalog();,if (collectedAssetCatalogs != null ) Optional<AppleAssetCatalog> mergedAssetCatalog = collectedAssetCatalogs.getMergedAssetCatalog();
AppleDescriptions.java,Optional<AppleAssetCatalog> mergedAssetCatalog = Optional.absent();,if (Optional != null ) Optional<AppleAssetCatalog> mergedAssetCatalog = Optional.absent();
AppleDescriptions.java,String name = assetCatalogDir.getFileName().toString();,if (assetCatalogDir != null ) String name = assetCatalogDir.getFileName().toString();
AppleTestDescription.java,Optional<AppleAssetCatalog> mergedAssetCatalog = collectedAssetCatalogs.getMergedAssetCatalog();,if (collectedAssetCatalogs != null ) Optional<AppleAssetCatalog> mergedAssetCatalog = collectedAssetCatalogs.getMergedAssetCatalog();
NewNativeTargetProjectMutator.java,ImmutableList<String> commonAssetCatalogs = commonAssetCatalogsBuilder.build();,if (commonAssetCatalogsBuilder != null ) ImmutableList<String> commonAssetCatalogs = commonAssetCatalogsBuilder.build();
ProjectGenerator.java,infoPlistPath = Optional.absent();,if (Optional != null ) infoPlistPath = Optional.absent();
PythonBinaryDescription.java,List<String> args = Lists.newArrayList();,if (Lists != null ) List<String> args = Lists.newArrayList();
PythonBinaryDescription.java,List<String> escapedCmdArgs = Lists.newArrayList();,if (Lists != null ) List<String> escapedCmdArgs = Lists.newArrayList();
SuperConsoleEventBusListener.java,CacheResult cacheResult = finished.getCacheResult();,if (finished != null ) CacheResult cacheResult = finished.getCacheResult();
BuildResult.java,this.cacheResult = CacheResult.miss();,if (CacheResult != null ) this.cacheResult = CacheResult.miss();
CachingBuildEngine.java,BuildRuleSuccessType success = Preconditions.checkNotNull(input.getSuccess());,if (Preconditions != null ) BuildRuleSuccessType success = Preconditions.checkNotNull(input.getSuccess());
CachingBuildEngine.java,outputSize = buildInfoRecorder.getOutputSize();,if (buildInfoRecorder != null ) outputSize = buildInfoRecorder.getOutputSize();
Main.java,Optional<String> watchmanVersion = watchmanWatcher.getWatchmanVersion();,if (watchmanWatcher != null ) Optional<String> watchmanVersion = watchmanWatcher.getWatchmanVersion();
ProjectGenerator.java,testHostBundle = Optional.absent();,if (Optional != null ) testHostBundle = Optional.absent();
ProjectGenerator.java,AppleResourceDescription.Arg arg = resource.getConstructorArg();,if (resource != null ) AppleResourceDescription.Arg arg = resource.getConstructorArg();
ConcatStepTest.java,"ConcatStep step = new ConcatStep(inputs, dest.toPath());","if (dest != null ) ConcatStep step = new ConcatStep(inputs, dest.toPath());"
CxxPreprocessAndCompile.java,Set<Path> prefixHeaders = Sets.newTreeSet();,if (Sets != null ) Set<Path> prefixHeaders = Sets.newTreeSet();
SuperConsoleEventBusListener.java,ImmutableList<String> logEventLines = logEventLinesBuilder.build();,if (logEventLinesBuilder != null ) ImmutableList<String> logEventLines = logEventLinesBuilder.build();
BuckConfig.java,ImmutableList<File> configFiles = configFileBuilder.build();,if (configFileBuilder != null ) ImmutableList<File> configFiles = configFileBuilder.build();
Main.java,this.watchmanWatcher = createWatcher(repository.getFilesystem());,if (createWatcher(repository != null ) this.watchmanWatcher = createWatcher(repository.getFilesystem());
Main.java,Optional<String> watchmanVersion = watchmanWatcher.getWatchmanVersion();,if (watchmanWatcher != null ) Optional<String> watchmanVersion = watchmanWatcher.getWatchmanVersion();
Build.java,String buildReportText = buildReport.generateForConsole(console.getAnsi());,if (buildReport != null ) String buildReportText = buildReport.generateForConsole(console.getAnsi());
AbstractConsoleEventBusListener.java,formattedLine = ansi.asErrorText(logEvent.getMessage());,if (ansi != null ) formattedLine = ansi.asErrorText(logEvent.getMessage());
Main.java,PrintStream stdErr = console.getStdErr();,if (console != null ) PrintStream stdErr = console.getStdErr();
Main.java,Optional<String> watchmanVersion = watchmanWatcher.getWatchmanVersion();,if (watchmanWatcher != null ) Optional<String> watchmanVersion = watchmanWatcher.getWatchmanVersion();
ParseBuckFileEvent.java,return numRules == that.getNumRules();,if (that != null ) return numRules == that.getNumRules();
OCamlDebugLauncherStep.java,"WriteFileStep writeFile = new WriteFileStep(debugLuancherScript, args.getOutput());","if (args != null ) WriteFileStep writeFile = new WriteFileStep(debugLuancherScript, args.getOutput());"
KnownBuildRuleTypes.java,Path pythonPathToPythonTestMain = pyConfig.getPathToTestMain();,if (pyConfig != null ) Path pythonPathToPythonTestMain = pyConfig.getPathToTestMain();
BuildInfoRecorder.java,Hasher hasher = hashFunction.newHasher();,if (hashFunction != null ) Hasher hasher = hashFunction.newHasher();
Main.java,fileHashCache = new DefaultFileHashCache(rootRepository.getFilesystem());,if (DefaultFileHashCache(rootRepository != null ) fileHashCache = new DefaultFileHashCache(rootRepository.getFilesystem());
ProjectBuildFileParser.java,buckPyProcess = processBuilder.start();,if (processBuilder != null ) buckPyProcess = processBuilder.start();
ProjectBuildFileParser.java,int exitCode = buckPyProcess.waitFor();,if (buckPyProcess != null ) int exitCode = buckPyProcess.waitFor();
AppleTestDescription.java,String sdkName = appleCxxPlatform.getAppleSdk().getName();,if (appleCxxPlatform != null ) String sdkName = appleCxxPlatform.getAppleSdk().getName();
PublishCommand.java,Optional<String> mavenCoords = publishable.getMavenCoords();,if (publishable != null ) Optional<String> mavenCoords = publishable.getMavenCoords();
PublishCommand.java,Path relativePathToOutput = publishable.getPathToOutput();,if (publishable != null ) Path relativePathToOutput = publishable.getPathToOutput();
PublishCommand.java,ProjectFilesystem projectFilesystem = params.getRepository().getFilesystem();,if (params != null ) ProjectFilesystem projectFilesystem = params.getRepository().getFilesystem();
DefaultJavaLibrary.java,"BashStep bashStep = new BashStep(postprocessClassesCommand, outputDirectory.toString());","if (outputDirectory != null ) BashStep bashStep = new BashStep(postprocessClassesCommand, outputDirectory.toString());"
ThriftLibraryDescription.java,ImmutableSortedSet<SymlinkTree> includeTreeRules = includeTreeRulesBuilder.build();,if (includeTreeRulesBuilder != null ) ImmutableSortedSet<SymlinkTree> includeTreeRules = includeTreeRulesBuilder.build();
Main.java,this.filesystemWatcher = createWatcher(repository.getFilesystem());,if (createWatcher(repository != null ) this.filesystemWatcher = createWatcher(repository.getFilesystem());
WatchmanWatcher.java,Process watchmanProcess = watchmanProcessSupplier.get();,if (watchmanProcessSupplier != null ) Process watchmanProcess = watchmanProcessSupplier.get();
WatchmanWatcher.java,watchmanExitCode = watchmanProcess.waitFor();,if (watchmanProcess != null ) watchmanExitCode = watchmanProcess.waitFor();
Parser.java,Set<BuildTarget> deps = Sets.newHashSet();,if (Sets != null ) Set<BuildTarget> deps = Sets.newHashSet();
ProGuardObfuscateStep.java,File outputJarFile = outputJar.toFile();,if (outputJar != null ) File outputJarFile = outputJar.toFile();
SplitZipStep.java,File primaryJarFile = primaryJarPath.toFile();,if (primaryJarPath != null ) File primaryJarFile = primaryJarPath.toFile();
CacheCommand.java,File tmpDir = Files.createTempDir();,if (Files != null ) File tmpDir = Files.createTempDir();
TestRunning.java,File directory = filesystem.getFileForRelativePath(javaSrcPath.getParent());,if (filesystem != null ) File directory = filesystem.getFileForRelativePath(javaSrcPath.getParent());
TestRunning.java,directory = directory.getParentFile();,if (directory != null ) directory = directory.getParentFile();
TestRunning.java,String directoryPath = directory.getPath();,if (directory != null ) String directoryPath = directory.getPath();
CxxBoostTest.java,Document doc = XmlDomParser.parse(results.toFile());,if (XmlDomParser != null ) Document doc = XmlDomParser.parse(results.toFile());
CxxGtestTest.java,Document doc = XmlDomParser.parse(results.toFile());,if (XmlDomParser != null ) Document doc = XmlDomParser.parse(results.toFile());
DefaultZipSplitter.java,long entrySize = entry.getSize();,if (entry != null ) long entrySize = entry.getSize();
DirectoryTraversal.java,final Path rootPath = root.toPath();,if (root != null ) final Path rootPath = root.toPath();
MoreFiles.java,Path path = file.toPath();,if (file != null ) Path path = file.toPath();
DefaultJavaLibrary.java,Path classPath = filesystem.getFileForRelativePath(relativeClassPath).toPath();,if (filesystem != null ) Path classPath = filesystem.getFileForRelativePath(relativeClassPath).toPath();
ClasspathTraversal.java,String extension = Files.getFileExtension(path.getName());,if (Files != null ) String extension = Files.getFileExtension(path.getName());
HttpArtifactCache.java,Path path = file.toPath();,if (file != null ) Path path = file.toPath();
AndroidExopackageBinaryIntegrationTest.java,ZipInspector zi = new ZipInspector(secondaryJar.toFile());,if (ZipInspector(secondaryJar != null ) ZipInspector zi = new ZipInspector(secondaryJar.toFile());
ProGuardObfuscateStepTest.java,File tmpFile = tmpDir.newFile();,if (tmpDir != null ) File tmpFile = tmpDir.newFile();
MoreFilesTest.java,File dir = tmp.newFolder();,if (tmp != null ) File dir = tmp.newFolder();
MoreFilesTest.java,File[] files = dir.listFiles();,if (dir != null ) File[] files = dir.listFiles();
MoreFilesTest.java,File file = tmp.newFile();,if (tmp != null ) File file = tmp.newFile();
MoreFilesTest.java,File file = tmp.newFile();,if (tmp != null ) File file = tmp.newFile();
MoreFilesTest.java,Path path = file.toPath();,if (file != null ) Path path = file.toPath();
ProjectFilesystemTest.java,File file = tmp.newFile(path.toString());,if (tmp != null ) File file = tmp.newFile(path.toString());
ProjectFilesystemTest.java,Path rootPath = tmp.getRoot().toPath();,if (tmp != null ) Path rootPath = tmp.getRoot().toPath();
DefaultJavaLibraryIntegrationTest.java,long sizeOfOriginalJar = outputFile.length();,if (outputFile != null ) long sizeOfOriginalJar = outputFile.length();
JarDirectoryStepTest.java,File zipup = folder.newFolder();,if (folder != null ) File zipup = folder.newFolder();
JarDirectoryStepTest.java,File tmp = folder.newFolder();,if (folder != null ) File tmp = folder.newFolder();
JarDirectoryStepTest.java,File zipup = folder.newFolder();,if (folder != null ) File zipup = folder.newFolder();
JarDirectoryStepTest.java,File tmp = folder.newFolder();,if (folder != null ) File tmp = folder.newFolder();
PrebuiltJarIntegrationTest.java,File abiJar = workspace.getFile(expectedOut.toString());,if (workspace != null ) File abiJar = workspace.getFile(expectedOut.toString());
DirArtifactCacheTest.java,File cacheDir = tmpDir.newFolder();,if (tmpDir != null ) File cacheDir = tmpDir.newFolder();
DirArtifactCacheTest.java,File cacheDir = tmpDir.newFolder();,if (tmpDir != null ) File cacheDir = tmpDir.newFolder();
DirArtifactCacheTest.java,File cacheDir = tmpDir.newFolder();,if (tmpDir != null ) File cacheDir = tmpDir.newFolder();
DirArtifactCacheTest.java,File cacheDir = tmpDir.newFolder();,if (tmpDir != null ) File cacheDir = tmpDir.newFolder();
DirArtifactCacheTest.java,File cacheDir = tmpDir.newFolder();,if (tmpDir != null ) File cacheDir = tmpDir.newFolder();
DirArtifactCacheTest.java,File cacheDir = tmpDir.newFolder();,if (tmpDir != null ) File cacheDir = tmpDir.newFolder();
DirArtifactCacheTest.java,File cacheDir = tmpDir.newFolder();,if (tmpDir != null ) File cacheDir = tmpDir.newFolder();
DirArtifactCacheTest.java,File cacheDir = tmpDir.newFolder();,if (tmpDir != null ) File cacheDir = tmpDir.newFolder();
DirArtifactCacheTest.java,File cacheDir = tmpDir.newFolder();,if (tmpDir != null ) File cacheDir = tmpDir.newFolder();
DirArtifactCacheTest.java,File cacheDir = tmpDir.newFolder();,if (tmpDir != null ) File cacheDir = tmpDir.newFolder();
DirArtifactCacheTest.java,this.file = file.toPath();,if (file != null ) this.file = file.toPath();
MultiArtifactCacheTest.java,File output = tmp.newFile();,if (tmp != null ) File output = tmp.newFile();
MoreAsserts.java,BuildTarget target = realDep.getBuildTarget();,if (realDep != null ) BuildTarget target = realDep.getBuildTarget();
ProjectWorkspace.java,this.destPath = temporaryFolder.getRoot().toPath();,if (temporaryFolder != null ) this.destPath = temporaryFolder.getRoot().toPath();
ProjectWorkspace.java,File file = path.toFile();,if (path != null ) File file = path.toFile();
ProjectWorkspace.java,ProjectWorkspace.ProcessResult buildResult = runBuckBuild(target.toString());,if (runBuckBuild(target != null ) ProjectWorkspace.ProcessResult buildResult = runBuckBuild(target.toString());
ProjectWorkspace.java,File directory = generatedFileWithSuffix.getParent().toFile();,if (generatedFileWithSuffix != null ) File directory = generatedFileWithSuffix.getParent().toFile();
ProjectWorkspace.java,String extension = Files.getFileExtension(observedFile.getName());,if (Files != null ) String extension = Files.getFileExtension(observedFile.getName());
UnzipTest.java,File extractFolder = tmpFolder.newFolder();,if (tmpFolder != null ) File extractFolder = tmpFolder.newFolder();
UnzipTest.java,File extractFolder = tmpFolder.newFolder();,if (tmpFolder != null ) File extractFolder = tmpFolder.newFolder();
ZipOutputStreamTest.java,byte[] seen = Files.readAllBytes(output.toPath());,if (Files != null ) byte[] seen = Files.readAllBytes(output.toPath());
ZipOutputStreamTest.java,byte[] seen = Files.readAllBytes(output.toPath());,if (Files != null ) byte[] seen = Files.readAllBytes(output.toPath());
ZipOutputStreamTest.java,byte[] seen = Files.readAllBytes(output.toPath());,if (Files != null ) byte[] seen = Files.readAllBytes(output.toPath());
ZipOutputStreamTest.java,byte[] seen = Files.readAllBytes(output.toPath());,if (Files != null ) byte[] seen = Files.readAllBytes(output.toPath());
ZipOutputStreamTest.java,byte[] seen = Files.readAllBytes(output.toPath());,if (Files != null ) byte[] seen = Files.readAllBytes(output.toPath());
ZipOutputStreamTest.java,byte[] seen = Files.readAllBytes(output.toPath());,if (Files != null ) byte[] seen = Files.readAllBytes(output.toPath());
PBXFileReference.java,lastKnownFileType = Optional.absent();,if (Optional != null ) lastKnownFileType = Optional.absent();
PBXGroup.java,PBXFileReference ref = key.createFileReference();,if (key != null ) PBXFileReference ref = key.createFileReference();
PBXGroup.java,XCVersionGroup ref = key.createVersionGroup();,if (key != null ) XCVersionGroup ref = key.createVersionGroup();
XCVersionGroup.java,PBXFileReference ref = key.createFileReference();,if (key != null ) PBXFileReference ref = key.createFileReference();
CxxGtestTest.java,currentTest = Optional.absent();,if (Optional != null ) currentTest = Optional.absent();
DefaultAndroidDirectoryResolver.java,newestVersion = ndkVersion.get();,if (ndkVersion != null ) newestVersion = ndkVersion.get();
PublishCommand.java,Optional<String> mavenCoords = javaLibrary.getMavenCoords();,if (javaLibrary != null ) Optional<String> mavenCoords = javaLibrary.getMavenCoords();
PublishCommand.java,Path relativePathToOutput = buildRule.getPathToOutput();,if (buildRule != null ) Path relativePathToOutput = buildRule.getPathToOutput();
StubJar.java,this.classes = Sets.newTreeSet();,if (Sets != null ) this.classes = Sets.newTreeSet();
StubJar.java,String fileName = relativizedPath.toString();,if (relativizedPath != null ) String fileName = relativizedPath.toString();
CxxGtestTest.java,NodeList testcases = testsuite.getChildNodes();,if (testsuite != null ) NodeList testcases = testsuite.getChildNodes();
CxxSourceRuleFactory.java,"Preprocessor preprocessor = CxxSourceTypes.getPreprocessor(cxxPlatform, source.getType());","if (source != null ) Preprocessor preprocessor = CxxSourceTypes.getPreprocessor(cxxPlatform, source.getType());"
CxxSourceRuleFactory.java,Compiler compiler = getCompiler(source.getType());,if (getCompiler(source != null ) Compiler compiler = getCompiler(source.getType());
DebugPathSanitizer.java,replacement = getExpandedPath(entry.getValue());,if (getExpandedPath(entry != null ) replacement = getExpandedPath(entry.getValue());
DebugPathSanitizer.java,replacement = entry.getValue().toString();,if (entry != null ) replacement = entry.getValue().toString();
AndroidBinaryGraphEnhancer.java,NdkCxxPlatforms.CxxRuntime cxxRuntime = platform.getCxxRuntime();,if (platform != null ) NdkCxxPlatforms.CxxRuntime cxxRuntime = platform.getCxxRuntime();
AndroidBinaryGraphEnhancer.java,Optional<CopyNativeLibraries> copyNativeLibraries = Optional.absent();,if (Optional != null ) Optional<CopyNativeLibraries> copyNativeLibraries = Optional.absent();
JavaBuckConfigTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRootPath());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRootPath());
ExternalJavac.java,Optional<String> stderr = result.getStderr();,if (result != null ) Optional<String> stderr = result.getStderr();
ExternalJavac.java,version = Optional.absent();,if (Optional != null ) version = Optional.absent();
AnnotationProcessingEvent.java,getRound() == that.getRound();,if (that != null ) getRound() == that.getRound();
CxxSourceRuleFactory.java,"Tool tool = CxxSourceTypes.getPreprocessor(cxxPlatform, source.getType());","if (source != null ) Tool tool = CxxSourceTypes.getPreprocessor(cxxPlatform, source.getType());"
CxxLibraryDescription.java,ImmutableList<String> extraCxxLdFlags = extraCxxLdFlagsBuilder.build();,if (extraCxxLdFlagsBuilder != null ) ImmutableList<String> extraCxxLdFlags = extraCxxLdFlagsBuilder.build();
PublisherIntegrationTest.java,putRequestsHandler = new HttpdForTests.DummyPutRequestsHandler();,if (HttpdForTests != null ) putRequestsHandler = new HttpdForTests.DummyPutRequestsHandler();
PublisherIntegrationTest.java,List<String> putRequestsInvoked = putRequestsHandler.getPutRequestsPaths();,if (putRequestsHandler != null ) List<String> putRequestsInvoked = putRequestsHandler.getPutRequestsPaths();
CxxDescriptionEnhancer.java,Path output = getOutputPath(params.getBuildTarget());,if (getOutputPath(params != null ) Path output = getOutputPath(params.getBuildTarget());
CxxDescriptionEnhancer.java,CommandTool.Builder executableBuilder = new CommandTool.Builder();,if (CommandTool != null ) CommandTool.Builder executableBuilder = new CommandTool.Builder();
DefaultJavaLibrary.java,workingDirectory = Optional.absent();,if (Optional != null ) workingDirectory = Optional.absent();
PlistProcessStep.java,String serializedInfoPlist = infoPlist.toXMLPropertyList();,if (infoPlist != null ) String serializedInfoPlist = infoPlist.toXMLPropertyList();
CxxBoostTest.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
CxxBoostTest.java,String resolvedOutput = filesystem.resolve(output).toString();,if (filesystem != null ) String resolvedOutput = filesystem.resolve(output).toString();
CxxDescriptionEnhancer.java,Path output = getOutputPath(params.getBuildTarget());,if (getOutputPath(params != null ) Path output = getOutputPath(params.getBuildTarget());
CxxGtestTest.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
CxxGtestTest.java,String resolvedOutput = filesystem.resolve(output).toString();,if (filesystem != null ) String resolvedOutput = filesystem.resolve(output).toString();
BitIntSetTest.java,IntIterator iter = set.iterator();,if (set != null ) IntIterator iter = set.iterator();
BitIntSetTest.java,IntIterator iter = set.iterator();,if (set != null ) IntIterator iter = set.iterator();
ListIntSetTest.java,IntIterator iter = set.iterator();,if (set != null ) IntIterator iter = set.iterator();
ListIntSetTest.java,IntIterator iter = set.iterator();,if (set != null ) IntIterator iter = set.iterator();
Dex.java,int offset = data.getInt();,if (data != null ) int offset = data.getInt();
Dex.java,int length = data.getInt();,if (data != null ) int length = data.getInt();
Dex.java,data = data.slice();,if (data != null ) data = data.slice();
Dex.java,this.data = ByteBuffer.wrap(bytesOut.toByteArray());,if (ByteBuffer != null ) this.data = ByteBuffer.wrap(bytesOut.toByteArray());
Dex.java,ByteBuffer data = this.data.duplicate(); // positioned ByteBuffers aren't thread safe,if (safe != null ) ByteBuffer data = this.data.duplicate(); // positioned ByteBuffers aren't thread safe
Dex.java,ByteBuffer sectionData = data.duplicate();,if (data != null ) ByteBuffer sectionData = data.duplicate();
Dex.java,ByteBuffer sectionData = data.duplicate();,if (data != null ) ByteBuffer sectionData = data.duplicate();
Dex.java,ByteBuffer data = this.data.duplicate(); // positioned ByteBuffers aren't thread safe,if (safe != null ) ByteBuffer data = this.data.duplicate(); // positioned ByteBuffers aren't thread safe
Dex.java,int offset = classDef.getClassDataOffset();,if (classDef != null ) int offset = classDef.getClassDataOffset();
Dex.java,int offset = method.getCodeOffset();,if (method != null ) int offset = method.getCodeOffset();
Dex.java,ByteBuffer data = this.data.duplicate(); // positioned ByteBuffers aren't thread safe,if (safe != null ) ByteBuffer data = this.data.duplicate(); // positioned ByteBuffers aren't thread safe
Dex.java,ByteBuffer data = this.data.duplicate(); // positioned ByteBuffers aren't thread safe,if (safe != null ) ByteBuffer data = this.data.duplicate(); // positioned ByteBuffers aren't thread safe
Dex.java,this.initialPosition = data.position();,if (data != null ) this.initialPosition = data.position();
Dex.java,int savedPosition = data.position();,if (data != null ) int savedPosition = data.position();
Dex.java,int savedLimit = data.limit();,if (data != null ) int savedLimit = data.limit();
Dex.java,Section triesSection = open(data.position());,if (open(data != null ) Section triesSection = open(data.position());
Dex.java,int baseOffset = data.position();,if (data != null ) int baseOffset = data.position();
Dex.java,int end = data.position();,if (data != null ) int end = data.position();
Dex.java,int start = data.position();,if (data != null ) int start = data.position();
Dex.java,int start = data.position();,if (data != null ) int start = data.position();
Dex.java,int length = value.length();,if (value != null ) int length = value.length();
Dex.java,short[] types = typeList.getTypes();,if (typeList != null ) short[] types = typeList.getTypes();
TableOfContents.java,checksum = headerIn.readInt();,if (headerIn != null ) checksum = headerIn.readInt();
TableOfContents.java,fileSize = headerIn.readInt();,if (headerIn != null ) fileSize = headerIn.readInt();
TableOfContents.java,int headerSize = headerIn.readInt();,if (headerIn != null ) int headerSize = headerIn.readInt();
TableOfContents.java,int endianTag = headerIn.readInt();,if (headerIn != null ) int endianTag = headerIn.readInt();
TableOfContents.java,linkSize = headerIn.readInt();,if (headerIn != null ) linkSize = headerIn.readInt();
TableOfContents.java,linkOff = headerIn.readInt();,if (headerIn != null ) linkOff = headerIn.readInt();
TableOfContents.java,mapList.off = headerIn.readInt();,if (headerIn != null ) mapList.off = headerIn.readInt();
TableOfContents.java,stringIds.size = headerIn.readInt();,if (headerIn != null ) stringIds.size = headerIn.readInt();
TableOfContents.java,stringIds.off = headerIn.readInt();,if (headerIn != null ) stringIds.off = headerIn.readInt();
TableOfContents.java,typeIds.size = headerIn.readInt();,if (headerIn != null ) typeIds.size = headerIn.readInt();
TableOfContents.java,typeIds.off = headerIn.readInt();,if (headerIn != null ) typeIds.off = headerIn.readInt();
TableOfContents.java,protoIds.size = headerIn.readInt();,if (headerIn != null ) protoIds.size = headerIn.readInt();
TableOfContents.java,protoIds.off = headerIn.readInt();,if (headerIn != null ) protoIds.off = headerIn.readInt();
TableOfContents.java,fieldIds.size = headerIn.readInt();,if (headerIn != null ) fieldIds.size = headerIn.readInt();
TableOfContents.java,fieldIds.off = headerIn.readInt();,if (headerIn != null ) fieldIds.off = headerIn.readInt();
TableOfContents.java,methodIds.size = headerIn.readInt();,if (headerIn != null ) methodIds.size = headerIn.readInt();
TableOfContents.java,methodIds.off = headerIn.readInt();,if (headerIn != null ) methodIds.off = headerIn.readInt();
TableOfContents.java,classDefs.size = headerIn.readInt();,if (headerIn != null ) classDefs.size = headerIn.readInt();
TableOfContents.java,classDefs.off = headerIn.readInt();,if (headerIn != null ) classDefs.off = headerIn.readInt();
TableOfContents.java,dataSize = headerIn.readInt();,if (headerIn != null ) dataSize = headerIn.readInt();
TableOfContents.java,dataOff = headerIn.readInt();,if (headerIn != null ) dataOff = headerIn.readInt();
TableOfContents.java,int mapSize = in.readInt();,if (in != null ) int mapSize = in.readInt();
TableOfContents.java,short type = in.readShort();,if (in != null ) short type = in.readShort();
TableOfContents.java,int size = in.readInt();,if (in != null ) int size = in.readInt();
TableOfContents.java,int offset = in.readInt();,if (in != null ) int offset = in.readInt();
FileUtils.java,long longLength = file.length();,if (file != null ) long longLength = file.length();
BaseMachine.java,ExecutionStack stack = frame.getStack();,if (frame != null ) ExecutionStack stack = frame.getStack();
BaseMachine.java,args[i] = stack.pop();,if (stack != null ) args[i] = stack.pop();
BaseMachine.java,StdTypeList types = prototype.getParameterTypes();,if (prototype != null ) StdTypeList types = prototype.getParameterTypes();
BaseMachine.java,int size = types.size();,if (types != null ) int size = types.size();
BaseMachine.java,Type resultType = result.getType();,if (result != null ) Type resultType = result.getType();
BaseMachine.java,Type localType = localTarget.getType();,if (localTarget != null ) Type localType = localTarget.getType();
BaseMachine.java,ExecutionStack stack = frame.getStack();,if (frame != null ) ExecutionStack stack = frame.getStack();
BasicBlocker.java,int sz = cases.size();,if (cases != null ) int sz = cases.size();
BasicBlocker.java,targetLists[offset] = cases.getTargets();,if (cases != null ) targetLists[offset] = cases.getTargets();
BasicBlocker.java,BytecodeArray bytes = method.getCode();,if (method != null ) BytecodeArray bytes = method.getCode();
BasicBlocker.java,BytecodeArray bytes = method.getCode();,if (method != null ) BytecodeArray bytes = method.getCode();
BasicBlocker.java,ByteCatchList catches = method.getCatches();,if (method != null ) ByteCatchList catches = method.getCatches();
BasicBlocker.java,int catchSz = catches.size();,if (catches != null ) int catchSz = catches.size();
BasicBlocker.java,int start = item.getStartPc();,if (item != null ) int start = item.getStartPc();
BasicBlocker.java,int end = item.getEndPc();,if (item != null ) int end = item.getEndPc();
ByteBlock.java,int sz = successors.size();,if (successors != null ) int sz = successors.size();
ByteCatchList.java,CstType type = item.getExceptionClass();,if (item != null ) CstType type = item.getExceptionClass();
ByteCatchList.java,CstType one = arr[i].getExceptionClass();,if (arr[i] != null ) CstType one = arr[i].getExceptionClass();
BytecodeArray.java,int sz = bytes.size();,if (bytes != null ) int sz = bytes.size();
BytecodeArray.java,int sz = bytes.size();,if (bytes != null ) int sz = bytes.size();
BytecodeArray.java,int previousOffset = visitor.getPreviousOffset();,if (visitor != null ) int previousOffset = visitor.getPreviousOffset();
ConcreteMethod.java,AttributeList attribs = method.getAttributes();,if (method != null ) AttributeList attribs = method.getAttributes();
ConcreteMethod.java,AttributeList codeAttribs = attCode.getAttributes();,if (attCode != null ) AttributeList codeAttribs = attCode.getAttributes();
ExecutionStack.java,Type initializedType = type.getInitializedType();,if (type != null ) Type initializedType = type.getInitializedType();
ExecutionStack.java,type = type.getFrameType();,if (type != null ) type = type.getFrameType();
ExecutionStack.java,category = type.getType().getCategory();,if (type != null ) category = type.getType().getCategory();
ExecutionStack.java,stackPtr -= result.getType().getCategory();,if (result != null ) stackPtr -= result.getType().getCategory();
ExecutionStack.java,type = type.getFrameType();,if (type != null ) type = type.getFrameType();
Frame.java,int sz = params.size();,if (params != null ) int sz = params.size();
Frame.java,at += one.getCategory();,if (one != null ) at += one.getCategory();
Frame.java,newSubroutines = subroutines.mutableCopy();,if (subroutines != null ) newSubroutines = subroutines.mutableCopy();
Frame.java,int szSubroutines = subroutines.size();,if (subroutines != null ) int szSubroutines = subroutines.size();
Frame.java,int szOthers = otherSubroutines.size();,if (otherSubroutines != null ) int szOthers = otherSubroutines.size();
Frame.java,IntList newOtherSubroutines = other.subroutines.mutableCopy();,if (other != null ) IntList newOtherSubroutines = other.subroutines.mutableCopy();
Frame.java,int szResult = resultSubroutines.size();,if (resultSubroutines != null ) int szResult = resultSubroutines.size();
Frame.java,int szNonResult = nonResultSubroutines.size();,if (nonResultSubroutines != null ) int szNonResult = nonResultSubroutines.size();
Frame.java,IntList newSubroutines = subroutines.mutableCopy();,if (subroutines != null ) IntList newSubroutines = subroutines.mutableCopy();
Frame.java,ExecutionStack newStack = getStack().copy();,if (getStack() != null ) ExecutionStack newStack = getStack().copy();
LineNumberList.java,int onePc = one.getStartPc();,if (one != null ) int onePc = one.getStartPc();
LineNumberList.java,bestLine = one.getLineNumber();,if (one != null ) bestLine = one.getLineNumber();
LocalVariableList.java,int descriptorSize = descriptorList.size();,if (descriptorList != null ) int descriptorSize = descriptorList.size();
LocalVariableList.java,CstString signature = signatureItem.getSignature();,if (signatureItem != null ) CstString signature = signatureItem.getSignature();
LocalsArraySet.java,primary = toCopy.primary.copy();,if (toCopy != null ) primary = toCopy.primary.copy();
LocalsArraySet.java,secondaries = new ArrayList(toCopy.secondaries.size());,if (ArrayList(toCopy != null ) secondaries = new ArrayList(toCopy.secondaries.size());
LocalsArraySet.java,int sz = toCopy.secondaries.size();,if (toCopy != null ) int sz = toCopy.secondaries.size();
LocalsArraySet.java,int sz = secondaries.size();,if (secondaries != null ) int sz = secondaries.size();
LocalsArraySet.java,int sz = secondaries.size();,if (secondaries != null ) int sz = secondaries.size();
LocalsArraySet.java,int len = primary.getMaxLocals();,if (primary != null ) int len = primary.getMaxLocals();
LocalsArraySet.java,newPrimary = primary.merge(other.getPrimary());,if (primary != null ) newPrimary = primary.merge(other.getPrimary());
LocalsArraySet.java,newPrimary = primary.merge(other.getPrimary());,if (primary != null ) newPrimary = primary.merge(other.getPrimary());
LocalsArraySet.java,newSecondaries = new ArrayList(secondaries.size());,if (ArrayList(secondaries != null ) newSecondaries = new ArrayList(secondaries.size());
LocalsArraySet.java,int sz = secondaries.size();,if (secondaries != null ) int sz = secondaries.size();
LocalsArraySet.java,newPrimary = primary.merge(other.getPrimary());,if (primary != null ) newPrimary = primary.merge(other.getPrimary());
LocalsArraySet.java,int szSecondaries = secondaries.size();,if (secondaries != null ) int szSecondaries = secondaries.size();
LocalsArraySet.java,newPrimary = la.getPrimary();,if (la != null ) newPrimary = la.getPrimary();
LocalsArraySet.java,newPrimary = newPrimary.merge(la.getPrimary());,if (newPrimary != null ) newPrimary = newPrimary.merge(la.getPrimary());
Merger.java,Type supertype = supertypeBearer.getType();,if (supertypeBearer != null ) Type supertype = supertypeBearer.getType();
Merger.java,Type subtype = subtypeBearer.getType();,if (subtypeBearer != null ) Type subtype = subtypeBearer.getType();
Merger.java,int superBt = supertype.getBasicType();,if (supertype != null ) int superBt = supertype.getBasicType();
Merger.java,int subBt = subtype.getBasicType();,if (subtype != null ) int subBt = subtype.getBasicType();
Merger.java,supertype = supertype.getComponentType();,if (supertype != null ) supertype = supertype.getComponentType();
Merger.java,subtype = subtype.getComponentType();,if (subtype != null ) subtype = subtype.getComponentType();
OneLocalsArray.java,Type initializedType = type.getInitializedType();,if (type != null ) Type initializedType = type.getInitializedType();
OneLocalsArray.java,type = type.getFrameType();,if (type != null ) type = type.getFrameType();
OneLocalsArray.java,Type type = result.getType();,if (result != null ) Type type = result.getType();
Ropper.java,IntList successors = new IntList(callerBlocks.size());,if (IntList(callerBlocks != null ) IntList successors = new IntList(callerBlocks.size());
Ropper.java,this.maxLabel = blocks.getMaxLabel();,if (blocks != null ) this.maxLabel = blocks.getMaxLabel();
Ropper.java,this.maxLocals = method.getMaxLocals();,if (method != null ) this.maxLocals = method.getMaxLocals();
Ropper.java,int label = bb.getLabel();,if (bb != null ) int label = bb.getLabel();
Ropper.java,int accessFlags = method.getAccessFlags();,if (method != null ) int accessFlags = method.getAccessFlags();
Ropper.java,int accessFlags = method.getAccessFlags();,if (method != null ) int accessFlags = method.getAccessFlags();
Ropper.java,int sz = result.size();,if (result != null ) int sz = result.size();
Ropper.java,int idx = labelToResultIndex(block.getLabel());,if (labelToResultIndex(block != null ) int idx = labelToResultIndex(block.getLabel());
Ropper.java,int idx = labelToResultIndex(block.getLabel());,if (labelToResultIndex(block != null ) int idx = labelToResultIndex(block.getLabel());
Ropper.java,IntList successors = block.getSuccessors();,if (block != null ) IntList successors = block.getSuccessors();
Ropper.java,int sz = successors.size();,if (successors != null ) int sz = successors.size();
Ropper.java,int sz = result.size();,if (result != null ) int sz = result.size();
Ropper.java,Prototype desc = method.getEffectiveDescriptor();,if (method != null ) Prototype desc = method.getEffectiveDescriptor();
Ropper.java,ByteCatchList catches = block.getCatches();,if (block != null ) ByteCatchList catches = block.getCatches();
Ropper.java,frame = frame.copy();,if (frame != null ) frame = frame.copy();
Ropper.java,int extraBlockCount = machine.getExtraBlockCount();,if (machine != null ) int extraBlockCount = machine.getExtraBlockCount();
Ropper.java,ArrayList<Insn> insns = machine.getInsns();,if (machine != null ) ArrayList<Insn> insns = machine.getInsns();
Ropper.java,int insnSz = insns.size();,if (insns != null ) int insnSz = insns.size();
Ropper.java,int catchSz = catches.size();,if (catches != null ) int catchSz = catches.size();
Ropper.java,IntList successors = block.getSuccessors();,if (block != null ) IntList successors = block.getSuccessors();
Ropper.java,ReturnAddress ra = machine.getReturnAddress();,if (machine != null ) ReturnAddress ra = machine.getReturnAddress();
Ropper.java,int subroutineLabel = ra.getSubroutineAddress();,if (ra != null ) int subroutineLabel = ra.getSubroutineAddress();
Ropper.java,successors = subroutines[subroutineLabel].getSuccessors();,if (subroutines[subroutineLabel] != null ) successors = subroutines[subroutineLabel].getSuccessors();
Ropper.java,startSuccessorIndex = successors.size();,if (successors != null ) startSuccessorIndex = successors.size();
Ropper.java,int succSz = successors.size();,if (successors != null ) int succSz = successors.size();
Ropper.java,primarySucc = machine.getPrimarySuccessorIndex();,if (machine != null ) primarySucc = machine.getPrimarySuccessorIndex();
Ropper.java,boolean synch = isSynchronized() && machine.canThrow();,if (machine != null ) boolean synch = isSynchronized() && machine.canThrow();
Ropper.java,CstType exceptionClass = one.getExceptionClass();,if (one != null ) CstType exceptionClass = one.getExceptionClass();
Ropper.java,int targ = one.getHandlerPc();,if (one != null ) int targ = one.getHandlerPc();
Ropper.java,catchTypes[targ] = exceptionClass.getClassType();,if (exceptionClass != null ) catchTypes[targ] = exceptionClass.getClassType();
Ropper.java,successors = successors.mutableCopy();,if (successors != null ) successors = successors.mutableCopy();
Ropper.java,LocalVariableList localVariables = method.getLocalVariables();,if (method != null ) LocalVariableList localVariables = method.getLocalVariables();
Ropper.java,Prototype desc = method.getEffectiveDescriptor();,if (method != null ) Prototype desc = method.getEffectiveDescriptor();
Ropper.java,StdTypeList params = desc.getParameterTypes();,if (desc != null ) StdTypeList params = desc.getParameterTypes();
Ropper.java,int sz = params.size();,if (params != null ) int sz = params.size();
Ropper.java,at += one.getCategory();,if (one != null ) at += one.getCategory();
Ropper.java,Rop returnOp = machine.getReturnOp();,if (machine != null ) Rop returnOp = machine.getReturnOp();
Ropper.java,SourcePosition returnPos = machine.getReturnPosition();,if (machine != null ) SourcePosition returnPos = machine.getReturnPosition();
Ropper.java,TypeList sourceTypes = returnOp.getSources();,if (returnOp != null ) TypeList sourceTypes = returnOp.getSources();
Ropper.java,Insn proto = labelToBlock(i).getFirstInsn();,if (labelToBlock(i) != null ) Insn proto = labelToBlock(i).getFirstInsn();
Ropper.java,SourcePosition pos = proto.getPosition();,if (proto != null ) SourcePosition pos = proto.getPosition();
Ropper.java,IntList successors = bb.getSuccessors();,if (bb != null ) IntList successors = bb.getSuccessors();
Ropper.java,int sz = reachableSubroutineCallerLabels.size();,if (reachableSubroutineCallerLabels != null ) int sz = reachableSubroutineCallerLabels.size();
Ropper.java,final IntList reachableLabels = new IntList(result.size());,if (IntList(result != null ) final IntList reachableLabels = new IntList(result.size());
Ropper.java,final IntList origSuccessors = origBlock.getSuccessors();,if (origBlock != null ) final IntList origSuccessors = origBlock.getSuccessors();
Ropper.java,int origPrimary = origBlock.getPrimarySuccessor();,if (origBlock != null ) int origPrimary = origBlock.getPrimarySuccessor();
Ropper.java,int sz = origSuccessors.size();,if (origSuccessors != null ) int sz = origSuccessors.size();
Ropper.java,resultLabel = labelAllocator.getNextLabel();,if (labelAllocator != null ) resultLabel = labelAllocator.getNextLabel();
Ropper.java,sz = insns.size();,if (insns != null ) sz = insns.size();
Ropper.java,IntList successors = next.getSuccessors();,if (next != null ) IntList successors = next.getSuccessors();
Ropper.java,int sz = successors.size();,if (successors != null ) int sz = successors.size();
RopperMachine.java,this.maxLocals = method.getMaxLocals();,if (method != null ) this.maxLocals = method.getMaxLocals();
RopperMachine.java,int sourceCount = sources.size();,if (sources != null ) int sourceCount = sources.size();
RopperMachine.java,int scratchAt = ropper.getFirstTempStackReg();,if (ropper != null ) int scratchAt = ropper.getFirstTempStackReg();
RopperMachine.java,TypeBearer type = src.getTypeBearer();,if (src != null ) TypeBearer type = src.getTypeBearer();
RopperMachine.java,scratchAt += src.getCategory();,if (src != null ) scratchAt += src.getCategory();
RopperMachine.java,TypeBearer type = scratch.getTypeBearer();,if (scratch != null ) TypeBearer type = scratch.getTypeBearer();
RopperMachine.java,stackPointer += type.getType().getCategory();,if (type != null ) stackPointer += type.getType().getCategory();
RopperMachine.java,componentType = componentType.getComponentType();,if (componentType != null ) componentType = componentType.getComponentType();
RopperMachine.java,rop = Rops.opMoveResultPseudo(classReg.getType());,if (Rops != null ) rop = Rops.opMoveResultPseudo(classReg.getType());
RopperMachine.java,cst = CstType.intern(rop.getResult());,if (CstType != null ) cst = CstType.intern(rop.getResult());
RopperMachine.java,sources = sources.withoutLast();,if (sources != null ) sources = sources.withoutLast();
RopperMachine.java,cst = CstInteger.make(-cstInt.getValue());,if (CstInteger != null ) cst = CstInteger.make(-cstInt.getValue());
RopperMachine.java,sources = sources.withoutFirst();,if (sources != null ) sources = sources.withoutFirst();
RopperMachine.java,boolean canThrow = rop.canThrow();,if (rop != null ) boolean canThrow = rop.canThrow();
RopperMachine.java,IntList values = cases.getValues();,if (cases != null ) IntList values = cases.getValues();
RopperMachine.java,primarySuccessorIndex = values.size();,if (values != null ) primarySuccessorIndex = values.size();
RopperMachine.java,TypeBearer type = source.getTypeBearer();,if (source != null ) TypeBearer type = source.getTypeBearer();
RopperMachine.java,primarySuccessorIndex = catches.size();,if (catches != null ) primarySuccessorIndex = catches.size();
RopperMachine.java,primarySuccessorIndex = catches.size();,if (catches != null ) primarySuccessorIndex = catches.size();
RopperMachine.java,regAt += spec.getCategory();,if (spec != null ) regAt += spec.getCategory();
Simulator.java,this.code = method.getCode();,if (method != null ) this.code = method.getCode();
Simulator.java,this.localVariables = method.getLocalVariables();,if (method != null ) this.localVariables = method.getLocalVariables();
Simulator.java,int end = bb.getEnd();,if (bb != null ) int end = bb.getEnd();
Simulator.java,type = requiredArrayType.getComponentType();,if (requiredArrayType != null ) type = requiredArrayType.getComponentType();
Simulator.java,ExecutionStack stack = frame.getStack();,if (frame != null ) ExecutionStack stack = frame.getStack();
Simulator.java,type = requiredArrayType.getComponentType();,if (requiredArrayType != null ) type = requiredArrayType.getComponentType();
Simulator.java,ExecutionStack stack = frame.getStack();,if (frame != null ) ExecutionStack stack = frame.getStack();
Simulator.java,ExecutionStack stack = frame.getStack();,if (frame != null ) ExecutionStack stack = frame.getStack();
Simulator.java,ExecutionStack stack = frame.getStack();,if (frame != null ) ExecutionStack stack = frame.getStack();
Simulator.java,ExecutionStack stack = frame.getStack();,if (frame != null ) ExecutionStack stack = frame.getStack();
Simulator.java,ExecutionStack stack = frame.getStack();,if (frame != null ) ExecutionStack stack = frame.getStack();
Simulator.java,ExecutionStack stack = frame.getStack();,if (frame != null ) ExecutionStack stack = frame.getStack();
Simulator.java,Type returnType = machine.getPrototype().getReturnType();,if (machine != null ) Type returnType = machine.getPrototype().getReturnType();
Simulator.java,localType = local.getType();,if (local != null ) localType = local.getType();
AnnotationParser.java,this.pool = cf.getConstantPool();,if (cf != null ) this.pool = cf.getConstantPool();
AnnotationParser.java,this.input = bytes.makeDataInputStream();,if (bytes != null ) this.input = bytes.makeDataInputStream();
AnnotationParser.java,int count = input.readUnsignedByte();,if (input != null ) int count = input.readUnsignedByte();
AnnotationParser.java,int count = input.readUnsignedShort();,if (input != null ) int count = input.readUnsignedShort();
AnnotationParser.java,int typeIndex = input.readUnsignedShort();,if (input != null ) int typeIndex = input.readUnsignedShort();
AnnotationParser.java,int numElements = input.readUnsignedShort();,if (input != null ) int numElements = input.readUnsignedShort();
AnnotationParser.java,int elementNameIndex = input.readUnsignedShort();,if (input != null ) int elementNameIndex = input.readUnsignedShort();
AnnotationParser.java,int tag = input.readUnsignedByte();,if (input != null ) int tag = input.readUnsignedByte();
AnnotationParser.java,int intValue = value.getValue();,if (value != null ) int intValue = value.getValue();
AnnotationParser.java,int classInfoIndex = input.readUnsignedShort();,if (input != null ) int classInfoIndex = input.readUnsignedShort();
AnnotationParser.java,Type type = Type.internReturnType(value.getString());,if (Type != null ) Type type = Type.internReturnType(value.getString());
AnnotationParser.java,int typeNameIndex = input.readUnsignedShort();,if (input != null ) int typeNameIndex = input.readUnsignedShort();
AnnotationParser.java,int constNameIndex = input.readUnsignedShort();,if (input != null ) int constNameIndex = input.readUnsignedShort();
AnnotationParser.java,int numValues = input.readUnsignedShort();,if (input != null ) int numValues = input.readUnsignedShort();
AnnotationParser.java,int constValueIndex = input.readUnsignedShort();,if (input != null ) int constValueIndex = input.readUnsignedShort();
AttributeFactory.java,ByteArray bytes = cf.getBytes();,if (cf != null ) ByteArray bytes = cf.getBytes();
AttributeFactory.java,ConstantPool pool = cf.getConstantPool();,if (cf != null ) ConstantPool pool = cf.getConstantPool();
AttributeFactory.java,ByteArray bytes = cf.getBytes();,if (cf != null ) ByteArray bytes = cf.getBytes();
AttributeFactory.java,ConstantPool pool = cf.getConstantPool();,if (cf != null ) ConstantPool pool = cf.getConstantPool();
AttributeListParser.java,int sz = list.size();,if (list != null ) int sz = list.size();
AttributeListParser.java,ByteArray bytes = cf.getBytes();,if (cf != null ) ByteArray bytes = cf.getBytes();
AttributeListParser.java,at += attrib.byteLength();,if (attrib != null ) at += attrib.byteLength();
ClassPathOpener.java,String path = file.getPath();,if (file != null ) String path = file.getPath();
ClassPathOpener.java,File[] files = dir.listFiles();,if (dir != null ) File[] files = dir.listFiles();
ClassPathOpener.java,String path = one.getName();,if (one != null ) String path = one.getName();
ClassPathOpener.java,byte[] bytes = baos.toByteArray();,if (baos != null ) byte[] bytes = baos.toByteArray();
CodeObserver.java,int sz = cases.size();,if (cases != null ) int sz = cases.size();
DirectClassFile.java,pool = cpParser.getPool();,if (cpParser != null ) pool = cpParser.getPool();
DirectClassFile.java,int at = cpParser.getEndOffset();,if (cpParser != null ) int at = cpParser.getEndOffset();
DirectClassFile.java,String thisClassName = thisClass.getClassType().getClassName();,if (thisClass != null ) String thisClassName = thisClass.getClassType().getClassName();
DirectClassFile.java,fields = flParser.getList();,if (flParser != null ) fields = flParser.getList();
DirectClassFile.java,at = flParser.getEndOffset();,if (flParser != null ) at = flParser.getEndOffset();
DirectClassFile.java,methods = mlParser.getList();,if (mlParser != null ) methods = mlParser.getList();
DirectClassFile.java,at = mlParser.getEndOffset();,if (mlParser != null ) at = mlParser.getEndOffset();
DirectClassFile.java,attributes = alParser.getList();,if (alParser != null ) attributes = alParser.getList();
DirectClassFile.java,at = alParser.getEndOffset();,if (alParser != null ) at = alParser.getEndOffset();
MemberListParser.java,ByteArray bytes = cf.getBytes();,if (cf != null ) ByteArray bytes = cf.getBytes();
MemberListParser.java,ByteArray bytes = cf.getBytes();,if (cf != null ) ByteArray bytes = cf.getBytes();
MemberListParser.java,ConstantPool pool = cf.getConstantPool();,if (cf != null ) ConstantPool pool = cf.getConstantPool();
MemberListParser.java,at = parser.getEndOffset();,if (parser != null ) at = parser.getEndOffset();
MemberListParser.java,StdAttributeList attributes = parser.getList();,if (parser != null ) StdAttributeList attributes = parser.getList();
StdAttributeFactory.java,Constant cst = ap.parseValueAttribute();,if (ap != null ) Constant cst = ap.parseValueAttribute();
StdAttributeFactory.java,ByteArray bytes = cf.getBytes();,if (cf != null ) ByteArray bytes = cf.getBytes();
StdAttributeFactory.java,ConstantPool pool = cf.getConstantPool();,if (cf != null ) ConstantPool pool = cf.getConstantPool();
StdAttributeFactory.java,StdAttributeList attributes = parser.getList();,if (parser != null ) StdAttributeList attributes = parser.getList();
StdAttributeFactory.java,ByteArray bytes = cf.getBytes();,if (cf != null ) ByteArray bytes = cf.getBytes();
StdAttributeFactory.java,ConstantPool pool = cf.getConstantPool();,if (cf != null ) ConstantPool pool = cf.getConstantPool();
StdAttributeFactory.java,ByteArray bytes = cf.getBytes();,if (cf != null ) ByteArray bytes = cf.getBytes();
StdAttributeFactory.java,ConstantPool pool = cf.getConstantPool();,if (cf != null ) ConstantPool pool = cf.getConstantPool();
StdAttributeFactory.java,ByteArray bytes = cf.getBytes();,if (cf != null ) ByteArray bytes = cf.getBytes();
StdAttributeFactory.java,ByteArray bytes = cf.getBytes();,if (cf != null ) ByteArray bytes = cf.getBytes();
StdAttributeFactory.java,ConstantPool pool = cf.getConstantPool();,if (cf != null ) ConstantPool pool = cf.getConstantPool();
StdAttributeFactory.java,ByteArray bytes = cf.getBytes();,if (cf != null ) ByteArray bytes = cf.getBytes();
StdAttributeFactory.java,ByteArray bytes = cf.getBytes();,if (cf != null ) ByteArray bytes = cf.getBytes();
StdAttributeFactory.java,ByteArray bytes = cf.getBytes();,if (cf != null ) ByteArray bytes = cf.getBytes();
StdAttributeFactory.java,ByteArray.MyDataInputStream in = bytes.makeDataInputStream();,if (bytes != null ) ByteArray.MyDataInputStream in = bytes.makeDataInputStream();
StdAttributeFactory.java,int startPc = in.readUnsignedShort();,if (in != null ) int startPc = in.readUnsignedShort();
StdAttributeFactory.java,int length = in.readUnsignedShort();,if (in != null ) int length = in.readUnsignedShort();
StdAttributeFactory.java,int nameIdx = in.readUnsignedShort();,if (in != null ) int nameIdx = in.readUnsignedShort();
StdAttributeFactory.java,int typeIdx = in.readUnsignedShort();,if (in != null ) int typeIdx = in.readUnsignedShort();
StdAttributeFactory.java,int index = in.readUnsignedShort();,if (in != null ) int index = in.readUnsignedShort();
StdAttributeFactory.java,ByteArray bytes = cf.getBytes();,if (cf != null ) ByteArray bytes = cf.getBytes();
StdAttributeFactory.java,ConstantPool pool = cf.getConstantPool();,if (cf != null ) ConstantPool pool = cf.getConstantPool();
StdAttributeFactory.java,ByteArray bytes = cf.getBytes();,if (cf != null ) ByteArray bytes = cf.getBytes();
StdAttributeFactory.java,ConstantPool pool = cf.getConstantPool();,if (cf != null ) ConstantPool pool = cf.getConstantPool();
StdAttributeList.java,result += get(i).byteLength();,if (get(i) != null ) result += get(i).byteLength();
StdAttributeList.java,String name = attrib.getName();,if (attrib != null ) String name = attrib.getName();
StdMethod.java,String descStr = getDescriptor().getString();,if (getDescriptor() != null ) String descStr = getDescriptor().getString();
AnnotationLister.java,AttributeList attributes = cf.getAttributes();,if (cf != null ) AttributeList attributes = cf.getAttributes();
Main.java,EnumSet<ElementType> set = eTypes.clone();,if (eTypes != null ) EnumSet<ElementType> set = eTypes.clone();
Main.java,minimumFileAge = incrementalOutFile.lastModified();,if (incrementalOutFile != null ) minimumFileAge = incrementalOutFile.lastModified();
Main.java,int constantPoolSize = cf.getConstantPool().size();,if (cf != null ) int constantPoolSize = cf.getConstantPool().size();
Main.java,attribs = manifest.getMainAttributes();,if (manifest != null ) attribs = manifest.getMainAttributes();
Main.java,attribs = manifest.getMainAttributes();,if (manifest != null ) attribs = manifest.getMainAttributes();
Main.java,ArrayList<EncodedMethod> allMeths = clazz.getMethods();,if (clazz != null ) ArrayList<EncodedMethod> allMeths = clazz.getMethods();
Main.java,String methName = meth.getName().getString();,if (meth != null ) String methName = meth.getName().getString();
Main.java,CstString sourceFile = clazz.getSourceFile();,if (clazz != null ) CstString sourceFile = clazz.getSourceFile();
Main.java,int sz = parameterAnnotations.size();,if (parameterAnnotations != null ) int sz = parameterAnnotations.size();
Main.java,int n = prefix.length();,if (prefix != null ) int n = prefix.length();
Main.java,optimizeListFile = parser.getLastValue();,if (parser != null ) optimizeListFile = parser.getLastValue();
Main.java,dontOptimizeListFile = parser.getLastValue();,if (parser != null ) dontOptimizeListFile = parser.getLastValue();
Main.java,outName = parser.getLastValue();,if (parser != null ) outName = parser.getLastValue();
Main.java,humanOutName = parser.getLastValue();,if (parser != null ) humanOutName = parser.getLastValue();
Main.java,dumpWidth = Integer.parseInt(parser.getLastValue());,if (Integer != null ) dumpWidth = Integer.parseInt(parser.getLastValue());
Main.java,methodToDump = parser.getLastValue();,if (parser != null ) methodToDump = parser.getLastValue();
Main.java,String pstr = parser.getLastValue().intern();,if (parser != null ) String pstr = parser.getLastValue().intern();
Main.java,numThreads = Integer.parseInt(parser.getLastValue());,if (Integer != null ) numThreads = Integer.parseInt(parser.getLastValue());
Main.java,mainDexListFile = parser.getLastValue();,if (parser != null ) mainDexListFile = parser.getLastValue();
Main.java,maxNumberOfIdxPerDex = Integer.parseInt(parser.getLastValue());,if (Integer != null ) maxNumberOfIdxPerDex = Integer.parseInt(parser.getLastValue());
Main.java,fileNames = parser.getRemaining();,if (parser != null ) fileNames = parser.getRemaining();
BlockDumper.java,BytecodeArray code = meth.getCode();,if (meth != null ) BytecodeArray code = meth.getCode();
BlockDumper.java,ByteArray bytes = code.getBytes();,if (code != null ) ByteArray bytes = code.getBytes();
BlockDumper.java,int sz = list.size();,if (list != null ) int sz = list.size();
BlockDumper.java,int start = bb.getStart();,if (bb != null ) int start = bb.getStart();
BlockDumper.java,int end = bb.getEnd();,if (bb != null ) int end = bb.getEnd();
BlockDumper.java,IntList successors = bb.getSuccessors();,if (bb != null ) IntList successors = bb.getSuccessors();
BlockDumper.java,int ssz = successors.size();,if (successors != null ) int ssz = successors.size();
BlockDumper.java,ByteCatchList catches = bb.getCatches();,if (bb != null ) ByteCatchList catches = bb.getCatches();
BlockDumper.java,int csz = catches.size();,if (catches != null ) int csz = catches.size();
BlockDumper.java,CstType exceptionClass = one.getExceptionClass();,if (one != null ) CstType exceptionClass = one.getExceptionClass();
BlockDumper.java,int end = bytes.size();,if (bytes != null ) int end = bytes.size();
BlockDumper.java,BytecodeArray code = meth.getCode();,if (meth != null ) BytecodeArray code = meth.getCode();
BlockDumper.java,ByteArray bytes = code.getBytes();,if (code != null ) ByteArray bytes = code.getBytes();
BlockDumper.java,boolean isStatic = AccessFlags.isStatic(meth.getAccessFlags());,if (AccessFlags != null ) boolean isStatic = AccessFlags.isStatic(meth.getAccessFlags());
BlockDumper.java,BasicBlockList blocks = rmeth.getBlocks();,if (rmeth != null ) BasicBlockList blocks = rmeth.getBlocks();
BlockDumper.java,int[] order = blocks.getLabelsInOrder();,if (blocks != null ) int[] order = blocks.getLabelsInOrder();
BlockDumper.java,int psz = preds.size();,if (preds != null ) int psz = preds.size();
BlockDumper.java,InsnList il = bb.getInsns();,if (bb != null ) InsnList il = bb.getInsns();
BlockDumper.java,int ilsz = il.size();,if (il != null ) int ilsz = il.size();
BlockDumper.java,IntList successors = bb.getSuccessors();,if (bb != null ) IntList successors = bb.getSuccessors();
BlockDumper.java,int ssz = successors.size();,if (successors != null ) int ssz = successors.size();
BlockDumper.java,int primary = bb.getPrimarySuccessor();,if (bb != null ) int primary = bb.getPrimarySuccessor();
DotDumper.java,boolean isStatic = AccessFlags.isStatic(meth.getAccessFlags());,if (AccessFlags != null ) boolean isStatic = AccessFlags.isStatic(meth.getAccessFlags());
DotDumper.java,BasicBlockList blocks = rmeth.getBlocks();,if (rmeth != null ) BasicBlockList blocks = rmeth.getBlocks();
DotDumper.java,int sz = blocks.size();,if (blocks != null ) int sz = blocks.size();
DotDumper.java,int label = bb.getLabel();,if (bb != null ) int label = bb.getLabel();
DotDumper.java,IntList successors = bb.getSuccessors();,if (bb != null ) IntList successors = bb.getSuccessors();
SsaDumper.java,boolean isStatic = AccessFlags.isStatic(meth.getAccessFlags());,if (AccessFlags != null ) boolean isStatic = AccessFlags.isStatic(meth.getAccessFlags());
SsaDumper.java,ArrayList<SsaBasicBlock> blocks = ssaMeth.getBlocks();,if (ssaMeth != null ) ArrayList<SsaBasicBlock> blocks = ssaMeth.getBlocks();
SsaDumper.java,BitSet preds = block.getPredecessors();,if (block != null ) BitSet preds = block.getPredecessors();
SsaDumper.java,int primary = block.getPrimarySuccessorRopLabel();,if (block != null ) int primary = block.getPrimarySuccessorRopLabel();
SsaDumper.java,IntList succLabelList = block.getRopLabelSuccessorList();,if (block != null ) IntList succLabelList = block.getRopLabelSuccessorList();
SsaDumper.java,int szSuccLabels = succLabelList.size();,if (succLabelList != null ) int szSuccLabels = succLabelList.size();
FindUsages.java,List<String> strings = dex.strings();,if (dex != null ) List<String> strings = dex.strings();
FindUsages.java,int fieldId = one.getIndex();,if (one != null ) int fieldId = one.getIndex();
FindUsages.java,int methodId = one.getIndex();,if (one != null ) int methodId = one.getIndex();
FindUsages.java,int fieldIndex = field.getFieldIndex();,if (field != null ) int fieldIndex = field.getFieldIndex();
FindUsages.java,int methodIndex = method.getMethodIndex();,if (method != null ) int methodIndex = method.getMethodIndex();
Grep.java,int staticValuesOffset = classDef.getStaticValuesOffset();,if (classDef != null ) int staticValuesOffset = classDef.getStaticValuesOffset();
AttributeTranslator.java,AttributeList attribs = method.getAttributes();,if (method != null ) AttributeList attribs = method.getAttributes();
AttributeTranslator.java,CstType thisClass = cf.getThisClass();,if (cf != null ) CstType thisClass = cf.getThisClass();
AttributeTranslator.java,AttributeList attribs = cf.getAttributes();,if (cf != null ) AttributeList attribs = cf.getAttributes();
AttributeTranslator.java,Annotations result = getAnnotations(method.getAttributes());,if (getAnnotations(method != null ) Annotations result = getAnnotations(method.getAttributes());
AttributeTranslator.java,CstType enclosingClass = enclosingMethod.getEnclosingClass();,if (enclosingMethod != null ) CstType enclosingClass = enclosingMethod.getEnclosingClass();
AttributeTranslator.java,CstNat nat = enclosingMethod.getMethod();,if (enclosingMethod != null ) CstNat nat = enclosingMethod.getMethod();
AttributeTranslator.java,InnerClassList list = innerClasses.getInnerClasses();,if (innerClasses != null ) InnerClassList list = innerClasses.getInnerClasses();
AttributeTranslator.java,int size = list.size();,if (list != null ) int size = list.size();
AttributeTranslator.java,CstType innerClass = item.getInnerClass();,if (item != null ) CstType innerClass = item.getInnerClass();
AttributeTranslator.java,int membersSize = membersList.size();,if (membersList != null ) int membersSize = membersList.size();
AttributeTranslator.java,CstType outer = foundThisClass.getOuterClass();,if (foundThisClass != null ) CstType outer = foundThisClass.getOuterClass();
AttributeTranslator.java,AttributeList attribs = method.getAttributes();,if (method != null ) AttributeList attribs = method.getAttributes();
AttributeTranslator.java,CstType thisClass = cf.getThisClass();,if (cf != null ) CstType thisClass = cf.getThisClass();
AttributeTranslator.java,MethodList methods = cf.getMethods();,if (cf != null ) MethodList methods = cf.getMethods();
AttributeTranslator.java,int sz = methods.size();,if (methods != null ) int sz = methods.size();
AttributeTranslator.java,AttributeList attribs = one.getAttributes();,if (one != null ) AttributeList attribs = one.getAttributes();
CfTranslator.java,CstType thisClass = cf.getThisClass();,if (cf != null ) CstType thisClass = cf.getThisClass();
CfTranslator.java,FieldIdsSection fieldIdsSection = dexFile.getFieldIds();,if (dexFile != null ) FieldIdsSection fieldIdsSection = dexFile.getFieldIds();
CfTranslator.java,MethodIdsSection methodIdsSection = dexFile.getMethodIds();,if (dexFile != null ) MethodIdsSection methodIdsSection = dexFile.getMethodIds();
CfTranslator.java,TypeIdsSection typeIdsSection = dexFile.getTypeIds();,if (dexFile != null ) TypeIdsSection typeIdsSection = dexFile.getTypeIds();
CfTranslator.java,ConstantPool constantPool = cf.getConstantPool();,if (cf != null ) ConstantPool constantPool = cf.getConstantPool();
CfTranslator.java,int constantPoolSize = constantPool.size();,if (constantPool != null ) int constantPoolSize = constantPool.size();
CfTranslator.java,CstType thisClass = cf.getThisClass();,if (cf != null ) CstType thisClass = cf.getThisClass();
CfTranslator.java,FieldList fields = cf.getFields();,if (cf != null ) FieldList fields = cf.getFields();
CfTranslator.java,int sz = fields.size();,if (fields != null ) int sz = fields.size();
CfTranslator.java,"CstFieldRef field = new CstFieldRef(thisClass, one.getNat());","if (one != null ) CstFieldRef field = new CstFieldRef(thisClass, one.getNat());"
CfTranslator.java,int accessFlags = one.getAccessFlags();,if (one != null ) int accessFlags = one.getAccessFlags();
CfTranslator.java,TypedConstant constVal = one.getConstantValue();,if (one != null ) TypedConstant constVal = one.getConstantValue();
CfTranslator.java,"constVal = coerceConstant(constVal, field.getType());","if (field != null ) constVal = coerceConstant(constVal, field.getType());"
CfTranslator.java,Type constantType = constant.getType();,if (constant != null ) Type constantType = constant.getType();
CfTranslator.java,CstType thisClass = cf.getThisClass();,if (cf != null ) CstType thisClass = cf.getThisClass();
CfTranslator.java,MethodList methods = cf.getMethods();,if (cf != null ) MethodList methods = cf.getMethods();
CfTranslator.java,int sz = methods.size();,if (methods != null ) int sz = methods.size();
CfTranslator.java,"CstMethodRef meth = new CstMethodRef(thisClass, one.getNat());","if (one != null ) CstMethodRef meth = new CstMethodRef(thisClass, one.getNat());"
CfTranslator.java,int accessFlags = one.getAccessFlags();,if (one != null ) int accessFlags = one.getAccessFlags();
CodeStatistics.java,dexRunningTotalInsns += code.getInsns().codeSize();,if (code != null ) dexRunningTotalInsns += code.getInsns().codeSize();
CodeStatistics.java,int oldCountRegs = nonOptRmeth.getBlocks().getRegCount();,if (nonOptRmeth != null ) int oldCountRegs = nonOptRmeth.getBlocks().getRegCount();
ArrayData.java,int sz = values.size();,if (values != null ) int sz = values.size();
ArrayData.java,initLength = values.size();,if (values != null ) initLength = values.size();
ArrayData.java,int sz = values.size();,if (values != null ) int sz = values.size();
ArrayData.java,int sz = values.size();,if (values != null ) int sz = values.size();
ArrayData.java,int baseAddress = user.getAddress();,if (user != null ) int baseAddress = user.getAddress();
ArrayData.java,int sz = values.size();,if (values != null ) int sz = values.size();
BlockAddresses.java,BasicBlockList blocks = method.getBlocks();,if (method != null ) BasicBlockList blocks = method.getBlocks();
BlockAddresses.java,int maxLabel = blocks.getMaxLabel();,if (blocks != null ) int maxLabel = blocks.getMaxLabel();
BlockAddresses.java,BasicBlockList blocks = method.getBlocks();,if (method != null ) BasicBlockList blocks = method.getBlocks();
BlockAddresses.java,int sz = blocks.size();,if (blocks != null ) int sz = blocks.size();
BlockAddresses.java,int label = one.getLabel();,if (one != null ) int label = one.getLabel();
BlockAddresses.java,starts[label] = new CodeAddress(insn.getPosition());,if (CodeAddress(insn != null ) starts[label] = new CodeAddress(insn.getPosition());
BlockAddresses.java,SourcePosition pos = one.getLastInsn().getPosition();,if (one != null ) SourcePosition pos = one.getLastInsn().getPosition();
CatchHandlerList.java,int otherSize = other.size();,if (other != null ) int otherSize = other.size();
CatchTable.java,int otherSize = other.size();,if (other != null ) int otherSize = other.size();
DalvCode.java,insns = unprocessedInsns.finishProcessingAndGetList();,if (unprocessedInsns != null ) insns = unprocessedInsns.finishProcessingAndGetList();
DalvCode.java,catches = unprocessedCatches.build();,if (unprocessedCatches != null ) catches = unprocessedCatches.build();
DalvInsn.java,boolean reference = dest.getType().isReference();,if (dest != null ) boolean reference = dest.getType().isReference();
DalvInsn.java,int destReg = dest.getReg();,if (dest != null ) int destReg = dest.getReg();
DalvInsn.java,int srcReg = src.getReg();,if (src != null ) int srcReg = src.getReg();
DalvInsn.java,int regSz = registers.size();,if (registers != null ) int regSz = registers.size();
DalvInsn.java,sourceRequirement += registers.get(i).getCategory();,if (registers != null ) sourceRequirement += registers.get(i).getCategory();
DalvInsnList.java,int size = list.size();,if (list != null ) int size = list.size();
DalvInsnList.java,int startCursor = out.getCursor();,if (out != null ) int startCursor = out.getCursor();
DalvInsnList.java,boolean verbose = out.isVerbose();,if (out != null ) boolean verbose = out.isVerbose();
Dops.java,int nextOpcode = opcode.getNextOpcode();,if (opcode != null ) int nextOpcode = opcode.getNextOpcode();
HighRegisterPrefix.java,result += insn.codeSize();,if (insn != null ) result += insn.codeSize();
HighRegisterPrefix.java,int sz = registers.size();,if (registers != null ) int sz = registers.size();
HighRegisterPrefix.java,outAt += src.getCategory();,if (src != null ) outAt += src.getCategory();
HighRegisterPrefix.java,int sz = registers.size();,if (registers != null ) int sz = registers.size();
HighRegisterPrefix.java,outAt += src.getCategory();,if (src != null ) outAt += src.getCategory();
InsnFormat.java,String op = insn.getOpcode().getName();,if (insn != null ) String op = insn.getOpcode().getName();
InsnFormat.java,int sz = list.size();,if (list != null ) int sz = list.size();
InsnFormat.java,int size = list.size();,if (list != null ) int size = list.size();
InsnFormat.java,bits = value.getIntBits();,if (value != null ) bits = value.getIntBits();
InsnFormat.java,int address = ti.getTargetAddress();,if (ti != null ) int address = ti.getTargetAddress();
InsnFormat.java,int offset = ti.getTargetOffset();,if (ti != null ) int offset = ti.getTargetOffset();
InsnFormat.java,Constant cst = ci.getConstant();,if (ci != null ) Constant cst = ci.getConstant();
InsnFormat.java,int index = ci.getIndex();,if (ci != null ) int index = ci.getIndex();
InsnFormat.java,int sz = list.size();,if (list != null ) int sz = list.size();
InsnFormat.java,next += one.getCategory();,if (one != null ) next += one.getCategory();
InsnFormat.java,int opcode = insn.getOpcode().getOpcode();,if (insn != null ) int opcode = insn.getOpcode().getOpcode();
InsnFormat.java,int opcode = insn.getOpcode().getOpcode();,if (insn != null ) int opcode = insn.getOpcode().getOpcode();
LocalList.java,this.type = CstType.intern(spec.getType());,if (CstType != null ) this.type = CstType.intern(spec.getType());
LocalList.java,boolean otherIsStart = other.isStart();,if (other != null ) boolean otherIsStart = other.isStart();
LocalList.java,int sz = insns.size();,if (insns != null ) int sz = insns.size();
LocalList.java,LocalList result = state.finish();,if (state != null ) LocalList result = state.finish();
LocalList.java,int sz = locals.size();,if (locals != null ) int sz = locals.size();
LocalList.java,int sz = locals.size();,if (locals != null ) int sz = locals.size();
LocalList.java,int sz = specs.getMaxSize();,if (specs != null ) int sz = specs.getMaxSize();
LocalList.java,int regNum = startedLocal.getReg();,if (startedLocal != null ) int regNum = startedLocal.getReg();
LocalList.java,int regNum = endedLocal.getReg();,if (endedLocal != null ) int regNum = endedLocal.getReg();
LocalList.java,int regNum = endedLocal.getReg();,if (endedLocal != null ) int regNum = endedLocal.getReg();
LocalList.java,int regNum = spec.getReg();,if (spec != null ) int regNum = spec.getReg();
LocalList.java,int regNum = spec.getReg();,if (spec != null ) int regNum = spec.getReg();
LocalList.java,int resultSz = result.size();,if (result != null ) int resultSz = result.size();
LocalSnapshot.java,int sz = locals.size();,if (locals != null ) int sz = locals.size();
LocalSnapshot.java,int max = locals.getMaxSize();,if (locals != null ) int max = locals.getMaxSize();
OutputCollector.java,int size = suffix.size();,if (suffix != null ) int size = suffix.size();
OutputFinisher.java,int size = specs.size();,if (specs != null ) int size = specs.size();
OutputFinisher.java,int size = specs.size();,if (specs != null ) int size = specs.size();
OutputFinisher.java,LocalItem local = spec.getLocalItem();,if (spec != null ) LocalItem local = spec.getLocalItem();
OutputFinisher.java,CstString name = local.getName();,if (local != null ) CstString name = local.getName();
OutputFinisher.java,CstString signature = local.getSignature();,if (local != null ) CstString signature = local.getSignature();
OutputFinisher.java,Type type = spec.getType();,if (spec != null ) Type type = spec.getType();
OutputFinisher.java,SourcePosition pos = insn.getPosition();,if (insn != null ) SourcePosition pos = insn.getPosition();
OutputFinisher.java,int size = insns.size();,if (insns != null ) int size = insns.size();
OutputFinisher.java,Constant cst = insn.getConstant();,if (insn != null ) Constant cst = insn.getConstant();
OutputFinisher.java,CstType definer = member.getDefiningClass();,if (member != null ) CstType definer = member.getDefiningClass();
OutputFinisher.java,int size = insns.size();,if (insns != null ) int size = insns.size();
OutputFinisher.java,result[i] = insns.get(i).getOpcode();,if (insns != null ) result[i] = insns.get(i).getOpcode();
OutputFinisher.java,int size = insns.size();,if (insns != null ) int size = insns.size();
OutputFinisher.java,int size = insns.size();,if (insns != null ) int size = insns.size();
OutputFinisher.java,"Dop result = findOpcodeForInsn(insn.getLowRegVersion(), insn.getOpcode());","if (insn != null ) Dop result = findOpcodeForInsn(insn.getLowRegVersion(), insn.getOpcode());"
OutputFinisher.java,int size = insns.size();,if (insns != null ) int size = insns.size();
OutputFinisher.java,Dop originalOpcode = insn.getOpcode();,if (insn != null ) Dop originalOpcode = insn.getOpcode();
OutputFinisher.java,int size = insns.size();,if (insns != null ) int size = insns.size();
OutputFinisher.java,Dop originalOpcode = insn.getOpcode();,if (insn != null ) Dop originalOpcode = insn.getOpcode();
OutputFinisher.java,int size = insns.size();,if (insns != null ) int size = insns.size();
OutputFinisher.java,address += insn.codeSize();,if (insn != null ) address += insn.codeSize();
OutputFinisher.java,int size = insns.size();,if (insns != null ) int size = insns.size();
OutputFinisher.java,Dop opcode = insn.getOpcode();,if (insn != null ) Dop opcode = insn.getOpcode();
PositionList.java,int sz = insns.size();,if (insns != null ) int sz = insns.size();
PositionList.java,SourcePosition pos = insn.getPosition();,if (insn != null ) SourcePosition pos = insn.getPosition();
RopToDop.java,Rop rop = insn.getOpcode();,if (insn != null ) Rop rop = insn.getOpcode();
RopToDop.java,RegisterSpec resultReg = insn.getResult();,if (insn != null ) RegisterSpec resultReg = insn.getResult();
RopToDop.java,int basicType = ref.getBasicType();,if (ref != null ) int basicType = ref.getBasicType();
RopToDop.java,int basicType = ref.getBasicType();,if (ref != null ) int basicType = ref.getBasicType();
RopToDop.java,int basicType = ref.getBasicType();,if (ref != null ) int basicType = ref.getBasicType();
RopToDop.java,int basicType = ref.getBasicType();,if (ref != null ) int basicType = ref.getBasicType();
RopTranslator.java,BasicBlockList blocks = method.getBlocks();,if (method != null ) BasicBlockList blocks = method.getBlocks();
RopTranslator.java,int bsz = blocks.size();,if (blocks != null ) int bsz = blocks.size();
RopTranslator.java,maxInsns += bsz + locals.getAssignmentCount();,if (locals != null ) maxInsns += bsz + locals.getAssignmentCount();
RopTranslator.java,final int initialRegCount = method.getBlocks().getRegCount();,if (method != null ) final int initialRegCount = method.getBlocks().getRegCount();
RopTranslator.java,BasicBlockList blocks = method.getBlocks();,if (method != null ) BasicBlockList blocks = method.getBlocks();
RopTranslator.java,int succ = block.getPrimarySuccessor();,if (block != null ) int succ = block.getPrimarySuccessor();
RopTranslator.java,Insn lastInsn = block.getLastInsn();,if (block != null ) Insn lastInsn = block.getLastInsn();
RopTranslator.java,Rop lastRop = lastInsn.getOpcode();,if (lastInsn != null ) Rop lastRop = lastInsn.getOpcode();
RopTranslator.java,BasicBlockList blocks = method.getBlocks();,if (method != null ) BasicBlockList blocks = method.getBlocks();
RopTranslator.java,int sz = blocks.size();,if (blocks != null ) int sz = blocks.size();
RopTranslator.java,int maxLabel = blocks.getMaxLabel();,if (blocks != null ) int maxLabel = blocks.getMaxLabel();
RopTranslator.java,int psz = preds.size();,if (preds != null ) int psz = preds.size();
RopTranslator.java,int preferred = preferredBlock.getLabel();,if (preferredBlock != null ) int preferred = preferredBlock.getLabel();
RopTranslator.java,int primary = one.getPrimarySuccessor();,if (one != null ) int primary = one.getPrimarySuccessor();
RopTranslator.java,IntList successors = one.getSuccessors();,if (one != null ) IntList successors = one.getSuccessors();
RopTranslator.java,int ssz = successors.size();,if (successors != null ) int ssz = successors.size();
RopTranslator.java,RegisterSpecList regs = insn.getSources();,if (insn != null ) RegisterSpecList regs = insn.getSources();
RopTranslator.java,Rop rop = insn.getOpcode();,if (insn != null ) Rop rop = insn.getOpcode();
RopTranslator.java,SourcePosition pos = insn.getPosition();,if (insn != null ) SourcePosition pos = insn.getPosition();
RopTranslator.java,SourcePosition pos = insn.getPosition();,if (insn != null ) SourcePosition pos = insn.getPosition();
RopTranslator.java,Rop rop = insn.getOpcode();,if (insn != null ) Rop rop = insn.getOpcode();
RopTranslator.java,int ropOpcode = rop.getOpcode();,if (rop != null ) int ropOpcode = rop.getOpcode();
RopTranslator.java,RegisterSpec dest = insn.getResult();,if (insn != null ) RegisterSpec dest = insn.getResult();
RopTranslator.java,SourcePosition pos = insn.getPosition();,if (insn != null ) SourcePosition pos = insn.getPosition();
RopTranslator.java,IntList cases = insn.getCases();,if (insn != null ) IntList cases = insn.getCases();
RopTranslator.java,IntList successors = block.getSuccessors();,if (block != null ) IntList successors = block.getSuccessors();
RopTranslator.java,int casesSz = cases.size();,if (cases != null ) int casesSz = cases.size();
RopTranslator.java,int succSz = successors.size();,if (successors != null ) int succSz = successors.size();
RopTranslator.java,int primarySuccessor = block.getPrimarySuccessor();,if (block != null ) int primarySuccessor = block.getPrimarySuccessor();
RopTranslator.java,int label = block.getPrimarySuccessor();,if (block != null ) int label = block.getPrimarySuccessor();
RopTranslator.java,SourcePosition pos = insn.getPosition();,if (insn != null ) SourcePosition pos = insn.getPosition();
RopTranslator.java,Rop rop = insn.getOpcode();,if (insn != null ) Rop rop = insn.getOpcode();
RopTranslator.java,Constant cst = insn.getConstant();,if (insn != null ) Constant cst = insn.getConstant();
RopTranslator.java,RegisterSpecList regs = insn.getSources();,if (insn != null ) RegisterSpecList regs = insn.getSources();
RopTranslator.java,SourcePosition pos = insn.getPosition();,if (insn != null ) SourcePosition pos = insn.getPosition();
RopTranslator.java,Rop rop = insn.getOpcode();,if (insn != null ) Rop rop = insn.getOpcode();
RopTranslator.java,SourcePosition pos = insn.getPosition();,if (insn != null ) SourcePosition pos = insn.getPosition();
RopTranslator.java,Constant cst = insn.getConstant();,if (insn != null ) Constant cst = insn.getConstant();
RopTranslator.java,ArrayList<Constant> values = insn.getInitValues();,if (insn != null ) ArrayList<Constant> values = insn.getInitValues();
RopTranslator.java,Rop rop = insn.getOpcode();,if (insn != null ) Rop rop = insn.getOpcode();
StdCatchBuilder.java,BasicBlockList blocks = method.getBlocks();,if (method != null ) BasicBlockList blocks = method.getBlocks();
StdCatchBuilder.java,int size = blocks.size();,if (blocks != null ) int size = blocks.size();
StdCatchBuilder.java,TypeList catches = block.getLastInsn().getCatches();,if (block != null ) TypeList catches = block.getLastInsn().getCatches();
StdCatchBuilder.java,BasicBlockList blocks = method.getBlocks();,if (method != null ) BasicBlockList blocks = method.getBlocks();
StdCatchBuilder.java,int size = blocks.size();,if (blocks != null ) int size = blocks.size();
StdCatchBuilder.java,TypeList catches = block.getLastInsn().getCatches();,if (block != null ) TypeList catches = block.getLastInsn().getCatches();
StdCatchBuilder.java,int catchSize = catches.size();,if (catches != null ) int catchSize = catches.size();
StdCatchBuilder.java,BasicBlockList blocks = method.getBlocks();,if (method != null ) BasicBlockList blocks = method.getBlocks();
StdCatchBuilder.java,int resultSz = resultList.size();,if (resultList != null ) int resultSz = resultList.size();
StdCatchBuilder.java,IntList successors = block.getSuccessors();,if (block != null ) IntList successors = block.getSuccessors();
StdCatchBuilder.java,int succSize = successors.size();,if (successors != null ) int succSize = successors.size();
StdCatchBuilder.java,int primary = block.getPrimarySuccessor();,if (block != null ) int primary = block.getPrimarySuccessor();
StdCatchBuilder.java,TypeList catches = block.getLastInsn().getCatches();,if (block != null ) TypeList catches = block.getLastInsn().getCatches();
StdCatchBuilder.java,int catchSize = catches.size();,if (catches != null ) int catchSize = catches.size();
StdCatchBuilder.java,int startAddress = addresses.getLast(start).getAddress();,if (addresses != null ) int startAddress = addresses.getLast(start).getAddress();
StdCatchBuilder.java,int endAddress = addresses.getEnd(end).getAddress();,if (addresses != null ) int endAddress = addresses.getEnd(end).getAddress();
SwitchData.java,int sz = cases.size();,if (cases != null ) int sz = cases.size();
SwitchData.java,int baseAddress = user.getAddress();,if (user != null ) int baseAddress = user.getAddress();
SwitchData.java,int baseAddress = user.getAddress();,if (user != null ) int baseAddress = user.getAddress();
SwitchData.java,int absTarget = targets[i].getAddress();,if (targets[i] != null ) int absTarget = targets[i].getAddress();
SwitchData.java,int sz = cases.size();,if (cases != null ) int sz = cases.size();
SwitchData.java,int sz = cases.size();,if (cases != null ) int sz = cases.size();
SwitchData.java,int sz = cases.size();,if (cases != null ) int sz = cases.size();
TargetInsn.java,Dop opcode = getOpcode().getOppositeTest();,if (getOpcode() != null ) Dop opcode = getOpcode().getOppositeTest();
Form10t.java,int offset = insn.getTargetOffset();,if (insn != null ) int offset = insn.getTargetOffset();
Form11n.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form11n.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form11n.java,Constant cst = ci.getConstant();,if (ci != null ) Constant cst = ci.getConstant();
Form11n.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form11n.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form11x.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form11x.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form11x.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form11x.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form12x.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form12x.java,int sz = regs.size();,if (regs != null ) int sz = regs.size();
Form12x.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form12x.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form12x.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form12x.java,int sz = regs.size();,if (regs != null ) int sz = regs.size();
Form20t.java,int offset = insn.getTargetOffset();,if (insn != null ) int offset = insn.getTargetOffset();
Form21c.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form21c.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form21c.java,int cpi = ci.getIndex();,if (ci != null ) int cpi = ci.getIndex();
Form21c.java,Constant cst = ci.getConstant();,if (ci != null ) Constant cst = ci.getConstant();
Form21c.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form21c.java,int sz = regs.size();,if (regs != null ) int sz = regs.size();
Form21c.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form21h.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form21h.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form21h.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form21h.java,Constant cst = ci.getConstant();,if (ci != null ) Constant cst = ci.getConstant();
Form21h.java,int bits = cb.getIntBits();,if (cb != null ) int bits = cb.getIntBits();
Form21h.java,long bits = cb.getLongBits();,if (cb != null ) long bits = cb.getLongBits();
Form21h.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form21h.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form21s.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form21s.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form21s.java,Constant cst = ci.getConstant();,if (ci != null ) Constant cst = ci.getConstant();
Form21s.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form21s.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form21t.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form21t.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form21t.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form21t.java,int offset = insn.getTargetOffset();,if (insn != null ) int offset = insn.getTargetOffset();
Form21t.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form22b.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form22b.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form22b.java,Constant cst = ci.getConstant();,if (ci != null ) Constant cst = ci.getConstant();
Form22b.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form22b.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form22c.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form22c.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form22c.java,int cpi = ci.getIndex();,if (ci != null ) int cpi = ci.getIndex();
Form22c.java,Constant cst = ci.getConstant();,if (ci != null ) Constant cst = ci.getConstant();
Form22c.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form22c.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form22s.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form22s.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form22s.java,Constant cst = ci.getConstant();,if (ci != null ) Constant cst = ci.getConstant();
Form22s.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form22s.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form22t.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form22t.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form22t.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form22t.java,int offset = insn.getTargetOffset();,if (insn != null ) int offset = insn.getTargetOffset();
Form22t.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form22x.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form22x.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form22x.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form22x.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form23x.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form23x.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form23x.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form23x.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form31c.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form31c.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form31c.java,Constant cst = ci.getConstant();,if (ci != null ) Constant cst = ci.getConstant();
Form31c.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form31c.java,int sz = regs.size();,if (regs != null ) int sz = regs.size();
Form31c.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form31i.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form31i.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form31i.java,Constant cst = ci.getConstant();,if (ci != null ) Constant cst = ci.getConstant();
Form31i.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form31i.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form31t.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form31t.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form31t.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form31t.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form32x.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form32x.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form32x.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form32x.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form35c.java,RegisterSpecList regs = explicitize(insn.getRegisters());,if (explicitize(insn != null ) RegisterSpecList regs = explicitize(insn.getRegisters());
Form35c.java,int cpi = ci.getIndex();,if (ci != null ) int cpi = ci.getIndex();
Form35c.java,Constant cst = ci.getConstant();,if (ci != null ) Constant cst = ci.getConstant();
Form35c.java,RegisterSpecList regs = ci.getRegisters();,if (ci != null ) RegisterSpecList regs = ci.getRegisters();
Form35c.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form35c.java,int sz = regs.size();,if (regs != null ) int sz = regs.size();
Form35c.java,RegisterSpecList regs = explicitize(insn.getRegisters());,if (explicitize(insn != null ) RegisterSpecList regs = explicitize(insn.getRegisters());
Form35c.java,int sz = regs.size();,if (regs != null ) int sz = regs.size();
Form35c.java,int sz = regs.size();,if (regs != null ) int sz = regs.size();
Form35c.java,result += one.getCategory();,if (one != null ) result += one.getCategory();
Form35c.java,int sz = orig.size();,if (orig != null ) int sz = orig.size();
Form3rc.java,int cpi = ci.getIndex();,if (ci != null ) int cpi = ci.getIndex();
Form3rc.java,Constant cst = ci.getConstant();,if (ci != null ) Constant cst = ci.getConstant();
Form3rc.java,RegisterSpecList regs = ci.getRegisters();,if (ci != null ) RegisterSpecList regs = ci.getRegisters();
Form3rc.java,int sz = regs.size();,if (regs != null ) int sz = regs.size();
Form3rc.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form3rc.java,int count = regs.getWordCount();,if (regs != null ) int count = regs.getWordCount();
Form51l.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form51l.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form51l.java,Constant cst = ci.getConstant();,if (ci != null ) Constant cst = ci.getConstant();
Form51l.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
Form51l.java,RegisterSpecList regs = insn.getRegisters();,if (insn != null ) RegisterSpecList regs = insn.getRegisters();
AnnotationItem.java,encodedForm = out.toByteArray();,if (out != null ) encodedForm = out.toByteArray();
AnnotationItem.java,CstString name = pair.getName();,if (pair != null ) CstString name = pair.getName();
AnnotationItem.java,Constant value = pair.getValue();,if (pair != null ) Constant value = pair.getValue();
AnnotationItem.java,boolean annotates = out.annotates();,if (out != null ) boolean annotates = out.annotates();
AnnotationItem.java,AnnotationVisibility visibility = annotation.getVisibility();,if (annotation != null ) AnnotationVisibility visibility = annotation.getVisibility();
AnnotationSetItem.java,MixedItemSection byteData = file.getByteData();,if (file != null ) MixedItemSection byteData = file.getByteData();
AnnotationSetItem.java,boolean annotates = out.annotates();,if (out != null ) boolean annotates = out.annotates();
AnnotationSetItem.java,int offset = item.getAbsoluteOffset();,if (item != null ) int offset = item.getAbsoluteOffset();
AnnotationSetRefItem.java,MixedItemSection wordData = file.getWordData();,if (file != null ) MixedItemSection wordData = file.getWordData();
AnnotationSetRefItem.java,int annotationsOff = annotations.getAbsoluteOffset();,if (annotations != null ) int annotationsOff = annotations.getAbsoluteOffset();
AnnotationUtils.java,String raw = signature.getString();,if (signature != null ) String raw = signature.getString();
AnnotationUtils.java,int rawLength = raw.length();,if (raw != null ) int rawLength = raw.length();
AnnotationUtils.java,int size = pieces.size();,if (pieces != null ) int size = pieces.size();
AnnotationUtils.java,int size = types.size();,if (types != null ) int size = types.size();
AnnotationsDirectoryItem.java,MixedItemSection wordData = file.getWordData();,if (file != null ) MixedItemSection wordData = file.getWordData();
AnnotationsDirectoryItem.java,boolean annotates = out.annotates();,if (out != null ) boolean annotates = out.annotates();
CatchStructs.java,table = code.getCatches();,if (code != null ) table = code.getCatches();
CatchStructs.java,TypeIdsSection typeIds = file.getTypeIds();,if (file != null ) TypeIdsSection typeIds = file.getTypeIds();
CatchStructs.java,int size = table.size();,if (table != null ) int size = table.size();
CatchStructs.java,CatchHandlerList list = mapping.getKey();,if (mapping != null ) CatchHandlerList list = mapping.getKey();
CatchStructs.java,int listSize = list.size();,if (list != null ) int listSize = list.size();
CatchStructs.java,boolean catchesAll = list.catchesAll();,if (list != null ) boolean catchesAll = list.catchesAll();
CatchStructs.java,encodedHandlers = out.toByteArray();,if (out != null ) encodedHandlers = out.toByteArray();
CatchStructs.java,int tableSize = table.size();,if (table != null ) int tableSize = table.size();
CatchStructs.java,int start = one.getStart();,if (one != null ) int start = one.getStart();
CatchStructs.java,int end = one.getEnd();,if (one != null ) int end = one.getEnd();
CatchStructs.java,int size = table.size();,if (table != null ) int size = table.size();
CatchStructs.java,CatchHandlerList handlers = entry.getHandlers();,if (entry != null ) CatchHandlerList handlers = entry.getHandlers();
CatchStructs.java,CatchHandlerList list = mapping.getKey();,if (mapping != null ) CatchHandlerList list = mapping.getKey();
CatchStructs.java,int offset = mapping.getValue();,if (mapping != null ) int offset = mapping.getValue();
ClassDataItem.java,int sz = directMethods.size() + virtualMethods.size();,if (virtualMethods != null ) int sz = directMethods.size() + virtualMethods.size();
ClassDataItem.java,int sz = staticFields.size();,if (staticFields != null ) int sz = staticFields.size();
ClassDataItem.java,sz = instanceFields.size();,if (instanceFields != null ) sz = instanceFields.size();
ClassDataItem.java,sz = directMethods.size();,if (directMethods != null ) sz = directMethods.size();
ClassDataItem.java,sz = virtualMethods.size();,if (virtualMethods != null ) sz = virtualMethods.size();
ClassDataItem.java,int size = staticFields.size();,if (staticFields != null ) int size = staticFields.size();
ClassDataItem.java,encodedForm = out.toByteArray();,if (out != null ) encodedForm = out.toByteArray();
ClassDataItem.java,boolean annotates = out.annotates();,if (out != null ) boolean annotates = out.annotates();
ClassDataItem.java,int size = list.size();,if (list != null ) int size = list.size();
ClassDataItem.java,boolean annotates = out.annotates();,if (out != null ) boolean annotates = out.annotates();
ClassDefItem.java,TypeIdsSection typeIds = file.getTypeIds();,if (file != null ) TypeIdsSection typeIds = file.getTypeIds();
ClassDefItem.java,MixedItemSection byteData = file.getByteData();,if (file != null ) MixedItemSection byteData = file.getByteData();
ClassDefItem.java,MixedItemSection wordData = file.getWordData();,if (file != null ) MixedItemSection wordData = file.getWordData();
ClassDefItem.java,MixedItemSection typeLists = file.getTypeLists();,if (file != null ) MixedItemSection typeLists = file.getTypeLists();
ClassDefItem.java,StringIdsSection stringIds = file.getStringIds();,if (file != null ) StringIdsSection stringIds = file.getStringIds();
ClassDefItem.java,MixedItemSection classDataSection = file.getClassData();,if (file != null ) MixedItemSection classDataSection = file.getClassData();
ClassDefItem.java,CstArray staticValues = classData.getStaticValuesConstant();,if (classData != null ) CstArray staticValues = classData.getStaticValuesConstant();
ClassDefItem.java,boolean annotates = out.annotates();,if (out != null ) boolean annotates = out.annotates();
ClassDefItem.java,TypeIdsSection typeIds = file.getTypeIds();,if (file != null ) TypeIdsSection typeIds = file.getTypeIds();
ClassDefItem.java,TypeList list = interfaces.getList();,if (interfaces != null ) TypeList list = interfaces.getList();
ClassDefItem.java,int sz = list.size();,if (list != null ) int sz = list.size();
ClassDefsSection.java,int sz = classDefs.size();,if (classDefs != null ) int sz = classDefs.size();
ClassDefsSection.java,type = clazz.getThisClass().getClassType();,if (clazz != null ) type = clazz.getThisClass().getClassType();
ClassDefsSection.java,int sz = classDefs.size();,if (classDefs != null ) int sz = classDefs.size();
ClassDefsSection.java,Type superclass = superclassCst.getClassType();,if (superclassCst != null ) Type superclass = superclassCst.getClassType();
ClassDefsSection.java,int sz = interfaces.size();,if (interfaces != null ) int sz = interfaces.size();
CodeItem.java,MixedItemSection byteData = file.getByteData();,if (file != null ) MixedItemSection byteData = file.getByteData();
CodeItem.java,TypeIdsSection typeIds = file.getTypeIds();,if (file != null ) TypeIdsSection typeIds = file.getTypeIds();
CodeItem.java,DalvInsnList insns = code.getInsns();,if (code != null ) DalvInsnList insns = code.getInsns();
CodeItem.java,final DexFile file = addedTo.getFile();,if (addedTo != null ) final DexFile file = addedTo.getFile();
CodeItem.java,catchesSize = catches.writeSize();,if (catches != null ) catchesSize = catches.writeSize();
CodeItem.java,int insnsSize = code.getInsns().codeSize();,if (code != null ) int insnsSize = code.getInsns().codeSize();
CodeItem.java,boolean annotates = out.annotates();,if (out != null ) boolean annotates = out.annotates();
CodeItem.java,int insnsSz = code.getInsns().codeSize();,if (code != null ) int insnsSz = code.getInsns().codeSize();
CodeItem.java,int size = throwsList.size();,if (throwsList != null ) int size = throwsList.size();
CodeItem.java,DalvInsnList insns = code.getInsns();,if (code != null ) DalvInsnList insns = code.getInsns();
DebugInfoDecoder.java,this.desc = ref.getPrototype();,if (ref != null ) this.desc = ref.getPrototype();
DebugInfoDecoder.java,StdTypeList params = desc.getParameterTypes();,if (desc != null ) StdTypeList params = desc.getParameterTypes();
DebugInfoDecoder.java,curReg += paramType.getCategory();,if (paramType != null ) curReg += paramType.getCategory();
DebugInfoDecoder.java,PositionList pl = code.getPositions();,if (code != null ) PositionList pl = code.getPositions();
DebugInfoDecoder.java,LocalList ll = code.getLocals();,if (code != null ) LocalList ll = code.getLocals();
DebugInfoDecoder.java,DalvInsnList insns = code.getInsns();,if (code != null ) DalvInsnList insns = code.getInsns();
DebugInfoDecoder.java,int codeSize = insns.codeSize();,if (insns != null ) int codeSize = insns.codeSize();
DebugInfoDecoder.java,int countRegisters = insns.getRegistersSize();,if (insns != null ) int countRegisters = insns.getRegistersSize();
DebugInfoDecoder.java,List<PositionEntry> decodedEntries = decoder.getPositionList();,if (decoder != null ) List<PositionEntry> decodedEntries = decoder.getPositionList();
DebugInfoDecoder.java,List<LocalEntry> decodedLocals = decoder.getLocals();,if (decoder != null ) List<LocalEntry> decodedLocals = decoder.getLocals();
DebugInfoDecoder.java,int decodedSz = decodedLocals.size();,if (decodedLocals != null ) int decodedSz = decodedLocals.size();
DebugInfoDecoder.java,int paramBase = decoder.getParamBase();,if (decoder != null ) int paramBase = decoder.getParamBase();
DebugInfoDecoder.java,int origSz = ll.size();,if (ll != null ) int origSz = ll.size();
DebugInfoEncoder.java,this.desc = ref.getPrototype();,if (ref != null ) this.desc = ref.getPrototype();
DebugInfoEncoder.java,int positionsSz = sortedPositions.size();,if (sortedPositions != null ) int positionsSz = sortedPositions.size();
DebugInfoEncoder.java,int localsSz = locals.size();,if (locals != null ) int localsSz = locals.size();
DebugInfoEncoder.java,nextAddrL = locals.get(curLocalIdx).getAddress();,if (locals != null ) nextAddrL = locals.get(curLocalIdx).getAddress();
DebugInfoEncoder.java,nextAddrP = sortedPositions.get(curPositionIdx).getAddress();,if (sortedPositions != null ) nextAddrP = sortedPositions.get(curPositionIdx).getAddress();
DebugInfoEncoder.java,int sz = locals.size();,if (locals != null ) int sz = locals.size();
DebugInfoEncoder.java,int reg = entry.getRegister();,if (entry != null ) int reg = entry.getRegister();
DebugInfoEncoder.java,int positionsSz = sortedPositions.size();,if (sortedPositions != null ) int positionsSz = sortedPositions.size();
DebugInfoEncoder.java,int mark = output.getCursor();,if (output != null ) int mark = output.getCursor();
DebugInfoEncoder.java,line = entry.getPosition().getLine();,if (entry != null ) line = entry.getPosition().getLine();
DebugInfoEncoder.java,StdTypeList paramTypes = desc.getParameterTypes();,if (desc != null ) StdTypeList paramTypes = desc.getParameterTypes();
DebugInfoEncoder.java,int szParamTypes = paramTypes.size();,if (paramTypes != null ) int szParamTypes = paramTypes.size();
DebugInfoEncoder.java,mark = output.getCursor();,if (output != null ) mark = output.getCursor();
DebugInfoEncoder.java,mark = output.getCursor();,if (output != null ) mark = output.getCursor();
DebugInfoEncoder.java,curParam += pt.getCategory();,if (pt != null ) curParam += pt.getCategory();
DebugInfoEncoder.java,CstString signature = arg.getSignature();,if (arg != null ) CstString signature = arg.getSignature();
DebugInfoEncoder.java,int sz = locals.size();,if (locals != null ) int sz = locals.size();
DebugInfoEncoder.java,int mark = output.getCursor();,if (output != null ) int mark = output.getCursor();
DebugInfoEncoder.java,int mark = output.getCursor();,if (output != null ) int mark = output.getCursor();
DebugInfoEncoder.java,int mark = output.getCursor();,if (output != null ) int mark = output.getCursor();
DebugInfoEncoder.java,int mark = output.getCursor();,if (output != null ) int mark = output.getCursor();
DebugInfoEncoder.java,SourcePosition pos = entry.getPosition();,if (entry != null ) SourcePosition pos = entry.getPosition();
DebugInfoEncoder.java,int newLine = pos.getLine();,if (pos != null ) int newLine = pos.getLine();
DebugInfoEncoder.java,int newAddress = entry.getAddress();,if (entry != null ) int newAddress = entry.getAddress();
DebugInfoEncoder.java,int mark = output.getCursor();,if (output != null ) int mark = output.getCursor();
DebugInfoEncoder.java,int mark = output.getCursor();,if (output != null ) int mark = output.getCursor();
DebugInfoItem.java,PositionList positions = code.getPositions();,if (code != null ) PositionList positions = code.getPositions();
DebugInfoItem.java,LocalList locals = code.getLocals();,if (code != null ) LocalList locals = code.getLocals();
DebugInfoItem.java,DalvInsnList insns = code.getInsns();,if (code != null ) DalvInsnList insns = code.getInsns();
DebugInfoItem.java,int codeSize = insns.codeSize();,if (insns != null ) int codeSize = insns.codeSize();
DebugInfoItem.java,int regSize = insns.getRegistersSize();,if (insns != null ) int regSize = insns.getRegistersSize();
DebugInfoItem.java,result = encoder.convert();,if (encoder != null ) result = encoder.convert();
DexFile.java,offset = placedAt + one.writeSize();,if (one != null ) offset = placedAt + one.writeSize();
DexFile.java,int zeroCount = one.getFileOffset() - out.getCursor();,if (out != null ) int zeroCount = one.getFileOffset() - out.getCursor();
EncodedArrayItem.java,encodedForm = out.toByteArray();,if (out != null ) encodedForm = out.toByteArray();
EncodedArrayItem.java,boolean annotates = out.annotates();,if (out != null ) boolean annotates = out.annotates();
EncodedField.java,FieldIdsSection fieldIds = file.getFieldIds();,if (file != null ) FieldIdsSection fieldIds = file.getFieldIds();
EncodedMethod.java,MethodIdsSection methodIds = file.getMethodIds();,if (file != null ) MethodIdsSection methodIds = file.getMethodIds();
EncodedMethod.java,MixedItemSection wordData = file.getWordData();,if (file != null ) MixedItemSection wordData = file.getWordData();
FieldAnnotationStruct.java,FieldIdsSection fieldIds = file.getFieldIds();,if (file != null ) FieldIdsSection fieldIds = file.getFieldIds();
FieldAnnotationStruct.java,MixedItemSection wordData = file.getWordData();,if (file != null ) MixedItemSection wordData = file.getWordData();
FieldAnnotationStruct.java,int annotationsOff = annotations.getAbsoluteOffset();,if (annotations != null ) int annotationsOff = annotations.getAbsoluteOffset();
FieldIdItem.java,TypeIdsSection typeIds = file.getTypeIds();,if (file != null ) TypeIdsSection typeIds = file.getTypeIds();
FieldIdItem.java,TypeIdsSection typeIds = file.getTypeIds();,if (file != null ) TypeIdsSection typeIds = file.getTypeIds();
FieldIdsSection.java,int sz = fieldIds.size();,if (fieldIds != null ) int sz = fieldIds.size();
HeaderItem.java,int mapOff = file.getMap().getFileOffset();,if (file != null ) int mapOff = file.getMap().getFileOffset();
HeaderItem.java,Section firstDataSection = file.getFirstDataSection();,if (file != null ) Section firstDataSection = file.getFirstDataSection();
HeaderItem.java,Section lastDataSection = file.getLastDataSection();,if (file != null ) Section lastDataSection = file.getLastDataSection();
HeaderItem.java,int dataOff = firstDataSection.getFileOffset();,if (firstDataSection != null ) int dataOff = firstDataSection.getFileOffset();
HeaderItem.java,String magic = file.getDexOptions().getMagic();,if (file != null ) String magic = file.getDexOptions().getMagic();
IdItem.java,TypeIdsSection typeIds = file.getTypeIds();,if (file != null ) TypeIdsSection typeIds = file.getTypeIds();
MapItem.java,ItemType type = item.itemType();,if (item != null ) ItemType type = item.itemType();
MapItem.java,int value = type.getMapValue();,if (type != null ) int value = type.getMapValue();
MapItem.java,offset = section.getFileOffset();,if (section != null ) offset = section.getFileOffset();
MemberIdItem.java,StringIdsSection stringIds = file.getStringIds();,if (file != null ) StringIdsSection stringIds = file.getStringIds();
MemberIdItem.java,TypeIdsSection typeIds = file.getTypeIds();,if (file != null ) TypeIdsSection typeIds = file.getTypeIds();
MemberIdItem.java,StringIdsSection stringIds = file.getStringIds();,if (file != null ) StringIdsSection stringIds = file.getStringIds();
MemberIdItem.java,CstNat nat = cst.getNat();,if (cst != null ) CstNat nat = cst.getNat();
MemberIdItem.java,int nameIdx = stringIds.indexOf(nat.getName());,if (stringIds != null ) int nameIdx = stringIds.indexOf(nat.getName());
MethodAnnotationStruct.java,MethodIdsSection methodIds = file.getMethodIds();,if (file != null ) MethodIdsSection methodIds = file.getMethodIds();
MethodAnnotationStruct.java,MixedItemSection wordData = file.getWordData();,if (file != null ) MixedItemSection wordData = file.getWordData();
MethodAnnotationStruct.java,int annotationsOff = annotations.getAbsoluteOffset();,if (annotations != null ) int annotationsOff = annotations.getAbsoluteOffset();
MethodIdItem.java,ProtoIdsSection protoIds = file.getProtoIds();,if (file != null ) ProtoIdsSection protoIds = file.getProtoIds();
MethodIdItem.java,ProtoIdsSection protoIds = file.getProtoIds();,if (file != null ) ProtoIdsSection protoIds = file.getProtoIds();
MethodIdsSection.java,int sz = methodIds.size();,if (methodIds != null ) int sz = methodIds.size();
MixedItemSection.java,String label = item.toHuman();,if (item != null ) String label = item.toHuman();
MixedItemSection.java,String label = entry.getKey();,if (entry != null ) String label = entry.getKey();
MixedItemSection.java,OffsettedItem item = entry.getValue();,if (entry != null ) OffsettedItem item = entry.getValue();
MixedItemSection.java,int sz = items.size();,if (items != null ) int sz = items.size();
MixedItemSection.java,int sz = items.size();,if (items != null ) int sz = items.size();
MixedItemSection.java,outAt = placedAt + one.writeSize();,if (one != null ) outAt = placedAt + one.writeSize();
MixedItemSection.java,boolean annotates = out.annotates();,if (out != null ) boolean annotates = out.annotates();
MixedItemSection.java,at += one.writeSize();,if (one != null ) at += one.writeSize();
OffsettedItem.java,ItemType otherType = otherItem.itemType();,if (otherItem != null ) ItemType otherType = otherItem.itemType();
OffsettedItem.java,ItemType otherType = other.itemType();,if (other != null ) ItemType otherType = other.itemType();
ParameterAnnotationStruct.java,int size = annotationsList.size();,if (annotationsList != null ) int size = annotationsList.size();
ParameterAnnotationStruct.java,MethodIdsSection methodIds = file.getMethodIds();,if (file != null ) MethodIdsSection methodIds = file.getMethodIds();
ParameterAnnotationStruct.java,MixedItemSection wordData = file.getWordData();,if (file != null ) MixedItemSection wordData = file.getWordData();
ParameterAnnotationStruct.java,int annotationsOff = annotationsItem.getAbsoluteOffset();,if (annotationsItem != null ) int annotationsOff = annotationsItem.getAbsoluteOffset();
ProtoIdItem.java,StdTypeList parameters = prototype.getParameterTypes();,if (prototype != null ) StdTypeList parameters = prototype.getParameterTypes();
ProtoIdItem.java,StdTypeList parameters = prototype.getParameterTypes();,if (prototype != null ) StdTypeList parameters = prototype.getParameterTypes();
ProtoIdItem.java,int size = parameters.size();,if (parameters != null ) int size = parameters.size();
ProtoIdItem.java,StringIdsSection stringIds = file.getStringIds();,if (file != null ) StringIdsSection stringIds = file.getStringIds();
ProtoIdItem.java,TypeIdsSection typeIds = file.getTypeIds();,if (file != null ) TypeIdsSection typeIds = file.getTypeIds();
ProtoIdItem.java,MixedItemSection typeLists = file.getTypeLists();,if (file != null ) MixedItemSection typeLists = file.getTypeLists();
ProtoIdItem.java,StdTypeList params = prototype.getParameterTypes();,if (prototype != null ) StdTypeList params = prototype.getParameterTypes();
ProtoIdItem.java,int size = params.size();,if (params != null ) int size = params.size();
ProtoIdsSection.java,int sz = protoIds.size();,if (protoIds != null ) int sz = protoIds.size();
Section.java,int cursor = out.getCursor();,if (out != null ) int cursor = out.getCursor();
Statistics.java,String typeName = item.typeName();,if (item != null ) String typeName = item.typeName();
Statistics.java,int size = item.writeSize();,if (item != null ) int size = item.writeSize();
Statistics.java,int size = item.writeSize();,if (item != null ) int size = item.writeSize();
StringDataItem.java,ByteArray bytes = value.getBytes();,if (value != null ) ByteArray bytes = value.getBytes();
StringIdItem.java,MixedItemSection stringData = file.getStringData();,if (file != null ) MixedItemSection stringData = file.getStringData();
StringIdItem.java,int dataOff = data.getAbsoluteOffset();,if (data != null ) int dataOff = data.getAbsoluteOffset();
StringIdsSection.java,int sz = strings.size();,if (strings != null ) int sz = strings.size();
StringIdsSection.java,CstString value = string.getValue();,if (string != null ) CstString value = string.getValue();
TypeIdItem.java,CstString descriptor = type.getDescriptor();,if (type != null ) CstString descriptor = type.getDescriptor();
TypeIdsSection.java,int sz = typeIds.size();,if (typeIds != null ) int sz = typeIds.size();
TypeIdsSection.java,Type typePerSe = type.getClassType();,if (type != null ) Type typePerSe = type.getClassType();
TypeListItem.java,TypeIdsSection typeIds = file.getTypeIds();,if (file != null ) TypeIdsSection typeIds = file.getTypeIds();
TypeListItem.java,int sz = list.size();,if (list != null ) int sz = list.size();
TypeListItem.java,TypeIdsSection typeIds = file.getTypeIds();,if (file != null ) TypeIdsSection typeIds = file.getTypeIds();
TypeListItem.java,int sz = list.size();,if (list != null ) int sz = list.size();
UniformItemSection.java,int sz = items.size();,if (items != null ) int sz = items.size();
UniformItemSection.java,int relativeOffset = ii.getIndex() * ii.writeSize();,if (ii != null ) int relativeOffset = ii.getIndex() * ii.writeSize();
UniformListItem.java,int size = items.size();,if (items != null ) int size = items.size();
ValueEncoder.java,boolean annotates = topLevel && out.annotates();,if (out != null ) boolean annotates = topLevel && out.annotates();
ValueEncoder.java,int size = list.size();,if (list != null ) int size = list.size();
ValueEncoder.java,boolean annotates = topLevel && out.annotates();,if (out != null ) boolean annotates = topLevel && out.annotates();
ValueEncoder.java,StringIdsSection stringIds = file.getStringIds();,if (file != null ) StringIdsSection stringIds = file.getStringIds();
ValueEncoder.java,TypeIdsSection typeIds = file.getTypeIds();,if (file != null ) TypeIdsSection typeIds = file.getTypeIds();
ValueEncoder.java,CstType type = annotation.getType();,if (annotation != null ) CstType type = annotation.getType();
ValueEncoder.java,Collection<NameValuePair> pairs = annotation.getNameValuePairs();,if (annotation != null ) Collection<NameValuePair> pairs = annotation.getNameValuePairs();
ValueEncoder.java,int size = pairs.size();,if (pairs != null ) int size = pairs.size();
ValueEncoder.java,CstString name = pair.getName();,if (pair != null ) CstString name = pair.getName();
ValueEncoder.java,Constant value = pair.getValue();,if (pair != null ) Constant value = pair.getValue();
ValueEncoder.java,TypeIdsSection typeIds = file.getTypeIds();,if (file != null ) TypeIdsSection typeIds = file.getTypeIds();
ValueEncoder.java,StringIdsSection stringIds = file.getStringIds();,if (file != null ) StringIdsSection stringIds = file.getStringIds();
ValueEncoder.java,int size = list.size();,if (list != null ) int size = list.size();
DexIndexPrinter.java,this.tableOfContents = dex.getTableOfContents();,if (dex != null ) this.tableOfContents = dex.getTableOfContents();
DexIndexPrinter.java,int size = in.readInt();,if (in != null ) int size = in.readInt();
DecodedInstruction.java,int opcodeUnit = in.read();,if (in != null ) int opcodeUnit = in.read();
InstructionCodec.java,int relativeTarget = insn.getTargetByte(out.cursor());,if (insn != null ) int relativeTarget = insn.getTargetByte(out.cursor());
InstructionCodec.java,int target = (short) in.read(); // sign-extend,if (sign-extend != null ) int target = (short) in.read(); // sign-extend
InstructionCodec.java,short relativeTarget = insn.getTargetUnit(out.cursor());,if (insn != null ) short relativeTarget = insn.getTargetUnit(out.cursor());
InstructionCodec.java,int index = in.read();,if (in != null ) int index = in.read();
InstructionCodec.java,int b = in.read();,if (in != null ) int b = in.read();
InstructionCodec.java,int target = (short) in.read(); // sign-extend,if (sign-extend != null ) int target = (short) in.read(); // sign-extend
InstructionCodec.java,short relativeTarget = insn.getTargetUnit(out.cursor());,if (insn != null ) short relativeTarget = insn.getTargetUnit(out.cursor());
InstructionCodec.java,int literal = (short) in.read(); // sign-extend,if (sign-extend != null ) int literal = (short) in.read(); // sign-extend
InstructionCodec.java,long literal = (short) in.read(); // sign-extend,if (sign-extend != null ) long literal = (short) in.read(); // sign-extend
InstructionCodec.java,int opcode = insn.getOpcode();,if (insn != null ) int opcode = insn.getOpcode();
InstructionCodec.java,int index = in.read();,if (in != null ) int index = in.read();
InstructionCodec.java,int bc = in.read();,if (in != null ) int bc = in.read();
InstructionCodec.java,int bc = in.read();,if (in != null ) int bc = in.read();
InstructionCodec.java,int target = (short) in.read(); // sign-extend,if (sign-extend != null ) int target = (short) in.read(); // sign-extend
InstructionCodec.java,short relativeTarget = insn.getTargetUnit(out.cursor());,if (insn != null ) short relativeTarget = insn.getTargetUnit(out.cursor());
InstructionCodec.java,int literal = (short) in.read(); // sign-extend,if (sign-extend != null ) int literal = (short) in.read(); // sign-extend
InstructionCodec.java,int index = in.read();,if (in != null ) int index = in.read();
InstructionCodec.java,int index = in.read();,if (in != null ) int index = in.read();
InstructionCodec.java,int target = in.readInt();,if (in != null ) int target = in.readInt();
InstructionCodec.java,int relativeTarget = insn.getTarget(out.cursor());,if (insn != null ) int relativeTarget = insn.getTarget(out.cursor());
InstructionCodec.java,int a = in.read();,if (in != null ) int a = in.read();
InstructionCodec.java,int b = in.read();,if (in != null ) int b = in.read();
InstructionCodec.java,int literal = in.readInt();,if (in != null ) int literal = in.readInt();
InstructionCodec.java,int literal = insn.getLiteralInt();,if (insn != null ) int literal = insn.getLiteralInt();
InstructionCodec.java,int target = baseAddress + in.readInt();,if (in != null ) int target = baseAddress + in.readInt();
InstructionCodec.java,int relativeTarget = insn.getTarget(out.cursor());,if (insn != null ) int relativeTarget = insn.getTarget(out.cursor());
InstructionCodec.java,int index = in.readInt();,if (in != null ) int index = in.readInt();
InstructionCodec.java,int index = insn.getIndex();,if (insn != null ) int index = insn.getIndex();
InstructionCodec.java,long literal = in.readLong();,if (in != null ) long literal = in.readLong();
InstructionCodec.java,long literal = insn.getLiteral();,if (insn != null ) long literal = insn.getLiteral();
InstructionCodec.java,int size = in.read();,if (in != null ) int size = in.read();
InstructionCodec.java,int firstKey = in.readInt();,if (in != null ) int firstKey = in.readInt();
InstructionCodec.java,targets[i] = baseAddress + in.readInt();,if (in != null ) targets[i] = baseAddress + in.readInt();
InstructionCodec.java,int[] targets = payload.getTargets();,if (payload != null ) int[] targets = payload.getTargets();
InstructionCodec.java,int baseAddress = out.baseAddressForCursor();,if (out != null ) int baseAddress = out.baseAddressForCursor();
InstructionCodec.java,int size = in.read();,if (in != null ) int size = in.read();
InstructionCodec.java,keys[i] = in.readInt();,if (in != null ) keys[i] = in.readInt();
InstructionCodec.java,targets[i] = baseAddress + in.readInt();,if (in != null ) targets[i] = baseAddress + in.readInt();
InstructionCodec.java,int[] keys = payload.getKeys();,if (payload != null ) int[] keys = payload.getKeys();
InstructionCodec.java,int[] targets = payload.getTargets();,if (payload != null ) int[] targets = payload.getTargets();
InstructionCodec.java,int baseAddress = out.baseAddressForCursor();,if (out != null ) int baseAddress = out.baseAddressForCursor();
InstructionCodec.java,int elementWidth = in.read();,if (in != null ) int elementWidth = in.read();
InstructionCodec.java,int size = in.readInt();,if (in != null ) int size = in.readInt();
InstructionCodec.java,value = in.read();,if (in != null ) value = in.read();
InstructionCodec.java,array[i] = (short) in.read();,if (in != null ) array[i] = (short) in.read();
InstructionCodec.java,array[i] = in.readInt();,if (in != null ) array[i] = in.readInt();
InstructionCodec.java,array[i] = in.readLong();,if (in != null ) array[i] = in.readLong();
InstructionCodec.java,short elementWidth = payload.getElementWidthUnit();,if (payload != null ) short elementWidth = payload.getElementWidthUnit();
InstructionCodec.java,Object data = payload.getData();,if (payload != null ) Object data = payload.getData();
InstructionCodec.java,int index = in.read();,if (in != null ) int index = in.read();
InstructionCodec.java,int abcd = in.read();,if (in != null ) int abcd = in.read();
InstructionCodec.java,int index = in.read();,if (in != null ) int index = in.read();
InstructionCodec.java,int a = in.read();,if (in != null ) int a = in.read();
DexMerger.java,dexOut = new Dex(writerSizes.size());,if (Dex(writerSizes != null ) dexOut = new Dex(writerSizes.size());
DexMerger.java,contentsOut = dexOut.getTableOfContents();,if (dexOut != null ) contentsOut = dexOut.getTableOfContents();
DexMerger.java,contentsOut.dataOff = dexOut.getNextSectionStart();,if (dexOut != null ) contentsOut.dataOff = dexOut.getNextSectionStart();
DexMerger.java,contentsOut.mapList.off = dexOut.getNextSectionStart();,if (dexOut != null ) contentsOut.mapList.off = dexOut.getNextSectionStart();
DexMerger.java,contentsOut.typeLists.off = dexOut.getNextSectionStart();,if (dexOut != null ) contentsOut.typeLists.off = dexOut.getNextSectionStart();
DexMerger.java,contentsOut.annotationSetRefLists.off = dexOut.getNextSectionStart();,if (dexOut != null ) contentsOut.annotationSetRefLists.off = dexOut.getNextSectionStart();
DexMerger.java,contentsOut.annotationSets.off = dexOut.getNextSectionStart();,if (dexOut != null ) contentsOut.annotationSets.off = dexOut.getNextSectionStart();
DexMerger.java,contentsOut.classDatas.off = dexOut.getNextSectionStart();,if (dexOut != null ) contentsOut.classDatas.off = dexOut.getNextSectionStart();
DexMerger.java,contentsOut.codes.off = dexOut.getNextSectionStart();,if (dexOut != null ) contentsOut.codes.off = dexOut.getNextSectionStart();
DexMerger.java,contentsOut.stringDatas.off = dexOut.getNextSectionStart();,if (dexOut != null ) contentsOut.stringDatas.off = dexOut.getNextSectionStart();
DexMerger.java,contentsOut.debugInfos.off = dexOut.getNextSectionStart();,if (dexOut != null ) contentsOut.debugInfos.off = dexOut.getNextSectionStart();
DexMerger.java,contentsOut.annotations.off = dexOut.getNextSectionStart();,if (dexOut != null ) contentsOut.annotations.off = dexOut.getNextSectionStart();
DexMerger.java,contentsOut.encodedArrays.off = dexOut.getNextSectionStart();,if (dexOut != null ) contentsOut.encodedArrays.off = dexOut.getNextSectionStart();
DexMerger.java,contentsOut.annotationsDirectories.off = dexOut.getNextSectionStart();,if (dexOut != null ) contentsOut.annotationsDirectories.off = dexOut.getNextSectionStart();
DexMerger.java,contentsOut.fileSize = dexOut.getLength();,if (dexOut != null ) contentsOut.fileSize = dexOut.getLength();
DexMerger.java,long start = System.nanoTime();,if (System != null ) long start = System.nanoTime();
DexMerger.java,int wastedByteCount = writerSizes.size() - compactedSizes.size();,if (compactedSizes != null ) int wastedByteCount = writerSizes.size() - compactedSizes.size();
DexMerger.java,result = compacter.mergeDexes();,if (compacter != null ) result = compacter.mergeDexes();
DexMerger.java,this.tocSection = getSection(dex.getTableOfContents());,if (getSection(dex != null ) this.tocSection = getSection(dex.getTableOfContents());
DexMerger.java,int offset = dbSection.getPosition();,if (dbSection != null ) int offset = dbSection.getPosition();
DexMerger.java,UnsortedValue uValue = sorted.peek();,if (sorted != null ) UnsortedValue uValue = sorted.peek();
DexMerger.java,uValue = sorted.next();,if (sorted != null ) uValue = sorted.next();
DexMerger.java,TableOfContents.Section section = getSection(source.getTableOfContents());,if (getSection(source != null ) TableOfContents.Section section = getSection(source.getTableOfContents());
DexMerger.java,int offset = in.getPosition();,if (in != null ) int offset = in.getPosition();
DexMerger.java,int stringIndex = in.readInt();,if (in != null ) int stringIndex = in.readInt();
DexMerger.java,contentsOut.classDefs.off = idsDefsOut.getPosition();,if (idsDefsOut != null ) contentsOut.classDefs.off = idsDefsOut.getPosition();
DexMerger.java,Dex in = type.getDex();,if (type != null ) Dex in = type.getDex();
DexMerger.java,int t = sortableType.getTypeIndex();,if (sortableType != null ) int t = sortableType.getTypeIndex();
DexMerger.java,int sourceFileIndex = indexMap.adjustString(classDef.getSourceFileIndex());,if (indexMap != null ) int sourceFileIndex = indexMap.adjustString(classDef.getSourceFileIndex());
DexMerger.java,int annotationsOff = classDef.getAnnotationsOffset();,if (classDef != null ) int annotationsOff = classDef.getAnnotationsOffset();
DexMerger.java,int classDataOff = classDef.getClassDataOffset();,if (classDef != null ) int classDataOff = classDef.getClassDataOffset();
DexMerger.java,int staticValuesOff = classDef.getStaticValuesOffset();,if (classDef != null ) int staticValuesOff = classDef.getStaticValuesOffset();
DexMerger.java,int classAnnotationsOffset = indexMap.adjustAnnotationSet(directoryIn.readInt());,if (indexMap != null ) int classAnnotationsOffset = indexMap.adjustAnnotationSet(directoryIn.readInt());
DexMerger.java,int fieldsSize = directoryIn.readInt();,if (directoryIn != null ) int fieldsSize = directoryIn.readInt();
DexMerger.java,int methodsSize = directoryIn.readInt();,if (directoryIn != null ) int methodsSize = directoryIn.readInt();
DexMerger.java,int parameterListSize = directoryIn.readInt();,if (directoryIn != null ) int parameterListSize = directoryIn.readInt();
DexMerger.java,int size = setIn.readInt();,if (setIn != null ) int size = setIn.readInt();
DexMerger.java,int parameterCount = refListIn.readInt();,if (refListIn != null ) int parameterCount = refListIn.readInt();
DexMerger.java,int outFieldIndex = indexMap.adjustField(field.getFieldIndex());,if (indexMap != null ) int outFieldIndex = indexMap.adjustField(field.getFieldIndex());
DexMerger.java,int outMethodIndex = indexMap.adjustMethod(method.getMethodIndex());,if (indexMap != null ) int outMethodIndex = indexMap.adjustMethod(method.getMethodIndex());
DexMerger.java,int debugInfoOffset = code.getDebugInfoOffset();,if (code != null ) int debugInfoOffset = code.getDebugInfoOffset();
DexMerger.java,short[] instructions = code.getInstructions();,if (code != null ) short[] instructions = code.getInstructions();
DexMerger.java,Dex.Section triesSection = dexOut.open(codeOut.getPosition());,if (dexOut != null ) Dex.Section triesSection = dexOut.open(codeOut.getPosition());
DexMerger.java,int baseOffset = codeOut.getPosition();,if (codeOut != null ) int baseOffset = codeOut.getPosition();
DexMerger.java,int opcode = in.readByte();,if (in != null ) int opcode = in.readByte();
DexMerger.java,int catchAllAddress = catchHandler.getCatchAllAddress();,if (catchHandler != null ) int catchAllAddress = catchHandler.getCatchAllAddress();
DexMerger.java,int[] typeIndexes = catchHandler.getTypeIndexes();,if (catchHandler != null ) int[] typeIndexes = catchHandler.getTypeIndexes();
DexMerger.java,int[] addresses = catchHandler.getAddresses();,if (catchHandler != null ) int[] addresses = catchHandler.getAddresses();
DexMerger.java,header = dexMerger.headerOut.used();,if (dexMerger != null ) header = dexMerger.headerOut.used();
DexMerger.java,idsDefs = dexMerger.idsDefsOut.used();,if (dexMerger != null ) idsDefs = dexMerger.idsDefsOut.used();
DexMerger.java,mapList = dexMerger.mapListOut.used();,if (dexMerger != null ) mapList = dexMerger.mapListOut.used();
DexMerger.java,typeList = dexMerger.typeListOut.used();,if (dexMerger != null ) typeList = dexMerger.typeListOut.used();
DexMerger.java,classData = dexMerger.classDataOut.used();,if (dexMerger != null ) classData = dexMerger.classDataOut.used();
DexMerger.java,code = dexMerger.codeOut.used();,if (dexMerger != null ) code = dexMerger.codeOut.used();
DexMerger.java,stringData = dexMerger.stringDataOut.used();,if (dexMerger != null ) stringData = dexMerger.stringDataOut.used();
DexMerger.java,debugInfo = dexMerger.debugInfoOut.used();,if (dexMerger != null ) debugInfo = dexMerger.debugInfoOut.used();
DexMerger.java,encodedArray = dexMerger.encodedArrayOut.used();,if (dexMerger != null ) encodedArray = dexMerger.encodedArrayOut.used();
DexMerger.java,annotationsDirectory = dexMerger.annotationsDirectoryOut.used();,if (dexMerger != null ) annotationsDirectory = dexMerger.annotationsDirectoryOut.used();
DexMerger.java,annotationsSet = dexMerger.annotationSetOut.used();,if (dexMerger != null ) annotationsSet = dexMerger.annotationSetOut.used();
DexMerger.java,annotationsSetRefList = dexMerger.annotationSetRefListOut.used();,if (dexMerger != null ) annotationsSetRefList = dexMerger.annotationSetRefListOut.used();
DexMerger.java,annotation = dexMerger.annotationOut.used();,if (dexMerger != null ) annotation = dexMerger.annotationOut.used();
IndexMap.java,short[] types = typeList.getTypes().clone();,if (typeList != null ) short[] types = typeList.getTypes().clone();
IndexMap.java,boolean value = reader.readBoolean();,if (reader != null ) boolean value = reader.readBoolean();
IndexMap.java,int fieldCount = reader.readAnnotation();,if (reader != null ) int fieldCount = reader.readAnnotation();
IndexMap.java,int size = reader.readArray();,if (reader != null ) int size = reader.readArray();
InstructionTransformer.java,int stringId = one.getIndex();,if (one != null ) int stringId = one.getIndex();
InstructionTransformer.java,int fieldId = one.getIndex();,if (one != null ) int fieldId = one.getIndex();
InstructionTransformer.java,int typeId = one.getIndex();,if (one != null ) int typeId = one.getIndex();
InstructionTransformer.java,int methodId = one.getIndex();,if (one != null ) int methodId = one.getIndex();
Annotation.java,int hash = type.hashCode();,if (type != null ) int hash = type.hashCode();
Annotation.java,Iterator<NameValuePair> thisIter = elements.values().iterator();,if (elements != null ) Iterator<NameValuePair> thisIter = elements.values().iterator();
Annotation.java,Iterator<NameValuePair> otherIter = other.elements.values().iterator();,if (other != null ) Iterator<NameValuePair> otherIter = other.elements.values().iterator();
Annotation.java,NameValuePair thisOne = thisIter.next();,if (thisIter != null ) NameValuePair thisOne = thisIter.next();
Annotation.java,NameValuePair otherOne = otherIter.next();,if (otherIter != null ) NameValuePair otherOne = otherIter.next();
Annotation.java,CstString name = pair.getName();,if (pair != null ) CstString name = pair.getName();
Annotations.java,Iterator<Annotation> thisIter = annotations.values().iterator();,if (annotations != null ) Iterator<Annotation> thisIter = annotations.values().iterator();
Annotations.java,Iterator<Annotation> otherIter = other.annotations.values().iterator();,if (other != null ) Iterator<Annotation> otherIter = other.annotations.values().iterator();
Annotations.java,Annotation thisOne = thisIter.next();,if (thisIter != null ) Annotation thisOne = thisIter.next();
Annotations.java,Annotation otherOne = otherIter.next();,if (otherIter != null ) Annotation otherOne = otherIter.next();
Annotations.java,CstType type = annotation.getType();,if (annotation != null ) CstType type = annotation.getType();
BasicBlock.java,int sz = insns.size();,if (insns != null ) int sz = insns.size();
BasicBlock.java,Rop one = insns.get(i).getOpcode();,if (insns != null ) Rop one = insns.get(i).getOpcode();
BasicBlock.java,Insn lastInsn = insns.getLast();,if (insns != null ) Insn lastInsn = insns.getLast();
BasicBlock.java,Insn lastInsn = insns.getLast();,if (insns != null ) Insn lastInsn = insns.getLast();
BasicBlockList.java,regCount = visitor.getRegCount();,if (visitor != null ) regCount = visitor.getRegCount();
BasicBlockList.java,result += one.getInsns().size();,if (one != null ) result += one.getInsns().size();
BasicBlockList.java,InsnList insns = one.getInsns();,if (one != null ) InsnList insns = one.getInsns();
BasicBlockList.java,int insnsSz = insns.size();,if (insns != null ) int insnsSz = insns.size();
BasicBlockList.java,InsnList insns = one.getInsns();,if (one != null ) InsnList insns = one.getInsns();
BasicBlockList.java,int primarySuccessor = block.getPrimarySuccessor();,if (block != null ) int primarySuccessor = block.getPrimarySuccessor();
BasicBlockList.java,IntList successors = block.getSuccessors();,if (block != null ) IntList successors = block.getSuccessors();
BasicBlockList.java,int succSize = successors.size();,if (successors != null ) int succSize = successors.size();
BasicBlockList.java,RegisterSpec result = insn.getResult();,if (insn != null ) RegisterSpec result = insn.getResult();
BasicBlockList.java,RegisterSpecList sources = insn.getSources();,if (insn != null ) RegisterSpecList sources = insn.getSources();
BasicBlockList.java,int sz = sources.size();,if (sources != null ) int sz = sources.size();
BasicBlockList.java,int reg = spec.getNextReg();,if (spec != null ) int reg = spec.getNextReg();
DexTranslationAdvice.java,CstInteger cst = (CstInteger) sourceA.getTypeBearer();,if (sourceA != null ) CstInteger cst = (CstInteger) sourceA.getTypeBearer();
DexTranslationAdvice.java,CstInteger cst = (CstInteger) sourceB.getTypeBearer();,if (sourceB != null ) CstInteger cst = (CstInteger) sourceB.getTypeBearer();
DexTranslationAdvice.java,int sz = sources.size();,if (sources != null ) int sz = sources.size();
DexTranslationAdvice.java,total += sources.get(i).getCategory();,if (sources != null ) total += sources.get(i).getCategory();
Insn.java,LocalItem localItem = assignment.getLocalItem();,if (assignment != null ) LocalItem localItem = assignment.getLocalItem();
Insn.java,int sz = sources.size();,if (sources != null ) int sz = sources.size();
LocalVariableExtractor.java,BasicBlockList blocks = method.getBlocks();,if (method != null ) BasicBlockList blocks = method.getBlocks();
LocalVariableExtractor.java,int maxLabel = blocks.getMaxLabel();,if (blocks != null ) int maxLabel = blocks.getMaxLabel();
LocalVariableExtractor.java,InsnList insns = block.getInsns();,if (block != null ) InsnList insns = block.getInsns();
LocalVariableExtractor.java,int insnSz = insns.size();,if (insns != null ) int insnSz = insns.size();
LocalVariableExtractor.java,primaryState = primaryState.mutableCopy();,if (primaryState != null ) primaryState = primaryState.mutableCopy();
LocalVariableExtractor.java,result = insn.getLocalAssignment();,if (insn != null ) result = insn.getLocalAssignment();
LocalVariableExtractor.java,result = insn.getResult();,if (insn != null ) result = insn.getResult();
LocalVariableExtractor.java,result = result.withSimpleType();,if (result != null ) result = result.withSimpleType();
LocalVariableExtractor.java,IntList successors = block.getSuccessors();,if (block != null ) IntList successors = block.getSuccessors();
LocalVariableExtractor.java,int succSz = successors.size();,if (successors != null ) int succSz = successors.size();
LocalVariableExtractor.java,int primarySuccessor = block.getPrimarySuccessor();,if (block != null ) int primarySuccessor = block.getPrimarySuccessor();
LocalVariableInfo.java,BasicBlockList blocks = method.getBlocks();,if (method != null ) BasicBlockList blocks = method.getBlocks();
LocalVariableInfo.java,int maxLabel = blocks.getMaxLabel();,if (blocks != null ) int maxLabel = blocks.getMaxLabel();
LocalVariableInfo.java,this.regCount = blocks.getRegCount();,if (blocks != null ) this.regCount = blocks.getRegCount();
LocalVariableInfo.java,RegisterSpecSet newStart = start.mutableCopy();,if (start != null ) RegisterSpecSet newStart = start.mutableCopy();
LocalVariableInfo.java,newStart = specs.mutableCopy();,if (specs != null ) newStart = specs.mutableCopy();
PlainInsn.java,int szSources = sources.size();,if (sources != null ) int szSources = sources.size();
PlainInsn.java,RegisterSpecList newSources = sources.withoutFirst();,if (sources != null ) RegisterSpecList newSources = sources.withoutFirst();
PlainInsn.java,RegisterSpecList newSources = sources.withoutLast();,if (sources != null ) RegisterSpecList newSources = sources.withoutLast();
PlainInsn.java,int opcode = getOpcode().getOpcode();,if (getOpcode() != null ) int opcode = getOpcode().getOpcode();
RegisterSpec.java,found = theInterningItem.toRegisterSpec();,if (theInterningItem != null ) found = theInterningItem.toRegisterSpec();
RegisterSpec.java,Type otherType = other.getType();,if (other != null ) Type otherType = other.getType();
RegisterSpec.java,newType = orig.getType();,if (orig != null ) newType = orig.getType();
RegisterSpec.java,newType = newType.getInitializedType();,if (newType != null ) newType = newType.getInitializedType();
RegisterSpec.java,Type justType = type.getType();,if (type != null ) Type justType = type.getType();
RegisterSpecList.java,result += getType(i).getCategory();,if (getType(i) != null ) result += getType(i).getCategory();
RegisterSpecList.java,int min = spec.getNextReg();,if (spec != null ) int min = spec.getNextReg();
RegisterSpecList.java,int newSize = size() - exclusionSet.cardinality();,if (exclusionSet != null ) int newSize = size() - exclusionSet.cardinality();
RegisterSpecList.java,base += one.getCategory();,if (one != null ) base += one.getCategory();
RegisterSpecSet.java,int reg = spec.getReg();,if (spec != null ) int reg = spec.getReg();
RegisterSpecSet.java,int max = set.getMaxSize();,if (set != null ) int max = set.getMaxSize();
Rop.java,int sz = sources.size();,if (sources != null ) int sz = sources.size();
Rop.java,sz = exceptions.size();,if (exceptions != null ) sz = exceptions.size();
RopMethod.java,int maxLabel = blocks.getMaxLabel();,if (blocks != null ) int maxLabel = blocks.getMaxLabel();
RopMethod.java,int sz = blocks.size();,if (blocks != null ) int sz = blocks.size();
RopMethod.java,int label = one.getLabel();,if (one != null ) int label = one.getLabel();
RopMethod.java,IntList successors = one.getSuccessors();,if (one != null ) IntList successors = one.getSuccessors();
RopMethod.java,int ssz = successors.size();,if (successors != null ) int ssz = successors.size();
Rops.java,componentType = dest.getType();,if (dest != null ) componentType = dest.getType();
Rops.java,componentType = source.getComponentType();,if (source != null ) componentType = source.getComponentType();
Rops.java,componentType = source.getComponentType();,if (source != null ) componentType = source.getComponentType();
Rops.java,Prototype meth = cstMeth.getPrototype();,if (cstMeth != null ) Prototype meth = cstMeth.getPrototype();
Rops.java,CstType definer = cstMeth.getDefiningClass();,if (cstMeth != null ) CstType definer = cstMeth.getDefiningClass();
Rops.java,meth = meth.withFirstParameter(definer.getClassType());,if (meth != null ) meth = meth.withFirstParameter(definer.getClassType());
Rops.java,Prototype meth = cstMeth.getPrototype();,if (cstMeth != null ) Prototype meth = cstMeth.getPrototype();
Rops.java,CstType definer = cstMeth.getDefiningClass();,if (cstMeth != null ) CstType definer = cstMeth.getDefiningClass();
Rops.java,meth = meth.withFirstParameter(definer.getClassType());,if (meth != null ) meth = meth.withFirstParameter(definer.getClassType());
Rops.java,Prototype meth = cstMeth.getPrototype();,if (cstMeth != null ) Prototype meth = cstMeth.getPrototype();
Rops.java,CstType definer = cstMeth.getDefiningClass();,if (cstMeth != null ) CstType definer = cstMeth.getDefiningClass();
Rops.java,meth = meth.withFirstParameter(definer.getClassType());,if (meth != null ) meth = meth.withFirstParameter(definer.getClassType());
Rops.java,Prototype meth = cstMeth.getPrototype();,if (cstMeth != null ) Prototype meth = cstMeth.getPrototype();
Rops.java,CstType definer = cstMeth.getDefiningClass();,if (cstMeth != null ) CstType definer = cstMeth.getDefiningClass();
Rops.java,meth = meth.withFirstParameter(definer.getClassType());,if (meth != null ) meth = meth.withFirstParameter(definer.getClassType());
Rops.java,int dbt = dest.getBasicFrameType();,if (dest != null ) int dbt = dest.getBasicFrameType();
Rops.java,Type type = arrayType.getType();,if (arrayType != null ) Type type = arrayType.getType();
Rops.java,Type elementType = type.getComponentType();,if (type != null ) Type elementType = type.getComponentType();
Rops.java,Type type = arrayType.getType();,if (arrayType != null ) Type type = arrayType.getType();
Rops.java,Type elementType = type.getComponentType();,if (type != null ) Type elementType = type.getComponentType();
ThrowingCstInsn.java,String constantString = cst.toHuman();,if (cst != null ) String constantString = cst.toHuman();
ThrowingInsn.java,int sz = catches.size();,if (catches != null ) int sz = catches.size();
Constant.java,Class otherClazz = other.getClass();,if (other != null ) Class otherClazz = other.getClass();
CstArray.java,int otherSize = other.size();,if (other != null ) int otherSize = other.size();
CstBaseMethodRef.java,Type thisType = getDefiningClass().getClassType();,if (getDefiningClass() != null ) Type thisType = getDefiningClass().getClassType();
CstFieldRef.java,CstString thisDescriptor = getNat().getDescriptor();,if (getNat() != null ) CstString thisDescriptor = getNat().getDescriptor();
CstFieldRef.java,CstString otherDescriptor = otherField.getNat().getDescriptor();,if (otherField != null ) CstString otherDescriptor = otherField.getNat().getDescriptor();
CstMemberRef.java,CstString thisName = nat.getName();,if (nat != null ) CstString thisName = nat.getName();
CstMemberRef.java,CstString otherName = otherMember.nat.getName();,if (otherMember != null ) CstString otherName = otherMember.nat.getName();
CstString.java,int len = string.length();,if (string != null ) int len = string.length();
CstString.java,int length = bytes.size();,if (bytes != null ) int length = bytes.size();
CstString.java,this.string = string.intern();,if (string != null ) this.string = string.intern();
CstString.java,int len = string.length();,if (string != null ) int len = string.length();
CstString.java,int length = string.length();,if (string != null ) int length = string.length();
CstType.java,CstType cst = interns.get(type.getDescriptor());,if (interns != null ) CstType cst = interns.get(type.getDescriptor());
CstType.java,String thisDescriptor = type.getDescriptor();,if (type != null ) String thisDescriptor = type.getDescriptor();
CstType.java,descriptor = new CstString(type.getDescriptor());,if (CstString(type != null ) descriptor = new CstString(type.getDescriptor());
CstType.java,String descriptor = getDescriptor().getString();,if (getDescriptor() != null ) String descriptor = getDescriptor().getString();
Prototype.java,int length = descriptor.length();,if (descriptor != null ) int length = descriptor.length();
Prototype.java,int thisSize = parameterTypes.size();,if (parameterTypes != null ) int thisSize = parameterTypes.size();
Prototype.java,int otherSize = other.parameterTypes.size();,if (other != null ) int otherSize = other.parameterTypes.size();
Prototype.java,int sz = parameterTypes.size();,if (parameterTypes != null ) int sz = parameterTypes.size();
Prototype.java,String descriptor = desc.getDescriptor();,if (desc != null ) String descriptor = desc.getDescriptor();
StdTypeList.java,int size = list.size();,if (list != null ) int size = list.size();
StdTypeList.java,int size = list.size();,if (list != null ) int size = list.size();
StdTypeList.java,result += get(i).getCategory();,if (get(i) != null ) result += get(i).getCategory();
Type.java,int length = descriptor.length();,if (descriptor != null ) int length = descriptor.length();
Type.java,String descriptor = type.getDescriptor();,if (type != null ) String descriptor = type.getDescriptor();
BasicRegisterMapper.java,newReg = oldToNew.get(registerSpec.getReg());,if (oldToNew != null ) newReg = oldToNew.get(registerSpec.getReg());
BasicRegisterMapper.java,int sz = oldToNew.size();,if (oldToNew != null ) int sz = oldToNew.size();
ConstCollector.java,int regSz = ssaMeth.getRegCount();,if (ssaMeth != null ) int regSz = ssaMeth.getRegCount();
ConstCollector.java,SsaBasicBlock start = ssaMeth.getEntryBlock();,if (ssaMeth != null ) SsaBasicBlock start = ssaMeth.getEntryBlock();
ConstCollector.java,SsaBasicBlock entryBlock = ssaMeth.getEntryBlock();,if (ssaMeth != null ) SsaBasicBlock entryBlock = ssaMeth.getEntryBlock();
ConstCollector.java,int regSz = ssaMeth.getRegCount();,if (ssaMeth != null ) int regSz = ssaMeth.getRegCount();
ConstCollector.java,RegisterSpec result = insn.getResult();,if (insn != null ) RegisterSpec result = insn.getResult();
ConstCollector.java,TypeBearer typeBearer = result.getTypeBearer();,if (result != null ) TypeBearer typeBearer = result.getTypeBearer();
ConstCollector.java,RegisterSpec localAssignment = use.getLocalAssignment();,if (use != null ) RegisterSpec localAssignment = use.getLocalAssignment();
ConstCollector.java,LocalItem local = localAssignment.getLocalItem();,if (localAssignment != null ) LocalItem local = localAssignment.getLocalItem();
ConstCollector.java,ArrayList<SsaInsn> insns = use.getBlock().getInsns();,if (use != null ) ArrayList<SsaInsn> insns = use.getBlock().getInsns();
ConstCollector.java,final RegisterSpec origReg = insn.getResult();,if (insn != null ) final RegisterSpec origReg = insn.getResult();
ConstCollector.java,TypeBearer typeBearer = insn.getResult().getTypeBearer();,if (insn != null ) TypeBearer typeBearer = insn.getResult().getTypeBearer();
DeadCodeRemover.java,regCount = ssaMethod.getRegCount();,if (ssaMethod != null ) regCount = ssaMethod.getRegCount();
DeadCodeRemover.java,useList = ssaMeth.getUseListCopy();,if (ssaMeth != null ) useList = ssaMeth.getUseListCopy();
DeadCodeRemover.java,RegisterSpecList sources = insnS.getSources();,if (insnS != null ) RegisterSpecList sources = insnS.getSources();
DeadCodeRemover.java,int sz = sources.size();,if (sources != null ) int sz = sources.size();
DeadCodeRemover.java,RegisterSpecList sources = insn.getSources();,if (insn != null ) RegisterSpecList sources = insn.getSources();
DeadCodeRemover.java,int sourcesSize = sources.size();,if (sources != null ) int sourcesSize = sources.size();
DeadCodeRemover.java,RegisterSpec result = insn.getResult();,if (insn != null ) RegisterSpec result = insn.getResult();
DeadCodeRemover.java,RegisterSpec result = use.getResult();,if (use != null ) RegisterSpec result = use.getResult();
DeadCodeRemover.java,RegisterSpec result = insn.getResult();,if (insn != null ) RegisterSpec result = insn.getResult();
DomFront.java,nodes = meth.getBlocks();,if (meth != null ) nodes = meth.getBlocks();
DomFront.java,int szNodes = nodes.size();,if (nodes != null ) int szNodes = nodes.size();
DomFront.java,int szNodes = nodes.size();,if (nodes != null ) int szNodes = nodes.size();
DomFront.java,int szNodes = nodes.size();,if (nodes != null ) int szNodes = nodes.size();
DomFront.java,int szNodes = nodes.size();,if (nodes != null ) int szNodes = nodes.size();
DomFront.java,int szNodes = nodes.size();,if (nodes != null ) int szNodes = nodes.size();
DomFront.java,BitSet pred = nb.getPredecessors();,if (nb != null ) BitSet pred = nb.getPredecessors();
Dominators.java,this.blocks = meth.getBlocks();,if (meth != null ) this.blocks = meth.getBlocks();
Dominators.java,int wsize = worklist.size();,if (worklist != null ) int wsize = worklist.size();
EscapeAnalysis.java,this.regCount = ssaMeth.getRegCount();,if (ssaMeth != null ) this.regCount = ssaMeth.getRegCount();
EscapeAnalysis.java,int op = insn.getOpcode().getOpcode();,if (insn != null ) int op = insn.getOpcode().getOpcode();
EscapeAnalysis.java,RegisterSpec result = insn.getResult();,if (insn != null ) RegisterSpec result = insn.getResult();
EscapeAnalysis.java,RegisterSpec result = insn.getResult();,if (insn != null ) RegisterSpec result = insn.getResult();
EscapeAnalysis.java,int prevOpcode = prevSsaInsn.getOpcode().getOpcode();,if (prevSsaInsn != null ) int prevOpcode = prevSsaInsn.getOpcode().getOpcode();
EscapeAnalysis.java,List<SsaInsn> useList = ssaMeth.getUseListForRegister(def.getReg());,if (ssaMeth != null ) List<SsaInsn> useList = ssaMeth.getUseListForRegister(def.getReg());
EscapeAnalysis.java,Rop useOpcode = use.getOpcode();,if (use != null ) Rop useOpcode = use.getOpcode();
EscapeAnalysis.java,int setIndex = findSetIndex(use.getResult());,if (findSetIndex(use != null ) int setIndex = findSetIndex(use.getResult());
EscapeAnalysis.java,int useOpcode = use.getOpcode().getOpcode();,if (use != null ) int useOpcode = use.getOpcode().getOpcode();
EscapeAnalysis.java,RegisterSpecList sources = use.getSources();,if (use != null ) RegisterSpecList sources = use.getSources();
EscapeAnalysis.java,Type resultType = def.getResult().getType();,if (def != null ) Type resultType = def.getResult().getType();
EscapeAnalysis.java,Constant newZero = Zeroes.zeroFor(resultType.getComponentType());,if (Zeroes != null ) Constant newZero = Zeroes.zeroFor(resultType.getComponentType());
EscapeAnalysis.java,int length = newRegs.size();,if (newRegs != null ) int length = newRegs.size();
EscapeAnalysis.java,sources = use.getSources();,if (use != null ) sources = use.getSources();
EscapeAnalysis.java,index = indexReg.getIntBits();,if (indexReg != null ) index = indexReg.getIntBits();
EscapeAnalysis.java,sources = use.getSources();,if (use != null ) sources = use.getSources();
EscapeAnalysis.java,index = indexReg.getIntBits();,if (indexReg != null ) index = indexReg.getIntBits();
EscapeAnalysis.java,Insn ropUse = use.getOriginalRopInsn();,if (use != null ) Insn ropUse = use.getOriginalRopInsn();
EscapeAnalysis.java,ArrayList<Constant> constList = fill.getInitValues();,if (fill != null ) ArrayList<Constant> constList = fill.getInitValues();
EscapeAnalysis.java,final RegisterSpec result = insn.getResult();,if (insn != null ) final RegisterSpec result = insn.getResult();
EscapeAnalysis.java,SsaBasicBlock currBlock = insn.getBlock();,if (insn != null ) SsaBasicBlock currBlock = insn.getBlock();
EscapeAnalysis.java,Insn originalRopInsn = insn.getOriginalRopInsn();,if (insn != null ) Insn originalRopInsn = insn.getOriginalRopInsn();
EscapeAnalysis.java,newRop = Rops.opMoveResultPseudo(newResult.getType());,if (Rops != null ) newRop = Rops.opMoveResultPseudo(newResult.getType());
EscapeAnalysis.java,"NormalSsaInsn newInsn = new NormalSsaInsn(newRopInsn, insn.getBlock());","if (insn != null ) NormalSsaInsn newInsn = new NormalSsaInsn(newRopInsn, insn.getBlock());"
EscapeAnalysis.java,List<SsaInsn> insns = insn.getBlock().getInsns();,if (insn != null ) List<SsaInsn> insns = insn.getBlock().getInsns();
EscapeAnalysis.java,Insn origRopInsn = insn.getOriginalRopInsn();,if (insn != null ) Insn origRopInsn = insn.getOriginalRopInsn();
EscapeAnalysis.java,"NormalSsaInsn newInsn = new NormalSsaInsn(newRopInsn, insn.getBlock());","if (insn != null ) NormalSsaInsn newInsn = new NormalSsaInsn(newRopInsn, insn.getBlock());"
EscapeAnalysis.java,List<SsaInsn> insns = insn.getBlock().getInsns();,if (insn != null ) List<SsaInsn> insns = insn.getBlock().getInsns();
InterferenceRegisterMapper.java,int sz = oldSpecs.size();,if (oldSpecs != null ) int sz = oldSpecs.size();
InterferenceRegisterMapper.java,int r = oldToNew(oldSpec.getReg());,if (oldToNew(oldSpec != null ) int r = oldToNew(oldSpec.getReg());
LiteralOpUpgrader.java,TypeBearer tb = spec.getTypeBearer();,if (spec != null ) TypeBearer tb = spec.getTypeBearer();
LiteralOpUpgrader.java,final TranslationAdvice advice = optimizer.getAdvice();,if (optimizer != null ) final TranslationAdvice advice = optimizer.getAdvice();
LiteralOpUpgrader.java,Insn originalRopInsn = insn.getOriginalRopInsn();,if (insn != null ) Insn originalRopInsn = insn.getOriginalRopInsn();
LiteralOpUpgrader.java,Rop opcode = originalRopInsn.getOpcode();,if (originalRopInsn != null ) Rop opcode = originalRopInsn.getOpcode();
LiteralOpUpgrader.java,RegisterSpecList sources = insn.getSources();,if (insn != null ) RegisterSpecList sources = insn.getSources();
LiteralOpUpgrader.java,Insn originalRopInsn = insn.getOriginalRopInsn();,if (insn != null ) Insn originalRopInsn = insn.getOriginalRopInsn();
LiteralOpUpgrader.java,Rop opcode = originalRopInsn.getOpcode();,if (originalRopInsn != null ) Rop opcode = originalRopInsn.getOpcode();
LiteralOpUpgrader.java,RegisterSpec result = insn.getResult();,if (insn != null ) RegisterSpec result = insn.getResult();
LiteralOpUpgrader.java,TypeBearer type = insn.getResult().getTypeBearer();,if (insn != null ) TypeBearer type = insn.getResult().getTypeBearer();
LiteralOpUpgrader.java,Insn originalRopInsn = insn.getOriginalRopInsn();,if (insn != null ) Insn originalRopInsn = insn.getOriginalRopInsn();
LiteralOpUpgrader.java,"NormalSsaInsn newInsn = new NormalSsaInsn(newRopInsn, insn.getBlock());","if (insn != null ) NormalSsaInsn newInsn = new NormalSsaInsn(newRopInsn, insn.getBlock());"
LiteralOpUpgrader.java,List<SsaInsn> insns = insn.getBlock().getInsns();,if (insn != null ) List<SsaInsn> insns = insn.getBlock().getInsns();
LocalVariableExtractor.java,ArrayList<SsaBasicBlock> blocks = method.getBlocks();,if (method != null ) ArrayList<SsaBasicBlock> blocks = method.getBlocks();
LocalVariableExtractor.java,this.workSet = new BitSet(blocks.size());,if (BitSet(blocks != null ) this.workSet = new BitSet(blocks.size());
LocalVariableExtractor.java,List<SsaInsn> insns = block.getInsns();,if (block != null ) List<SsaInsn> insns = block.getInsns();
LocalVariableExtractor.java,int insnSz = insns.size();,if (insns != null ) int insnSz = insns.size();
LocalVariableExtractor.java,primaryState = primaryState.mutableCopy();,if (primaryState != null ) primaryState = primaryState.mutableCopy();
LocalVariableExtractor.java,result = insn.getLocalAssignment();,if (insn != null ) result = insn.getLocalAssignment();
LocalVariableExtractor.java,result = insn.getResult();,if (insn != null ) result = insn.getResult();
LocalVariableExtractor.java,result = result.withSimpleType();,if (result != null ) result = result.withSimpleType();
LocalVariableExtractor.java,IntList successors = block.getSuccessorList();,if (block != null ) IntList successors = block.getSuccessorList();
LocalVariableExtractor.java,int succSz = successors.size();,if (successors != null ) int succSz = successors.size();
LocalVariableExtractor.java,int primarySuccessor = block.getPrimarySuccessorIndex();,if (block != null ) int primarySuccessor = block.getPrimarySuccessorIndex();
LocalVariableInfo.java,List<SsaBasicBlock> blocks = method.getBlocks();,if (method != null ) List<SsaBasicBlock> blocks = method.getBlocks();
LocalVariableInfo.java,this.regCount = method.getRegCount();,if (method != null ) this.regCount = method.getRegCount();
LocalVariableInfo.java,RegisterSpecSet newStart = start.mutableCopy();,if (start != null ) RegisterSpecSet newStart = start.mutableCopy();
MoveParamCombiner.java,paramSpecs[param] = insn.getResult();,if (insn != null ) paramSpecs[param] = insn.getResult();
MoveParamCombiner.java,final RegisterSpec specB = insn.getResult();,if (insn != null ) final RegisterSpec specB = insn.getResult();
MoveParamCombiner.java,LocalItem localA = specA.getLocalItem();,if (specA != null ) LocalItem localA = specA.getLocalItem();
MoveParamCombiner.java,LocalItem localB = specB.getLocalItem();,if (specB != null ) LocalItem localB = specB.getLocalItem();
MoveParamCombiner.java,CstInsn cstInsn = (CstInsn)(insn.getOriginalRopInsn());,if ((CstInsn)(insn != null ) CstInsn cstInsn = (CstInsn)(insn.getOriginalRopInsn());
NormalSsaInsn.java,RegisterSpecList oldSources = insn.getSources();,if (insn != null ) RegisterSpecList oldSources = insn.getSources();
NormalSsaInsn.java,RegisterSpecList origSources = insn.getSources();,if (insn != null ) RegisterSpecList origSources = insn.getSources();
NormalSsaInsn.java,int sz = origSources.size();,if (origSources != null ) int sz = origSources.size();
NormalSsaInsn.java,RegisterSpecList origSources = insn.getSources();,if (insn != null ) RegisterSpecList origSources = insn.getSources();
NormalSsaInsn.java,LocalItem local = assignment.getLocalItem();,if (assignment != null ) LocalItem local = assignment.getLocalItem();
NormalSsaInsn.java,RegisterSpecList oldSources = insn.getSources();,if (insn != null ) RegisterSpecList oldSources = insn.getSources();
NormalSsaInsn.java,insn = insn.withSourceLiteral();,if (insn != null ) insn = insn.withSourceLiteral();
Optimizer.java,EnumSet<OptionalStep> newSteps = steps.clone();,if (steps != null ) EnumSet<OptionalStep> newSteps = steps.clone();
PhiInsn.java,ropResultReg = resultReg.getReg();,if (resultReg != null ) ropResultReg = resultReg.getReg();
PhiInsn.java,o.regSpec = o.regSpec.withType(def.getType());,if (o != null ) o.regSpec = o.regSpec.withType(def.getType());
PhiInsn.java,int szSources = operands.size();,if (operands != null ) int szSources = operands.size();
PhiInsn.java,int sz = getSources().size();,if (getSources() != null ) int sz = getSources().size();
PhiTypeResolver.java,worklist = new BitSet(ssaMeth.getRegCount());,if (BitSet(ssaMeth != null ) worklist = new BitSet(ssaMeth.getRegCount());
PhiTypeResolver.java,int regCount = ssaMeth.getRegCount();,if (ssaMeth != null ) int regCount = ssaMeth.getRegCount();
PhiTypeResolver.java,int sz = useList.size();,if (useList != null ) int sz = useList.size();
PhiTypeResolver.java,RegisterSpec resultReg = useInsn.getResult();,if (useInsn != null ) RegisterSpec resultReg = useInsn.getResult();
PhiTypeResolver.java,RegisterSpecList sources = insn.getSources();,if (insn != null ) RegisterSpecList sources = insn.getSources();
PhiTypeResolver.java,int szSources = sources.size();,if (sources != null ) int szSources = sources.size();
PhiTypeResolver.java,LocalItem firstLocal = first.getLocalItem();,if (first != null ) LocalItem firstLocal = first.getLocalItem();
PhiTypeResolver.java,Type mergedType = first.getType();,if (first != null ) Type mergedType = first.getType();
PhiTypeResolver.java,RegisterSpec result = insn.getResult();,if (insn != null ) RegisterSpec result = insn.getResult();
RegisterMapper.java,int sz = sources.size();,if (sources != null ) int sz = sources.size();
SCCP.java,this.regCount = ssaMeth.getRegCount();,if (ssaMeth != null ) this.regCount = ssaMeth.getRegCount();
SCCP.java,int phiResultReg = insn.getResult().getReg();,if (insn != null ) int phiResultReg = insn.getResult().getReg();
SCCP.java,RegisterSpecList sources = insn.getSources();,if (insn != null ) RegisterSpecList sources = insn.getSources();
SCCP.java,int sourceSize = sources.size();,if (sources != null ) int sourceSize = sources.size();
SCCP.java,int sourceReg = sources.get(i).getReg();,if (sources != null ) int sourceReg = sources.get(i).getReg();
SCCP.java,Rop opcode = insn.getOpcode();,if (insn != null ) Rop opcode = insn.getOpcode();
SCCP.java,RegisterSpecList sources = insn.getSources();,if (insn != null ) RegisterSpecList sources = insn.getSources();
SCCP.java,int regA = specA.getReg();,if (specA != null ) int regA = specA.getReg();
SCCP.java,int regB = specB.getReg();,if (specB != null ) int regB = specB.getReg();
SCCP.java,SsaBasicBlock block = insn.getBlock();,if (insn != null ) SsaBasicBlock block = insn.getBlock();
SCCP.java,Insn ropInsn = insn.getOriginalRopInsn();,if (insn != null ) Insn ropInsn = insn.getOriginalRopInsn();
SCCP.java,int opcode = insn.getOpcode().getOpcode();,if (insn != null ) int opcode = insn.getOpcode().getOpcode();
SCCP.java,RegisterSpecList sources = insn.getSources();,if (insn != null ) RegisterSpecList sources = insn.getSources();
SCCP.java,cB = cstInsn.getConstant();,if (cstInsn != null ) cB = cstInsn.getConstant();
SCCP.java,Insn ropInsn = insn.getOriginalRopInsn();,if (insn != null ) Insn ropInsn = insn.getOriginalRopInsn();
SCCP.java,int opcode = insn.getOpcode().getOpcode();,if (insn != null ) int opcode = insn.getOpcode().getOpcode();
SCCP.java,RegisterSpec result = insn.getResult();,if (insn != null ) RegisterSpec result = insn.getResult();
SCCP.java,SsaBasicBlock succ = insn.getBlock().getPrimarySuccessor();,if (insn != null ) SsaBasicBlock succ = insn.getBlock().getPrimarySuccessor();
SCCP.java,int resultReg = result.getReg();,if (result != null ) int resultReg = result.getReg();
SCCP.java,resultConstant = cstInsn.getConstant();,if (cstInsn != null ) resultConstant = cstInsn.getConstant();
SCCP.java,"resultConstant = simulateMath(insn, result.getBasicType());","if (result != null ) resultConstant = simulateMath(insn, result.getBasicType());"
SCCP.java,SsaBasicBlock firstBlock = ssaMeth.getEntryBlock();,if (ssaMeth != null ) SsaBasicBlock firstBlock = ssaMeth.getEntryBlock();
SCCP.java,TypeBearer typeBearer = defn.getResult().getTypeBearer();,if (defn != null ) TypeBearer typeBearer = defn.getResult().getTypeBearer();
SCCP.java,RegisterSpec dest = defn.getResult();,if (defn != null ) RegisterSpec dest = defn.getResult();
SCCP.java,RegisterSpecList sources = insn.getSources();,if (insn != null ) RegisterSpecList sources = insn.getSources();
SCCP.java,SsaBasicBlock block = insn.getBlock();,if (insn != null ) SsaBasicBlock block = insn.getBlock();
SCCP.java,int successorSize = block.getSuccessorList().size();,if (block != null ) int successorSize = block.getSuccessorList().size();
SCCP.java,Insn originalRopInsn = insn.getOriginalRopInsn();,if (insn != null ) Insn originalRopInsn = insn.getOriginalRopInsn();
SsaBasicBlock.java,BasicBlockList ropBlocks = rmeth.getBlocks();,if (rmeth != null ) BasicBlockList ropBlocks = rmeth.getBlocks();
SsaBasicBlock.java,InsnList ropInsns = bb.getInsns();,if (bb != null ) InsnList ropInsns = bb.getInsns();
SsaBasicBlock.java,int primarySuccessor = bb.getPrimarySuccessor();,if (bb != null ) int primarySuccessor = bb.getPrimarySuccessor();
SsaBasicBlock.java,int sz = insns.size();,if (insns != null ) int sz = insns.size();
SsaBasicBlock.java,int sz = insns.size();,if (insns != null ) int sz = insns.size();
SsaBasicBlock.java,IntList result = new IntList(successorList.size());,if (IntList(successorList != null ) IntList result = new IntList(successorList.size());
SsaBasicBlock.java,int sz = successorList.size();,if (successorList != null ) int sz = successorList.size();
SsaBasicBlock.java,SsaBasicBlock newPred = parent.makeNewGotoBlock();,if (parent != null ) SsaBasicBlock newPred = parent.makeNewGotoBlock();
SsaBasicBlock.java,SsaBasicBlock newSucc = parent.makeNewGotoBlock();,if (parent != null ) SsaBasicBlock newSucc = parent.makeNewGotoBlock();
SsaBasicBlock.java,int reg = rs.getReg();,if (rs != null ) int reg = rs.getReg();
SsaBasicBlock.java,int category = rs.getCategory();,if (rs != null ) int category = rs.getCategory();
SsaBasicBlock.java,BitSet regsUsedAsSources = new BitSet(parent.getRegCount());,if (BitSet(parent != null ) BitSet regsUsedAsSources = new BitSet(parent.getRegCount());
SsaBasicBlock.java,BitSet regsUsedAsResults = new BitSet(parent.getRegCount());,if (BitSet(parent != null ) BitSet regsUsedAsResults = new BitSet(parent.getRegCount());
SsaBasicBlock.java,int sz = toSchedule.size();,if (toSchedule != null ) int sz = toSchedule.size();
SsaBasicBlock.java,RegisterSpec result = insnToSplit.getResult();,if (insnToSplit != null ) RegisterSpec result = insnToSplit.getResult();
SsaBasicBlock.java,sz = toSchedule.size();,if (toSchedule != null ) sz = toSchedule.size();
SsaBasicBlock.java,liveOut = SetFactory.makeLivenessSet(parent.getRegCount());,if (SetFactory != null ) liveOut = SetFactory.makeLivenessSet(parent.getRegCount());
SsaBasicBlock.java,liveIn = SetFactory.makeLivenessSet(parent.getRegCount());,if (SetFactory != null ) liveIn = SetFactory.makeLivenessSet(parent.getRegCount());
SsaBasicBlock.java,liveIn = SetFactory.makeLivenessSet(parent.getRegCount());,if (SetFactory != null ) liveIn = SetFactory.makeLivenessSet(parent.getRegCount());
SsaBasicBlock.java,liveOut = SetFactory.makeLivenessSet(parent.getRegCount());,if (SetFactory != null ) liveOut = SetFactory.makeLivenessSet(parent.getRegCount());
SsaBasicBlock.java,return index == parent.getExitBlockIndex();,if (parent != null ) return index == parent.getExitBlockIndex();
SsaBasicBlock.java,int len = insns.size();,if (insns != null ) int len = insns.size();
SsaConverter.java,ArrayList<SsaBasicBlock> blocks = result.getBlocks();,if (result != null ) ArrayList<SsaBasicBlock> blocks = result.getBlocks();
SsaConverter.java,int countPredecessors = block.getPredecessors().cardinality();,if (block != null ) int countPredecessors = block.getPredecessors().cardinality();
SsaConverter.java,int countSuccessors = block.getSuccessors().cardinality();,if (block != null ) int countSuccessors = block.getSuccessors().cardinality();
SsaConverter.java,ArrayList<SsaBasicBlock> blocks = ssaMeth.getBlocks();,if (ssaMeth != null ) ArrayList<SsaBasicBlock> blocks = ssaMeth.getBlocks();
SsaConverter.java,ArrayList<SsaBasicBlock> blocks = result.getBlocks();,if (result != null ) ArrayList<SsaBasicBlock> blocks = result.getBlocks();
SsaConverter.java,ArrayList<SsaInsn> insns = block.getInsns();,if (block != null ) ArrayList<SsaInsn> insns = block.getInsns();
SsaConverter.java,ssaBlocks = ssaMeth.getBlocks();,if (ssaMeth != null ) ssaBlocks = ssaMeth.getBlocks();
SsaConverter.java,blockCount = ssaBlocks.size();,if (ssaBlocks != null ) blockCount = ssaBlocks.size();
SsaConverter.java,RegisterSpec rs = insn.getResult();,if (insn != null ) RegisterSpec rs = insn.getResult();
SsaConverter.java,int dfBlockIndex = dfIterator.next();,if (dfIterator != null ) int dfBlockIndex = dfIterator.next();
SsaInsn.java,LocalItem oldItem = result.getLocalItem();,if (result != null ) LocalItem oldItem = result.getLocalItem();
SsaMethod.java,this.maxLabel = ropMethod.getBlocks().getMaxLabel();,if (ropMethod != null ) this.maxLabel = ropMethod.getBlocks().getMaxLabel();
SsaMethod.java,this.registerCount = ropMethod.getBlocks().getRegCount();,if (ropMethod != null ) this.registerCount = ropMethod.getBlocks().getRegCount();
SsaMethod.java,BitSet result = new BitSet(blocks.size());,if (BitSet(blocks != null ) BitSet result = new BitSet(blocks.size());
SsaMethod.java,IntList result = new IntList(labelList.size());,if (IntList(labelList != null ) IntList result = new IntList(labelList.size());
SsaMethod.java,BasicBlockList ropBlocks = rmeth.getBlocks();,if (rmeth != null ) BasicBlockList ropBlocks = rmeth.getBlocks();
SsaMethod.java,int sz = ropBlocks.size();,if (ropBlocks != null ) int sz = ropBlocks.size();
SsaMethod.java,entryBlockIndex = entryBlock.getIndex();,if (entryBlock != null ) entryBlockIndex = entryBlock.getIndex();
SsaMethod.java,exitBlockIndex = blocks.size();,if (blocks != null ) exitBlockIndex = blocks.size();
SsaMethod.java,int newIndex = blocks.size();,if (blocks != null ) int newIndex = blocks.size();
SsaMethod.java,BitSet succs = block.getSuccessors();,if (block != null ) BitSet succs = block.getSuccessors();
SsaMethod.java,registerCount = mapper.getNewRegisterCount();,if (mapper != null ) registerCount = mapper.getNewRegisterCount();
SsaMethod.java,RegisterSpec result = insn.getResult();,if (insn != null ) RegisterSpec result = insn.getResult();
SsaMethod.java,RegisterSpecList rl = insn.getSources();,if (insn != null ) RegisterSpecList rl = insn.getSources();
SsaMethod.java,int sz = rl.size();,if (rl != null ) int sz = rl.size();
SsaMethod.java,int reg = oldSource.getReg();,if (oldSource != null ) int reg = oldSource.getReg();
SsaMethod.java,int reg = newSource.getReg();,if (newSource != null ) int reg = newSource.getReg();
SsaMethod.java,RegisterSpecList sources = insn.getSources();,if (insn != null ) RegisterSpecList sources = insn.getSources();
SsaMethod.java,int szNew = sources.size();,if (sources != null ) int szNew = sources.size();
SsaMethod.java,int reg = sources.get(i).getReg();,if (sources != null ) int reg = sources.get(i).getReg();
SsaMethod.java,int szNew = oldSources.size();,if (oldSources != null ) int szNew = oldSources.size();
SsaMethod.java,RegisterSpec resultReg = insn.getResult();,if (insn != null ) RegisterSpec resultReg = insn.getResult();
SsaMethod.java,int reg = oldResult.getReg();,if (oldResult != null ) int reg = oldResult.getReg();
SsaMethod.java,RegisterSpec resultReg = insn.getResult();,if (insn != null ) RegisterSpec resultReg = insn.getResult();
SsaMethod.java,int reg = resultReg.getReg();,if (resultReg != null ) int reg = resultReg.getReg();
SsaMethod.java,SsaInsn defn = getDefinitionForRegister(spec.getReg());,if (getDefinitionForRegister(spec != null ) SsaInsn defn = getDefinitionForRegister(spec.getReg());
SsaMethod.java,Insn insn = use.getOriginalRopInsn();,if (use != null ) Insn insn = use.getOriginalRopInsn();
SsaMethod.java,BitSet visited = new BitSet(blocks.size());,if (BitSet(blocks != null ) BitSet visited = new BitSet(blocks.size());
SsaMethod.java,SsaBasicBlock cur = stack.pop();,if (stack != null ) SsaBasicBlock cur = stack.pop();
SsaMethod.java,SsaBasicBlock parent = stack.pop();,if (stack != null ) SsaBasicBlock parent = stack.pop();
SsaMethod.java,BitSet visited = new BitSet(getBlocks().size());,if (BitSet(getBlocks() != null ) BitSet visited = new BitSet(getBlocks().size());
SsaMethod.java,SsaBasicBlock cur = stack.pop();,if (stack != null ) SsaBasicBlock cur = stack.pop();
SsaMethod.java,ArrayList<SsaBasicBlock> curDomChildren = cur.getDomChildren();,if (cur != null ) ArrayList<SsaBasicBlock> curDomChildren = cur.getDomChildren();
SsaMethod.java,ArrayList<SsaInsn> insns = block.getInsns();,if (block != null ) ArrayList<SsaInsn> insns = block.getInsns();
SsaMethod.java,int insnsSz = insns.size();,if (insns != null ) int insnsSz = insns.size();
SsaMethod.java,BitSet succs = block.getSuccessors();,if (block != null ) BitSet succs = block.getSuccessors();
SsaRenamer.java,ropRegCount = ssaMeth.getRegCount();,if (ssaMeth != null ) ropRegCount = ssaMeth.getRegCount();
SsaRenamer.java,int sz = ssaRegToRopReg.size();,if (ssaRegToRopReg != null ) int sz = ssaRegToRopReg.size();
SsaRenamer.java,int reg = ssaReg.getReg();,if (ssaReg != null ) int reg = ssaReg.getReg();
SsaRenamer.java,LocalItem local = ssaReg.getLocalItem();,if (ssaReg != null ) LocalItem local = ssaReg.getLocalItem();
SsaRenamer.java,int reg = registerSpec.getReg();,if (registerSpec != null ) int reg = registerSpec.getReg();
SsaRenamer.java,ArrayList<SsaInsn> insns = block.getInsns();,if (block != null ) ArrayList<SsaInsn> insns = block.getInsns();
SsaRenamer.java,int szInsns = insns.size();,if (insns != null ) int szInsns = insns.size();
SsaRenamer.java,int ssaRegNum = ssaReg.getReg();,if (ssaReg != null ) int ssaRegNum = ssaReg.getReg();
SsaRenamer.java,LocalItem ssaRegLocal = ssaReg.getLocalItem();,if (ssaReg != null ) LocalItem ssaRegLocal = ssaReg.getLocalItem();
SsaRenamer.java,RegisterSpec ropResult = insn.getResult();,if (insn != null ) RegisterSpec ropResult = insn.getResult();
SsaRenamer.java,int ropResultReg = ropResult.getReg();,if (ropResult != null ) int ropResultReg = ropResult.getReg();
SsaRenamer.java,LocalItem resultLocal = ropResult.getLocalItem();,if (ropResult != null ) LocalItem resultLocal = ropResult.getLocalItem();
SsaRenamer.java,RegisterSpec ropResult = insn.getResult();,if (insn != null ) RegisterSpec ropResult = insn.getResult();
SsaRenamer.java,int ropReg = ropResult.getReg();,if (ropResult != null ) int ropReg = ropResult.getReg();
SsaRenamer.java,ropReg = insn.getRopResultReg();,if (insn != null ) ropReg = insn.getRopResultReg();
SsaRenamer.java,BitSet successors = block.getSuccessors();,if (block != null ) BitSet successors = block.getSuccessors();
FirstFitAllocator.java,mapped = new BitSet(ssaMeth.getRegCount());,if (BitSet(ssaMeth != null ) mapped = new BitSet(ssaMeth.getRegCount());
FirstFitAllocator.java,int oldRegCount = ssaMeth.getRegCount();,if (ssaMeth != null ) int oldRegCount = ssaMeth.getRegCount();
FirstFitAllocator.java,nextNewRegister = ssaMeth.getParamWidth();,if (ssaMeth != null ) nextNewRegister = ssaMeth.getParamWidth();
FirstFitAllocator.java,CstInsn origInsn = (CstInsn) ndefInsn.getOriginalRopInsn();,if (ndefInsn != null ) CstInsn origInsn = (CstInsn) ndefInsn.getOriginalRopInsn();
FirstFitLocalCombiningAllocator.java,ssaRegsMapped = new BitSet(ssaMeth.getRegCount());,if (BitSet(ssaMeth != null ) ssaRegsMapped = new BitSet(ssaMeth.getRegCount());
FirstFitLocalCombiningAllocator.java,paramRangeEnd = ssaMeth.getParamWidth();,if (ssaMeth != null ) paramRangeEnd = ssaMeth.getParamWidth();
FirstFitLocalCombiningAllocator.java,int sz = ssaRegs.size();,if (ssaRegs != null ) int sz = ssaRegs.size();
FirstFitLocalCombiningAllocator.java,int ssaReg = ssaSpec.getReg();,if (ssaSpec != null ) int ssaReg = ssaSpec.getReg();
FirstFitLocalCombiningAllocator.java,paramCategory = ssaSpec.getCategory();,if (ssaSpec != null ) paramCategory = ssaSpec.getCategory();
FirstFitLocalCombiningAllocator.java,Rop opcode = defInsn.getOpcode();,if (defInsn != null ) Rop opcode = defInsn.getOpcode();
FirstFitLocalCombiningAllocator.java,CstInsn origInsn = (CstInsn) defInsn.getOriginalRopInsn();,if (defInsn != null ) CstInsn origInsn = (CstInsn) defInsn.getOriginalRopInsn();
FirstFitLocalCombiningAllocator.java,int sz = specs.size();,if (specs != null ) int sz = specs.size();
FirstFitLocalCombiningAllocator.java,int category = ssaSpec.getCategory();,if (ssaSpec != null ) int category = ssaSpec.getCategory();
FirstFitLocalCombiningAllocator.java,int szSsaRegs = ssaMeth.getRegCount();,if (ssaMeth != null ) int szSsaRegs = ssaMeth.getRegCount();
FirstFitLocalCombiningAllocator.java,RegisterSpec moveRegSpec = insn.getResult();,if (insn != null ) RegisterSpec moveRegSpec = insn.getResult();
FirstFitLocalCombiningAllocator.java,int moveReg = moveRegSpec.getReg();,if (moveRegSpec != null ) int moveReg = moveRegSpec.getReg();
FirstFitLocalCombiningAllocator.java,BitSet predBlocks = insn.getBlock().getPredecessors();,if (insn != null ) BitSet predBlocks = insn.getBlock().getPredecessors();
FirstFitLocalCombiningAllocator.java,ArrayList<SsaInsn> insnList = predBlock.getInsns();,if (predBlock != null ) ArrayList<SsaInsn> insnList = predBlock.getInsns();
FirstFitLocalCombiningAllocator.java,int checkReg = checkRegSpec.getReg();,if (checkRegSpec != null ) int checkReg = checkRegSpec.getReg();
FirstFitLocalCombiningAllocator.java,int category = checkRegSpec.getCategory();,if (checkRegSpec != null ) int category = checkRegSpec.getCategory();
FirstFitLocalCombiningAllocator.java,int szSsaRegs = ssaMeth.getRegCount();,if (ssaMeth != null ) int szSsaRegs = ssaMeth.getRegCount();
FirstFitLocalCombiningAllocator.java,int category = ssaSpec.getCategory();,if (ssaSpec != null ) int category = ssaSpec.getCategory();
FirstFitLocalCombiningAllocator.java,int category = ssaSpec.getCategory();,if (ssaSpec != null ) int category = ssaSpec.getCategory();
FirstFitLocalCombiningAllocator.java,assignment = insn.getLocalAssignment();,if (insn != null ) assignment = insn.getLocalAssignment();
FirstFitLocalCombiningAllocator.java,LocalItem local = assignment.getLocalItem();,if (assignment != null ) LocalItem local = assignment.getLocalItem();
FirstFitLocalCombiningAllocator.java,int ssaReg = ssaSpec.getReg();,if (ssaSpec != null ) int ssaReg = ssaSpec.getReg();
FirstFitLocalCombiningAllocator.java,int category = ssaSpec.getCategory();,if (ssaSpec != null ) int category = ssaSpec.getCategory();
FirstFitLocalCombiningAllocator.java,RegisterSpecList sources = insn.getSources();,if (insn != null ) RegisterSpecList sources = insn.getSources();
FirstFitLocalCombiningAllocator.java,int szSources = sources.size();,if (sources != null ) int szSources = sources.size();
FirstFitLocalCombiningAllocator.java,int sourceReg = source.getReg();,if (source != null ) int sourceReg = source.getReg();
FirstFitLocalCombiningAllocator.java,int category = source.getCategory();,if (source != null ) int category = source.getCategory();
FirstFitLocalCombiningAllocator.java,int szSimilar = similarRegisters.size();,if (similarRegisters != null ) int szSimilar = similarRegisters.size();
FirstFitLocalCombiningAllocator.java,int similarReg = similarSpec.getReg();,if (similarSpec != null ) int similarReg = similarSpec.getReg();
FirstFitLocalCombiningAllocator.java,RegisterSpecList sources = insn.getSources();,if (insn != null ) RegisterSpecList sources = insn.getSources();
FirstFitLocalCombiningAllocator.java,int szSources = sources.size();,if (sources != null ) int szSources = sources.size();
FirstFitLocalCombiningAllocator.java,int category = sources.get(i).getCategory();,if (sources != null ) int category = sources.get(i).getCategory();
FirstFitLocalCombiningAllocator.java,int ssaCenterReg = sources.get(i).getReg();,if (sources != null ) int ssaCenterReg = sources.get(i).getReg();
FirstFitLocalCombiningAllocator.java,int score = fitWidth - curMovesRequired.cardinality();,if (curMovesRequired != null ) int score = fitWidth - curMovesRequired.cardinality();
FirstFitLocalCombiningAllocator.java,RegisterSpecList sources = insn.getSources();,if (insn != null ) RegisterSpecList sources = insn.getSources();
FirstFitLocalCombiningAllocator.java,int szSources = sources.size();,if (sources != null ) int szSources = sources.size();
FirstFitLocalCombiningAllocator.java,IntSet liveOut = insn.getBlock().getLiveOutRegs();,if (insn != null ) IntSet liveOut = insn.getBlock().getLiveOutRegs();
FirstFitLocalCombiningAllocator.java,BitSet seen = new BitSet(ssaMeth.getRegCount());,if (BitSet(ssaMeth != null ) BitSet seen = new BitSet(ssaMeth.getRegCount());
FirstFitLocalCombiningAllocator.java,int ssaReg = ssaSpec.getReg();,if (ssaSpec != null ) int ssaReg = ssaSpec.getReg();
FirstFitLocalCombiningAllocator.java,RegisterSpecList result = new RegisterSpecList(ssaSet.elements());,if (RegisterSpecList(ssaSet != null ) RegisterSpecList result = new RegisterSpecList(ssaSet.elements());
FirstFitLocalCombiningAllocator.java,IntIterator iter = ssaSet.iterator();,if (ssaSet != null ) IntIterator iter = ssaSet.iterator();
FirstFitLocalCombiningAllocator.java,RegisterSpec result = insn.getResult();,if (insn != null ) RegisterSpec result = insn.getResult();
FirstFitLocalCombiningAllocator.java,int resultReg = result.getReg();,if (result != null ) int resultReg = result.getReg();
FirstFitLocalCombiningAllocator.java,int category = result.getCategory();,if (result != null ) int category = result.getCategory();
FirstFitLocalCombiningAllocator.java,RegisterSpecList sources = insn.getSources();,if (insn != null ) RegisterSpecList sources = insn.getSources();
FirstFitLocalCombiningAllocator.java,int sourcesSize = sources.size();,if (sources != null ) int sourcesSize = sources.size();
FirstFitLocalCombiningAllocator.java,SsaInsn def = ssaMeth.getDefinitionForRegister(source.getReg());,if (ssaMeth != null ) SsaInsn def = ssaMeth.getDefinitionForRegister(source.getReg());
FirstFitLocalCombiningAllocator.java,RegisterSpec sourceDef = def.getResult();,if (def != null ) RegisterSpec sourceDef = def.getResult();
FirstFitLocalCombiningAllocator.java,int sourceReg = sourceDef.getReg();,if (sourceDef != null ) int sourceReg = sourceDef.getReg();
FirstFitLocalCombiningAllocator.java,int maxReg = mapSet.getAndRemoveHighestCount();,if (mapSet != null ) int maxReg = mapSet.getAndRemoveHighestCount();
IdenticalBlockCombiner.java,blocks = ropMethod.getBlocks();,if (ropMethod != null ) blocks = ropMethod.getBlocks();
IdenticalBlockCombiner.java,newBlocks = blocks.getMutableCopy();,if (blocks != null ) newBlocks = blocks.getMutableCopy();
IdenticalBlockCombiner.java,int szBlocks = blocks.size();,if (blocks != null ) int szBlocks = blocks.size();
IdenticalBlockCombiner.java,BitSet toDelete = new BitSet(blocks.getMaxLabel());,if (BitSet(blocks != null ) BitSet toDelete = new BitSet(blocks.getMaxLabel());
IdenticalBlockCombiner.java,IntList preds = ropMethod.labelToPredecessors(b.getLabel());,if (ropMethod != null ) IntList preds = ropMethod.labelToPredecessors(b.getLabel());
IdenticalBlockCombiner.java,int szPreds = preds.size();,if (preds != null ) int szPreds = preds.size();
IdenticalBlockCombiner.java,int szBetas = betaLabels.size();,if (betaLabels != null ) int szBetas = betaLabels.size();
IdenticalBlockCombiner.java,IntList preds = ropMethod.labelToPredecessors(bb.getLabel());,if (ropMethod != null ) IntList preds = ropMethod.labelToPredecessors(bb.getLabel());
IdenticalBlockCombiner.java,int szPreds = preds.size();,if (preds != null ) int szPreds = preds.size();
IdenticalBlockCombiner.java,IntList newSuccessors = block.getSuccessors().mutableCopy();,if (block != null ) IntList newSuccessors = block.getSuccessors().mutableCopy();
IdenticalBlockCombiner.java,newPrimarySuccessor = block.getPrimarySuccessor();,if (block != null ) newPrimarySuccessor = block.getPrimarySuccessor();
InterferenceGraph.java,int oldRegCount = interference.size();,if (interference != null ) int oldRegCount = interference.size();
InterferenceGraph.java,int countRegs = interference.size();,if (interference != null ) int countRegs = interference.size();
LivenessAnalyzer.java,int szRegs = ssaMeth.getRegCount();,if (ssaMeth != null ) int szRegs = ssaMeth.getRegCount();
LivenessAnalyzer.java,int blocksSz = ssaMeth.getBlocks().size();,if (ssaMeth != null ) int blocksSz = ssaMeth.getBlocks().size();
LivenessAnalyzer.java,blockN = insn.getBlock();,if (insn != null ) blockN = insn.getBlock();
LivenessAnalyzer.java,insns = blockN.getInsns();,if (blockN != null ) insns = blockN.getInsns();
LivenessAnalyzer.java,BitSet preds = blockN.getPredecessors();,if (blockN != null ) BitSet preds = blockN.getPredecessors();
LivenessAnalyzer.java,RegisterSpec rs = statement.getResult();,if (statement != null ) RegisterSpec rs = statement.getResult();
LivenessAnalyzer.java,int szPhis = phis.size();,if (phis != null ) int szPhis = phis.size();
NullRegisterAllocator.java,int oldRegCount = ssaMeth.getRegCount();,if (ssaMeth != null ) int oldRegCount = ssaMeth.getRegCount();
RegisterAllocator.java,SsaBasicBlock block = insn.getBlock();,if (insn != null ) SsaBasicBlock block = insn.getBlock();
RegisterAllocator.java,ArrayList<SsaInsn> insns = block.getInsns();,if (block != null ) ArrayList<SsaInsn> insns = block.getInsns();
RegisterAllocator.java,int newReg = newRegSpec.getReg();,if (newRegSpec != null ) int newReg = newRegSpec.getReg();
RegisterAllocator.java,IntSet liveOut = block.getLiveOutRegs();,if (block != null ) IntSet liveOut = block.getLiveOutRegs();
RegisterAllocator.java,IntIterator liveOutIter = liveOut.iterator();,if (liveOut != null ) IntIterator liveOutIter = liveOut.iterator();
RegisterAllocator.java,RegisterSpecList sources = insn.getSources();,if (insn != null ) RegisterSpecList sources = insn.getSources();
RegisterAllocator.java,int szSources = sources.size();,if (sources != null ) int szSources = sources.size();
SsaToRop.java,RegisterMapper mapper = allocator.allocateRegisters();,if (allocator != null ) RegisterMapper mapper = allocator.allocateRegisters();
SsaToRop.java,ropMethod = new IdenticalBlockCombiner(ropMethod).process();,if (IdenticalBlockCombiner(ropMethod) != null ) ropMethod = new IdenticalBlockCombiner(ropMethod).process();
SsaToRop.java,ArrayList<SsaBasicBlock> blocks = ssaMeth.getBlocks();,if (ssaMeth != null ) ArrayList<SsaBasicBlock> blocks = ssaMeth.getBlocks();
SsaToRop.java,RegisterSpecList sources = insn.getSources();,if (insn != null ) RegisterSpecList sources = insn.getSources();
SsaToRop.java,RegisterSpec result = insn.getResult();,if (insn != null ) RegisterSpec result = insn.getResult();
SsaToRop.java,int sz = sources.size();,if (sources != null ) int sz = sources.size();
SsaToRop.java,int paramWidth = ssaMeth.getParamWidth();,if (ssaMeth != null ) int paramWidth = ssaMeth.getParamWidth();
SsaToRop.java,int regCount = ssaMeth.getRegCount();,if (ssaMeth != null ) int regCount = ssaMeth.getRegCount();
SsaToRop.java,ArrayList<SsaBasicBlock> blocks = ssaMeth.getBlocks();,if (ssaMeth != null ) ArrayList<SsaBasicBlock> blocks = ssaMeth.getBlocks();
SsaToRop.java,SsaBasicBlock exitBlock = ssaMeth.getExitBlock();,if (ssaMeth != null ) SsaBasicBlock exitBlock = ssaMeth.getExitBlock();
SsaToRop.java,int ropBlockCount = ssaMeth.getCountReachableBlocks();,if (ssaMeth != null ) int ropBlockCount = ssaMeth.getCountReachableBlocks();
SsaToRop.java,Rop opcode = lastInsn.getOpcode();,if (lastInsn != null ) Rop opcode = lastInsn.getOpcode();
SsaToRop.java,IntList successorList = block.getRopLabelSuccessorList();,if (block != null ) IntList successorList = block.getRopLabelSuccessorList();
SsaToRop.java,int primarySuccessorLabel = block.getPrimarySuccessorRopLabel();,if (block != null ) int primarySuccessorLabel = block.getPrimarySuccessorRopLabel();
SsaToRop.java,SsaBasicBlock exitBlock = ssaMeth.getExitBlock();,if (ssaMeth != null ) SsaBasicBlock exitBlock = ssaMeth.getExitBlock();
SsaToRop.java,int insnCount = ssaInsns.size();,if (ssaInsns != null ) int insnCount = ssaInsns.size();
SsaToRop.java,int regCount = ssaMeth.getRegCount();,if (ssaMeth != null ) int regCount = ssaMeth.getRegCount();
BitIntSet.java,int sz = o.ints.size();,if (o != null ) int sz = o.ints.size();
BitIntSet.java,IntIterator iter = other.iterator();,if (other != null ) IntIterator iter = other.iterator();
ByteArrayAnnotatedOutput.java,int blen = bytes.size();,if (bytes != null ) int blen = bytes.size();
ByteArrayAnnotatedOutput.java,int asz = annotations.size();,if (annotations != null ) int asz = annotations.size();
ByteArrayAnnotatedOutput.java,int sz = annotations.size();,if (annotations != null ) int sz = annotations.size();
ByteArrayAnnotatedOutput.java,int asz = annotations.size();,if (annotations != null ) int asz = annotations.size();
ByteArrayAnnotatedOutput.java,Writer left = twoc.getLeft();,if (twoc != null ) Writer left = twoc.getLeft();
ByteArrayAnnotatedOutput.java,Writer right = twoc.getRight();,if (twoc != null ) Writer right = twoc.getRight();
ByteArrayAnnotatedOutput.java,int rightSz = annotations.size();,if (annotations != null ) int rightSz = annotations.size();
FixedSizeList.java,String name = getClass().getName();,if (getClass() != null ) String name = getClass().getName();
FixedSizeList.java,String name = getClass().getName();,if (getClass() != null ) String name = getClass().getName();
HexParser.java,int len = src.length();,if (src != null ) int len = src.length();
HexParser.java,int lineLen = line.length();,if (line != null ) int lineLen = line.length();
LabeledList.java,labelToIndex = old.labelToIndex.mutableCopy();,if (old != null ) labelToIndex = old.labelToIndex.mutableCopy();
LabeledList.java,int sz = old.size();,if (old != null ) int sz = old.size();
LabeledList.java,int sz = labelToIndex.size();,if (labelToIndex != null ) int sz = labelToIndex.size();
LabeledList.java,int origSz = labelToIndex.size();,if (labelToIndex != null ) int origSz = labelToIndex.size();
LabeledList.java,result[i] = li.getLabel();,if (li != null ) result[i] = li.getLabel();
ListIntSet.java,int szThis = ints.size();,if (ints != null ) int szThis = ints.size();
ListIntSet.java,int szOther = o.ints.size();,if (o != null ) int szOther = o.ints.size();
ListIntSet.java,IntIterator iter = other.iterator();,if (other != null ) IntIterator iter = other.iterator();
TwoColumnOutput.java,this.leftBuf = leftWriter.getBuffer();,if (leftWriter != null ) this.leftBuf = leftWriter.getBuffer();
TwoColumnOutput.java,this.rightBuf = rightWriter.getBuffer();,if (rightWriter != null ) this.rightBuf = rightWriter.getBuffer();
TwoColumnOutput.java,int len = buf.length();,if (buf != null ) int len = buf.length();
ClassReferenceListBuilder.java,ZipEntry entry = entries.nextElement();,if (entries != null ) ZipEntry entry = entries.nextElement();
ClassReferenceListBuilder.java,String name = entry.getName();,if (entry != null ) String name = entry.getName();
ClassReferenceListBuilder.java,ZipEntry entry = entries.nextElement();,if (entries != null ) ZipEntry entry = entries.nextElement();
ClassReferenceListBuilder.java,String name = entry.getName();,if (entry != null ) String name = entry.getName();
ClassReferenceListBuilder.java,int entryCount = pool.size();,if (pool != null ) int entryCount = pool.size();
ClassReferenceListBuilder.java,String descriptor = type.getDescriptor();,if (type != null ) String descriptor = type.getDescriptor();
ClassReferenceListBuilder.java,CstType superClass = classFile.getSuperclass();,if (classFile != null ) CstType superClass = classFile.getSuperclass();
ClassReferenceListBuilder.java,TypeList interfaceList = classFile.getInterfaces();,if (classFile != null ) TypeList interfaceList = classFile.getInterfaces();
ClassReferenceListBuilder.java,int interfaceNumber = interfaceList.size();,if (interfaceList != null ) int interfaceNumber = interfaceList.size();
Blort.java,int l = inbuffer.hashCode();,if (inbuffer != null ) int l = inbuffer.hashCode();
Blort.java,long offset = System.currentTimeMillis();;,if (System != null ) long offset = System.currentTimeMillis();;
DexMergeTest.java,merged = dexMerger.merge();,if (dexMerger != null ) merged = dexMerger.merge();
DexMergeTest.java,"maxLength = Math.max(maxLength, merged.getLength());","if (merged != null ) maxLength = Math.max(maxLength, merged.getLength());"
PhiTypeResolver.java,TypeBearer mergedType = first.getType();,if (first != null ) TypeBearer mergedType = first.getType();
PhiTypeResolver.java,"mergedType = Merger.mergeType(mergedType, rs.getType());","if (rs != null ) mergedType = Merger.mergeType(mergedType, rs.getType());"
LiteralOpUpgrader.java,final TranslationAdvice advice = Optimizer.getAdvice();,if (Optimizer != null ) final TranslationAdvice advice = Optimizer.getAdvice();
ProjectGenerator.java,Path prefixHeaderRelative = sourcePathResolver.apply(prefixHeaderOptional.get());,if (sourcePathResolver != null ) Path prefixHeaderRelative = sourcePathResolver.apply(prefixHeaderOptional.get());
ProjectGenerator.java,ruleByDestinationBuilder = ImmutableSetMultimap.builder();,if (ImmutableSetMultimap != null ) ruleByDestinationBuilder = ImmutableSetMultimap.builder();
AppleDescriptions.java,expandSdkVariableRefs = expandSdkVariableReferencesFunction(appleSdkPaths.get());,if (expandSdkVariableReferencesFunction(appleSdkPaths != null ) expandSdkVariableRefs = expandSdkVariableReferencesFunction(appleSdkPaths.get());
AppleDescriptions.java,expandSdkVariableRefs = Functions.identity();,if (Functions != null ) expandSdkVariableRefs = Functions.identity();
AppleDescriptions.java,expandSdkVariableRefs = expandSdkVariableReferencesFunction(appleSdkPaths.get());,if (expandSdkVariableReferencesFunction(appleSdkPaths != null ) expandSdkVariableRefs = expandSdkVariableReferencesFunction(appleSdkPaths.get());
AppleDescriptions.java,expandSdkVariableRefs = Functions.identity();,if (Functions != null ) expandSdkVariableRefs = Functions.identity();
Resolver.java,DefaultServiceLocator locator = MavenRepositorySystemUtils.newServiceLocator();,if (MavenRepositorySystemUtils != null ) DefaultServiceLocator locator = MavenRepositorySystemUtils.newServiceLocator();
ProjectGenerator.java,boolean skipRNBundle = ReactNativeFlavors.skipBundling(buildTargetNode.getBuildTarget());,if (ReactNativeFlavors != null ) boolean skipRNBundle = ReactNativeFlavors.skipBundling(buildTargetNode.getBuildTarget());
CxxPlatforms.java,Platform platform = Platform.detect();,if (Platform != null ) Platform platform = Platform.detect();
CopyNativeLibraries.java,Path objcopy = platform.getObjcopy();,if (platform != null ) Path objcopy = platform.getObjcopy();
NativeLinkables.java,Linker.LinkableDepType type = wanted.get(buildRule.getBuildTarget());,if (wanted != null ) Linker.LinkableDepType type = wanted.get(buildRule.getBuildTarget());
AbstractCommand.java,BuildTargetParser buildTargetParser = params.getParser().getBuildTargetParser();,if (params != null ) BuildTargetParser buildTargetParser = params.getParser().getBuildTargetParser();
CxxSourceRuleFactory.java,final ProjectFilesystem projectFilesystem = params.getProjectFilesystem();,if (params != null ) final ProjectFilesystem projectFilesystem = params.getProjectFilesystem();
CxxDescriptionEnhancerTest.java,"SourcePath lexSource = new BuildTargetSourcePath(filesystem, genrule.getBuildTarget());","if (genrule != null ) SourcePath lexSource = new BuildTargetSourcePath(filesystem, genrule.getBuildTarget());"
SourcePathResolverTest.java,"SourcePath sourcePath = new BuildTargetSourcePath(projectFilesystem, rule.getBuildTarget());","if (rule != null ) SourcePath sourcePath = new BuildTargetSourcePath(projectFilesystem, rule.getBuildTarget());"
SourcePathResolverTest.java,"SourcePath sourcePath = new BuildTargetSourcePath(projectFilesystem, rule.getBuildTarget());","if (rule != null ) SourcePath sourcePath = new BuildTargetSourcePath(projectFilesystem, rule.getBuildTarget());"
SourcePathResolverTest.java,"SourcePath sourcePath = new BuildTargetSourcePath(projectFilesystem, rule.getBuildTarget());","if (rule != null ) SourcePath sourcePath = new BuildTargetSourcePath(projectFilesystem, rule.getBuildTarget());"
ThriftLibraryDescriptionTest.java,"SourcePath ruleSourcePath = new BuildTargetSourcePath(filesystem, genrule.getBuildTarget());","if (genrule != null ) SourcePath ruleSourcePath = new BuildTargetSourcePath(filesystem, genrule.getBuildTarget());"
Jsr199Javac.java,isSuccess = compilationTask.call();,if (compilationTask != null ) isSuccess = compilationTask.call();
InstallCommand.java,Optional<ExopackageInfo> exopackageInfo = installableApk.getExopackageInfo();,if (installableApk != null ) Optional<ExopackageInfo> exopackageInfo = installableApk.getExopackageInfo();
CxxPreprocessAndCompileStep.java,Process process = builder.start();,if (builder != null ) Process process = builder.start();
CxxPreprocessAndCompileStep.java,exitCode = process.waitFor();,if (process != null ) exitCode = process.waitFor();
CxxPreprocessAndCompileStep.java,String err = new String(error.toByteArray());,if (String(error != null ) String err = new String(error.toByteArray());
ZipStep.java,boolean isDirectory = path.toFile().isDirectory();,if (path != null ) boolean isDirectory = path.toFile().isDirectory();
ZipStep.java,PosixFileAttributes posixAttr = posixAttrView.readAttributes();,if (posixAttrView != null ) PosixFileAttributes posixAttr = posixAttrView.readAttributes();
ZipStep.java,long mode = MorePosixFilePermissions.toMode(posixAttr.permissions());,if (MorePosixFilePermissions != null ) long mode = MorePosixFilePermissions.toMode(posixAttr.permissions());
BuildInfoRecorder.java,this.metadataToWrite = Maps.newHashMap();,if (Maps != null ) this.metadataToWrite = Maps.newHashMap();
TestRunning.java,UUID testUUID = UUID.randomUUID();,if (UUID != null ) UUID testUUID = UUID.randomUUID();
JavaLibraryDescription.java,BuildRule rule = ruleResolver.getRule(right.getLeft());,if (ruleResolver != null ) BuildRule rule = ruleResolver.getRule(right.getLeft());
CxxSourceRuleFactory.java,Tool tool = getCompiler(source.getType());,if (getCompiler(source != null ) Tool tool = getCompiler(source.getType());
CxxSourceRuleFactory.java,Tool tool = getCompiler(source.getType());,if (getCompiler(source != null ) Tool tool = getCompiler(source.getType());
ReactNativeLibraryGraphEnhancer.java,Optional<SourcePath> packager = buckConfig.getPackager();,if (buckConfig != null ) Optional<SourcePath> packager = buckConfig.getPackager();
BuckConfig.java,File dir = cacheDir.toFile();,if (cacheDir != null ) File dir = cacheDir.toFile();
DirArtifactCache.java,CacheResult success = CacheResult.miss();,if (CacheResult != null ) CacheResult success = CacheResult.miss();
DirArtifactCache.java,"File cacheEntry = new File(cacheDir, ruleKey.toString());","if (ruleKey != null ) File cacheEntry = new File(cacheDir, ruleKey.toString());"
DirArtifactCache.java,"File cacheEntry = new File(cacheDir, ruleKey.toString());","if (ruleKey != null ) File cacheEntry = new File(cacheDir, ruleKey.toString());"
DirArtifactCache.java,File[] files = cacheDir.listFiles();,if (cacheDir != null ) File[] files = cacheDir.listFiles();
HttpArtifactCache.java,String key = input.readUTF();,if (input != null ) String key = input.readUTF();
HttpArtifactCache.java,long length = input.readLong();,if (input != null ) long length = input.readLong();
HttpArtifactCache.java,actualHashCode = hasher.hash();,if (hasher != null ) actualHashCode = hasher.hash();
HttpArtifactCache.java,OutputStream raw = sink.outputStream();,if (sink != null ) OutputStream raw = sink.outputStream();
FilterResourcesStepTest.java,Predicate<Path> filePredicate = capturedPredicate.getValue();,if (capturedPredicate != null ) Predicate<Path> filePredicate = capturedPredicate.getValue();
FilterResourcesStepTest.java,Predicate<Path> filePredicate = capturedPredicate.getValue();,if (capturedPredicate != null ) Predicate<Path> filePredicate = capturedPredicate.getValue();
FilterResourcesStepTest.java,Predicate<Path> filePredicate = capturedPredicate.getValue();,if (capturedPredicate != null ) Predicate<Path> filePredicate = capturedPredicate.getValue();
KnownBuildRuleTypesTest.java,Javac javac = libraryRule.getJavac();,if (libraryRule != null ) Javac javac = libraryRule.getJavac();
KnownBuildRuleTypesTest.java,Javac javac = rule.getJavac();,if (rule != null ) Javac javac = rule.getJavac();
AbstractJavacOptions.java,Optional<String> stderr = result.getStderr();,if (result != null ) Optional<String> stderr = result.getStderr();
AbstractJavacOptions.java,version = Optional.absent();,if (Optional != null ) version = Optional.absent();
AppleBundle.java,Path bundleDestinationPath = bundleRoot.resolve(this.destinations.getResourcesPath());,if (bundleRoot != null ) Path bundleDestinationPath = bundleRoot.resolve(this.destinations.getResourcesPath());
AppleBundle.java,Path bundleDestinationPath = bundleRoot.resolve(this.destinations.getResourcesPath());,if (bundleRoot != null ) Path bundleDestinationPath = bundleRoot.resolve(this.destinations.getResourcesPath());
AppleTestDescription.java,ImmutableSet<SourcePath> resourceDirs = resourceDirsBuilder.build();,if (resourceDirsBuilder != null ) ImmutableSet<SourcePath> resourceDirs = resourceDirsBuilder.build();
Jsr199Javac.java,ClassLoaderCache classLoaderCache = context.getClassLoaderCache();,if (context != null ) ClassLoaderCache classLoaderCache = context.getClassLoaderCache();
Jsr199Javac.java,compiler = ToolProvider.getSystemJavaCompiler();,if (ToolProvider != null ) compiler = ToolProvider.getSystemJavaCompiler();
ExternalJavacTest.java,ExecutionContext context = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext context = TestExecutionContext.newInstance();
Jsr199JavacTest.java,ExecutionContext context = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext context = TestExecutionContext.newInstance();
CxxDescriptionEnhancer.java,headers = ImmutableMap.of();,if (ImmutableMap != null ) headers = ImmutableMap.of();
CxxDescriptionEnhancer.java,sources = ImmutableMap.of();,if (ImmutableMap != null ) sources = ImmutableMap.of();
CxxLibraryDescription.java,SourceWithFlagsList sourceWithFlagsList = args.srcs.get();,if (args != null ) SourceWithFlagsList sourceWithFlagsList = args.srcs.get();
CxxDescriptionEnhancer.java,Pattern pattern = Pattern.compile(pair.getFirst());,if (Pattern != null ) Pattern pattern = Pattern.compile(pair.getFirst());
CxxFlags.java,Pattern pattern = patternCache.getUnchecked(pair.getFirst());,if (patternCache != null ) Pattern pattern = patternCache.getUnchecked(pair.getFirst());
CxxFlags.java,Matcher matcher = pattern.matcher(platform.toString());,if (pattern != null ) Matcher matcher = pattern.matcher(platform.toString());
Resolver.java,String projectName = root.getGroupId();,if (root != null ) String projectName = root.getGroupId();
Resolver.java,String groupName = artifact.getGroupId();,if (artifact != null ) String groupName = artifact.getGroupId();
Resolver.java,String groupName = artifact.getGroupId();,if (artifact != null ) String groupName = artifact.getGroupId();
CxxDescriptionEnhancer.java,headers = parameter.get().getRight();,if (parameter != null ) headers = parameter.get().getRight();
PythonUtil.java,namesAndSourcePaths = inputs.get().getRight();,if (inputs != null ) namesAndSourcePaths = inputs.get().getRight();
CxxDescriptionEnhancer.java,sources = args.srcs.get().getRight();,if (args != null ) sources = args.srcs.get().getRight();
CxxLibraryDescription.java,hasObjects = !either.getLeft().isEmpty();,if (!either != null ) hasObjects = !either.getLeft().isEmpty();
CxxLibraryDescription.java,hasObjects = !either.getRight().isEmpty();,if (!either != null ) hasObjects = !either.getRight().isEmpty();
AdbHelper.java,devices = filterDevices(adb.getDevices());,if (filterDevices(adb != null ) devices = filterDevices(adb.getDevices());
AdbHelper.java,devices = filterDevices(adb.getDevices());,if (filterDevices(adb != null ) devices = filterDevices(adb.getDevices());
CachingBuildEngine.java,BuildRuleSuccessType success = input.getSuccess();,if (input != null ) BuildRuleSuccessType success = input.getSuccess();
CachingBuildEngine.java,BuildRuleSuccessType success = input.getSuccess();,if (input != null ) BuildRuleSuccessType success = input.getSuccess();
CachingBuildEngineTest.java,ZipEntry entry = new ZipEntry(mapEntry.getKey());,if (ZipEntry(mapEntry != null ) ZipEntry entry = new ZipEntry(mapEntry.getKey());
BuildCommand.java,ImmutableSet<BuildRule> actionGraphRules = Preconditions.checkNotNull(actionGraph.getNodes());,if (Preconditions != null ) ImmutableSet<BuildRule> actionGraphRules = Preconditions.checkNotNull(actionGraph.getNodes());
ProjectCommand.java,BuildRuleResolver buildRuleResolver = new BuildRuleResolver(actionGraph.getNodes());,if (BuildRuleResolver(actionGraph != null ) BuildRuleResolver buildRuleResolver = new BuildRuleResolver(actionGraph.getNodes());
DefaultJavaLibrary.java,TraversableGraph<BuildRule> graph = context.getActionGraph();,if (context != null ) TraversableGraph<BuildRule> graph = context.getActionGraph();
TargetGraphToActionGraph.java,boolean isRuleFlavored = rule.getBuildTarget().isFlavored();,if (rule != null ) boolean isRuleFlavored = rule.getBuildTarget().isFlavored();
TargetGraphToActionGraph.java,boolean isDepFlavored = dep.getBuildTarget().isFlavored();,if (dep != null ) boolean isDepFlavored = dep.getBuildTarget().isFlavored();
TargetGraphToActionGraph.java,depsToVisit = ImmutableSet.builder();,if (ImmutableSet != null ) depsToVisit = ImmutableSet.builder();
AdbHelper.java,final boolean installViaSd = command.shouldInstallViaSd();,if (command != null ) final boolean installViaSd = command.shouldInstallViaSd();
AppleCxxPlatforms.java,ImmutableList<String> cflags = cflagsBuilder.build();,if (cflagsBuilder != null ) ImmutableList<String> cflags = cflagsBuilder.build();
SuperConsoleEventBusListener.java,this.threadsToRunningEvent = new ConcurrentHashMap<>(executionEnvironment.getAvailableCores());,if (ConcurrentHashMap<>(executionEnvironment != null ) this.threadsToRunningEvent = new ConcurrentHashMap<>(executionEnvironment.getAvailableCores());
SuperConsoleEventBusListener.java,ImmutableList<String> lines = builder.build();,if (builder != null ) ImmutableList<String> lines = builder.build();
DirArtifactCache.java,"File cacheEntry = new File(cacheDir, ruleKey.toString());","if (ruleKey != null ) File cacheEntry = new File(cacheDir, ruleKey.toString());"
CachingBuildEngine.java,Optional<RuleKey> cachedRuleKey = onDiskBuildInfo.getRuleKey();,if (onDiskBuildInfo != null ) Optional<RuleKey> cachedRuleKey = onDiskBuildInfo.getRuleKey();
CachingBuildEngine.java,Optional<RuleKey> cachedRuleKeyNoDeps = onDiskBuildInfo.getRuleKeyWithoutDeps();,if (onDiskBuildInfo != null ) Optional<RuleKey> cachedRuleKeyNoDeps = onDiskBuildInfo.getRuleKeyWithoutDeps();
RuleKey.java,Path path = relativePath.get();,if (relativePath != null ) Path path = relativePath.get();
DefaultOnDiskBuildInfo.java,File file = projectFilesystem.getFileForRelativePath(buildRule.getPathToOutput());,if (projectFilesystem != null ) File file = projectFilesystem.getFileForRelativePath(buildRule.getPathToOutput());
ReactNativeBundle.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
RmStep.java,File file = projectFilesystem.resolve(toDelete).toFile();,if (projectFilesystem != null ) File file = projectFilesystem.resolve(toDelete).toFile();
AndroidPrebuiltAarGraphEnhancer.java,ImmutableSortedSet<Path> resSrcs = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) ImmutableSortedSet<Path> resSrcs = ImmutableSortedSet.of();
AndroidPrebuiltAarGraphEnhancer.java,ImmutableSortedSet<Path> assetsSrcs = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) ImmutableSortedSet<Path> assetsSrcs = ImmutableSortedSet.of();
AbstractBuildRule.java,ruleKeyPair = builder.build();,if (builder != null ) ruleKeyPair = builder.build();
RuleKey.java,RuleKey ruleKeyWithoutDeps = new RuleKey(hasher.hash());,if (RuleKey(hasher != null ) RuleKey ruleKeyWithoutDeps = new RuleKey(hasher.hash());
RuleKey.java,RuleKey totalRuleKey = new RuleKey(hasher.hash());,if (RuleKey(hasher != null ) RuleKey totalRuleKey = new RuleKey(hasher.hash());
ExternalJavacTest.java,RuleKeyPair expected = builder.build();,if (builder != null ) RuleKeyPair expected = builder.build();
ExternalJavacTest.java,RuleKeyPair seen = builder.build();,if (builder != null ) RuleKeyPair seen = builder.build();
ExternalJavacTest.java,RuleKeyPair expected = builder.build();,if (builder != null ) RuleKeyPair expected = builder.build();
ExternalJavacTest.java,RuleKeyPair seen = builder.build();,if (builder != null ) RuleKeyPair seen = builder.build();
DefaultRuleKeyBuilderFactoryTest.java,RuleKeyPair expected = builder.build();,if (builder != null ) RuleKeyPair expected = builder.build();
DefaultRuleKeyBuilderFactoryTest.java,RuleKeyPair expected = builder.build();,if (builder != null ) RuleKeyPair expected = builder.build();
DefaultRuleKeyBuilderFactoryTest.java,RuleKeyPair expected = builder.build();,if (builder != null ) RuleKeyPair expected = builder.build();
DefaultRuleKeyBuilderFactoryTest.java,RuleKeyPair expected = builder.build();,if (builder != null ) RuleKeyPair expected = builder.build();
DefaultRuleKeyBuilderFactoryTest.java,RuleKeyPair expected = builder.build();,if (builder != null ) RuleKeyPair expected = builder.build();
DefaultRuleKeyBuilderFactoryTest.java,RuleKeyPair expected = builder.build();,if (builder != null ) RuleKeyPair expected = builder.build();
DefaultRuleKeyBuilderFactoryTest.java,RuleKeyPair expected = builder.build();,if (builder != null ) RuleKeyPair expected = builder.build();
DefaultRuleKeyBuilderFactoryTest.java,RuleKeyPair expected = builder.build();,if (builder != null ) RuleKeyPair expected = builder.build();
DefaultRuleKeyBuilderFactoryTest.java,RuleKeyPair expected = builder.build();,if (builder != null ) RuleKeyPair expected = builder.build();
RuleKey.java,ImmutableSortedSet<BuildRule> noDeps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) ImmutableSortedSet<BuildRule> noDeps = ImmutableSortedSet.of();
AppleBundle.java,Path metadataPath = bundleRoot.resolve(this.destinations.getMetadataPath());,if (bundleRoot != null ) Path metadataPath = bundleRoot.resolve(this.destinations.getMetadataPath());
AppleSimulatorRunning.java,ImmutableList<String> command = commandBuilder.build();,if (commandBuilder != null ) ImmutableList<String> command = commandBuilder.build();
CxxDescriptionEnhancer.java,String extension = platform.getSharedLibraryExtension();,if (platform != null ) String extension = platform.getSharedLibraryExtension();
ReactNativeLibraryGraphEnhancer.java,Optional<SourcePath> packager = buckConfig.getPackager();,if (buckConfig != null ) Optional<SourcePath> packager = buckConfig.getPackager();
KnownBuildRuleTypes.java,Optional<Path> pythonPathToPythonTestMain = pyConfig.getPathToTestMain();,if (pyConfig != null ) Optional<Path> pythonPathToPythonTestMain = pyConfig.getPathToTestMain();
PythonSrcZipIntegrationTest.java,Properties props = System.getProperties();,if (System != null ) Properties props = System.getProperties();
PythonTestIntegrationTest.java,Properties props = System.getProperties();,if (System != null ) Properties props = System.getProperties();
CxxPreprocessAndCompileTest.java,ImmutableList<String> actualPreprocessCommand = buildRule.getCommand();,if (buildRule != null ) ImmutableList<String> actualPreprocessCommand = buildRule.getCommand();
Parser.java,ProjectFilesystem projectFilesystem = repository.getFilesystem();,if (repository != null ) ProjectFilesystem projectFilesystem = repository.getFilesystem();
KnownBuildRuleTypes.java,Optional<Path> ndkRoot = androidDirectoryResolver.findAndroidNdkDir();,if (androidDirectoryResolver != null ) Optional<Path> ndkRoot = androidDirectoryResolver.findAndroidNdkDir();
BuildInfoRecorder.java,long time = TimeUnit.MILLISECONDS.toSeconds(clock.currentTimeMillis());,if (TimeUnit != null ) long time = TimeUnit.MILLISECONDS.toSeconds(clock.currentTimeMillis());
CxxPreprocessAndCompileTest.java,ImmutableList<String> actualCompileCommand = buildRule.getCommand();,if (buildRule != null ) ImmutableList<String> actualCompileCommand = buildRule.getCommand();
XctoolRunTestsStep.java,int processExitCode = result.getExitCode();,if (result != null ) int processExitCode = result.getExitCode();
BuildInfoRecorder.java,this.pathsToOutputFiles = Sets.newHashSet();,if (Sets != null ) this.pathsToOutputFiles = Sets.newHashSet();
BuildInfoRecorder.java,this.pathsToOutputDirectories = Sets.newHashSet();,if (Sets != null ) this.pathsToOutputDirectories = Sets.newHashSet();
BuildInfoRecorder.java,ImmutableSet<Path> pathsToIncludeInZip = pathsToIncludeInZipBuilder.build();,if (pathsToIncludeInZipBuilder != null ) ImmutableSet<Path> pathsToIncludeInZip = pathsToIncludeInZipBuilder.build();
AppleTestDescription.java,xctoolZipPath = Optional.absent();,if (Optional != null ) xctoolZipPath = Optional.absent();
UnsortedAndroidResourceDeps.java,BuildRuleType type = rule.getType();,if (rule != null ) BuildRuleType type = rule.getType();
AbstractBuildRule.java,this.buildRuleType = buildRuleParams.getBuildRuleType();,if (buildRuleParams != null ) this.buildRuleType = buildRuleParams.getBuildRuleType();
AndroidBinaryGraphEnhancer.java,Path buildConfigJar = buildConfigJavaLibrary.getPathToOutputFile();,if (buildConfigJavaLibrary != null ) Path buildConfigJar = buildConfigJavaLibrary.getPathToOutputFile();
DexProducedFromJavaLibrary.java,Path pathToOutputFile = javaLibrary.getPathToOutputFile();,if (javaLibrary != null ) Path pathToOutputFile = javaLibrary.getPathToOutputFile();
TargetsCommand.java,Path outputPath = rule.getPathToOutputFile();,if (rule != null ) Path outputPath = rule.getPathToOutputFile();
TestRunning.java,Path pathToOutput = rule.getPathToOutputFile();,if (rule != null ) Path pathToOutput = rule.getPathToOutputFile();
BuildReport.java,outputFile = rule.getPathToOutputFile();,if (rule != null ) outputFile = rule.getPathToOutputFile();
BuildReport.java,Path outputFile = rule.getPathToOutputFile();,if (rule != null ) Path outputFile = rule.getPathToOutputFile();
GwtBinary.java,Path workingDirectory = getPathToOutputFile().getParent();,if (getPathToOutputFile() != null ) Path workingDirectory = getPathToOutputFile().getParent();
AnnotationProcessingParams.java,Path pathToOutput = rule.getPathToOutputFile();,if (rule != null ) Path pathToOutput = rule.getPathToOutputFile();
JavaTest.java,Path relativeOutputPath = rule.getPathToOutputFile();,if (rule != null ) Path relativeOutputPath = rule.getPathToOutputFile();
DefaultOnDiskBuildInfo.java,File file = projectFilesystem.getFileForRelativePath(buildRule.getPathToOutputFile());,if (projectFilesystem != null ) File file = projectFilesystem.getFileForRelativePath(buildRule.getPathToOutputFile());
LocationMacroExpander.java,Path output = rule.getPathToOutputFile();,if (rule != null ) Path output = rule.getPathToOutputFile();
Genrule.java,Path output = rule.getPathToOutputFile();,if (rule != null ) Path output = rule.getPathToOutputFile();
JavaBinaryTest.java,String expectedClasspath = basePath + javaBinary.getPathToOutputFile();,if (javaBinary != null ) String expectedClasspath = basePath + javaBinary.getPathToOutputFile();
JavaSourceJarTest.java,Path output = rule.getPathToOutputFile();,if (rule != null ) Path output = rule.getPathToOutputFile();
LocationMacroExpanderTest.java,Path outputPath = javaBinary.getPathToOutputFile();,if (javaBinary != null ) Path outputPath = javaBinary.getPathToOutputFile();
Main.java,Optional<String> target = buckConfig.getAndroidTarget();,if (buckConfig != null ) Optional<String> target = buckConfig.getAndroidTarget();
KnownBuildRuleTypes.java,Optional<String> ndkVersion = config.getNdkVersion();,if (config != null ) Optional<String> ndkVersion = config.getNdkVersion();
AppleBundleDescription.java,ImmutableSet<Path> bundleDirs = bundleDirsBuilder.build();,if (bundleDirsBuilder != null ) ImmutableSet<Path> bundleDirs = bundleDirsBuilder.build();
AppleTestDescription.java,ImmutableSet<Path> resourceDirs = resourceDirsBuilder.build();,if (resourceDirsBuilder != null ) ImmutableSet<Path> resourceDirs = resourceDirsBuilder.build();
CxxBoostTest.java,String resolvedBinary = filesystem.resolve(binary).toString();,if (filesystem != null ) String resolvedBinary = filesystem.resolve(binary).toString();
CxxGtestTest.java,String resolvedBinary = filesystem.resolve(binary).toString();,if (filesystem != null ) String resolvedBinary = filesystem.resolve(binary).toString();
CachingBuildEngine.java,SettableFuture<BuildResult> newFuture = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<BuildResult> newFuture = SettableFuture.create();
CachingBuildEngine.java,ruleKey = rule.getRuleKey();,if (rule != null ) ruleKey = rule.getRuleKey();
CachingBuildEngine.java,ruleKeyWithoutDeps = rule.getRuleKeyWithoutDeps();,if (rule != null ) ruleKeyWithoutDeps = rule.getRuleKeyWithoutDeps();
CachingBuildEngine.java,BuildRuleSuccessType success = result.getSuccess();,if (result != null ) BuildRuleSuccessType success = result.getSuccess();
CachingBuildEngine.java,boolean clearExistingMetadata = success.shouldClearAndOverwriteMetadataOnDisk();,if (success != null ) boolean clearExistingMetadata = success.shouldClearAndOverwriteMetadataOnDisk();
CachingBuildEngine.java,RuleKey ruleKey = rule.getRuleKey();,if (rule != null ) RuleKey ruleKey = rule.getRuleKey();
CachingBuildEngine.java,Optional<RuleKey> cachedRuleKey = onDiskBuildInfo.getRuleKey();,if (onDiskBuildInfo != null ) Optional<RuleKey> cachedRuleKey = onDiskBuildInfo.getRuleKey();
CachingBuildEngine.java,RuleKey ruleKeyNoDeps = rule.getRuleKeyWithoutDeps();,if (rule != null ) RuleKey ruleKeyNoDeps = rule.getRuleKeyWithoutDeps();
CachingBuildEngine.java,Optional<RuleKey> cachedRuleKeyNoDeps = onDiskBuildInfo.getRuleKeyWithoutDeps();,if (onDiskBuildInfo != null ) Optional<RuleKey> cachedRuleKeyNoDeps = onDiskBuildInfo.getRuleKeyWithoutDeps();
CachingBuildEngine.java,cacheResult = CacheResult.skip();,if (CacheResult != null ) cacheResult = CacheResult.skip();
CachingBuildEngineTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
CachingBuildEngineTest.java,BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();
CachingBuildEngineTest.java,BuildResult result = buildResult.get();,if (buildResult != null ) BuildResult result = buildResult.get();
NdkLibraryDescription.java,AndroidBinary.TargetCpuType targetCpuType = entry.getKey();,if (entry != null ) AndroidBinary.TargetCpuType targetCpuType = entry.getKey();
AppleTestDescription.java,String platformName = appleCxxPlatform.getApplePlatform().getName();,if (appleCxxPlatform != null ) String platformName = appleCxxPlatform.getApplePlatform().getName();
BuckExtension.java,BuildTarget target = params.getBuildTarget();,if (params != null ) BuildTarget target = params.getBuildTarget();
BuckExtension.java,ImmutableCollection<Path> depPaths = Classpaths.getClasspathEntries(getDeclaredDeps()).values();,if (Classpaths != null ) ImmutableCollection<Path> depPaths = Classpaths.getClasspathEntries(getDeclaredDeps()).values();
BuckExtension.java,ImmutableSortedSet<Path> declaredClasspath = classpath.build();,if (classpath != null ) ImmutableSortedSet<Path> declaredClasspath = classpath.build();
BuckExtension.java,ClassLoader classLoader = BuckExtension.class.getClassLoader();,if (BuckExtension != null ) ClassLoader classLoader = BuckExtension.class.getClassLoader();
QuickstartIntegrationTest.java,Path androidSdk = androidDirectoryResolver.findAndroidSdkDirSafe().orNull();,if (androidDirectoryResolver != null ) Path androidSdk = androidDirectoryResolver.findAndroidSdkDirSafe().orNull();
FilterResourcesStep.java,this.nonEnglishStringFilesBuilder = ImmutableSet.builder();,if (ImmutableSet != null ) this.nonEnglishStringFilesBuilder = ImmutableSet.builder();
TargetsCommand.java,BuildTarget buildTarget = valueIterator.next().getBuildTarget();,if (valueIterator != null ) BuildTarget buildTarget = valueIterator.next().getBuildTarget();
RuleKey.java,exportedDeps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) exportedDeps = ImmutableSortedSet.of();
SerializableAndroidAar.java,Path res = preBuiltAar.getRes();,if (preBuiltAar != null ) Path res = preBuiltAar.getRes();
SerializableAndroidAar.java,Path assets = preBuiltAar.getAssets();,if (preBuiltAar != null ) Path assets = preBuiltAar.getAssets();
AaptPackageResourcesTest.java,Set<Path> assetsDirectories = ImmutableSet.of(resourceOne.getAssets());,if (ImmutableSet != null ) Set<Path> assetsDirectories = ImmutableSet.of(resourceOne.getAssets());
OCamlRuleBuilder.java,ImmutableList<BuildRule> ocamlLibraryBuild = generator.generate();,if (generator != null ) ImmutableList<BuildRule> ocamlLibraryBuild = generator.generate();
ThriftLibraryDescription.java,SourcePath compiler = thriftBuckConfig.getCompiler();,if (thriftBuckConfig != null ) SourcePath compiler = thriftBuckConfig.getCompiler();
ThriftLibraryDescription.java,SourcePath compiler = thriftBuckConfig.getCompiler();,if (thriftBuckConfig != null ) SourcePath compiler = thriftBuckConfig.getCompiler();
ThriftBuckConfigTest.java,SourcePath compiler = thriftBuckConfig.getCompiler();,if (thriftBuckConfig != null ) SourcePath compiler = thriftBuckConfig.getCompiler();
ThriftBuckConfigTest.java,SourcePath compiler = thriftBuckConfig.getCompiler();,if (thriftBuckConfig != null ) SourcePath compiler = thriftBuckConfig.getCompiler();
SerializableAndroidAar.java,SourcePath res = preBuiltAar.getRes();,if (preBuiltAar != null ) SourcePath res = preBuiltAar.getRes();
SerializableAndroidAar.java,SourcePath assets = preBuiltAar.getAssets();,if (preBuiltAar != null ) SourcePath assets = preBuiltAar.getAssets();
AaptPackageResourcesTest.java,Set<SourcePath> assetsDirectories = ImmutableSet.of(resourceOne.getAssets());,if (ImmutableSet != null ) Set<SourcePath> assetsDirectories = ImmutableSet.of(resourceOne.getAssets());
CassandraArtifactCache.java,Keyspace keyspace = context.getClient();,if (context != null ) Keyspace keyspace = context.getClient();
CassandraArtifactCache.java,Keyspace keyspace = keyspaceAndTtl.get().getKeyspace();,if (keyspaceAndTtl != null ) Keyspace keyspace = keyspaceAndTtl.get().getKeyspace();
CassandraArtifactCache.java,ttl = keyspaceAndTtl.get().getTtl();,if (keyspaceAndTtl != null ) ttl = keyspaceAndTtl.get().getTtl();
CassandraArtifactCache.java,CacheResult success = CacheResult.miss();,if (CacheResult != null ) CacheResult success = CacheResult.miss();
CassandraArtifactCache.java,ByteArrayInputStream dataStream = new ByteArrayInputStream(column.getByteArrayValue());,if (ByteArrayInputStream(column != null ) ByteArrayInputStream dataStream = new ByteArrayInputStream(column.getByteArrayValue());
CassandraArtifactCache.java,expectedHashCode = (HashCode) objectStream.readObject();,if (objectStream != null ) expectedHashCode = (HashCode) objectStream.readObject();
CassandraArtifactCache.java,Path path = output.toPath();,if (output != null ) Path path = output.toPath();
CassandraArtifactCache.java,HashCode hashCode = fileHashCache.get(output.toPath());,if (fileHashCache != null ) HashCode hashCode = fileHashCache.get(output.toPath());
CassandraArtifactCache.java,Keyspace keyspace = keyspaceAndTtl.get().getKeyspace();,if (keyspaceAndTtl != null ) Keyspace keyspace = keyspaceAndTtl.get().getKeyspace();
CassandraArtifactCache.java,int ttl = keyspaceAndTtl.get().getTtl();,if (keyspaceAndTtl != null ) int ttl = keyspaceAndTtl.get().getTtl();
CassandraArtifactCache.java,MutationBatch mutationBatch = keyspace.prepareMutationBatch();,if (keyspace != null ) MutationBatch mutationBatch = keyspace.prepareMutationBatch();
ThriftIntegrationTest.java,ProcessResult result = workspace.runBuckBuild();,if (workspace != null ) ProcessResult result = workspace.runBuckBuild();
AppleBundle.java,this.binaryName = getBuildTarget().getShortName();,if (getBuildTarget() != null ) this.binaryName = getBuildTarget().getShortName();
NewNativeTargetProjectMutator.java,PBXGroup targetGroup = project.getMainGroup();,if (project != null ) PBXGroup targetGroup = project.getMainGroup();
ProjectGenerator.java,this.targetNodeToGeneratedProjectTargetBuilder = ImmutableMap.builder();,if (ImmutableMap != null ) this.targetNodeToGeneratedProjectTargetBuilder = ImmutableMap.builder();
Main.java,DefaultFileHashCache fileHashCache = new DefaultFileHashCache(rootRepository.getFilesystem());,if (DefaultFileHashCache(rootRepository != null ) DefaultFileHashCache fileHashCache = new DefaultFileHashCache(rootRepository.getFilesystem());
DexProducedFromJavaLibrary.java,final boolean hasClassesToDx = !javaLibrary.getClassNamesToHashes().isEmpty();,if (!javaLibrary != null ) final boolean hasClassesToDx = !javaLibrary.getClassNamesToHashes().isEmpty();
AndroidLibraryDescription.java,ImmutableSet<Path> additionalClasspathEntries = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<Path> additionalClasspathEntries = ImmutableSet.of();
AndroidLibraryDescription.java,ImmutableSortedSet<BuildRule> exportedDeps = resolver.getAllRules(args.exportedDeps.get());,if (resolver != null ) ImmutableSortedSet<BuildRule> exportedDeps = resolver.getAllRules(args.exportedDeps.get());
AbstractIjModule.java,ImmutableSet<BuildTarget> deps = getDependencies().keySet();,if (getDependencies() != null ) ImmutableSet<BuildTarget> deps = getDependencies().keySet();
IjLibraryFactory.java,Optional<IjLibrary> libraryOptional = getLibrary(dep.getBuildTarget());,if (getLibrary(dep != null ) Optional<IjLibrary> libraryOptional = getLibrary(dep.getBuildTarget());
IjLibraryFactory.java,String libraryName = Util.intelliJLibraryName(node.getBuildTarget());,if (Util != null ) String libraryName = Util.intelliJLibraryName(node.getBuildTarget());
IjLibraryFactory.java,IjLibrary.Builder libraryBuilder = IjLibrary.builder();,if (IjLibrary != null ) IjLibrary.Builder libraryBuilder = IjLibrary.builder();
IjLibraryFactory.java,AndroidPrebuiltAarDescription.Arg arg = targetNode.getConstructorArg();,if (targetNode != null ) AndroidPrebuiltAarDescription.Arg arg = targetNode.getConstructorArg();
IjLibraryFactory.java,PrebuiltJarDescription.Arg arg = targetNode.getConstructorArg();,if (targetNode != null ) PrebuiltJarDescription.Arg arg = targetNode.getConstructorArg();
IjModuleGraph.java,IjLibrary library = libraryFactory.getLibrary(depTarget).orNull();,if (libraryFactory != null ) IjLibrary library = libraryFactory.getLibrary(depTarget).orNull();
TestRunning.java,completedResults = uberFuture.get();,if (uberFuture != null ) completedResults = uberFuture.get();
TestCommand.java,Path pathToOutput = rule.getPathToOutputFile();,if (rule != null ) Path pathToOutput = rule.getPathToOutputFile();
TestCommand.java,ImmutableSet<Path> javaSrcs = rule.getJavaSrcs();,if (rule != null ) ImmutableSet<Path> javaSrcs = rule.getJavaSrcs();
TestCommand.java,DefaultJavaPackageFinder defaultJavaPackageFinder = defaultJavaPackageFinderOptional.get();,if (defaultJavaPackageFinderOptional != null ) DefaultJavaPackageFinder defaultJavaPackageFinder = defaultJavaPackageFinderOptional.get();
TestCommand.java,Set<String> srcFolders = Sets.newHashSet();,if (Sets != null ) Set<String> srcFolders = Sets.newHashSet();
TestCommand.java,ImmutableSortedSet<String> pathsFromRoot = defaultJavaPackageFinder.getPathsFromRoot();,if (defaultJavaPackageFinder != null ) ImmutableSortedSet<String> pathsFromRoot = defaultJavaPackageFinder.getPathsFromRoot();
TestCommand.java,ImmutableSet<String> pathElements = defaultJavaPackageFinder.getPathElements();,if (defaultJavaPackageFinder != null ) ImmutableSet<String> pathElements = defaultJavaPackageFinder.getPathElements();
TestCommand.java,File directory = filesystem.getFileForRelativePath(javaSrcPath.getParent());,if (filesystem != null ) File directory = filesystem.getFileForRelativePath(javaSrcPath.getParent());
TestCommand.java,directory = directory.getParentFile();,if (directory != null ) directory = directory.getParentFile();
TestCommand.java,String directoryPath = directory.getPath();,if (directory != null ) String directoryPath = directory.getPath();
TestCommand.java,rulesUnderTest = ImmutableSet.of();,if (ImmutableSet != null ) rulesUnderTest = ImmutableSet.of();
TestCommand.java,Verbosity verbosity = params.getConsole().getVerbosity();,if (params != null ) Verbosity verbosity = params.getConsole().getVerbosity();
TestCommand.java,steps = stepsBuilder.build();,if (stepsBuilder != null ) steps = stepsBuilder.build();
TestCommand.java,steps = ImmutableList.of();,if (ImmutableList != null ) steps = ImmutableList.of();
TestCommand.java,completedResults = uberFuture.get();,if (uberFuture != null ) completedResults = uberFuture.get();
TestCommand.java,TestResults originalTestResults = originalCallable.call();,if (originalCallable != null ) TestResults originalTestResults = originalCallable.call();
TestCommand.java,ImmutableSet<BuildRule> sourceUnderTest = javaTest.getSourceUnderTest();,if (javaTest != null ) ImmutableSet<BuildRule> sourceUnderTest = javaTest.getSourceUnderTest();
TestCommand.java,DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();,if (DocumentBuilderFactory != null ) DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
TestCommand.java,DocumentBuilder docBuilder = dbf.newDocumentBuilder();,if (dbf != null ) DocumentBuilder docBuilder = dbf.newDocumentBuilder();
TestCommand.java,Document doc = docBuilder.newDocument();,if (docBuilder != null ) Document doc = docBuilder.newDocument();
TestCommand.java,TransformerFactory tf = TransformerFactory.newInstance();,if (TransformerFactory != null ) TransformerFactory tf = TransformerFactory.newInstance();
TestCommand.java,Transformer transformer = tf.newTransformer();,if (tf != null ) Transformer transformer = tf.newTransformer();
TestCommand.java,Document doc = testEl.getOwnerDocument();,if (testEl != null ) Document doc = testEl.getOwnerDocument();
TestCommand.java,String name = Strings.nullToEmpty(testResult.getTestName());,if (Strings != null ) String name = Strings.nullToEmpty(testResult.getTestName());
TestCommand.java,String time = Long.toString(testResult.getTime());,if (Long != null ) String time = Long.toString(testResult.getTime());
TestCommand.java,String message = Strings.nullToEmpty(testResult.getMessage());,if (Strings != null ) String message = Strings.nullToEmpty(testResult.getMessage());
TestCommand.java,String stacktrace = Strings.nullToEmpty(testResult.getStacktrace());,if (Strings != null ) String stacktrace = Strings.nullToEmpty(testResult.getStacktrace());
TestCommandTest.java,DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();,if (DocumentBuilderFactory != null ) DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
TestCommandTest.java,DocumentBuilder docBuilder = dbf.newDocumentBuilder();,if (dbf != null ) DocumentBuilder docBuilder = dbf.newDocumentBuilder();
TestCommandTest.java,Node firstChild = fieldEl.getFirstChild();,if (fieldEl != null ) Node firstChild = fieldEl.getFirstChild();
Main.java,this.repository = repositoryFactory.getRootRepository();,if (repositoryFactory != null ) this.repository = repositoryFactory.getRootRepository();
Main.java,Path canonicalRootPath = projectRoot.toRealPath();,if (projectRoot != null ) Path canonicalRootPath = projectRoot.toRealPath();
Main.java,Repository rootRepository = repositoryFactory.getRootRepository();,if (repositoryFactory != null ) Repository rootRepository = repositoryFactory.getRootRepository();
Main.java,BuckConfig buckConfig = rootRepository.getBuckConfig();,if (rootRepository != null ) BuckConfig buckConfig = rootRepository.getBuckConfig();
Parser.java,final Repository rootRepository = repositoryFactory.getRootRepository();,if (repositoryFactory != null ) final Repository rootRepository = repositoryFactory.getRootRepository();
Parser.java,this.repository = repositoryFactory.getRootRepository();,if (repositoryFactory != null ) this.repository = repositoryFactory.getRootRepository();
CrossRepoTargetsIntegrationTest.java,BuckConfig config = repositoryFactory.getRootRepository().getBuckConfig();,if (repositoryFactory != null ) BuckConfig config = repositoryFactory.getRootRepository().getBuckConfig();
CrossRepoTargetsIntegrationTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
ParserTest.java,repositoryFactory = new FakeRepositoryFactory(root.toPath());,if (FakeRepositoryFactory(root != null ) repositoryFactory = new FakeRepositoryFactory(root.toPath());
ParserTest.java,Repository repository = repositoryFactory.getRootRepository();,if (repositoryFactory != null ) Repository repository = repositoryFactory.getRootRepository();
ParserTest.java,filesystem = repository.getFilesystem();,if (repository != null ) filesystem = repository.getFilesystem();
ParserTest.java,Path rootPath = tempDir.getRoot().toPath();,if (tempDir != null ) Path rootPath = tempDir.getRoot().toPath();
ParserTest.java,Path rootPath = tempDir.getRoot().toPath();,if (tempDir != null ) Path rootPath = tempDir.getRoot().toPath();
SerializableAndroidAar.java,Path res = preBuiltAar.getRes();,if (preBuiltAar != null ) Path res = preBuiltAar.getRes();
SerializableAndroidAar.java,Path assets = preBuiltAar.getAssets();,if (preBuiltAar != null ) Path assets = preBuiltAar.getAssets();
AaptPackageResourcesTest.java,Set<Path> assetsDirectories = ImmutableSet.of(resourceOne.getAssets());,if (ImmutableSet != null ) Set<Path> assetsDirectories = ImmutableSet.of(resourceOne.getAssets());
Project.java,String binaryJar = prebuiltJar.getBinaryJar().toString();,if (prebuiltJar != null ) String binaryJar = prebuiltJar.getBinaryJar().toString();
JavaBuckConfig.java,File javacJar = new File(path.get());,if (File(path != null ) File javacJar = new File(path.get());
AbstractOCamlBuildContext.java,UnflavoredBuildTarget plainTarget = target.getUnflavoredBuildTarget();,if (target != null ) UnflavoredBuildTarget plainTarget = target.getUnflavoredBuildTarget();
AbstractOCamlBuildContext.java,context.ocamlDepTool = config.getOCamlDepTool().get();,if (config != null ) context.ocamlDepTool = config.getOCamlDepTool().get();
AbstractOCamlBuildContext.java,context.ocamlCompiler = config.getOCamlCompiler().get();,if (config != null ) context.ocamlCompiler = config.getOCamlCompiler().get();
AbstractOCamlBuildContext.java,context.ocamlBytecodeCompiler = config.getOCamlBytecodeCompiler().get();,if (config != null ) context.ocamlBytecodeCompiler = config.getOCamlBytecodeCompiler().get();
AbstractOCamlBuildContext.java,context.ocamlDebug = config.getOCamlDebug().get();,if (config != null ) context.ocamlDebug = config.getOCamlDebug().get();
AbstractOCamlBuildContext.java,context.yaccCompiler = config.getYaccCompiler().get();,if (config != null ) context.yaccCompiler = config.getYaccCompiler().get();
AbstractOCamlBuildContext.java,context.lexCompiler = config.getLexCompiler().get();,if (config != null ) context.lexCompiler = config.getLexCompiler().get();
AbstractOCamlBuildContext.java,context.input = inputPaths.toList();,if (inputPaths != null ) context.input = inputPaths.toList();
Project.java,List<Module> modules = Lists.newArrayList();,if (Lists != null ) List<Module> modules = Lists.newArrayList();
Project.java,LinkedHashSet<DependentModule> dependencies = Sets.newLinkedHashSet();,if (Sets != null ) LinkedHashSet<DependentModule> dependencies = Sets.newLinkedHashSet();
Project.java,jdkDependency = DependentModule.newInheritedJdk();,if (DependentModule != null ) jdkDependency = DependentModule.newInheritedJdk();
Project.java,jdkDependency = DependentModule.newIntelliJPluginJdk();,if (DependentModule != null ) jdkDependency = DependentModule.newIntelliJPluginJdk();
Project.java,jdkDependency = DependentModule.newStandardJdk();,if (DependentModule != null ) jdkDependency = DependentModule.newStandardJdk();
Project.java,List<DependentModule> dependenciesInOrder = Lists.newArrayList();,if (Lists != null ) List<DependentModule> dependenciesInOrder = Lists.newArrayList();
Project.java,List<DependentModule> nonLibraries = Lists.newArrayList();,if (Lists != null ) List<DependentModule> nonLibraries = Lists.newArrayList();
ProjectTest.java,DependentModule inheritedJdk = DependentModule.newInheritedJdk();,if (DependentModule != null ) DependentModule inheritedJdk = DependentModule.newInheritedJdk();
ProjectTest.java,List<Module> modules = new ArrayList<>(project.createModulesForProjectConfigs());,if (ArrayList<>(project != null ) List<Module> modules = new ArrayList<>(project.createModulesForProjectConfigs());
IjProject.java,serializedModule.name = module.getName();,if (module != null ) serializedModule.name = module.getName();
IjProject.java,serializedModule.pathToImlFile = module.getModuleImlFilePath();,if (module != null ) serializedModule.pathToImlFile = module.getModuleImlFilePath();
IjProject.java,serializedModule.moduleGenPath = module.getRelativeGenPath();,if (module != null ) serializedModule.moduleGenPath = module.getRelativeGenPath();
IjProject.java,String moduleRelativePath = moduleBasePath.relativize(path).toString();,if (moduleBasePath != null ) String moduleRelativePath = moduleBasePath.relativize(path).toString();
IjProject.java,module.moduleName = input.getName();,if (input != null ) module.moduleName = input.getName();
IjProject.java,module.name = input.getName();,if (input != null ) module.name = input.getName();
Project.java,modules = Lists.newArrayList(ijProject.getSerializedProjectDescription());,if (Lists != null ) modules = Lists.newArrayList(ijProject.getSerializedProjectDescription());
FakeProjectFilesystem.java,Path normalizedPath = path.normalize();,if (path != null ) Path normalizedPath = path.normalize();
FakeProjectFilesystem.java,Path normalizedPath = path.normalize();,if (path != null ) Path normalizedPath = path.normalize();
FakeProjectFilesystem.java,Path normalizedPath = path.normalize();,if (path != null ) Path normalizedPath = path.normalize();
FakeProjectFilesystem.java,Path normalizedPath = path.normalize();,if (path != null ) Path normalizedPath = path.normalize();
AppleConfig.java,Path appleDeveloperDirectory = getAppleDeveloperDirectorySupplier(processExecutor).get();,if (getAppleDeveloperDirectorySupplier(processExecutor) != null ) Path appleDeveloperDirectory = getAppleDeveloperDirectorySupplier(processExecutor).get();
AppleSdkDiscovery.java,ImmutableSet<Path> toolchainPaths = toolchainPathsBuilder.build();,if (toolchainPathsBuilder != null ) ImmutableSet<Path> toolchainPaths = toolchainPathsBuilder.build();
AppleSdkDiscovery.java,String toolchainId = toolchain.toString();,if (toolchain != null ) String toolchainId = toolchain.toString();
AppleSdkDiscovery.java,String result = version.toString();,if (version != null ) String result = version.toString();
KnownBuildRuleTypes.java,Path appleDeveloperDirectory = appleDeveloperDirectorySupplier.get();,if (appleDeveloperDirectorySupplier != null ) Path appleDeveloperDirectory = appleDeveloperDirectorySupplier.get();
KnownBuildRuleTypes.java,Path xcodeDir = appleDeveloperDirectory.getParent();,if (appleDeveloperDirectory != null ) Path xcodeDir = appleDeveloperDirectory.getParent();
AppleSdkDiscoveryTest.java,Path versionPlist = temp.newFile().toPath();,if (temp != null ) Path versionPlist = temp.newFile().toPath();
DLinkable.java,Path depPath = dep.getPathToOutputFile();,if (dep != null ) Path depPath = dep.getPathToOutputFile();
DLinkable.java,inputPaths = pathBuilder.build();,if (pathBuilder != null ) inputPaths = pathBuilder.build();
AbstractCommandRunner.java,Optional<Path> eventsOutputPath = options.getEventsOutputPath();,if (options != null ) Optional<Path> eventsOutputPath = options.getEventsOutputPath();
AbstractCommandRunner.java,BuckEventListener listener = new FileSerializationEventBusListener(eventsOutputPath.get());,if (FileSerializationEventBusListener(eventsOutputPath != null ) BuckEventListener listener = new FileSerializationEventBusListener(eventsOutputPath.get());
AbstractCommandRunner.java,BuildTargetParser buildTargetParser = params.getParser().getBuildTargetParser();,if (params != null ) BuildTargetParser buildTargetParser = params.getParser().getBuildTargetParser();
AdbHelper.java,final boolean installViaSd = options.shouldInstallViaSd();,if (options != null ) final boolean installViaSd = options.shouldInstallViaSd();
CacheCommand.java,List<String> arguments = options.getArguments();,if (options != null ) List<String> arguments = options.getArguments();
Command.java,command = valueOf(name.toUpperCase());,if (valueOf(name != null ) command = valueOf(name.toUpperCase());
Command.java,Optional<Command> fuzzyCommand = fuzzyMatch(name.toUpperCase());,if (fuzzyMatch(name != null ) Optional<Command> fuzzyCommand = fuzzyMatch(name.toUpperCase());
Command.java,command = fuzzyCommand.get();,if (fuzzyCommand != null ) command = fuzzyCommand.get();
Command.java,name = name.toUpperCase();,if (name != null ) name = name.toUpperCase();
Command.java,"int levenshteinDist = MoreStrings.getLevenshteinDistance(name, command.name());","if (command != null ) int levenshteinDist = MoreStrings.getLevenshteinDistance(name, command.name());"
InstallCommand.java,Build build = buildCommand.getBuild();,if (buildCommand != null ) Build build = buildCommand.getBuild();
Main.java,String name = command.name();,if (command != null ) String name = command.name();
Main.java,lengthOfLongestCommand = name.length();,if (name != null ) lengthOfLongestCommand = name.length();
Main.java,String name = command.name().toLowerCase();,if (command != null ) String name = command.name().toLowerCase();
Main.java,Path canonicalRootPath = projectRoot.toRealPath();,if (projectRoot != null ) Path canonicalRootPath = projectRoot.toRealPath();
Main.java,Repository rootRepository = repositoryFactory.getRootRepository();,if (repositoryFactory != null ) Repository rootRepository = repositoryFactory.getRootRepository();
Main.java,commandSemaphoreAcquired = commandSemaphore.tryAcquire();,if (commandSemaphore != null ) commandSemaphoreAcquired = commandSemaphore.tryAcquire();
Main.java,Command executingCommand = commandParseResult.getCommand().get();,if (commandParseResult != null ) Command executingCommand = commandParseResult.getCommand().get();
Main.java,String commandName = executingCommand.name().toLowerCase();,if (executingCommand != null ) String commandName = executingCommand.name().toLowerCase();
ProjectCommand.java,boolean combinedProject = options.getCombinedProject();,if (options != null ) boolean combinedProject = options.getCombinedProject();
ProjectCommandOptions.java,initialTargets = Lists.newArrayList();,if (Lists != null ) initialTargets = Lists.newArrayList();
QuickstartCommand.java,String projectDir = options.getDestDir().trim();,if (options != null ) String projectDir = options.getDestDir().trim();
QuickstartCommand.java,String sdkLocation = options.getAndroidSdkDir();,if (options != null ) String sdkLocation = options.getAndroidSdkDir();
RunCommand.java,String targetName = options.getTarget(params.getBuckConfig());,if (options != null ) String targetName = options.getTarget(params.getBuckConfig());
TargetsCommand.java,ImmutableSet<String> types = options.getTypes();,if (options != null ) ImmutableSet<String> types = options.getTypes();
TestCommand.java,"boolean matchesLabel = options.isMatchedByLabelOptions(buckConfig, rule.getLabels());","if (rule != null ) boolean matchesLabel = options.isMatchedByLabelOptions(buckConfig, rule.getLabels());"
TestCommand.java,String path = options.getPathToXmlTestOutput();,if (options != null ) String path = options.getPathToXmlTestOutput();
MainIntegrationTest.java,int exitCode = main.usage();,if (main != null ) int exitCode = main.usage();
AndroidAarDescription.java,javaBinaryArgs.mainClass = Optional.absent();,if (Optional != null ) javaBinaryArgs.mainClass = Optional.absent();
AndroidAarDescription.java,javaBinaryArgs.manifestFile = Optional.absent();,if (Optional != null ) javaBinaryArgs.manifestFile = Optional.absent();
AndroidAarDescription.java,javaBinaryArgs.mergeManifests = Optional.absent();,if (Optional != null ) javaBinaryArgs.mergeManifests = Optional.absent();
AndroidAarDescription.java,javaBinaryArgs.metaInfDirectory = Optional.absent();,if (Optional != null ) javaBinaryArgs.metaInfDirectory = Optional.absent();
AndroidAarDescription.java,javaBinaryArgs.blacklist = Optional.absent();,if (Optional != null ) javaBinaryArgs.blacklist = Optional.absent();
IjModuleGraph.java,IjModule module = rulesToModules.get(node.getBuildTarget());,if (rulesToModules != null ) IjModule module = rulesToModules.get(node.getBuildTarget());
IjProject.java,serializedModule.name = module.getModuleName();,if (module != null ) serializedModule.name = module.getModuleName();
IjProject.java,module.moduleName = input.getModuleName();,if (input != null ) module.moduleName = input.getModuleName();
IjModuleFactory.java,ProjectConfigDescription.Arg arg = target.getConstructorArg();,if (target != null ) ProjectConfigDescription.Arg arg = target.getConstructorArg();
IjModuleFactory.java,Path baseTargetPath = target.getBuildTarget().getBasePath();,if (target != null ) Path baseTargetPath = target.getBuildTarget().getBasePath();
IjModuleTest.java,IjModule inferredModule = builder.build();,if (builder != null ) IjModule inferredModule = builder.build();
IjModuleTest.java,IjModule overrideModule = builder.addFolderOverride(overrideFolder).build();,if (builder != null ) IjModule overrideModule = builder.addFolderOverride(overrideFolder).build();
NdkLibraryDescription.java,final Path buildRulePath = params.getBuildTarget().getBasePath();,if (params != null ) final Path buildRulePath = params.getBuildTarget().getBasePath();
ProjectTest.java,List<Module> modules = new ArrayList<Module>(project.createModulesForProjectConfigs());,if (ArrayList<Module>(project != null ) List<Module> modules = new ArrayList<Module>(project.createModulesForProjectConfigs());
AndroidBinaryGraphEnhancer.java,finalDeps = enhancedDeps.build();,if (enhancedDeps != null ) finalDeps = enhancedDeps.build();
AndroidBinaryGraphEnhancerTest.java,Iterator<BuildRule> depsForPreDexingIter = dexMergeRule.getDeps().iterator();,if (dexMergeRule != null ) Iterator<BuildRule> depsForPreDexingIter = dexMergeRule.getDeps().iterator();
AndroidBinaryGraphEnhancerTest.java,BuildRule shouldBeAaptPackageResourcesRule = depsForPreDexingIter.next();,if (depsForPreDexingIter != null ) BuildRule shouldBeAaptPackageResourcesRule = depsForPreDexingIter.next();
ProjectFilesystem.java,File file = full.toFile();,if (full != null ) File file = full.toFile();
Genrule.java,String localPath = entry.getKey().toString();,if (entry != null ) String localPath = entry.getKey().toString();
AppleBundle.java,String binaryName = getBuildTarget().getShortName();,if (getBuildTarget() != null ) String binaryName = getBuildTarget().getShortName();
UninstallCommand.java,Parser parser = params.getParser();,if (params != null ) Parser parser = params.getParser();
UninstallCommand.java,BuildTargetParser buildTargetParser = parser.getBuildTargetParser();,if (parser != null ) BuildTargetParser buildTargetParser = parser.getBuildTargetParser();
BuildReport.java,Optional<BuildRuleSuccess> success = entry.getValue();,if (entry != null ) Optional<BuildRuleSuccess> success = entry.getValue();
BuildReport.java,Optional<BuildRuleSuccess> success = entry.getValue();,if (entry != null ) Optional<BuildRuleSuccess> success = entry.getValue();
CachingBuildEngine.java,BuildRuleSuccess.Type success = result.getSuccess();,if (result != null ) BuildRuleSuccess.Type success = result.getSuccess();
AppleAssetCatalogDescription.java,ProjectFilesystem projectFilesystem = params.getProjectFilesystem();,if (params != null ) ProjectFilesystem projectFilesystem = params.getProjectFilesystem();
IjModuleGraph.java,IjLibraryFactory libraryFactory = IjLibraryFactory.create(targetGraph.getNodes());,if (IjLibraryFactory != null ) IjLibraryFactory libraryFactory = IjLibraryFactory.create(targetGraph.getNodes());
IjProject.java,Optional<Path> jarPath = resolver.getRelativePath(library.getBinaryJar());,if (resolver != null ) Optional<Path> jarPath = resolver.getRelativePath(library.getBinaryJar());
CachingBuildEngineTest.java,BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus buckEventBus = BuckEventBusFactory.newInstance();
CachingBuildEngineTest.java,BuildResult result = buildResult.get();,if (buildResult != null ) BuildResult result = buildResult.get();
CachingBuildEngine.java,SettableFuture<BuildRuleSuccess> newFuture = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<BuildRuleSuccess> newFuture = SettableFuture.create();
CachingBuildEngine.java,"BuildRuleSuccess buildRuleSuccess = new BuildRuleSuccess(rule, result.getSuccess());","if (result != null ) BuildRuleSuccess buildRuleSuccess = new BuildRuleSuccess(rule, result.getSuccess());"
CachingBuildEngineTest.java,BuildRuleSuccess success = result.get();,if (result != null ) BuildRuleSuccess success = result.get();
CachingBuildEngineTest.java,BuildRuleSuccess success = result.get();,if (result != null ) BuildRuleSuccess success = result.get();
CachingBuildEngineTest.java,BuildRuleSuccess success = result.get();,if (result != null ) BuildRuleSuccess success = result.get();
CachingBuildEngineTest.java,BuildRuleSuccess success = result.get();,if (result != null ) BuildRuleSuccess success = result.get();
CachingBuildEngineTest.java,BuildRuleSuccess success = result.get();,if (result != null ) BuildRuleSuccess success = result.get();
CachingBuildEngineTest.java,BuildRuleSuccess success = result.get();,if (result != null ) BuildRuleSuccess success = result.get();
CachingBuildEngineTest.java,BuildRuleSuccess success = result.get();,if (result != null ) BuildRuleSuccess success = result.get();
Genrule.java,localPath = new File(localPath).getName();,if (File(localPath) != null ) localPath = new File(localPath).getName();
BuckConfig.java,this.sectionsToEntries = sectionsToEntriesBuilder.build();,if (sectionsToEntriesBuilder != null ) this.sectionsToEntries = sectionsToEntriesBuilder.build();
AbstractCommandRunner.java,ParserAndOptions<T> parserAndOptions = createParser(params.getBuckConfig());,if (createParser(params != null ) ParserAndOptions<T> parserAndOptions = createParser(params.getBuckConfig());
AuditOwnerCommand.java,ParserConfig parserConfig = new ParserConfig(options.getBuckConfig());,if (ParserConfig(options != null ) ParserConfig parserConfig = new ParserConfig(options.getBuckConfig());
AuditRulesCommand.java,ParserConfig parserConfig = new ParserConfig(options.getBuckConfig());,if (ParserConfig(options != null ) ParserConfig parserConfig = new ParserConfig(options.getBuckConfig());
BuildCommand.java,"buildTargets = getBuildTargets(params, options.getArgumentsFormattedAsBuildTargets());","if (options != null ) buildTargets = getBuildTargets(params, options.getArgumentsFormattedAsBuildTargets());"
BuildCommand.java,ImmutableSet<String> aliases = options.getBuckConfig().getAliases();,if (options != null ) ImmutableSet<String> aliases = options.getBuckConfig().getAliases();
CleanCommand.java,CleanCommandOptions options = new CleanCommandOptions(params.getBuckConfig());,if (CleanCommandOptions(params != null ) CleanCommandOptions options = new CleanCommandOptions(params.getBuckConfig());
ProjectCommand.java,ProjectPredicates projectPredicates = ProjectPredicates.forIde(options.getIde());,if (ProjectPredicates != null ) ProjectPredicates projectPredicates = ProjectPredicates.forIde(options.getIde());
ProjectCommand.java,BuildCommandOptions buildCommandOptions = new BuildCommandOptions(options.getBuckConfig());,if (BuildCommandOptions(options != null ) BuildCommandOptions buildCommandOptions = new BuildCommandOptions(options.getBuckConfig());
RunCommand.java,BuildCommandOptions buildCommandOptions = new BuildCommandOptions(options.getBuckConfig());,if (BuildCommandOptions(options != null ) BuildCommandOptions buildCommandOptions = new BuildCommandOptions(options.getBuckConfig());
RunCommand.java,String targetName = options.getTarget();,if (options != null ) String targetName = options.getTarget();
TargetsCommand.java,ParserConfig parserConfig = new ParserConfig(options.getBuckConfig());,if (ParserConfig(options != null ) ParserConfig parserConfig = new ParserConfig(options.getBuckConfig());
TestCommand.java,ParserConfig parserConfig = new ParserConfig(options.getBuckConfig());,if (ParserConfig(options != null ) ParserConfig parserConfig = new ParserConfig(options.getBuckConfig());
TestCommand.java,ImmutableSet<String> allTargets = options.getArgumentsFormattedAsBuildTargets();,if (options != null ) ImmutableSet<String> allTargets = options.getArgumentsFormattedAsBuildTargets();
TestCommand.java,boolean matchesLabel = options.isMatchedByLabelOptions(rule.getLabels());,if (options != null ) boolean matchesLabel = options.isMatchedByLabelOptions(rule.getLabels());
BuildCommandOptionsTest.java,int count = options.getNumThreads();,if (options != null ) int count = options.getNumThreads();
AbstractCommandRunner.java,this.console = params.getConsole();,if (params != null ) this.console = params.getConsole();
AbstractCommandRunner.java,this.repository = params.getRepository();,if (params != null ) this.repository = params.getRepository();
AbstractCommandRunner.java,this.artifactCacheFactory = params.getArtifactCacheFactory();,if (params != null ) this.artifactCacheFactory = params.getArtifactCacheFactory();
AbstractCommandRunner.java,this.parser = params.getParser();,if (params != null ) this.parser = params.getParser();
AbstractCommandRunner.java,this.eventBus = params.getBuckEventBus();,if (params != null ) this.eventBus = params.getBuckEventBus();
AbstractCommandRunner.java,this.platform = params.getPlatform();,if (params != null ) this.platform = params.getPlatform();
AbstractCommandRunner.java,this.androidPlatformTargetSupplier = params.getAndroidPlatformTargetSupplier();,if (params != null ) this.androidPlatformTargetSupplier = params.getAndroidPlatformTargetSupplier();
AbstractCommandRunner.java,this.environment = params.getEnvironment();,if (params != null ) this.environment = params.getEnvironment();
AbstractCommandRunner.java,this.objectMapper = params.getObjectMapper();,if (params != null ) this.objectMapper = params.getObjectMapper();
AbstractCommandRunner.java,this.processManager = params.getProcessManager();,if (params != null ) this.processManager = params.getProcessManager();
AbstractCommandRunner.java,BuildTargetParser buildTargetParser = getParser().getBuildTargetParser();,if (getParser() != null ) BuildTargetParser buildTargetParser = getParser().getBuildTargetParser();
AuditCommandRunner.java,console = params.getConsole();,if (params != null ) console = params.getConsole();
AuditOwnerCommand.java,PrintStream out = console.getStdOut();,if (console != null ) PrintStream out = console.getStdOut();
AuditOwnerCommand.java,Ansi ansi = console.getAnsi();,if (console != null ) Ansi ansi = console.getAnsi();
AuditRulesCommand.java,PrintStream out = console.getStdOut();,if (console != null ) PrintStream out = console.getStdOut();
AuditRulesCommand.java,PrintStream out = console.getStdOut();,if (console != null ) PrintStream out = console.getStdOut();
BuildCommand.java,buildTargets = getBuildTargets(options.getArgumentsFormattedAsBuildTargets());,if (getBuildTargets(options != null ) buildTargets = getBuildTargets(options.getArgumentsFormattedAsBuildTargets());
CleanCommand.java,console = params.getConsole();,if (params != null ) console = params.getConsole();
CleanCommand.java,filesystem = params.getRepository().getFilesystem();,if (params != null ) filesystem = params.getRepository().getFilesystem();
ProjectCommand.java,ActionGraph actionGraph = targetGraphTransformer.apply(targetGraphAndTargets.getTargetGraph());,if (targetGraphTransformer != null ) ActionGraph actionGraph = targetGraphTransformer.apply(targetGraphAndTargets.getTargetGraph());
ServerCommandRunner.java,console = params.getConsole();,if (params != null ) console = params.getConsole();
ServerStatusCommand.java,Optional<WebServer> webServer = getCommandRunnerParams().getWebServer();,if (getCommandRunnerParams() != null ) Optional<WebServer> webServer = getCommandRunnerParams().getWebServer();
ServerStatusCommand.java,Console console = getCommandRunnerParams().getConsole();,if (getCommandRunnerParams() != null ) Console console = getCommandRunnerParams().getConsole();
TestCommand.java,Verbosity verbosity = console.getVerbosity();,if (console != null ) Verbosity verbosity = console.getVerbosity();
AuditDependenciesCommandTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
Parser.java,this.enforceBuckPackageBoundary = parserConfig.getEnforceBuckPackageBoundary();,if (parserConfig != null ) this.enforceBuckPackageBoundary = parserConfig.getEnforceBuckPackageBoundary();
Parser.java,this.tempFilePatterns = parserConfig.getTempFilePatterns();,if (parserConfig != null ) this.tempFilePatterns = parserConfig.getTempFilePatterns();
Parser.java,this.state = new CachedState(parserConfig.getBuildFileName());,if (CachedState(parserConfig != null ) this.state = new CachedState(parserConfig.getBuildFileName());
AbstractCommandOptionsTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
ProjectBuildFileParser.java,this.projectRoot = projectFilesystem.getRootPath();,if (projectFilesystem != null ) this.projectRoot = projectFilesystem.getRootPath();
AppleTestDescription.java,Set<Flavor> extraFlavors = ImmutableSet.of();,if (ImmutableSet != null ) Set<Flavor> extraFlavors = ImmutableSet.of();
AppleDescriptions.java,BuildTarget target = params.getBuildTarget();,if (params != null ) BuildTarget target = params.getBuildTarget();
AppleDescriptions.java,boolean useBuckHeaderMaps = args.getUseBuckHeaderMaps();,if (args != null ) boolean useBuckHeaderMaps = args.getUseBuckHeaderMaps();
AppleDescriptions.java,"Path headerPathPrefix = AppleDescriptions.getHeaderPathPrefix(args, params.getBuildTarget());","if (params != null ) Path headerPathPrefix = AppleDescriptions.getHeaderPathPrefix(args, params.getBuildTarget());"
AppleDescriptions.java,headersToCopy = ImmutableMap.of();,if (ImmutableMap != null ) headersToCopy = ImmutableMap.of();
AppleDescriptions.java,headersToCopy = headersToCopyBuilder.build();,if (headersToCopyBuilder != null ) headersToCopy = headersToCopyBuilder.build();
AppleDescriptions.java,Path root = getPathToHeaders(params.getBuildTarget());,if (getPathToHeaders(params != null ) Path root = getPathToHeaders(params.getBuildTarget());
ServerStatusCommand.java,Optional<Integer> port = webServer.get().getPort();,if (webServer != null ) Optional<Integer> port = webServer.get().getPort();
Main.java,PrintStream stdErr = console.getStdErr();,if (console != null ) PrintStream stdErr = console.getStdErr();
HttpArtifactCache.java,actualHashCode = hashingInput.hash();,if (hashingInput != null ) actualHashCode = hashingInput.hash();
HttpArtifactCache.java,InputStream input = projectFilesystem.newFileInputStream(file.toPath());,if (projectFilesystem != null ) InputStream input = projectFilesystem.newFileInputStream(file.toPath());
IjLibraryFactory.java,Optional<IjLibrary> libraryOptional = getLibrary(dep.getBuildTarget());,if (getLibrary(dep != null ) Optional<IjLibrary> libraryOptional = getLibrary(dep.getBuildTarget());
AuditClasspathCommandTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
AuditClasspathCommandTest.java,Repository repository = new TestRepositoryBuilder().build();,if (TestRepositoryBuilder() != null ) Repository repository = new TestRepositoryBuilder().build();
KnownBuildRuleTypes.java,Optional<String> defaultPlatform = cxxBuckConfig.getDefaultPlatform();,if (cxxBuckConfig != null ) Optional<String> defaultPlatform = cxxBuckConfig.getDefaultPlatform();
KnownBuildRuleTypesTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
KnownBuildRuleTypes.java,Optional<String> defaultPlatform = cxxBuckConfig.getDefaultPlatform();,if (cxxBuckConfig != null ) Optional<String> defaultPlatform = cxxBuckConfig.getDefaultPlatform();
KnownBuildRuleTypes.java,cxxPlatformsMap = cxxPlatformsBuilder.build();,if (cxxPlatformsBuilder != null ) cxxPlatformsMap = cxxPlatformsBuilder.build();
KnownBuildRuleTypes.java,cxxPlatformsMap = cxxPlatformsBuilder.build();,if (cxxPlatformsBuilder != null ) cxxPlatformsMap = cxxPlatformsBuilder.build();
AppleSdkDiscovery.java,AppleSdk sdk = sdkBuilder.build();,if (sdkBuilder != null ) AppleSdk sdk = sdkBuilder.build();
AppleSdkDiscovery.java,ImmutableSet<Path> toolchainPaths = toolchainPathsBuilder.build();,if (toolchainPathsBuilder != null ) ImmutableSet<Path> toolchainPaths = toolchainPathsBuilder.build();
AppleSdkDiscovery.java,AppleSdkPaths.Builder xcodePathsBuilder = AppleSdkPaths.builder();,if (AppleSdkPaths != null ) AppleSdkPaths.Builder xcodePathsBuilder = AppleSdkPaths.builder();
ProjectGenerator.java,HeaderMap.Builder builder = HeaderMap.builder();,if (HeaderMap != null ) HeaderMap.Builder builder = HeaderMap.builder();
ProjectGeneratorTest.java,List<Path> headerMaps = projectGenerator.getGeneratedHeaderMaps();,if (projectGenerator != null ) List<Path> headerMaps = projectGenerator.getGeneratedHeaderMaps();
ProjectGeneratorTest.java,List<Path> headerMaps = projectGenerator.getGeneratedHeaderMaps();,if (projectGenerator != null ) List<Path> headerMaps = projectGenerator.getGeneratedHeaderMaps();
ProjectGeneratorTest.java,List<Path> headerMaps = projectGenerator.getGeneratedHeaderMaps();,if (projectGenerator != null ) List<Path> headerMaps = projectGenerator.getGeneratedHeaderMaps();
CachingBuildEngine.java,"BuildRuleSuccess buildRuleSuccess = new BuildRuleSuccess(rule, result.getSuccess());","if (result != null ) BuildRuleSuccess buildRuleSuccess = new BuildRuleSuccess(rule, result.getSuccess());"
Main.java,outArray = ab.getBytes();,if (ab != null ) outArray = ab.getBytes();
GenParcelable.java,String generatedJava = new Generator(parcelableClass).generate();,if (Generator(parcelableClass) != null ) String generatedJava = new Generator(parcelableClass).generate();
GenParcelable.java,File outputPath = getOutputPathForParcelableClass(parcelableClass).toFile();,if (getOutputPathForParcelableClass(parcelableClass) != null ) File outputPath = getOutputPathForParcelableClass(parcelableClass).toFile();
Generator.java,String classDeclaration = clazz.getClassName();,if (clazz != null ) String classDeclaration = clazz.getClassName();
Generator.java,"classDeclaration += "" extends "" + clazz.getSuperClassName();","if (clazz != null ) classDeclaration += "" extends "" + clazz.getSuperClassName();"
Generator.java,final String defaultFieldVisibility = clazz.getDefaultFieldVisibility();,if (clazz != null ) final String defaultFieldVisibility = clazz.getDefaultFieldVisibility();
Generator.java,String visibility = field.getVisibility();,if (field != null ) String visibility = field.getVisibility();
Generator.java,String defaultValue = field.getDefaultValue();,if (field != null ) String defaultValue = field.getDefaultValue();
Generator.java,String rawSuperParams = Strings.nullToEmpty(clazz.getRawSuperParams());,if (Strings != null ) String rawSuperParams = Strings.nullToEmpty(clazz.getRawSuperParams());
Generator.java,final String defaultFieldVisibility = clazz.getDefaultFieldVisibility();,if (clazz != null ) final String defaultFieldVisibility = clazz.getDefaultFieldVisibility();
Generator.java,String visibility = field.getVisibility();,if (field != null ) String visibility = field.getVisibility();
Generator.java,String rawSuperParams = Strings.nullToEmpty(clazz.getRawSuperParams());,if (Strings != null ) String rawSuperParams = Strings.nullToEmpty(clazz.getRawSuperParams());
Generator.java,String type = field.getType();,if (field != null ) String type = field.getType();
Generator.java,String fieldName = field.getName();,if (field != null ) String fieldName = field.getName();
Generator.java,String type = field.getType();,if (field != null ) String type = field.getType();
Generator.java,String fieldName = field.getName();,if (field != null ) String fieldName = field.getName();
Generator.java,String creatorClassName = clazz.getCreatorClassName();,if (clazz != null ) String creatorClassName = clazz.getCreatorClassName();
ParcelableClass.java,this.imports = importsBuilder.build();,if (importsBuilder != null ) this.imports = importsBuilder.build();
Parser.java,Document doc = XmlDomParser.parse(xml.toFile());,if (XmlDomParser != null ) Document doc = XmlDomParser.parse(xml.toFile());
Parser.java,String importsText = importsElement.getTextContent();,if (importsElement != null ) String importsText = importsElement.getTextContent();
GeneratedStudent.java,this.teachers = ImmutableList.of();,if (ImmutableList != null ) this.teachers = ImmutableList.of();
GeneratedStudent.java,this.id = parcel.readInt();,if (parcel != null ) this.id = parcel.readInt();
GeneratedStudent.java,this.name = parcel.readString();,if (parcel != null ) this.name = parcel.readString();
GeneratedStudent.java,this.gpa = parcel.readFloat();,if (parcel != null ) this.gpa = parcel.readFloat();
GeneratedStudent.java,this.daysOfSchoolLeft = parcel.readByte();,if (parcel != null ) this.daysOfSchoolLeft = parcel.readByte();
GeneratedStudent.java,this.principal = parcel.readParcelable(Principal.class.getClassLoader());,if (parcel != null ) this.principal = parcel.readParcelable(Principal.class.getClassLoader());
GeneratedStudent.java,this.grades = parcel.createStringArrayList();,if (parcel != null ) this.grades = parcel.createStringArrayList();
GeneratedStudent.java,this.schedule = parcel.createStringArray();,if (parcel != null ) this.schedule = parcel.createStringArray();
GeneratedStudent.java,this.teachers = Lists.newArrayList();,if (Lists != null ) this.teachers = Lists.newArrayList();
AnnotationMirror.java,this.annotations = Maps.newTreeMap();,if (Maps != null ) this.annotations = Maps.newTreeMap();
CxxCompilationDatabase.java,List<JsonSerializableDatabaseEntry> entries = Lists.newArrayList();,if (Lists != null ) List<JsonSerializableDatabaseEntry> entries = Lists.newArrayList();
DexMerger.java,TableOfContents aContents = dexA.getTableOfContents();,if (dexA != null ) TableOfContents aContents = dexA.getTableOfContents();
DexMerger.java,TableOfContents bContents = dexB.getTableOfContents();,if (dexB != null ) TableOfContents bContents = dexB.getTableOfContents();
DexMerger.java,TableOfContents.Section aSection = getSection(dexA.getTableOfContents());,if (getSection(dexA != null ) TableOfContents.Section aSection = getSection(dexA.getTableOfContents());
DexMerger.java,TableOfContents.Section bSection = getSection(dexB.getTableOfContents());,if (getSection(dexB != null ) TableOfContents.Section bSection = getSection(dexB.getTableOfContents());
DexMerger.java,aOffset = inA.getPosition();,if (inA != null ) aOffset = inA.getPosition();
DexMerger.java,bOffset = inB.getPosition();,if (inB != null ) bOffset = inB.getPosition();
WorkspaceAndProjectGenerator.java,orderedTargetNodes = ImmutableSet.of();,if (ImmutableSet != null ) orderedTargetNodes = ImmutableSet.of();
WorkspaceAndProjectGenerator.java,groupsBuilder = ImmutableMultimap.builder();,if (ImmutableMultimap != null ) groupsBuilder = ImmutableMultimap.builder();
SchemeGenerator.java,"Element refElem = serializeBuildableReference(doc, launchAction.getBuildableReference());","if (launchAction != null ) Element refElem = serializeBuildableReference(doc, launchAction.getBuildableReference());"
AppleDescriptions.java,"Path headerPathPrefix = AppleDescriptions.getHeaderPathPrefix(args, params.getBuildTarget());","if (params != null ) Path headerPathPrefix = AppleDescriptions.getHeaderPathPrefix(args, params.getBuildTarget());"
AppleDescriptions.java,this.includePaths = ImmutableSet.builder();,if (ImmutableSet != null ) this.includePaths = ImmutableSet.builder();
AppleDescriptions.java,this.deps = ImmutableSortedSet.naturalOrder();,if (ImmutableSortedSet != null ) this.deps = ImmutableSortedSet.naturalOrder();
AppleDescriptions.java,UnflavoredBuildTarget buildTarget = node.getBuildTarget().checkUnflavored();,if (node != null ) UnflavoredBuildTarget buildTarget = node.getBuildTarget().checkUnflavored();
AppleDescriptions.java,SymlinkTree headersRule = (SymlinkTree) buildRule.get();,if (buildRule != null ) SymlinkTree headersRule = (SymlinkTree) buildRule.get();
AppleDescriptions.java,Optional<Path> headersDirectory = headersRule.getRootOfSymlinksDirectory();,if (headersRule != null ) Optional<Path> headersDirectory = headersRule.getRootOfSymlinksDirectory();
CompilationDatabase.java,HeaderMap.Builder builder = HeaderMap.builder();,if (HeaderMap != null ) HeaderMap.Builder builder = HeaderMap.builder();
CompilationDatabase.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
CompilationDatabase.java,HeaderMap headerMap = builder.build();,if (builder != null ) HeaderMap headerMap = builder.build();
CompilationDatabase.java,List<JsonSerializableDatabaseEntry> entries = Lists.newArrayList();,if (Lists != null ) List<JsonSerializableDatabaseEntry> entries = Lists.newArrayList();
CompilationDatabase.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
CompilationDatabase.java,Path sysroot = appleSdkPaths.getSdkPath();,if (appleSdkPaths != null ) Path sysroot = appleSdkPaths.getSdkPath();
CompilationDatabase.java,Optional<SourceTreePath> sourceTreePath = framework.getSourceTreePath();,if (framework != null ) Optional<SourceTreePath> sourceTreePath = framework.getSourceTreePath();
CompilationDatabase.java,Path iquoteArg = internalHeaderMap.get();,if (internalHeaderMap != null ) Path iquoteArg = internalHeaderMap.get();
CompilationDatabaseTest.java,testPrivateHeaders = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) testPrivateHeaders = ImmutableSortedSet.of();
CxxCompilationDatabase.java,this.deps = ImmutableSortedSet.naturalOrder();,if (ImmutableSortedSet != null ) this.deps = ImmutableSortedSet.naturalOrder();
CxxCompilationDatabase.java,this.compileRules = ImmutableSortedSet.naturalOrder();,if (ImmutableSortedSet != null ) this.compileRules = ImmutableSortedSet.naturalOrder();
CxxCompilationDatabase.java,UnflavoredBuildTarget unflavoredTarget = node.getBuildTarget().getUnflavoredBuildTarget();,if (node != null ) UnflavoredBuildTarget unflavoredTarget = node.getBuildTarget().getUnflavoredBuildTarget();
CxxCompilationDatabase.java,Iterator<BuildRule> allBuildRulesIterator = buildRuleResolver.getBuildRules().iterator();,if (buildRuleResolver != null ) Iterator<BuildRule> allBuildRulesIterator = buildRuleResolver.getBuildRules().iterator();
CxxCompilationDatabase.java,BuildRule buildRule = allBuildRulesIterator.next();,if (allBuildRulesIterator != null ) BuildRule buildRule = allBuildRulesIterator.next();
CxxCompilationDatabase.java,BuildTarget target = buildRule.getBuildTarget();,if (buildRule != null ) BuildTarget target = buildRule.getBuildTarget();
SymlinkTree.java,List<Path> keyList = Lists.newArrayList(links.keySet());,if (Lists != null ) List<Path> keyList = Lists.newArrayList(links.keySet());
DefaultDirectedAcyclicGraph.java,this.nodes = graph.createImmutableCopyOfNodes();,if (graph != null ) this.nodes = graph.createImmutableCopyOfNodes();
DefaultDirectedAcyclicGraph.java,this.outgoingEdges = graph.createImmutableCopyOfOutgoingEdges();,if (graph != null ) this.outgoingEdges = graph.createImmutableCopyOfOutgoingEdges();
DefaultDirectedAcyclicGraph.java,this.incomingEdges = graph.createImmutableCopyOfIncomingEdges();,if (graph != null ) this.incomingEdges = graph.createImmutableCopyOfIncomingEdges();
Module.java,List<SourceFolder> sourceFolders = Lists.newArrayList();,if (Lists != null ) List<SourceFolder> sourceFolders = Lists.newArrayList();
ProjectTest.java,List<Module> modules = project.createModulesForProjectConfigs();,if (project != null ) List<Module> modules = project.createModulesForProjectConfigs();
NdkBuildStep.java,this.maxJobCount = Runtime.getRuntime().availableProcessors();,if (Runtime != null ) this.maxJobCount = Runtime.getRuntime().availableProcessors();
CxxDescriptionEnhancer.java,Description<T> description = node.getDescription();,if (node != null ) Description<T> description = node.getDescription();
CxxDescriptionEnhancer.java,T args = node.getConstructorArg();,if (node != null ) T args = node.getConstructorArg();
CxxLibraryDescriptionTest.java,"Path staticLib = CxxDescriptionEnhancer.getStaticLibraryPath(target, cxxPlatform.getFlavor());","if (cxxPlatform != null ) Path staticLib = CxxDescriptionEnhancer.getStaticLibraryPath(target, cxxPlatform.getFlavor());"
AndroidBinaryGraphEnhancer.java,String manifestPackageName = manifestReader.getPackage();,if (manifestReader != null ) String manifestPackageName = manifestReader.getPackage();
AndroidBinaryGraphEnhancer.java,String manifestVersionCode = manifestReader.getVersionCode();,if (manifestReader != null ) String manifestVersionCode = manifestReader.getVersionCode();
AndroidBinaryGraphEnhancer.java,String manifestVersionName = manifestReader.getVersionName();,if (manifestReader != null ) String manifestVersionName = manifestReader.getVersionName();
DefaultAndroidManifestReaderTest.java,String versionName = manifestReader.getVersionName();,if (manifestReader != null ) String versionName = manifestReader.getVersionName();
AndroidAarDescription.java,ImmutableAndroidPackageableCollection packageableCollection = collector.build();,if (collector != null ) ImmutableAndroidPackageableCollection packageableCollection = collector.build();
AndroidBinary.java,ImmutableExopackageInfo.Builder builder = ImmutableExopackageInfo.builder();,if (ImmutableExopackageInfo != null ) ImmutableExopackageInfo.Builder builder = ImmutableExopackageInfo.builder();
AndroidBinaryGraphEnhancer.java,ImmutableAndroidPackageableCollection packageableCollection = collector.build();,if (collector != null ) ImmutableAndroidPackageableCollection packageableCollection = collector.build();
NdkCxxPlatforms.java,ImmutableCxxPlatform.Builder cxxPlatformBuilder = ImmutableCxxPlatform.builder();,if (ImmutableCxxPlatform != null ) ImmutableCxxPlatform.Builder cxxPlatformBuilder = ImmutableCxxPlatform.builder();
AppleSdkDiscovery.java,ImmutableAppleSdk sdk = sdkBuilder.build();,if (sdkBuilder != null ) ImmutableAppleSdk sdk = sdkBuilder.build();
AppleSdkDiscovery.java,ImmutableAppleSdkPaths.Builder xcodePathsBuilder = ImmutableAppleSdkPaths.builder();,if (ImmutableAppleSdkPaths != null ) ImmutableAppleSdkPaths.Builder xcodePathsBuilder = ImmutableAppleSdkPaths.builder();
AppleSdkDiscovery.java,ImmutableAppleSdk mostRecentSdkForPlatform = orderedSdksForPlatform.get(platform).last();,if (orderedSdksForPlatform != null ) ImmutableAppleSdk mostRecentSdkForPlatform = orderedSdksForPlatform.get(platform).last();
CxxDescriptionEnhancer.java,lexYaccSources = ImmutableCxxHeaderSourceSpec.builder().build();,if (ImmutableCxxHeaderSourceSpec != null ) lexYaccSources = ImmutableCxxHeaderSourceSpec.builder().build();
CxxPlatforms.java,ImmutableCxxPlatform.Builder builder = ImmutableCxxPlatform.builder();,if (ImmutableCxxPlatform != null ) ImmutableCxxPlatform.Builder builder = ImmutableCxxPlatform.builder();
AbstractJavacOptions.java,ImmutableJavacOptions.Builder builder = ImmutableJavacOptions.builder();,if (ImmutableJavacOptions != null ) ImmutableJavacOptions.Builder builder = ImmutableJavacOptions.builder();
BuildTargetParser.java,ImmutableBuildTarget.Builder builder = BuildTarget.builder(unflavoredBuilder.build());,if (BuildTarget != null ) ImmutableBuildTarget.Builder builder = BuildTarget.builder(unflavoredBuilder.build());
ShellStep.java,ImmutableProcessExecutorParams.Builder builder = ImmutableProcessExecutorParams.builder();,if (ImmutableProcessExecutorParams != null ) ImmutableProcessExecutorParams.Builder builder = ImmutableProcessExecutorParams.builder();
AppleDescriptions.java,output.soname = Optional.absent();,if (Optional != null ) output.soname = Optional.absent();
DBuckConfig.java,compilerPath = compiler.get();,if (compiler != null ) compilerPath = compiler.get();
AppleResource.java,this.variants = variantsBuilder.build();,if (variantsBuilder != null ) this.variants = variantsBuilder.build();
AppleResource.java,this.variants = ImmutableMap.of();,if (ImmutableMap != null ) this.variants = ImmutableMap.of();
AppleResource.java,BuildTarget target = params.getBuildTarget();,if (params != null ) BuildTarget target = params.getBuildTarget();
AppleResourceTest.java,AppleResourceDescription.Arg args = new AppleResourceDescription.Arg();,if (AppleResourceDescription != null ) AppleResourceDescription.Arg args = new AppleResourceDescription.Arg();
AppleResourceTest.java,args.dirs = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) args.dirs = ImmutableSortedSet.of();
AppleResourceTest.java,args.files = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) args.files = ImmutableSortedSet.of();
AppleResourceTest.java,args.variants = Optional.absent();,if (Optional != null ) args.variants = Optional.absent();
AppleResourceTest.java,AppleResourceDescription.Arg args = new AppleResourceDescription.Arg();,if (AppleResourceDescription != null ) AppleResourceDescription.Arg args = new AppleResourceDescription.Arg();
AppleResourceTest.java,args.dirs = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) args.dirs = ImmutableSortedSet.of();
AppleResourceTest.java,args.variants = Optional.absent();,if (Optional != null ) args.variants = Optional.absent();
AppleResourceTest.java,AppleResourceDescription.Arg args = new AppleResourceDescription.Arg();,if (AppleResourceDescription != null ) AppleResourceDescription.Arg args = new AppleResourceDescription.Arg();
AppleResourceTest.java,args.files = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) args.files = ImmutableSortedSet.of();
AppleResourceTest.java,args.variants = Optional.absent();,if (Optional != null ) args.variants = Optional.absent();
AppleResourceTest.java,AppleResourceDescription.Arg args = new AppleResourceDescription.Arg();,if (AppleResourceDescription != null ) AppleResourceDescription.Arg args = new AppleResourceDescription.Arg();
AppleResourceTest.java,AppleResourceDescription.Arg args = new AppleResourceDescription.Arg();,if (AppleResourceDescription != null ) AppleResourceDescription.Arg args = new AppleResourceDescription.Arg();
AppleResourceTest.java,args.variants = Optional.absent();,if (Optional != null ) args.variants = Optional.absent();
AbstractCommandRunner.java,this.buildEngine = params.getBuildEngine();,if (params != null ) this.buildEngine = params.getBuildEngine();
FakeProjectFilesystem.java,fileContents = Maps.newHashMap();,if (Maps != null ) fileContents = Maps.newHashMap();
FakeProjectFilesystem.java,fileLastModifiedTimes = Maps.newHashMap();,if (Maps != null ) fileLastModifiedTimes = Maps.newHashMap();
FakeProjectFilesystem.java,fileAttributes = Maps.newHashMap();,if (Maps != null ) fileAttributes = Maps.newHashMap();
FakeProjectFilesystem.java,symLinks = Maps.newHashMap();,if (Maps != null ) symLinks = Maps.newHashMap();
FakeProjectFilesystem.java,directories = Sets.newHashSet();,if (Sets != null ) directories = Sets.newHashSet();
DBinary.java,BuildTarget target = params.getBuildTarget();,if (params != null ) BuildTarget target = params.getBuildTarget();
ProcessExecutor.java,ProcessBuilder pb = new ProcessBuilder(params.getCommand());,if (ProcessBuilder(params != null ) ProcessBuilder pb = new ProcessBuilder(params.getCommand());
AppleDescriptions.java,headersToCopy = ImmutableSortedMap.of();,if (ImmutableSortedMap != null ) headersToCopy = ImmutableSortedMap.of();
AppleDescriptions.java,headersToCopy = Maps.newHashMap();,if (Maps != null ) headersToCopy = Maps.newHashMap();
AppleDescriptions.java,Path sourcePathName = pathResolver.getPath(sourcePath).getFileName();,if (pathResolver != null ) Path sourcePathName = pathResolver.getPath(sourcePath).getFileName();
AppleDescriptions.java,Path fileName = sourcePathResolver.getPath(headerPath).getFileName();,if (sourcePathResolver != null ) Path fileName = sourcePathResolver.getPath(headerPath).getFileName();
ProjectGenerator.java,HeaderMap.Builder publicMapBuilder = HeaderMap.builder();,if (HeaderMap != null ) HeaderMap.Builder publicMapBuilder = HeaderMap.builder();
ProjectGenerator.java,HeaderMap.Builder targetMapBuilder = HeaderMap.builder();,if (HeaderMap != null ) HeaderMap.Builder targetMapBuilder = HeaderMap.builder();
ProjectGenerator.java,HeaderMap.Builder targetUserMapBuilder = HeaderMap.builder();,if (HeaderMap != null ) HeaderMap.Builder targetUserMapBuilder = HeaderMap.builder();
ProjectGenerator.java,String prefixedFileName = prefix.resolve(fileName).toString();,if (prefix != null ) String prefixedFileName = prefix.resolve(fileName).toString();
ProjectCommand.java,ImmutableSet<BuildTarget> requiredBuildTargets = requiredBuildTargetsBuilder.build();,if (requiredBuildTargetsBuilder != null ) ImmutableSet<BuildTarget> requiredBuildTargets = requiredBuildTargetsBuilder.build();
ProjectCommand.java,BuildCommandOptions buildCommandOptions = new BuildCommandOptions(options.getBuckConfig());,if (BuildCommandOptions(options != null ) BuildCommandOptions buildCommandOptions = new BuildCommandOptions(options.getBuckConfig());
ProjectGeneratorTest.java,Set<BuildTarget> headerSymlinkTrees = projectGenerator.getRequiredBuildTargets();,if (projectGenerator != null ) Set<BuildTarget> headerSymlinkTrees = projectGenerator.getRequiredBuildTargets();
AppleDescriptions.java,"Path headerPathPrefix = AppleDescriptions.getHeaderPathPrefix(args, params.getBuildTarget());","if (params != null ) Path headerPathPrefix = AppleDescriptions.getHeaderPathPrefix(args, params.getBuildTarget());"
AppleDescriptions.java,headersToCopy = ImmutableMap.of();,if (ImmutableMap != null ) headersToCopy = ImmutableMap.of();
AppleDescriptions.java,headersToCopy = headersToCopyBuilder.build();,if (headersToCopyBuilder != null ) headersToCopy = headersToCopyBuilder.build();
AppleDescriptions.java,"Path headerPathPrefix = AppleDescriptions.getHeaderPathPrefix(args, params.getBuildTarget());","if (params != null ) Path headerPathPrefix = AppleDescriptions.getHeaderPathPrefix(args, params.getBuildTarget());"
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
CxxDescriptionEnhancer.java,lexYaccSources = ImmutableCxxHeaderSourceSpec.builder().build();,if (ImmutableCxxHeaderSourceSpec != null ) lexYaccSources = ImmutableCxxHeaderSourceSpec.builder().build();
HeaderMapFile.java,List<Path> keyList = Lists.newArrayList(entries.keySet());,if (Lists != null ) List<Path> keyList = Lists.newArrayList(entries.keySet());
HeaderMapFileStep.java,HeaderMap.Builder builder = HeaderMap.builder();,if (HeaderMap != null ) HeaderMap.Builder builder = HeaderMap.builder();
HeaderMapFileStep.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
HeaderMapFileStep.java,String key = ent.getKey().toString();,if (ent != null ) String key = ent.getKey().toString();
HeaderMapFileStep.java,Path value = projectFilesystem.resolve(ent.getValue());,if (projectFilesystem != null ) Path value = projectFilesystem.resolve(ent.getValue());
HeaderMapFileStep.java,HeaderMap headerMap = builder.build();,if (builder != null ) HeaderMap headerMap = builder.build();
WorkspaceAndProjectGenerator.java,outputDirectory = workspaceArguments.srcTarget.get().getBasePath();,if (workspaceArguments != null ) outputDirectory = workspaceArguments.srcTarget.get().getBasePath();
DefaultCxxPlatforms.java,ImmutableCxxPlatform.Builder builder = ImmutableCxxPlatform.builder();,if (ImmutableCxxPlatform != null ) ImmutableCxxPlatform.Builder builder = ImmutableCxxPlatform.builder();
CopyResourcesStep.java,int lastIndex = resource.lastIndexOf(javaPackageAsPath.toString());,if (resource != null ) int lastIndex = resource.lastIndexOf(javaPackageAsPath.toString());
KnownBuildRuleTypes.java,Optional<Path> pythonPathToPex = pyConfig.getPathToPex();,if (pyConfig != null ) Optional<Path> pythonPathToPex = pyConfig.getPathToPex();
CxxPreprocessAndCompileStepTest.java,ImmutableList<String> actualCompileCommand = compileStep.getCommand();,if (compileStep != null ) ImmutableList<String> actualCompileCommand = compileStep.getCommand();
CxxPreprocessAndCompileStepTest.java,ImmutableList<String> actualPreprocessCommand = preprocessStep.getCommand();,if (preprocessStep != null ) ImmutableList<String> actualPreprocessCommand = preprocessStep.getCommand();
WorkspaceAndProjectGenerator.java,outputDirectory = workspaceTargetNode.getBuildTarget().getBasePath();,if (workspaceTargetNode != null ) outputDirectory = workspaceTargetNode.getBuildTarget().getBasePath();
AppleSdkDiscovery.java,ImmutableAppleSdk.Builder sdkBuilder = ImmutableAppleSdk.builder();,if (ImmutableAppleSdk != null ) ImmutableAppleSdk.Builder sdkBuilder = ImmutableAppleSdk.builder();
RuleKey.java,Path input = inputs.next();,if (inputs != null ) Path input = inputs.next();
Project.java,String manifestPath = this.pathToDefaultAndroidManifest.get();,if (this != null ) String manifestPath = this.pathToDefaultAndroidManifest.get();
Project.java,manifestPath = manifestPath.substring(rootPrefix.length());,if (manifestPath != null ) manifestPath = manifestPath.substring(rootPrefix.length());
AppleDescriptions.java,headersToCopy = ImmutableSortedMap.of();,if (ImmutableSortedMap != null ) headersToCopy = ImmutableSortedMap.of();
AppleDescriptions.java,headersToCopy = Maps.newHashMap();,if (Maps != null ) headersToCopy = Maps.newHashMap();
AppleDescriptions.java,Path sourcePathName = pathResolver.getPath(sourcePath).getFileName();,if (pathResolver != null ) Path sourcePathName = pathResolver.getPath(sourcePath).getFileName();
DefaultJavaPackageFinder.java,directory = new File(pathRelativeToProjectRoot).getParentFile();,if (File(pathRelativeToProjectRoot) != null ) directory = new File(pathRelativeToProjectRoot).getParentFile();
DefaultJavaPackageFinder.java,directory = directory.getParentFile();,if (directory != null ) directory = directory.getParentFile();
JavaSourceJar.java,String packageFolder = packageFinder.findJavaPackageFolderForPath(source.toString());,if (packageFinder != null ) String packageFolder = packageFinder.findJavaPackageFolderForPath(source.toString());
JavacErrorParser.java,String packageName = javaPackageFinder.findJavaPackageForPath(relativePath.toString());,if (javaPackageFinder != null ) String packageName = javaPackageFinder.findJavaPackageForPath(relativePath.toString());
Project.java,String relativePath = projectConfig.getBuildTarget().getBasePathWithSlash();,if (projectConfig != null ) String relativePath = projectConfig.getBuildTarget().getBasePathWithSlash();
Project.java,String basePathWithSlash = projectConfig.getBuildTarget().getBasePathWithSlash();,if (projectConfig != null ) String basePathWithSlash = projectConfig.getBuildTarget().getBasePathWithSlash();
Project.java,module.moduleGenPath = generateRelativeGenPath(basePathWithSlash).toString();,if (generateRelativeGenPath(basePathWithSlash) != null ) module.moduleGenPath = generateRelativeGenPath(basePathWithSlash).toString();
JavaLibraryDescription.java,AnnotationProcessingParams.Builder builder = new AnnotationProcessingParams.Builder();,if (AnnotationProcessingParams != null ) AnnotationProcessingParams.Builder builder = new AnnotationProcessingParams.Builder();
CxxLibraryDescription.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
CxxLibraryDescription.java,arg.srcs = Optional.absent();,if (Optional != null ) arg.srcs = Optional.absent();
CxxLibraryDescription.java,arg.headers = Optional.absent();,if (Optional != null ) arg.headers = Optional.absent();
CxxLibraryDescription.java,arg.exportedHeaders = Optional.absent();,if (Optional != null ) arg.exportedHeaders = Optional.absent();
CxxLibraryDescription.java,arg.compilerFlags = Optional.absent();,if (Optional != null ) arg.compilerFlags = Optional.absent();
CxxLibraryDescription.java,arg.exportedPreprocessorFlags = Optional.absent();,if (Optional != null ) arg.exportedPreprocessorFlags = Optional.absent();
CxxLibraryDescription.java,arg.exportedLangPreprocessorFlags = Optional.absent();,if (Optional != null ) arg.exportedLangPreprocessorFlags = Optional.absent();
CxxLibraryDescription.java,arg.preprocessorFlags = Optional.absent();,if (Optional != null ) arg.preprocessorFlags = Optional.absent();
CxxLibraryDescription.java,arg.langPreprocessorFlags = Optional.absent();,if (Optional != null ) arg.langPreprocessorFlags = Optional.absent();
CxxLibraryDescription.java,arg.linkerFlags = Optional.absent();,if (Optional != null ) arg.linkerFlags = Optional.absent();
CxxLibraryDescription.java,arg.lexSrcs = Optional.absent();,if (Optional != null ) arg.lexSrcs = Optional.absent();
CxxLibraryDescription.java,arg.yaccSrcs = Optional.absent();,if (Optional != null ) arg.yaccSrcs = Optional.absent();
ProjectGenerator.java,HeaderMap.Builder publicMapBuilder = HeaderMap.builder();,if (HeaderMap != null ) HeaderMap.Builder publicMapBuilder = HeaderMap.builder();
ProjectGenerator.java,HeaderMap.Builder targetMapBuilder = HeaderMap.builder();,if (HeaderMap != null ) HeaderMap.Builder targetMapBuilder = HeaderMap.builder();
ProjectGenerator.java,HeaderMap.Builder targetUserMapBuilder = HeaderMap.builder();,if (HeaderMap != null ) HeaderMap.Builder targetUserMapBuilder = HeaderMap.builder();
ProjectGenerator.java,String prefixedFileName = prefix.resolve(fileName).toString();,if (prefix != null ) String prefixedFileName = prefix.resolve(fileName).toString();
ProjectGeneratorTest.java,List<Path> headerMaps = projectGenerator.getGeneratedHeaderMaps();,if (projectGenerator != null ) List<Path> headerMaps = projectGenerator.getGeneratedHeaderMaps();
ProjectGeneratorTest.java,List<Path> headerMaps = projectGenerator.getGeneratedHeaderMaps();,if (projectGenerator != null ) List<Path> headerMaps = projectGenerator.getGeneratedHeaderMaps();
AppleBinaryDescription.java,"String headerPathPrefix = AppleDescriptions.getHeaderPathPrefix(args, params.getBuildTarget());","if (params != null ) String headerPathPrefix = AppleDescriptions.getHeaderPathPrefix(args, params.getBuildTarget());"
AppleLibraryDescription.java,ImmutableSet<SourcePath> publicHeaders = args.exportedHeaders.get();,if (args != null ) ImmutableSet<SourcePath> publicHeaders = args.exportedHeaders.get();
AppleLibraryDescription.java,ImmutableSet<SourcePath> privateHeaders = args.headers.get();,if (args != null ) ImmutableSet<SourcePath> privateHeaders = args.headers.get();
AppleLibraryDescription.java,delegateArg.soname = Optional.absent();,if (Optional != null ) delegateArg.soname = Optional.absent();
SmartDexingStep.java,Path normalizedRoot = projectFilesystem.getRootPath().normalize();,if (projectFilesystem != null ) Path normalizedRoot = projectFilesystem.getRootPath().normalize();
SmartDexingStep.java,Path relativePath = normalizedRoot.relativize(secondaryOutput.normalize());,if (normalizedRoot != null ) Path relativePath = normalizedRoot.relativize(secondaryOutput.normalize());
BuckConfig.java,localhost = InetAddress.getLocalHost().getHostName();,if (InetAddress != null ) localhost = InetAddress.getLocalHost().getHostName();
HttpArtifactCache.java,responseCode = connection.getResponseCode();,if (connection != null ) responseCode = connection.getResponseCode();
HttpArtifactCache.java,Path path = file.toPath();,if (file != null ) Path path = file.toPath();
HttpArtifactCache.java,responseCode = connection.getResponseCode();,if (connection != null ) responseCode = connection.getResponseCode();
HttpArtifactCache.java,int failures = numConnectionExceptionReports.get();,if (numConnectionExceptionReports != null ) int failures = numConnectionExceptionReports.get();
HttpArtifactCache.java,byte[] hashCodeBytes = hashCode.asBytes();,if (hashCode != null ) byte[] hashCodeBytes = hashCode.asBytes();
HttpArtifactCacheTest.java,Path path = file.toPath();,if (file != null ) Path path = file.toPath();
HttpArtifactCacheTest.java,Path path = file.toPath();,if (file != null ) Path path = file.toPath();
HttpArtifactCacheTest.java,InputStream is = new ByteArrayInputStream(data.getBytes());,if (ByteArrayInputStream(data != null ) InputStream is = new ByteArrayInputStream(data.getBytes());
CxxCompile.java,Plugin p = plugin.get();,if (plugin != null ) Plugin p = plugin.get();
CxxPreprocessStep.java,Process process = builder.start();,if (builder != null ) Process process = builder.start();
CxxPreprocessStep.java,exitCode = process.waitFor();,if (process != null ) exitCode = process.waitFor();
CxxPreprocessStep.java,String err = new String(error.toByteArray());,if (String(error != null ) String err = new String(error.toByteArray());
CxxSourceRuleFactory.java,preprocessor = cxxPlatform.getAspp();,if (cxxPlatform != null ) preprocessor = cxxPlatform.getAspp();
CxxSourceRuleFactory.java,preprocessor = cxxPlatform.getCpp();,if (cxxPlatform != null ) preprocessor = cxxPlatform.getCpp();
CxxSourceRuleFactory.java,preprocessor = cxxPlatform.getCxxpp();,if (cxxPlatform != null ) preprocessor = cxxPlatform.getCxxpp();
CxxSourceRuleFactory.java,preprocessor = cxxPlatform.getCpp();,if (cxxPlatform != null ) preprocessor = cxxPlatform.getCpp();
CxxSourceRuleFactory.java,preprocessor = cxxPlatform.getCxxpp();,if (cxxPlatform != null ) preprocessor = cxxPlatform.getCxxpp();
CxxSourceRuleFactory.java,compiler = platform.getCxx();,if (platform != null ) compiler = platform.getCxx();
CxxSourceRuleFactory.java,compiler = platform.getCc();,if (platform != null ) compiler = platform.getCc();
CxxCompileStepTest.java,ImmutableList<String> actual = cxxCompileStep.getCommand();,if (cxxCompileStep != null ) ImmutableList<String> actual = cxxCompileStep.getCommand();
CxxPreprocessAndCompileStepTest.java,ImmutableList<String> actual = cxxPreprocessStep.getCommand();,if (cxxPreprocessStep != null ) ImmutableList<String> actual = cxxPreprocessStep.getCommand();
CxxPreprocessAndCompileStepTest.java,ImmutableList<Path> prefixHeaders = ImmutableList.of();,if (ImmutableList != null ) ImmutableList<Path> prefixHeaders = ImmutableList.of();
CxxPreprocessAndCompileStepTest.java,ImmutableList<Path> includes = ImmutableList.of();,if (ImmutableList != null ) ImmutableList<Path> includes = ImmutableList.of();
CxxPreprocessAndCompileStepTest.java,ImmutableList<Path> systemIncludes = ImmutableList.of();,if (ImmutableList != null ) ImmutableList<Path> systemIncludes = ImmutableList.of();
CxxPreprocessAndCompileStepTest.java,ImmutableList<Path> frameworkRoots = ImmutableList.of();,if (ImmutableList != null ) ImmutableList<Path> frameworkRoots = ImmutableList.of();
CxxCompilableEnhancer.java,compiler = platform.getCxx();,if (platform != null ) compiler = platform.getCxx();
CxxCompilableEnhancer.java,compiler = platform.getCc();,if (platform != null ) compiler = platform.getCc();
CxxPreprocessables.java,preprocessor = cxxPlatform.getAspp();,if (cxxPlatform != null ) preprocessor = cxxPlatform.getAspp();
CxxPreprocessables.java,preprocessor = cxxPlatform.getCpp();,if (cxxPlatform != null ) preprocessor = cxxPlatform.getCpp();
CxxPreprocessables.java,preprocessor = cxxPlatform.getCxxpp();,if (cxxPlatform != null ) preprocessor = cxxPlatform.getCxxpp();
CxxPreprocessables.java,preprocessor = cxxPlatform.getCpp();,if (cxxPlatform != null ) preprocessor = cxxPlatform.getCpp();
CxxPreprocessables.java,preprocessor = cxxPlatform.getCxxpp();,if (cxxPlatform != null ) preprocessor = cxxPlatform.getCxxpp();
HttpdForTests.java,URI baseUri = server.getURI();,if (server != null ) URI baseUri = server.getURI();
AppleBundleTest.java,AppleBundleDescription.Arg arg = description.createUnpopulatedConstructorArg();,if (description != null ) AppleBundleDescription.Arg arg = description.createUnpopulatedConstructorArg();
AppleBundleTest.java,arg.infoPlist = Optional.absent();,if (Optional != null ) arg.infoPlist = Optional.absent();
AppleBundleTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
AppleBundleTest.java,arg.binary = library.getBuildTarget();,if (library != null ) arg.binary = library.getBuildTarget();
AppleBundleTest.java,AppleBundleDescription.Arg arg = description.createUnpopulatedConstructorArg();,if (description != null ) AppleBundleDescription.Arg arg = description.createUnpopulatedConstructorArg();
AppleBundleTest.java,arg.infoPlist = Optional.absent();,if (Optional != null ) arg.infoPlist = Optional.absent();
AppleBundleTest.java,arg.binary = library.getBuildTarget();,if (library != null ) arg.binary = library.getBuildTarget();
PathRelativizer.java,Path result = outputPathToProjectRoot.resolve(target.getBasePath());,if (outputPathToProjectRoot != null ) Path result = outputPathToProjectRoot.resolve(target.getBasePath());
CxxCompileStep.java,int exitCode = process.waitFor();,if (process != null ) int exitCode = process.waitFor();
CxxPreprocessStep.java,int exitCode = process.waitFor();,if (process != null ) int exitCode = process.waitFor();
CxxLibraryDescription.java,BuildTarget lexYaccTarget = createLexYaccSourcesBuildTarget(params.getBuildTarget());,if (createLexYaccSourcesBuildTarget(params != null ) BuildTarget lexYaccTarget = createLexYaccSourcesBuildTarget(params.getBuildTarget());
CxxLibraryDescription.java,lexYaccSources = ImmutableCxxHeaderSourceSpec.builder().build();,if (ImmutableCxxHeaderSourceSpec != null ) lexYaccSources = ImmutableCxxHeaderSourceSpec.builder().build();
ThriftCxxEnhancer.java,CxxLibraryDescription.Arg langArgs = cxxLibraryDescription.createEmptyConstructorArg();,if (cxxLibraryDescription != null ) CxxLibraryDescription.Arg langArgs = cxxLibraryDescription.createEmptyConstructorArg();
AbstractGenruleStep.java,command = commandString.cmdExe.get();,if (commandString != null ) command = commandString.cmdExe.get();
AbstractGenruleStep.java,command = commandString.cmd.get();,if (commandString != null ) command = commandString.cmd.get();
AbstractGenruleStep.java,command = commandString.bash.get();,if (commandString != null ) command = commandString.bash.get();
AbstractGenruleStep.java,command = commandString.cmd.get();,if (commandString != null ) command = commandString.cmd.get();
ProjectGenerator.java,Path prefixHeaderRelative = sourcePathResolver.getPath(prefixHeaderOptional.get());,if (sourcePathResolver != null ) Path prefixHeaderRelative = sourcePathResolver.getPath(prefixHeaderOptional.get());
AppleDescriptions.java,Path parentDirectory = Paths.get(frameworkPath).getParent();,if (Paths != null ) Path parentDirectory = Paths.get(frameworkPath).getParent();
CompilationDatabase.java,String sdkRoot = appleSdkPaths.getSdkPath().toString();,if (appleSdkPaths != null ) String sdkRoot = appleSdkPaths.getSdkPath().toString();
TestCommand.java,ImmutableSet<String> allTargets = options.getArgumentsFormattedAsBuildTargets();,if (options != null ) ImmutableSet<String> allTargets = options.getArgumentsFormattedAsBuildTargets();
FakeProjectFilesystem.java,fileLastModifiedTimes = Maps.newHashMap();,if (Maps != null ) fileLastModifiedTimes = Maps.newHashMap();
Main.java,Optional<Integer> port = webServer.get().getPort();,if (webServer != null ) Optional<Integer> port = webServer.get().getPort();
SuperConsoleEventBusListener.java,Optional<String> suffix = Optional.absent();,if (Optional != null ) Optional<String> suffix = Optional.absent();
ExportFileTest.java,FakeProjectFilesystem projectFilesystem = new FakeProjectFilesystem(root.toFile());,if (FakeProjectFilesystem(root != null ) FakeProjectFilesystem projectFilesystem = new FakeProjectFilesystem(root.toFile());
ExportFileTest.java,RuleKey original = rule.getRuleKey();,if (rule != null ) RuleKey original = rule.getRuleKey();
ExportFileTest.java,RuleKey refreshed = rule.getRuleKey();,if (rule != null ) RuleKey refreshed = rule.getRuleKey();
ProjectPredicates.java,projectArg = (XcodeProjectConfigDescription.Arg) targetNode.getConstructorArg();,if (targetNode != null ) projectArg = (XcodeProjectConfigDescription.Arg) targetNode.getConstructorArg();
TargetsCommand.java,actionGraph = Optional.absent();,if (Optional != null ) actionGraph = Optional.absent();
TargetsCommand.java,buildTargetHashes = ImmutableMap.of();,if (ImmutableMap != null ) buildTargetHashes = ImmutableMap.of();
TargetsCommand.java,Path outputPath = rule.getPathToOutputFile();,if (rule != null ) Path outputPath = rule.getPathToOutputFile();
AndroidAarDescription.java,BuildTarget originalBuildTarget = originalBuildRuleParams.getBuildTarget();,if (originalBuildRuleParams != null ) BuildTarget originalBuildTarget = originalBuildRuleParams.getBuildTarget();
AndroidPrebuiltAarGraphEnhancer.java,BuildTarget originalBuildTarget = originalBuildRuleParams.getBuildTarget();,if (originalBuildRuleParams != null ) BuildTarget originalBuildTarget = originalBuildRuleParams.getBuildTarget();
AppleDescriptions.java,BuildTarget targetForOriginalRule = params.getBuildTarget();,if (params != null ) BuildTarget targetForOriginalRule = params.getBuildTarget();
AppleDescriptions.java,targetForOriginalRule = targetForOriginalRule.getUnflavoredTarget();,if (targetForOriginalRule != null ) targetForOriginalRule = targetForOriginalRule.getUnflavoredTarget();
AppleDescriptions.java,BuildTarget buildTarget = node.getBuildTarget();,if (node != null ) BuildTarget buildTarget = node.getBuildTarget();
PrebuiltJarDescription.java,BuildTarget prebuiltJarBuildTarget = buildRule.getBuildTarget();,if (buildRule != null ) BuildTarget prebuiltJarBuildTarget = buildRule.getBuildTarget();
BuildTargets.java,BuildTarget buildTarget = hasBuildTarget.getBuildTarget();,if (hasBuildTarget != null ) BuildTarget buildTarget = hasBuildTarget.getBuildTarget();
OCamlBuildContext.java,BuildTarget plainTarget = target.getUnflavoredTarget();,if (target != null ) BuildTarget plainTarget = target.getUnflavoredTarget();
OCamlBuildContext.java,BuildTarget plainTarget = target.getUnflavoredTarget();,if (target != null ) BuildTarget plainTarget = target.getUnflavoredTarget();
Parser.java,BuildTarget unflavored = buildTarget.getUnflavoredTarget();,if (buildTarget != null ) BuildTarget unflavored = buildTarget.getUnflavoredTarget();
Parser.java,Path buildTargetPath = targetsToFile.get(buildTarget.getUnflavoredTarget());,if (targetsToFile != null ) Path buildTargetPath = targetsToFile.get(buildTarget.getUnflavoredTarget());
WatchServiceWatcher.java,this.keys = Maps.newHashMap();,if (Maps != null ) this.keys = Maps.newHashMap();
WatchServiceWatcher.java,Path name = (Path) event.context();,if (event != null ) Path name = (Path) event.context();
TracesHelper.java,String name = nameEl.getAsString();,if (nameEl != null ) String name = nameEl.getAsString();
HttpArtifactCache.java,expectedHashCode = (HashCode) objectStream.readObject();,if (objectStream != null ) expectedHashCode = (HashCode) objectStream.readObject();
HttpArtifactCache.java,expectedHashCode = (HashCode) objectStream.readObject();,if (objectStream != null ) expectedHashCode = (HashCode) objectStream.readObject();
HttpArtifactCache.java,Path path = file.toPath();,if (file != null ) Path path = file.toPath();
ProjectPredicates.java,String targetName = input.getBuildTarget().getFullyQualifiedName();,if (input != null ) String targetName = input.getBuildTarget().getFullyQualifiedName();
Build.java,String buildReportForConsole = buildReport.generateForConsole(console.getAnsi());,if (buildReport != null ) String buildReportForConsole = buildReport.generateForConsole(console.getAnsi());
BuildContext.java,final AndroidPlatformTarget androidPlatformTarget = maybeAndroidPlatformTarget.get();,if (maybeAndroidPlatformTarget != null ) final AndroidPlatformTarget androidPlatformTarget = maybeAndroidPlatformTarget.get();
BuildContext.java,List<Path> bootclasspathEntries = androidPlatformTarget.getBootclasspathEntries();,if (androidPlatformTarget != null ) List<Path> bootclasspathEntries = androidPlatformTarget.getBootclasspathEntries();
Genrule.java,Optional<AndroidPlatformTarget> optionalAndroid = context.getAndroidPlatformTargetOptional();,if (context != null ) Optional<AndroidPlatformTarget> optionalAndroid = context.getAndroidPlatformTargetOptional();
Genrule.java,AndroidPlatformTarget android = optionalAndroid.get();,if (optionalAndroid != null ) AndroidPlatformTarget android = optionalAndroid.get();
AbstractCommandRunner.java,this.androidDirectoryResolver = params.getAndroidDirectoryResolver();,if (params != null ) this.androidDirectoryResolver = params.getAndroidDirectoryResolver();
Build.java,androidPlatformTargetIdRuleName = rule.getFullyQualifiedName();,if (rule != null ) androidPlatformTargetIdRuleName = rule.getFullyQualifiedName();
Build.java,result = Optional.absent();,if (Optional != null ) result = Optional.absent();
ProjectCommand.java,projectArg = (ProjectConfigDescription.Arg) targetNode.getConstructorArg();,if (targetNode != null ) projectArg = (ProjectConfigDescription.Arg) targetNode.getConstructorArg();
ProjectCommand.java,projectTarget = projectArg.srcTarget.get();,if (projectArg != null ) projectTarget = projectArg.srcTarget.get();
ProjectCommand.java,projectTarget = projectArg.testTarget.get();,if (projectArg != null ) projectTarget = projectArg.testTarget.get();
ProjectCommand.java,String targetName = input.getBuildTarget().getFullyQualifiedName();,if (input != null ) String targetName = input.getBuildTarget().getFullyQualifiedName();
ProjectCommand.java,projectArg = (XcodeProjectConfigDescription.Arg) targetNode.getConstructorArg();,if (targetNode != null ) projectArg = (XcodeProjectConfigDescription.Arg) targetNode.getConstructorArg();
AppleDescriptions.java,mergedNode = mergeGraphQLModels(entry.getValue());,if (mergeGraphQLModels(entry != null ) mergedNode = mergeGraphQLModels(entry.getValue());
AppleDescriptions.java,GraphQLDataDescription.Arg mergedArg = mergedModel.getConstructorArg();,if (mergedModel != null ) GraphQLDataDescription.Arg mergedArg = mergedModel.getConstructorArg();
AppleDescriptions.java,GraphQLDataDescription.Arg nextArg = model.getConstructorArg();,if (model != null ) GraphQLDataDescription.Arg nextArg = model.getConstructorArg();
AppleDescriptions.java,GraphQLDataDescription.Arg arg = node.getDescription().createUnpopulatedConstructorArg();,if (node != null ) GraphQLDataDescription.Arg arg = node.getDescription().createUnpopulatedConstructorArg();
GraphQLDataDescription.java,this.modelGenerator = config.getGraphQLModelGenerator();,if (config != null ) this.modelGenerator = config.getGraphQLModelGenerator();
GraphQLDataBuilder.java,arg.modelTags = ImmutableSet.of();,if (ImmutableSet != null ) arg.modelTags = ImmutableSet.of();
GraphQLDataIntegrationTest.java,BuckBuildLog buildLog = workspace.getBuildLog();,if (workspace != null ) BuckBuildLog buildLog = workspace.getBuildLog();
GraphQLDataIntegrationTest.java,buildLog = workspace.getBuildLog();,if (workspace != null ) buildLog = workspace.getBuildLog();
GraphQLDataIntegrationTest.java,buildLog = workspace.getBuildLog();,if (workspace != null ) buildLog = workspace.getBuildLog();
CompilationDatabaseTest.java,Collection<SourcePath> headers = ImmutableList.of();,if (ImmutableList != null ) Collection<SourcePath> headers = ImmutableList.of();
TargetSources.java,ImmutableSortedSet<SourceWithFlags> srcPaths = srcPathsBuilder.build();,if (srcPathsBuilder != null ) ImmutableSortedSet<SourceWithFlags> srcPaths = srcPathsBuilder.build();
TargetSources.java,ImmutableSortedSet<SourcePath> publicHeaderPaths = publicHeaderPathsBuilder.build();,if (publicHeaderPathsBuilder != null ) ImmutableSortedSet<SourcePath> publicHeaderPaths = publicHeaderPathsBuilder.build();
TargetSources.java,ImmutableSortedSet<SourcePath> privateHeaderPaths = privateHeaderPathsBuilder.build();,if (privateHeaderPathsBuilder != null ) ImmutableSortedSet<SourcePath> privateHeaderPaths = privateHeaderPathsBuilder.build();
PrebuiltCxxLibraryDescription.java,String libName = args.libName.or(target.getShortName());,if (args != null ) String libName = args.libName.or(target.getShortName());
PrebuiltCxxLibraryDescription.java,String libName = args.libName.or(target.getShortName());,if (args != null ) String libName = args.libName.or(target.getShortName());
MacroHandler.java,lastEnd = matcher.end();,if (matcher != null ) lastEnd = matcher.end();
CompilationDatabase.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
CompilationDatabase.java,Path sysroot = appleSdkPaths.getSdkPath();,if (appleSdkPaths != null ) Path sysroot = appleSdkPaths.getSdkPath();
CompilationDatabase.java,String sdkRoot = appleSdkPaths.getSdkPath().toString();,if (appleSdkPaths != null ) String sdkRoot = appleSdkPaths.getSdkPath().toString();
CompilationDatabase.java,Path iquoteArg = internalHeaderMap.get();,if (internalHeaderMap != null ) Path iquoteArg = internalHeaderMap.get();
CompilationDatabase.java,perFileFlags = ImmutableList.of();,if (ImmutableList != null ) perFileFlags = ImmutableList.of();
NewNativeTargetProjectMutator.java,Optional<HeaderVisibility> visibility = Optional.absent();,if (Optional != null ) Optional<HeaderVisibility> visibility = Optional.absent();
ProjectGenerator.java,Optional<HeaderVisibility> visibilityOptional = Optional.absent();,if (Optional != null ) Optional<HeaderVisibility> visibilityOptional = Optional.absent();
RuleUtils.java,Path parent = Preconditions.checkNotNull(path.getParent());,if (Preconditions != null ) Path parent = Preconditions.checkNotNull(path.getParent());
TargetSources.java,ImmutableSortedSet<SourcePath> allSources = allSourcesBuilder.build();,if (allSourcesBuilder != null ) ImmutableSortedSet<SourcePath> allSources = allSourcesBuilder.build();
TargetSources.java,ImmutableSortedSet<SourcePath> srcPaths = srcPathsBuilder.build();,if (srcPathsBuilder != null ) ImmutableSortedSet<SourcePath> srcPaths = srcPathsBuilder.build();
RuleUtilsTest.java,ImmutableList<SourcePath> input = ImmutableList.of();,if (ImmutableList != null ) ImmutableList<SourcePath> input = ImmutableList.of();
AppleDescriptions.java,ImmutableList<String> flags = entry.getValue();,if (entry != null ) ImmutableList<String> flags = entry.getValue();
AppleDescriptions.java,SourcePath sourcePath = entry.getKey();,if (entry != null ) SourcePath sourcePath = entry.getKey();
AppleDescriptions.java,Path sourcePathName = pathResolver.getPath(sourcePath).getFileName();,if (pathResolver != null ) Path sourcePathName = pathResolver.getPath(sourcePath).getFileName();
AppleDescriptions.java,String flags = entry.getValue();,if (entry != null ) String flags = entry.getValue();
CxxPythonExtension.java,SourcePath output = new BuildTargetSourcePath(extension.getBuildTarget());,if (BuildTargetSourcePath(extension != null ) SourcePath output = new BuildTargetSourcePath(extension.getBuildTarget());
JavaBinaryDescription.java,SourcePath innerJar = new BuildTargetSourcePath(innerJarRule.getBuildTarget());,if (BuildTargetSourcePath(innerJarRule != null ) SourcePath innerJar = new BuildTargetSourcePath(innerJarRule.getBuildTarget());
AndroidManifestDescriptionTest.java,BuildTargetSourcePath skeleton = new BuildTargetSourcePath(ruleWithOutput.getBuildTarget());,if (BuildTargetSourcePath(ruleWithOutput != null ) BuildTargetSourcePath skeleton = new BuildTargetSourcePath(ruleWithOutput.getBuildTarget());
CxxCompilableEnhancerTest.java,SourcePath input = new BuildTargetSourcePath(dep.getBuildTarget());,if (BuildTargetSourcePath(dep != null ) SourcePath input = new BuildTargetSourcePath(dep.getBuildTarget());
CxxDescriptionEnhancerTest.java,SourcePath lexSource = new BuildTargetSourcePath(genrule.getBuildTarget());,if (BuildTargetSourcePath(genrule != null ) SourcePath lexSource = new BuildTargetSourcePath(genrule.getBuildTarget());
PythonBinaryDescriptionTest.java,arg.main = new BuildTargetSourcePath(genrule.getBuildTarget());,if (BuildTargetSourcePath(genrule != null ) arg.main = new BuildTargetSourcePath(genrule.getBuildTarget());
BuildTargetSourcePathTest.java,BuildTargetSourcePath path = new BuildTargetSourcePath(rule.getBuildTarget());,if (BuildTargetSourcePath(rule != null ) BuildTargetSourcePath path = new BuildTargetSourcePath(rule.getBuildTarget());
BuildTargetSourcePathTest.java,BuildTargetSourcePath path = new BuildTargetSourcePath(rule.getBuildTarget());,if (BuildTargetSourcePath(rule != null ) BuildTargetSourcePath path = new BuildTargetSourcePath(rule.getBuildTarget());
ConstructorArgMarshallerTest.java,BuildTargetSourcePath path = new BuildTargetSourcePath(rule.getBuildTarget());,if (BuildTargetSourcePath(rule != null ) BuildTargetSourcePath path = new BuildTargetSourcePath(rule.getBuildTarget());
ConstructorArgMarshallerTest.java,BuildTargetSourcePath expected = new BuildTargetSourcePath(expectedRule.getBuildTarget());,if (BuildTargetSourcePath(expectedRule != null ) BuildTargetSourcePath expected = new BuildTargetSourcePath(expectedRule.getBuildTarget());
SourcePathResolverTest.java,SourcePath sourcePath = new BuildTargetSourcePath(rule.getBuildTarget());,if (BuildTargetSourcePath(rule != null ) SourcePath sourcePath = new BuildTargetSourcePath(rule.getBuildTarget());
SourcePathResolverTest.java,SourcePath buildTargetSourcePath = new BuildTargetSourcePath(rule.getBuildTarget());,if (BuildTargetSourcePath(rule != null ) SourcePath buildTargetSourcePath = new BuildTargetSourcePath(rule.getBuildTarget());
SourcePathResolverTest.java,SourcePath sourcePath = new BuildTargetSourcePath(rule.getBuildTarget());,if (BuildTargetSourcePath(rule != null ) SourcePath sourcePath = new BuildTargetSourcePath(rule.getBuildTarget());
SourcePathResolverTest.java,SourcePath sourcePath = new BuildTargetSourcePath(rule.getBuildTarget());,if (BuildTargetSourcePath(rule != null ) SourcePath sourcePath = new BuildTargetSourcePath(rule.getBuildTarget());
ThriftLibraryDescriptionTest.java,SourcePath ruleSourcePath = new BuildTargetSourcePath(genrule.getBuildTarget());,if (BuildTargetSourcePath(genrule != null ) SourcePath ruleSourcePath = new BuildTargetSourcePath(genrule.getBuildTarget());
MirrorTest.java,Path classDir = temp.newFolder().toPath();,if (temp != null ) Path classDir = temp.newFolder().toPath();
TestCommand.java,Build build = buildCommand.getBuild();,if (buildCommand != null ) Build build = buildCommand.getBuild();
TestCommand.java,Iterable<TestRule> results = getCandidateRules(build.getActionGraph());,if (getCandidateRules(build != null ) Iterable<TestRule> results = getCandidateRules(build.getActionGraph());
TestCommand.java,BuildContext buildContext = Preconditions.checkNotNull(build.getBuildContext());,if (Preconditions != null ) BuildContext buildContext = Preconditions.checkNotNull(build.getBuildContext());
TestCommand.java,ExecutionContext buildExecutionContext = build.getExecutionContext();,if (build != null ) ExecutionContext buildExecutionContext = build.getExecutionContext();
TestCommand.java,ImmutableSet<BuildTarget> emptyTargetsList = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<BuildTarget> emptyTargetsList = ImmutableSet.of();
TestCommand.java,ParserConfig parserConfig = new ParserConfig(options.getBuckConfig());,if (ParserConfig(options != null ) ParserConfig parserConfig = new ParserConfig(options.getBuckConfig());
AppleBuildRules.java,deps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) deps = ImmutableSortedSet.of();
NdkLibraryDescription.java,AndroidBinary.TargetCpuType targetCpuType = entry.getKey();,if (entry != null ) AndroidBinary.TargetCpuType targetCpuType = entry.getKey();
CxxPreprocessorInput.java,ImmutableCxxHeaders.Builder includes = ImmutableCxxHeaders.builder();,if (ImmutableCxxHeaders != null ) ImmutableCxxHeaders.Builder includes = ImmutableCxxHeaders.builder();
BlockingHttpEndpoint.java,InputStream inputStream = connection.getInputStream();,if (connection != null ) InputStream inputStream = connection.getInputStream();
AppleBuildRules.java,defaultDeps = editedDeps.build();,if (editedDeps != null ) defaultDeps = editedDeps.build();
AppleBuildRules.java,deps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) deps = ImmutableSortedSet.of();
AppleBuildRules.java,deps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) deps = ImmutableSortedSet.of();
AppleLibraryDescription.java,delegateArg.exportedHeaders = Optional.absent();,if (Optional != null ) delegateArg.exportedHeaders = Optional.absent();
TargetSources.java,ImmutableSortedSet<SourcePath> headerPaths = headerPathsBuilder.build();,if (headerPathsBuilder != null ) ImmutableSortedSet<SourcePath> headerPaths = headerPathsBuilder.build();
CxxDescriptionEnhancer.java,headers = ImmutableMap.of();,if (ImmutableMap != null ) headers = ImmutableMap.of();
CxxDescriptionEnhancer.java,headers = args.headers.get().getRight();,if (args != null ) headers = args.headers.get().getRight();
DependencyQuery.java,depth = Optional.absent();,if (Optional != null ) depth = Optional.absent();
AbstractConsoleEventBusListener.java,this.stdErr = console.getStdErr().getRawStream();,if (console != null ) this.stdErr = console.getStdErr().getRawStream();
StreamingWebSocketServlet.java,ObjectNode nodesToDeps = jsonNodeFactory.objectNode();,if (jsonNodeFactory != null ) ObjectNode nodesToDeps = jsonNodeFactory.objectNode();
StreamingWebSocketServlet.java,ArrayNode deps = jsonNodeFactory.arrayNode();,if (jsonNodeFactory != null ) ArrayNode deps = jsonNodeFactory.arrayNode();
HttpArtifactCache.java,InputStream is = projectFilesystem.newFileInputStream(file.toPath());) {,if ({ != null ) InputStream is = projectFilesystem.newFileInputStream(file.toPath());) {
ProjectGeneratorTestUtils.java,AppleBundleDescription.Arg bundleArg = description.createUnpopulatedConstructorArg();,if (description != null ) AppleBundleDescription.Arg bundleArg = description.createUnpopulatedConstructorArg();
ProjectGeneratorTestUtils.java,bundleArg.binary = binaryRule.getBuildTarget();,if (binaryRule != null ) bundleArg.binary = binaryRule.getBuildTarget();
HttpArtifactCacheTest.java,buckEventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) buckEventBus = BuckEventBusFactory.newInstance();
MoreAsserts.java,boolean setsEqual = missing.isEmpty() && extra.isEmpty();,if (extra != null ) boolean setsEqual = missing.isEmpty() && extra.isEmpty();
Main.java,JavacOptions javacOptions = new JavaBuckConfig(config).getDefaultJavacOptions();,if (JavaBuckConfig(config) != null ) JavacOptions javacOptions = new JavaBuckConfig(config).getDefaultJavacOptions();
KnownBuildRuleTypes.java,JavacOptions defaultJavacOptions = javaConfig.getDefaultJavacOptions();,if (javaConfig != null ) JavacOptions defaultJavacOptions = javaConfig.getDefaultJavacOptions();
JavaBuckConfigTest.java,JavacOptions options = config.getDefaultJavacOptions();,if (config != null ) JavacOptions options = config.getDefaultJavacOptions();
JavaBuckConfigTest.java,JavacOptions options = config.getDefaultJavacOptions();,if (config != null ) JavacOptions options = config.getDefaultJavacOptions();
JavaBuckConfigTest.java,JavacOptions options = config.getDefaultJavacOptions();,if (config != null ) JavacOptions options = config.getDefaultJavacOptions();
FatJar.java,Unmarshaller unmarshaller = context.createUnmarshaller();,if (context != null ) Unmarshaller unmarshaller = context.createUnmarshaller();
AndroidAar.java,Path jar = androidLibrary.getPathToOutputFile();,if (androidLibrary != null ) Path jar = androidLibrary.getPathToOutputFile();
GenerateShellScriptStep.java,List<String> lines = Lists.newArrayList();,if (Lists != null ) List<String> lines = Lists.newArrayList();
ShBinary.java,MakeCleanDirectoryStep mkdir = new MakeCleanDirectoryStep(output.getParent());,if (MakeCleanDirectoryStep(output != null ) MakeCleanDirectoryStep mkdir = new MakeCleanDirectoryStep(output.getParent());
KnownBuildRuleTypes.java,ImmutableSet<CxxPlatform> appleCxxPlatforms = appleCxxPlatformsBuilder.build();,if (appleCxxPlatformsBuilder != null ) ImmutableSet<CxxPlatform> appleCxxPlatforms = appleCxxPlatformsBuilder.build();
DefaultJavaLibrary.java,Optional<Path> externalJavac = javacOptions.getJavacPath();,if (javacOptions != null ) Optional<Path> externalJavac = javacOptions.getJavacPath();
JavacStep.java,Optional<Path> externalJavac = javacOptions.getJavacPath();,if (javacOptions != null ) Optional<Path> externalJavac = javacOptions.getJavacPath();
RuleUtils.java,ImmutableList<AppleSource> sourceGroupItems = sourceGroup.getSecond();,if (sourceGroup != null ) ImmutableList<AppleSource> sourceGroupItems = sourceGroup.getSecond();
MorePaths.java,File file = path.toFile();,if (path != null ) File file = path.toFile();
RuleUtils.java,String sourceGroupName = sourceGroup.getFirst();,if (sourceGroup != null ) String sourceGroupName = sourceGroup.getFirst();
BuckConfig.java,File python = new File(configPath.get());,if (File(configPath != null ) File python = new File(configPath.get());
BuckConfig.java,pythonInterpreterNames = ImmutableList.of(configPath.get());,if (ImmutableList != null ) pythonInterpreterNames = ImmutableList.of(configPath.get());
PythonBuckConfig.java,Path pythonPath = Paths.get(delegate.getPythonInterpreter());,if (Paths != null ) Path pythonPath = Paths.get(delegate.getPythonInterpreter());
AppleBuildRules.java,sourceNodeToTestNodesBuilder = ImmutableMultimap.builder();,if (ImmutableMultimap != null ) sourceNodeToTestNodesBuilder = ImmutableMultimap.builder();
AppleBuildRules.java,AppleTestDescription.Arg testDescriptionArg = castedNode.get().getConstructorArg();,if (castedNode != null ) AppleTestDescription.Arg testDescriptionArg = castedNode.get().getConstructorArg();
Jsr199Javac.java,compiler = ToolProvider.getSystemJavaCompiler();,if (ToolProvider != null ) compiler = ToolProvider.getSystemJavaCompiler();
AndroidLibraryDescription.java,"params = params.copyWithDeps(newDeclaredDeps, params.getExtraDeps());","if (params != null ) params = params.copyWithDeps(newDeclaredDeps, params.getExtraDeps());"
ExportFileTest.java,ExportFileDescription.Arg args = new ExportFileDescription().createUnpopulatedConstructorArg();,if (ExportFileDescription() != null ) ExportFileDescription.Arg args = new ExportFileDescription().createUnpopulatedConstructorArg();
ExportFileTest.java,args.out = Optional.absent();,if (Optional != null ) args.out = Optional.absent();
ExportFileTest.java,args.src = Optional.absent();,if (Optional != null ) args.src = Optional.absent();
ExportFileTest.java,ExportFileDescription.Arg args = new ExportFileDescription().createUnpopulatedConstructorArg();,if (ExportFileDescription() != null ) ExportFileDescription.Arg args = new ExportFileDescription().createUnpopulatedConstructorArg();
ExportFileTest.java,args.src = Optional.absent();,if (Optional != null ) args.src = Optional.absent();
ExportFileTest.java,ExportFileDescription.Arg args = new ExportFileDescription().createUnpopulatedConstructorArg();,if (ExportFileDescription() != null ) ExportFileDescription.Arg args = new ExportFileDescription().createUnpopulatedConstructorArg();
ExportFileTest.java,ExportFileDescription.Arg args = new ExportFileDescription().createUnpopulatedConstructorArg();,if (ExportFileDescription() != null ) ExportFileDescription.Arg args = new ExportFileDescription().createUnpopulatedConstructorArg();
ExportFileTest.java,args.src = Optional.absent();,if (Optional != null ) args.src = Optional.absent();
ExportFileTest.java,ExportFileDescription.Arg args = new ExportFileDescription().createUnpopulatedConstructorArg();,if (ExportFileDescription() != null ) ExportFileDescription.Arg args = new ExportFileDescription().createUnpopulatedConstructorArg();
ExportFileTest.java,args.src = Optional.absent();,if (Optional != null ) args.src = Optional.absent();
JavacOptions.java,Path generateTo = annotationProcessingParams.getGeneratedSourceFolderName();,if (annotationProcessingParams != null ) Path generateTo = annotationProcessingParams.getGeneratedSourceFolderName();
ExecutionContext.java,this.verbosity = console.getVerbosity();,if (console != null ) this.verbosity = console.getVerbosity();
BuildContext.java,private BuildDependencies buildDependencies = BuildDependencies.getDefault();,if (BuildDependencies != null ) private BuildDependencies buildDependencies = BuildDependencies.getDefault();
BuildContext.java,final AndroidPlatformTarget androidPlatformTarget = maybeAndroidPlatformTarget.get();,if (maybeAndroidPlatformTarget != null ) final AndroidPlatformTarget androidPlatformTarget = maybeAndroidPlatformTarget.get();
BuildContext.java,List<Path> bootclasspathEntries = androidPlatformTarget.getBootclasspathEntries();,if (androidPlatformTarget != null ) List<Path> bootclasspathEntries = androidPlatformTarget.getBootclasspathEntries();
BuildContextTest.java,BuildContext.Builder builder = BuildContext.builder();,if (BuildContext != null ) BuildContext.Builder builder = BuildContext.builder();
BuildContextTest.java,BuildContext.Builder builder = BuildContext.builder();,if (BuildContext != null ) BuildContext.Builder builder = BuildContext.builder();
BuildContextTest.java,BuildContext.Builder builder = BuildContext.builder();,if (BuildContext != null ) BuildContext.Builder builder = BuildContext.builder();
AppleCxxPlatform.java,ImmutableList<Path> toolSearchPaths = toolSearchPathsBuilder.build();,if (toolSearchPathsBuilder != null ) ImmutableList<Path> toolSearchPaths = toolSearchPathsBuilder.build();
AppleCxxPlatform.java,this.asflags = ImmutableList.of(); // TODO,if (TODO != null ) this.asflags = ImmutableList.of(); // TODO
AppleCxxPlatform.java,this.asppflags = ImmutableList.of(); // TODO,if (TODO != null ) this.asppflags = ImmutableList.of(); // TODO
AppleCxxPlatform.java,this.cflags = cflagsBuilder.build();,if (cflagsBuilder != null ) this.cflags = cflagsBuilder.build();
AppleCxxPlatform.java,this.cppflags = cflagsBuilder.build();,if (cflagsBuilder != null ) this.cppflags = cflagsBuilder.build();
AppleCxxPlatform.java,this.cxxflags = cflagsBuilder.build();,if (cflagsBuilder != null ) this.cxxflags = cflagsBuilder.build();
AppleCxxPlatform.java,this.cxxppflags = cflagsBuilder.build();,if (cflagsBuilder != null ) this.cxxppflags = cflagsBuilder.build();
AppleCxxPlatform.java,this.cxxldflags = cflagsBuilder.build();,if (cflagsBuilder != null ) this.cxxldflags = cflagsBuilder.build();
AppleCxxPlatform.java,this.lexflags = ImmutableList.of(); // TODO,if (TODO != null ) this.lexflags = ImmutableList.of(); // TODO
AppleCxxPlatform.java,this.yaccflags = ImmutableList.of(); // TODO,if (TODO != null ) this.yaccflags = ImmutableList.of(); // TODO
AppleCxxPlatform.java,this.ldflags = ImmutableList.of(); // TODO,if (TODO != null ) this.ldflags = ImmutableList.of(); // TODO
AppleCxxPlatform.java,this.arflags = ImmutableList.of(); // TODO,if (TODO != null ) this.arflags = ImmutableList.of(); // TODO
NdkCxxPlatform.java,this.asppflags = ImmutableList.of();,if (ImmutableList != null ) this.asppflags = ImmutableList.of();
NdkCxxPlatform.java,this.cxxldflags = ImmutableList.of();,if (ImmutableList != null ) this.cxxldflags = ImmutableList.of();
NdkCxxPlatform.java,this.arflags = ImmutableList.of();,if (ImmutableList != null ) this.arflags = ImmutableList.of();
NdkLibraryDescription.java,CxxPlatform cxxPlatform = entry.getValue();,if (entry != null ) CxxPlatform cxxPlatform = entry.getValue();
AndroidBinaryGraphEnhancer.java,NdkCxxPlatform.CxxRuntime cxxRuntime = platform.getCxxRuntime();,if (platform != null ) NdkCxxPlatform.CxxRuntime cxxRuntime = platform.getCxxRuntime();
CxxPythonExtensionDescription.java,"Path extensionPath = getExtensionPath(params.getBuildTarget(), cxxPlatform.asFlavor());","if (cxxPlatform != null ) Path extensionPath = getExtensionPath(params.getBuildTarget(), cxxPlatform.asFlavor());"
CxxLibraryDescriptionTest.java,"Path staticLib = CxxDescriptionEnhancer.getStaticLibraryPath(target, cxxPlatform.asFlavor());","if (cxxPlatform != null ) Path staticLib = CxxDescriptionEnhancer.getStaticLibraryPath(target, cxxPlatform.asFlavor());"
Parser.java,Path normalized = normalize(target.getBuildFilePath());,if (normalize(target != null ) Path normalized = normalize(target.getBuildFilePath());
Repository.java,Path relativePath = target.getBuildFilePath();,if (target != null ) Path relativePath = target.getBuildFilePath();
GenerateManifestStep.java,File skeletonManifestFile = skeletonManifestPath.toFile();,if (skeletonManifestPath != null ) File skeletonManifestFile = skeletonManifestPath.toFile();
TargetsCommand.java,basePathOfTargets = basePathOfTargetsBuilder.build();,if (basePathOfTargetsBuilder != null ) basePathOfTargets = basePathOfTargetsBuilder.build();
BuckConfigTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRootPath());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRootPath());
ParserTest.java,Iterable<String> defaultIncludes = ImmutableList.of();,if (ImmutableList != null ) Iterable<String> defaultIncludes = ImmutableList.of();
ParserTest.java,Iterable<String> defaultIncludes = ImmutableList.of();,if (ImmutableList != null ) Iterable<String> defaultIncludes = ImmutableList.of();
ParserTest.java,Iterable<String> defaultIncludes = ImmutableList.of();,if (ImmutableList != null ) Iterable<String> defaultIncludes = ImmutableList.of();
ParserTest.java,Iterable<String> defaultIncludes = ImmutableList.of();,if (ImmutableList != null ) Iterable<String> defaultIncludes = ImmutableList.of();
ParserTest.java,Iterable<String> defaultIncludes = ImmutableList.of();,if (ImmutableList != null ) Iterable<String> defaultIncludes = ImmutableList.of();
ParserTest.java,Iterable<String> defaultIncludes = ImmutableList.of();,if (ImmutableList != null ) Iterable<String> defaultIncludes = ImmutableList.of();
ParserTest.java,Iterable<String> defaultIncludes = ImmutableList.of();,if (ImmutableList != null ) Iterable<String> defaultIncludes = ImmutableList.of();
Jsr199Javac.java,ClassLoaderCache classLoaderCache = context.getClassLoaderCache();,if (context != null ) ClassLoaderCache classLoaderCache = context.getClassLoaderCache();
Jsr199Javac.java,compilerClassLoader = ToolProvider.getSystemToolClassLoader();,if (ToolProvider != null ) compilerClassLoader = ToolProvider.getSystemToolClassLoader();
AuditInputCommandTest.java,Repository repository = new TestRepositoryBuilder().build();,if (TestRepositoryBuilder() != null ) Repository repository = new TestRepositoryBuilder().build();
Jsr199Javac.java,JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();,if (ToolProvider != null ) JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
ProjectCommand.java,File tempDir = Files.createTempDir();,if (Files != null ) File tempDir = Files.createTempDir();
ProjectCommand.java,List<String> additionalInitialTargets = ImmutableList.of();,if (ImmutableList != null ) List<String> additionalInitialTargets = ImmutableList.of();
JavacStep.java,String invoker = invokingRule.toString();,if (invokingRule != null ) String invoker = invokingRule.toString();
PathTypeCoercer.java,normalizedPath = pathRelativeToProjectRoot.resolve(path).normalize();,if (pathRelativeToProjectRoot != null ) normalizedPath = pathRelativeToProjectRoot.resolve(path).normalize();
ShellStep.java,ProcessExecutorParams.Builder builder = ProcessExecutorParams.builder();,if (ProcessExecutorParams != null ) ProcessExecutorParams.Builder builder = ProcessExecutorParams.builder();
StringResources.java,int previousResourceId = arrays.keySet().first();,if (arrays != null ) int previousResourceId = arrays.keySet().first();
BuildTarget.java,flavors = ImmutableSortedSet.naturalOrder();,if (ImmutableSortedSet != null ) flavors = ImmutableSortedSet.naturalOrder();
BuildTargets.java,flavor = domain.getFlavor(target.getFlavors());,if (domain != null ) flavor = domain.getFlavor(target.getFlavors());
BuildTargets.java,depFlavor = domain.getFlavor(dep.getFlavors());,if (domain != null ) depFlavor = domain.getFlavor(dep.getFlavors());
ThriftLibraryDescription.java,enhancerFlavor = enhancers.getFlavorAndValue(target.getFlavors());,if (enhancers != null ) enhancerFlavor = enhancers.getFlavorAndValue(target.getFlavors());
ThriftLibraryDescription.java,enhancerFlavor = enhancers.getFlavorAndValue(buildTarget.getFlavors());,if (enhancers != null ) enhancerFlavor = enhancers.getFlavorAndValue(buildTarget.getFlavors());
Repository.java,localToCanonicalRepoNamesMap = builder.build();,if (builder != null ) localToCanonicalRepoNamesMap = builder.build();
CacheCommand.java,BuckConfig buckConfig = options.getBuckConfig();,if (options != null ) BuckConfig buckConfig = options.getBuckConfig();
JavaBuckConfig.java,"JavacVersion version = getJavacVersion(processExecutor, externalJavac.get());","if (externalJavac != null ) JavacVersion version = getJavacVersion(processExecutor, externalJavac.get());"
JavaBuckConfig.java,String stderr = versionResult.getStderr().get();,if (versionResult != null ) String stderr = versionResult.getStderr().get();
JavaBuckConfigTest.java,File javac = temporaryFolder.newFile();,if (temporaryFolder != null ) File javac = temporaryFolder.newFile();
KnownBuildRuleTypesTest.java,final File javac = temporaryFolder.newFile();,if (temporaryFolder != null ) final File javac = temporaryFolder.newFile();
KnownBuildRuleTypesTest.java,final File javac = temporaryFolder.newFile();,if (temporaryFolder != null ) final File javac = temporaryFolder.newFile();
JavaBuckConfig.java,Optional<JavacVersion> javacVersion = Optional.absent();,if (Optional != null ) Optional<JavacVersion> javacVersion = Optional.absent();
KnownBuildRuleTypes.java,Javac javac = javaConfig.getJavac();,if (javaConfig != null ) Javac javac = javaConfig.getJavac();
JavaBuckConfigTest.java,Javac actualJavac = config.getJavac();,if (config != null ) Javac actualJavac = config.getJavac();
JavaBuckConfigTest.java,Javac actualJavac = config.getJavac();,if (config != null ) Javac actualJavac = config.getJavac();
AnnotationProcessingParams.java,String type = rule.getType().getName();,if (rule != null ) String type = rule.getType().getName();
BuildRuleType.java,this.name = name.toLowerCase();,if (name != null ) this.name = name.toLowerCase();
JavacOptions.java,Path generateTo = annotationProcessingData.getGeneratedSourceFolderName();,if (annotationProcessingData != null ) Path generateTo = annotationProcessingData.getGeneratedSourceFolderName();
JavacStep.java,AnnotationProcessingDataDecorator decorator = AnnotationProcessingDataDecorators.identity();,if (AnnotationProcessingDataDecorators != null ) AnnotationProcessingDataDecorator decorator = AnnotationProcessingDataDecorators.identity();
Project.java,AnnotationProcessingData processingData = javaLibrary.getAnnotationProcessingData();,if (javaLibrary != null ) AnnotationProcessingData processingData = javaLibrary.getAnnotationProcessingData();
Project.java,Path annotationGenSrc = processingData.getGeneratedSourceFolderName();,if (processingData != null ) Path annotationGenSrc = processingData.getGeneratedSourceFolderName();
AndroidLibraryTest.java,AnnotationProcessingData processingData = library.getAnnotationProcessingData();,if (library != null ) AnnotationProcessingData processingData = library.getAnnotationProcessingData();
AndroidBinary.java,Optional<PackageStringAssets> packageStringAssets = enhancementResult.packageStringAssets();,if (enhancementResult != null ) Optional<PackageStringAssets> packageStringAssets = enhancementResult.packageStringAssets();
AndroidBinary.java,AndroidPackageableCollection packageableCollection = enhancementResult.packageableCollection();,if (enhancementResult != null ) AndroidPackageableCollection packageableCollection = enhancementResult.packageableCollection();
AndroidBinary.java,classpathEntriesToDex = enhancementResult.classpathEntriesToDex();,if (enhancementResult != null ) classpathEntriesToDex = enhancementResult.classpathEntriesToDex();
AndroidBinary.java,classNamesToHashesSupplier = packageableCollection.classNamesToHashesSupplier();,if (packageableCollection != null ) classNamesToHashesSupplier = packageableCollection.classNamesToHashesSupplier();
AndroidBinary.java,Optional<PreDexMerge> preDexMerge = enhancementResult.preDexMerge();,if (enhancementResult != null ) Optional<PreDexMerge> preDexMerge = enhancementResult.preDexMerge();
AndroidBinary.java,PreDexMerge preDexMerge = enhancementResult.preDexMerge().get();,if (enhancementResult != null ) PreDexMerge preDexMerge = enhancementResult.preDexMerge().get();
AndroidBinary.java,CopyNativeLibraries copyNativeLibraries = enhancementResult.copyNativeLibraries().get();,if (enhancementResult != null ) CopyNativeLibraries copyNativeLibraries = enhancementResult.copyNativeLibraries().get();
CompilationDatabase.java,Path sysroot = appleSdkPaths.sdkPath();,if (appleSdkPaths != null ) Path sysroot = appleSdkPaths.sdkPath();
CompilationDatabase.java,String sdkRoot = appleSdkPaths.sdkPath().toString();,if (appleSdkPaths != null ) String sdkRoot = appleSdkPaths.sdkPath().toString();
NewNativeTargetProjectMutator.java,sourceTreePath = framework.sourceTreePath().get();,if (framework != null ) sourceTreePath = framework.sourceTreePath().get();
ExopackageInstaller.java,ExopackageInfo.DexInfo dexInfo = exopackageInfo.dexInfo().get();,if (exopackageInfo != null ) ExopackageInfo.DexInfo dexInfo = exopackageInfo.dexInfo().get();
ExopackageInstaller.java,ExopackageInfo.NativeLibsInfo nativeLibsInfo = exopackageInfo.nativeLibsInfo().get();,if (exopackageInfo != null ) ExopackageInfo.NativeLibsInfo nativeLibsInfo = exopackageInfo.nativeLibsInfo().get();
AndroidBinaryGraphEnhancerTest.java,ImmutableSortedSet<BuildRule> finalDeps = result.finalDeps();,if (result != null ) ImmutableSortedSet<BuildRule> finalDeps = result.finalDeps();
Project.java,SortedSet<String> references = Sets.newTreeSet();,if (Sets != null ) SortedSet<String> references = Sets.newTreeSet();
Project.java,Module dep = nameToModuleIndex.get(dependency.getModuleName());,if (nameToModuleIndex != null ) Module dep = nameToModuleIndex.get(dependency.getModuleName());
Project.java,boolean isAndroidLibrary = module.isAndroidLibrary();,if (module != null ) boolean isAndroidLibrary = module.isAndroidLibrary();
Project.java,String properties = builder.toString();,if (builder != null ) String properties = builder.toString();
ProjectTest.java,List<Module> modules = projectWithModules.project.createModulesForProjectConfigs();,if (projectWithModules != null ) List<Module> modules = projectWithModules.project.createModulesForProjectConfigs();
DxStep.java,String defaultDx = androidPlatformTarget.getDxExecutable().toString();,if (androidPlatformTarget != null ) String defaultDx = androidPlatformTarget.getDxExecutable().toString();
DxStep.java,String customDx = getPathToCustomDx.get();,if (getPathToCustomDx != null ) String customDx = getPathToCustomDx.get();
DxStep.java,String dx = androidPlatformTarget.getDxExecutable().toString();,if (androidPlatformTarget != null ) String dx = androidPlatformTarget.getDxExecutable().toString();
DxStep.java,String customDx = getPathToCustomDx.get();,if (getPathToCustomDx != null ) String customDx = getPathToCustomDx.get();
DefaultJavaLibraryTest.java,List<Step> steps = stepsBuilder.build();,if (stepsBuilder != null ) List<Step> steps = stepsBuilder.build();
CxxLibraryDescriptionTest.java,ImmutableList<SourcePath> inputs = input.getInputs();,if (input != null ) ImmutableList<SourcePath> inputs = input.getInputs();
CxxPreprocessorInput.java,private ImmutableCxxHeaders includes = ImmutableCxxHeaders.builder().build();,if (ImmutableCxxHeaders != null ) private ImmutableCxxHeaders includes = ImmutableCxxHeaders.builder().build();
AuditClasspathCommand.java,this.targetGraphTransformer = new TargetGraphToActionGraph(params.getBuckEventBus());,if (TargetGraphToActionGraph(params != null ) this.targetGraphTransformer = new TargetGraphToActionGraph(params.getBuckEventBus());
BuildCommand.java,this.targetGraphTransformer = new TargetGraphToActionGraph(params.getBuckEventBus());,if (TargetGraphToActionGraph(params != null ) this.targetGraphTransformer = new TargetGraphToActionGraph(params.getBuckEventBus());
ProjectCommand.java,this.targetGraphTransformer = new TargetGraphToActionGraph(params.getBuckEventBus());,if (TargetGraphToActionGraph(params != null ) this.targetGraphTransformer = new TargetGraphToActionGraph(params.getBuckEventBus());
TargetsCommand.java,this.targetGraphTransformer = new TargetGraphToActionGraph(params.getBuckEventBus());,if (TargetGraphToActionGraph(params != null ) this.targetGraphTransformer = new TargetGraphToActionGraph(params.getBuckEventBus());
TestCommand.java,this.targetGraphTransformer = new TargetGraphToActionGraph(params.getBuckEventBus());,if (TargetGraphToActionGraph(params != null ) this.targetGraphTransformer = new TargetGraphToActionGraph(params.getBuckEventBus());
UninstallCommand.java,this.targetGraphTransformer = new TargetGraphToActionGraph(params.getBuckEventBus());,if (TargetGraphToActionGraph(params != null ) this.targetGraphTransformer = new TargetGraphToActionGraph(params.getBuckEventBus());
TargetNodeToBuildRuleTransformer.java,BuildRuleFactoryParams ruleFactoryParams = targetNode.getRuleFactoryParams();,if (targetNode != null ) BuildRuleFactoryParams ruleFactoryParams = targetNode.getRuleFactoryParams();
TargetNodeToBuildRuleTransformer.java,Description<T> description = targetNode.getDescription();,if (targetNode != null ) Description<T> description = targetNode.getDescription();
TargetNodeToBuildRuleTransformer.java,T arg = targetNode.getConstructorArg();,if (targetNode != null ) T arg = targetNode.getConstructorArg();
ShellStep.java,process = processBuilder.start();,if (processBuilder != null ) process = processBuilder.start();
Jsr199Compiler.java,"processorBundle.classLoader = new URLClassLoader(urls, ToolProvider.getSystemToolClassLoader());","if (ToolProvider != null ) processorBundle.classLoader = new URLClassLoader(urls, ToolProvider.getSystemToolClassLoader());"
TargetsCommand.java,Path outputPath = rule.getPathToOutputFile();,if (rule != null ) Path outputPath = rule.getPathToOutputFile();
HttpDownloaderIntegrationTest.java,port = connector.getLocalPort();,if (connector != null ) port = connector.getLocalPort();
BuildCommand.java,boolean isKeepGoing = options.isKeepGoing();,if (options != null ) boolean isKeepGoing = options.isKeepGoing();
BuildCommand.java,Optional<Path> pathToBuildReport = options.getPathToBuildReport();,if (options != null ) Optional<Path> pathToBuildReport = options.getPathToBuildReport();
BuildCommand.java,BuildRule rule = entry.getKey();,if (entry != null ) BuildRule rule = entry.getKey();
BuildCommand.java,Optional<BuildRuleSuccess> success = entry.getValue();,if (entry != null ) Optional<BuildRuleSuccess> success = entry.getValue();
BuildCommand.java,outputFile = rule.getPathToOutputFile();,if (rule != null ) outputFile = rule.getPathToOutputFile();
BuildCommand.java,BuildRule rule = entry.getKey();,if (entry != null ) BuildRule rule = entry.getKey();
BuildCommand.java,Optional<BuildRuleSuccess> success = entry.getValue();,if (entry != null ) Optional<BuildRuleSuccess> success = entry.getValue();
BuildCommand.java,Path outputFile = rule.getPathToOutputFile();,if (rule != null ) Path outputFile = rule.getPathToOutputFile();
BuildCommand.java,Set<BuildRule> allBuildRules = Sets.newHashSet();,if (Sets != null ) Set<BuildRule> allBuildRules = Sets.newHashSet();
BuildCommand.java,ImmutableSortedSet<BuildRule> deps = buildRule.getDeps();,if (buildRule != null ) ImmutableSortedSet<BuildRule> deps = buildRule.getDeps();
BuildCommand.java,final ActionGraph actionGraph = build.getActionGraph();,if (build != null ) final ActionGraph actionGraph = build.getActionGraph();
BuildCommand.java,results = buildFuture.get();,if (buildFuture != null ) results = buildFuture.get();
BuildCommandTest.java,ruleToResult = Maps.newLinkedHashMap();,if (Maps != null ) ruleToResult = Maps.newLinkedHashMap();
PrebuiltCxxLibraryDescription.java,String libName = args.libName.or(target.getShortNameOnly());,if (args != null ) String libName = args.libName.or(target.getShortNameOnly());
PrebuiltCxxLibraryDescription.java,String libName = args.libName.or(target.getShortNameOnly());,if (args != null ) String libName = args.libName.or(target.getShortNameOnly());
PrebuiltOCamlLibraryDescription.java,final String libName = args.libName.or(target.getShortNameOnly());,if (args != null ) final String libName = args.libName.or(target.getShortNameOnly());
ExportFile.java,this.name = args.out.or(target.getShortName());,if (args != null ) this.name = args.out.or(target.getShortName());
PrebuiltCxxLibraryDescriptionTest.java,String libName = arg.libName.or(TARGET.getShortNameOnly());,if (arg != null ) String libName = arg.libName.or(TARGET.getShortNameOnly());
PrebuiltCxxLibraryDescriptionTest.java,String libName = arg.libName.or(TARGET.getShortNameOnly());,if (arg != null ) String libName = arg.libName.or(TARGET.getShortNameOnly());
PrebuiltCxxLibraryDescriptionTest.java,String libName = arg.libName.or(TARGET.getShortNameOnly());,if (arg != null ) String libName = arg.libName.or(TARGET.getShortNameOnly());
AndroidBinaryGraphEnhancerTest.java,EnhancementResult result = graphEnhancer.createAdditionalBuildables();,if (graphEnhancer != null ) EnhancementResult result = graphEnhancer.createAdditionalBuildables();
ProjectFilesystem.java,CustomZipEntry entry = new CustomZipEntry(path.toString());,if (CustomZipEntry(path != null ) CustomZipEntry entry = new CustomZipEntry(path.toString());
ProjectFilesystem.java,File file = full.toFile();,if (full != null ) File file = full.toFile();
Downloader.java,long contentLength = connection.getContentLengthLong();,if (connection != null ) long contentLength = connection.getContentLengthLong();
Downloader.java,int r = is.read();,if (is != null ) int r = is.read();
ProjectCommand.java,ImmutableSet<String> argumentsAsBuildTargets = options.getArgumentsFormattedAsBuildTargets();,if (options != null ) ImmutableSet<String> argumentsAsBuildTargets = options.getArgumentsFormattedAsBuildTargets();
ProjectCommand.java,fullGraph = targetGraphAndTargets.getFullGraph();,if (targetGraphAndTargets != null ) fullGraph = targetGraphAndTargets.getFullGraph();
ProjectCommand.java,actionGraph = targetGraphTransformer.apply(targetGraphAndTargets.getTargetGraph());,if (targetGraphTransformer != null ) actionGraph = targetGraphTransformer.apply(targetGraphAndTargets.getTargetGraph());
ProjectCommand.java,ImmutableSet<String> argumentsAsBuildTargets = options.getArgumentsFormattedAsBuildTargets();,if (options != null ) ImmutableSet<String> argumentsAsBuildTargets = options.getArgumentsFormattedAsBuildTargets();
BuildCommand.java,buildTargets = getBuildTargets(options.getArgumentsFormattedAsBuildTargets());,if (getBuildTargets(options != null ) buildTargets = getBuildTargets(options.getArgumentsFormattedAsBuildTargets());
ProjectCommand.java,ImmutableSet<String> argumentsAsBuildTargets = options.getArgumentsFormattedAsBuildTargets();,if (options != null ) ImmutableSet<String> argumentsAsBuildTargets = options.getArgumentsFormattedAsBuildTargets();
CopyNativeLibraries.java,Optional<String> abiDirectoryComponent = getAbiDirectoryComponent(entry.getKey().getKey());,if (getAbiDirectoryComponent(entry != null ) Optional<String> abiDirectoryComponent = getAbiDirectoryComponent(entry.getKey().getKey());
AgentUtilTest.java,String jarSignature = AgentUtil.getJarSignature(testJar.getAbsolutePath());,if (AgentUtil != null ) String jarSignature = AgentUtil.getJarSignature(testJar.getAbsolutePath());
ProjectWorkspace.java,this.templatePath = templateDir.toPath();,if (templateDir != null ) this.templatePath = templateDir.toPath();
WorkspaceAndProjectGenerator.java,groups = groupsBuilder.build();,if (groupsBuilder != null ) groups = groupsBuilder.build();
WorkspaceAndProjectGenerator.java,multiEntryGroupsBuilder = ImmutableMultimap.builder();,if (ImmutableMultimap != null ) multiEntryGroupsBuilder = ImmutableMultimap.builder();
BuckConfig.java,"buildTarget = buildTargetParser.parse(value, BuildTargetPatternParser.fullyQualified());","if (BuildTargetPatternParser != null ) buildTarget = buildTargetParser.parse(value, BuildTargetPatternParser.fullyQualified());"
BuildTargetParserTest.java,BuildTargetPatternParser context = BuildTargetPatternParser.fullyQualified();,if (BuildTargetPatternParser != null ) BuildTargetPatternParser context = BuildTargetPatternParser.fullyQualified();
BuildTargetParserTest.java,BuildTargetPatternParser context = BuildTargetPatternParser.fullyQualified();,if (BuildTargetPatternParser != null ) BuildTargetPatternParser context = BuildTargetPatternParser.fullyQualified();
BuildTargetParserTest.java,BuildTargetPatternParser context = BuildTargetPatternParser.fullyQualified();,if (BuildTargetPatternParser != null ) BuildTargetPatternParser context = BuildTargetPatternParser.fullyQualified();
BuildTargetPatternParserTest.java,BuildTargetPatternParser buildTargetPatternParser = BuildTargetPatternParser.fullyQualified();,if (BuildTargetPatternParser != null ) BuildTargetPatternParser buildTargetPatternParser = BuildTargetPatternParser.fullyQualified();
BuildTargetPatternParserTest.java,BuildTargetPatternParser parser = BuildTargetPatternParser.forVisibilityArgument();,if (BuildTargetPatternParser != null ) BuildTargetPatternParser parser = BuildTargetPatternParser.forVisibilityArgument();
BuckConfig.java,"buildTarget = buildTargetParser.parse(value, ParseContext.fullyQualified());","if (ParseContext != null ) buildTarget = buildTargetParser.parse(value, ParseContext.fullyQualified());"
UninstallCommand.java,"buildTarget = buildTargetParser.parse(buildTargetName, ParseContext.fullyQualified());","if (ParseContext != null ) buildTarget = buildTargetParser.parse(buildTargetName, ParseContext.fullyQualified());"
ParseContext.java,String location = getType().name();,if (getType() != null ) String location = getType().name();
Parser.java,ParseContext parseContext = ParseContext.forBaseName(buildTarget.getBaseName());,if (ParseContext != null ) ParseContext parseContext = ParseContext.forBaseName(buildTarget.getBaseName());
BuildRuleFactoryParams.java,this.buildFileParseContext = ParseContext.forBaseName(target.getBaseName());,if (ParseContext != null ) this.buildFileParseContext = ParseContext.forBaseName(target.getBaseName());
BuildTargetParserTest.java,ParseContext parseContext = ParseContext.forVisibilityArgument();,if (ParseContext != null ) ParseContext parseContext = ParseContext.forVisibilityArgument();
BuildTargetParserTest.java,ParseContext context = ParseContext.fullyQualified();,if (ParseContext != null ) ParseContext context = ParseContext.fullyQualified();
BuildTargetParserTest.java,ParseContext context = ParseContext.fullyQualified();,if (ParseContext != null ) ParseContext context = ParseContext.fullyQualified();
BuildTargetParserTest.java,ParseContext context = ParseContext.fullyQualified();,if (ParseContext != null ) ParseContext context = ParseContext.fullyQualified();
BuildTargetPatternParserTest.java,ParseContext parseContext = ParseContext.forVisibilityArgument();,if (ParseContext != null ) ParseContext parseContext = ParseContext.forVisibilityArgument();
BuildTargetPatternParserTest.java,ParseContext parseContext = ParseContext.fullyQualified();,if (ParseContext != null ) ParseContext parseContext = ParseContext.fullyQualified();
BuildTargetPatternParserTest.java,ParseContext parseContext = ParseContext.forVisibilityArgument();,if (ParseContext != null ) ParseContext parseContext = ParseContext.forVisibilityArgument();
ProjectCommand.java,sourceUnderTest = argWithSourceUnderTest.getSourceUnderTest();,if (argWithSourceUnderTest != null ) sourceUnderTest = argWithSourceUnderTest.getSourceUnderTest();
Project.java,List<String> modifiedFiles = Lists.newArrayList();,if (Lists != null ) List<String> modifiedFiles = Lists.newArrayList();
NoSuchBuildTargetException.java,String location = parseContext.getType().name();,if (parseContext != null ) String location = parseContext.getType().name();
ElfSection.java,ByteBuffer body = buffer.slice();,if (buffer != null ) ByteBuffer body = buffer.slice();
CxxBinaryDescriptionTest.java,CxxBinaryDescription.Arg arg = new CxxBinaryDescription.Arg();,if (CxxBinaryDescription != null ) CxxBinaryDescription.Arg arg = new CxxBinaryDescription.Arg();
CxxBinaryDescriptionTest.java,arg.compilerFlags = Optional.absent();,if (Optional != null ) arg.compilerFlags = Optional.absent();
CxxBinaryDescriptionTest.java,arg.preprocessorFlags = Optional.absent();,if (Optional != null ) arg.preprocessorFlags = Optional.absent();
CxxBinaryDescriptionTest.java,arg.langPreprocessorFlags = Optional.absent();,if (Optional != null ) arg.langPreprocessorFlags = Optional.absent();
CxxBinaryDescriptionTest.java,arg.linkerFlags = Optional.absent();,if (Optional != null ) arg.linkerFlags = Optional.absent();
CxxBinaryDescriptionTest.java,arg.lexSrcs = Optional.absent();,if (Optional != null ) arg.lexSrcs = Optional.absent();
CxxBinaryDescriptionTest.java,arg.yaccSrcs = Optional.absent();,if (Optional != null ) arg.yaccSrcs = Optional.absent();
CxxBinaryDescriptionTest.java,arg.headerNamespace = Optional.absent();,if (Optional != null ) arg.headerNamespace = Optional.absent();
CxxLibraryDescriptionTest.java,GenruleDescription.Arg arg = new GenruleDescription().createUnpopulatedConstructorArg();,if (GenruleDescription() != null ) GenruleDescription.Arg arg = new GenruleDescription().createUnpopulatedConstructorArg();
CxxLibraryDescriptionTest.java,arg.bash = Optional.absent();,if (Optional != null ) arg.bash = Optional.absent();
CxxLibraryDescriptionTest.java,arg.cmd = Optional.absent();,if (Optional != null ) arg.cmd = Optional.absent();
CxxLibraryDescriptionTest.java,arg.cmdExe = Optional.absent();,if (Optional != null ) arg.cmdExe = Optional.absent();
CxxLibraryDescriptionTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
CxxLibraryDescriptionTest.java,arg.srcs = Optional.absent();,if (Optional != null ) arg.srcs = Optional.absent();
CxxLibraryDescriptionTest.java,CxxLibraryDescription.Arg arg = description.createEmptyConstructorArg();,if (description != null ) CxxLibraryDescription.Arg arg = description.createEmptyConstructorArg();
CxxLibraryDescriptionTest.java,CxxLibraryDescription.Arg arg = description.createEmptyConstructorArg();,if (description != null ) CxxLibraryDescription.Arg arg = description.createEmptyConstructorArg();
CxxLibraryDescriptionTest.java,CxxLibraryDescription.Arg normalArg = description.createEmptyConstructorArg();,if (description != null ) CxxLibraryDescription.Arg normalArg = description.createEmptyConstructorArg();
CxxLibraryDescriptionTest.java,CxxLibraryDescription.Arg linkWholeArg = description.createEmptyConstructorArg();,if (description != null ) CxxLibraryDescription.Arg linkWholeArg = description.createEmptyConstructorArg();
CxxLibraryDescriptionTest.java,CxxLibraryDescription.Arg arg = description.createEmptyConstructorArg();,if (description != null ) CxxLibraryDescription.Arg arg = description.createEmptyConstructorArg();
CxxPythonExtensionDescriptionTest.java,CxxPythonExtensionDescription.Arg arg = desc.createUnpopulatedConstructorArg();,if (desc != null ) CxxPythonExtensionDescription.Arg arg = desc.createUnpopulatedConstructorArg();
CxxPythonExtensionDescriptionTest.java,arg.srcs = Optional.absent();,if (Optional != null ) arg.srcs = Optional.absent();
CxxPythonExtensionDescriptionTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
CxxPythonExtensionDescriptionTest.java,arg.headers = Optional.absent();,if (Optional != null ) arg.headers = Optional.absent();
CxxPythonExtensionDescriptionTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
CxxPythonExtensionDescriptionTest.java,arg.compilerFlags = Optional.absent();,if (Optional != null ) arg.compilerFlags = Optional.absent();
CxxPythonExtensionDescriptionTest.java,arg.preprocessorFlags = Optional.absent();,if (Optional != null ) arg.preprocessorFlags = Optional.absent();
CxxPythonExtensionDescriptionTest.java,arg.langPreprocessorFlags = Optional.absent();,if (Optional != null ) arg.langPreprocessorFlags = Optional.absent();
CxxPythonExtensionDescriptionTest.java,arg.lexSrcs = Optional.absent();,if (Optional != null ) arg.lexSrcs = Optional.absent();
CxxPythonExtensionDescriptionTest.java,arg.yaccSrcs = Optional.absent();,if (Optional != null ) arg.yaccSrcs = Optional.absent();
CxxPythonExtensionDescriptionTest.java,arg.baseModule = Optional.absent();,if (Optional != null ) arg.baseModule = Optional.absent();
CxxPythonExtensionDescriptionTest.java,arg.headerNamespace = Optional.absent();,if (Optional != null ) arg.headerNamespace = Optional.absent();
CxxPythonExtensionDescriptionTest.java,arg.baseModule = Optional.absent();,if (Optional != null ) arg.baseModule = Optional.absent();
CxxPythonExtensionDescriptionTest.java,"params = paramsForArg(arg, pythonDep.getBuildTarget());","if (pythonDep != null ) params = paramsForArg(arg, pythonDep.getBuildTarget());"
CxxPythonExtensionDescriptionTest.java,"params = paramsForArg(arg, pythonDep.getBuildTarget());","if (pythonDep != null ) params = paramsForArg(arg, pythonDep.getBuildTarget());"
CxxPythonExtensionDescriptionTest.java,"params = paramsForArg(arg, pythonDep.getBuildTarget());","if (pythonDep != null ) params = paramsForArg(arg, pythonDep.getBuildTarget());"
PrebuiltCxxLibraryDescriptionTest.java,PrebuiltCxxLibraryDescription.Arg arg = DESC.createUnpopulatedConstructorArg();,if (DESC != null ) PrebuiltCxxLibraryDescription.Arg arg = DESC.createUnpopulatedConstructorArg();
PrebuiltCxxLibraryDescriptionTest.java,arg.includeDirs = Optional.absent();,if (Optional != null ) arg.includeDirs = Optional.absent();
PrebuiltCxxLibraryDescriptionTest.java,arg.libName = Optional.absent();,if (Optional != null ) arg.libName = Optional.absent();
PrebuiltCxxLibraryDescriptionTest.java,arg.libDir = Optional.absent();,if (Optional != null ) arg.libDir = Optional.absent();
PrebuiltCxxLibraryDescriptionTest.java,arg.headerOnly = Optional.absent();,if (Optional != null ) arg.headerOnly = Optional.absent();
PrebuiltCxxLibraryDescriptionTest.java,arg.provided = Optional.absent();,if (Optional != null ) arg.provided = Optional.absent();
PrebuiltCxxLibraryDescriptionTest.java,arg.linkerFlags = Optional.absent();,if (Optional != null ) arg.linkerFlags = Optional.absent();
PrebuiltCxxLibraryDescriptionTest.java,arg.linkWhole = Optional.absent();,if (Optional != null ) arg.linkWhole = Optional.absent();
PrebuiltCxxLibraryDescriptionTest.java,arg.soname = Optional.absent();,if (Optional != null ) arg.soname = Optional.absent();
PrebuiltCxxLibraryDescriptionTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
WorkspaceGenerator.java,String groupName = name.toString();,if (name != null ) String groupName = name.toString();
TargetsCommand.java,basePathOfTargets = Sets.newHashSet();,if (Sets != null ) basePathOfTargets = Sets.newHashSet();
TargetsCommand.java,dependentTargets = Sets.newHashSet();,if (Sets != null ) dependentTargets = Sets.newHashSet();
TargetsCommand.java,basePathOfTargets = ImmutableSet.of();,if (ImmutableSet != null ) basePathOfTargets = ImmutableSet.of();
TargetsCommand.java,dependentTargets = ImmutableSet.of();,if (ImmutableSet != null ) dependentTargets = ImmutableSet.of();
TargetsCommandTest.java,ImmutableSet<BuildRuleType> buildRuleTypes = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<BuildRuleType> buildRuleTypes = ImmutableSet.of();
ProjectGenerator.java,BuildTarget buildTarget = buildTargetNode.getBuildTarget();,if (buildTargetNode != null ) BuildTarget buildTarget = buildTargetNode.getBuildTarget();
NewNativeTargetProjectMutator.java,this.targetName = buildTarget.getFullyQualifiedName();,if (buildTarget != null ) this.targetName = buildTarget.getFullyQualifiedName();
SeparatedProjectsGenerator.java,projectGenerators = projectGeneratorsBuilder.build();,if (projectGeneratorsBuilder != null ) projectGenerators = projectGeneratorsBuilder.build();
ProjectCommand.java,boolean combinedProject = options.getCombinedProject();,if (options != null ) boolean combinedProject = options.getCombinedProject();
SeparatedProjectsGeneratorTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
SeparatedProjectsGeneratorTest.java,ImmutableSet<Path> paths = generator.generateProjects();,if (generator != null ) ImmutableSet<Path> paths = generator.generateProjects();
WorkspaceAndProjectGenerator.java,orderedTestTargetNodes = orderedTestTargetNodesBuilder.build();,if (orderedTestTargetNodesBuilder != null ) orderedTestTargetNodes = orderedTestTargetNodesBuilder.build();
WorkspaceAndProjectGenerator.java,orderedTestBundleTargetNodes = orderedTestBundleTargetNodesBuilder.build();,if (orderedTestBundleTargetNodesBuilder != null ) orderedTestBundleTargetNodes = orderedTestBundleTargetNodesBuilder.build();
ProjectBuildFileParser.java,String buildFileString = buildFile.get().toString();,if (buildFile != null ) String buildFileString = buildFile.get().toString();
AbstractAppleNativeTargetBuildRule.java,configurations = arg.configs.get();,if (arg != null ) configurations = arg.configs.get();
AbstractAppleNativeTargetBuildRule.java,frameworks = arg.frameworks.get();,if (arg != null ) frameworks = arg.frameworks.get();
AppleLibraryTest.java,AppleNativeTargetDescriptionArg arg = description.createUnpopulatedConstructorArg();,if (description != null ) AppleNativeTargetDescriptionArg arg = description.createUnpopulatedConstructorArg();
AppleLibraryTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
AppleLibraryTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
AppleLibraryTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
AppleLibraryTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
AppleLibraryTest.java,arg.prefixHeader = Optional.absent();,if (Optional != null ) arg.prefixHeader = Optional.absent();
AppleLibraryTest.java,AppleNativeTargetDescriptionArg arg = description.createUnpopulatedConstructorArg();,if (description != null ) AppleNativeTargetDescriptionArg arg = description.createUnpopulatedConstructorArg();
AppleLibraryTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
AppleLibraryTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
AppleLibraryTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
AppleLibraryTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
AppleLibraryTest.java,arg.prefixHeader = Optional.absent();,if (Optional != null ) arg.prefixHeader = Optional.absent();
AppleLibraryTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
ProjectGenerator.java,this.buildRuleResolver = new BuildRuleResolver(actionGraph.getNodes());,if (BuildRuleResolver(actionGraph != null ) this.buildRuleResolver = new BuildRuleResolver(actionGraph.getNodes());
NewNativeTargetProjectMutatorTest.java,executionContext = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) executionContext = TestExecutionContext.newInstance();
ProjectGeneratorTest.java,executionContext = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) executionContext = TestExecutionContext.newInstance();
WorkspaceAndProjectGeneratorTest.java,executionContext = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) executionContext = TestExecutionContext.newInstance();
WorkspaceAndProjectGeneratorTest.java,graphTransformer = new TargetGraphToActionGraph(executionContext.getBuckEventBus());,if (TargetGraphToActionGraph(executionContext != null ) graphTransformer = new TargetGraphToActionGraph(executionContext.getBuckEventBus());
AppleCxxPlatform.java,this.cppflags = ImmutableList.of(); // TODO,if (TODO != null ) this.cppflags = ImmutableList.of(); // TODO
AppleCxxPlatform.java,this.cxxflags = ImmutableList.of(); // TODO,if (TODO != null ) this.cxxflags = ImmutableList.of(); // TODO
AppleCxxPlatform.java,this.cxxppflags = ImmutableList.of(); // TODO,if (TODO != null ) this.cxxppflags = ImmutableList.of(); // TODO
AppleCxxPlatform.java,this.cxxldflags = ImmutableList.of(); // TODO,if (TODO != null ) this.cxxldflags = ImmutableList.of(); // TODO
AppleConfig.java,Path appleDeveloperDirectory = getAppleDeveloperDirectorySupplier(console).get();,if (getAppleDeveloperDirectorySupplier(console) != null ) Path appleDeveloperDirectory = getAppleDeveloperDirectorySupplier(console).get();
AuditClasspathCommand.java,ActionGraph graph = targetGraph.getActionGraph();,if (targetGraph != null ) ActionGraph graph = targetGraph.getActionGraph();
AuditClasspathCommand.java,ActionGraph graph = targetGraph.getActionGraph();,if (targetGraph != null ) ActionGraph graph = targetGraph.getActionGraph();
ProjectCommand.java,actionGraph = targetGraphAndTargets.getTargetGraph().getActionGraph();,if (targetGraphAndTargets != null ) actionGraph = targetGraphAndTargets.getTargetGraph().getActionGraph();
TestCommand.java,ActionGraph graph = targetGraph.getActionGraph();,if (targetGraph != null ) ActionGraph graph = targetGraph.getActionGraph();
ParserTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
ParserTest.java,ActionGraph actionGraph = targetGraph.getActionGraph();,if (targetGraph != null ) ActionGraph actionGraph = targetGraph.getActionGraph();
ProjectGenerator.java,AppleNativeTargetDescriptionArg constructorArg = library.get().getConstructorArg();,if (library != null ) AppleNativeTargetDescriptionArg constructorArg = library.get().getConstructorArg();
CxxLibraryDescription.java,arg.propagatedPpFlags = Optional.absent();,if (Optional != null ) arg.propagatedPpFlags = Optional.absent();
CxxLibraryDescription.java,arg.propagatedLangPpFlags = Optional.absent();,if (Optional != null ) arg.propagatedLangPpFlags = Optional.absent();
TargetGraph.java,boolean isRuleFlavored = rule.getBuildTarget().isFlavored();,if (rule != null ) boolean isRuleFlavored = rule.getBuildTarget().isFlavored();
TargetGraph.java,boolean isDepFlavored = dep.getBuildTarget().isFlavored();,if (dep != null ) boolean isDepFlavored = dep.getBuildTarget().isFlavored();
TargetGraph.java,depsToVisit = ImmutableSet.builder();,if (ImmutableSet != null ) depsToVisit = ImmutableSet.builder();
TargetGraph.java,ActionGraph result = bottomUpTraversal.getResult();,if (bottomUpTraversal != null ) ActionGraph result = bottomUpTraversal.getResult();
TargetsCommand.java,matchingBuildRules = ImmutableSortedMap.of();,if (ImmutableSortedMap != null ) matchingBuildRules = ImmutableSortedMap.of();
TargetsCommand.java,String output = target.getKey();,if (target != null ) String output = target.getKey();
TargetsCommand.java,BuildRule buildRule = target.getValue();,if (target != null ) BuildRule buildRule = target.getValue();
TargetsCommand.java,Path outputPath = buildRule.getPathToOutputFile();,if (buildRule != null ) Path outputPath = buildRule.getPathToOutputFile();
TargetsCommand.java,Iterator<BuildRule> valueIterator = buildIndex.values().iterator();,if (buildIndex != null ) Iterator<BuildRule> valueIterator = buildIndex.values().iterator();
TargetsCommand.java,BuildRule buildRule = valueIterator.next();,if (valueIterator != null ) BuildRule buildRule = valueIterator.next();
TargetsCommand.java,BuildTarget buildTarget = buildRule.getBuildTarget();,if (buildRule != null ) BuildTarget buildTarget = buildRule.getBuildTarget();
TargetsCommand.java,Path outputPath = buildRule.getPathToOutputFile();,if (buildRule != null ) Path outputPath = buildRule.getPathToOutputFile();
TargetsCommand.java,this.graph = targetGraph.getActionGraph();,if (targetGraph != null ) this.graph = targetGraph.getActionGraph();
TargetsCommandTest.java,String observedOutput = console.getTextWrittenToStdOut();,if (console != null ) String observedOutput = console.getTextWrittenToStdOut();
TargetsCommandTest.java,String observedOutput = console.getTextWrittenToStdOut();,if (console != null ) String observedOutput = console.getTextWrittenToStdOut();
TargetsCommandTest.java,ActionGraph actionGraph = targetGraph.getActionGraph();,if (targetGraph != null ) ActionGraph actionGraph = targetGraph.getActionGraph();
TargetsCommandTest.java,ActionGraph actionGraph = targetGraph.getActionGraph();,if (targetGraph != null ) ActionGraph actionGraph = targetGraph.getActionGraph();
TargetsCommandTest.java,ActionGraph actionGraph = targetGraph.getActionGraph();,if (targetGraph != null ) ActionGraph actionGraph = targetGraph.getActionGraph();
AppleCxxPlatform.java,this.cflags = ImmutableList.of(); // TODO,if (TODO != null ) this.cflags = ImmutableList.of(); // TODO
AppleBinaryDescription.java,CxxBinaryDescription.Arg delegateArg = delegate.createUnpopulatedConstructorArg();,if (delegate != null ) CxxBinaryDescription.Arg delegateArg = delegate.createUnpopulatedConstructorArg();
AppleLibraryDescription.java,CxxLibraryDescription.Arg delegateArg = delegate.createUnpopulatedConstructorArg();,if (delegate != null ) CxxLibraryDescription.Arg delegateArg = delegate.createUnpopulatedConstructorArg();
AppleLibraryDescription.java,delegateArg.soname = Optional.absent();,if (Optional != null ) delegateArg.soname = Optional.absent();
ProjectCommand.java,ActionGraph actionGraph = targetGraphAndTargets.getTargetGraph().getActionGraph();,if (targetGraphAndTargets != null ) ActionGraph actionGraph = targetGraphAndTargets.getTargetGraph().getActionGraph();
ProjectCommand.java,BuildRuleResolver buildRuleResolver = new BuildRuleResolver(actionGraph.getNodes());,if (BuildRuleResolver(actionGraph != null ) BuildRuleResolver buildRuleResolver = new BuildRuleResolver(actionGraph.getNodes());
ProjectGenerator.java,AppleTestDescription.Arg arg = (AppleTestDescription.Arg) targetNode.getConstructorArg();,if (targetNode != null ) AppleTestDescription.Arg arg = (AppleTestDescription.Arg) targetNode.getConstructorArg();
ProjectGenerator.java,AppleBundleDescription.Arg arg = (AppleBundleDescription.Arg) targetNode.getConstructorArg();,if (targetNode != null ) AppleBundleDescription.Arg arg = (AppleBundleDescription.Arg) targetNode.getConstructorArg();
ProjectGenerator.java,"productOutputName = productName + ""."" + arg.getExtensionString();","if (arg != null ) productOutputName = productName + ""."" + arg.getExtensionString();"
ProjectGenerator.java,AppleBundleExtension extension = targetNode.getConstructorArg().extension.getLeft();,if (targetNode != null ) AppleBundleExtension extension = targetNode.getConstructorArg().extension.getLeft();
AppleBuildRulesTest.java,arg.testBundle = xctestRule.getBuildTarget();,if (xctestRule != null ) arg.testBundle = xctestRule.getBuildTarget();
AbstractAppleNativeTargetBuildRule.java,configurations = arg.configs.get();,if (arg != null ) configurations = arg.configs.get();
AbstractAppleNativeTargetBuildRule.java,frameworks = arg.frameworks.get();,if (arg != null ) frameworks = arg.frameworks.get();
AppleLibraryTest.java,AppleNativeTargetDescriptionArg arg = description.createUnpopulatedConstructorArg();,if (description != null ) AppleNativeTargetDescriptionArg arg = description.createUnpopulatedConstructorArg();
AppleLibraryTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
AppleLibraryTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
AppleLibraryTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
AppleLibraryTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
AppleLibraryTest.java,arg.prefixHeader = Optional.absent();,if (Optional != null ) arg.prefixHeader = Optional.absent();
AppleLibraryTest.java,AppleNativeTargetDescriptionArg arg = description.createUnpopulatedConstructorArg();,if (description != null ) AppleNativeTargetDescriptionArg arg = description.createUnpopulatedConstructorArg();
AppleLibraryTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
AppleLibraryTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
AppleLibraryTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
AppleLibraryTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
AppleLibraryTest.java,arg.prefixHeader = Optional.absent();,if (Optional != null ) arg.prefixHeader = Optional.absent();
AppleLibraryTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
JavaLibraryDescription.java,JavacOptions.Builder javacOptions = JavacOptions.builder();,if (JavacOptions != null ) JavacOptions.Builder javacOptions = JavacOptions.builder();
JavaLibraryDescription.java,String sourceLevel = args.source.or(javacEnv.getSourceLevel());,if (args != null ) String sourceLevel = args.source.or(javacEnv.getSourceLevel());
JavaLibraryDescription.java,String targetLevel = args.target.or(javacEnv.getTargetLevel());,if (args != null ) String targetLevel = args.target.or(javacEnv.getTargetLevel());
JavacOptionsTest.java,JavacOptions options = JavacOptions.builder().build();,if (JavacOptions != null ) JavacOptions options = JavacOptions.builder().build();
JavacOptionsTest.java,JavacOptions options = JavacOptions.builder().build();,if (JavacOptions != null ) JavacOptions options = JavacOptions.builder().build();
AuditOwnerCommand.java,dir = dir.getParent();,if (dir != null ) dir = dir.getParent();
AuditOwnerCommand.java,Path projectRoot = filesystem.getRootPath();,if (filesystem != null ) Path projectRoot = filesystem.getRootPath();
AuditOwnerCommand.java,dir = dir.getParent();,if (dir != null ) dir = dir.getParent();
ExopackageInstaller.java,String libAbi = relativePath.getParent().toString();,if (relativePath != null ) String libAbi = relativePath.getParent().toString();
ExopackageInstaller.java,String libName = relativePath.getFileName().toString();,if (relativePath != null ) String libName = relativePath.getFileName().toString();
ExopackageSoLoader.java,line = line.trim();,if (line != null ) line = line.trim();
ProjectCommand.java,testTargetNodes = Collections.emptySet();,if (Collections != null ) testTargetNodes = Collections.emptySet();
ProjectCommand.java,Optional<TargetGraph> testGraph = Optional.absent();,if (Optional != null ) Optional<TargetGraph> testGraph = Optional.absent();
WorkspaceAndProjectGenerator.java,workspaceName = workspaceBuildable.getWorkspaceName();,if (workspaceBuildable != null ) workspaceName = workspaceBuildable.getWorkspaceName();
WorkspaceAndProjectGenerator.java,outputDirectory = workspaceBuildable.getBuildTarget().getBasePath();,if (workspaceBuildable != null ) outputDirectory = workspaceBuildable.getBuildTarget().getBasePath();
WorkspaceAndProjectGenerator.java,final ActionGraph actionGraph = projectGraph.getActionGraph();,if (projectGraph != null ) final ActionGraph actionGraph = projectGraph.getActionGraph();
WorkspaceAndProjectGenerator.java,orderedBuildRules = ImmutableSet.of();,if (ImmutableSet != null ) orderedBuildRules = ImmutableSet.of();
WorkspaceAndProjectGenerator.java,orderedTestBuildRules = orderedTestBuildRulesBuilder.build();,if (orderedTestBuildRulesBuilder != null ) orderedTestBuildRules = orderedTestBuildRulesBuilder.build();
WorkspaceAndProjectGenerator.java,orderedTestBundleRules = orderedTestBundleRulesBuilder.build();,if (orderedTestBundleRulesBuilder != null ) orderedTestBundleRules = orderedTestBundleRulesBuilder.build();
WorkspaceAndProjectGenerator.java,Set<BuildTarget> initialTargets = initialTargetsBuilder.build();,if (initialTargetsBuilder != null ) Set<BuildTarget> initialTargets = initialTargetsBuilder.build();
WorkspaceAndProjectGenerator.java,final ActionGraph actionGraph = projectGraph.getActionGraph();,if (projectGraph != null ) final ActionGraph actionGraph = projectGraph.getActionGraph();
ProjectCommand.java,Object constructorArg = input.getConstructorArg();,if (input != null ) Object constructorArg = input.getConstructorArg();
ProjectCommand.java,testBuildRules = Collections.emptySet();,if (Collections != null ) testBuildRules = Collections.emptySet();
ProjectCommand.java,BuildRule projectRule = projectConfig.getProjectRule();,if (projectConfig != null ) BuildRule projectRule = projectConfig.getProjectRule();
ProjectCommand.java,ActionGraph actionGraph = targetGraph.getActionGraph();,if (targetGraph != null ) ActionGraph actionGraph = targetGraph.getActionGraph();
ProjectCommand.java,ActionGraph candidateActionGraph = candidateGraph.getActionGraph();,if (candidateGraph != null ) ActionGraph candidateActionGraph = candidateGraph.getActionGraph();
WorkspaceAndProjectGeneratorTest.java,actionGraph = targetGraph.getActionGraph();,if (targetGraph != null ) actionGraph = targetGraph.getActionGraph();
AbstractAppleNativeTargetBuildRule.java,configurations = arg.configs.get();,if (arg != null ) configurations = arg.configs.get();
AbstractAppleNativeTargetBuildRule.java,frameworks = arg.frameworks.get();,if (arg != null ) frameworks = arg.frameworks.get();
AppleLibraryTest.java,AppleNativeTargetDescriptionArg arg = description.createUnpopulatedConstructorArg();,if (description != null ) AppleNativeTargetDescriptionArg arg = description.createUnpopulatedConstructorArg();
AppleLibraryTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
AppleLibraryTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
AppleLibraryTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
AppleLibraryTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
AppleLibraryTest.java,arg.prefixHeader = Optional.absent();,if (Optional != null ) arg.prefixHeader = Optional.absent();
AppleLibraryTest.java,AppleNativeTargetDescriptionArg arg = description.createUnpopulatedConstructorArg();,if (description != null ) AppleNativeTargetDescriptionArg arg = description.createUnpopulatedConstructorArg();
AppleLibraryTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
AppleLibraryTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
AppleLibraryTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
AppleLibraryTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
AppleLibraryTest.java,arg.prefixHeader = Optional.absent();,if (Optional != null ) arg.prefixHeader = Optional.absent();
AppleLibraryTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();,if (FakeBuildRuleParamsBuilder(target) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(target).build();
AbstractAppleNativeTargetBuildRuleDescriptions.java,BuildTarget buildTarget = rule.getBuildTarget();,if (rule != null ) BuildTarget buildTarget = rule.getBuildTarget();
TargetNode.java,this.pathsReferenced = paths.build();,if (paths != null ) this.pathsReferenced = paths.build();
UnsortedAndroidResourceDeps.java,BuildRuleType type = rule.getType();,if (rule != null ) BuildRuleType type = rule.getType();
AbstractDependencyVisitor.java,toExplore = Lists.newLinkedList();,if (Lists != null ) toExplore = Lists.newLinkedList();
AbstractDependencyVisitor.java,explored = Sets.newHashSet();,if (Sets != null ) explored = Sets.newHashSet();
AbstractDependencyVisitor.java,BuildRule currentRule = toExplore.remove();,if (toExplore != null ) BuildRule currentRule = toExplore.remove();
AndroidBinaryGraphEnhancerTest.java,FilteredResourcesProvider resourcesProvider = result.filteredResourcesProvider();,if (result != null ) FilteredResourcesProvider resourcesProvider = result.filteredResourcesProvider();
GenProGuardConfigStep.java,AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget();,if (context != null ) AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget();
ProjectGenerator.java,Path prefixHeaderRelative = resolver.getPath(prefixHeaderOptional.get());,if (resolver != null ) Path prefixHeaderRelative = resolver.getPath(prefixHeaderOptional.get());
TracesHandlerDelegate.java,ImmutableCollection<Path> traceFiles = tracesHelper.listTraceFilesByLastModified();,if (tracesHelper != null ) ImmutableCollection<Path> traceFiles = tracesHelper.listTraceFilesByLastModified();
TracesHelper.java,String name = path.getFileName().toString();,if (path != null ) String name = path.getFileName().toString();
TracesHelper.java,ImmutableList<Path> traces = tracesBuilder.build();,if (tracesBuilder != null ) ImmutableList<Path> traces = tracesBuilder.build();
ProjectGenerator.java,xcodeConfigurationLayersMultimapBuilder = ImmutableMultimap.builder();,if (ImmutableMultimap != null ) xcodeConfigurationLayersMultimapBuilder = ImmutableMultimap.builder();
ProjectGenerator.java,String existingSetting = layers.targetLevelInlineSettings.get(entry.getKey());,if (layers != null ) String existingSetting = layers.targetLevelInlineSettings.get(entry.getKey());
ProjectGenerator.java,String existingSetting = layers.targetLevelInlineSettings.get(entry.getKey());,if (layers != null ) String existingSetting = layers.targetLevelInlineSettings.get(entry.getKey());
ProjectGenerator.java,String xcconfigContents = stringBuilder.toString();,if (stringBuilder != null ) String xcconfigContents = stringBuilder.toString();
ProjectGenerator.java,XcconfigStack.Builder builder = XcconfigStack.builder();,if (XcconfigStack != null ) XcconfigStack.Builder builder = XcconfigStack.builder();
ProjectGenerator.java,XcconfigStack stack = builder.build();,if (builder != null ) XcconfigStack stack = builder.build();
ProjectGenerator.java,ImmutableList<String> resolvedConfigs = stack.resolveConfigStack();,if (stack != null ) ImmutableList<String> resolvedConfigs = stack.resolveConfigStack();
ProjectGenerator.java,ConfigInXcodeLayout config = configEntry.getValue();,if (configEntry != null ) ConfigInXcodeLayout config = configEntry.getValue();
ProjectGenerator.java,ImmutableList<XcodeRuleConfigurationLayer> layers = configuration.getLayers();,if (configuration != null ) ImmutableList<XcodeRuleConfigurationLayer> layers = configuration.getLayers();
XcconfigStack.java,stack = ArrayListMultimap.create();,if (ArrayListMultimap != null ) stack = ArrayListMultimap.create();
XcconfigStack.java,keyAliases = Maps.newHashMap();,if (Maps != null ) keyAliases = Maps.newHashMap();
XcconfigStack.java,currentLayer = Lists.newArrayList();,if (Lists != null ) currentLayer = Lists.newArrayList();
XcconfigStack.java,currentKeyAliases = Maps.newHashMap();,if (Maps != null ) currentKeyAliases = Maps.newHashMap();
XcconfigStack.java,int size = existingSettings.size();,if (existingSettings != null ) int size = existingSettings.size();
XcconfigStack.java,currentKeyAliases = Maps.newHashMap();,if (Maps != null ) currentKeyAliases = Maps.newHashMap();
XcconfigStack.java,List<String> keys = new ArrayList<String>(stack.keySet());,if (ArrayList<String>(stack != null ) List<String> keys = new ArrayList<String>(stack.keySet());
XcconfigStack.java,keys = new ArrayList<String>(keyAliases.keySet());,if (ArrayList<String>(keyAliases != null ) keys = new ArrayList<String>(keyAliases.keySet());
XcodeRuleConfigurationLayer.java,this.inlineSettings = Optional.absent();,if (Optional != null ) this.inlineSettings = Optional.absent();
XcodeRuleConfigurationLayer.java,this.sourcePath = Optional.absent();,if (Optional != null ) this.sourcePath = Optional.absent();
ProjectGeneratorTest.java,NSDictionary settings = configuration.getBuildSettings();,if (configuration != null ) NSDictionary settings = configuration.getBuildSettings();
ProjectGeneratorTest.java,NSDictionary settings = configuration.getBuildSettings();,if (configuration != null ) NSDictionary settings = configuration.getBuildSettings();
ProjectGeneratorTest.java,NSDictionary settings = configuration.getBuildSettings();,if (configuration != null ) NSDictionary settings = configuration.getBuildSettings();
ProjectGeneratorTest.java,String contents = projectFilesystem.readFileIfItExists(xcconfigPath).get();,if (projectFilesystem != null ) String contents = projectFilesystem.readFileIfItExists(xcconfigPath).get();
ProjectGeneratorTest.java,NSDictionary settings = configuration.getBuildSettings();,if (configuration != null ) NSDictionary settings = configuration.getBuildSettings();
ProjectGeneratorTest.java,NSDictionary settings = configuration.getBuildSettings();,if (configuration != null ) NSDictionary settings = configuration.getBuildSettings();
ProjectGeneratorTest.java,NSDictionary settings = configuration.getBuildSettings();,if (configuration != null ) NSDictionary settings = configuration.getBuildSettings();
ProjectGeneratorTest.java,NSDictionary settings = configuration.getBuildSettings();,if (configuration != null ) NSDictionary settings = configuration.getBuildSettings();
ProjectGeneratorTest.java,PBXProject generatedProject = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject generatedProject = projectGenerator.getGeneratedProject();
XcconfigStackTest.java,XcconfigStack.Builder builder = XcconfigStack.builder();,if (XcconfigStack != null ) XcconfigStack.Builder builder = XcconfigStack.builder();
XcconfigStackTest.java,XcconfigStack stack = builder.build();,if (builder != null ) XcconfigStack stack = builder.build();
XcconfigStackTest.java,ImmutableList<String> result = stack.resolveConfigStack();,if (stack != null ) ImmutableList<String> result = stack.resolveConfigStack();
PlistArray.java,value = Lists.newArrayList();,if (Lists != null ) value = Lists.newArrayList();
PlistDictionary.java,this.value = Maps.newHashMap();,if (Maps != null ) this.value = Maps.newHashMap();
PlistSerializer.java,transformer = TransformerFactory.newInstance().newTransformer();,if (TransformerFactory != null ) transformer = TransformerFactory.newInstance().newTransformer();
PlistSerializer.java,documentBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();,if (DocumentBuilderFactory != null ) documentBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
PlistSerializer.java,DOMImplementation domImplementation = documentBuilder.getDOMImplementation();,if (documentBuilder != null ) DOMImplementation domImplementation = documentBuilder.getDOMImplementation();
TargetGraph.java,ActionGraph actionGraph = actionGraphSupplier.get();,if (actionGraphSupplier != null ) ActionGraph actionGraph = actionGraphSupplier.get();
WorkspaceAndProjectGenerator.java,final ActionGraph actionGraph = projectGraph.getActionGraph(executionContext.getBuckEventBus());,if (projectGraph != null ) final ActionGraph actionGraph = projectGraph.getActionGraph(executionContext.getBuckEventBus());
WorkspaceAndProjectGeneratorTest.java,actionGraph = targetGraph.getActionGraph(executionContext.getBuckEventBus());,if (targetGraph != null ) actionGraph = targetGraph.getActionGraph(executionContext.getBuckEventBus());
TargetsCommandTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
Annotations.java,AnnotationValue rhs = entry.getValue();,if (entry != null ) AnnotationValue rhs = entry.getValue();
ConstructorSummary.java,TypeElement parentType = (TypeElement) element.getEnclosingElement();,if (element != null ) TypeElement parentType = (TypeElement) element.getEnclosingElement();
ConstructorSummary.java,summary = builder.toString();,if (builder != null ) summary = builder.toString();
FieldSummary.java,summary = builder.toString();,if (builder != null ) summary = builder.toString();
MethodSummary.java,summary = builder.toString();,if (builder != null ) summary = builder.toString();
TypeSummary.java,summary = builder.toString();,if (builder != null ) summary = builder.toString();
TypeSummary.java,ElementKind kind = element.getKind();,if (element != null ) ElementKind kind = element.getKind();
AbiWriterTest.java,List<FileAndSource> targets = Lists.newArrayList();,if (Lists != null ) List<FileAndSource> targets = Lists.newArrayList();
AbiWriterTest.java,File outputDir = temp.newFolder();,if (temp != null ) File outputDir = temp.newFolder();
AbiWriterTest.java,JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();,if (ToolProvider != null ) JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
AbiWriterTest.java,Boolean result = compilation.call();,if (compilation != null ) Boolean result = compilation.call();
JavacStep.java,abiKeyFile = filesystem.getFileForRelativePath(pathToOutputAbiFile.get());,if (filesystem != null ) abiKeyFile = filesystem.getFileForRelativePath(pathToOutputAbiFile.get());
JavacStep.java,decorator = AnnotationProcessingDataDecorators.identity();,if (AnnotationProcessingDataDecorators != null ) decorator = AnnotationProcessingDataDecorators.identity();
AbiWriterTest.java,File outDir = temp.newFolder();,if (temp != null ) File outDir = temp.newFolder();
BuildRuleFactoryParamsTest.java,File root = folder.getRoot();,if (folder != null ) File root = folder.getRoot();
BuildRuleFactoryParamsTest.java,filesystem = new ProjectFilesystem(root.toPath());,if (ProjectFilesystem(root != null ) filesystem = new ProjectFilesystem(root.toPath());
StubJar.java,FileOutputStream fos = new FileOutputStream(path.toFile());,if (FileOutputStream(path != null ) FileOutputStream fos = new FileOutputStream(path.toFile());
StubJarIntegrationTest.java,Path outDir = temp.newFolder().toPath();,if (temp != null ) Path outDir = temp.newFolder().toPath();
PrebuiltJarTest.java,ExecutionContext executionContext = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext executionContext = TestExecutionContext.newInstance();
ProjectGenerator.java,result = Optional.absent();,if (Optional != null ) result = Optional.absent();
NdkLibrary.java,this.makefileDirectory = buildTarget.getBasePathWithSlash();,if (buildTarget != null ) this.makefileDirectory = buildTarget.getBasePathWithSlash();
KnownBuildRuleTypes.java,Optional<Path> ndkRoot = androidDirectoryResolver.findAndroidNdkDir();,if (androidDirectoryResolver != null ) Optional<Path> ndkRoot = androidDirectoryResolver.findAndroidNdkDir();
PrebuiltJarIntegrationTest.java,BuildRuleEvent.Finished finished = getRuleFinished(result.getCapturedEvents());,if (getRuleFinished(result != null ) BuildRuleEvent.Finished finished = getRuleFinished(result.getCapturedEvents());
PrebuiltJarIntegrationTest.java,finished = getRuleFinished(result.getCapturedEvents());,if (getRuleFinished(result != null ) finished = getRuleFinished(result.getCapturedEvents());
PrebuiltJarIntegrationTest.java,File abiJar = workspace.getFile(expectedOut.toString());,if (workspace != null ) File abiJar = workspace.getFile(expectedOut.toString());
PrebuiltJarTest.java,filesystem = new FakeProjectFilesystem(temp.newFolder());,if (FakeProjectFilesystem(temp != null ) filesystem = new FakeProjectFilesystem(temp.newFolder());
AndroidBinaryIntegrationTest.java,ZipInspector zi = new ZipInspector(secondaryJar.toFile());,if (ZipInspector(secondaryJar != null ) ZipInspector zi = new ZipInspector(secondaryJar.toFile());
AndroidBinaryIntegrationTest.java,BuckBuildLog buildLog = workspace.getBuildLog();,if (workspace != null ) BuckBuildLog buildLog = workspace.getBuildLog();
AndroidBinaryIntegrationTest.java,BuckBuildLog buildLog = workspace.getBuildLog();,if (workspace != null ) BuckBuildLog buildLog = workspace.getBuildLog();
AndroidBinaryIntegrationTest.java,BuckBuildLog buildLog = workspace.getBuildLog();,if (workspace != null ) BuckBuildLog buildLog = workspace.getBuildLog();
AndroidBinaryIntegrationTest.java,BuckBuildLog buildLog = workspace.getBuildLog();,if (workspace != null ) BuckBuildLog buildLog = workspace.getBuildLog();
AndroidBinaryIntegrationTest.java,BuckBuildLog buildLog = workspace.getBuildLog();,if (workspace != null ) BuckBuildLog buildLog = workspace.getBuildLog();
AndroidBinaryIntegrationTest.java,BuckBuildLog buildLog = workspace.getBuildLog();,if (workspace != null ) BuckBuildLog buildLog = workspace.getBuildLog();
AndroidBinaryIntegrationTest.java,BuckBuildLog buildLog = workspace.getBuildLog();,if (workspace != null ) BuckBuildLog buildLog = workspace.getBuildLog();
AndroidBinaryIntegrationTest.java,BuckBuildLog buildLog = workspace.getBuildLog();,if (workspace != null ) BuckBuildLog buildLog = workspace.getBuildLog();
AndroidBinaryIntegrationTest.java,BuckBuildLog buildLog = workspace.getBuildLog();,if (workspace != null ) BuckBuildLog buildLog = workspace.getBuildLog();
AppleBuildRules.java,ImmutableSortedSet<BuildRule> defaultDeps = node.getDeps();,if (node != null ) ImmutableSortedSet<BuildRule> defaultDeps = node.getDeps();
AppleBuildRules.java,ImmutableSortedSet<BuildRule> deps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) ImmutableSortedSet<BuildRule> deps = ImmutableSortedSet.of();
ProjectGenerator.java,ActionGraph actionGraph = targetGraph.getActionGraph(executionContext.getBuckEventBus());,if (targetGraph != null ) ActionGraph actionGraph = targetGraph.getActionGraph(executionContext.getBuckEventBus());
ProjectGenerator.java,this.rulesToBuild = ImmutableSet.copyOf(actionGraph.getNodes());,if (ImmutableSet != null ) this.rulesToBuild = ImmutableSet.copyOf(actionGraph.getNodes());
ProjectGenerator.java,this.buildRuleToGeneratedTargetBuilder = ImmutableMap.builder();,if (ImmutableMap != null ) this.buildRuleToGeneratedTargetBuilder = ImmutableMap.builder();
ProjectGenerator.java,rule = test.getTestBundle();,if (test != null ) rule = test.getTestBundle();
ProjectGenerator.java,AppleBundle bundle = (AppleBundle) test.getTestBundle();,if (test != null ) AppleBundle bundle = (AppleBundle) test.getTestBundle();
ProjectGenerator.java,Path headerMapFile = buildRule.getPathToHeaderMap(headerMapType).get();,if (buildRule != null ) Path headerMapFile = buildRule.getPathToHeaderMap(headerMapType).get();
ProjectGenerator.java,Optional<String> targetGid = appleBuildRule.getGid();,if (appleBuildRule != null ) Optional<String> targetGid = appleBuildRule.getGid();
ProjectGenerator.java,String thisTargetName = appleBuildRule.getFullyQualifiedName();,if (appleBuildRule != null ) String thisTargetName = appleBuildRule.getFullyQualifiedName();
ProjectGenerator.java,Optional<SourcePath> prefixHeaderOptional = appleBuildRule.getPrefixHeader();,if (appleBuildRule != null ) Optional<SourcePath> prefixHeaderOptional = appleBuildRule.getPrefixHeader();
ProjectGenerator.java,Optional<AppleBundleExtension> extension = bundle.getExtensionValue();,if (bundle != null ) Optional<AppleBundleExtension> extension = bundle.getExtensionValue();
ProjectGenerator.java,String productName = getProductName(rule.getBuildTarget());,if (getProductName(rule != null ) String productName = getProductName(rule.getBuildTarget());
ProjectGenerator.java,"productOutputName = productName + ""."" + bundle.getExtensionString();","if (bundle != null ) productOutputName = productName + ""."" + bundle.getExtensionString();"
ProjectGenerator.java,BuildRule binary = bundle.getBinary();,if (bundle != null ) BuildRule binary = bundle.getBinary();
ProjectGenerator.java,AppleBundleExtension extension = bundle.getExtensionValue().get();,if (bundle != null ) AppleBundleExtension extension = bundle.getExtensionValue().get();
PrebuiltJarTest.java,ExecutionContext executionContext = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext executionContext = TestExecutionContext.newInstance();
AndroidBinaryGraphEnhancer.java,AndroidPackageableCollection packageableCollection = collector.build();,if (collector != null ) AndroidPackageableCollection packageableCollection = collector.build();
AndroidPackageableCollector.java,boolean hasRDotJavaPackages = !knownRDotJavaPackageSuppliers.isEmpty();,if (!knownRDotJavaPackageSuppliers != null ) boolean hasRDotJavaPackages = !knownRDotJavaPackageSuppliers.isEmpty();
BuildRuleType.java,this.name = Preconditions.checkNotNull(name).toLowerCase();,if (Preconditions != null ) this.name = Preconditions.checkNotNull(name).toLowerCase();
ExecutionContext.java,this.verbosity = Preconditions.checkNotNull(console).getVerbosity();,if (Preconditions != null ) this.verbosity = Preconditions.checkNotNull(console).getVerbosity();
ExopackageInstaller.java,Iterable<String> filesToDelete = toDeleteBuilder.build();,if (toDeleteBuilder != null ) Iterable<String> filesToDelete = toDeleteBuilder.build();
AndroidBinary.java,Optional<PreDexMerge> preDexMerge = enhancementResult.preDexMerge();,if (enhancementResult != null ) Optional<PreDexMerge> preDexMerge = enhancementResult.preDexMerge();
ProjectGenerator.java,docBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();,if (DocumentBuilderFactory != null ) docBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
ProjectGenerator.java,transformer = TransformerFactory.newInstance().newTransformer();,if (TransformerFactory != null ) transformer = TransformerFactory.newInstance().newTransformer();
ProjectGenerator.java,DOMImplementation domImplementation = docBuilder.getDOMImplementation();,if (docBuilder != null ) DOMImplementation domImplementation = docBuilder.getDOMImplementation();
ProjectGenerator.java,Element rootElem = doc.getDocumentElement();,if (doc != null ) Element rootElem = doc.getDocumentElement();
ProjectGenerator.java,String contentsToWrite = outputStream.toString();,if (outputStream != null ) String contentsToWrite = outputStream.toString();
ProjectGeneratorTest.java,Document workspace = projectGenerator.getGeneratedWorkspace();,if (projectGenerator != null ) Document workspace = projectGenerator.getGeneratedWorkspace();
WorkspaceAndProjectGenerator.java,String workspaceName = workspaceBuildable.getWorkspaceName();,if (workspaceBuildable != null ) String workspaceName = workspaceBuildable.getWorkspaceName();
WorkspaceAndProjectGenerator.java,Path outputDirectory = workspaceBuildable.getBuildTarget().getBasePath();,if (workspaceBuildable != null ) Path outputDirectory = workspaceBuildable.getBuildTarget().getBasePath();
WorkspaceAndProjectGenerator.java,Set<BuildTarget> initialTargets = initialTargetsBuilder.build();,if (initialTargetsBuilder != null ) Set<BuildTarget> initialTargets = initialTargetsBuilder.build();
ProjectGenerator.java,String existingSetting = layers.targetLevelInlineSettings.get(entry.getKey());,if (layers != null ) String existingSetting = layers.targetLevelInlineSettings.get(entry.getKey());
ProjectGenerator.java,String existingSetting = layers.targetLevelInlineSettings.get(entry.getKey());,if (layers != null ) String existingSetting = layers.targetLevelInlineSettings.get(entry.getKey());
BuildCommand.java,Optional<Path> pathToBuildReport = options.getPathToBuildReport();,if (options != null ) Optional<Path> pathToBuildReport = options.getPathToBuildReport();
BuildCommand.java,successType = success.getType().name();,if (success != null ) successType = success.getType().name();
BuildCommandTest.java,List<BuildRuleSuccess> results = Lists.newArrayList();,if (Lists != null ) List<BuildRuleSuccess> results = Lists.newArrayList();
JavaFileParser.java,String javaVersion = javaVersionMap.get(env.getSourceLevel());,if (javaVersionMap != null ) String javaVersion = javaVersionMap.get(env.getSourceLevel());
SeparatedProjectsGenerator.java,ImmutableSet<BuildRule> buildRules = targetGraph.getActionGraph(buckEventBus).getNodes();,if (targetGraph != null ) ImmutableSet<BuildRule> buildRules = targetGraph.getActionGraph(buckEventBus).getNodes();
ProjectGeneratorTest.java,arg.testBundle = xctestRule.getBuildTarget();,if (xctestRule != null ) arg.testBundle = xctestRule.getBuildTarget();
ProjectGeneratorTest.java,arg.testBundle = xctestRule.getBuildTarget();,if (xctestRule != null ) arg.testBundle = xctestRule.getBuildTarget();
ProjectGeneratorTest.java,arg.testBundle = xctestRule.getBuildTarget();,if (xctestRule != null ) arg.testBundle = xctestRule.getBuildTarget();
ProjectGeneratorTest.java,arg.testBundle = xctestRule.getBuildTarget();,if (xctestRule != null ) arg.testBundle = xctestRule.getBuildTarget();
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = appleBinaryDescription.createUnpopulatedConstructorArg();,if (appleBinaryDescription != null ) AppleNativeTargetDescriptionArg arg = appleBinaryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
ProjectGeneratorTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,arg.prefixHeader = Optional.absent();,if (Optional != null ) arg.prefixHeader = Optional.absent();
ProjectGeneratorTest.java,arg.testBundle = xctestRule.getBuildTarget();,if (xctestRule != null ) arg.testBundle = xctestRule.getBuildTarget();
ProjectGeneratorTest.java,arg.testBundle = xctestRule.getBuildTarget();,if (xctestRule != null ) arg.testBundle = xctestRule.getBuildTarget();
ProjectGeneratorTest.java,arg.testBundle = xctestRule.getBuildTarget();,if (xctestRule != null ) arg.testBundle = xctestRule.getBuildTarget();
SeparatedProjectsGeneratorTest.java,ProjectGenerator innerGenerator = projectGeneratorMap.get(rule.getBuildTarget());,if (projectGeneratorMap != null ) ProjectGenerator innerGenerator = projectGeneratorMap.get(rule.getBuildTarget());
AppleConfig.java,Path developerDirectory = Paths.get(xcodeDeveloperDirectory.get());,if (Paths != null ) Path developerDirectory = Paths.get(xcodeDeveloperDirectory.get());
CxxDescriptionEnhancer.java,BuildTarget headerSymlinkTreeTarget = createHeaderSymlinkTreeTarget(params.getBuildTarget());,if (createHeaderSymlinkTreeTarget(params != null ) BuildTarget headerSymlinkTreeTarget = createHeaderSymlinkTreeTarget(params.getBuildTarget());
CxxDescriptionEnhancer.java,Path headerSymlinkTreeRoot = getHeaderSymlinkTreePath(params.getBuildTarget());,if (getHeaderSymlinkTreePath(params != null ) Path headerSymlinkTreeRoot = getHeaderSymlinkTreePath(params.getBuildTarget());
CxxLibraryDescription.java,Path sharedLibraryPath = CxxDescriptionEnhancer.getSharedLibraryPath(params.getBuildTarget());,if (CxxDescriptionEnhancer != null ) Path sharedLibraryPath = CxxDescriptionEnhancer.getSharedLibraryPath(params.getBuildTarget());
CxxPythonExtensionDescription.java,Path extensionPath = getExtensionPath(params.getBuildTarget());,if (getExtensionPath(params != null ) Path extensionPath = getExtensionPath(params.getBuildTarget());
CxxPythonExtensionDescriptionTest.java,PythonPackageComponents normalComps = normal.getPythonPackageComponents();,if (normal != null ) PythonPackageComponents normalComps = normal.getPythonPackageComponents();
CxxPythonExtensionDescriptionTest.java,PythonPackageComponents baseModuleComps = baseModule.getPythonPackageComponents();,if (baseModule != null ) PythonPackageComponents baseModuleComps = baseModule.getPythonPackageComponents();
CxxPythonExtensionDescriptionTest.java,PythonPackageComponents actualComponent = extension.getPythonPackageComponents();,if (extension != null ) PythonPackageComponents actualComponent = extension.getPythonPackageComponents();
CxxLibraryDescriptionTest.java,Linker linker = cxxBuckConfig.getLd();,if (cxxBuckConfig != null ) Linker linker = cxxBuckConfig.getLd();
CxxPythonExtensionDescription.java,final BuildTarget extensionTarget = getExtensionTarget(params.getBuildTarget());,if (getExtensionTarget(params != null ) final BuildTarget extensionTarget = getExtensionTarget(params.getBuildTarget());
CxxPythonExtensionDescriptionTest.java,CxxLink cxxLink = extension.getRule();,if (extension != null ) CxxLink cxxLink = extension.getRule();
CxxLibrary.java,Description<T> description = node.getDescription();,if (node != null ) Description<T> description = node.getDescription();
CxxLibrary.java,T args = node.getConstructorArg();,if (node != null ) T args = node.getConstructorArg();
PrebuiltCxxLibraryDescription.java,final String libName = args.libName.or(target.getShortNameOnly());,if (args != null ) final String libName = args.libName.or(target.getShortNameOnly());
PrebuiltCxxLibraryDescription.java,sharedLibrary = new BuildTargetSourcePath(cxxLink.getBuildTarget());,if (BuildTargetSourcePath(cxxLink != null ) sharedLibrary = new BuildTargetSourcePath(cxxLink.getBuildTarget());
CxxDescriptionEnhancer.java,final BuildTarget staticLibraryTarget = createStaticLibraryBuildTarget(params.getBuildTarget());,if (createStaticLibraryBuildTarget(params != null ) final BuildTarget staticLibraryTarget = createStaticLibraryBuildTarget(params.getBuildTarget());
CxxDescriptionEnhancer.java,final BuildTarget sharedLibraryTarget = createSharedLibraryBuildTarget(params.getBuildTarget());,if (createSharedLibraryBuildTarget(params != null ) final BuildTarget sharedLibraryTarget = createSharedLibraryBuildTarget(params.getBuildTarget());
CxxDescriptionEnhancer.java,final Path sharedLibraryPath = getSharedLibraryOutputPath(params.getBuildTarget());,if (getSharedLibraryOutputPath(params != null ) final Path sharedLibraryPath = getSharedLibraryOutputPath(params.getBuildTarget());
CxxLibraryDescriptionTest.java,CxxLibraryDescription.Arg arg = new CxxLibraryDescription.Arg();,if (CxxLibraryDescription != null ) CxxLibraryDescription.Arg arg = new CxxLibraryDescription.Arg();
CxxLibraryDescriptionTest.java,arg.compilerFlags = Optional.absent();,if (Optional != null ) arg.compilerFlags = Optional.absent();
CxxLibraryDescriptionTest.java,arg.propagatedPpFlags = Optional.absent();,if (Optional != null ) arg.propagatedPpFlags = Optional.absent();
CxxLibraryDescriptionTest.java,arg.propagatedLangPpFlags = Optional.absent();,if (Optional != null ) arg.propagatedLangPpFlags = Optional.absent();
CxxLibraryDescriptionTest.java,arg.preprocessorFlags = Optional.absent();,if (Optional != null ) arg.preprocessorFlags = Optional.absent();
CxxLibraryDescriptionTest.java,arg.langPreprocessorFlags = Optional.absent();,if (Optional != null ) arg.langPreprocessorFlags = Optional.absent();
CxxLibraryDescriptionTest.java,arg.linkWhole = Optional.absent();,if (Optional != null ) arg.linkWhole = Optional.absent();
CxxLibraryDescriptionTest.java,arg.lexSrcs = Optional.absent();,if (Optional != null ) arg.lexSrcs = Optional.absent();
CxxLibraryDescriptionTest.java,arg.yaccSrcs = Optional.absent();,if (Optional != null ) arg.yaccSrcs = Optional.absent();
CxxLibraryDescriptionTest.java,arg.headerNamespace = Optional.absent();,if (Optional != null ) arg.headerNamespace = Optional.absent();
CxxLibraryDescriptionTest.java,arg.soname = Optional.absent();,if (Optional != null ) arg.soname = Optional.absent();
CxxLibraryDescriptionTest.java,CxxLibraryDescription.Arg arg = new CxxLibraryDescription.Arg();,if (CxxLibraryDescription != null ) CxxLibraryDescription.Arg arg = new CxxLibraryDescription.Arg();
CxxLibraryDescriptionTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
CxxLibraryDescriptionTest.java,arg.srcs = Optional.absent();,if (Optional != null ) arg.srcs = Optional.absent();
CxxLibraryDescriptionTest.java,arg.headers = Optional.absent();,if (Optional != null ) arg.headers = Optional.absent();
CxxLibraryDescriptionTest.java,arg.compilerFlags = Optional.absent();,if (Optional != null ) arg.compilerFlags = Optional.absent();
CxxLibraryDescriptionTest.java,arg.propagatedPpFlags = Optional.absent();,if (Optional != null ) arg.propagatedPpFlags = Optional.absent();
CxxLibraryDescriptionTest.java,arg.propagatedLangPpFlags = Optional.absent();,if (Optional != null ) arg.propagatedLangPpFlags = Optional.absent();
CxxLibraryDescriptionTest.java,arg.preprocessorFlags = Optional.absent();,if (Optional != null ) arg.preprocessorFlags = Optional.absent();
CxxLibraryDescriptionTest.java,arg.langPreprocessorFlags = Optional.absent();,if (Optional != null ) arg.langPreprocessorFlags = Optional.absent();
CxxLibraryDescriptionTest.java,arg.linkWhole = Optional.absent();,if (Optional != null ) arg.linkWhole = Optional.absent();
CxxLibraryDescriptionTest.java,arg.lexSrcs = Optional.absent();,if (Optional != null ) arg.lexSrcs = Optional.absent();
CxxLibraryDescriptionTest.java,arg.yaccSrcs = Optional.absent();,if (Optional != null ) arg.yaccSrcs = Optional.absent();
CxxLibraryDescriptionTest.java,arg.headerNamespace = Optional.absent();,if (Optional != null ) arg.headerNamespace = Optional.absent();
AndroidBinary.java,Optional<PackageStringAssets> packageStringAssets = enhancementResult.getPackageStringAssets();,if (enhancementResult != null ) Optional<PackageStringAssets> packageStringAssets = enhancementResult.getPackageStringAssets();
AndroidBinary.java,classpathEntriesToDex = enhancementResult.getClasspathEntriesToDex();,if (enhancementResult != null ) classpathEntriesToDex = enhancementResult.getClasspathEntriesToDex();
AndroidBinary.java,Optional<PreDexMerge> preDexMerge = enhancementResult.getPreDexMerge();,if (enhancementResult != null ) Optional<PreDexMerge> preDexMerge = enhancementResult.getPreDexMerge();
AndroidBinary.java,Optional<PreDexMerge> preDexMerge = enhancementResult.getPreDexMerge();,if (enhancementResult != null ) Optional<PreDexMerge> preDexMerge = enhancementResult.getPreDexMerge();
AndroidBinaryGraphEnhancerTest.java,ImmutableSortedSet<BuildRule> finalDeps = result.getFinalDeps();,if (result != null ) ImmutableSortedSet<BuildRule> finalDeps = result.getFinalDeps();
AndroidBinaryGraphEnhancerTest.java,FilteredResourcesProvider resourcesProvider = result.getFilteredResourcesProvider();,if (result != null ) FilteredResourcesProvider resourcesProvider = result.getFilteredResourcesProvider();
AppleBuildRules.java,XcodeNativeDescription.TYPE == input.getType();,if (input != null ) XcodeNativeDescription.TYPE == input.getType();
XcodeNative.java,String shortName = params.getBuildTarget().getShortNameOnly();,if (params != null ) String shortName = params.getBuildTarget().getShortNameOnly();
WorkspaceAndProjectGenerator.java,Path projectPath = resolver.getPath(buildable.getProjectContainerPath());,if (resolver != null ) Path projectPath = resolver.getPath(buildable.getProjectContainerPath());
WorkspaceAndProjectGenerator.java,String targetName = buildable.getTargetName();,if (buildable != null ) String targetName = buildable.getTargetName();
XcodeNativeTest.java,arg.targetName = Optional.absent();,if (Optional != null ) arg.targetName = Optional.absent();
XcodeNativeTest.java,arg.buildableName = Optional.absent();,if (Optional != null ) arg.buildableName = Optional.absent();
SchemeGeneratorTest.java,Path schemePath = schemeGenerator.writeScheme();,if (schemeGenerator != null ) Path schemePath = schemeGenerator.writeScheme();
SchemeGeneratorTest.java,String schemeXml = projectFilesystem.readFileIfItExists(schemePath).get();,if (projectFilesystem != null ) String schemeXml = projectFilesystem.readFileIfItExists(schemePath).get();
SchemeGeneratorTest.java,DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();,if (DocumentBuilderFactory != null ) DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
SchemeGeneratorTest.java,DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();,if (dbFactory != null ) DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
SchemeGeneratorTest.java,XPathFactory xpathFactory = XPathFactory.newInstance();,if (XPathFactory != null ) XPathFactory xpathFactory = XPathFactory.newInstance();
SchemeGeneratorTest.java,XPath xpath = xpathFactory.newXPath();,if (xpathFactory != null ) XPath xpath = xpathFactory.newXPath();
SchemeGeneratorTest.java,List<String> actualOrdering = Lists.newArrayList();,if (Lists != null ) List<String> actualOrdering = Lists.newArrayList();
AndroidBinary.java,nativeLibraryDirectories = ImmutableSet.of();,if (ImmutableSet != null ) nativeLibraryDirectories = ImmutableSet.of();
ProjectGenerator.java,nativeTargetRule = Optional.absent();,if (Optional != null ) nativeTargetRule = Optional.absent();
ProjectGenerator.java,Optional<String> gid = nativeTargetRule.get().getGid();,if (nativeTargetRule != null ) Optional<String> gid = nativeTargetRule.get().getGid();
ProjectCommand.java,actionGraph = createActionGraphs(options).getProjectGraph();,if (createActionGraphs(options) != null ) actionGraph = createActionGraphs(options).getProjectGraph();
InMemoryBuildFileTreeTest.java,buildFileTree = new InMemoryBuildFileTree(graph.getTargets());,if (InMemoryBuildFileTree(graph != null ) buildFileTree = new InMemoryBuildFileTree(graph.getTargets());
ProjectCommand.java,actionGraph = createPartialGraphs(options).getProjectGraph();,if (createPartialGraphs(options) != null ) actionGraph = createPartialGraphs(options).getProjectGraph();
ProjectCommand.java,ImmutableSet<String> argumentsAsBuildTargets = options.getArgumentsFormattedAsBuildTargets();,if (options != null ) ImmutableSet<String> argumentsAsBuildTargets = options.getArgumentsFormattedAsBuildTargets();
ProjectCommand.java,roots = rootsOptional.get();,if (rootsOptional != null ) roots = rootsOptional.get();
ProjectCommand.java,"roots = filterTargetsFromGraph(fullGraph, rootsPredicate.get());","if (rootsPredicate != null ) roots = filterTargetsFromGraph(fullGraph, rootsPredicate.get());"
AndroidBinary.java,final Path libSourceDir = sourceDir.resolve(abiDirectoryComponent.get());,if (sourceDir != null ) final Path libSourceDir = sourceDir.resolve(abiDirectoryComponent.get());
AndroidBinary.java,Path libDestinationDir = destinationDir.resolve(abiDirectoryComponent.get());,if (destinationDir != null ) Path libDestinationDir = destinationDir.resolve(abiDirectoryComponent.get());
AndroidBinary.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
AndroidBinaryTest.java,ImmutableList<Step> steps = stepsBuilder.build();,if (stepsBuilder != null ) ImmutableList<Step> steps = stepsBuilder.build();
ExopackageInstaller.java,final File apk = apkRule.getApkPath().toFile();,if (apkRule != null ) final File apk = apkRule.getApkPath().toFile();
ExopackageInstaller.java,String result = output.trim();,if (output != null ) String result = output.trim();
ExopackageInstaller.java,Iterable<String> filesToDelete = toDeleteBuilder.build();,if (toDeleteBuilder != null ) Iterable<String> filesToDelete = toDeleteBuilder.build();
ExopackageInstaller.java,OutputStream outToDevice = clientSocket.getOutputStream();,if (clientSocket != null ) OutputStream outToDevice = clientSocket.getOutputStream();
ExopackageInstaller.java,String targetFileName = dataRoot.resolve(pathRelativeToDataRoot).toString();,if (dataRoot != null ) String targetFileName = dataRoot.resolve(pathRelativeToDataRoot).toString();
ExopackageInstaller.java,List<String> parts = splitter.splitToList(line.trim());,if (splitter != null ) List<String> parts = splitter.splitToList(line.trim());
TargetsCommand.java,BuildFileTree tree = new InMemoryBuildFileTree(partialGraph.getTargets());,if (InMemoryBuildFileTree(partialGraph != null ) BuildFileTree tree = new InMemoryBuildFileTree(partialGraph.getTargets());
TargetsCommandTest.java,ImmutableSet<BuildTarget> targetBuildRules = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<BuildTarget> targetBuildRules = ImmutableSet.of();
AuditClasspathCommand.java,ImmutableSet<BuildTarget> targets = partialGraph.getTargets();,if (partialGraph != null ) ImmutableSet<BuildTarget> targets = partialGraph.getTargets();
AuditClasspathCommand.java,ImmutableSet<BuildTarget> targets = partialGraph.getTargets();,if (partialGraph != null ) ImmutableSet<BuildTarget> targets = partialGraph.getTargets();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
TargetsCommandOptions.java,Path normalizedRoot = projectRoot.toRealPath();,if (projectRoot != null ) Path normalizedRoot = projectRoot.toRealPath();
TargetsCommandOptions.java,canonicalFullPath = canonicalFullPath.toRealPath();,if (canonicalFullPath != null ) canonicalFullPath = canonicalFullPath.toRealPath();
GenRDotTxtUtil.java,AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget();,if (context != null ) AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget();
ProjectGenerator.java,List<String> scriptArguments = Lists.newArrayList();,if (Lists != null ) List<String> scriptArguments = Lists.newArrayList();
ProjectGenerator.java,ImmutableList<String> commonAssetCatalogs = commonAssetCatalogsBuilder.build();,if (commonAssetCatalogsBuilder != null ) ImmutableList<String> commonAssetCatalogs = commonAssetCatalogsBuilder.build();
ProjectGeneratorTest.java,PBXProject generatedProject = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject generatedProject = projectGenerator.getGeneratedProject();
ProjectGenerator.java,HeaderMap.Builder publicMapBuilder = HeaderMap.builder();,if (HeaderMap != null ) HeaderMap.Builder publicMapBuilder = HeaderMap.builder();
ProjectGenerator.java,HeaderMap.Builder targetMapBuilder = HeaderMap.builder();,if (HeaderMap != null ) HeaderMap.Builder targetMapBuilder = HeaderMap.builder();
ProjectGenerator.java,HeaderMap.Builder targetUserMapBuilder = HeaderMap.builder();,if (HeaderMap != null ) HeaderMap.Builder targetUserMapBuilder = HeaderMap.builder();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,NSDictionary barBuildFileSettings = barHeaderBuildFile.getSettings().get();,if (barHeaderBuildFile != null ) NSDictionary barBuildFileSettings = barHeaderBuildFile.getSettings().get();
ProjectGeneratorTest.java,NSDictionary blechBuildFileSettings = blechHeaderBuildFile.getSettings().get();,if (blechHeaderBuildFile != null ) NSDictionary blechBuildFileSettings = blechHeaderBuildFile.getSettings().get();
TestRuleKeyFileHelper.java,Path outputDir = Preconditions.checkNotNull(testRule.getPathToTestOutputDirectory());,if (Preconditions != null ) Path outputDir = Preconditions.checkNotNull(testRule.getPathToTestOutputDirectory());
TestRuleKeyFileHelper.java,Path outputDir = Preconditions.checkNotNull(testRule.getPathToTestOutputDirectory());,if (Preconditions != null ) Path outputDir = Preconditions.checkNotNull(testRule.getPathToTestOutputDirectory());
AuditClasspathCommand.java,ActionGraph graph = partialGraph.getActionGraph();,if (partialGraph != null ) ActionGraph graph = partialGraph.getActionGraph();
AuditClasspathCommand.java,ActionGraph graph = partialGraph.getActionGraph();,if (partialGraph != null ) ActionGraph graph = partialGraph.getActionGraph();
TargetsCommand.java,this.graph = partialGraph.getActionGraph();,if (partialGraph != null ) this.graph = partialGraph.getActionGraph();
TestCommand.java,final ActionGraph graph = partialGraph.getActionGraph();,if (partialGraph != null ) final ActionGraph graph = partialGraph.getActionGraph();
AuditClasspathCommandTest.java,List<String> targets = Lists.newArrayList();,if (Lists != null ) List<String> targets = Lists.newArrayList();
TargetsCommandTest.java,List<String> targets = Lists.newArrayList();,if (Lists != null ) List<String> targets = Lists.newArrayList();
ExopackageInstaller.java,"String targetFileName = dataRoot + ""/"" + pathRelativeToDataRoot.toString();","if (pathRelativeToDataRoot != null ) String targetFileName = dataRoot + ""/"" + pathRelativeToDataRoot.toString();"
TargetGraph.java,boolean isRuleFlavored = rule.getBuildTarget().isFlavored();,if (rule != null ) boolean isRuleFlavored = rule.getBuildTarget().isFlavored();
TargetGraph.java,boolean isDepFlavored = dep.getBuildTarget().isFlavored();,if (dep != null ) boolean isDepFlavored = dep.getBuildTarget().isFlavored();
TargetGraph.java,depsToVisit = ImmutableSet.builder();,if (ImmutableSet != null ) depsToVisit = ImmutableSet.builder();
ProjectGenerator.java,Optional<String> buildableGid = buildable.getGid();,if (buildable != null ) Optional<String> buildableGid = buildable.getGid();
AbstractAppleNativeTargetBuildRule.java,frameworks = Preconditions.checkNotNull(arg.frameworks.get());,if (Preconditions != null ) frameworks = Preconditions.checkNotNull(arg.frameworks.get());
AbstractCommandRunner.java,this.console = Preconditions.checkNotNull(params.getConsole());,if (Preconditions != null ) this.console = Preconditions.checkNotNull(params.getConsole());
AbstractCommandRunner.java,this.repository = Preconditions.checkNotNull(params.getRepository());,if (Preconditions != null ) this.repository = Preconditions.checkNotNull(params.getRepository());
AbstractCommandRunner.java,this.buildEngine = Preconditions.checkNotNull(params.getBuildEngine());,if (Preconditions != null ) this.buildEngine = Preconditions.checkNotNull(params.getBuildEngine());
AbstractCommandRunner.java,this.artifactCacheFactory = Preconditions.checkNotNull(params.getArtifactCacheFactory());,if (Preconditions != null ) this.artifactCacheFactory = Preconditions.checkNotNull(params.getArtifactCacheFactory());
AbstractCommandRunner.java,this.parser = Preconditions.checkNotNull(params.getParser());,if (Preconditions != null ) this.parser = Preconditions.checkNotNull(params.getParser());
AbstractCommandRunner.java,this.eventBus = Preconditions.checkNotNull(params.getBuckEventBus());,if (Preconditions != null ) this.eventBus = Preconditions.checkNotNull(params.getBuckEventBus());
AbstractCommandRunner.java,this.platform = Preconditions.checkNotNull(params.getPlatform());,if (Preconditions != null ) this.platform = Preconditions.checkNotNull(params.getPlatform());
AbstractCommandRunner.java,this.environment = Preconditions.checkNotNull(params.getEnvironment());,if (Preconditions != null ) this.environment = Preconditions.checkNotNull(params.getEnvironment());
AbstractCommandRunner.java,this.objectMapper = Preconditions.checkNotNull(params.getObjectMapper());,if (Preconditions != null ) this.objectMapper = Preconditions.checkNotNull(params.getObjectMapper());
AbstractCommandRunner.java,this.processManager = Preconditions.checkNotNull(params.getProcessManager());,if (Preconditions != null ) this.processManager = Preconditions.checkNotNull(params.getProcessManager());
AdbHelper.java,adb = AndroidDebugBridge.createBridge();,if (AndroidDebugBridge != null ) adb = AndroidDebugBridge.createBridge();
ProjectGenerator.java,destinationRulesBuildersBuilder = ImmutableMap.builder();,if (ImmutableMap != null ) destinationRulesBuildersBuilder = ImmutableMap.builder();
ProjectGenerator.java,destinationRulesBuilders = destinationRulesBuildersBuilder.build();,if (destinationRulesBuildersBuilder != null ) destinationRulesBuilders = destinationRulesBuildersBuilder.build();
ProjectGenerator.java,PBXCopyFilesBuildPhase.Destination destination = optionalDestination.get();,if (optionalDestination != null ) PBXCopyFilesBuildPhase.Destination destination = optionalDestination.get();
ProjectGenerator.java,ImmutableSet<BuildRule> rules = destinationRulesBuilders.get(destination).build();,if (destinationRulesBuilders != null ) ImmutableSet<BuildRule> rules = destinationRulesBuilders.get(destination).build();
PrintHeaderMap.java,FileChannel fileChannel = inputStream.getChannel();,if (inputStream != null ) FileChannel fileChannel = inputStream.getChannel();
ProjectGenerator.java,Path infoPlistPath = repoRootRelativeToOutputDirectory.resolve(infoPlistOptional.get());,if (repoRootRelativeToOutputDirectory != null ) Path infoPlistPath = repoRootRelativeToOutputDirectory.resolve(infoPlistOptional.get());
TargetsCommandOptions.java,Path normalizedRoot = projectRoot.normalize();,if (projectRoot != null ) Path normalizedRoot = projectRoot.normalize();
TemplateHandler.java,SoyFileSet.Builder builder = new SoyFileSet.Builder();,if (SoyFileSet != null ) SoyFileSet.Builder builder = new SoyFileSet.Builder();
StubJar.java,FileInputStream fis = new FileInputStream(toMirror.toFile());,if (FileInputStream(toMirror != null ) FileInputStream fis = new FileInputStream(toMirror.toFile());
StubJar.java,ClassMirror visitor = new ClassMirror(entry.getName());,if (ClassMirror(entry != null ) ClassMirror visitor = new ClassMirror(entry.getName());
TestCommand.java,BuildContext buildContext = build.getBuildContext();,if (build != null ) BuildContext buildContext = build.getBuildContext();
CompilationDatabase.java,Path resultOfXcodeSelect = context.getAppleDeveloperDirectory();,if (context != null ) Path resultOfXcodeSelect = context.getAppleDeveloperDirectory();
ThriftBuckConfig.java,Optional<BuildRule> rule = resolver.getRuleOptional(compilerTarget.get());,if (resolver != null ) Optional<BuildRule> rule = resolver.getRuleOptional(compilerTarget.get());
ThriftBuckConfig.java,sourcePath = new PathSourcePath(compilerPath.get());,if (PathSourcePath(compilerPath != null ) sourcePath = new PathSourcePath(compilerPath.get());
ThriftLibraryDescription.java,Optional<BuildTarget> thriftTarget = thriftBuckConfig.getCompilerTarget();,if (thriftBuckConfig != null ) Optional<BuildTarget> thriftTarget = thriftBuckConfig.getCompilerTarget();
ProjectGenerator.java,String existingSetting = layers.targetLevelInlineSettings.get(entry.getKey());,if (layers != null ) String existingSetting = layers.targetLevelInlineSettings.get(entry.getKey());
ProjectGenerator.java,String existingSetting = layers.targetLevelInlineSettings.get(entry.getKey());,if (layers != null ) String existingSetting = layers.targetLevelInlineSettings.get(entry.getKey());
AbstractAppleNativeTargetBuildRule.java,configurations = XcodeRuleConfiguration.fromRawJsonStructure(arg.configs.get());,if (XcodeRuleConfiguration != null ) configurations = XcodeRuleConfiguration.fromRawJsonStructure(arg.configs.get());
SchemeGenerator.java,buildRuleToBuildableReferenceMap = Maps.newHashMap();,if (Maps != null ) buildRuleToBuildableReferenceMap = Maps.newHashMap();
SchemeGeneratorTest.java,arg.testBundle = xctestRule.getBuildTarget();,if (xctestRule != null ) arg.testBundle = xctestRule.getBuildTarget();
SchemeGeneratorTest.java,arg.testBundle = xctestRule.getBuildTarget();,if (xctestRule != null ) arg.testBundle = xctestRule.getBuildTarget();
SchemeGeneratorTest.java,arg.testBundle = xctestRule.getBuildTarget();,if (xctestRule != null ) arg.testBundle = xctestRule.getBuildTarget();
OCamlBinaryDescription.java,ImmutableList<String> flags = args.compilerFlags.get();,if (args != null ) ImmutableList<String> flags = args.compilerFlags.get();
OCamlLibraryDescription.java,ImmutableList<String> flags = args.compilerFlags.get();,if (args != null ) ImmutableList<String> flags = args.compilerFlags.get();
OCamlUtil.java,String strPath = input.toString();,if (input != null ) String strPath = input.toString();
XcodeRuleConfiguration.java,this.inlineSettings = Optional.absent();,if (Optional != null ) this.inlineSettings = Optional.absent();
XcodeRuleConfiguration.java,this.sourcePath = Optional.absent();,if (Optional != null ) this.sourcePath = Optional.absent();
ProjectGenerator.java,String productName = getProductName(rule.getBuildTarget());,if (getProductName(rule != null ) String productName = getProductName(rule.getBuildTarget());
ProjectGenerator.java,BuildTarget buildTarget = buildRule.getBuildTarget();,if (buildRule != null ) BuildTarget buildTarget = buildRule.getBuildTarget();
ProjectGenerator.java,SourcePath prefixHeader = appleBuildRule.getPrefixHeader().get();,if (appleBuildRule != null ) SourcePath prefixHeader = appleBuildRule.getPrefixHeader().get();
BuckPyFunction.java,SortedSet<ParamInfo> mandatory = Sets.newTreeSet();,if (Sets != null ) SortedSet<ParamInfo> mandatory = Sets.newTreeSet();
BuckPyFunction.java,SortedSet<ParamInfo> optional = Sets.newTreeSet();,if (Sets != null ) SortedSet<ParamInfo> optional = Sets.newTreeSet();
TargetNode.java,this.extraDeps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) this.extraDeps = ImmutableSortedSet.of();
TargetNode.java,this.declaredDeps = declaredDeps.build();,if (declaredDeps != null ) this.declaredDeps = declaredDeps.build();
TargetNode.java,this.visibilityPatterns = visibilityPatterns.build();,if (visibilityPatterns != null ) this.visibilityPatterns = visibilityPatterns.build();
TargetNodeToBuildRuleTransformer.java,T arg = description.createUnpopulatedConstructorArg();,if (description != null ) T arg = description.createUnpopulatedConstructorArg();
ThriftLibraryDescription.java,enhancerFlavor = enhancers.getFlavorAndValue(params.target.getFlavors());,if (enhancers != null ) enhancerFlavor = enhancers.getFlavorAndValue(params.target.getFlavors());
Main.java,Path canonicalRootPath = projectRoot.toPath().toRealPath();,if (projectRoot != null ) Path canonicalRootPath = projectRoot.toPath().toRealPath();
BuckConfigTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRoot());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRoot());
ChromeTraceBuildListenerTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmpDir.getRoot());,if (ProjectFilesystem(tmpDir != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmpDir.getRoot());
ChromeTraceBuildListenerTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmpDir.getRoot());,if (ProjectFilesystem(tmpDir != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmpDir.getRoot());
ChromeTraceBuildListenerTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmpDir.getRoot());,if (ProjectFilesystem(tmpDir != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmpDir.getRoot());
ChromeTraceBuildListenerTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmpDir.getRoot());,if (ProjectFilesystem(tmpDir != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmpDir.getRoot());
DefaultJavaLibraryTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRoot());
DefaultJavaLibraryTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRoot());
DefaultJavaLibraryTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRoot());
JavaBuckConfigTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRoot());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem filesystem = new ProjectFilesystem(temporaryFolder.getRoot());
JavaSymbolFinderIntegrationTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRoot());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRoot());
JavaTestGetClassNamesIntegrationTest.java,projectFilesystem = new ProjectFilesystem(temporaryFolder.getRoot());,if (ProjectFilesystem(temporaryFolder != null ) projectFilesystem = new ProjectFilesystem(temporaryFolder.getRoot());
MissingSymbolsHandlerIntegrationTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRoot());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRoot());
SrcRootsFinderIntegrationTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRoot());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRoot());
SrcRootsFinderIntegrationTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRoot());,if (ProjectFilesystem(temporaryFolder != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(temporaryFolder.getRoot());
PathTypeCoercerTest.java,filesystem = new ProjectFilesystem(tmpDir.getRoot());,if (ProjectFilesystem(tmpDir != null ) filesystem = new ProjectFilesystem(tmpDir.getRoot());
SymlinkFilesIntoDirectoryStepIntegrationTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRoot());
SymlinkFileStepTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmpDir.getRoot());,if (ProjectFilesystem(tmpDir != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmpDir.getRoot());
SymlinkTreeStepTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmpDir.getRoot());,if (ProjectFilesystem(tmpDir != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmpDir.getRoot());
ProjectWorkspace.java,this.destDir = temporaryFolder.getRoot();,if (temporaryFolder != null ) this.destDir = temporaryFolder.getRoot();
ProjectWorkspace.java,this.destPath = destDir.toPath();,if (destDir != null ) this.destPath = destDir.toPath();
MorePathsTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRoot());
MorePathsTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRoot());
MorePathsTest.java,ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmp.getRoot());
ProjectFilesystemTest.java,filesystem = new ProjectFilesystem(tmp.getRoot());,if (ProjectFilesystem(tmp != null ) filesystem = new ProjectFilesystem(tmp.getRoot());
SmartDexingStep.java,List<Step> steps = Lists.newArrayList();,if (Lists != null ) List<Step> steps = Lists.newArrayList();
ProjectCommand.java,String targetName = buildTarget.getFullyQualifiedName();,if (buildTarget != null ) String targetName = buildTarget.getFullyQualifiedName();
AppleBuildRulesTest.java,libraryArg.deps = Optional.absent();,if (Optional != null ) libraryArg.deps = Optional.absent();
AppleBuildRulesTest.java,libraryArg.gid = Optional.absent();,if (Optional != null ) libraryArg.gid = Optional.absent();
AppleBuildRulesTest.java,libraryArg.headerPathPrefix = Optional.absent();,if (Optional != null ) libraryArg.headerPathPrefix = Optional.absent();
AppleBuildRulesTest.java,libraryArg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) libraryArg.useBuckHeaderMaps = Optional.absent();
AppleBuildRulesTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
AppleBuildRulesTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
AppleBuildRulesTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
AppleBuildRulesTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
AppleBuildRulesTest.java,libraryArg.deps = Optional.absent();,if (Optional != null ) libraryArg.deps = Optional.absent();
AppleBuildRulesTest.java,libraryArg.gid = Optional.absent();,if (Optional != null ) libraryArg.gid = Optional.absent();
AppleBuildRulesTest.java,libraryArg.headerPathPrefix = Optional.absent();,if (Optional != null ) libraryArg.headerPathPrefix = Optional.absent();
AppleBuildRulesTest.java,libraryArg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) libraryArg.useBuckHeaderMaps = Optional.absent();
AppleBuildRulesTest.java,rootArg.gid = Optional.absent();,if (Optional != null ) rootArg.gid = Optional.absent();
AppleBuildRulesTest.java,rootArg.headerPathPrefix = Optional.absent();,if (Optional != null ) rootArg.headerPathPrefix = Optional.absent();
AppleBuildRulesTest.java,rootArg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) rootArg.useBuckHeaderMaps = Optional.absent();
AppleBundleTest.java,libraryArg.gid = Optional.absent();,if (Optional != null ) libraryArg.gid = Optional.absent();
AppleBundleTest.java,libraryArg.headerPathPrefix = Optional.absent();,if (Optional != null ) libraryArg.headerPathPrefix = Optional.absent();
AppleBundleTest.java,libraryArg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) libraryArg.useBuckHeaderMaps = Optional.absent();
AppleBundleTest.java,libraryArg.deps = Optional.absent();,if (Optional != null ) libraryArg.deps = Optional.absent();
AppleBundleTest.java,libraryArg.gid = Optional.absent();,if (Optional != null ) libraryArg.gid = Optional.absent();
AppleBundleTest.java,libraryArg.headerPathPrefix = Optional.absent();,if (Optional != null ) libraryArg.headerPathPrefix = Optional.absent();
AppleBundleTest.java,libraryArg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) libraryArg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = appleLibraryDescription.createUnpopulatedConstructorArg();,if (appleLibraryDescription != null ) AppleNativeTargetDescriptionArg arg = appleLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
ProjectGeneratorTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = appleLibraryDescription.createUnpopulatedConstructorArg();,if (appleLibraryDescription != null ) AppleNativeTargetDescriptionArg arg = appleLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
ProjectGeneratorTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
ProjectGeneratorTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = appleLibraryDescription.createUnpopulatedConstructorArg();,if (appleLibraryDescription != null ) AppleNativeTargetDescriptionArg arg = appleLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
ProjectGeneratorTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = appleLibraryDescription.createUnpopulatedConstructorArg();,if (appleLibraryDescription != null ) AppleNativeTargetDescriptionArg arg = appleLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
ProjectGeneratorTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = appleLibraryDescription.createUnpopulatedConstructorArg();,if (appleLibraryDescription != null ) AppleNativeTargetDescriptionArg arg = appleLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = appleLibraryDescription.createUnpopulatedConstructorArg();,if (appleLibraryDescription != null ) AppleNativeTargetDescriptionArg arg = appleLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
ProjectGeneratorTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = appleLibraryDescription.createUnpopulatedConstructorArg();,if (appleLibraryDescription != null ) AppleNativeTargetDescriptionArg arg = appleLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
ProjectGeneratorTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
ProjectGeneratorTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,dynamicLibraryArg.deps = Optional.absent();,if (Optional != null ) dynamicLibraryArg.deps = Optional.absent();
ProjectGeneratorTest.java,dynamicLibraryArg.gid = Optional.absent();,if (Optional != null ) dynamicLibraryArg.gid = Optional.absent();
ProjectGeneratorTest.java,dynamicLibraryArg.headerPathPrefix = Optional.absent();,if (Optional != null ) dynamicLibraryArg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,dynamicLibraryArg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) dynamicLibraryArg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
ProjectGeneratorTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,dynamicLibraryArg.gid = Optional.absent();,if (Optional != null ) dynamicLibraryArg.gid = Optional.absent();
ProjectGeneratorTest.java,dynamicLibraryArg.headerPathPrefix = Optional.absent();,if (Optional != null ) dynamicLibraryArg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,dynamicLibraryArg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) dynamicLibraryArg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
ProjectGeneratorTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
ProjectGeneratorTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,dynamicLibraryArg.deps = Optional.absent();,if (Optional != null ) dynamicLibraryArg.deps = Optional.absent();
ProjectGeneratorTest.java,dynamicLibraryArg.gid = Optional.absent();,if (Optional != null ) dynamicLibraryArg.gid = Optional.absent();
ProjectGeneratorTest.java,dynamicLibraryArg.headerPathPrefix = Optional.absent();,if (Optional != null ) dynamicLibraryArg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,dynamicLibraryArg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) dynamicLibraryArg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = appleLibraryDescription.createUnpopulatedConstructorArg();,if (appleLibraryDescription != null ) AppleNativeTargetDescriptionArg arg = appleLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
ProjectGeneratorTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,dynamicLibraryArg.deps = Optional.absent();,if (Optional != null ) dynamicLibraryArg.deps = Optional.absent();
ProjectGeneratorTest.java,dynamicLibraryArg.gid = Optional.absent();,if (Optional != null ) dynamicLibraryArg.gid = Optional.absent();
ProjectGeneratorTest.java,dynamicLibraryArg.headerPathPrefix = Optional.absent();,if (Optional != null ) dynamicLibraryArg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,dynamicLibraryArg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) dynamicLibraryArg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = appleLibraryDescription.createUnpopulatedConstructorArg();,if (appleLibraryDescription != null ) AppleNativeTargetDescriptionArg arg = appleLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
ProjectGeneratorTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,dynamicLibraryArg.gid = Optional.absent();,if (Optional != null ) dynamicLibraryArg.gid = Optional.absent();
ProjectGeneratorTest.java,dynamicLibraryArg.headerPathPrefix = Optional.absent();,if (Optional != null ) dynamicLibraryArg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,dynamicLibraryArg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) dynamicLibraryArg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,dynamicLibraryArg.gid = Optional.absent();,if (Optional != null ) dynamicLibraryArg.gid = Optional.absent();
ProjectGeneratorTest.java,dynamicLibraryArg.headerPathPrefix = Optional.absent();,if (Optional != null ) dynamicLibraryArg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,dynamicLibraryArg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) dynamicLibraryArg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,dynamicLibraryArg.gid = Optional.absent();,if (Optional != null ) dynamicLibraryArg.gid = Optional.absent();
ProjectGeneratorTest.java,dynamicLibraryArg.headerPathPrefix = Optional.absent();,if (Optional != null ) dynamicLibraryArg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,dynamicLibraryArg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) dynamicLibraryArg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,dependentDynamicLibraryArg.gid = Optional.absent();,if (Optional != null ) dependentDynamicLibraryArg.gid = Optional.absent();
ProjectGeneratorTest.java,dependentDynamicLibraryArg.headerPathPrefix = Optional.absent();,if (Optional != null ) dependentDynamicLibraryArg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,dependentDynamicLibraryArg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) dependentDynamicLibraryArg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,libraryArg.gid = Optional.absent();,if (Optional != null ) libraryArg.gid = Optional.absent();
ProjectGeneratorTest.java,libraryArg.headerPathPrefix = Optional.absent();,if (Optional != null ) libraryArg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,libraryArg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) libraryArg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,dependentDynamicLibraryArg.gid = Optional.absent();,if (Optional != null ) dependentDynamicLibraryArg.gid = Optional.absent();
ProjectGeneratorTest.java,dependentDynamicLibraryArg.headerPathPrefix = Optional.absent();,if (Optional != null ) dependentDynamicLibraryArg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,dependentDynamicLibraryArg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) dependentDynamicLibraryArg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,libraryArg.gid = Optional.absent();,if (Optional != null ) libraryArg.gid = Optional.absent();
ProjectGeneratorTest.java,libraryArg.headerPathPrefix = Optional.absent();,if (Optional != null ) libraryArg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,libraryArg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) libraryArg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,dependentDynamicLibraryArg.gid = Optional.absent();,if (Optional != null ) dependentDynamicLibraryArg.gid = Optional.absent();
ProjectGeneratorTest.java,dependentDynamicLibraryArg.headerPathPrefix = Optional.absent();,if (Optional != null ) dependentDynamicLibraryArg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,dependentDynamicLibraryArg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) dependentDynamicLibraryArg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,libraryArg.gid = Optional.absent();,if (Optional != null ) libraryArg.gid = Optional.absent();
ProjectGeneratorTest.java,libraryArg.headerPathPrefix = Optional.absent();,if (Optional != null ) libraryArg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,libraryArg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) libraryArg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,libraryArg.gid = Optional.absent();,if (Optional != null ) libraryArg.gid = Optional.absent();
ProjectGeneratorTest.java,libraryArg.headerPathPrefix = Optional.absent();,if (Optional != null ) libraryArg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,libraryArg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) libraryArg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = appleLibraryDescription.createUnpopulatedConstructorArg();,if (appleLibraryDescription != null ) AppleNativeTargetDescriptionArg arg = appleLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,fooArg.deps = Optional.absent();,if (Optional != null ) fooArg.deps = Optional.absent();
ProjectGeneratorTest.java,fooArg.headerPathPrefix = Optional.absent();,if (Optional != null ) fooArg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,fooArg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) fooArg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,barArg.deps = Optional.absent();,if (Optional != null ) barArg.deps = Optional.absent();
ProjectGeneratorTest.java,barArg.gid = Optional.absent();,if (Optional != null ) barArg.gid = Optional.absent();
ProjectGeneratorTest.java,barArg.headerPathPrefix = Optional.absent();,if (Optional != null ) barArg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,barArg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) barArg.useBuckHeaderMaps = Optional.absent();
SchemeGeneratorTest.java,testDepArg.deps = Optional.absent();,if (Optional != null ) testDepArg.deps = Optional.absent();
SchemeGeneratorTest.java,testDepArg.gid = Optional.absent();,if (Optional != null ) testDepArg.gid = Optional.absent();
SchemeGeneratorTest.java,testDepArg.headerPathPrefix = Optional.absent();,if (Optional != null ) testDepArg.headerPathPrefix = Optional.absent();
SchemeGeneratorTest.java,testDepArg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) testDepArg.useBuckHeaderMaps = Optional.absent();
SchemeGeneratorTest.java,libraryArg.gid = Optional.absent();,if (Optional != null ) libraryArg.gid = Optional.absent();
SchemeGeneratorTest.java,libraryArg.headerPathPrefix = Optional.absent();,if (Optional != null ) libraryArg.headerPathPrefix = Optional.absent();
SchemeGeneratorTest.java,libraryArg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) libraryArg.useBuckHeaderMaps = Optional.absent();
SchemeGeneratorTest.java,libraryArg.deps = Optional.absent();,if (Optional != null ) libraryArg.deps = Optional.absent();
SchemeGeneratorTest.java,libraryArg.gid = Optional.absent();,if (Optional != null ) libraryArg.gid = Optional.absent();
SchemeGeneratorTest.java,libraryArg.headerPathPrefix = Optional.absent();,if (Optional != null ) libraryArg.headerPathPrefix = Optional.absent();
SchemeGeneratorTest.java,libraryArg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) libraryArg.useBuckHeaderMaps = Optional.absent();
SchemeGeneratorTest.java,libraryArg.deps = Optional.absent();,if (Optional != null ) libraryArg.deps = Optional.absent();
SchemeGeneratorTest.java,libraryArg.gid = Optional.absent();,if (Optional != null ) libraryArg.gid = Optional.absent();
SchemeGeneratorTest.java,libraryArg.headerPathPrefix = Optional.absent();,if (Optional != null ) libraryArg.headerPathPrefix = Optional.absent();
SchemeGeneratorTest.java,libraryArg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) libraryArg.useBuckHeaderMaps = Optional.absent();
AbstractAppleNativeTargetBuildRule.java,frameworks = Preconditions.checkNotNull(arg.frameworks.get());,if (Preconditions != null ) frameworks = Preconditions.checkNotNull(arg.frameworks.get());
AbstractNativeBuildRule.java,Set<Path> createdDirectories = Sets.newHashSet();,if (Sets != null ) Set<Path> createdDirectories = Sets.newHashSet();
AbstractNativeBuildRule.java,Path parent = srcFile.getParent();,if (srcFile != null ) Path parent = srcFile.getParent();
DefaultJavaLibrary.java,this.visibilityPatterns = Preconditions.checkNotNull(params.getVisibilityPatterns());,if (Preconditions != null ) this.visibilityPatterns = Preconditions.checkNotNull(params.getVisibilityPatterns());
PrebuiltJar.java,this.visibilityPatterns = Preconditions.checkNotNull(params.getVisibilityPatterns());,if (Preconditions != null ) this.visibilityPatterns = Preconditions.checkNotNull(params.getVisibilityPatterns());
TargetNodeToBuildRuleTransformer.java,BuildRuleFactoryParams params = targetNode.getRuleFactoryParams();,if (targetNode != null ) BuildRuleFactoryParams params = targetNode.getRuleFactoryParams();
AbstractDependencyVisitorTest.java,ImmutableSet<BuildTargetPattern> visibilityPatterns = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<BuildTargetPattern> visibilityPatterns = ImmutableSet.of();
SourcePathResolver.java,Optional<Path> resolvedPath = buildRuleSourcePath.getResolvedPath();,if (buildRuleSourcePath != null ) Optional<Path> resolvedPath = buildRuleSourcePath.getResolvedPath();
SourcePathResolver.java,Path path = buildRuleSourcePath.getRule().getPathToOutputFile();,if (buildRuleSourcePath != null ) Path path = buildRuleSourcePath.getRule().getPathToOutputFile();
ThriftBuckConfig.java,sourcePath = new BuildRuleSourcePath(rule.get());,if (BuildRuleSourcePath(rule != null ) sourcePath = new BuildRuleSourcePath(rule.get());
CxxLibraryDescriptionTest.java,BuildRule buildRule = buildRuleSourcePath.getRule();,if (buildRuleSourcePath != null ) BuildRule buildRule = buildRuleSourcePath.getRule();
SourcePathsTest.java,Iterable<SourcePath> sourcePaths = ImmutableList.of();,if (ImmutableList != null ) Iterable<SourcePath> sourcePaths = ImmutableList.of();
ExportFile.java,final String outName = args.out.or(target.getShortName());,if (args != null ) final String outName = args.out.or(target.getShortName());
AbstractGenruleStep.java,commandInUse = commandString.cmdExe.get();,if (commandString != null ) commandInUse = commandString.cmdExe.get();
AbstractGenruleStep.java,commandInUse = commandString.cmd.get();,if (commandString != null ) commandInUse = commandString.cmd.get();
AbstractGenruleStep.java,commandInUse = commandString.bash.get();,if (commandString != null ) commandInUse = commandString.bash.get();
AbstractGenruleStep.java,commandInUse = commandString.cmd.get();,if (commandString != null ) commandInUse = commandString.cmd.get();
AbstractGenruleStep.java,fullyQualifiedNameToBuildRule = Maps.newHashMap();,if (Maps != null ) fullyQualifiedNameToBuildRule = Maps.newHashMap();
AbstractGenruleStep.java,replacement = path.toString();,if (path != null ) replacement = path.toString();
AbstractGenruleStep.java,Path output = matchingRule.getPathToOutputFile();,if (matchingRule != null ) Path output = matchingRule.getPathToOutputFile();
AbstractGenruleStep.java,File output = filesystem.getFileForRelativePath(matchingRule.getPathToOutputFile());,if (filesystem != null ) File output = filesystem.getFileForRelativePath(matchingRule.getPathToOutputFile());
GenruleTest.java,AbstractGenruleStep genruleStep = buildable.createGenruleStep();,if (buildable != null ) AbstractGenruleStep genruleStep = buildable.createGenruleStep();
GenruleTest.java,AbstractGenruleStep genruleStep = buildable.createGenruleStep();,if (buildable != null ) AbstractGenruleStep genruleStep = buildable.createGenruleStep();
GenruleTest.java,Path outputPath = javaBinary.getPathToOutputFile();,if (javaBinary != null ) Path outputPath = javaBinary.getPathToOutputFile();
GenruleTest.java,Path absolutePath = outputPath.toAbsolutePath();,if (outputPath != null ) Path absolutePath = outputPath.toAbsolutePath();
GenruleTest.java,Path contextBasePath = javaBinary.getBuildTarget().getBasePath();,if (javaBinary != null ) Path contextBasePath = javaBinary.getBuildTarget().getBasePath();
GenruleTest.java,AbstractGenruleStep genruleStep = buildable.createGenruleStep();,if (buildable != null ) AbstractGenruleStep genruleStep = buildable.createGenruleStep();
GenruleTest.java,AbstractGenruleStep genruleStep = rule.createGenruleStep();,if (rule != null ) AbstractGenruleStep genruleStep = rule.createGenruleStep();
ProjectGenerator.java,Path targetPath = target.getBasePath();,if (target != null ) Path targetPath = target.getBasePath();
CxxDescriptionEnhancer.java,final String sharedLibrarySoname = getSharedLibrarySoname(params.getBuildTarget());,if (getSharedLibrarySoname(params != null ) final String sharedLibrarySoname = getSharedLibrarySoname(params.getBuildTarget());
AppleBuildRulesTest.java,xctestArg.binary = libraryRule.getBuildTarget();,if (libraryRule != null ) xctestArg.binary = libraryRule.getBuildTarget();
AppleBuildRulesTest.java,xctestArg.deps = Optional.absent();,if (Optional != null ) xctestArg.deps = Optional.absent();
AppleBuildRulesTest.java,bundleArg.binary = libraryRule.getBuildTarget();,if (libraryRule != null ) bundleArg.binary = libraryRule.getBuildTarget();
ProjectGeneratorTest.java,xctestArg.binary = dynamicLibraryDep.getBuildTarget();,if (dynamicLibraryDep != null ) xctestArg.binary = dynamicLibraryDep.getBuildTarget();
ProjectGeneratorTest.java,xctestArg.deps = Optional.absent();,if (Optional != null ) xctestArg.deps = Optional.absent();
ProjectGeneratorTest.java,xctestArg.binary = dynamicLibraryDep.getBuildTarget();,if (dynamicLibraryDep != null ) xctestArg.binary = dynamicLibraryDep.getBuildTarget();
ProjectGeneratorTest.java,xctestArg.deps = Optional.absent();,if (Optional != null ) xctestArg.deps = Optional.absent();
ProjectGeneratorTest.java,xctestArg.binary = dynamicLibraryDep.getBuildTarget();,if (dynamicLibraryDep != null ) xctestArg.binary = dynamicLibraryDep.getBuildTarget();
ProjectGeneratorTest.java,xctestArg.deps = Optional.absent();,if (Optional != null ) xctestArg.deps = Optional.absent();
ProjectGeneratorTest.java,xctestArg.binary = dynamicLibraryDep.getBuildTarget();,if (dynamicLibraryDep != null ) xctestArg.binary = dynamicLibraryDep.getBuildTarget();
ProjectGeneratorTest.java,xctestArg.deps = Optional.absent();,if (Optional != null ) xctestArg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.binary = dynamicLibraryDep.getBuildTarget();,if (dynamicLibraryDep != null ) arg.binary = dynamicLibraryDep.getBuildTarget();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.binary = dynamicLibraryDep.getBuildTarget();,if (dynamicLibraryDep != null ) arg.binary = dynamicLibraryDep.getBuildTarget();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.binary = dynamicLibraryDep.getBuildTarget();,if (dynamicLibraryDep != null ) arg.binary = dynamicLibraryDep.getBuildTarget();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.binary = dynamicLibraryDep.getBuildTarget();,if (dynamicLibraryDep != null ) arg.binary = dynamicLibraryDep.getBuildTarget();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,fooBinArg.binary = fooBinBinary.getBuildTarget();,if (fooBinBinary != null ) fooBinArg.binary = fooBinBinary.getBuildTarget();
ProjectGeneratorTest.java,fooBinArg.deps = Optional.absent();,if (Optional != null ) fooBinArg.deps = Optional.absent();
ProjectGeneratorTest.java,xctestArg.binary = dynamicLibraryDep.getBuildTarget();,if (dynamicLibraryDep != null ) xctestArg.binary = dynamicLibraryDep.getBuildTarget();
ProjectGeneratorTest.java,xctestArg.deps = Optional.absent();,if (Optional != null ) xctestArg.deps = Optional.absent();
ProjectGeneratorTest.java,xctestArg.binary = dynamicLibraryDep.getBuildTarget();,if (dynamicLibraryDep != null ) xctestArg.binary = dynamicLibraryDep.getBuildTarget();
ProjectGeneratorTest.java,xctestArg.deps = Optional.absent();,if (Optional != null ) xctestArg.deps = Optional.absent();
ProjectGeneratorTest.java,xctestArg.binary = dynamicLibraryDep.getBuildTarget();,if (dynamicLibraryDep != null ) xctestArg.binary = dynamicLibraryDep.getBuildTarget();
ProjectGeneratorTest.java,xctestArg.deps = Optional.absent();,if (Optional != null ) xctestArg.deps = Optional.absent();
ProjectGeneratorTest.java,bundleArg.binary = library.getBuildTarget();,if (library != null ) bundleArg.binary = library.getBuildTarget();
ProjectGeneratorTest.java,dependentFrameworkArg.binary = dependentDynamicLibrary.getBuildTarget();,if (dependentDynamicLibrary != null ) dependentFrameworkArg.binary = dependentDynamicLibrary.getBuildTarget();
ProjectGeneratorTest.java,bundleArg.binary = library.getBuildTarget();,if (library != null ) bundleArg.binary = library.getBuildTarget();
ProjectGeneratorTest.java,dependentStaticFrameworkArg.binary = dependentStaticLibrary.getBuildTarget();,if (dependentStaticLibrary != null ) dependentStaticFrameworkArg.binary = dependentStaticLibrary.getBuildTarget();
ProjectGeneratorTest.java,dependentFrameworkArg.binary = dependentDynamicLibrary.getBuildTarget();,if (dependentDynamicLibrary != null ) dependentFrameworkArg.binary = dependentDynamicLibrary.getBuildTarget();
ProjectGeneratorTest.java,bundleArg.binary = library.getBuildTarget();,if (library != null ) bundleArg.binary = library.getBuildTarget();
ProjectGeneratorTest.java,bundleArg.binary = library.getBuildTarget();,if (library != null ) bundleArg.binary = library.getBuildTarget();
ProjectGeneratorTest.java,bundleArg.binary = bundleLibraryRule.getBuildTarget();,if (bundleLibraryRule != null ) bundleArg.binary = bundleLibraryRule.getBuildTarget();
ProjectGeneratorTest.java,bundleArg.binary = bundleLibraryRule.getBuildTarget();,if (bundleLibraryRule != null ) bundleArg.binary = bundleLibraryRule.getBuildTarget();
ProjectGeneratorTest.java,bundleArg.binary = bundleLibraryRule.getBuildTarget();,if (bundleLibraryRule != null ) bundleArg.binary = bundleLibraryRule.getBuildTarget();
SchemeGeneratorTest.java,xctestArg.binary = libraryRule.getBuildTarget();,if (libraryRule != null ) xctestArg.binary = libraryRule.getBuildTarget();
SchemeGeneratorTest.java,xctestArg.deps = Optional.absent();,if (Optional != null ) xctestArg.deps = Optional.absent();
SchemeGeneratorTest.java,xctestArg.binary = libraryRule.getBuildTarget();,if (libraryRule != null ) xctestArg.binary = libraryRule.getBuildTarget();
SchemeGeneratorTest.java,xctestArg.deps = Optional.absent();,if (Optional != null ) xctestArg.deps = Optional.absent();
SchemeGeneratorTest.java,xctestArg.binary = libraryRule.getBuildTarget();,if (libraryRule != null ) xctestArg.binary = libraryRule.getBuildTarget();
SchemeGeneratorTest.java,xctestArg.deps = Optional.absent();,if (Optional != null ) xctestArg.deps = Optional.absent();
SeparatedProjectsGeneratorTest.java,arg.binary = dynamicLibraryDep.getBuildTarget();,if (dynamicLibraryDep != null ) arg.binary = dynamicLibraryDep.getBuildTarget();
SeparatedProjectsGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
SeparatedProjectsGeneratorTest.java,arg.binary = binaryDep.getBuildTarget();,if (binaryDep != null ) arg.binary = binaryDep.getBuildTarget();
SeparatedProjectsGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
RuleKey.java,Object ref = path.asReference();,if (path != null ) Object ref = path.asReference();
RuleKey.java,Object ref = path.asReference();,if (path != null ) Object ref = path.asReference();
SourcePathResolver.java,Path path = (Path) sourcePath.asReference();,if (sourcePath != null ) Path path = (Path) sourcePath.asReference();
SourcePaths.java,Path path = (Path) sourcePath.asReference();,if (sourcePath != null ) Path path = (Path) sourcePath.asReference();
BuildRuleSourcePath.java,Path path = rule.getPathToOutputFile();,if (rule != null ) Path path = rule.getPathToOutputFile();
AndroidBuildConfig.java,final ReadValuesStep readValuesStep = new ReadValuesStep(valuesFile.get());,if (ReadValuesStep(valuesFile != null ) final ReadValuesStep readValuesStep = new ReadValuesStep(valuesFile.get());
DummyRDotJava.java,javaSourceFilePaths = mergeStep.getRDotJavaFiles();,if (mergeStep != null ) javaSourceFilePaths = mergeStep.getRDotJavaFiles();
ProjectGenerator.java,Path path = sourcePath.resolve();,if (sourcePath != null ) Path path = sourcePath.resolve();
ProjectGenerator.java,Path path = headerPath.resolve();,if (headerPath != null ) Path path = headerPath.resolve();
ProjectGenerator.java,Path childPath = contents.get(childVirtualName).resolve();,if (contents != null ) Path childPath = contents.get(childVirtualName).resolve();
WorkspaceAndProjectGenerator.java,Path projectPath = buildable.getProjectContainerPath().resolve();,if (buildable != null ) Path projectPath = buildable.getProjectContainerPath().resolve();
ProjectCommand.java,actionGraph = createPartialGraphs(options).getProjectGraph();,if (createPartialGraphs(options) != null ) actionGraph = createPartialGraphs(options).getProjectGraph();
TestCommand.java,ImmutableSet<SourcePath> javaSrcPaths = rule.getJavaSrcs();,if (rule != null ) ImmutableSet<SourcePath> javaSrcPaths = rule.getJavaSrcs();
Project.java,this.javadocUrl = prebuiltJar.getJavadocUrl().orNull();,if (prebuiltJar != null ) this.javadocUrl = prebuiltJar.getJavadocUrl().orNull();
AbstractNativeBuildRule.java,Path srcFile = src.resolve();,if (src != null ) Path srcFile = src.resolve();
CopyResourcesStep.java,final Path pathToResource = rawResource.resolve();,if (rawResource != null ) final Path pathToResource = rawResource.resolve();
ExternalJavacStep.java,Path path = sourcePath.resolve();,if (sourcePath != null ) Path path = sourcePath.resolve();
JavaTest.java,Path path = sourcePath.resolve();,if (sourcePath != null ) Path path = sourcePath.resolve();
JavacInMemoryStep.java,Path path = srcPath.resolve();,if (srcPath != null ) Path path = srcPath.resolve();
PrebuiltJarDescription.java,final Path pathToExistingJarFile = inputToCompareToOutput.resolve();,if (inputToCompareToOutput != null ) final Path pathToExistingJarFile = inputToCompareToOutput.resolve();
GenParcelable.java,Path src = sourcePath.resolve();,if (sourcePath != null ) Path src = sourcePath.resolve();
ArchiveStepIntegrationTest.java,Path archiver = platform.getAr().resolve();,if (platform != null ) Path archiver = platform.getAr().resolve();
ParserTest.java,ActionGraph actionGraph = targetGraph.buildActionGraph();,if (targetGraph != null ) ActionGraph actionGraph = targetGraph.buildActionGraph();
BuildRuleSourcePathTest.java,Path resolved = path.resolve();,if (path != null ) Path resolved = path.resolve();
PathSourcePathTest.java,Path resolved = path.resolve();,if (path != null ) Path resolved = path.resolve();
TracesHelper.java,String name = path.getFileName().toString();,if (path != null ) String name = path.getFileName().toString();
TracesHelper.java,String name = path.getFileName().toString();,if (path != null ) String name = path.getFileName().toString();
TracesHandlerDelegate.java,File[] traceFiles = tracesHelper.listTraceFiles();,if (tracesHelper != null ) File[] traceFiles = tracesHelper.listTraceFiles();
TracesHandlerDelegate.java,String name = file.getName();,if (file != null ) String name = file.getName();
TracesHelper.java,long lastModifiedTime = traceFile.lastModified();,if (traceFile != null ) long lastModifiedTime = traceFile.lastModified();
TracesHelper.java,String name = traceFile.getName();,if (traceFile != null ) String name = traceFile.getName();
OCamlBuildContext.java,context.cCompiler = config.getCCompiler();,if (config != null ) context.cCompiler = config.getCCompiler();
OCamlBuildContext.java,context.cxxCompiler = config.getCxxCompiler();,if (config != null ) context.cxxCompiler = config.getCxxCompiler();
Project.java,BuildRule projectRule = projectConfig.getProjectRule();,if (projectConfig != null ) BuildRule projectRule = projectConfig.getProjectRule();
ThriftLibraryDescription.java,this.enhancers = enhancerMapBuilder.build();,if (enhancerMapBuilder != null ) this.enhancers = enhancerMapBuilder.build();
ThriftLibraryDescription.java,ThriftLanguageSpecificEnhancer enhancer = enhancers.get(flavor.get());,if (enhancers != null ) ThriftLanguageSpecificEnhancer enhancer = enhancers.get(flavor.get());
ThriftLibraryDescription.java,"BuildTarget flavoredTarget = BuildTargets.extendFlavoredBuildTarget(target, flavor.get());","if (flavor != null ) BuildTarget flavoredTarget = BuildTargets.extendFlavoredBuildTarget(target, flavor.get());"
ThriftLibraryDescription.java,ThriftLanguageSpecificEnhancer enhancer = enhancers.get(flavor.get());,if (enhancers != null ) ThriftLanguageSpecificEnhancer enhancer = enhancers.get(flavor.get());
PythonBinaryDescription.java,String mainName = args.main.getName();,if (args != null ) String mainName = args.main.getName();
SourcePaths.java,String name = path.getName();,if (path != null ) String name = path.getName();
AbstractAppleNativeTargetBuildRule.java,weakFrameworks = Preconditions.checkNotNull(arg.weakFrameworks.get());,if (Preconditions != null ) weakFrameworks = Preconditions.checkNotNull(arg.weakFrameworks.get());
ProjectGeneratorTest.java,PBXProject generatedProject = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject generatedProject = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,NSDictionary settings = file.getSettings().get();,if (file != null ) NSDictionary settings = file.getSettings().get();
ProjectGeneratorTest.java,PBXReference.SourceTree sourceTree = file.getFileRef().getSourceTree();,if (file != null ) PBXReference.SourceTree sourceTree = file.getFileRef().getSourceTree();
ProjectGeneratorTest.java,PBXProject generatedProject = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject generatedProject = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXReference.SourceTree sourceTree = file.getFileRef().getSourceTree();,if (file != null ) PBXReference.SourceTree sourceTree = file.getFileRef().getSourceTree();
ProjectBuildFileParser.java,this.ignorePaths = projectFilesystem.getIgnorePaths();,if (projectFilesystem != null ) this.ignorePaths = projectFilesystem.getIgnorePaths();
Parser.java,Set<Path> buildTargetFiles = Sets.newHashSet();,if (Sets != null ) Set<Path> buildTargetFiles = Sets.newHashSet();
AppleTest.java,contacts = Preconditions.checkNotNull(arg.contacts.get());,if (Preconditions != null ) contacts = Preconditions.checkNotNull(arg.contacts.get());
AppleTest.java,labels = Preconditions.checkNotNull(arg.labels.get());,if (Preconditions != null ) labels = Preconditions.checkNotNull(arg.labels.get());
AppleTest.java,sourceUnderTest = Preconditions.checkNotNull(arg.sourceUnderTest.get());,if (Preconditions != null ) sourceUnderTest = Preconditions.checkNotNull(arg.sourceUnderTest.get());
XcodeWorkspaceConfig.java,this.extraTests = ImmutableSet.copyOf(arg.extraTests.get());,if (ImmutableSet != null ) this.extraTests = ImmutableSet.copyOf(arg.extraTests.get());
XcodeWorkspaceConfig.java,this.extraTests = ImmutableSet.of();,if (ImmutableSet != null ) this.extraTests = ImmutableSet.of();
ThriftBuckConfig.java,BuildRule rule = resolver.get(compilerTarget.get());,if (resolver != null ) BuildRule rule = resolver.get(compilerTarget.get());
AndroidBinaryTest.java,BuildRule libraryOneRule = ruleResolver.get(libraryOne.getBuildTarget());,if (ruleResolver != null ) BuildRule libraryOneRule = ruleResolver.get(libraryOne.getBuildTarget());
AndroidBinaryTest.java,BuildRule libraryTwoRule = ruleResolver.get(libraryTwo.getBuildTarget());,if (ruleResolver != null ) BuildRule libraryTwoRule = ruleResolver.get(libraryTwo.getBuildTarget());
TestSelector.java,String aClassName = description.getClassName();,if (description != null ) String aClassName = description.getClassName();
TestSelector.java,String aMethodName = description.getMethodName();,if (description != null ) String aMethodName = description.getMethodName();
UberRDotJava.java,ImmutableList<Path> resDirectories = filteredResourcesProvider.getResDirectories();,if (filteredResourcesProvider != null ) ImmutableList<Path> resDirectories = filteredResourcesProvider.getResDirectories();
MiniAapt.java,String filename = resourceFile.getFileName().toString();,if (resourceFile != null ) String filename = resourceFile.getFileName().toString();
UberRDotJavaUtilTest.java,AndroidPrebuiltAarDescription.Arg aarArg = new AndroidPrebuiltAarDescription.Arg();,if (AndroidPrebuiltAarDescription != null ) AndroidPrebuiltAarDescription.Arg aarArg = new AndroidPrebuiltAarDescription.Arg();
UberRDotJavaUtilTest.java,AndroidResourceDescription.Arg resArg = new AndroidResourceDescription.Arg();,if (AndroidResourceDescription != null ) AndroidResourceDescription.Arg resArg = new AndroidResourceDescription.Arg();
UberRDotJavaUtilTest.java,resArg.manifest = Optional.absent();,if (Optional != null ) resArg.manifest = Optional.absent();
WorkspaceAndProjectGenerator.java,ImmutableSet<BuildRule> orderedTestBundleRules = orderedTestBundleRulesBuilder.build();,if (orderedTestBundleRulesBuilder != null ) ImmutableSet<BuildRule> orderedTestBundleRules = orderedTestBundleRulesBuilder.build();
AndroidBinaryGraphEnhancer.java,Optional<PackageStringAssets> packageStringAssets = Optional.absent();,if (Optional != null ) Optional<PackageStringAssets> packageStringAssets = Optional.absent();
PreDexMerge.java,Optional<DexWithClasses> rDotJavaDexWithClasses = uberRDotJava.getRDotJavaDexWithClasses();,if (uberRDotJava != null ) Optional<DexWithClasses> rDotJavaDexWithClasses = uberRDotJava.getRDotJavaDexWithClasses();
AndroidBinaryGraphEnhancerTest.java,BuildRuleParams uberRDotJavaParams = new FakeBuildRuleParamsBuilder(uberRDotJavaTarget).build();,if (FakeBuildRuleParamsBuilder(uberRDotJavaTarget) != null ) BuildRuleParams uberRDotJavaParams = new FakeBuildRuleParamsBuilder(uberRDotJavaTarget).build();
AndroidBinaryGraphEnhancerTest.java,BuildRule shouldBeUberRDotJavaRule = depsForPreDexingIter.next();,if (depsForPreDexingIter != null ) BuildRule shouldBeUberRDotJavaRule = depsForPreDexingIter.next();
UberRDotJavaAbiIntegrationTest.java,BuckBuildLog buildLog = workspace.getBuildLog();,if (workspace != null ) BuckBuildLog buildLog = workspace.getBuildLog();
UberRDotJavaAbiIntegrationTest.java,BuckBuildLog buildLog = workspace.getBuildLog();,if (workspace != null ) BuckBuildLog buildLog = workspace.getBuildLog();
AndroidXmlFileIntegrationTest.java,BuckBuildLog buildLog = workspace.getBuildLog();,if (workspace != null ) BuckBuildLog buildLog = workspace.getBuildLog();
CxxTestDescription.java,CxxTestType type = CxxTestType.valueOf(strType.toUpperCase());,if (CxxTestType != null ) CxxTestType type = CxxTestType.valueOf(strType.toUpperCase());
Main.java,String rawPort = serverPort.get();,if (serverPort != null ) String rawPort = serverPort.get();
Main.java,webServer = Optional.absent();,if (Optional != null ) webServer = Optional.absent();
Main.java,webServer = Optional.absent();,if (Optional != null ) webServer = Optional.absent();
Main.java,int port = webServer.get().getPort();,if (webServer != null ) int port = webServer.get().getPort();
ThriftJavaEnhancer.java,Path sourceDirectory = ent.getValue().getOutputDir();,if (ent != null ) Path sourceDirectory = ent.getValue().getOutputDir();
AppleBundleTest.java,AppleBundleDescription.Arg arg = description.createUnpopulatedConstructorArg();,if (description != null ) AppleBundleDescription.Arg arg = description.createUnpopulatedConstructorArg();
AppleBundleTest.java,arg.infoPlist = Optional.absent();,if (Optional != null ) arg.infoPlist = Optional.absent();
AppleBundleTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
AppleBundleTest.java,AppleBundleDescription.Arg arg = description.createUnpopulatedConstructorArg();,if (description != null ) AppleBundleDescription.Arg arg = description.createUnpopulatedConstructorArg();
AppleBundleTest.java,arg.infoPlist = Optional.absent();,if (Optional != null ) arg.infoPlist = Optional.absent();
GenruleBuilder.java,this.args = this.description.createUnpopulatedConstructorArg();,if (this != null ) this.args = this.description.createUnpopulatedConstructorArg();
GenruleBuilder.java,this.args.bash = Optional.absent();,if (Optional != null ) this.args.bash = Optional.absent();
GenruleBuilder.java,this.args.cmd = Optional.absent();,if (Optional != null ) this.args.cmd = Optional.absent();
GenruleBuilder.java,this.args.cmdExe = Optional.absent();,if (Optional != null ) this.args.cmdExe = Optional.absent();
GenruleTest.java,BuildRule genrule = builder.build();,if (builder != null ) BuildRule genrule = builder.build();
CxxBinaryDescription.java,Path output = getOutputPath(params.getBuildTarget());,if (getOutputPath(params != null ) Path output = getOutputPath(params.getBuildTarget());
CxxDescriptionEnhancer.java,BuildTarget headerTarget = createHeaderTarget(params.getBuildTarget());,if (createHeaderTarget(params != null ) BuildTarget headerTarget = createHeaderTarget(params.getBuildTarget());
JarDirectoryStep.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
JarDirectoryStep.java,Set<String> alreadyAddedEntries = Sets.newHashSet();,if (Sets != null ) Set<String> alreadyAddedEntries = Sets.newHashSet();
JarDirectoryStep.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
JarDirectoryStep.java,ZipEntry entry = entries.nextElement();,if (entries != null ) ZipEntry entry = entries.nextElement();
JarDirectoryStep.java,String entryName = entry.getName();,if (entry != null ) String entryName = entry.getName();
JarDirectoryStep.java,ByteArrayInputStream rawManifest = new ByteArrayInputStream(output.toByteArray());,if (ByteArrayInputStream(output != null ) ByteArrayInputStream rawManifest = new ByteArrayInputStream(output.toByteArray());
JarDirectoryStep.java,String entryName = entry.getName();,if (entry != null ) String entryName = entry.getName();
JarDirectoryStep.java,Attributes attributes = from.getMainAttributes();,if (from != null ) Attributes attributes = from.getMainAttributes();
AndroidBinaryGraphEnhancerTest.java,AndroidPackageableCollection packageableCollection = result.getPackageableCollection();,if (result != null ) AndroidPackageableCollection packageableCollection = result.getPackageableCollection();
ParserTest.java,repository = repositoryFactory.getRootRepository();,if (repositoryFactory != null ) repository = repositoryFactory.getRootRepository();
ParserTest.java,"Path root = Paths.get(""."").toRealPath();","if (Paths != null ) Path root = Paths.get(""."").toRealPath();"
ParserTest.java,Iterable<String> defaultIncludes = ImmutableList.of();,if (ImmutableList != null ) Iterable<String> defaultIncludes = ImmutableList.of();
ProjectCommand.java,partialGraph = createPartialGraphs(options).getProjectGraph();,if (createPartialGraphs(options) != null ) partialGraph = createPartialGraphs(options).getProjectGraph();
Project.java,ActionGraph actionGraph = partialGraph.getActionGraph();,if (partialGraph != null ) ActionGraph actionGraph = partialGraph.getActionGraph();
ProjectTest.java,PartialGraph partialGraph = project.getPartialGraph();,if (project != null ) PartialGraph partialGraph = project.getPartialGraph();
BuckConfig.java,String srcRoots = srcRootsOptional.get();,if (srcRootsOptional != null ) String srcRoots = srcRootsOptional.get();
BuckConfig.java,String excludedRules = excludedRulesOptional.get();,if (excludedRulesOptional != null ) String excludedRules = excludedRulesOptional.get();
JUnitRunner.java,DocumentBuilder docBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();,if (DocumentBuilderFactory != null ) DocumentBuilder docBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
JUnitRunner.java,Document doc = docBuilder.newDocument();,if (docBuilder != null ) Document doc = docBuilder.newDocument();
JUnitRunner.java,boolean isSuccess = result.isSuccess();,if (result != null ) boolean isSuccess = result.isSuccess();
JUnitRunner.java,String message = failure.getMessage();,if (failure != null ) String message = failure.getMessage();
JUnitRunner.java,String stacktrace = failure.getTrace();,if (failure != null ) String stacktrace = failure.getTrace();
JUnitRunner.java,TransformerFactory transformerFactory = TransformerFactory.newInstance();,if (TransformerFactory != null ) TransformerFactory transformerFactory = TransformerFactory.newInstance();
JUnitRunner.java,Transformer trans = transformerFactory.newTransformer();,if (transformerFactory != null ) Transformer trans = transformerFactory.newTransformer();
Main.java,TestSelectorList testSelectorList = TestSelectorList.empty();,if (TestSelectorList != null ) TestSelectorList testSelectorList = TestSelectorList.empty();
ParsedDescription.java,String displayName = description.getDisplayName();,if (description != null ) String displayName = description.getDisplayName();
TestResult.java,private long startTime = System.currentTimeMillis();,if (System != null ) private long startTime = System.currentTimeMillis();
TestResult.java,resultListener = result.createListener();,if (result != null ) resultListener = result.createListener();
TestResult.java,int numFailures = result.getFailureCount();,if (result != null ) int numFailures = result.getFailureCount();
TestResult.java,String className = description.getClassName();,if (description != null ) String className = description.getClassName();
TestResult.java,String methodName = description.getMethodName();,if (description != null ) String methodName = description.getMethodName();
TestResult.java,Description description = failure.getDescription();,if (failure != null ) Description description = failure.getDescription();
AssumptionViolationsTest.java,message = builder.toString();,if (builder != null ) message = builder.toString();
CassandraArtifactCache.java,byte[] artifact = column.getByteArrayValue();,if (column != null ) byte[] artifact = column.getByteArrayValue();
CassandraArtifactCache.java,Keyspace keyspace = keyspaceAndTtl.get().getKeyspace();,if (keyspaceAndTtl != null ) Keyspace keyspace = keyspaceAndTtl.get().getKeyspace();
CassandraArtifactCache.java,int ttl = keyspaceAndTtl.get().getTtl();,if (keyspaceAndTtl != null ) int ttl = keyspaceAndTtl.get().getTtl();
CassandraArtifactCache.java,MutationBatch mutationBatch = keyspace.prepareMutationBatch();,if (keyspace != null ) MutationBatch mutationBatch = keyspace.prepareMutationBatch();
HttpArtifactCache.java,Path path = file.toPath();,if (file != null ) Path path = file.toPath();
WorkspaceAndProjectGenerator.java,ImmutableSet<BuildRule> orderedTestBuildRules = orderedTestBuildRulesBuilder.build();,if (orderedTestBuildRulesBuilder != null ) ImmutableSet<BuildRule> orderedTestBuildRules = orderedTestBuildRulesBuilder.build();
WorkspaceAndProjectGenerator.java,XcodeProjectConfig xcodeProjectConfig = (XcodeProjectConfig) xcodeProjectConfigRule.get();,if (xcodeProjectConfigRule != null ) XcodeProjectConfig xcodeProjectConfig = (XcodeProjectConfig) xcodeProjectConfigRule.get();
WorkspaceAndProjectGenerator.java,Set<BuildTarget> initialTargets = initialTargetsBuilder.build();,if (initialTargetsBuilder != null ) Set<BuildTarget> initialTargets = initialTargetsBuilder.build();
WorkspaceAndProjectGenerator.java,Path projectPath = buildable.getProjectContainerPath().resolve();,if (buildable != null ) Path projectPath = buildable.getProjectContainerPath().resolve();
WorkspaceAndProjectGenerator.java,String targetName = buildable.getTargetName();,if (buildable != null ) String targetName = buildable.getTargetName();
TargetGraph.java,"rule = transformer.transform(ruleResolver, targetRepo.getBuildTargetParser());","if (targetRepo != null ) rule = transformer.transform(ruleResolver, targetRepo.getBuildTargetParser());"
ConstructorArgMarshaller.java,this.basePath = pathFromProjectRootToBuildFile.normalize();,if (pathFromProjectRootToBuildFile != null ) this.basePath = pathFromProjectRootToBuildFile.normalize();
BuildTarget.java,String basePath = getBasePath().toString();,if (getBasePath() != null ) String basePath = getBasePath().toString();
ZipStep.java,String entryName = relativePath.toString();,if (relativePath != null ) String entryName = relativePath.toString();
PythonBuckConfig.java,String versionString = CharMatcher.WHITESPACE.trimFrom(versionResult.getStderr());,if (CharMatcher != null ) String versionString = CharMatcher.WHITESPACE.trimFrom(versionResult.getStderr());
DefaultExecutionEnvironment.java,String allNetworks = allNetworksResult.getStdout();,if (allNetworksResult != null ) String allNetworks = allNetworksResult.getStdout();
ThriftPythonEnhancer.java,Path baseModule = params.getBuildTarget().getBasePath();,if (params != null ) Path baseModule = params.getBuildTarget().getBasePath();
JavaThriftLibrary.java,final Path projectRoot = context.getProjectRoot();,if (context != null ) final Path projectRoot = context.getProjectRoot();
JavaThriftLibraryDescription.java,ImmutableSet<Flavor> flavor = params.getBuildTarget().getFlavors();,if (params != null ) ImmutableSet<Flavor> flavor = params.getBuildTarget().getFlavors();
ProjectGeneratorTest.java,ImmutableSet<String> expectedHeadersSet = expectedHeadersSetBuilder.build();,if (expectedHeadersSetBuilder != null ) ImmutableSet<String> expectedHeadersSet = expectedHeadersSetBuilder.build();
ProjectGeneratorTest.java,String header = assertFileRefIsRelativeAndResolvePath(file.getFileRef());,if (assertFileRefIsRelativeAndResolvePath(file != null ) String header = assertFileRefIsRelativeAndResolvePath(file.getFileRef());
TypeCoercerTest.java,List<Object> objects = traversal.getObjects();,if (traversal != null ) List<Object> objects = traversal.getObjects();
WorkspaceAndProjectGenerator.java,BuildRule testBundleRule = testRule.getTestBundle();,if (testRule != null ) BuildRule testBundleRule = testRule.getTestBundle();
Parser.java,boolean isRuleFlavored = rule.getBuildTarget().isFlavored();,if (rule != null ) boolean isRuleFlavored = rule.getBuildTarget().isFlavored();
Parser.java,boolean isDepFlavored = dep.getBuildTarget().isFlavored();,if (dep != null ) boolean isDepFlavored = dep.getBuildTarget().isFlavored();
Parser.java,depsToVisit = ImmutableSet.builder();,if (ImmutableSet != null ) depsToVisit = ImmutableSet.builder();
BuckConfig.java,"buildTarget = buildTargetParser.parse(value, ParseContext.fullyQualified());","if (ParseContext != null ) buildTarget = buildTargetParser.parse(value, ParseContext.fullyQualified());"
RepositoryFactory.java,Path root = absolutePath.toRealPath();,if (absolutePath != null ) Path root = absolutePath.toRealPath();
CommandRunnerParamsForTesting.java,Repository repository = new TestRepositoryBuilder().build();,if (TestRepositoryBuilder() != null ) Repository repository = new TestRepositoryBuilder().build();
AppleBuildRulesTest.java,libraryArg.configs = ImmutableMap.of();,if (ImmutableMap != null ) libraryArg.configs = ImmutableMap.of();
AppleBuildRulesTest.java,libraryArg.srcs = ImmutableList.of();,if (ImmutableList != null ) libraryArg.srcs = ImmutableList.of();
AppleBuildRulesTest.java,libraryArg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) libraryArg.frameworks = ImmutableSortedSet.of();
AppleBuildRulesTest.java,arg.configs = ImmutableMap.of();,if (ImmutableMap != null ) arg.configs = ImmutableMap.of();
AppleBuildRulesTest.java,arg.srcs = ImmutableList.of();,if (ImmutableList != null ) arg.srcs = ImmutableList.of();
AppleBuildRulesTest.java,arg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.frameworks = ImmutableSortedSet.of();
AppleBuildRulesTest.java,libraryArg.configs = ImmutableMap.of();,if (ImmutableMap != null ) libraryArg.configs = ImmutableMap.of();
AppleBuildRulesTest.java,libraryArg.srcs = ImmutableList.of();,if (ImmutableList != null ) libraryArg.srcs = ImmutableList.of();
AppleBuildRulesTest.java,libraryArg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) libraryArg.frameworks = ImmutableSortedSet.of();
AppleBuildRulesTest.java,rootArg.configs = ImmutableMap.of();,if (ImmutableMap != null ) rootArg.configs = ImmutableMap.of();
AppleBuildRulesTest.java,rootArg.srcs = ImmutableList.of();,if (ImmutableList != null ) rootArg.srcs = ImmutableList.of();
AppleBuildRulesTest.java,rootArg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) rootArg.frameworks = ImmutableSortedSet.of();
AppleBundleTest.java,libraryArg.srcs = ImmutableList.of();,if (ImmutableList != null ) libraryArg.srcs = ImmutableList.of();
AppleBundleTest.java,libraryArg.configs = ImmutableMap.of();,if (ImmutableMap != null ) libraryArg.configs = ImmutableMap.of();
AppleBundleTest.java,libraryArg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) libraryArg.frameworks = ImmutableSortedSet.of();
AppleBundleTest.java,libraryArg.srcs = ImmutableList.of();,if (ImmutableList != null ) libraryArg.srcs = ImmutableList.of();
AppleBundleTest.java,libraryArg.configs = ImmutableMap.of();,if (ImmutableMap != null ) libraryArg.configs = ImmutableMap.of();
AppleBundleTest.java,libraryArg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) libraryArg.frameworks = ImmutableSortedSet.of();
AppleLibraryTest.java,arg.configs = ImmutableMap.of();,if (ImmutableMap != null ) arg.configs = ImmutableMap.of();
AppleLibraryTest.java,arg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.frameworks = ImmutableSortedSet.of();
AppleLibraryTest.java,arg.srcs = ImmutableList.of();,if (ImmutableList != null ) arg.srcs = ImmutableList.of();
AppleLibraryTest.java,arg.configs = ImmutableMap.of();,if (ImmutableMap != null ) arg.configs = ImmutableMap.of();
AppleLibraryTest.java,arg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.frameworks = ImmutableSortedSet.of();
ProjectGeneratorTest.java,arg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.frameworks = ImmutableSortedSet.of();
ProjectGeneratorTest.java,arg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.frameworks = ImmutableSortedSet.of();
ProjectGeneratorTest.java,arg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.frameworks = ImmutableSortedSet.of();
ProjectGeneratorTest.java,arg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.frameworks = ImmutableSortedSet.of();
ProjectGeneratorTest.java,arg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.frameworks = ImmutableSortedSet.of();
ProjectGeneratorTest.java,arg.srcs = ImmutableList.of();,if (ImmutableList != null ) arg.srcs = ImmutableList.of();
ProjectGeneratorTest.java,arg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.frameworks = ImmutableSortedSet.of();
ProjectGeneratorTest.java,arg.srcs = ImmutableList.of();,if (ImmutableList != null ) arg.srcs = ImmutableList.of();
ProjectGeneratorTest.java,arg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.frameworks = ImmutableSortedSet.of();
ProjectGeneratorTest.java,arg.srcs = ImmutableList.of();,if (ImmutableList != null ) arg.srcs = ImmutableList.of();
ProjectGeneratorTest.java,arg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.frameworks = ImmutableSortedSet.of();
ProjectGeneratorTest.java,arg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.frameworks = ImmutableSortedSet.of();
ProjectGeneratorTest.java,arg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.frameworks = ImmutableSortedSet.of();
ProjectGeneratorTest.java,dynamicLibraryArg.configs = ImmutableMap.of();,if (ImmutableMap != null ) dynamicLibraryArg.configs = ImmutableMap.of();
ProjectGeneratorTest.java,dynamicLibraryArg.srcs = ImmutableList.of();,if (ImmutableList != null ) dynamicLibraryArg.srcs = ImmutableList.of();
ProjectGeneratorTest.java,dynamicLibraryArg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) dynamicLibraryArg.frameworks = ImmutableSortedSet.of();
ProjectGeneratorTest.java,dynamicLibraryArg.configs = ImmutableMap.of();,if (ImmutableMap != null ) dynamicLibraryArg.configs = ImmutableMap.of();
ProjectGeneratorTest.java,dynamicLibraryArg.srcs = ImmutableList.of();,if (ImmutableList != null ) dynamicLibraryArg.srcs = ImmutableList.of();
ProjectGeneratorTest.java,dynamicLibraryArg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) dynamicLibraryArg.frameworks = ImmutableSortedSet.of();
ProjectGeneratorTest.java,dynamicLibraryArg.configs = ImmutableMap.of();,if (ImmutableMap != null ) dynamicLibraryArg.configs = ImmutableMap.of();
ProjectGeneratorTest.java,dynamicLibraryArg.srcs = ImmutableList.of();,if (ImmutableList != null ) dynamicLibraryArg.srcs = ImmutableList.of();
ProjectGeneratorTest.java,dynamicLibraryArg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) dynamicLibraryArg.frameworks = ImmutableSortedSet.of();
ProjectGeneratorTest.java,dependentDynamicLibraryArg.configs = ImmutableMap.of();,if (ImmutableMap != null ) dependentDynamicLibraryArg.configs = ImmutableMap.of();
ProjectGeneratorTest.java,dependentDynamicLibraryArg.srcs = ImmutableList.of();,if (ImmutableList != null ) dependentDynamicLibraryArg.srcs = ImmutableList.of();
ProjectGeneratorTest.java,dependentDynamicLibraryArg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) dependentDynamicLibraryArg.frameworks = ImmutableSortedSet.of();
ProjectGeneratorTest.java,libraryArg.configs = ImmutableMap.of();,if (ImmutableMap != null ) libraryArg.configs = ImmutableMap.of();
ProjectGeneratorTest.java,libraryArg.srcs = ImmutableList.of();,if (ImmutableList != null ) libraryArg.srcs = ImmutableList.of();
ProjectGeneratorTest.java,libraryArg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) libraryArg.frameworks = ImmutableSortedSet.of();
ProjectGeneratorTest.java,dependentDynamicLibraryArg.configs = ImmutableMap.of();,if (ImmutableMap != null ) dependentDynamicLibraryArg.configs = ImmutableMap.of();
ProjectGeneratorTest.java,dependentDynamicLibraryArg.srcs = ImmutableList.of();,if (ImmutableList != null ) dependentDynamicLibraryArg.srcs = ImmutableList.of();
ProjectGeneratorTest.java,dependentDynamicLibraryArg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) dependentDynamicLibraryArg.frameworks = ImmutableSortedSet.of();
ProjectGeneratorTest.java,libraryArg.configs = ImmutableMap.of();,if (ImmutableMap != null ) libraryArg.configs = ImmutableMap.of();
ProjectGeneratorTest.java,libraryArg.srcs = ImmutableList.of();,if (ImmutableList != null ) libraryArg.srcs = ImmutableList.of();
ProjectGeneratorTest.java,libraryArg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) libraryArg.frameworks = ImmutableSortedSet.of();
ProjectGeneratorTest.java,dependentDynamicLibraryArg.configs = ImmutableMap.of();,if (ImmutableMap != null ) dependentDynamicLibraryArg.configs = ImmutableMap.of();
ProjectGeneratorTest.java,dependentDynamicLibraryArg.srcs = ImmutableList.of();,if (ImmutableList != null ) dependentDynamicLibraryArg.srcs = ImmutableList.of();
ProjectGeneratorTest.java,dependentDynamicLibraryArg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) dependentDynamicLibraryArg.frameworks = ImmutableSortedSet.of();
ProjectGeneratorTest.java,libraryArg.configs = ImmutableMap.of();,if (ImmutableMap != null ) libraryArg.configs = ImmutableMap.of();
ProjectGeneratorTest.java,libraryArg.srcs = ImmutableList.of();,if (ImmutableList != null ) libraryArg.srcs = ImmutableList.of();
ProjectGeneratorTest.java,libraryArg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) libraryArg.frameworks = ImmutableSortedSet.of();
ProjectGeneratorTest.java,libraryArg.configs = ImmutableMap.of();,if (ImmutableMap != null ) libraryArg.configs = ImmutableMap.of();
ProjectGeneratorTest.java,libraryArg.srcs = ImmutableList.of();,if (ImmutableList != null ) libraryArg.srcs = ImmutableList.of();
ProjectGeneratorTest.java,libraryArg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) libraryArg.frameworks = ImmutableSortedSet.of();
ProjectGeneratorTest.java,arg.configs = ImmutableMap.of();,if (ImmutableMap != null ) arg.configs = ImmutableMap.of();
ProjectGeneratorTest.java,arg.srcs = ImmutableList.of();,if (ImmutableList != null ) arg.srcs = ImmutableList.of();
ProjectGeneratorTest.java,arg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.frameworks = ImmutableSortedSet.of();
ProjectGeneratorTest.java,fooArg.configs = ImmutableMap.of();,if (ImmutableMap != null ) fooArg.configs = ImmutableMap.of();
ProjectGeneratorTest.java,fooArg.srcs = ImmutableList.of();,if (ImmutableList != null ) fooArg.srcs = ImmutableList.of();
ProjectGeneratorTest.java,fooArg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) fooArg.frameworks = ImmutableSortedSet.of();
ProjectGeneratorTest.java,barArg.configs = ImmutableMap.of();,if (ImmutableMap != null ) barArg.configs = ImmutableMap.of();
ProjectGeneratorTest.java,barArg.srcs = ImmutableList.of();,if (ImmutableList != null ) barArg.srcs = ImmutableList.of();
ProjectGeneratorTest.java,barArg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) barArg.frameworks = ImmutableSortedSet.of();
SchemeGeneratorTest.java,testDepArg.configs = ImmutableMap.of();,if (ImmutableMap != null ) testDepArg.configs = ImmutableMap.of();
SchemeGeneratorTest.java,testDepArg.srcs = ImmutableList.of();,if (ImmutableList != null ) testDepArg.srcs = ImmutableList.of();
SchemeGeneratorTest.java,testDepArg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) testDepArg.frameworks = ImmutableSortedSet.of();
SchemeGeneratorTest.java,libraryArg.configs = ImmutableMap.of();,if (ImmutableMap != null ) libraryArg.configs = ImmutableMap.of();
SchemeGeneratorTest.java,libraryArg.srcs = ImmutableList.of();,if (ImmutableList != null ) libraryArg.srcs = ImmutableList.of();
SchemeGeneratorTest.java,libraryArg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) libraryArg.frameworks = ImmutableSortedSet.of();
SchemeGeneratorTest.java,libraryArg.configs = ImmutableMap.of();,if (ImmutableMap != null ) libraryArg.configs = ImmutableMap.of();
SchemeGeneratorTest.java,libraryArg.srcs = ImmutableList.of();,if (ImmutableList != null ) libraryArg.srcs = ImmutableList.of();
SchemeGeneratorTest.java,libraryArg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) libraryArg.frameworks = ImmutableSortedSet.of();
JUnitRunner.java,TestSelectorList testSelectorList = TestSelectorList.empty();,if (TestSelectorList != null ) TestSelectorList testSelectorList = TestSelectorList.empty();
AuditOwnerCommand.java,Path projectRoot = getProjectFilesystem().getRootPath();,if (getProjectFilesystem() != null ) Path projectRoot = getProjectFilesystem().getRootPath();
BuildTarget.java,Flavor flavorName = flavor.get();,if (flavor != null ) Flavor flavorName = flavor.get();
JavaThriftLibraryDescription.java,Flavor flavor = params.getBuildTarget().getFlavor();,if (params != null ) Flavor flavor = params.getBuildTarget().getFlavor();
SchemeGenerator.java,rule = test.getTestBundle();,if (test != null ) rule = test.getTestBundle();
WorkspaceAndProjectGenerator.java,ImmutableSet<BuildRule> testRules = testRulesBuilder.build();,if (testRulesBuilder != null ) ImmutableSet<BuildRule> testRules = testRulesBuilder.build();
SchemeGeneratorTest.java,libraryArg.deps = Optional.absent();,if (Optional != null ) libraryArg.deps = Optional.absent();
ProjectGenerator.java,Iterable<BuildRule> allRules = partialGraph.getActionGraph().getNodes();,if (partialGraph != null ) Iterable<BuildRule> allRules = partialGraph.getActionGraph().getNodes();
PythonBinary.java,String name = modulePath.toString();,if (modulePath != null ) String name = modulePath.toString();
PythonLibrary.java,Path path = src.resolve();,if (src != null ) Path path = src.resolve();
ProjectGeneratorTest.java,IosBinaryDescription.Arg arg = iosBinaryDescription.createUnpopulatedConstructorArg();,if (iosBinaryDescription != null ) IosBinaryDescription.Arg arg = iosBinaryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
ProjectGeneratorTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
IosTest.java,contacts = Preconditions.checkNotNull(arg.contacts.get());,if (Preconditions != null ) contacts = Preconditions.checkNotNull(arg.contacts.get());
IosTest.java,labels = Preconditions.checkNotNull(arg.labels.get());,if (Preconditions != null ) labels = Preconditions.checkNotNull(arg.labels.get());
IosTest.java,sourceUnderTest = Preconditions.checkNotNull(arg.sourceUnderTest.get());,if (Preconditions != null ) sourceUnderTest = Preconditions.checkNotNull(arg.sourceUnderTest.get());
ProjectGeneratorTest.java,IosTestDescription.Arg arg = iosTestDescription.createUnpopulatedConstructorArg();,if (iosTestDescription != null ) IosTestDescription.Arg arg = iosTestDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,arg.testType = Optional.absent();,if (Optional != null ) arg.testType = Optional.absent();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
ProjectGeneratorTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,IosTestDescription.Arg arg = iosTestDescription.createUnpopulatedConstructorArg();,if (iosTestDescription != null ) IosTestDescription.Arg arg = iosTestDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,arg.testType = Optional.absent();,if (Optional != null ) arg.testType = Optional.absent();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
ProjectGeneratorTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,IosTestDescription.Arg arg = iosTestDescription.createUnpopulatedConstructorArg();,if (iosTestDescription != null ) IosTestDescription.Arg arg = iosTestDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,arg.testType = Optional.absent();,if (Optional != null ) arg.testType = Optional.absent();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
ProjectGeneratorTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,IosTestDescription.Arg arg = iosTestDescription.createUnpopulatedConstructorArg();,if (iosTestDescription != null ) IosTestDescription.Arg arg = iosTestDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,arg.testType = Optional.absent();,if (Optional != null ) arg.testType = Optional.absent();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
ProjectGeneratorTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,PBXFileReference productReference = target.getProductReference();,if (target != null ) PBXFileReference productReference = target.getProductReference();
ProjectGeneratorTest.java,IosTestDescription.Arg arg = iosTestDescription.createUnpopulatedConstructorArg();,if (iosTestDescription != null ) IosTestDescription.Arg arg = iosTestDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
ProjectGeneratorTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,PBXFileReference productReference = target.getProductReference();,if (target != null ) PBXFileReference productReference = target.getProductReference();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
ProjectGeneratorTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,IosTestDescription.Arg arg = iosTestDescription.createUnpopulatedConstructorArg();,if (iosTestDescription != null ) IosTestDescription.Arg arg = iosTestDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,arg.testType = Optional.absent();,if (Optional != null ) arg.testType = Optional.absent();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
ProjectGeneratorTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,arg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.frameworks = ImmutableSortedSet.of();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
ProjectGeneratorTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,PBXFileReference productReference = target.getProductReference();,if (target != null ) PBXFileReference productReference = target.getProductReference();
ProjectGeneratorTest.java,PBXBuildFile headerBuildFile = Iterables.getOnlyElement(headersBuildPhase.getFiles());,if (Iterables != null ) PBXBuildFile headerBuildFile = Iterables.getOnlyElement(headersBuildPhase.getFiles());
ProjectGeneratorTest.java,MacosxBinaryDescription.Arg arg = macosxBinaryDescription.createUnpopulatedConstructorArg();,if (macosxBinaryDescription != null ) MacosxBinaryDescription.Arg arg = macosxBinaryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
ProjectGeneratorTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,PBXBuildFile frameworkFile = Iterables.getOnlyElement(copyFrameworksBuildPhase.getFiles());,if (Iterables != null ) PBXBuildFile frameworkFile = Iterables.getOnlyElement(copyFrameworksBuildPhase.getFiles());
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
ProjectGeneratorTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,PBXFileReference productReference = target.getProductReference();,if (target != null ) PBXFileReference productReference = target.getProductReference();
ProjectGeneratorTest.java,IosBinaryDescription.Arg arg = iosBinaryDescription.createUnpopulatedConstructorArg();,if (iosBinaryDescription != null ) IosBinaryDescription.Arg arg = iosBinaryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,arg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.frameworks = ImmutableSortedSet.of();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
ProjectGeneratorTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
BuckPluginComponent.java,buckRunner = Optional.absent();,if (Optional != null ) buckRunner = Optional.absent();
BuckRunner.java,buckdPath = Optional.absent();,if (Optional != null ) buckdPath = Optional.absent();
BuckRunner.java,socket = Optional.absent();,if (Optional != null ) socket = Optional.absent();
BuckRunner.java,workingDirectory = new File(project.getBasePath());,if (File(project != null ) workingDirectory = new File(project.getBasePath());
BuckRunner.java,buckPath = buck.getAbsolutePath();,if (buck != null ) buckPath = buck.getAbsolutePath();
BuckRunner.java,buckdPath = Optional.of(buckd.getAbsolutePath());,if (Optional != null ) buckdPath = Optional.of(buckd.getAbsolutePath());
BuckRunner.java,int port = server.getLocalPort();,if (server != null ) int port = server.getLocalPort();
SocketClient.java,Event event = EventFactory.factory(json.getAsJsonObject());,if (EventFactory != null ) Event event = EventFactory.factory(json.getAsJsonObject());
TargetsCommand.java,JsonFactory factory = mapper.getJsonFactory();,if (mapper != null ) JsonFactory factory = mapper.getJsonFactory();
TargetsCommand.java,JsonParser parser = factory.createJsonParser(buckRunner.getStdout());,if (factory != null ) JsonParser parser = factory.createJsonParser(buckRunner.getStdout());
TestResultsAvailable.java,JsonObject testCaseObject = element.getAsJsonObject();,if (element != null ) JsonObject testCaseObject = element.getAsJsonObject();
TestResultsAvailable.java,ImmutableList<TestCase> testCases = testCasesBuilder.build();,if (testCasesBuilder != null ) ImmutableList<TestCase> testCases = testCasesBuilder.build();
TestResultsAvailable.java,JsonObject testResultObject = element.getAsJsonObject();,if (element != null ) JsonObject testResultObject = element.getAsJsonObject();
TestResultsAvailable.java,ImmutableList<TestResult> testResults = testResultsBuilder.build();,if (testResultsBuilder != null ) ImmutableList<TestResult> testResults = testResultsBuilder.build();
BuckProgressPanel.java,final ProgressNode node = event.createTreeNode();,if (event != null ) final ProgressNode node = event.createTreeNode();
BuckProgressPanel.java,RuleStart event = (RuleStart) item.getEvent();,if (item != null ) RuleStart event = (RuleStart) item.getEvent();
BuckProgressPanel.java,items = Lists.newArrayList();,if (Lists != null ) items = Lists.newArrayList();
BuckTargetsPanel.java,TreePath selected = tree.getSelectionPath();,if (tree != null ) TreePath selected = tree.getSelectionPath();
BuckTargetsPanel.java,TargetNode targetNode = (TargetNode) selected.getLastPathComponent();,if (selected != null ) TargetNode targetNode = (TargetNode) selected.getLastPathComponent();
BuckTargetsPanel.java,BuckTarget target = targetNode.getTarget();,if (targetNode != null ) BuckTarget target = targetNode.getTarget();
BuckTargetsPanel.java,TargetNode node = target.createTreeNode();,if (target != null ) TargetNode node = target.createTreeNode();
BuckUI.java,ToolWindowManager toolWindowManager = ToolWindowManager.getInstance(component.getProject());,if (ToolWindowManager != null ) ToolWindowManager toolWindowManager = ToolWindowManager.getInstance(component.getProject());
BuckUI.java,ToolWindowManager toolWindowManager = ToolWindowManager.getInstance(component.getProject());,if (ToolWindowManager != null ) ToolWindowManager toolWindowManager = ToolWindowManager.getInstance(component.getProject());
CxxBinaryRuleTest.java,private ExecutionContext executionContext = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) private ExecutionContext executionContext = TestExecutionContext.newInstance();
CxxBinaryRuleTest.java,CxxBinaryDescription.Arg arg = description.createUnpopulatedConstructorArg();,if (description != null ) CxxBinaryDescription.Arg arg = description.createUnpopulatedConstructorArg();
CxxBinaryRuleTest.java,CxxLibraryDescription.Arg arg = description.createUnpopulatedConstructorArg();,if (description != null ) CxxLibraryDescription.Arg arg = description.createUnpopulatedConstructorArg();
ConsoleLogLevelOverrider.java,this.originalConsoleLevel = Optional.absent();,if (Optional != null ) this.originalConsoleLevel = Optional.absent();
AndroidBinary.java,ImmutableSet<Path> secondaryDexDirectories = secondaryDexDirectoriesBuilder.build();,if (secondaryDexDirectoriesBuilder != null ) ImmutableSet<Path> secondaryDexDirectories = secondaryDexDirectoriesBuilder.build();
ZipDirectoryWithMaxDeflateStep.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
ZipDirectoryWithMaxDeflateStep.java,long fileLength = inputFile.length();,if (inputFile != null ) long fileLength = inputFile.length();
ZipDirectoryWithMaxDeflateStepTest.java,emptyTempDir = Files.createTempDir();,if (Files != null ) emptyTempDir = Files.createTempDir();
ZipDirectoryWithMaxDeflateStepTest.java,emptyOutputDir = Files.createTempDir();,if (Files != null ) emptyOutputDir = Files.createTempDir();
ZipDirectoryWithMaxDeflateStepTest.java,ExecutionContext executionContext = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext executionContext = TestExecutionContext.newInstance();
ZipDirectoryWithMaxDeflateStepTest.java,ExecutionContext executionContext = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext executionContext = TestExecutionContext.newInstance();
Parser.java,this.memoizedTargetNodes = Maps.newHashMap();,if (Maps != null ) this.memoizedTargetNodes = Maps.newHashMap();
Parser.java,this.parsedBuildFiles = ArrayListMultimap.create();,if (ArrayListMultimap != null ) this.parsedBuildFiles = ArrayListMultimap.create();
Parser.java,this.targetsToFile = Maps.newHashMap();,if (Maps != null ) this.targetsToFile = Maps.newHashMap();
Parser.java,BuildTarget unflavored = buildTarget.getUnflavoredTarget();,if (buildTarget != null ) BuildTarget unflavored = buildTarget.getUnflavoredTarget();
AppleBuildRules.java,Optional<AppleBundleExtension> extension = bundle.getExtensionValue();,if (bundle != null ) Optional<AppleBundleExtension> extension = bundle.getExtensionValue();
ProjectGenerator.java,return node == bundle.getBinary();,if (bundle != null ) return node == bundle.getBinary();
ProjectGenerator.java,deps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) deps = ImmutableSortedSet.of();
ProjectGenerator.java,deps = node.getDeps();,if (node != null ) deps = node.getDeps();
ProjectGenerator.java,deps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) deps = ImmutableSortedSet.of();
ProjectGenerator.java,deps = node.getDeps();,if (node != null ) deps = node.getDeps();
ProjectGenerator.java,deps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) deps = ImmutableSortedSet.of();
ProjectGenerator.java,deps = node.getDeps();,if (node != null ) deps = node.getDeps();
ProjectGenerator.java,deps = node.getDeps();,if (node != null ) deps = node.getDeps();
ProjectGenerator.java,deps = node.getDeps();,if (node != null ) deps = node.getDeps();
SchemeGenerator.java,"Element buildActionElem = serializeBuildAction(doc, scheme.getBuildAction());","if (scheme != null ) Element buildActionElem = serializeBuildAction(doc, scheme.getBuildAction());"
SchemeGenerator.java,"Element testActionElem = serializeTestAction(doc, scheme.getTestAction());","if (scheme != null ) Element testActionElem = serializeTestAction(doc, scheme.getTestAction());"
SchemeGenerator.java,"Element launchActionElem = serializeLaunchAction(doc, scheme.getLaunchAction());","if (scheme != null ) Element launchActionElem = serializeLaunchAction(doc, scheme.getLaunchAction());"
SchemeGenerator.java,"Element profileActionElem = serializeProfileAction(doc, scheme.getProfileAction());","if (scheme != null ) Element profileActionElem = serializeProfileAction(doc, scheme.getProfileAction());"
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();,if (iosLibraryDescription != null ) AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();,if (iosLibraryDescription != null ) AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();,if (iosLibraryDescription != null ) AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();,if (iosLibraryDescription != null ) AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();,if (iosLibraryDescription != null ) AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();,if (iosLibraryDescription != null ) AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();,if (iosLibraryDescription != null ) AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();,if (iosLibraryDescription != null ) AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();,if (iosLibraryDescription != null ) AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();,if (iosLibraryDescription != null ) AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();,if (iosLibraryDescription != null ) AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();,if (iosLibraryDescription != null ) AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();,if (iosLibraryDescription != null ) AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();,if (iosLibraryDescription != null ) AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();,if (iosLibraryDescription != null ) AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();,if (iosLibraryDescription != null ) AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();
ProjectGenerator.java,String productName = getProductName(rule.getBuildTarget());,if (getProductName(rule != null ) String productName = getProductName(rule.getBuildTarget());
ProjectGenerator.java,HeaderMap.Builder targetFlatMapBuilder = HeaderMap.builder();,if (HeaderMap != null ) HeaderMap.Builder targetFlatMapBuilder = HeaderMap.builder();
SchemeGenerator.java,buildRuleToTargetMapBuilder = ImmutableMap.builder();,if (ImmutableMap != null ) buildRuleToTargetMapBuilder = ImmutableMap.builder();
SchemeGenerator.java,targetToProjectPathMapBuilder = ImmutableMap.builder();,if (ImmutableMap != null ) targetToProjectPathMapBuilder = ImmutableMap.builder();
WorkspaceAndProjectGenerator.java,BuildRule actualTargetRule = workspaceBuildable.getSrcTarget();,if (workspaceBuildable != null ) BuildRule actualTargetRule = workspaceBuildable.getSrcTarget();
ProjectGenerator.java,Optional<Path> infoPlistOptional = buildable.getInfoPlist();,if (buildable != null ) Optional<Path> infoPlistOptional = buildable.getInfoPlist();
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = macosxBinaryDescription.createUnpopulatedConstructorArg();,if (macosxBinaryDescription != null ) AppleNativeTargetDescriptionArg arg = macosxBinaryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = iosBinaryDescription.createUnpopulatedConstructorArg();,if (iosBinaryDescription != null ) AppleNativeTargetDescriptionArg arg = iosBinaryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = iosBinaryDescription.createUnpopulatedConstructorArg();,if (iosBinaryDescription != null ) AppleNativeTargetDescriptionArg arg = iosBinaryDescription.createUnpopulatedConstructorArg();
ProjectGenerator.java,BuildTarget buildTarget = rule.getBuildTarget();,if (rule != null ) BuildTarget buildTarget = rule.getBuildTarget();
ProjectGenerator.java,String productName = getProductName(rule.getBuildTarget());,if (getProductName(rule != null ) String productName = getProductName(rule.getBuildTarget());
AppleResource.java,this.outputDirectory = baseOutputDirectory.resolve(outputPathSubdirectory.get());,if (baseOutputDirectory != null ) this.outputDirectory = baseOutputDirectory.resolve(outputPathSubdirectory.get());
AppleResourceTest.java,args.dirs = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) args.dirs = ImmutableSortedSet.of();
AppleResourceTest.java,args.files = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) args.files = ImmutableSortedSet.of();
AppleResourceTest.java,args.variants = Optional.absent();,if (Optional != null ) args.variants = Optional.absent();
AppleResourceTest.java,args.dirs = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) args.dirs = ImmutableSortedSet.of();
AppleResourceTest.java,args.variants = Optional.absent();,if (Optional != null ) args.variants = Optional.absent();
ProjectGenerator.java,HeaderMap.Builder builder = HeaderMap.builder();,if (HeaderMap != null ) HeaderMap.Builder builder = HeaderMap.builder();
ProjectGenerator.java,HeaderMap headerMap = builder.build();,if (builder != null ) HeaderMap headerMap = builder.build();
ProjectGeneratorTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
TargetsCommandOptions.java,Path canonicalFullPath = Paths.get(filePath).normalize();,if (Paths != null ) Path canonicalFullPath = Paths.get(filePath).normalize();
ProjectCommand.java,ImmutableSet<Path> generatedProjectPaths = projectGenerator.generateProjects();,if (projectGenerator != null ) ImmutableSet<Path> generatedProjectPaths = projectGenerator.generateProjects();
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();,if (iosLibraryDescription != null ) AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,arg.configs = ImmutableMap.of();,if (ImmutableMap != null ) arg.configs = ImmutableMap.of();
ProjectGeneratorTest.java,arg.srcs = ImmutableList.of();,if (ImmutableList != null ) arg.srcs = ImmutableList.of();
ProjectGeneratorTest.java,arg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.frameworks = ImmutableSortedSet.of();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
ProjectGeneratorTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();,if (iosLibraryDescription != null ) AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,arg.configs = ImmutableMap.of();,if (ImmutableMap != null ) arg.configs = ImmutableMap.of();
ProjectGeneratorTest.java,arg.srcs = ImmutableList.of();,if (ImmutableList != null ) arg.srcs = ImmutableList.of();
ProjectGeneratorTest.java,arg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.frameworks = ImmutableSortedSet.of();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
WorkspaceGenerator.java,projects = ArrayListMultimap.create();,if (ArrayListMultimap != null ) projects = ArrayListMultimap.create();
WorkspaceGenerator.java,Element targetElement = doc.getDocumentElement();,if (doc != null ) Element targetElement = doc.getDocumentElement();
Parser.java,buildFileTree = supplier.getInput();,if (supplier != null ) buildFileTree = supplier.getInput();
ProjectGenerator.java,String unsignedXmlProject = rootObject.toXMLPropertyList();,if (rootObject != null ) String unsignedXmlProject = rootObject.toXMLPropertyList();
ProjectGenerator.java,contentsToWrite = signedXmlProject.get();,if (signedXmlProject != null ) contentsToWrite = signedXmlProject.get();
SourceSigner.java,pos = matcher.end();,if (matcher != null ) pos = matcher.end();
ProjectGeneratorTest.java,AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();,if (iosLibraryDescription != null ) AppleNativeTargetDescriptionArg arg = iosLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,arg.srcs = ImmutableList.of();,if (ImmutableList != null ) arg.srcs = ImmutableList.of();
ProjectGeneratorTest.java,arg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.frameworks = ImmutableSortedSet.of();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
ProjectGeneratorTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
ProjectGeneratorTest.java,arg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) arg.useBuckHeaderMaps = Optional.absent();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
AuditOwnerCommand.java,dir = dir.getParentFile();,if (dir != null ) dir = dir.getParentFile();
AuditOwnerCommand.java,File projectRoot = getProjectFilesystem().getProjectRoot();,if (getProjectFilesystem() != null ) File projectRoot = getProjectFilesystem().getProjectRoot();
AuditOwnerCommand.java,dir = dir.getParentFile();,if (dir != null ) dir = dir.getParentFile();
AuditRulesCommand.java,Path root = projectFilesystem.getProjectRoot().toPath();,if (projectFilesystem != null ) Path root = projectFilesystem.getProjectRoot().toPath();
Main.java,File parserRoot = daemon.getParser().getProjectRoot();,if (daemon != null ) File parserRoot = daemon.getParser().getProjectRoot();
TargetsCommandOptions.java,String canonicalFullPath = new File(filePath).getCanonicalPath();,if (File(filePath) != null ) String canonicalFullPath = new File(filePath).getCanonicalPath();
ProjectBuildFileParser.java,this.projectRoot = projectFilesystem.getProjectRoot();,if (projectFilesystem != null ) this.projectRoot = projectFilesystem.getProjectRoot();
ProjectBuildFileParser.java,ConstructorArgMarshaller inspector = new ConstructorArgMarshaller(projectRoot.toPath());,if (ConstructorArgMarshaller(projectRoot != null ) ConstructorArgMarshaller inspector = new ConstructorArgMarshaller(projectRoot.toPath());
Parser.java,Set<File> buildTargetFiles = Sets.newHashSet();,if (Sets != null ) Set<File> buildTargetFiles = Sets.newHashSet();
Parser.java,File buildFile = repository.getAbsolutePathToBuildFile(buildTarget).toFile();,if (repository != null ) File buildFile = repository.getAbsolutePathToBuildFile(buildTarget).toFile();
Parser.java,File buildFile = repository.getAbsolutePathToBuildFile(buildTarget).toFile();,if (repository != null ) File buildFile = repository.getAbsolutePathToBuildFile(buildTarget).toFile();
DefaultFileHashCacheTest.java,Path path = file.toPath();,if (file != null ) Path path = file.toPath();
DefaultFileHashCacheTest.java,Path path = file.toPath();,if (file != null ) Path path = file.toPath();
DefaultFileHashCacheTest.java,Path path = file.toPath();,if (file != null ) Path path = file.toPath();
SchemeGenerator.java,Set<BuildRule> nonTestRules = Sets.newLinkedHashSet();,if (Sets != null ) Set<BuildRule> nonTestRules = Sets.newLinkedHashSet();
SchemeGenerator.java,Set<BuildRule> testRules = Sets.newLinkedHashSet();,if (Sets != null ) Set<BuildRule> testRules = Sets.newLinkedHashSet();
WorkspaceAndProjectGenerator.java,Iterable<BuildRule> allRules = allRulesBuilder.build();,if (allRulesBuilder != null ) Iterable<BuildRule> allRules = allRulesBuilder.build();
ProjectCommand.java,BuildRule projectRule = projectConfig.getProjectRule();,if (projectConfig != null ) BuildRule projectRule = projectConfig.getProjectRule();
ProjectCommand.java,String targetName = buildTarget.getFullyQualifiedName();,if (buildTarget != null ) String targetName = buildTarget.getFullyQualifiedName();
ProjectCommand.java,ImmutableSet<String> argumentsAsBuildTargets = options.getArgumentsFormattedAsBuildTargets();,if (options != null ) ImmutableSet<String> argumentsAsBuildTargets = options.getArgumentsFormattedAsBuildTargets();
Project.java,this.buildFileTree = new InMemoryBuildFileTree(partialGraph.getTargets());,if (InMemoryBuildFileTree(partialGraph != null ) this.buildFileTree = new InMemoryBuildFileTree(partialGraph.getTargets());
ProjectCommandTest.java,libFooArg.configs = ImmutableMap.of();,if (ImmutableMap != null ) libFooArg.configs = ImmutableMap.of();
ProjectCommandTest.java,libFooArg.srcs = ImmutableList.of();,if (ImmutableList != null ) libFooArg.srcs = ImmutableList.of();
ProjectCommandTest.java,libFooArg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) libFooArg.frameworks = ImmutableSortedSet.of();
ProjectCommandTest.java,libFooArg.deps = Optional.absent();,if (Optional != null ) libFooArg.deps = Optional.absent();
ProjectCommandTest.java,libFooArg.gid = Optional.absent();,if (Optional != null ) libFooArg.gid = Optional.absent();
ProjectCommandTest.java,libFooArg.headerPathPrefix = Optional.absent();,if (Optional != null ) libFooArg.headerPathPrefix = Optional.absent();
ProjectCommandTest.java,libFooArg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) libFooArg.useBuckHeaderMaps = Optional.absent();
ProjectCommandTest.java,libBarArg.configs = ImmutableMap.of();,if (ImmutableMap != null ) libBarArg.configs = ImmutableMap.of();
ProjectCommandTest.java,libBarArg.srcs = ImmutableList.of();,if (ImmutableList != null ) libBarArg.srcs = ImmutableList.of();
ProjectCommandTest.java,libBarArg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) libBarArg.frameworks = ImmutableSortedSet.of();
ProjectCommandTest.java,libBarArg.deps = Optional.absent();,if (Optional != null ) libBarArg.deps = Optional.absent();
ProjectCommandTest.java,libBarArg.gid = Optional.absent();,if (Optional != null ) libBarArg.gid = Optional.absent();
ProjectCommandTest.java,libBarArg.headerPathPrefix = Optional.absent();,if (Optional != null ) libBarArg.headerPathPrefix = Optional.absent();
ProjectCommandTest.java,libBarArg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) libBarArg.useBuckHeaderMaps = Optional.absent();
ProjectCommandTest.java,libFooArg.configs = ImmutableMap.of();,if (ImmutableMap != null ) libFooArg.configs = ImmutableMap.of();
ProjectCommandTest.java,libFooArg.srcs = ImmutableList.of();,if (ImmutableList != null ) libFooArg.srcs = ImmutableList.of();
ProjectCommandTest.java,libFooArg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) libFooArg.frameworks = ImmutableSortedSet.of();
ProjectCommandTest.java,libFooArg.deps = Optional.absent();,if (Optional != null ) libFooArg.deps = Optional.absent();
ProjectCommandTest.java,libFooArg.gid = Optional.absent();,if (Optional != null ) libFooArg.gid = Optional.absent();
ProjectCommandTest.java,libFooArg.headerPathPrefix = Optional.absent();,if (Optional != null ) libFooArg.headerPathPrefix = Optional.absent();
ProjectCommandTest.java,libFooArg.useBuckHeaderMaps = Optional.absent();,if (Optional != null ) libFooArg.useBuckHeaderMaps = Optional.absent();
AuditClasspathCommand.java,List<BuildTarget> targets = partialGraph.getTargets();,if (partialGraph != null ) List<BuildTarget> targets = partialGraph.getTargets();
AuditClasspathCommand.java,List<BuildTarget> targets = partialGraph.getTargets();,if (partialGraph != null ) List<BuildTarget> targets = partialGraph.getTargets();
ProjectCommand.java,List<String> argumentsAsBuildTargets = options.getArgumentsFormattedAsBuildTargets();,if (options != null ) List<String> argumentsAsBuildTargets = options.getArgumentsFormattedAsBuildTargets();
ProjectCommand.java,List<String> argumentsAsBuildTargets = options.getArgumentsFormattedAsBuildTargets();,if (options != null ) List<String> argumentsAsBuildTargets = options.getArgumentsFormattedAsBuildTargets();
TestCommand.java,ImmutableList<BuildTarget> emptyTargetsList = ImmutableList.of();,if (ImmutableList != null ) ImmutableList<BuildTarget> emptyTargetsList = ImmutableList.of();
TestCommand.java,List<String> allTargets = options.getArgumentsFormattedAsBuildTargets();,if (options != null ) List<String> allTargets = options.getArgumentsFormattedAsBuildTargets();
Parser.java,List<BuildTarget> matchingTargets = Lists.newArrayList();,if (Lists != null ) List<BuildTarget> matchingTargets = Lists.newArrayList();
InMemoryBuildFileTreeTest.java,List<BuildTarget> targets = Lists.newArrayList();,if (Lists != null ) List<BuildTarget> targets = Lists.newArrayList();
WorkspaceAndProjectGenerator.java,String targetName = rule.getBuildTarget().getShortName();,if (rule != null ) String targetName = rule.getBuildTarget().getShortName();
ProjectGeneratorTest.java,arg.headerPathPrefix = Optional.absent();,if (Optional != null ) arg.headerPathPrefix = Optional.absent();
WorkspaceAndProjectGenerator.java,Iterable<BuildRule> allRules = partialGraph.getActionGraph().getNodes();,if (partialGraph != null ) Iterable<BuildRule> allRules = partialGraph.getActionGraph().getNodes();
WatchmanWatcher.java,File file = new File(jsonParser.nextTextValue());,if (File(jsonParser != null ) File file = new File(jsonParser.nextTextValue());
BuildContextTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
DefaultFileHashCache.java,Path path = (Path) event.context();,if (event != null ) Path path = (Path) event.context();
AgentMain.java,Socket connectionSocket = serverSocket.accept();,if (serverSocket != null ) Socket connectionSocket = serverSocket.accept();
AgentMain.java,InputStream input = connectionSocket.getInputStream();,if (connectionSocket != null ) InputStream input = connectionSocket.getInputStream();
RuleDependencyFinder.java,ImmutableSet<BuildRule> buildRules = gatherTransitiveDependencies(initialRulesBuilder.build());,if (gatherTransitiveDependencies(initialRulesBuilder != null ) ImmutableSet<BuildRule> buildRules = gatherTransitiveDependencies(initialRulesBuilder.build());
TestCommand.java,RawRulePredicate predicate = RawRulePredicates.isTestRule();,if (RawRulePredicates != null ) RawRulePredicate predicate = RawRulePredicates.isTestRule();
PartialGraph.java,ActionGraph testActionGraph = testGraph.getActionGraph();,if (testGraph != null ) ActionGraph testActionGraph = testGraph.getActionGraph();
JavacInMemoryStep.java,boolean isSuccess = compilationTask.call();,if (compilationTask != null ) boolean isSuccess = compilationTask.call();
ProjectBuildFileParser.java,pathToBuckPy = Optional.of(buckDotPy.normalize());,if (Optional != null ) pathToBuckPy = Optional.of(buckDotPy.normalize());
Parser.java,File buildFile = buildTarget.getBuildFile(repository.getFilesystem());,if (buildTarget != null ) File buildFile = buildTarget.getBuildFile(repository.getFilesystem());
Parser.java,File buildFile = buildTarget.getBuildFile(repository.getFilesystem());,if (buildTarget != null ) File buildFile = buildTarget.getBuildFile(repository.getFilesystem());
TargetsCommandTest.java,Repository repository = new TestRepositoryBuilder().build();,if (TestRepositoryBuilder() != null ) Repository repository = new TestRepositoryBuilder().build();
AuditOwnerCommand.java,Set<BuildRule> sortedRules = report.owners.keySet();,if (report != null ) Set<BuildRule> sortedRules = report.owners.keySet();
AuditOwnerCommand.java,Set<BuildRule> sortedRules = report.owners.keySet();,if (report != null ) Set<BuildRule> sortedRules = report.owners.keySet();
TargetNode.java,this.pathsReferenced = ImmutableSet.of();,if (ImmutableSet != null ) this.pathsReferenced = ImmutableSet.of();
CxxBinaryRuleTest.java,CppBinaryDescription.Arg arg = description.createUnpopulatedConstructorArg();,if (description != null ) CppBinaryDescription.Arg arg = description.createUnpopulatedConstructorArg();
CxxBinaryRuleTest.java,CppLibraryDescription.Arg arg = description.createUnpopulatedConstructorArg();,if (description != null ) CppLibraryDescription.Arg arg = description.createUnpopulatedConstructorArg();
BuckEventBus.java,long nanos = clock.nanoTime();,if (clock != null ) long nanos = clock.nanoTime();
WatchmanWatcher.java,JsonParser jsonParser = jsonFactory.createJsonParser(watchmanProcess.getInputStream());,if (jsonFactory != null ) JsonParser jsonParser = jsonFactory.createJsonParser(watchmanProcess.getInputStream());
ProjectGeneratorTest.java,arg.sourceUnderTest = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.sourceUnderTest = ImmutableSortedSet.of();
ProjectGeneratorTest.java,arg.sourceUnderTest = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.sourceUnderTest = ImmutableSortedSet.of();
ProjectGeneratorTest.java,arg.sourceUnderTest = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.sourceUnderTest = ImmutableSortedSet.of();
ProjectGeneratorTest.java,arg.sourceUnderTest = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.sourceUnderTest = ImmutableSortedSet.of();
ProjectGeneratorTest.java,arg.sourceUnderTest = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.sourceUnderTest = ImmutableSortedSet.of();
ProjectGeneratorTest.java,arg.sourceUnderTest = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.sourceUnderTest = ImmutableSortedSet.of();
ProjectGeneratorTest.java,IosTestDescription.Arg arg = iosTestDescription.createUnpopulatedConstructorArg();,if (iosTestDescription != null ) IosTestDescription.Arg arg = iosTestDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,arg.configs = ImmutableMap.of();,if (ImmutableMap != null ) arg.configs = ImmutableMap.of();
ProjectGeneratorTest.java,arg.frameworks = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.frameworks = ImmutableSortedSet.of();
ProjectGeneratorTest.java,arg.srcs = ImmutableList.of();,if (ImmutableList != null ) arg.srcs = ImmutableList.of();
ProjectGeneratorTest.java,arg.testType = Optional.absent();,if (Optional != null ) arg.testType = Optional.absent();
ProjectGeneratorTest.java,arg.deps = Optional.absent();,if (Optional != null ) arg.deps = Optional.absent();
ProjectGeneratorTest.java,arg.gid = Optional.absent();,if (Optional != null ) arg.gid = Optional.absent();
ProjectGeneratorTestUtils.java,value = Optional.absent();,if (Optional != null ) value = Optional.absent();
BuildTargetParser.java,Optional<String> repoName = Optional.absent();,if (Optional != null ) Optional<String> repoName = Optional.absent();
Main.java,ImmutableList<File> configFiles = configFileBuilder.build();,if (configFileBuilder != null ) ImmutableList<File> configFiles = configFileBuilder.build();
DaemonIntegrationTest.java,KnownBuildRuleTypes knownBuildRuleTypes = KnownBuildRuleTypes.builder().build();,if (KnownBuildRuleTypes != null ) KnownBuildRuleTypes knownBuildRuleTypes = KnownBuildRuleTypes.builder().build();
DummyRDotJava.java,Set<SourcePath> javaSourceFilePaths = Sets.newHashSet();,if (Sets != null ) Set<SourcePath> javaSourceFilePaths = Sets.newHashSet();
DummyRDotJava.java,String rDotJavaPackage = res.getRDotJavaPackage();,if (res != null ) String rDotJavaPackage = res.getRDotJavaPackage();
MergeAndroidResourcesStep.java,boolean isMatch = matcher.matches();,if (matcher != null ) boolean isMatch = matcher.matches();
UberRDotJava.java,Set<SourcePath> javaSourceFilePaths = Sets.newHashSet();,if (Sets != null ) Set<SourcePath> javaSourceFilePaths = Sets.newHashSet();
MergeAndroidResourcesStepTest.java,Iterator<RDotTxtEntry> iter = resources.iterator();,if (resources != null ) Iterator<RDotTxtEntry> iter = resources.iterator();
LogFormatter.java,int tid = record.getThreadID();,if (record != null ) int tid = record.getThreadID();
TestCommand.java,Path pathToOutput = path.getPathToOutputFile();,if (path != null ) Path pathToOutput = path.getPathToOutputFile();
GenerateCodeCoverageReportStepTest.java,List<String> expectedShellCommand = shellCommandBuilder.build();,if (shellCommandBuilder != null ) List<String> expectedShellCommand = shellCommandBuilder.build();
ReportGenerator.java,PackageItem packageItem = (PackageItem) item.getParent();,if (item != null ) PackageItem packageItem = (PackageItem) item.getParent();
ReportGenerator.java,String srcAbsolutePath = src.getAbsolutePath();,if (src != null ) String srcAbsolutePath = src.getAbsolutePath();
ReportGenerator.java,"String projectDirectory = new File(""."").getAbsolutePath();","if (File("" != null ) String projectDirectory = new File(""."").getAbsolutePath();"
ReportGenerator.java,String relativePath = srcAbsolutePath.substring(projectDirectory.length());,if (srcAbsolutePath != null ) String relativePath = srcAbsolutePath.substring(projectDirectory.length());
PathTypeCoercer.java,normalizedPath = pathRelativeToProjectRoot.resolve(path).normalize();,if (pathRelativeToProjectRoot != null ) normalizedPath = pathRelativeToProjectRoot.resolve(path).normalize();
GenruleBuilder.java,args.srcs = Optional.of(srcs.build());,if (Optional != null ) args.srcs = Optional.of(srcs.build());
Project.java,this.binaryJar = prebuiltJar.getBinaryJar().toString();,if (prebuiltJar != null ) this.binaryJar = prebuiltJar.getBinaryJar().toString();
AndroidBinaryGraphEnhancer.java,String javaPackage = entry.getKey();,if (entry != null ) String javaPackage = entry.getKey();
BuildConfigs.java,String key = entry.getKey();,if (entry != null ) String key = entry.getKey();
BuildConfigs.java,String key = entry.getKey();,if (entry != null ) String key = entry.getKey();
BuildConfigs.java,String name = entry.getKey();,if (entry != null ) String name = entry.getKey();
BuildConfigs.java,Object value = entry.getValue();,if (entry != null ) Object value = entry.getValue();
MergeAndroidResourcesStepTest.java,Iterator<Resource> iter = resources.iterator();,if (resources != null ) Iterator<Resource> iter = resources.iterator();
Main.java,boolean commandSemaphoreAcquired = commandSemaphore.tryAcquire();,if (commandSemaphore != null ) boolean commandSemaphoreAcquired = commandSemaphore.tryAcquire();
DaemonIntegrationTest.java,SecurityManager originalSecurityManager = System.getSecurityManager();,if (System != null ) SecurityManager originalSecurityManager = System.getSecurityManager();
SimpleConsoleEventBusListener.java,this.testFormatter = new TestResultFormatter(console.getAnsi());,if (TestResultFormatter(console != null ) this.testFormatter = new TestResultFormatter(console.getAnsi());
SuperConsoleEventBusListener.java,this.testFormatter = new TestResultFormatter(console.getAnsi());,if (TestResultFormatter(console != null ) this.testFormatter = new TestResultFormatter(console.getAnsi());
BuildFileToJsonParser.java,JsonPrimitive primitive = json.getAsJsonPrimitive();,if (json != null ) JsonPrimitive primitive = json.getAsJsonPrimitive();
BuildFileToJsonParser.java,Number number = primitive.getAsNumber();,if (primitive != null ) Number number = primitive.getAsNumber();
BuildFileToJsonParser.java,JsonArray array = json.getAsJsonArray();,if (json != null ) JsonArray array = json.getAsJsonArray();
BuildFileToJsonParser.java,List<Object> out = Lists.newArrayListWithCapacity(array.size());,if (Lists != null ) List<Object> out = Lists.newArrayListWithCapacity(array.size());
BuckConfig.java,String basePath = buildTarget.getBasePath();,if (buildTarget != null ) String basePath = buildTarget.getBasePath();
Project.java,final String basePathForRule = rule.getBuildTarget().getBasePath();,if (rule != null ) final String basePathForRule = rule.getBuildTarget().getBasePath();
Project.java,String basePath = rule.getBuildTarget().getBasePath();,if (rule != null ) String basePath = rule.getBuildTarget().getBasePath();
Project.java,name = rule.getBuildTarget().getBasePath();,if (rule != null ) name = rule.getBuildTarget().getBasePath();
Project.java,String directoryPath = target.getBasePath();,if (target != null ) String directoryPath = target.getBasePath();
FilesystemBackedBuildFileTree.java,final Path basePath = Paths.get(target.getBasePath());,if (Paths != null ) final Path basePath = Paths.get(target.getBasePath());
GenruleTest.java,String contextBasePath = javaBinary.getBuildTarget().getBasePath();,if (javaBinary != null ) String contextBasePath = javaBinary.getBuildTarget().getBasePath();
AndroidTransitiveDependencyGraph.java,Path manifestFile = androidRule.getManifestFile();,if (androidRule != null ) Path manifestFile = androidRule.getManifestFile();
WatchServiceWatcher.java,Path normalizedPath = path.normalize();,if (path != null ) Path normalizedPath = path.normalize();
SchemeGenerator.java,XCScheme.TestAction testAction = new XCScheme.TestAction();,if (XCScheme != null ) XCScheme.TestAction testAction = new XCScheme.TestAction();
AndroidResourceDescription.java,ProjectFilesystem filesystem = params.getProjectFilesystem();,if (params != null ) ProjectFilesystem filesystem = params.getProjectFilesystem();
GenRDotJavaStep.java,File tmpDir = Files.createTempDir();,if (Files != null ) File tmpDir = Files.createTempDir();
GenRDotJavaStep.java,AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget();,if (context != null ) AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget();
ProjectCommand.java,targets = targetsBuilder.build();,if (targetsBuilder != null ) targets = targetsBuilder.build();
AbstractBuildRule.java,this.visibilityPatterns = buildRuleParams.getVisibilityPatterns();,if (buildRuleParams != null ) this.visibilityPatterns = buildRuleParams.getVisibilityPatterns();
LogConfigFilesWatcher.java,Path path = (Path) event.context();,if (event != null ) Path path = (Path) event.context();
BuildCommand.java,Verbosity verbosity = console.getVerbosity();,if (console != null ) Verbosity verbosity = console.getVerbosity();
UninstallCommand.java,Verbosity verbosity = console.getVerbosity();,if (console != null ) Verbosity verbosity = console.getVerbosity();
ProjectGenerator.java,ShellStep genruleStep = rule.createGenruleStep();,if (rule != null ) ShellStep genruleStep = rule.createGenruleStep();
ProjectGenerator.java,Optional<Path> infoPlistOptional = buildable.getInfoPlist();,if (buildable != null ) Optional<Path> infoPlistOptional = buildable.getInfoPlist();
ProjectGenerator.java,Path infoPlistPath = repoRootRelativeToOutputDirectory.resolve(infoPlistOptional.get());,if (repoRootRelativeToOutputDirectory != null ) Path infoPlistPath = repoRootRelativeToOutputDirectory.resolve(infoPlistOptional.get());
ProjectGenerator.java,Optional<Path> infoPlistOptional = buildable.getInfoPlist();,if (buildable != null ) Optional<Path> infoPlistOptional = buildable.getInfoPlist();
ProjectGenerator.java,Path infoPlistPath = repoRootRelativeToOutputDirectory.resolve(infoPlistOptional.get());,if (repoRootRelativeToOutputDirectory != null ) Path infoPlistPath = repoRootRelativeToOutputDirectory.resolve(infoPlistOptional.get());
ProjectGenerator.java,String productName = getProductName(rule.getBuildTarget());,if (getProductName(rule != null ) String productName = getProductName(rule.getBuildTarget());
ProjectGenerator.java,Path infoPlistPath = repoRootRelativeToOutputDirectory.resolve(buildable.getInfoPlist());,if (repoRootRelativeToOutputDirectory != null ) Path infoPlistPath = repoRootRelativeToOutputDirectory.resolve(buildable.getInfoPlist());
ProjectGenerator.java,Path infoPlistPath = repoRootRelativeToOutputDirectory.resolve(buildable.getInfoPlist());,if (repoRootRelativeToOutputDirectory != null ) Path infoPlistPath = repoRootRelativeToOutputDirectory.resolve(buildable.getInfoPlist());
IosLibraryTest.java,IosLibraryDescription.Arg arg = description.createUnpopulatedConstructorArg();,if (description != null ) IosLibraryDescription.Arg arg = description.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,IosLibraryDescription.Arg arg = iosLibraryDescription.createUnpopulatedConstructorArg();,if (iosLibraryDescription != null ) IosLibraryDescription.Arg arg = iosLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,IosLibraryDescription.Arg arg = iosLibraryDescription.createUnpopulatedConstructorArg();,if (iosLibraryDescription != null ) IosLibraryDescription.Arg arg = iosLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,IosLibraryDescription.Arg arg = iosLibraryDescription.createUnpopulatedConstructorArg();,if (iosLibraryDescription != null ) IosLibraryDescription.Arg arg = iosLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,MacosxBinaryDescription.Arg arg = macosxBinaryDescription.createUnpopulatedConstructorArg();,if (macosxBinaryDescription != null ) MacosxBinaryDescription.Arg arg = macosxBinaryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,IosLibraryDescription.Arg arg = iosLibraryDescription.createUnpopulatedConstructorArg();,if (iosLibraryDescription != null ) IosLibraryDescription.Arg arg = iosLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,IosBinaryDescription.Arg arg = iosBinaryDescription.createUnpopulatedConstructorArg();,if (iosBinaryDescription != null ) IosBinaryDescription.Arg arg = iosBinaryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,IosLibraryDescription.Arg arg = iosLibraryDescription.createUnpopulatedConstructorArg();,if (iosLibraryDescription != null ) IosLibraryDescription.Arg arg = iosLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,IosLibraryDescription.Arg arg = iosLibraryDescription.createUnpopulatedConstructorArg();,if (iosLibraryDescription != null ) IosLibraryDescription.Arg arg = iosLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,IosLibraryDescription.Arg arg = iosLibraryDescription.createUnpopulatedConstructorArg();,if (iosLibraryDescription != null ) IosLibraryDescription.Arg arg = iosLibraryDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,IosLibraryDescription.Arg arg = iosLibraryDescription.createUnpopulatedConstructorArg();,if (iosLibraryDescription != null ) IosLibraryDescription.Arg arg = iosLibraryDescription.createUnpopulatedConstructorArg();
AndroidBinaryGraphEnhancerTest.java,BuildRuleParams originalParams = new FakeBuildRuleParamsBuilder(apkTarget).build();,if (FakeBuildRuleParamsBuilder(apkTarget) != null ) BuildRuleParams originalParams = new FakeBuildRuleParamsBuilder(apkTarget).build();
Parser.java,buildFileTree = supplier.get();,if (supplier != null ) buildFileTree = supplier.get();
ClasspathTraversalTest.java,contents = new FileLikeCharSource(fileLike).read();,if (FileLikeCharSource(fileLike) != null ) contents = new FileLikeCharSource(fileLike).read();
Parser.java,buildFileTree = supplier.getInput();,if (supplier != null ) buildFileTree = supplier.getInput();
PrintHeaderMap.java,FileChannel fileChannel = inputStream.getChannel();,if (inputStream != null ) FileChannel fileChannel = inputStream.getChannel();
WatchmanWatcher.java,JsonParser jsonParser = jsonFactory.createJsonParser(watchmanProcess.getInputStream());,if (jsonFactory != null ) JsonParser jsonParser = jsonFactory.createJsonParser(watchmanProcess.getInputStream());
WatchmanWatcher.java,JsonToken token = jsonParser.nextToken();,if (jsonParser != null ) JsonToken token = jsonParser.nextToken();
WatchmanWatcher.java,String fieldName = jsonParser.getCurrentName();,if (jsonParser != null ) String fieldName = jsonParser.getCurrentName();
WatchmanWatcher.java,File file = new File(jsonParser.nextTextValue());,if (File(jsonParser != null ) File file = new File(jsonParser.nextTextValue());
WatchmanWatcher.java,token = jsonParser.nextToken();,if (jsonParser != null ) token = jsonParser.nextToken();
WatchmanWatcher.java,watchmanExitCode = watchmanProcess.waitFor();,if (watchmanProcess != null ) watchmanExitCode = watchmanProcess.waitFor();
DefaultOnDiskBuildInfo.java,Path pathToOutputFile = buildable.getPathToOutputFile();,if (buildable != null ) Path pathToOutputFile = buildable.getPathToOutputFile();
AndroidResourceDetails.java,Path resDirectory = androidResource.getRes();,if (androidResource != null ) Path resDirectory = androidResource.getRes();
AndroidResourceDetails.java,resDirectories = resDirectoryBuilder.build();,if (resDirectoryBuilder != null ) resDirectories = resDirectoryBuilder.build();
AndroidResourceDetails.java,rDotJavaPackages = rDotJavaPackageBuilder.build();,if (rDotJavaPackageBuilder != null ) rDotJavaPackages = rDotJavaPackageBuilder.build();
AndroidResourceDetails.java,whitelistedStringDirs = whitelistedStringDirsBuilder.build();,if (whitelistedStringDirsBuilder != null ) whitelistedStringDirs = whitelistedStringDirsBuilder.build();
AndroidTransitiveDependencyGraph.java,Path pathToCompiledRDotJavaFiles = uberRDotJava.getPathToCompiledRDotJavaFiles();,if (uberRDotJava != null ) Path pathToCompiledRDotJavaFiles = uberRDotJava.getPathToCompiledRDotJavaFiles();
AndroidTransitiveDependencyGraph.java,ImmutableSet<Path> noDxPaths = noDxPathsBuilder.build();,if (noDxPathsBuilder != null ) ImmutableSet<Path> noDxPaths = noDxPathsBuilder.build();
AndroidTransitiveDependencyGraph.java,Path assetsDirectory = androidRule.getAssets();,if (androidRule != null ) Path assetsDirectory = androidRule.getAssets();
AndroidBinary.java,filteredResourcesProvider = result.getFilteredResourcesProvider();,if (result != null ) filteredResourcesProvider = result.getFilteredResourcesProvider();
AndroidBinary.java,packageableCollection = result.getPackageableCollection();,if (result != null ) packageableCollection = result.getPackageableCollection();
AndroidBinary.java,aaptPackageResources = result.getAaptPackageResources();,if (result != null ) aaptPackageResources = result.getAaptPackageResources();
AndroidBinary.java,packageStringAssets = result.getPackageStringAssets();,if (result != null ) packageStringAssets = result.getPackageStringAssets();
AndroidBinary.java,preDexMerge = result.getPreDexMerge();,if (result != null ) preDexMerge = result.getPreDexMerge();
AndroidBinary.java,computeExopackageDepsAbi = result.getComputeExopackageDepsAbi();,if (result != null ) computeExopackageDepsAbi = result.getComputeExopackageDepsAbi();
AndroidBinaryGraphEnhancer.java,JavaLibrary javaLibrary = (JavaLibrary) libraryRule.getBuildable();,if (libraryRule != null ) JavaLibrary javaLibrary = (JavaLibrary) libraryRule.getBuildable();
AndroidLibrary.java,Optional<DummyRDotJava> uberRDotJava = result.getOptionalDummyRDotJava();,if (result != null ) Optional<DummyRDotJava> uberRDotJava = result.getOptionalDummyRDotJava();
AndroidLibrary.java,deps = result.getBuildRuleParams().getDeps();,if (result != null ) deps = result.getBuildRuleParams().getDeps();
AndroidTransitiveDependencyGraph.java,PrebuiltJar prebuiltJar = (PrebuiltJar) rule.getBuildable();,if (rule != null ) PrebuiltJar prebuiltJar = (PrebuiltJar) rule.getBuildable();
AndroidTransitiveDependencyGraph.java,NativeLibraryBuildable nativeLibraryRule = (NativeLibraryBuildable) rule.getBuildable();,if (rule != null ) NativeLibraryBuildable nativeLibraryRule = (NativeLibraryBuildable) rule.getBuildable();
AndroidTransitiveDependencyGraph.java,AndroidResource androidRule = (AndroidResource) rule.getBuildable();,if (rule != null ) AndroidResource androidRule = (AndroidResource) rule.getBuildable();
AndroidTransitiveDependencyGraph.java,DefaultJavaLibrary defaultJavaLibrary = (DefaultJavaLibrary) rule.getBuildable();,if (rule != null ) DefaultJavaLibrary defaultJavaLibrary = (DefaultJavaLibrary) rule.getBuildable();
AndroidTransitiveDependencyGraph.java,AndroidLibrary androidLibraryRule = (AndroidLibrary) rule.getBuildable();,if (rule != null ) AndroidLibrary androidLibraryRule = (AndroidLibrary) rule.getBuildable();
RobolectricTest.java,optionalDummyRDotJava = result.getOptionalDummyRDotJava();,if (result != null ) optionalDummyRDotJava = result.getOptionalDummyRDotJava();
RobolectricTest.java,this.deps = result.getBuildRuleParams().getDeps();,if (result != null ) this.deps = result.getBuildRuleParams().getDeps();
UnsortedAndroidResourceDeps.java,androidResourceRule = (HasAndroidResourceDeps) rule.getBuildable();,if (rule != null ) androidResourceRule = (HasAndroidResourceDeps) rule.getBuildable();
AppleAssetCatalogDescription.java,final ProjectFilesystem projectFilesystem = params.getProjectFilesystem();,if (params != null ) final ProjectFilesystem projectFilesystem = params.getProjectFilesystem();
CoreDataModelDescription.java,final ProjectFilesystem projectFilesystem = params.getProjectFilesystem();,if (params != null ) final ProjectFilesystem projectFilesystem = params.getProjectFilesystem();
WorkspaceAndProjectGenerator.java,XcodeNative buildable = (XcodeNative) rule.getBuildable();,if (rule != null ) XcodeNative buildable = (XcodeNative) rule.getBuildable();
InstallCommand.java,Buildable buildable = buildRule.getBuildable();,if (buildRule != null ) Buildable buildable = buildRule.getBuildable();
RunCommand.java,binaryBuildRule = (BinaryBuildRule) targetRule.getBuildable();,if (targetRule != null ) binaryBuildRule = (BinaryBuildRule) targetRule.getBuildable();
TargetsCommand.java,Buildable buildable = buildRule.getBuildable();,if (buildRule != null ) Buildable buildable = buildRule.getBuildable();
TargetsCommand.java,Path outputPath = buildable.getPathToOutputFile();,if (buildable != null ) Path outputPath = buildable.getPathToOutputFile();
TargetsCommand.java,Buildable buildable = buildRule.getBuildable();,if (buildRule != null ) Buildable buildable = buildRule.getBuildable();
TargetsCommand.java,outputPath = buildable.getPathToOutputFile();,if (buildable != null ) outputPath = buildable.getPathToOutputFile();
TestCommand.java,Buildable test = graph.findBuildRuleByTarget(buildTarget).getBuildable();,if (graph != null ) Buildable test = graph.findBuildRuleByTarget(buildTarget).getBuildable();
TestCommand.java,testRule = (TestRule) buildRule.getBuildable();,if (buildRule != null ) testRule = (TestRule) buildRule.getBuildable();
TestCommand.java,JavaLibrary javaLibrary = (JavaLibrary) buildRule.getBuildable();,if (buildRule != null ) JavaLibrary javaLibrary = (JavaLibrary) buildRule.getBuildable();
UninstallCommand.java,Buildable buildable = buildRule.getBuildable();,if (buildRule != null ) Buildable buildable = buildRule.getBuildable();
Build.java,Buildable buildable = rule.getBuildable();,if (rule != null ) Buildable buildable = rule.getBuildable();
Project.java,ProjectConfig projectConfig = (ProjectConfig) buildRule.getBuildable();,if (buildRule != null ) ProjectConfig projectConfig = (ProjectConfig) buildRule.getBuildable();
Project.java,Buildable buildable = srcRule.getBuildable();,if (srcRule != null ) Buildable buildable = srcRule.getBuildable();
Project.java,Buildable buildable = projectRule.getBuildable();,if (projectRule != null ) Buildable buildable = projectRule.getBuildable();
Project.java,NdkLibrary ndkLibrary = (NdkLibrary) projectRule.getBuildable();,if (projectRule != null ) NdkLibrary ndkLibrary = (NdkLibrary) projectRule.getBuildable();
Project.java,AndroidResource androidResource = (AndroidResource) projectRule.getBuildable();,if (projectRule != null ) AndroidResource androidResource = (AndroidResource) projectRule.getBuildable();
Project.java,AndroidBinary androidBinary = (AndroidBinary) projectRule.getBuildable();,if (projectRule != null ) AndroidBinary androidBinary = (AndroidBinary) projectRule.getBuildable();
Project.java,javaLibrary = (JavaLibrary) projectRule.getBuildable();,if (projectRule != null ) javaLibrary = (JavaLibrary) projectRule.getBuildable();
Project.java,PrebuiltJar prebuiltJar = (PrebuiltJar) rule.getBuildable();,if (rule != null ) PrebuiltJar prebuiltJar = (PrebuiltJar) rule.getBuildable();
Project.java,PrebuiltJar prebuiltJar = (PrebuiltJar) rule.getBuildable();,if (rule != null ) PrebuiltJar prebuiltJar = (PrebuiltJar) rule.getBuildable();
GwtBinary.java,JavaLibrary javaLibrary = (JavaLibrary) rule.getBuildable();,if (rule != null ) JavaLibrary javaLibrary = (JavaLibrary) rule.getBuildable();
GwtBinary.java,this.gwtModuleJars = gwtModuleJarsBuilder.build();,if (gwtModuleJarsBuilder != null ) this.gwtModuleJars = gwtModuleJarsBuilder.build();
GwtBinary.java,JavaLibrary javaLibrary = (JavaLibrary) dep.getBuildable();,if (dep != null ) JavaLibrary javaLibrary = (JavaLibrary) dep.getBuildable();
AnnotationProcessingParams.java,Path pathToOutput = rule.getBuildable().getPathToOutputFile();,if (rule != null ) Path pathToOutput = rule.getBuildable().getPathToOutputFile();
Classpaths.java,library = (JavaLibrary) dep.getBuildable();,if (dep != null ) library = (JavaLibrary) dep.getBuildable();
DefaultJavaLibrary.java,this.additionalClasspathEntries = ImmutableSet.of();,if (ImmutableSet != null ) this.additionalClasspathEntries = ImmutableSet.of();
DefaultJavaLibrary.java,JavaLibrary javaRule = (JavaLibrary) dep.getBuildable();,if (dep != null ) JavaLibrary javaRule = (JavaLibrary) dep.getBuildable();
DefaultJavaLibrary.java,Buildable transitiveNotDeclaredDep = transitiveNotDeclaredRule.getBuildable();,if (transitiveNotDeclaredRule != null ) Buildable transitiveNotDeclaredDep = transitiveNotDeclaredRule.getBuildable();
JavaLibraryClasspathProvider.java,Iterable<JavaLibrary> javaLibraryDeps = getJavaLibraryDeps(javaLibraryRule.getDeps());,if (getJavaLibraryDeps(javaLibraryRule != null ) Iterable<JavaLibrary> javaLibraryDeps = getJavaLibraryDeps(javaLibraryRule.getDeps());
JavaLibraryDescription.java,BuildTarget originalBuildTarget = describedRule.getBuildTarget();,if (describedRule != null ) BuildTarget originalBuildTarget = describedRule.getBuildTarget();
JavaTest.java,sourceUnderTest = sourcesUnderTestBuilder.build();,if (sourcesUnderTestBuilder != null ) sourceUnderTest = sourcesUnderTestBuilder.build();
PrebuiltJar.java,this.deps = buildableParams.getDeps();,if (buildableParams != null ) this.deps = buildableParams.getDeps();
PrebuiltJarDescription.java,BuildTarget prebuiltJarBuildTarget = describedRule.getBuildTarget();,if (describedRule != null ) BuildTarget prebuiltJarBuildTarget = describedRule.getBuildTarget();
PythonBinary.java,Buildable buildable = rule.getBuildable();,if (rule != null ) Buildable buildable = rule.getBuildable();
AbstractBuildRule.java,inputsToCompareToOutputs = buildable.getInputsToCompareToOutput();,if (buildable != null ) inputsToCompareToOutputs = buildable.getInputsToCompareToOutput();
BuildRuleSourcePath.java,Buildable buildable = rule.getBuildable();,if (rule != null ) Buildable buildable = rule.getBuildable();
DefaultOnDiskBuildInfo.java,File file = projectFilesystem.getFileForRelativePath(buildable.getPathToOutputFile());,if (projectFilesystem != null ) File file = projectFilesystem.getFileForRelativePath(buildable.getPathToOutputFile());
DescribedRuleBuilder.java,this.declaredDeps = declaredDeps.build();,if (declaredDeps != null ) this.declaredDeps = declaredDeps.build();
DescribedRuleBuilder.java,T arg = description.createUnpopulatedConstructorArg();,if (description != null ) T arg = description.createUnpopulatedConstructorArg();
DescribedRuleBuilder.java,this.visibilities = allVisibilities.build();,if (allVisibilities != null ) this.visibilities = allVisibilities.build();
DescribedRuleBuilder.java,T arg = description.createUnpopulatedConstructorArg();,if (description != null ) T arg = description.createUnpopulatedConstructorArg();
KnownBuildRuleTypes.java,this.factories = Maps.newConcurrentMap();,if (Maps != null ) this.factories = Maps.newConcurrentMap();
AbstractGenruleStep.java,Buildable matchingBuildable = matchingRule.getBuildable();,if (matchingRule != null ) Buildable matchingBuildable = matchingRule.getBuildable();
Genrule.java,this.deps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) this.deps = ImmutableSortedSet.of();
Genrule.java,Buildable buildable = Preconditions.checkNotNull(rule.getBuildable());,if (Preconditions != null ) Buildable buildable = Preconditions.checkNotNull(rule.getBuildable());
Genrule.java,Path output = buildable.getPathToOutputFile();,if (buildable != null ) Path output = buildable.getPathToOutputFile();
Genrule.java,String basePath = target.getBasePathWithSlash();,if (target != null ) String basePath = target.getBasePathWithSlash();
AndroidBinaryTest.java,AndroidBinary androidBinary = (AndroidBinary) androidBinaryRule.getBuildable();,if (androidBinaryRule != null ) AndroidBinary androidBinary = (AndroidBinary) androidBinaryRule.getBuildable();
AndroidInstrumentationApkTest.java,AndroidBinaryBuilder.Builder androidBinaryBuilder = AndroidBinaryBuilder.newBuilder();,if (AndroidBinaryBuilder != null ) AndroidBinaryBuilder.Builder androidBinaryBuilder = AndroidBinaryBuilder.newBuilder();
AndroidInstrumentationApkTest.java,AndroidBinary androidBinary = (AndroidBinary) androidBinaryRule.getBuildable();,if (androidBinaryRule != null ) AndroidBinary androidBinary = (AndroidBinary) androidBinaryRule.getBuildable();
AndroidLibraryGraphEnhancerTest.java,BuildRuleParams buildRuleParams = new FakeBuildRuleParamsBuilder(buildTarget).build();,if (FakeBuildRuleParamsBuilder(buildTarget) != null ) BuildRuleParams buildRuleParams = new FakeBuildRuleParamsBuilder(buildTarget).build();
AndroidLibraryGraphEnhancerTest.java,ImmutableSortedSet<BuildRule> newDeps = result.getBuildRuleParams().getDeps();,if (result != null ) ImmutableSortedSet<BuildRule> newDeps = result.getBuildRuleParams().getDeps();
AndroidLibraryGraphEnhancerTest.java,BuildRule dummyRDotJavaRule = newDeps.last();,if (newDeps != null ) BuildRule dummyRDotJavaRule = newDeps.last();
AndroidLibraryGraphEnhancerTest.java,Optional<DummyRDotJava> dummyRDotJava = result.getOptionalDummyRDotJava();,if (result != null ) Optional<DummyRDotJava> dummyRDotJava = result.getOptionalDummyRDotJava();
AndroidLibraryTest.java,AndroidLibrary library = (AndroidLibrary) rule.getBuildable();,if (rule != null ) AndroidLibrary library = (AndroidLibrary) rule.getBuildable();
AndroidManifestTest.java,AndroidManifest androidManifestRule = (AndroidManifest) buildRule.getBuildable();,if (buildRule != null ) AndroidManifest androidManifestRule = (AndroidManifest) buildRule.getBuildable();
AndroidManifestTest.java,AndroidManifest androidManifestRule = (AndroidManifest) buildRule.getBuildable();,if (buildRule != null ) AndroidManifest androidManifestRule = (AndroidManifest) buildRule.getBuildable();
BuildConfigTest.java,BuildConfig buildConfigRule = (BuildConfig) buildRule.getBuildable();,if (buildRule != null ) BuildConfig buildConfigRule = (BuildConfig) buildRule.getBuildable();
BuildConfigTest.java,BuildConfig buildConfigRule = (BuildConfig) buildRule.getBuildable();,if (buildRule != null ) BuildConfig buildConfigRule = (BuildConfig) buildRule.getBuildable();
NdkLibraryTest.java,NdkLibrary ndkLibrary = (NdkLibrary) rule.getBuildable();,if (rule != null ) NdkLibrary ndkLibrary = (NdkLibrary) rule.getBuildable();
DefaultJavaLibraryTest.java,DefaultJavaLibrary javaLibrary = (DefaultJavaLibrary) libraryRule.getBuildable();,if (libraryRule != null ) DefaultJavaLibrary javaLibrary = (DefaultJavaLibrary) libraryRule.getBuildable();
DefaultJavaLibraryTest.java,DefaultJavaLibrary buildable = (DefaultJavaLibrary) rule.getBuildable();,if (rule != null ) DefaultJavaLibrary buildable = (DefaultJavaLibrary) rule.getBuildable();
KeystoreTest.java,Keystore keystore = (Keystore) rule.getBuildable();,if (rule != null ) Keystore keystore = (Keystore) rule.getBuildable();
PythonBinaryTest.java,BuildRuleParams params = new FakeBuildRuleParamsBuilder(buildTarget).build();,if (FakeBuildRuleParamsBuilder(buildTarget) != null ) BuildRuleParams params = new FakeBuildRuleParamsBuilder(buildTarget).build();
DescribedRuleTest.java,Buildable seen = rule.getBuildable();,if (rule != null ) Buildable seen = rule.getBuildable();
DescribedRuleTest.java,ExecutionContext.Builder executionContextBuilder = TestExecutionContext.newBuilder();,if (TestExecutionContext != null ) ExecutionContext.Builder executionContextBuilder = TestExecutionContext.newBuilder();
DescribedRuleTest.java,BuckEventBus bus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus bus = BuckEventBusFactory.newInstance();
DescribedRuleTest.java,ImmutableSortedSet<BuildRule> deps = rule.getDeps();,if (rule != null ) ImmutableSortedSet<BuildRule> deps = rule.getDeps();
DescribedRuleTest.java,ImmutableSortedSet<BuildRule> deps = rule.getDeps();,if (rule != null ) ImmutableSortedSet<BuildRule> deps = rule.getDeps();
KnownBuildRuleTypesTest.java,ProjectFilesystem filesystem = new ProjectFilesystem(folder.getRoot());,if (ProjectFilesystem(folder != null ) ProjectFilesystem filesystem = new ProjectFilesystem(folder.getRoot());
KnownBuildRuleTypesTest.java,DefaultJavaLibrary libraryRule = (DefaultJavaLibrary) rule.getBuildable();,if (rule != null ) DefaultJavaLibrary libraryRule = (DefaultJavaLibrary) rule.getBuildable();
KnownBuildRuleTypesTest.java,DefaultJavaLibrary libraryRule = (DefaultJavaLibrary) rule.getBuildable();,if (rule != null ) DefaultJavaLibrary libraryRule = (DefaultJavaLibrary) rule.getBuildable();
KnownBuildRuleTypesTest.java,DefaultJavaLibrary libraryRule = (DefaultJavaLibrary) rule.getBuildable();,if (rule != null ) DefaultJavaLibrary libraryRule = (DefaultJavaLibrary) rule.getBuildable();
KnownBuildRuleTypesTest.java,AndroidLibrary libraryRule = (AndroidLibrary) rule.getBuildable();,if (rule != null ) AndroidLibrary libraryRule = (AndroidLibrary) rule.getBuildable();
KnownBuildRuleTypesTest.java,AndroidLibrary libraryRule = (AndroidLibrary) rule.getBuildable();,if (rule != null ) AndroidLibrary libraryRule = (AndroidLibrary) rule.getBuildable();
GenruleTest.java,Path outputPath = javaBinary.getBuildable().getPathToOutputFile();,if (javaBinary != null ) Path outputPath = javaBinary.getBuildable().getPathToOutputFile();
MoreFuturesTest.java,ExecutorService executor = Executors.newSingleThreadExecutor();,if (Executors != null ) ExecutorService executor = Executors.newSingleThreadExecutor();
MoreFuturesTest.java,List<Runnable> preempted = executor.shutdownNow();,if (executor != null ) List<Runnable> preempted = executor.shutdownNow();
ProjectBuildFileParser.java,int exitCode = buckPyProcess.waitFor();,if (buckPyProcess != null ) int exitCode = buckPyProcess.waitFor();
WatchmanWatcher.java,watchmanExitCode = watchmanProcess.waitFor();,if (watchmanProcess != null ) watchmanExitCode = watchmanProcess.waitFor();
AndroidBinary.java,uberRDotJava = result.getUberRDotJava();,if (result != null ) uberRDotJava = result.getUberRDotJava();
AndroidResourceDepsFinder.java,this.androidTransitiveDependencies = transitiveDependencyGraph.findDependencies();,if (transitiveDependencyGraph != null ) this.androidTransitiveDependencies = transitiveDependencyGraph.findDependencies();
AndroidPackageableCollectorTest.java,AndroidTransitiveDependencies transitiveDeps = binaryRule.findTransitiveDependencies();,if (binaryRule != null ) AndroidTransitiveDependencies transitiveDeps = binaryRule.findTransitiveDependencies();
PathTypeCoercer.java,Path normalizedPath = pathRelativeToProjectRoot.resolve(path).normalize();,if (pathRelativeToProjectRoot != null ) Path normalizedPath = pathRelativeToProjectRoot.resolve(path).normalize();
MissingSymbolsHandler.java,Set<BuildTarget> sortedTargets = ImmutableSortedSet.copyOf(neededDependencies.keySet());,if (ImmutableSortedSet != null ) Set<BuildTarget> sortedTargets = ImmutableSortedSet.copyOf(neededDependencies.keySet());
PrebuiltJarTest.java,ExecutionContext executionContext = TestExecutionContext.newBuilder().build();,if (TestExecutionContext != null ) ExecutionContext executionContext = TestExecutionContext.newBuilder().build();
MissingSymbolsHandler.java,String targetString = buildTarget.toString();,if (buildTarget != null ) String targetString = buildTarget.toString();
UberRDotJava.java,ImmutableSet<Path> resDirectories = filteredResourcesProvider.getResDirectories();,if (filteredResourcesProvider != null ) ImmutableSet<Path> resDirectories = filteredResourcesProvider.getResDirectories();
IosBinary.java,srcs = srcsBuilder.build();,if (srcsBuilder != null ) srcs = srcsBuilder.build();
IosBinary.java,perFileFlags = perFileFlagsBuilder.build();,if (perFileFlagsBuilder != null ) perFileFlags = perFileFlagsBuilder.build();
IosLibrary.java,srcs = srcsBuilder.build();,if (srcsBuilder != null ) srcs = srcsBuilder.build();
IosLibrary.java,perFileFlags = perFileFlagsBuilder.build();,if (perFileFlagsBuilder != null ) perFileFlags = perFileFlagsBuilder.build();
IosTest.java,srcs = srcsBuilder.build();,if (srcsBuilder != null ) srcs = srcsBuilder.build();
IosTest.java,perFileFlags = perFileFlagsBuilder.build();,if (perFileFlagsBuilder != null ) perFileFlags = perFileFlagsBuilder.build();
MacosxBinary.java,srcs = srcsBuilder.build();,if (srcsBuilder != null ) srcs = srcsBuilder.build();
MacosxBinary.java,perFileFlags = perFileFlagsBuilder.build();,if (perFileFlagsBuilder != null ) perFileFlags = perFileFlagsBuilder.build();
MacosxFramework.java,srcs = srcsBuilder.build();,if (srcsBuilder != null ) srcs = srcsBuilder.build();
MacosxFramework.java,perFileFlags = perFileFlagsBuilder.build();,if (perFileFlagsBuilder != null ) perFileFlags = perFileFlagsBuilder.build();
JavaTestBuilder.java,"FakeBuildRuleParams params = new FakeBuildRuleParams(target, deps.build());","if (deps != null ) FakeBuildRuleParams params = new FakeBuildRuleParams(target, deps.build());"
CopyResourcesStepIntegrationTest.java,Set<String> entries = Sets.newHashSet();,if (Sets != null ) Set<String> entries = Sets.newHashSet();
CopyResourcesStepIntegrationTest.java,JarEntry entry = iter.next();,if (iter != null ) JarEntry entry = iter.next();
ZipInspector.java,this.apkFileEntries = builder.build();,if (builder != null ) this.apkFileEntries = builder.build();
PhiTypeResolver.java,TypeBearer mergedType = first.getType();,if (first != null ) TypeBearer mergedType = first.getType();
PhiTypeResolver.java,"mergedType = Merger.mergeType(mergedType, rs.getType());","if (rs != null ) mergedType = Merger.mergeType(mergedType, rs.getType());"
LiteralOpUpgrader.java,final TranslationAdvice advice = Optimizer.getAdvice();,if (Optimizer != null ) final TranslationAdvice advice = Optimizer.getAdvice();
AndroidBinaryIntegrationTest.java,BuckBuildLog buildLog = workspace.getBuildLog();,if (workspace != null ) BuckBuildLog buildLog = workspace.getBuildLog();
BuckConfigTest.java,ImmutableSet<Path> ignorePaths = config.getIgnorePaths();,if (config != null ) ImmutableSet<Path> ignorePaths = config.getIgnorePaths();
BuckConfigTest.java,ImmutableSet<Path> ignorePaths = config.getIgnorePaths();,if (config != null ) ImmutableSet<Path> ignorePaths = config.getIgnorePaths();
PythonBinary.java,Path pythonPathEntry = pythonLibrary.getPythonPathDirectory();,if (pythonLibrary != null ) Path pythonPathEntry = pythonLibrary.getPythonPathDirectory();
PythonLibrary.java,Path srcPath = src.resolve();,if (src != null ) Path srcPath = src.resolve();
PythonLibraryTest.java,"PythonLibrary rule = new PythonLibrary(pyLibraryTarget, srcs.build());","if (srcs != null ) PythonLibrary rule = new PythonLibrary(pyLibraryTarget, srcs.build());"
PythonLibraryTest.java,final String projectRoot = projectRootDir.getRoot().getAbsolutePath();,if (projectRootDir != null ) final String projectRoot = projectRootDir.getRoot().getAbsolutePath();
PythonLibraryTest.java,ImmutableSet<Path> artifacts = buildableContext.getRecordedArtifacts();,if (buildableContext != null ) ImmutableSet<Path> artifacts = buildableContext.getRecordedArtifacts();
ProjectFilesystem.java,ZipEntry entry = new ZipEntry(path.toString());,if (ZipEntry(path != null ) ZipEntry entry = new ZipEntry(path.toString());
JavaSymbolFinder.java,Set<String> allTargets = Sets.newHashSet();,if (Sets != null ) Set<String> allTargets = Sets.newHashSet();
JUnitRunner.java,String methodName = description.getMethodName();,if (description != null ) String methodName = description.getMethodName();
JUnitRunner.java,String className = description.getClassName();,if (description != null ) String className = description.getClassName();
DescribedRuleTest.java,ExampleBuildable buildable = (ExampleBuildable) rule.getBuildable();,if (rule != null ) ExampleBuildable buildable = (ExampleBuildable) rule.getBuildable();
AbstractCommandRunner.java,this.projectFilesystem = Preconditions.checkNotNull(params.getProjectFilesystem());,if (Preconditions != null ) this.projectFilesystem = Preconditions.checkNotNull(params.getProjectFilesystem());
AbstractCommandRunner.java,this.buildRuleTypes = Preconditions.checkNotNull(params.getBuildRuleTypes());,if (Preconditions != null ) this.buildRuleTypes = Preconditions.checkNotNull(params.getBuildRuleTypes());
CleanCommand.java,filesystem = params.getProjectFilesystem();,if (params != null ) filesystem = params.getProjectFilesystem();
CleanCommandTest.java,ProjectFilesystem projectFilesystem = cleanCommand.getProjectFilesystem();,if (cleanCommand != null ) ProjectFilesystem projectFilesystem = cleanCommand.getProjectFilesystem();
CleanCommandTest.java,ProjectFilesystem projectFilesystem = cleanCommand.getProjectFilesystem();,if (cleanCommand != null ) ProjectFilesystem projectFilesystem = cleanCommand.getProjectFilesystem();
RecordArtifactsInDirectoryStep.java,final ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) final ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
RecordArtifactsInDirectoryStep.java,ImmutableSet<Path> ignorePaths = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<Path> ignorePaths = ImmutableSet.of();
AuditClasspathCommand.java,DependencyGraph graph = partialGraph.getDependencyGraph();,if (partialGraph != null ) DependencyGraph graph = partialGraph.getDependencyGraph();
AuditClasspathCommand.java,DependencyGraph graph = partialGraph.getDependencyGraph();,if (partialGraph != null ) DependencyGraph graph = partialGraph.getDependencyGraph();
BuildCommand.java,final DependencyGraph dependencyGraph = build.getDependencyGraph();,if (build != null ) final DependencyGraph dependencyGraph = build.getDependencyGraph();
InstallCommand.java,DependencyGraph graph = build.getDependencyGraph();,if (build != null ) DependencyGraph graph = build.getDependencyGraph();
TargetsCommand.java,this.graph = partialGraph.getDependencyGraph();,if (partialGraph != null ) this.graph = partialGraph.getDependencyGraph();
TestCommand.java,Iterable<TestRule> results = getCandidateRules(build.getDependencyGraph());,if (getCandidateRules(build != null ) Iterable<TestRule> results = getCandidateRules(build.getDependencyGraph());
TestCommand.java,final DependencyGraph graph = partialGraph.getDependencyGraph();,if (partialGraph != null ) final DependencyGraph graph = partialGraph.getDependencyGraph();
Project.java,DependencyGraph dependencyGraph = partialGraph.getDependencyGraph();,if (partialGraph != null ) DependencyGraph dependencyGraph = partialGraph.getDependencyGraph();
DefaultJavaLibrary.java,TraversableGraph<BuildRule> graph = context.getDependencyGraph();,if (context != null ) TraversableGraph<BuildRule> graph = context.getDependencyGraph();
PartialGraph.java,DependencyGraph testDependencyGraph = testGraph.getDependencyGraph();,if (testGraph != null ) DependencyGraph testDependencyGraph = testGraph.getDependencyGraph();
DalvikStatsToolTest.java,JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();,if (ToolProvider != null ) JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
DalvikStatsToolTest.java,ClassReader usesImplicitOnly = new ClassReader(UsesMultiANewArray.class.getName());,if (ClassReader(UsesMultiANewArray != null ) ClassReader usesImplicitOnly = new ClassReader(UsesMultiANewArray.class.getName());
DalvikStatsToolTest.java,ClassReader usesBoth = new ClassReader(UsesMultiANewArrayAndExplicitArrayCall.class.getName());,if (ClassReader(UsesMultiANewArrayAndExplicitArrayCall != null ) ClassReader usesBoth = new ClassReader(UsesMultiANewArrayAndExplicitArrayCall.class.getName());
GwtModule.java,BuildTarget buildTarget = buildableParams.getBuildTarget();,if (buildableParams != null ) BuildTarget buildTarget = buildableParams.getBuildTarget();
PrebuiltJar.java,this.target = buildableParams.getBuildTarget();,if (buildableParams != null ) this.target = buildableParams.getBuildTarget();
CachingBuildEngineTest.java,this.buildTarget = buildRuleParams.getBuildTarget();,if (buildRuleParams != null ) this.buildTarget = buildRuleParams.getBuildTarget();
AppleResource.java,BuildTarget target = params.getBuildTarget();,if (params != null ) BuildTarget target = params.getBuildTarget();
DefaultJavaLibrary.java,this.target = buildableParams.getBuildTarget();,if (buildableParams != null ) this.target = buildableParams.getBuildTarget();
PythonLibrary.java,this.buildTarget = buildRuleParams.getBuildTarget();,if (buildRuleParams != null ) this.buildTarget = buildRuleParams.getBuildTarget();
ExportFile.java,final BuildTarget target = params.getBuildTarget();,if (params != null ) final BuildTarget target = params.getBuildTarget();
JavaTestBuilder.java,"FakeBuildRuleParams params = new FakeBuildRuleParams(target, deps.build());","if (deps != null ) FakeBuildRuleParams params = new FakeBuildRuleParams(target, deps.build());"
Parser.java,buildFileTree = buildFileTreeCache.getInput();,if (buildFileTreeCache != null ) buildFileTree = buildFileTreeCache.getInput();
BuildRuleFactoryParams.java,String basePath = target.getBasePath();,if (target != null ) String basePath = target.getBasePath();
BuildRuleFactoryParams.java,Path targetBasePath = Paths.get(target.getBasePath());,if (Paths != null ) Path targetBasePath = Paths.get(target.getBasePath());
JavaTest.java,sourceUnderTest = builder.build();,if (builder != null ) sourceUnderTest = builder.build();
DescribedRuleBuilder.java,T arg = description.createUnpopulatedConstructorArg();,if (description != null ) T arg = description.createUnpopulatedConstructorArg();
DescribedRuleBuilder.java,ImmutableSortedSet<BuildRule> totalDeps = paramRules.build();,if (paramRules != null ) ImmutableSortedSet<BuildRule> totalDeps = paramRules.build();
CommandRunnerParamsForTesting.java,private ImmutableMap environment = ImmutableMap.copyOf(System.getenv());,if (ImmutableMap != null ) private ImmutableMap environment = ImmutableMap.copyOf(System.getenv());
BuildTarget.java,String flavorName = flavor.get();,if (flavor != null ) String flavorName = flavor.get();
JavaTest.java,TargetDevice device = targetDevice.get();,if (targetDevice != null ) TargetDevice device = targetDevice.get();
UberRDotJavaUtil.java,androidResourceRule = (HasAndroidResourceDeps) rule.getBuildable();,if (rule != null ) androidResourceRule = (HasAndroidResourceDeps) rule.getBuildable();
UberRDotJavaUtil.java,BuildRuleType type = rule.getType();,if (rule != null ) BuildRuleType type = rule.getType();
ProjectGenerator.java,Path infoPlistPath = this.repoRootRelativeToOutputDirectory.resolve(buildable.getInfoPlist());,if (this != null ) Path infoPlistPath = this.repoRootRelativeToOutputDirectory.resolve(buildable.getInfoPlist());
ProjectGenerator.java,Path infoPlistPath = this.repoRootRelativeToOutputDirectory.resolve(buildable.getInfoPlist());,if (this != null ) Path infoPlistPath = this.repoRootRelativeToOutputDirectory.resolve(buildable.getInfoPlist());
MakeCleanDirectoryStep.java,this.pathRelativeToProjectRoot = pathRelativeToProjectRoot.toString();,if (pathRelativeToProjectRoot != null ) this.pathRelativeToProjectRoot = pathRelativeToProjectRoot.toString();
SchemeGenerator.java,docBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();,if (DocumentBuilderFactory != null ) docBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
SchemeGenerator.java,transformer = TransformerFactory.newInstance().newTransformer();,if (TransformerFactory != null ) transformer = TransformerFactory.newInstance().newTransformer();
SchemeGenerator.java,DOMImplementation domImplementation = docBuilder.getDOMImplementation();,if (docBuilder != null ) DOMImplementation domImplementation = docBuilder.getDOMImplementation();
SchemeGenerator.java,Element rootElem = doc.getDocumentElement();,if (doc != null ) Element rootElem = doc.getDocumentElement();
XCScheme.java,this.buildAction = Lists.newArrayList();,if (Lists != null ) this.buildAction = Lists.newArrayList();
AbstractBuildRuleFactory.java,T builder = newBuilder(params.getAbstractBuildRuleFactoryParams());,if (newBuilder(params != null ) T builder = newBuilder(params.getAbstractBuildRuleFactoryParams());
PrebuiltJar.java,SourcePath gwtJarSourcePath = gwtJar.get();,if (gwtJar != null ) SourcePath gwtJarSourcePath = gwtJar.get();
PrebuiltJarDescription.java,inputsToCompareToOutput = Collections.singleton(arg.gwtJar.get());,if (Collections != null ) inputsToCompareToOutput = Collections.singleton(arg.gwtJar.get());
PrebuiltJarDescription.java,pathToExistingJarFile = arg.gwtJar.get().resolve();,if (arg != null ) pathToExistingJarFile = arg.gwtJar.get().resolve();
PrebuiltJarDescription.java,inputsToCompareToOutput = ImmutableSet.of();,if (ImmutableSet != null ) inputsToCompareToOutput = ImmutableSet.of();
PrebuiltJarDescription.java,pathToExistingJarFile = arg.sourceJar.get();,if (arg != null ) pathToExistingJarFile = arg.sourceJar.get();
PrebuiltJarDescription.java,inputsToCompareToOutput = ImmutableSet.of();,if (ImmutableSet != null ) inputsToCompareToOutput = ImmutableSet.of();
WorkspaceAndProjectGenerator.java,boolean shouldGenerateProject = !nativeTargets.isEmpty();,if (!nativeTargets != null ) boolean shouldGenerateProject = !nativeTargets.isEmpty();
JavaTest.java,TargetDevice device = targetDevice.get();,if (targetDevice != null ) TargetDevice device = targetDevice.get();
ProjectGenerator.java,Path referencedProjectPath = buildable.getProjectContainerPath().resolve();,if (buildable != null ) Path referencedProjectPath = buildable.getProjectContainerPath().resolve();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,PBXContainerItemProxy proxy = dependency.getTargetProxy();,if (dependency != null ) PBXContainerItemProxy proxy = dependency.getTargetProxy();
ProjectGeneratorTest.java,String containerPath = assertFileRefIsRelativeAndResolvePath(proxy.getContainerPortal());,if (assertFileRefIsRelativeAndResolvePath(proxy != null ) String containerPath = assertFileRefIsRelativeAndResolvePath(proxy.getContainerPortal());
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,XCScheme scheme = Preconditions.checkNotNull(projectGenerator.getGeneratedScheme());,if (Preconditions != null ) XCScheme scheme = Preconditions.checkNotNull(projectGenerator.getGeneratedScheme());
ProjectGeneratorTest.java,List<String> actualOrdering = Lists.newArrayList();,if (Lists != null ) List<String> actualOrdering = Lists.newArrayList();
DefaultJavaLibrary.java,this.target = buildRuleParams.getBuildTarget();,if (buildRuleParams != null ) this.target = buildRuleParams.getBuildTarget();
PrebuiltJar.java,this.target = buildRuleParams.getBuildTarget();,if (buildRuleParams != null ) this.target = buildRuleParams.getBuildTarget();
PrebuiltJar.java,this.deps = buildRuleParams.getDeps();,if (buildRuleParams != null ) this.deps = buildRuleParams.getDeps();
BuckConfig.java,Path path = Paths.get(pathString.get());,if (Paths != null ) Path path = Paths.get(pathString.get());
MakeCleanDirectoryStep.java,this.pathRelativeToProjectRoot = pathRelativeToProjectRoot.toString();,if (pathRelativeToProjectRoot != null ) this.pathRelativeToProjectRoot = pathRelativeToProjectRoot.toString();
JavaTest.java,TargetDevice device = targetDevice.get();,if (targetDevice != null ) TargetDevice device = targetDevice.get();
TargetsCommand.java,BuildFileTree tree = new BuildFileTree(partialGraph.getTargets());,if (BuildFileTree(partialGraph != null ) BuildFileTree tree = new BuildFileTree(partialGraph.getTargets());
Project.java,this.buildFileTree = new BuildFileTree(partialGraph.getTargets());,if (BuildFileTree(partialGraph != null ) this.buildFileTree = new BuildFileTree(partialGraph.getTargets());
BuildFileTree.java,basePathToNodeIndex = Maps.newHashMap();,if (Maps != null ) basePathToNodeIndex = Maps.newHashMap();
BuildFileTree.java,File root = filesystem.getProjectRoot();,if (filesystem != null ) File root = filesystem.getProjectRoot();
BuildFileTree.java,String basePath = buildTarget.getBasePath();,if (buildTarget != null ) String basePath = buildTarget.getBasePath();
BuildFileTree.java,int basePathLength = basePath.length();,if (basePath != null ) int basePathLength = basePath.length();
BuildFileTree.java,children = Lists.newArrayList();,if (Lists != null ) children = Lists.newArrayList();
FilesystemBackedBuildFileTreeTest.java,buildFileTree = new BuildFileTree(graph.getTargets());,if (BuildFileTree(graph != null ) buildFileTree = new BuildFileTree(graph.getTargets());
FilesystemBackedBuildFileTreeTest.java,List<BuildTarget> targets = Lists.newArrayList();,if (Lists != null ) List<BuildTarget> targets = Lists.newArrayList();
ParamInfo.java,result = Optional.absent();,if (Optional != null ) result = Optional.absent();
BuckConfig.java,paths = ImmutableSet.of();,if (ImmutableSet != null ) paths = ImmutableSet.of();
DescribedRuleTest.java,BuckEventBus bus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus bus = BuckEventBusFactory.newInstance();
AndroidPlatformTarget.java,List<File> androidVersionDirectories = Lists.newArrayList();,if (Lists != null ) List<File> androidVersionDirectories = Lists.newArrayList();
BuildCommand.java,Set<BuildRule> rulesToBuild = build.getDependencyGraph().getNodesWithNoIncomingEdges();,if (build != null ) Set<BuildRule> rulesToBuild = build.getDependencyGraph().getNodesWithNoIncomingEdges();
DxStep.java,String dx = androidPlatformTarget.getDxExecutable().getAbsolutePath();,if (androidPlatformTarget != null ) String dx = androidPlatformTarget.getDxExecutable().getAbsolutePath();
AndroidPlatformTarget.java,File androidSdkDir = androidDirectoryResolver.findAndroidSdkDir().toFile();,if (androidDirectoryResolver != null ) File androidSdkDir = androidDirectoryResolver.findAndroidSdkDir().toFile();
AndroidPlatformTarget.java,Path addonPath = androidSdkDir.relativize(libsDir.toPath());,if (androidSdkDir != null ) Path addonPath = androidSdkDir.relativize(libsDir.toPath());
AndroidPlatformTargetTest.java,Set<String> additionalJarPaths = ImmutableSet.of();,if (ImmutableSet != null ) Set<String> additionalJarPaths = ImmutableSet.of();
AndroidPlatformTarget.java,File androidSdkDir = androidDirectoryResolver.findAndroidSdkDir().toFile();,if (androidDirectoryResolver != null ) File androidSdkDir = androidDirectoryResolver.findAndroidSdkDir().toFile();
AndroidPlatformTarget.java,Set<String> additionalJarPaths = builder.build();,if (builder != null ) Set<String> additionalJarPaths = builder.build();
CopyResourcesStep.java,Path resource = MorePaths.separatorsToUnix(rawResource.resolve());,if (MorePaths != null ) Path resource = MorePaths.separatorsToUnix(rawResource.resolve());
CopyResourcesStep.java,relativeSymlinkPath = resource.getFileName();,if (resource != null ) relativeSymlinkPath = resource.getFileName();
DefaultJavaLibrary.java,Path resource = MorePaths.separatorsToUnix(rawResource.resolve());,if (MorePaths != null ) Path resource = MorePaths.separatorsToUnix(rawResource.resolve());
DefaultJavaLibrary.java,relativeSymlinkPath = resource.getFileName();,if (resource != null ) relativeSymlinkPath = resource.getFileName();
BuckRunner.java,Process process = processBuilder.start();,if (processBuilder != null ) Process process = processBuilder.start();
BuckRunner.java,Future<String> stdoutFuture = readStream(process.getInputStream());,if (readStream(process != null ) Future<String> stdoutFuture = readStream(process.getInputStream());
BuckRunner.java,Future<String> stderrFuture = readStream(process.getErrorStream());,if (readStream(process != null ) Future<String> stderrFuture = readStream(process.getErrorStream());
BuckRunner.java,exitCode = process.waitFor();,if (process != null ) exitCode = process.waitFor();
BuckRunner.java,stdout = stdoutFuture.get();,if (stdoutFuture != null ) stdout = stdoutFuture.get();
BuckRunner.java,stderr = stderrFuture.get();,if (stderrFuture != null ) stderr = stderrFuture.get();
BuckRunner.java,String outputString = output.toString();,if (output != null ) String outputString = output.toString();
DalvikAwareZipSplitter.java,this.hashCode = original.fastHash();,if (original != null ) this.hashCode = original.fastHash();
DummyRDotJava.java,Set<Path> javaSourceFilePaths = Sets.newHashSet();,if (Sets != null ) Set<Path> javaSourceFilePaths = Sets.newHashSet();
UberRDotJava.java,Set<Path> javaSourceFilePaths = Sets.newHashSet();,if (Sets != null ) Set<Path> javaSourceFilePaths = Sets.newHashSet();
TestCommand.java,ImmutableSet<Path> javaSrcPaths = rule.getJavaSrcs();,if (rule != null ) ImmutableSet<Path> javaSrcPaths = rule.getJavaSrcs();
TestCommand.java,File directory = projectFilesystem.getFileForRelativePath(javaSrcPath).getParentFile();,if (projectFilesystem != null ) File directory = projectFilesystem.getFileForRelativePath(javaSrcPath).getParentFile();
CachingBuildEngine.java,ruleKey = rule.getRuleKey();,if (rule != null ) ruleKey = rule.getRuleKey();
CachingBuildEngine.java,ruleKeyWithoutDeps = rule.getRuleKeyWithoutDeps();,if (rule != null ) ruleKeyWithoutDeps = rule.getRuleKeyWithoutDeps();
GenerateBuildConfigStep.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
BuildConfigTest.java,BuildConfig buildConfigRule = (BuildConfig) buildRule.getBuildable();,if (buildRule != null ) BuildConfig buildConfigRule = (BuildConfig) buildRule.getBuildable();
BuildConfigTest.java,BuildConfig buildConfigRule = (BuildConfig) buildRule.getBuildable();,if (buildRule != null ) BuildConfig buildConfigRule = (BuildConfig) buildRule.getBuildable();
DefaultJavaLibrary.java,this.deps = buildRuleParams.getDeps();,if (buildRuleParams != null ) this.deps = buildRuleParams.getDeps();
DescribedRuleBuilder.java,this.deps = allDeps.build();,if (allDeps != null ) this.deps = allDeps.build();
UberRDotJava.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
AndroidTransitiveDependencyGraph.java,Path pathToCompiledRDotJavaFiles = uberRDotJava.getPathToCompiledRDotJavaFiles();,if (uberRDotJava != null ) Path pathToCompiledRDotJavaFiles = uberRDotJava.getPathToCompiledRDotJavaFiles();
AndroidTransitiveDependencyGraph.java,ImmutableSet<Path> noDxPaths = noDxPathsBuilder.build();,if (noDxPathsBuilder != null ) ImmutableSet<Path> noDxPaths = noDxPathsBuilder.build();
ProjectGenerator.java,Path infoPlistPath = this.repoRootRelativeToOutputDirectory.resolve(buildable.getInfoPlist());,if (this != null ) Path infoPlistPath = this.repoRootRelativeToOutputDirectory.resolve(buildable.getInfoPlist());
ProjectGenerator.java,String productName = getProductName(rule.getBuildTarget());,if (getProductName(rule != null ) String productName = getProductName(rule.getBuildTarget());
JavacOptionsTest.java,JavacOptions options = JavacOptions.builder().build();,if (JavacOptions != null ) JavacOptions options = JavacOptions.builder().build();
AndroidTransitiveDependencyGraph.java,ImmutableSet<String> noDxPaths = noDxPathsBuilder.build();,if (noDxPathsBuilder != null ) ImmutableSet<String> noDxPaths = noDxPathsBuilder.build();
AuditClasspathCommand.java,SortedSet<String> classpathEntries = Sets.newTreeSet();,if (Sets != null ) SortedSet<String> classpathEntries = Sets.newTreeSet();
Project.java,ImmutableSet<String> noDxJars = noDxJarsBuilder.build();,if (noDxJarsBuilder != null ) ImmutableSet<String> noDxJars = noDxJarsBuilder.build();
GenerateCodeCoverageReportStepTest.java,shellCommandBuilder = ImmutableList.builder();,if (ImmutableList != null ) shellCommandBuilder = ImmutableList.builder();
GenerateCodeCoverageReportStepTest.java,expectedShellCommand = shellCommandBuilder.build();,if (shellCommandBuilder != null ) expectedShellCommand = shellCommandBuilder.build();
BuckConfig.java,File javac = new File(path.get());,if (File(path != null ) File javac = new File(path.get());
Main.java,Optional<Path> javac = config.getJavac();,if (config != null ) Optional<Path> javac = config.getJavac();
Main.java,Optional<JavacVersion> javacVersion = Optional.absent();,if (Optional != null ) Optional<JavacVersion> javacVersion = Optional.absent();
BuckConfigTest.java,File javac = temporaryFolder.newFile();,if (temporaryFolder != null ) File javac = temporaryFolder.newFile();
BuckConfigTest.java,File javac = temporaryFolder.newFile();,if (temporaryFolder != null ) File javac = temporaryFolder.newFile();
RuleKey.java,Buildable buildable = rule.getBuildable();,if (rule != null ) Buildable buildable = rule.getBuildable();
ProjectGenerator.java,Path path = sourcePath.resolve(partialGraph.getDependencyGraph());,if (sourcePath != null ) Path path = sourcePath.resolve(partialGraph.getDependencyGraph());
ProjectGenerator.java,Path path = headerPath.resolve(partialGraph.getDependencyGraph());,if (headerPath != null ) Path path = headerPath.resolve(partialGraph.getDependencyGraph());
BuildRuleSourcePath.java,Path path = rule.getBuildable().getPathToOutputFile();,if (rule != null ) Path path = rule.getBuildable().getPathToOutputFile();
TestConsole.java,CapturingPrintStream stream = (CapturingPrintStream)getStdOut().getRawStream();,if ((CapturingPrintStream)getStdOut() != null ) CapturingPrintStream stream = (CapturingPrintStream)getStdOut().getRawStream();
TestConsole.java,CapturingPrintStream stream = (CapturingPrintStream)getStdErr().getRawStream();,if ((CapturingPrintStream)getStdErr() != null ) CapturingPrintStream stream = (CapturingPrintStream)getStdErr().getRawStream();
AbstractBuildRuleBuilder.java,this.projectFilesystem = params.getProjectFilesystem();,if (params != null ) this.projectFilesystem = params.getProjectFilesystem();
AbstractBuildRuleBuilder.java,this.ruleKeyBuilderFactory = params.getRuleKeyBuilderFactory();,if (params != null ) this.ruleKeyBuilderFactory = params.getRuleKeyBuilderFactory();
AndroidTransitiveDependencyGraph.java,pathToCompiledRDotJavaFilesOptional = Optional.absent();,if (Optional != null ) pathToCompiledRDotJavaFilesOptional = Optional.absent();
AndroidBinaryGraphEnhancer.java,filteredResourcesProvider = (ResourcesFilter) resourcesFilterBuildRule.getBuildable();,if (resourcesFilterBuildRule != null ) filteredResourcesProvider = (ResourcesFilter) resourcesFilterBuildRule.getBuildable();
AndroidBinaryGraphEnhancer.java,UberRDotJava uberRDotJava = (UberRDotJava) uberRDotJavaBuildRule.getBuildable();,if (uberRDotJavaBuildRule != null ) UberRDotJava uberRDotJava = (UberRDotJava) uberRDotJavaBuildRule.getBuildable();
AndroidBinaryGraphEnhancer.java,ImmutableSet<IntermediateDexRule> allPreDexDeps = preDexDeps.build();,if (preDexDeps != null ) ImmutableSet<IntermediateDexRule> allPreDexDeps = preDexDeps.build();
DexWithClasses.java,DexProducedFromJavaLibraryThatContainsClassFiles preDex = preDexDep.getBuildable();,if (preDexDep != null ) DexProducedFromJavaLibraryThatContainsClassFiles preDex = preDexDep.getBuildable();
BuildRuleEvent.java,ruleKey = rule.getRuleKey().toString();,if (rule != null ) ruleKey = rule.getRuleKey().toString();
BuildRuleEvent.java,"ruleKey = ""INACCESSIBLE: "" + e.getMessage();","if (e != null ) ruleKey = ""INACCESSIBLE: "" + e.getMessage();"
BuildRuleEvent.java,ruleKey = getBuildRule().getRuleKey();,if (getBuildRule() != null ) ruleKey = getBuildRule().getRuleKey();
ParamInfo.java,Type type = field.getGenericType();,if (field != null ) Type type = field.getGenericType();
ParamInfo.java,this.typeCoercer = typeCoercerFactory.typeCoercerForType(field.getGenericType());,if (typeCoercerFactory != null ) this.typeCoercer = typeCoercerFactory.typeCoercerForType(field.getGenericType());
TargetsCommand.java,Iterator<String> keySetIterator = buildIndex.keySet().iterator();,if (buildIndex != null ) Iterator<String> keySetIterator = buildIndex.keySet().iterator();
TargetsCommand.java,String key = keySetIterator.next();,if (keySetIterator != null ) String key = keySetIterator.next();
ProGuardObfuscateStep.java,proguardJar = proguardJarOverride.get().toFile();,if (proguardJarOverride != null ) proguardJar = proguardJarOverride.get().toFile();
BuckConfig.java,File file = path.toFile();,if (path != null ) File file = path.toFile();
ExternalJavacStep.java,ProcessBuilder pb = new ProcessBuilder(command.build());,if (ProcessBuilder(command != null ) ProcessBuilder pb = new ProcessBuilder(command.build());
AndroidLibrary.java,JavacOptions options = javacOptions.build();,if (javacOptions != null ) JavacOptions options = javacOptions.build();
AndroidLibrary.java,Optional<DummyRDotJava> uberRDotJava = result.getOptionalDummyRDotJava();,if (result != null ) Optional<DummyRDotJava> uberRDotJava = result.getOptionalDummyRDotJava();
RobolectricTest.java,JavacOptions options = javacOptions.build();,if (javacOptions != null ) JavacOptions options = javacOptions.build();
RobolectricTest.java,Optional<DummyRDotJava> dummyRDotJava = result.getOptionalDummyRDotJava();,if (result != null ) Optional<DummyRDotJava> dummyRDotJava = result.getOptionalDummyRDotJava();
TestCommand.java,ImmutableSet<BuildRule> sourceUnderTest = javaTestRule.getSourceUnderTest();,if (javaTestRule != null ) ImmutableSet<BuildRule> sourceUnderTest = javaTestRule.getSourceUnderTest();
DefaultJavaLibraryTest.java,AnnotationProcessingData processingData = rule.getAnnotationProcessingData();,if (rule != null ) AnnotationProcessingData processingData = rule.getAnnotationProcessingData();
DefaultJavaLibraryTest.java,String observedAbiKeyForDepsHash = commonNoExport.getAbiKeyForDeps().getHash();,if (commonNoExport != null ) String observedAbiKeyForDepsHash = commonNoExport.getAbiKeyForDeps().getHash();
PathTypeCoercer.java,Path normalizedPath = pathRelativeToProjectRoot.resolve(path).normalize();,if (pathRelativeToProjectRoot != null ) Path normalizedPath = pathRelativeToProjectRoot.resolve(path).normalize();
PrebuiltJarBuilder.java,"FakeBuildRuleParams params = new FakeBuildRuleParams(target, deps.build());","if (deps != null ) FakeBuildRuleParams params = new FakeBuildRuleParams(target, deps.build());"
AgentUtil.java,String line = sigContents.readLine();,if (sigContents != null ) String line = sigContents.readLine();
CachingBuildEngine.java,SettableFuture<BuildRuleSuccess> theFuture = results.get(rule.getBuildTarget());,if (results != null ) SettableFuture<BuildRuleSuccess> theFuture = results.get(rule.getBuildTarget());
CachingBuildEngine.java,theFuture = results.get(rule.getBuildTarget());,if (results != null ) theFuture = results.get(rule.getBuildTarget());
CachingBuildEngine.java,SettableFuture<BuildRuleSuccess> result = SettableFuture.create();,if (SettableFuture != null ) SettableFuture<BuildRuleSuccess> result = SettableFuture.create();
Project.java,ObjectWriter objectWriter = objectMapper.writerWithDefaultPrettyPrinter();,if (objectMapper != null ) ObjectWriter objectWriter = objectMapper.writerWithDefaultPrettyPrinter();
KeystoreBuilder.java,this.deps = Sets.newHashSet();,if (Sets != null ) this.deps = Sets.newHashSet();
ShBinary.java,BuildTarget target = buildRuleParams.getBuildTarget();,if (buildRuleParams != null ) BuildTarget target = buildRuleParams.getBuildTarget();
AndroidBinary.java,packageStringAssets = result.getPackageStringAssets();,if (result != null ) packageStringAssets = result.getPackageStringAssets();
AndroidBinaryGraphEnhancer.java,Optional<PackageStringAssets> packageStringAssets = Optional.absent();,if (Optional != null ) Optional<PackageStringAssets> packageStringAssets = Optional.absent();
AndroidBinaryGraphEnhancerTest.java,EnhancementResult result = graphEnhancer.createAdditionalBuildables();,if (graphEnhancer != null ) EnhancementResult result = graphEnhancer.createAdditionalBuildables();
AndroidBinaryGraphEnhancerTest.java,ImmutableSortedSet<BuildRule> finalDeps = result.getFinalDeps();,if (result != null ) ImmutableSortedSet<BuildRule> finalDeps = result.getFinalDeps();
AndroidBinaryGraphEnhancerTest.java,FilteredResourcesProvider resourcesProvider = result.getFilteredResourcesProvider();,if (result != null ) FilteredResourcesProvider resourcesProvider = result.getFilteredResourcesProvider();
AndroidLibraryGraphEnhancer.java,final DummyRDotJava dummyRDotJava = (DummyRDotJava) dummyRDotJavaBuildRule.getBuildable();,if (dummyRDotJavaBuildRule != null ) final DummyRDotJava dummyRDotJava = (DummyRDotJava) dummyRDotJavaBuildRule.getBuildable();
TestRuleKeyFileHelper.java,RuleKey ruleKey = Preconditions.checkNotNull(testRule.getRuleKey());,if (Preconditions != null ) RuleKey ruleKey = Preconditions.checkNotNull(testRule.getRuleKey());
TestRuleKeyFileHelper.java,RuleKey ruleKey = Preconditions.checkNotNull(testRule.getRuleKey());,if (Preconditions != null ) RuleKey ruleKey = Preconditions.checkNotNull(testRule.getRuleKey());
CachingBuildEngineTest.java,BuildRuleSuccess result = cachingRule.build(context).get();,if (cachingRule != null ) BuildRuleSuccess result = cachingRule.build(context).get();
CachingBuildEngineTest.java,BuildRuleSuccess result = cachingBuildRule.build(buildContext).get();,if (cachingBuildRule != null ) BuildRuleSuccess result = cachingBuildRule.build(buildContext).get();
ParamInfo.java,result = Optional.absent();,if (Optional != null ) result = Optional.absent();
CachingBuildEngine.java,SettableFuture<BuildRuleSuccess> resultFuture = results.get(rule.getBuildTarget());,if (results != null ) SettableFuture<BuildRuleSuccess> resultFuture = results.get(rule.getBuildTarget());
CachingBuildEngine.java,SettableFuture<BuildRuleSuccess> result = results.get(rule.getBuildTarget());,if (results != null ) SettableFuture<BuildRuleSuccess> result = results.get(rule.getBuildTarget());
AndroidBinary.java,Buildable keystore = rule.getBuildable();,if (rule != null ) Buildable keystore = rule.getBuildable();
AndroidBinary.java,ImmutableSortedSet<BuildRule> finalDeps = result.getFinalDeps();,if (result != null ) ImmutableSortedSet<BuildRule> finalDeps = result.getFinalDeps();
AndroidBinary.java,this.packageType = PackageType.valueOf(packageType.toUpperCase());,if (PackageType != null ) this.packageType = PackageType.valueOf(packageType.toUpperCase());
AndroidInstrumentationApk.java,BuildRuleParams newParams = originalParams.copyWithChangedDeps(result.getFinalDeps());,if (originalParams != null ) BuildRuleParams newParams = originalParams.copyWithChangedDeps(result.getFinalDeps());
AndroidBinaryGraphEnhancer.java,BuildTarget originalTarget = javaLibraryRule.getBuildTarget();,if (javaLibraryRule != null ) BuildTarget originalTarget = javaLibraryRule.getBuildTarget();
Project.java,javaLibraryRule = (JavaLibraryRule) projectRule.getBuildable();,if (projectRule != null ) javaLibraryRule = (JavaLibraryRule) projectRule.getBuildable();
Project.java,AnnotationProcessingData processingData = javaLibraryRule.getAnnotationProcessingData();,if (javaLibraryRule != null ) AnnotationProcessingData processingData = javaLibraryRule.getAnnotationProcessingData();
Classpaths.java,library = (JavaLibraryRule) dep.getBuildable();,if (dep != null ) library = (JavaLibraryRule) dep.getBuildable();
DefaultJavaLibraryRule.java,JavaLibraryRule javaRule = (JavaLibraryRule) dep.getBuildable();,if (dep != null ) JavaLibraryRule javaRule = (JavaLibraryRule) dep.getBuildable();
JavaLibraryClasspathProvider.java,Iterable<JavaLibraryRule> javaLibraryDeps = getJavaLibraryDeps(javaLibraryRule.getDeps());,if (getJavaLibraryDeps(javaLibraryRule != null ) Iterable<JavaLibraryRule> javaLibraryDeps = getJavaLibraryDeps(javaLibraryRule.getDeps());
KnownBuildRuleTypes.java,Optional<String> ndkVersion = buckConfig.getNdkVersion();,if (buckConfig != null ) Optional<String> ndkVersion = buckConfig.getNdkVersion();
KnownBuildRuleTypes.java,ndkVersion = androidDirectoryResolver.getNdkVersion();,if (androidDirectoryResolver != null ) ndkVersion = androidDirectoryResolver.getNdkVersion();
AuditClasspathCommandTest.java,KnownBuildRuleTypes buildRuleTypes = KnownBuildRuleTypes.getDefault();,if (KnownBuildRuleTypes != null ) KnownBuildRuleTypes buildRuleTypes = KnownBuildRuleTypes.getDefault();
AuditInputCommandTest.java,KnownBuildRuleTypes buildRuleTypes = KnownBuildRuleTypes.getDefault();,if (KnownBuildRuleTypes != null ) KnownBuildRuleTypes buildRuleTypes = KnownBuildRuleTypes.getDefault();
AuditOwnerCommandTest.java,KnownBuildRuleTypes buildRuleTypes = KnownBuildRuleTypes.getDefault();,if (KnownBuildRuleTypes != null ) KnownBuildRuleTypes buildRuleTypes = KnownBuildRuleTypes.getDefault();
CommandRunnerParamsForTesting.java,private KnownBuildRuleTypes buildRuleTypes = KnownBuildRuleTypes.getDefault();,if (KnownBuildRuleTypes != null ) private KnownBuildRuleTypes buildRuleTypes = KnownBuildRuleTypes.getDefault();
TargetsCommandTest.java,KnownBuildRuleTypes buildRuleTypes = KnownBuildRuleTypes.getDefault();,if (KnownBuildRuleTypes != null ) KnownBuildRuleTypes buildRuleTypes = KnownBuildRuleTypes.getDefault();
ParserTest.java,buildRuleTypes = KnownBuildRuleTypes.getDefault();,if (KnownBuildRuleTypes != null ) buildRuleTypes = KnownBuildRuleTypes.getDefault();
KnownBuildRuleTypesTest.java,KnownBuildRuleTypes buildRuleTypes = KnownBuildRuleTypes.getDefault();,if (KnownBuildRuleTypes != null ) KnownBuildRuleTypes buildRuleTypes = KnownBuildRuleTypes.getDefault();
KnownBuildRuleTypesTest.java,KnownBuildRuleTypes.Builder buildRuleTypesBuilder = KnownBuildRuleTypes.createDefaultBuilder();,if (KnownBuildRuleTypes != null ) KnownBuildRuleTypes.Builder buildRuleTypesBuilder = KnownBuildRuleTypes.createDefaultBuilder();
Project.java,String binaryJar = prebuiltJarRule.getBinaryJar().toString();,if (prebuiltJarRule != null ) String binaryJar = prebuiltJarRule.getBinaryJar().toString();
Project.java,this.binaryJar = rule.getBinaryJar().toString();,if (rule != null ) this.binaryJar = rule.getBinaryJar().toString();
Project.java,this.javadocUrl = rule.getJavadocUrl().orNull();,if (rule != null ) this.javadocUrl = rule.getJavadocUrl().orNull();
CachingBuildEngine.java,Buildable buildable = rule.getBuildable();,if (rule != null ) Buildable buildable = rule.getBuildable();
AbstractCachingBuildRule.java,inputsToCompareToOutputs = buildable.getInputsToCompareToOutput();,if (buildable != null ) inputsToCompareToOutputs = buildable.getInputsToCompareToOutput();
ProGuardObfuscateStep.java,AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget();,if (context != null ) AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget();
ProGuardObfuscateStep.java,String proguardJar = androidPlatformTarget.getProguardJar().getAbsolutePath();,if (androidPlatformTarget != null ) String proguardJar = androidPlatformTarget.getProguardJar().getAbsolutePath();
TestSelectorOptions.java,TestSelectorList testSelectorList = testSelectorListSupplier.get();,if (testSelectorListSupplier != null ) TestSelectorList testSelectorList = testSelectorListSupplier.get();
JUnitStep.java,TestSelectorList testSelectorList = testSelectorListOptional.get();,if (testSelectorListOptional != null ) TestSelectorList testSelectorList = testSelectorListOptional.get();
AuditClasspathCommand.java,classpathEntries = (HasClasspathEntries) rule.getBuildable();,if (rule != null ) classpathEntries = (HasClasspathEntries) rule.getBuildable();
DefaultJavaLibraryRule.java,SortedSet<JavaAbiRule> rulesWithAbiToConsider = Sets.newTreeSet();,if (Sets != null ) SortedSet<JavaAbiRule> rulesWithAbiToConsider = Sets.newTreeSet();
AndroidResource.java,BuildTarget buildTarget = buildRuleParams.getBuildTarget();,if (buildRuleParams != null ) BuildTarget buildTarget = buildRuleParams.getBuildTarget();
AndroidResourceBuildRuleFactory.java,Path resDir = params.resolveDirectoryPathRelativeToBuildFileDirectory(res.get());,if (params != null ) Path resDir = params.resolveDirectoryPathRelativeToBuildFileDirectory(res.get());
AndroidResourceBuildRuleFactory.java,Path assetsDir = params.resolveDirectoryPathRelativeToBuildFileDirectory(assets.get());,if (params != null ) Path assetsDir = params.resolveDirectoryPathRelativeToBuildFileDirectory(assets.get());
Project.java,BuildRule srcRule = projectConfigRule.getSrcRule();,if (projectConfigRule != null ) BuildRule srcRule = projectConfigRule.getSrcRule();
ProjectConfig.java,BuildRule srcRule = ruleResolver.get(srcTargetId.orNull());,if (ruleResolver != null ) BuildRule srcRule = ruleResolver.get(srcTargetId.orNull());
ProjectConfig.java,BuildRule testRule = ruleResolver.get(testTargetId.orNull());,if (ruleResolver != null ) BuildRule testRule = ruleResolver.get(testTargetId.orNull());
GenParcelable.java,ParcelableClass parcelableClass = Parser.parse(src.toFile());,if (Parser != null ) ParcelableClass parcelableClass = Parser.parse(src.toFile());
AbstractBuildRuleBuilder.java,this.pathAbsolutifier = params.getPathAbsolutifier();,if (params != null ) this.pathAbsolutifier = params.getPathAbsolutifier();
ExternalJavacStep.java,this.pathToJavac = javacOptions.getPathToJavac().get();,if (javacOptions != null ) this.pathToJavac = javacOptions.getPathToJavac().get();
KnownBuildRuleTypes.java,Optional<Path> javac = buckConfig.getJavac();,if (buckConfig != null ) Optional<Path> javac = buckConfig.getJavac();
KnownBuildRuleTypes.java,Optional<String> javacVersion = Optional.absent();,if (Optional != null ) Optional<String> javacVersion = Optional.absent();
KnownBuildRuleTypes.java,javacVersion = Optional.of(versionResult.getStderr());,if (Optional != null ) javacVersion = Optional.of(versionResult.getStderr());
KnownBuildRuleTypesTest.java,final File javac = temporaryFolder.newFile();,if (temporaryFolder != null ) final File javac = temporaryFolder.newFile();
AbstractGenruleStep.java,BuildTarget myBuildTarget = buildRule.getBuildTarget();,if (buildRule != null ) BuildTarget myBuildTarget = buildRule.getBuildTarget();
Genrule.java,String basePath = getBuildTarget().getBasePathWithSlash();,if (getBuildTarget() != null ) String basePath = getBuildTarget().getBasePathWithSlash();
Genrule.java,cmd = Optional.absent();,if (Optional != null ) cmd = Optional.absent();
Genrule.java,bash = Optional.absent();,if (Optional != null ) bash = Optional.absent();
Genrule.java,cmdExe = Optional.absent();,if (Optional != null ) cmdExe = Optional.absent();
GenruleTest.java,AbstractGenruleStep genruleStep = genrule.createGenruleStep();,if (genrule != null ) AbstractGenruleStep genruleStep = genrule.createGenruleStep();
GenruleTest.java,AbstractGenruleStep genruleStep = rule.createGenruleStep();,if (rule != null ) AbstractGenruleStep genruleStep = rule.createGenruleStep();
GenruleTest.java,AbstractGenruleStep genruleStep = rule.createGenruleStep();,if (rule != null ) AbstractGenruleStep genruleStep = rule.createGenruleStep();
GenruleTest.java,AbstractGenruleStep genruleStep = rule.createGenruleStep();,if (rule != null ) AbstractGenruleStep genruleStep = rule.createGenruleStep();
AbstractBuildRuleBuilder.java,this.pathRelativizer = params.getPathAbsolutifier();,if (params != null ) this.pathRelativizer = params.getPathAbsolutifier();
KnownBuildRuleTypes.java,this.descriptions = Sets.newConcurrentHashSet();,if (Sets != null ) this.descriptions = Sets.newConcurrentHashSet();
AbstractCachingBuildRule.java,this.buildRuleResult = SettableFuture.create();,if (SettableFuture != null ) this.buildRuleResult = SettableFuture.create();
AbstractCachingBuildRule.java,this.buildRuleResult = SettableFuture.create();,if (SettableFuture != null ) this.buildRuleResult = SettableFuture.create();
AbstractCachingBuildRule.java,ruleKey = buildRule.getRuleKey();,if (buildRule != null ) ruleKey = buildRule.getRuleKey();
AbstractCachingBuildRule.java,ruleKeyWithoutDeps = buildRule.getRuleKeyWithoutDeps();,if (buildRule != null ) ruleKeyWithoutDeps = buildRule.getRuleKeyWithoutDeps();
AbstractCachingBuildRule.java,BuildRuleSuccess.Type success = result.getSuccess();,if (result != null ) BuildRuleSuccess.Type success = result.getSuccess();
AbstractCachingBuildRule.java,boolean clearExistingMetadata = success.shouldClearAndOverwriteMetadataOnDisk();,if (success != null ) boolean clearExistingMetadata = success.shouldClearAndOverwriteMetadataOnDisk();
AbstractCachingBuildRule.java,BuildOutputInitializer<T> outputInitializer = initializable.getBuildOutputInitializer();,if (initializable != null ) BuildOutputInitializer<T> outputInitializer = initializable.getBuildOutputInitializer();
AbstractCachingBuildRule.java,Optional<RuleKey> cachedRuleKey = onDiskBuildInfo.getRuleKey();,if (onDiskBuildInfo != null ) Optional<RuleKey> cachedRuleKey = onDiskBuildInfo.getRuleKey();
AbstractCachingBuildRule.java,Optional<RuleKey> cachedRuleKeyNoDeps = onDiskBuildInfo.getRuleKeyWithoutDeps();,if (onDiskBuildInfo != null ) Optional<RuleKey> cachedRuleKeyNoDeps = onDiskBuildInfo.getRuleKeyWithoutDeps();
AbstractCachingBuildRule.java,StepRunner stepRunner = context.getStepRunner();,if (context != null ) StepRunner stepRunner = context.getStepRunner();
TestSelectorOptions.java,TestSelectorList.Builder builder = new TestSelectorList.Builder();,if (TestSelectorList != null ) TestSelectorList.Builder builder = new TestSelectorList.Builder();
TestSelectorOptions.java,TestSelectorList testSelectorList = builder.build();,if (builder != null ) TestSelectorList testSelectorList = builder.build();
Main.java,String buildId = MoreStrings.createRandomString();,if (MoreStrings != null ) String buildId = MoreStrings.createRandomString();
Parser.java,private String currentBuildId = MoreStrings.createRandomString();,if (MoreStrings != null ) private String currentBuildId = MoreStrings.createRandomString();
Parser.java,private String buildTreeBuildId = MoreStrings.createRandomString();,if (MoreStrings != null ) private String buildTreeBuildId = MoreStrings.createRandomString();
InstallCommand.java,Build build = buildCommand.getBuild();,if (buildCommand != null ) Build build = buildCommand.getBuild();
InstallCommand.java,DependencyGraph graph = build.getDependencyGraph();,if (build != null ) DependencyGraph graph = build.getDependencyGraph();
RunCommand.java,BuildCommandOptions buildCommandOptions = new BuildCommandOptions(options.getBuckConfig());,if (BuildCommandOptions(options != null ) BuildCommandOptions buildCommandOptions = new BuildCommandOptions(options.getBuckConfig());
RunCommand.java,String targetName = options.getTarget();,if (options != null ) String targetName = options.getTarget();
RunCommand.java,Build build = buildCommand.getBuild();,if (buildCommand != null ) Build build = buildCommand.getBuild();
TestCommand.java,Build build = buildCommand.getBuild();,if (buildCommand != null ) Build build = buildCommand.getBuild();
TestCommand.java,Iterable<TestRule> results = getCandidateRules(build.getDependencyGraph());,if (getCandidateRules(build != null ) Iterable<TestRule> results = getCandidateRules(build.getDependencyGraph());
TestCommand.java,BuildContext buildContext = build.getBuildContext();,if (build != null ) BuildContext buildContext = build.getBuildContext();
TestCommand.java,ExecutionContext buildExecutionContext = build.getExecutionContext();,if (build != null ) ExecutionContext buildExecutionContext = build.getExecutionContext();
DefaultExecutionEnvironment.java,platform = Platform.detect();,if (Platform != null ) platform = Platform.detect();
SmartDexingStep.java,numThreadsValue = numThreads.get();,if (numThreads != null ) numThreadsValue = numThreads.get();
InstallCommand.java,Build build = buildCommand.getBuild();,if (buildCommand != null ) Build build = buildCommand.getBuild();
InstallCommand.java,DependencyGraph graph = build.getDependencyGraph();,if (build != null ) DependencyGraph graph = build.getDependencyGraph();
RunCommand.java,BuildCommandOptions buildCommandOptions = new BuildCommandOptions(options.getBuckConfig());,if (BuildCommandOptions(options != null ) BuildCommandOptions buildCommandOptions = new BuildCommandOptions(options.getBuckConfig());
RunCommand.java,String targetName = options.getTarget();,if (options != null ) String targetName = options.getTarget();
RunCommand.java,Build build = buildCommand.getBuild();,if (buildCommand != null ) Build build = buildCommand.getBuild();
TestCommand.java,Build build = buildCommand.getBuild();,if (buildCommand != null ) Build build = buildCommand.getBuild();
TestCommand.java,Iterable<TestRule> results = getCandidateRules(build.getDependencyGraph());,if (getCandidateRules(build != null ) Iterable<TestRule> results = getCandidateRules(build.getDependencyGraph());
TestCommand.java,BuildContext buildContext = build.getBuildContext();,if (build != null ) BuildContext buildContext = build.getBuildContext();
TestCommand.java,ExecutionContext buildExecutionContext = build.getExecutionContext();,if (build != null ) ExecutionContext buildExecutionContext = build.getExecutionContext();
TestMethodResultMapBuilder.java,TestRun.Status status = TestRun.Status.convertResultType(testResultSummary.getType());,if (TestRun != null ) TestRun.Status status = TestRun.Status.convertResultType(testResultSummary.getType());
GidGenerator.java,generatedIds = Sets.newHashSet();,if (Sets != null ) generatedIds = Sets.newHashSet();
HeaderMapTest.java,HeaderMap.Builder builder = HeaderMap.builder();,if (HeaderMap != null ) HeaderMap.Builder builder = HeaderMap.builder();
HeaderMapTest.java,HeaderMap.Builder builder = HeaderMap.builder();,if (HeaderMap != null ) HeaderMap.Builder builder = HeaderMap.builder();
ZipStepTest.java,File parent = tmp.newFolder();,if (tmp != null ) File parent = tmp.newFolder();
ZipStepTest.java,File toZip = tmp.newFolder();,if (tmp != null ) File toZip = tmp.newFolder();
ZipStepTest.java,int result = step.execute(TestExecutionContext.newInstance());,if (step != null ) int result = step.execute(TestExecutionContext.newInstance());
ZipStepTest.java,File parent = tmp.newFolder();,if (tmp != null ) File parent = tmp.newFolder();
ZipStepTest.java,File toZip = tmp.newFolder();,if (tmp != null ) File toZip = tmp.newFolder();
ResourcesFilter.java,resDirectories = filterResourcesStep.getOutputResourceDirs();,if (filterResourcesStep != null ) resDirectories = filterResourcesStep.getOutputResourceDirs();
AndroidBinaryGraphEnhancer.java,ResourcesFilter resourcesFilter = (ResourcesFilter) resourcesFilterBuildRule.getBuildable();,if (resourcesFilterBuildRule != null ) ResourcesFilter resourcesFilter = (ResourcesFilter) resourcesFilterBuildRule.getBuildable();
UberRDotJava.java,ImmutableSet<Path> resDirectories = resourcesFilter.getResDirectories();,if (resourcesFilter != null ) ImmutableSet<Path> resDirectories = resourcesFilter.getResDirectories();
ExopackageInstaller.java,List<String> parts = splitter.splitToList(line.trim());,if (splitter != null ) List<String> parts = splitter.splitToList(line.trim());
ExopackageInstaller.java,OutputStream outToDevice = clientSocket.getOutputStream();,if (clientSocket != null ) OutputStream outToDevice = clientSocket.getOutputStream();
AndroidBinaryGraphEnhancer.java,this.totalDeps = ImmutableSortedSet.naturalOrder();,if (ImmutableSortedSet != null ) this.totalDeps = ImmutableSortedSet.naturalOrder();
AndroidBinaryGraphEnhancer.java,PreDexMerge preDexMerge = (PreDexMerge) preDexMergeBuildRule.getBuildable();,if (preDexMergeBuildRule != null ) PreDexMerge preDexMerge = (PreDexMerge) preDexMergeBuildRule.getBuildable();
AndroidBinaryGraphEnhancer.java,ResourcesFilter resourcesFilter = (ResourcesFilter) resourcesFilterBuildRule.getBuildable();,if (resourcesFilterBuildRule != null ) ResourcesFilter resourcesFilter = (ResourcesFilter) resourcesFilterBuildRule.getBuildable();
AndroidBinaryGraphEnhancer.java,UberRDotJava uberRDotJava = (UberRDotJava) uberRDotJavaBuildRule.getBuildable();,if (uberRDotJavaBuildRule != null ) UberRDotJava uberRDotJava = (UberRDotJava) uberRDotJavaBuildRule.getBuildable();
AndroidBinaryGraphEnhancer.java,computeExopackageDepsAbi = Optional.absent();,if (Optional != null ) computeExopackageDepsAbi = Optional.absent();
AndroidBinaryRule.java,ImmutableSortedSet<BuildRule> finalDeps = abiEnhancementResult.getFinalExopackageDeps();,if (abiEnhancementResult != null ) ImmutableSortedSet<BuildRule> finalDeps = abiEnhancementResult.getFinalExopackageDeps();
AndroidInstrumentationApk.java,BuildRuleParams newParams = originalParams.copyWithChangedDeps(graphEnhancer.getTotalDeps());,if (originalParams != null ) BuildRuleParams newParams = originalParams.copyWithChangedDeps(graphEnhancer.getTotalDeps());
AndroidBinaryGraphEnhancerTest.java,Collection<BuildRule> totalDeps = graphEnhancer.getTotalDeps();,if (graphEnhancer != null ) Collection<BuildRule> totalDeps = graphEnhancer.getTotalDeps();
AdbHelper.java,List<IDevice> devices = filterDevices(adb.getDevices());,if (filterDevices(adb != null ) List<IDevice> devices = filterDevices(adb.getDevices());
AdbHelper.java,devices = filterDevices(adb.getDevices());,if (filterDevices(adb != null ) devices = filterDevices(adb.getDevices());
InstallCommand.java,Path pathToManifest = installableApk.getManifestPath();,if (installableApk != null ) Path pathToManifest = installableApk.getManifestPath();
InstallCommand.java,List<String> launcherActivities = reader.getLauncherActivities();,if (reader != null ) List<String> launcherActivities = reader.getLauncherActivities();
InstallCommand.java,PrintStream stdOut = console.getStdOut();,if (console != null ) PrintStream stdOut = console.getStdOut();
InstallCommand.java,final File apk = installableApk.getApkPath().toFile();,if (installableApk != null ) final File apk = installableApk.getApkPath().toFile();
InstallCommand.java,final boolean installViaSd = options.shouldInstallViaSd();,if (options != null ) final boolean installViaSd = options.shouldInstallViaSd();
InstallCommand.java,name = device.getSerialNumber();,if (device != null ) name = device.getSerialNumber();
InstallCommand.java,"reason = deviceInstallPackageViaSd(device, apk.getAbsolutePath());","if (apk != null ) reason = deviceInstallPackageViaSd(device, apk.getAbsolutePath());"
InstallCommand.java,String value = receiver.getOutput().trim();,if (receiver != null ) String value = receiver.getOutput().trim();
InstallCommandTest.java,byte[] outputBytes = output.getBytes();,if (output != null ) byte[] outputBytes = output.getBytes();
InstallCommandTest.java,KnownBuildRuleTypes buildRuleTypes = KnownBuildRuleTypes.getDefault();,if (KnownBuildRuleTypes != null ) KnownBuildRuleTypes buildRuleTypes = KnownBuildRuleTypes.getDefault();
InstallCommandTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
UninstallSupportCommandRunner.java,Path pathToManifest = androidBinaryRule.getManifestPath();,if (androidBinaryRule != null ) Path pathToManifest = androidBinaryRule.getManifestPath();
InstallCommand.java,String pathToManifest = installableApk.getManifestPath().toString();,if (installableApk != null ) String pathToManifest = installableApk.getManifestPath().toString();
UninstallSupportCommandRunner.java,String pathToManifest = androidBinaryRule.getManifestPath().toString();,if (androidBinaryRule != null ) String pathToManifest = androidBinaryRule.getManifestPath().toString();
UninstallSupportCommandRunner.java,name = device.getSerialNumber();,if (device != null ) name = device.getSerialNumber();
UninstallSupportCommandRunner.java,PrintStream stdOut = console.getStdOut();,if (console != null ) PrintStream stdOut = console.getStdOut();
UninstallSupportCommandRunner.java,long start = System.currentTimeMillis();,if (System != null ) long start = System.currentTimeMillis();
UninstallSupportCommandRunner.java,long end = System.currentTimeMillis();,if (System != null ) long end = System.currentTimeMillis();
AndroidBinaryRule.java,BuildRuleParams newParams = originalParams.copyWithChangedDeps(graphEnhancer.getTotalDeps());,if (originalParams != null ) BuildRuleParams newParams = originalParams.copyWithChangedDeps(graphEnhancer.getTotalDeps());
ZipFileTraversal.java,ZipEntry entry = entries.nextElement();,if (entries != null ) ZipEntry entry = entries.nextElement();
GidGenerator.java,gid = builder.toString();,if (builder != null ) gid = builder.toString();
GidGeneratorTest.java,String gid = generator.generateGid();,if (generator != null ) String gid = generator.generateGid();
KnownBuildRuleTypes.java,javacVersion = Optional.of(versionResult.getStdout());,if (Optional != null ) javacVersion = Optional.of(versionResult.getStdout());
AndroidTransitiveDependencyGraph.java,BuildTarget buildTarget = androidManifest.getBuildTarget();,if (androidManifest != null ) BuildTarget buildTarget = androidManifest.getBuildTarget();
GidGeneratorTest.java,String gid = generator.genGid();,if (generator != null ) String gid = generator.genGid();
ProjectCommand.java,List<String> argumentsAsBuildTargets = options.getArgumentsFormattedAsBuildTargets();,if (options != null ) List<String> argumentsAsBuildTargets = options.getArgumentsFormattedAsBuildTargets();
AaptPackageResources.java,File destinationDirectory = destination.toFile();,if (destination != null ) File destinationDirectory = destination.toFile();
JUnitStep.java,AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget();,if (context != null ) AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget();
UberRDotJavaUtil.java,ImmutableSet<String> classpathEntries = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<String> classpathEntries = ImmutableSet.of();
SplitZipStep.java,Path manifest = primaryDexClassesFile.get();,if (primaryDexClassesFile != null ) Path manifest = primaryDexClassesFile.get();
SplitZipStep.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
SplitZipStep.java,Path pathToProguardConfig = proguardFullConfigFile.get();,if (proguardFullConfigFile != null ) Path pathToProguardConfig = proguardFullConfigFile.get();
SplitZipStep.java,Path pathToProguardMappingFile = proguardMappingFile.get();,if (proguardMappingFile != null ) Path pathToProguardMappingFile = proguardMappingFile.get();
FirstOrderHelper.java,ImmutableSet<Type> unknownTypes = builder.build();,if (builder != null ) ImmutableSet<Type> unknownTypes = builder.build();
ZipDirectoryWithMaxDeflateStep.java,File inputDirectory = inputDirectoryPath.toFile();,if (inputDirectoryPath != null ) File inputDirectory = inputDirectoryPath.toFile();
TestCommand.java,List<String> allTargets = options.getArgumentsFormattedAsBuildTargets();,if (options != null ) List<String> allTargets = options.getArgumentsFormattedAsBuildTargets();
ExternalJavacStep.java,StringBuilder builder = new StringBuilder(javac.toString());,if (StringBuilder(javac != null ) StringBuilder builder = new StringBuilder(javac.toString());
ClasspathTraversal.java,ClasspathTraverser adapter = createTraversalAdapter(path.toFile());,if (createTraversalAdapter(path != null ) ClasspathTraverser adapter = createTraversalAdapter(path.toFile());
IosBinary.java,perFileCompilerFlags = perFileCompileFlagsBuilder.build();,if (perFileCompileFlagsBuilder != null ) perFileCompilerFlags = perFileCompileFlagsBuilder.build();
IosBinary.java,groupedSrcs = groupedSourcesBuilder.build();,if (groupedSourcesBuilder != null ) groupedSrcs = groupedSourcesBuilder.build();
IosBinary.java,headers = headersBuilder.build();,if (headersBuilder != null ) headers = headersBuilder.build();
IosBinary.java,perHeaderVisibility = perHeaderVisibilityBuilder.build();,if (perHeaderVisibilityBuilder != null ) perHeaderVisibility = perHeaderVisibilityBuilder.build();
IosBinary.java,groupedHeaders = groupedHeadersBuilder.build();,if (groupedHeadersBuilder != null ) groupedHeaders = groupedHeadersBuilder.build();
IosLibrary.java,perFileCompilerFlags = perFileCompileFlagsBuilder.build();,if (perFileCompileFlagsBuilder != null ) perFileCompilerFlags = perFileCompileFlagsBuilder.build();
IosLibrary.java,groupedSrcs = groupedSourcesBuilder.build();,if (groupedSourcesBuilder != null ) groupedSrcs = groupedSourcesBuilder.build();
IosLibrary.java,headers = headersBuilder.build();,if (headersBuilder != null ) headers = headersBuilder.build();
IosLibrary.java,perHeaderVisibility = perHeaderVisibilityBuilder.build();,if (perHeaderVisibilityBuilder != null ) perHeaderVisibility = perHeaderVisibilityBuilder.build();
IosLibrary.java,groupedHeaders = groupedHeadersBuilder.build();,if (groupedHeadersBuilder != null ) groupedHeaders = groupedHeadersBuilder.build();
IosTest.java,perFileCompilerFlags = perFileCompileFlagsBuilder.build();,if (perFileCompileFlagsBuilder != null ) perFileCompilerFlags = perFileCompileFlagsBuilder.build();
IosTest.java,groupedSrcs = groupedSourcesBuilder.build();,if (groupedSourcesBuilder != null ) groupedSrcs = groupedSourcesBuilder.build();
IosTest.java,headers = headersBuilder.build();,if (headersBuilder != null ) headers = headersBuilder.build();
IosTest.java,perHeaderVisibility = perHeaderVisibilityBuilder.build();,if (perHeaderVisibilityBuilder != null ) perHeaderVisibility = perHeaderVisibilityBuilder.build();
IosTest.java,groupedHeaders = groupedHeadersBuilder.build();,if (groupedHeadersBuilder != null ) groupedHeaders = groupedHeadersBuilder.build();
ProjectGeneratorTest.java,arg.headers = ImmutableList.of();,if (ImmutableList != null ) arg.headers = ImmutableList.of();
ProjectGeneratorTest.java,arg.srcs = ImmutableList.of();,if (ImmutableList != null ) arg.srcs = ImmutableList.of();
ProjectGeneratorTest.java,arg.headers = ImmutableList.of();,if (ImmutableList != null ) arg.headers = ImmutableList.of();
DefaultJavaLibraryRule.java,DummyRDotJava dummyRDotJava = optionalDummyRDotJava.get();,if (optionalDummyRDotJava != null ) DummyRDotJava dummyRDotJava = optionalDummyRDotJava.get();
DefaultJavaLibraryRule.java,declaredClasspathEntries = declaredClasspathEntriesWithRDotJava.build();,if (declaredClasspathEntriesWithRDotJava != null ) declaredClasspathEntries = declaredClasspathEntriesWithRDotJava.build();
DefaultJavaLibraryRule.java,transitiveClasspathEntries = transitiveClasspathEntriesWithRDotJava.build();,if (transitiveClasspathEntriesWithRDotJava != null ) transitiveClasspathEntries = transitiveClasspathEntriesWithRDotJava.build();
JavaTestRule.java,Path rDotJavaClasspathEntry = optionalDummyRDotJava.get().getRDotJavaBinFolder();,if (optionalDummyRDotJava != null ) Path rDotJavaClasspathEntry = optionalDummyRDotJava.get().getRDotJavaBinFolder();
JavaTestRule.java,classpathEntries = classpathEntriesBuilder.build();,if (classpathEntriesBuilder != null ) classpathEntries = classpathEntriesBuilder.build();
JavaTestRule.java,classpathEntries = ImmutableSet.copyOf(getTransitiveClasspathEntries().values());,if (ImmutableSet != null ) classpathEntries = ImmutableSet.copyOf(getTransitiveClasspathEntries().values());
ProjectGenerator.java,Path path = sourcePath.resolve(partialGraph.getDependencyGraph());,if (sourcePath != null ) Path path = sourcePath.resolve(partialGraph.getDependencyGraph());
UberRDotJava.java,resDirectories = filterResourcesStep.getOutputResourceDirs();,if (filterResourcesStep != null ) resDirectories = filterResourcesStep.getOutputResourceDirs();
ProjectGeneratorTest.java,arg.headers = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.headers = ImmutableSortedSet.of();
ProjectGeneratorTest.java,arg.headers = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.headers = ImmutableSortedSet.of();
SmartDexingStep.java,File outputHashFile = outputHashPath.toFile();,if (outputHashPath != null ) File outputHashFile = outputHashPath.toFile();
SmartDexingStep.java,long outputHashFileModTime = outputHashPath.toFile().lastModified();,if (outputHashPath != null ) long outputHashFileModTime = outputHashPath.toFile().lastModified();
SmartDexingStep.java,long outputFileModTime = outputPath.toFile().lastModified();,if (outputPath != null ) long outputFileModTime = outputPath.toFile().lastModified();
SmartDexingStepTest.java,final ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmpDir.getRoot());,if (ProjectFilesystem(tmpDir != null ) final ProjectFilesystem projectFilesystem = new ProjectFilesystem(tmpDir.getRoot());
ProjectGenerator.java,PBXNativeTarget target = new PBXNativeTarget(rule.getFullyQualifiedName());,if (PBXNativeTarget(rule != null ) PBXNativeTarget target = new PBXNativeTarget(rule.getFullyQualifiedName());
ProjectGenerator.java,PBXNativeTarget target = new PBXNativeTarget(rule.getFullyQualifiedName());,if (PBXNativeTarget(rule != null ) PBXNativeTarget target = new PBXNativeTarget(rule.getFullyQualifiedName());
ProjectGenerator.java,PBXNativeTarget target = new PBXNativeTarget(rule.getFullyQualifiedName());,if (PBXNativeTarget(rule != null ) PBXNativeTarget target = new PBXNativeTarget(rule.getFullyQualifiedName());
ProjectGenerator.java,PBXAggregateTarget target = new PBXAggregateTarget(rule.getFullyQualifiedName());,if (PBXAggregateTarget(rule != null ) PBXAggregateTarget target = new PBXAggregateTarget(rule.getFullyQualifiedName());
FilterResourcesStep.java,Set<Path> drawables = drawableFinder.findDrawables(inResDirToOutResDirMap.keySet());,if (drawableFinder != null ) Set<Path> drawables = drawableFinder.findDrawables(inResDirToOutResDirMap.keySet());
FilterResourcesStepTest.java,Set<Path> drawables = finder.findDrawables(inResDirToOutResDirMap.keySet());,if (finder != null ) Set<Path> drawables = finder.findDrawables(inResDirToOutResDirMap.keySet());
FilterResourcesStep.java,final ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) final ProjectFilesystem filesystem = context.getProjectFilesystem();
FilterResourcesStep.java,String inputPath = input.getAbsolutePath();,if (input != null ) String inputPath = input.getAbsolutePath();
FilterResourcesStep.java,Path parent = drawableFile.toPath().getParent();,if (drawableFile != null ) Path parent = drawableFile.toPath().getParent();
Filters.java,File f = candidate.toFile();,if (candidate != null ) File f = candidate.toFile();
Filters.java,String resDirectory = f.getParentFile().getParent();,if (f != null ) String resDirectory = f.getParentFile().getParent();
FilterResourcesStepTest.java,Predicate<File> capturedPred = predCapture.getValue();,if (predCapture != null ) Predicate<File> capturedPred = predCapture.getValue();
FilterResourcesStepTest.java,File drawableFile = drawablePath.toFile();,if (drawablePath != null ) File drawableFile = drawablePath.toFile();
FilterResourcesStepTest.java,Predicate<File> filePredicate = capturedPredicate.getValue();,if (capturedPredicate != null ) Predicate<File> filePredicate = capturedPredicate.getValue();
FiltersTest.java,Set<File> result = Sets.newHashSet();,if (Sets != null ) Set<File> result = Sets.newHashSet();
FiltersTest.java,File file = candidate.toFile();,if (candidate != null ) File file = candidate.toFile();
ProjectGenerator.java,XcodeNative xcodeNative = (XcodeNative) input.getBuildable();,if (input != null ) XcodeNative xcodeNative = (XcodeNative) input.getBuildable();
ProjectGenerator.java,Path path = sourcePath.resolve(partialGraph.getDependencyGraph());,if (sourcePath != null ) Path path = sourcePath.resolve(partialGraph.getDependencyGraph());
AbstractCachingBuildRule.java,"BuildRuleSuccess buildRuleSuccess = new BuildRuleSuccess(this, result.getSuccess());","if (result != null ) BuildRuleSuccess buildRuleSuccess = new BuildRuleSuccess(this, result.getSuccess());"
ProjectGeneratorTest.java,String source = file.getFileRef().getPath();,if (file != null ) String source = file.getFileRef().getPath();
ProjectGeneratorTest.java,"PartialGraph partialGraph = PartialGraphFactory.newInstance(graph, targets.build());","if (targets != null ) PartialGraph partialGraph = PartialGraphFactory.newInstance(graph, targets.build());"
ProjectGeneratorTest.java,XcodeNativeDescription.Arg arg = xcodeNativeDescription.createUnpopulatedConstructorArg();,if (xcodeNativeDescription != null ) XcodeNativeDescription.Arg arg = xcodeNativeDescription.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,T arg = description.createUnpopulatedConstructorArg();,if (description != null ) T arg = description.createUnpopulatedConstructorArg();
ProjectGeneratorTest.java,value = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) value = ImmutableSortedSet.of();
ProjectGeneratorTest.java,value = ImmutableList.of();,if (ImmutableList != null ) value = ImmutableList.of();
ProjectGeneratorTest.java,value = ImmutableMap.of();,if (ImmutableMap != null ) value = ImmutableMap.of();
ProjectGeneratorTest.java,value = Optional.absent();,if (Optional != null ) value = Optional.absent();
ProjectGeneratorTest.java,PBXReference.SourceTree sourceTree = file.getFileRef().getSourceTree();,if (file != null ) PBXReference.SourceTree sourceTree = file.getFileRef().getSourceTree();
ProjectGenerator.java,ImmutableSet<BuildRule> buildRules = gatherTransitiveDependencies(initialRulesBuilder.build());,if (gatherTransitiveDependencies(initialRulesBuilder != null ) ImmutableSet<BuildRule> buildRules = gatherTransitiveDependencies(initialRulesBuilder.build());
ProjectGenerator.java,docBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();,if (DocumentBuilderFactory != null ) docBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
ProjectGenerator.java,transformer = TransformerFactory.newInstance().newTransformer();,if (TransformerFactory != null ) transformer = TransformerFactory.newInstance().newTransformer();
ProjectGenerator.java,DOMImplementation domImplementation = docBuilder.getDOMImplementation();,if (docBuilder != null ) DOMImplementation domImplementation = docBuilder.getDOMImplementation();
ProjectGenerator.java,Element rootElem = doc.getDocumentElement();,if (doc != null ) Element rootElem = doc.getDocumentElement();
DefaultJavaLibraryRule.java,String javaPackageAsPath = javaPackageFinder.findJavaPackageFolderForPath(resource.toString());,if (javaPackageFinder != null ) String javaPackageAsPath = javaPackageFinder.findJavaPackageFolderForPath(resource.toString());
TestLabelOptions.java,List<String> defaultRawExcludedLabelSelectors = buckConfig.getDefaultRawExcludedLabelSelectors();,if (buckConfig != null ) List<String> defaultRawExcludedLabelSelectors = buckConfig.getDefaultRawExcludedLabelSelectors();
SplitZipStep.java,Matcher m = classFilePattern.matcher(entry.getName());,if (classFilePattern != null ) Matcher m = classFilePattern.matcher(entry.getName());
ProjectGenerator.java,Path path = sourcePath.resolve(partialGraph.getDependencyGraph());,if (sourcePath != null ) Path path = sourcePath.resolve(partialGraph.getDependencyGraph());
ProjectGeneratorTest.java,arg.resources = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) arg.resources = ImmutableSortedSet.of();
GidGenerator.java,generatedIDs = Sets.newHashSet();,if (Sets != null ) generatedIDs = Sets.newHashSet();
GidGeneratorTest.java,String gid = generator.genGID();,if (generator != null ) String gid = generator.genGID();
ProjectGenerator.java,XcodeNative xcodeNative = (XcodeNative) node.getBuildable();,if (node != null ) XcodeNative xcodeNative = (XcodeNative) node.getBuildable();
TestLabelOptions.java,ImmutableList<LabelSetSelector> labelSetSelectors = supplier.get();,if (supplier != null ) ImmutableList<LabelSetSelector> labelSetSelectors = supplier.get();
TestLabelOptions.java,Set<Label> defaultExcludedLabels = buckConfig.getDefaultExcludedLabels();,if (buckConfig != null ) Set<Label> defaultExcludedLabels = buckConfig.getDefaultExcludedLabels();
TestLabelOptions.java,"LabelSetSelector labelSetSelector = new LabelSetSelector(isInclusive, labelBuilder.build());","if (labelBuilder != null ) LabelSetSelector labelSetSelector = new LabelSetSelector(isInclusive, labelBuilder.build());"
ShellStep.java,this.stdout = result.getStdout();,if (result != null ) this.stdout = result.getStdout();
ShellStep.java,this.stderr = result.getStderr();,if (result != null ) this.stderr = result.getStderr();
Main.java,Optional<Path> ndkDir = androidDirectoryResolver.findAndroidNdkDir();,if (androidDirectoryResolver != null ) Optional<Path> ndkDir = androidDirectoryResolver.findAndroidNdkDir();
Main.java,Optional<String> ndkVersion = Optional.absent();,if (Optional != null ) Optional<String> ndkVersion = Optional.absent();
AndroidPlatformTarget.java,Optional<Path> ndkDirectory = androidDirectoryResolver.findAndroidNdkDir();,if (androidDirectoryResolver != null ) Optional<Path> ndkDirectory = androidDirectoryResolver.findAndroidNdkDir();
AndroidPlatformTarget.java,Optional<String> ndkVersion = Optional.absent();,if (Optional != null ) Optional<String> ndkVersion = Optional.absent();
PropertyFinder.java,localProperties = Optional.absent();,if (Optional != null ) localProperties = Optional.absent();
BuckBlockJUnit4ClassRunner.java,RunListener listener = result.createListener();,if (result != null ) RunListener listener = result.createListener();
Main.java,outArray = ab.getBytes();,if (ab != null ) outArray = ab.getBytes();
DexMerger.java,TableOfContents aContents = dexA.getTableOfContents();,if (dexA != null ) TableOfContents aContents = dexA.getTableOfContents();
DexMerger.java,TableOfContents bContents = dexB.getTableOfContents();,if (dexB != null ) TableOfContents bContents = dexB.getTableOfContents();
DexMerger.java,TableOfContents.Section aSection = getSection(dexA.getTableOfContents());,if (getSection(dexA != null ) TableOfContents.Section aSection = getSection(dexA.getTableOfContents());
DexMerger.java,TableOfContents.Section bSection = getSection(dexB.getTableOfContents());,if (getSection(dexB != null ) TableOfContents.Section bSection = getSection(dexB.getTableOfContents());
DexMerger.java,aOffset = inA.getPosition();,if (inA != null ) aOffset = inA.getPosition();
DexMerger.java,bOffset = inB.getPosition();,if (inB != null ) bOffset = inB.getPosition();
ProjectGeneratorTest.java,PBXProject project = projectGenerator.getGeneratedProject();,if (projectGenerator != null ) PBXProject project = projectGenerator.getGeneratedProject();
ProjectGeneratorTest.java,Collection<PBXBuildPhase> buildPhases = target.getBuildPhases();,if (target != null ) Collection<PBXBuildPhase> buildPhases = target.getBuildPhases();
ProjectGeneratorTest.java,PBXBuildFile sourceBuildFile = Iterables.getOnlyElement(sourcesBuildPhase.getFiles());,if (Iterables != null ) PBXBuildFile sourceBuildFile = Iterables.getOnlyElement(sourcesBuildPhase.getFiles());
ProjectGeneratorTest.java,NSDictionary flags = sourceBuildFile.getSettings().get();,if (sourceBuildFile != null ) NSDictionary flags = sourceBuildFile.getSettings().get();
AbstractCachingBuildRule.java,Path pathToOutputFile = buildable.getPathToOutputFile();,if (buildable != null ) Path pathToOutputFile = buildable.getPathToOutputFile();
Main.java,Optional<Path> ndkDir = androidDirectoryResolver.findAndroidNdkDir();,if (androidDirectoryResolver != null ) Optional<Path> ndkDir = androidDirectoryResolver.findAndroidNdkDir();
NdkBuildStep.java,Optional<File> ndkRoot = context.getNdkRoot();,if (context != null ) Optional<File> ndkRoot = context.getNdkRoot();
AbstractCommandOptions.java,Optional<String> minVersion = this.buckConfig.getMinimumNdkVersion();,if (this != null ) Optional<String> minVersion = this.buckConfig.getMinimumNdkVersion();
AbstractCommandOptions.java,Optional<String> maxVersion = this.buckConfig.getMaximumNdkVersion();,if (this != null ) Optional<String> maxVersion = this.buckConfig.getMaximumNdkVersion();
AbstractCommandOptions.java,localProperties = Optional.absent();,if (Optional != null ) localProperties = Optional.absent();
Build.java,File androidSdkDir = androidSdkDirOption.get();,if (androidSdkDirOption != null ) File androidSdkDir = androidSdkDirOption.get();
AbstractCommandOptionsTest.java,Optional<String> empty = Optional.absent();,if (Optional != null ) Optional<String> empty = Optional.absent();
AbstractCommandOptionsTest.java,Optional<Properties> properties = Optional.absent();,if (Optional != null ) Optional<Properties> properties = Optional.absent();
AbstractCommandOptionsTest.java,HostFilesystem hostFilesystem = FakeHostFilesystem.empty();,if (FakeHostFilesystem != null ) HostFilesystem hostFilesystem = FakeHostFilesystem.empty();
AbstractCommandOptionsTest.java,HostFilesystem hostFilesystem = FakeHostFilesystem.empty();,if (FakeHostFilesystem != null ) HostFilesystem hostFilesystem = FakeHostFilesystem.empty();
AbstractCommandOptionsTest.java,Optional<Properties> properties = Optional.absent();,if (Optional != null ) Optional<Properties> properties = Optional.absent();
AbstractCommandOptionsTest.java,Optional<Properties> properties = Optional.absent();,if (Optional != null ) Optional<Properties> properties = Optional.absent();
AbstractCommandOptionsTest.java,HostFilesystem hostFilesystem = FakeHostFilesystem.empty();,if (FakeHostFilesystem != null ) HostFilesystem hostFilesystem = FakeHostFilesystem.empty();
AbstractCommandOptionsTest.java,Optional<Properties> properties = Optional.absent();,if (Optional != null ) Optional<Properties> properties = Optional.absent();
AbstractCommandOptionsTest.java,HostFilesystem hostFilesystem = FakeHostFilesystem.empty();,if (FakeHostFilesystem != null ) HostFilesystem hostFilesystem = FakeHostFilesystem.empty();
AppleResourceTest.java,args.resources = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) args.resources = ImmutableSortedSet.of();
AppleResourceTest.java,args.resources = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) args.resources = ImmutableSortedSet.of();
JavaLibraryRules.java,BuildTarget buildTarget = javaLibraryRule.getBuildTarget();,if (javaLibraryRule != null ) BuildTarget buildTarget = javaLibraryRule.getBuildTarget();
DexProducedFromJavaLibraryThatContainsClassFiles.java,String abiKeyHash = getAbiKeyForDeps().getHash();,if (getAbiKeyForDeps() != null ) String abiKeyHash = getAbiKeyForDeps().getHash();
PreDexedFilesSorter.java,metadataTxtEntries = Maps.newHashMap();,if (Maps != null ) metadataTxtEntries = Maps.newHashMap();
PreDexedFilesSorter.java,secondaryOutputToInputs = builder.build();,if (builder != null ) secondaryOutputToInputs = builder.build();
PreDexedFilesSorter.java,String relativePathToClassFile = fileLike.getRelativePath();,if (fileLike != null ) String relativePathToClassFile = fileLike.getRelativePath();
PreDexedFilesSorter.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
ShellStep.java,Verbosity verbosity = context.getVerbosity();,if (context != null ) Verbosity verbosity = context.getVerbosity();
MergeAndroidResourcesStep.java,String packageName = entry.getValue();,if (entry != null ) String packageName = entry.getValue();
MergeAndroidResourcesStep.java,String line = scanner.nextLine();,if (scanner != null ) String line = scanner.nextLine();
MergeAndroidResourcesStep.java,boolean isMatch = matcher.matches();,if (matcher != null ) boolean isMatch = matcher.matches();
ProjectFilesystem.java,this.pathToRoot = projectRoot.toPath();,if (projectRoot != null ) this.pathToRoot = projectRoot.toPath();
KnownBuildRuleTypesTest.java,KnownBuildRuleTypes buildRuleTypes = KnownBuildRuleTypes.createConfiguredBuilder(buckConfig).build();,if (KnownBuildRuleTypes != null ) KnownBuildRuleTypes buildRuleTypes = KnownBuildRuleTypes.createConfiguredBuilder(buckConfig).build();
KnownBuildRuleTypesTest.java,KnownBuildRuleTypes buildRuleTypes = KnownBuildRuleTypes.createConfiguredBuilder(buckConfig).build();,if (KnownBuildRuleTypes != null ) KnownBuildRuleTypes buildRuleTypes = KnownBuildRuleTypes.createConfiguredBuilder(buckConfig).build();
KnownBuildRuleTypesTest.java,KnownBuildRuleTypes buildRuleTypes = KnownBuildRuleTypes.createConfiguredBuilder(buckConfig).build();,if (KnownBuildRuleTypes != null ) KnownBuildRuleTypes buildRuleTypes = KnownBuildRuleTypes.createConfiguredBuilder(buckConfig).build();
KnownBuildRuleTypesTest.java,KnownBuildRuleTypes buildRuleTypes = KnownBuildRuleTypes.createConfiguredBuilder(buckConfig).build();,if (KnownBuildRuleTypes != null ) KnownBuildRuleTypes buildRuleTypes = KnownBuildRuleTypes.createConfiguredBuilder(buckConfig).build();
AndroidBinaryRule.java,Optional<DexWithClasses> rDotJavaDexWithClasses = uberRDotJava.getRDotJavaDexWithClasses();,if (uberRDotJava != null ) Optional<DexWithClasses> rDotJavaDexWithClasses = uberRDotJava.getRDotJavaDexWithClasses();
AndroidBinaryRule.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
AndroidBinaryRule.java,List<String> lines = Lists.newArrayListWithCapacity(metadataTxtEntries.size());,if (Lists != null ) List<String> lines = Lists.newArrayListWithCapacity(metadataTxtEntries.size());
AndroidBinaryRule.java,Path pathToSecondaryDex = entry.getKey();,if (entry != null ) Path pathToSecondaryDex = entry.getKey();
AndroidBinaryRule.java,preDexDeps = ImmutableSet.of();,if (ImmutableSet != null ) preDexDeps = ImmutableSet.of();
AndroidBinaryGraphEnhancerTest.java,Iterator<IntermediateDexRule> depsForPreDexingIter = depsForPreDexing.iterator();,if (depsForPreDexing != null ) Iterator<IntermediateDexRule> depsForPreDexingIter = depsForPreDexing.iterator();
AndroidBinaryRule.java,preDexDeps = ImmutableSet.of();,if (ImmutableSet != null ) preDexDeps = ImmutableSet.of();
AndroidBinaryGraphEnhancer.java,BuildTarget originalBuildTarget = originalParams.getBuildTarget();,if (originalParams != null ) BuildTarget originalBuildTarget = originalParams.getBuildTarget();
TargetsCommand.java,BuildRule buildRule = target.getValue();,if (target != null ) BuildRule buildRule = target.getValue();
TargetsCommand.java,Path outputPath = buildRule.getBuildable().getPathToOutputFile();,if (buildRule != null ) Path outputPath = buildRule.getBuildable().getPathToOutputFile();
TestSelectorList.java,defaultIsInclusive = defaultIsInclusive && !testSelector.isInclusive();,if (!testSelector != null ) defaultIsInclusive = defaultIsInclusive && !testSelector.isInclusive();
UberRDotJavaUtil.java,BuildRuleType type = rule.getType();,if (rule != null ) BuildRuleType type = rule.getType();
TestCommand.java,ImmutableSet<String> includedLabels = options.getIncludedLabels();,if (options != null ) ImmutableSet<String> includedLabels = options.getIncludedLabels();
TestCommand.java,ImmutableSet<String> excludedLabels = options.getExcludedLabels();,if (options != null ) ImmutableSet<String> excludedLabels = options.getExcludedLabels();
TestCommandOptions.java,ImmutableSet<String> allExcluded = result.build();,if (result != null ) ImmutableSet<String> allExcluded = result.build();
TestCommandTest.java,ImmutableSet<String> excluded = options.getExcludedLabels();,if (options != null ) ImmutableSet<String> excluded = options.getExcludedLabels();
TestCommandTest.java,ImmutableSet<String> included = options.getIncludedLabels();,if (options != null ) ImmutableSet<String> included = options.getIncludedLabels();
SplitZipStep.java,Path pathToProguardMappingFile = proguardMappingFile.get();,if (proguardMappingFile != null ) Path pathToProguardMappingFile = proguardMappingFile.get();
BucketPreDexedFilesStep.java,primaryDexSize += dexWithClassesForRDotJava.get().getSizeEstimate();,if (dexWithClassesForRDotJava != null ) primaryDexSize += dexWithClassesForRDotJava.get().getSizeEstimate();
BucketPreDexedFilesStep.java,List<Step> dxSteps = Lists.newArrayList();,if (Lists != null ) List<Step> dxSteps = Lists.newArrayList();
BucketPreDexedFilesStep.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
BucketPreDexedFilesStep.java,List<String> lines = Lists.newArrayListWithCapacity(secondaryDexesContents.size());,if (Lists != null ) List<String> lines = Lists.newArrayListWithCapacity(secondaryDexesContents.size());
PreDexMergeStepTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
PreDexMergeStepTest.java,CapturingLogEventListener listener = new BuckEventBusFactory.CapturingLogEventListener();,if (BuckEventBusFactory != null ) CapturingLogEventListener listener = new BuckEventBusFactory.CapturingLogEventListener();
PreDexMergeStepTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
PreDexMergeStepTest.java,CapturingLogEventListener listener = new BuckEventBusFactory.CapturingLogEventListener();,if (BuckEventBusFactory != null ) CapturingLogEventListener listener = new BuckEventBusFactory.CapturingLogEventListener();
PreDexMergeStepTest.java,BuckEventBus eventBus = BuckEventBusFactory.newInstance();,if (BuckEventBusFactory != null ) BuckEventBus eventBus = BuckEventBusFactory.newInstance();
PreDexMergeStepTest.java,CapturingLogEventListener listener = new BuckEventBusFactory.CapturingLogEventListener();,if (BuckEventBusFactory != null ) CapturingLogEventListener listener = new BuckEventBusFactory.CapturingLogEventListener();
PreDexMergeStepTest.java,ExecutionContext context = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext context = TestExecutionContext.newInstance();
PreDexMergeStepTest.java,String extension = index + dexStore.getExtension();,if (dexStore != null ) String extension = index + dexStore.getExtension();
PreDexMergeStepTest.java,String name = arg.getFileName().toString();,if (arg != null ) String name = arg.getFileName().toString();
XcconfigStack.java,this.resolutionCache = Maps.newHashMap();,if (Maps != null ) this.resolutionCache = Maps.newHashMap();
XcconfigStack.java,List<String> lines = Lists.newArrayListWithCapacity(keys.size());,if (Lists != null ) List<String> lines = Lists.newArrayListWithCapacity(keys.size());
XcconfigStack.java,resolutions = builder.build();,if (builder != null ) resolutions = builder.build();
XcconfigStack.java,result = Optional.absent();,if (Optional != null ) result = Optional.absent();
XcconfigStack.java,stack = ImmutableList.builder();,if (ImmutableList != null ) stack = ImmutableList.builder();
XcconfigStack.java,currentLayer = ArrayListMultimap.create();,if (ArrayListMultimap != null ) currentLayer = ArrayListMultimap.create();
XcconfigStack.java,currentLayer = ArrayListMultimap.create();,if (ArrayListMultimap != null ) currentLayer = ArrayListMultimap.create();
XcconfigStack.java,PredicatedConfigValue existingValue = iterator.next();,if (iterator != null ) PredicatedConfigValue existingValue = iterator.next();
XcconfigStackTest.java,List<String> result = stack.resolveConfigStack();,if (stack != null ) List<String> result = stack.resolveConfigStack();
DescribedRuleBuilder.java,List<String> allParams = params.getOptionalListAttribute(info.getName());,if (params != null ) List<String> allParams = params.getOptionalListAttribute(info.getName());
DescribedRuleBuilder.java,Optional<String> optional = params.getOptionalStringAttribute(info.getName());,if (params != null ) Optional<String> optional = params.getOptionalStringAttribute(info.getName());
ParamInfo.java,Type genericType = field.getGenericType();,if (field != null ) Type genericType = field.getGenericType();
ParamInfo.java,value = Optional.absent();,if (Optional != null ) value = Optional.absent();
ParamInfo.java,"value = asCollection(resolver, Lists.newArrayList());","if (Lists != null ) value = asCollection(resolver, Lists.newArrayList());"
ParamInfo.java,value = Optional.absent();,if (Optional != null ) value = Optional.absent();
ParamInfo.java,List<Object> collection = Lists.newArrayList();,if (Lists != null ) List<Object> collection = Lists.newArrayList();
AndroidBinaryRule.java,secondaryInputsDir = Optional.absent();,if (Optional != null ) secondaryInputsDir = Optional.absent();
SmartDexingStep.java,File secondaryOutputDirFile = projectFilesystem.getFileForRelativePath(secondaryOutputDir.get());,if (projectFilesystem != null ) File secondaryOutputDirFile = projectFilesystem.getFileForRelativePath(secondaryOutputDir.get());
SmartDexingStep.java,File secondaryInputsDirFile = projectFilesystem.getFileForRelativePath(secondaryInputsDir.get());,if (projectFilesystem != null ) File secondaryInputsDirFile = projectFilesystem.getFileForRelativePath(secondaryInputsDir.get());
StepFailedExceptionTest.java,ExecutionContext context = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext context = TestExecutionContext.newInstance();
StepFailedExceptionTest.java,ExecutionContext context = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext context = TestExecutionContext.newInstance();
AndroidTransitiveDependencyGraph.java,Path pathToCompiledRDotJavaFiles = uberRDotJavaBuildable.getPathToCompiledRDotJavaFiles();,if (uberRDotJavaBuildable != null ) Path pathToCompiledRDotJavaFiles = uberRDotJavaBuildable.getPathToCompiledRDotJavaFiles();
InstallCommand.java,final File apk = buildRule.getApkPath().toFile();,if (buildRule != null ) final File apk = buildRule.getApkPath().toFile();
JavacInMemoryStep.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
JavacInMemoryStep.java,abiKeyFile = filesystem.getFileForRelativePath(pathToOutputAbiFile.get());,if (filesystem != null ) abiKeyFile = filesystem.getFileForRelativePath(pathToOutputAbiFile.get());
JavacInMemoryStep.java,decorator = AnnotationProcessingDataDecorators.identity();,if (AnnotationProcessingDataDecorators != null ) decorator = AnnotationProcessingDataDecorators.identity();
AbstractBuildRuleBuilder.java,this.pathRelativizer = params.getPathRelativizer();,if (params != null ) this.pathRelativizer = params.getPathRelativizer();
AndroidBinaryRule.java,Path libDestinationDir = destinationDirPath.resolve(abiDirectoryComponent.get());,if (destinationDirPath != null ) Path libDestinationDir = destinationDirPath.resolve(abiDirectoryComponent.get());
AndroidBinaryRule.java,ImmutableSet<String> secondaryDexDirectories = secondaryDexDirectoriesBuilder.build();,if (secondaryDexDirectoriesBuilder != null ) ImmutableSet<String> secondaryDexDirectories = secondaryDexDirectoriesBuilder.build();
DexProducedFromJavaLibraryThatContainsClassFiles.java,Path pathToOutputFile = Paths.get(javaLibrary.getPathToOutputFile());,if (Paths != null ) Path pathToOutputFile = Paths.get(javaLibrary.getPathToOutputFile());
FilterResourcesStep.java,Set<String> drawables = drawableFinder.findDrawables(inResDirToOutResDirMap.keySet());,if (drawableFinder != null ) Set<String> drawables = drawableFinder.findDrawables(inResDirToOutResDirMap.keySet());
FilterResourcesStep.java,String parent = drawableFile.getParent();,if (drawableFile != null ) String parent = drawableFile.getParent();
SmartDexingStep.java,long outputFileModTime = new File(outputPath).lastModified();,if (File(outputPath) != null ) long outputFileModTime = new File(outputPath).lastModified();
TargetsCommand.java,String outputPath = buildRule.getBuildable().getPathToOutputFile();,if (buildRule != null ) String outputPath = buildRule.getBuildable().getPathToOutputFile();
TestCommand.java,String pathToOutput = path.getPathToOutputFile();,if (path != null ) String pathToOutput = path.getPathToOutputFile();
TestCommand.java,String pathToOutput = rule.getPathToOutputFile();,if (rule != null ) String pathToOutput = rule.getPathToOutputFile();
Project.java,String annotationGenSrc = processingData.getGeneratedSourceFolderName();,if (processingData != null ) String annotationGenSrc = processingData.getGeneratedSourceFolderName();
AnnotationProcessingParams.java,String pathToOutput = rule.getBuildable().getPathToOutputFile();,if (rule != null ) String pathToOutput = rule.getBuildable().getPathToOutputFile();
JavaTestRule.java,String relativeOutputPath = rule.getPathToOutputFile();,if (rule != null ) String relativeOutputPath = rule.getPathToOutputFile();
JavacOptions.java,String generateTo = annotationProcessingData.getGeneratedSourceFolderName();,if (annotationProcessingData != null ) String generateTo = annotationProcessingData.getGeneratedSourceFolderName();
AbstractCachingBuildRule.java,String pathToOutputFile = buildable.getPathToOutputFile();,if (buildable != null ) String pathToOutputFile = buildable.getPathToOutputFile();
BuildTargetSourcePath.java,String path = rule.getBuildable().getPathToOutputFile();,if (rule != null ) String path = rule.getBuildable().getPathToOutputFile();
DefaultOnDiskBuildInfo.java,String pathToOutputFile = buildable.getPathToOutputFile();,if (buildable != null ) String pathToOutputFile = buildable.getPathToOutputFile();
Genrule.java,String output = buildable.getPathToOutputFile();,if (buildable != null ) String output = buildable.getPathToOutputFile();
RmStep.java,File file = projectFilesystem.resolve(patternToDelete).toFile();,if (projectFilesystem != null ) File file = projectFilesystem.resolve(patternToDelete).toFile();
AndroidBinaryRuleTest.java,Set<String> classpath = Sets.newHashSet();,if (Sets != null ) Set<String> classpath = Sets.newHashSet();
FilterResourcesStepTest.java,String scaleSourceDir = new File(scaleSource).getParent();,if (File(scaleSource) != null ) String scaleSourceDir = new File(scaleSource).getParent();
FilterResourcesStepTest.java,Set<String> drawables = finder.findDrawables(inResDirToOutResDirMap.keySet());,if (finder != null ) Set<String> drawables = finder.findDrawables(inResDirToOutResDirMap.keySet());
GenAidl.java,this.aidlFilePath = Preconditions.checkNotNull(aidlFilePath).toString();,if (Preconditions != null ) this.aidlFilePath = Preconditions.checkNotNull(aidlFilePath).toString();
DefaultJavaLibraryRule.java,inputsToConsiderForCachingPurposes = builder.build();,if (builder != null ) inputsToConsiderForCachingPurposes = builder.build();
AndroidTransitiveDependencyGraph.java,String pathToCompiledRDotJavaFiles = uberRDotJavaBuildable.getPathToCompiledRDotJavaFiles();,if (uberRDotJavaBuildable != null ) String pathToCompiledRDotJavaFiles = uberRDotJavaBuildable.getPathToCompiledRDotJavaFiles();
DummyRDotJava.java,Set<String> javaSourceFilePaths = Sets.newHashSet();,if (Sets != null ) Set<String> javaSourceFilePaths = Sets.newHashSet();
UberRDotJavaBuildable.java,Set<String> javaSourceFilePaths = Sets.newHashSet();,if (Sets != null ) Set<String> javaSourceFilePaths = Sets.newHashSet();
TestCommand.java,ImmutableSet<String> javaSrcPaths = rule.getJavaSrcs();,if (rule != null ) ImmutableSet<String> javaSrcPaths = rule.getJavaSrcs();
Project.java,this.sourceJar = rule.getSourceJar().orNull();,if (rule != null ) this.sourceJar = rule.getSourceJar().orNull();
JavaBinaryRule.java,includePaths = ImmutableSet.copyOf(getTransitiveClasspathEntries().values());,if (ImmutableSet != null ) includePaths = ImmutableSet.copyOf(getTransitiveClasspathEntries().values());
JavaTestRule.java,String rDotJavaClasspathEntry = optionalDummyRDotJava.get().getRDotJavaBinFolder();,if (optionalDummyRDotJava != null ) String rDotJavaClasspathEntry = optionalDummyRDotJava.get().getRDotJavaBinFolder();
AbstractBuildRuleFactory.java,String relativePath = params.resolveFilePathRelativeToBuildFileDirectory(src).toString();,if (params != null ) String relativePath = params.resolveFilePathRelativeToBuildFileDirectory(src).toString();
Genrule.java,String localPath = entry.getKey();,if (entry != null ) String localPath = entry.getKey();
AnnotationProcessingParams.java,Set<String> searchPathElements = Sets.newHashSet();,if (Sets != null ) Set<String> searchPathElements = Sets.newHashSet();
AndroidBinaryRule.java,final Path libSourceDir = sourceDirPath.resolve(abiDirectoryComponent.get());,if (sourceDirPath != null ) final Path libSourceDir = sourceDirPath.resolve(abiDirectoryComponent.get());
AndroidResourceBuildRuleFactory.java,String resDir = params.resolveDirectoryPathRelativeToBuildFileDirectory(res.get());,if (params != null ) String resDir = params.resolveDirectoryPathRelativeToBuildFileDirectory(res.get());
AndroidResourceBuildRuleFactory.java,String assetsDir = params.resolveDirectoryPathRelativeToBuildFileDirectory(assets.get());,if (params != null ) String assetsDir = params.resolveDirectoryPathRelativeToBuildFileDirectory(assets.get());
AndroidResourceDetails.java,String resDirectory = androidResource.getRes();,if (androidResource != null ) String resDirectory = androidResource.getRes();
AndroidTransitiveDependencyGraph.java,String assetsDirectory = androidRule.getAssets();,if (androidRule != null ) String assetsDirectory = androidRule.getAssets();
MergeAndroidResourcesStep.java,String symbolsFile = entry.getKey();,if (entry != null ) String symbolsFile = entry.getKey();
AaptPackageResourcesTest.java,Set<String> assetsDirectories = ImmutableSet.of(resourceOne.getAssets());,if (ImmutableSet != null ) Set<String> assetsDirectories = ImmutableSet.of(resourceOne.getAssets());
FilterResourcesStepTest.java,Iterator<String> destIterator = inResDirToOutResDirMap.values().iterator();,if (inResDirToOutResDirMap != null ) Iterator<String> destIterator = inResDirToOutResDirMap.values().iterator();
FilterResourcesStepTest.java,String nextDestination = destIterator.next();,if (destIterator != null ) String nextDestination = destIterator.next();
InstallCommand.java,final File apk = new File(buildRule.getApkPath());,if (File(buildRule != null ) final File apk = new File(buildRule.getApkPath());
AndroidTransitiveDependencyGraph.java,String manifestFile = androidRule.getManifestFile();,if (androidRule != null ) String manifestFile = androidRule.getManifestFile();
Project.java,String binaryJar = prebuiltJarRule.getBinaryJar();,if (prebuiltJarRule != null ) String binaryJar = prebuiltJarRule.getBinaryJar();
Project.java,this.binaryJar = rule.getBinaryJar();,if (rule != null ) this.binaryJar = rule.getBinaryJar();
BuildRuleFactoryParams.java,this.visibilityParseContext = ParseContext.forVisibilityArgument();,if (ParseContext != null ) this.visibilityParseContext = ParseContext.forVisibilityArgument();
TraceDataHandler.java,InputStreamReader inputStreamReader = new InputStreamReader(inputSupplier.getInput());,if (InputStreamReader(inputSupplier != null ) InputStreamReader inputStreamReader = new InputStreamReader(inputSupplier.getInput());
TracesHandlerDelegate.java,long lastModifiedTime = file.lastModified();,if (file != null ) long lastModifiedTime = file.lastModified();
Command.java,PrintStream stdErr = console.getStdErr();,if (console != null ) PrintStream stdErr = console.getStdErr();
Main.java,Command executingCommand = command.get();,if (command != null ) Command executingCommand = command.get();
Main.java,parser = daemon.getParser();,if (daemon != null ) parser = daemon.getParser();
ChromeTraceBuildListener.java,ruleKey = buildRule.getRuleKey().toString();,if (buildRule != null ) ruleKey = buildRule.getRuleKey().toString();
ChromeTraceBuildListener.java,"ruleKey = ""INACCESSIBLE: "" + e.getMessage();","if (e != null ) ruleKey = ""INACCESSIBLE: "" + e.getMessage();"
BuildFileToJsonParser.java,JsonToken token = parser.nextToken();,if (parser != null ) JsonToken token = parser.nextToken();
BuildFileToJsonParser.java,currentObjects = Lists.newArrayList();,if (Lists != null ) currentObjects = Lists.newArrayList();
BuildFileToJsonParser.java,currentObject = Maps.newHashMap();,if (Maps != null ) currentObject = Maps.newHashMap();
BuildFileToJsonParser.java,currentObjects = Lists.newArrayList();,if (Lists != null ) currentObjects = Lists.newArrayList();
BuildFileToJsonParser.java,currentArray = Lists.newArrayList();,if (Lists != null ) currentArray = Lists.newArrayList();
BuildFileToJsonParser.java,currentFieldName = parser.getText().intern();,if (parser != null ) currentFieldName = parser.getText().intern();
ProjectBuildFileParser.java,buckPyStdoutParser = new BuildFileToJsonParser(buckPyProcess.getInputStream());,if (BuildFileToJsonParser(buckPyProcess != null ) buckPyStdoutParser = new BuildFileToJsonParser(buckPyProcess.getInputStream());
KnownBuildRuleTypes.java,BuildRuleType type = description.getBuildRuleType();,if (description != null ) BuildRuleType type = description.getBuildRuleType();
AndroidResourceDepsFinder.java,androidTransitiveDependencies = transitiveDependencyGraph.findDependencies();,if (transitiveDependencyGraph != null ) androidTransitiveDependencies = transitiveDependencyGraph.findDependencies();
TraceDataHandler.java,Writer responseWriter = response.getWriter();,if (response != null ) Writer responseWriter = response.getWriter();
TraceDataHandler.java,InputStreamReader inputStreamReader = new InputStreamReader(inputSupplier.getInput());,if (InputStreamReader(inputSupplier != null ) InputStreamReader inputStreamReader = new InputStreamReader(inputSupplier.getInput());
TraceHandler.java,String path = baseRequest.getPathInfo();,if (baseRequest != null ) String path = baseRequest.getPathInfo();
UberRDotJavaUtil.java,String resDirectory = androidResource.getRes();,if (androidResource != null ) String resDirectory = androidResource.getRes();
UberRDotJavaUtil.java,resDirectories = resDirectoryBuilder.build();,if (resDirectoryBuilder != null ) resDirectories = resDirectoryBuilder.build();
UberRDotJavaUtil.java,rDotJavaPackages = rDotJavaPackageBuilder.build();,if (rDotJavaPackageBuilder != null ) rDotJavaPackages = rDotJavaPackageBuilder.build();
UberRDotJavaUtil.java,whitelistedStringDirs = whitelistedStringDirsBuilder.build();,if (whitelistedStringDirsBuilder != null ) whitelistedStringDirs = whitelistedStringDirsBuilder.build();
DescribedRuleBuilder.java,builder = ImmutableSortedSet.naturalOrder();,if (ImmutableSortedSet != null ) builder = ImmutableSortedSet.naturalOrder();
Main.java,int port = daemon.webServer.get().getPort();,if (daemon != null ) int port = daemon.webServer.get().getPort();
Main.java,parser = daemon.getParser();,if (daemon != null ) parser = daemon.getParser();
DirArtifactCache.java,File[] artifacts = cacheDir.listFiles();,if (cacheDir != null ) File[] artifacts = cacheDir.listFiles();
DirArtifactCache.java,currentSizeBytes += file.getFile().length();,if (file != null ) currentSizeBytes += file.getFile().length();
QueryCommand.java,String presentSource = query.getSource().get();,if (query != null ) String presentSource = query.getSource().get();
QueryCommand.java,DependencyGraph dependencyGraph = partialGraph.getDependencyGraph();,if (partialGraph != null ) DependencyGraph dependencyGraph = partialGraph.getDependencyGraph();
QueryCommand.java,Node node = graphDb.createNode();,if (graphDb != null ) Node node = graphDb.createNode();
QueryCommand.java,String nodeName = rule.getFullyQualifiedName();,if (rule != null ) String nodeName = rule.getFullyQualifiedName();
QueryCommand.java,Node source = nameNodeMap.get(rule.getFullyQualifiedName());,if (nameNodeMap != null ) Node source = nameNodeMap.get(rule.getFullyQualifiedName());
QueryCommand.java,Node sink = nameNodeMap.get(dep.getFullyQualifiedName());,if (nameNodeMap != null ) Node sink = nameNodeMap.get(dep.getFullyQualifiedName());
QueryCommand.java,List<String> nodeNames = Lists.newArrayList();,if (Lists != null ) List<String> nodeNames = Lists.newArrayList();
QueryCommand.java,List<String> outputLines = Lists.newArrayList();,if (Lists != null ) List<String> outputLines = Lists.newArrayList();
UberRDotJavaUtil.java,Set<String> javaSourceFilePaths = Sets.newHashSet();,if (Sets != null ) Set<String> javaSourceFilePaths = Sets.newHashSet();
UberRDotJavaUtil.java,String rDotJavaPackage = res.getRDotJavaPackage();,if (res != null ) String rDotJavaPackage = res.getRDotJavaPackage();
DefaultJavaLibraryRule.java,boolean dependsOnAndroidResourceRules = !androidResourceDeps.isEmpty();,if (!androidResourceDeps != null ) boolean dependsOnAndroidResourceRules = !androidResourceDeps.isEmpty();
AndroidManifest.java,DependencyGraph graph = context.getDependencyGraph();,if (context != null ) DependencyGraph graph = context.getDependencyGraph();
AndroidManifestTest.java,AndroidManifest androidManifestRule = (AndroidManifest)buildRule.getBuildable();,if ((AndroidManifest)buildRule != null ) AndroidManifest androidManifestRule = (AndroidManifest)buildRule.getBuildable();
DefaultJavaLibraryRule.java,SortedSet<JavaLibraryRule> rulesWithAbiToConsider = Sets.newTreeSet();,if (Sets != null ) SortedSet<JavaLibraryRule> rulesWithAbiToConsider = Sets.newTreeSet();
QuickstartIntegrationTest.java,File androidSdk = AbstractCommandOptions.findAndroidSdkDir().orNull();,if (AbstractCommandOptions != null ) File androidSdk = AbstractCommandOptions.findAndroidSdkDir().orNull();
DexProducedFromJavaLibraryThatContainsClassFiles.java,final boolean hasClassesToDx = !javaLibraryWithClassesList.getClassNames().isEmpty();,if (!javaLibraryWithClassesList != null ) final boolean hasClassesToDx = !javaLibraryWithClassesList.getClassNames().isEmpty();
DexProducedFromJavaLibraryThatContainsClassFiles.java,JavaLibraryRule javaLibraryRuleToDex = javaLibraryWithClassesList.getJavaLibraryRule();,if (javaLibraryWithClassesList != null ) JavaLibraryRule javaLibraryRuleToDex = javaLibraryWithClassesList.getJavaLibraryRule();
DexProducedFromJavaLibraryThatContainsClassFiles.java,Path pathToOutputFile = Paths.get(javaLibraryRuleToDex.getPathToOutputFile());,if (Paths != null ) Path pathToOutputFile = Paths.get(javaLibraryRuleToDex.getPathToOutputFile());
AccumulateClassNamesTest.java,AccumulateClassNames accumulateClassNames = (AccumulateClassNames) buildRule.getBuildable();,if (buildRule != null ) AccumulateClassNames accumulateClassNames = (AccumulateClassNames) buildRule.getBuildable();
AuditRulesCommand.java,rawRules = parser.getAllRules(path.toString());,if (parser != null ) rawRules = parser.getAllRules(path.toString());
ProjectFilesystemWatcher.java,this.keys = Maps.newHashMap();,if (Maps != null ) this.keys = Maps.newHashMap();
ProjectFilesystemWatcher.java,Path name = (Path) event.context();,if (event != null ) Path name = (Path) event.context();
ProjectFilesystemWatcher.java,Path normalizedPath = path.normalize();,if (path != null ) Path normalizedPath = path.normalize();
PreDexMergeStep.java,currentSecondaryDexSize = dexWithClasses.getSizeEstimate();,if (dexWithClasses != null ) currentSecondaryDexSize = dexWithClasses.getSizeEstimate();
GenAidlTest.java,Buildable genAidlRule = ruleResolver.buildAndAddToIndex(builder).getBuildable();,if (ruleResolver != null ) Buildable genAidlRule = ruleResolver.buildAndAddToIndex(builder).getBuildable();
PythonLibrary.java,this.buildTarget = buildRuleParams.getBuildTarget();,if (buildRuleParams != null ) this.buildTarget = buildRuleParams.getBuildTarget();
Filters.java,this.density = densityBuilder.toString();,if (densityBuilder != null ) this.density = densityBuilder.toString();
Filters.java,Set<String> densitiesForKey = options.keySet();,if (options != null ) Set<String> densitiesForKey = options.keySet();
UnzipStep.java,Verbosity verbosity = context.getVerbosity();,if (context != null ) Verbosity verbosity = context.getVerbosity();
AndroidBinaryRule.java,nativeLibraryDirectories = nativeLibraryDirectoriesBuilder.build();,if (nativeLibraryDirectoriesBuilder != null ) nativeLibraryDirectories = nativeLibraryDirectoriesBuilder.build();
AndroidBinaryRule.java,assetsDirectory = Optional.absent();,if (Optional != null ) assetsDirectory = Optional.absent();
AndroidBinaryRuleTest.java,Set<String> assetsDirectories = ImmutableSet.of();,if (ImmutableSet != null ) Set<String> assetsDirectories = ImmutableSet.of();
AndroidBinaryRuleTest.java,Set<String> assetsDirectories = ImmutableSet.of(resourceOne.getAssets());,if (ImmutableSet != null ) Set<String> assetsDirectories = ImmutableSet.of(resourceOne.getAssets());
AndroidBinaryRuleTest.java,ImmutableList<Step> steps = commands.build();,if (commands != null ) ImmutableList<Step> steps = commands.build();
StepFailedExceptionTest.java,ExecutionContext context = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext context = TestExecutionContext.newInstance();
StepFailedExceptionTest.java,ExecutionContext context = TestExecutionContext.newInstance();,if (TestExecutionContext != null ) ExecutionContext context = TestExecutionContext.newInstance();
AndroidBinaryRule.java,nativeLibraryDirectories = nativeLibraryDirectoriesBuilder.build();,if (nativeLibraryDirectoriesBuilder != null ) nativeLibraryDirectories = nativeLibraryDirectoriesBuilder.build();
AndroidBinaryRule.java,nativeLibraryDirectories = ImmutableSet.of();,if (ImmutableSet != null ) nativeLibraryDirectories = ImmutableSet.of();
AndroidBinaryRule.java,resDirectories = filterResourcesStep.getOutputResourceDirs();,if (filterResourcesStep != null ) resDirectories = filterResourcesStep.getOutputResourceDirs();
AndroidBinaryRule.java,ImmutableSortedSet<BuildRule> originalDeps = originalParams.getDeps();,if (originalParams != null ) ImmutableSortedSet<BuildRule> originalDeps = originalParams.getDeps();
CompileStringsStep.java,ImmutableSet<Path> filteredStringFiles = filterResourcesStep.getNonEnglishStringFiles();,if (filterResourcesStep != null ) ImmutableSet<Path> filteredStringFiles = filterResourcesStep.getNonEnglishStringFiles();
UberRDotJavaUtil.java,Set<String> javaSourceFilePaths = Sets.newHashSet();,if (Sets != null ) Set<String> javaSourceFilePaths = Sets.newHashSet();
BuildFileToJsonParser.java,currentFieldName = parser.getText();,if (parser != null ) currentFieldName = parser.getText();
CompileStringsStep.java,ImmutableSet<String> filteredStringFiles = filterResourcesStep.getNonEnglishStringFiles();,if (filterResourcesStep != null ) ImmutableSet<String> filteredStringFiles = filterResourcesStep.getNonEnglishStringFiles();
BuildFileToJsonParser.java,JsonPrimitive primitive = json.getAsJsonPrimitive();,if (json != null ) JsonPrimitive primitive = json.getAsJsonPrimitive();
BuildFileToJsonParser.java,Number number = primitive.getAsNumber();,if (primitive != null ) Number number = primitive.getAsNumber();
BuildFileToJsonParser.java,JsonArray array = json.getAsJsonArray();,if (json != null ) JsonArray array = json.getAsJsonArray();
BuildFileToJsonParser.java,List<Object> out = Lists.newArrayListWithCapacity(array.size());,if (Lists != null ) List<Object> out = Lists.newArrayListWithCapacity(array.size());
BuildFileToJsonParserTest.java,tokens = parser.nextRules();,if (parser != null ) tokens = parser.nextRules();
DexProducedFromJavaLibraryThatContainsClassFiles.java,JavaLibraryRule javaLibraryRuleToDex = javaLibraryWithClassesList.getJavaLibraryRule();,if (javaLibraryWithClassesList != null ) JavaLibraryRule javaLibraryRuleToDex = javaLibraryWithClassesList.getJavaLibraryRule();
AccumulateClassNamesStep.java,String name = fileLike.getRelativePath();,if (fileLike != null ) String name = fileLike.getRelativePath();
ExportFile.java,Path name = outName.getFileName();,if (outName != null ) Path name = outName.getFileName();
ExportFile.java,Path pathToOutputFile = out.get();,if (out != null ) Path pathToOutputFile = out.get();
AccumulateClassNames.java,this.classNames = Suppliers.ofInstance(classNamesBuilder.build());,if (Suppliers != null ) this.classNames = Suppliers.ofInstance(classNamesBuilder.build());
PrebuiltJarRule.java,abiKey = abiKeyHash.get();,if (abiKeyHash != null ) abiKey = abiKeyHash.get();
Main.java,String buildId = MoreStrings.createRandomString();,if (MoreStrings != null ) String buildId = MoreStrings.createRandomString();
Main.java,Command executingCommand = command.get();,if (command != null ) Command executingCommand = command.get();
Main.java,String commandName = executingCommand.name().toLowerCase();,if (executingCommand != null ) String commandName = executingCommand.name().toLowerCase();
RecordArtifactsInDirectoryStep.java,ImmutableSet<String> ignorePaths = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<String> ignorePaths = ImmutableSet.of();
BuckConfigTest.java,ImmutableSet<String> ignorePaths = config.getIgnorePaths();,if (config != null ) ImmutableSet<String> ignorePaths = config.getIgnorePaths();
BuckConfigTest.java,ImmutableSet<String> ignorePaths = config.getIgnorePaths();,if (config != null ) ImmutableSet<String> ignorePaths = config.getIgnorePaths();
BuckConfigTest.java,ImmutableSet<String> ignorePaths = config.getIgnorePaths();,if (config != null ) ImmutableSet<String> ignorePaths = config.getIgnorePaths();
ExtractResourcesStep.java,final JarEntry entry = entries.nextElement();,if (entries != null ) final JarEntry entry = entries.nextElement();
ExtractResourcesStep.java,String name = entry.getName();,if (entry != null ) String name = entry.getName();
OnDiskBuildInfo.java,String pathToOutputFile = buildable.getPathToOutputFile();,if (buildable != null ) String pathToOutputFile = buildable.getPathToOutputFile();
Main.java,Command executingCommand = command.get();,if (command != null ) Command executingCommand = command.get();
Main.java,String commandName = executingCommand.name().toLowerCase();,if (executingCommand != null ) String commandName = executingCommand.name().toLowerCase();
Main.java,ExecutorService buildEventBusExecutor = buildEventBus.getExecutorService();,if (buildEventBus != null ) ExecutorService buildEventBusExecutor = buildEventBus.getExecutorService();
UberRDotJavaUtil.java,BuildRuleType type = rule.getType();,if (rule != null ) BuildRuleType type = rule.getType();
DefaultJavaLibraryRule.java,outputClasspathEntries = ImmutableSetMultimap.of();,if (ImmutableSetMultimap != null ) outputClasspathEntries = ImmutableSetMultimap.of();
StringResources.java,int smallestResourceId = strings.firstKey();,if (strings != null ) int smallestResourceId = strings.firstKey();
StringResources.java,int smallestResourceId = plurals.firstKey();,if (plurals != null ) int smallestResourceId = plurals.firstKey();
AndroidBinaryRule.java,SourcePath sourcePath = proguardConfig.get();,if (proguardConfig != null ) SourcePath sourcePath = proguardConfig.get();
UninstallSupportCommandRunner.java,String pathToManifest = androidBinaryRule.getManifest();,if (androidBinaryRule != null ) String pathToManifest = androidBinaryRule.getManifest();
AndroidBinaryRule.java,preDexDeps = preDexDepsBuilder.build();,if (preDexDepsBuilder != null ) preDexDeps = preDexDepsBuilder.build();
AndroidBinaryRule.java,preDexDepsAsBuildRules = ImmutableSet.of();,if (ImmutableSet != null ) preDexDepsAsBuildRules = ImmutableSet.of();
AndroidBinaryRule.java,preDexDeps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) preDexDeps = ImmutableSortedSet.of();
AndroidBinaryRule.java,BuildTarget originalTarget = javaLibraryRule.getBuildTarget();,if (javaLibraryRule != null ) BuildTarget originalTarget = javaLibraryRule.getBuildTarget();
AndroidBinaryRule.java,assetsDirectory = Optional.absent();,if (Optional != null ) assetsDirectory = Optional.absent();
AbstractCachingBuildRule.java,ProcessExecutor executor = buildContext.createProcessExecutorForUnzippingArtifact();,if (buildContext != null ) ProcessExecutor executor = buildContext.createProcessExecutorForUnzippingArtifact();
AbstractCachingBuildRule.java,Process process = processBuilder.start();,if (processBuilder != null ) Process process = processBuilder.start();
AbstractCachingBuildRule.java,int exitCode = result.getExitCode();,if (result != null ) int exitCode = result.getExitCode();
UnzipStep.java,String fileName = entry.getName();,if (entry != null ) String fileName = entry.getName();
UnzipStepTest.java,ImmutableSet<String> filesToExtract = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<String> filesToExtract = ImmutableSet.of();
DexProducedFromJavaLibraryThatContainsClassFiles.java,JavaLibraryRule javaLibraryRuleToDex = javaLibraryWithClassesList.getJavaLibraryRule();,if (javaLibraryWithClassesList != null ) JavaLibraryRule javaLibraryRuleToDex = javaLibraryWithClassesList.getJavaLibraryRule();
FileExistsAndIsNotEmptyStep.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
FileExistsAndIsNotEmptyStep.java,boolean exists = filesystem.exists(pathToFile.toString());,if (filesystem != null ) boolean exists = filesystem.exists(pathToFile.toString());
AccumulateClassNamesStep.java,ImmutableSortedSet<String> classNames = classNamesBuilder.build();,if (classNamesBuilder != null ) ImmutableSortedSet<String> classNames = classNamesBuilder.build();
MorePaths.java,Path parent = pathToDesiredLinkUnderProjectRoot.getParent();,if (pathToDesiredLinkUnderProjectRoot != null ) Path parent = pathToDesiredLinkUnderProjectRoot.getParent();
MorePaths.java,"Path target = Paths.get(base, pathToExistingFileUnderProjectRoot.toString());","if (pathToExistingFileUnderProjectRoot != null ) Path target = Paths.get(base, pathToExistingFileUnderProjectRoot.toString());"
BuildFileToJsonParser.java,JsonToken token = parser.nextToken();,if (parser != null ) JsonToken token = parser.nextToken();
BuildFileToJsonParser.java,currentObjects = Lists.newArrayList();,if (Lists != null ) currentObjects = Lists.newArrayList();
BuildFileToJsonParser.java,currentObject = Maps.newHashMap();,if (Maps != null ) currentObject = Maps.newHashMap();
BuildFileToJsonParser.java,currentObjects = Lists.newArrayList();,if (Lists != null ) currentObjects = Lists.newArrayList();
BuildFileToJsonParser.java,currentArray = Lists.newArrayList();,if (Lists != null ) currentArray = Lists.newArrayList();
BuildFileToJsonParser.java,currentFieldName = parser.getText();,if (parser != null ) currentFieldName = parser.getText();
ProjectBuildFileParser.java,buckPyStdoutParser = new BuildFileToJsonParser(buckPyProcess.getInputStream());,if (BuildFileToJsonParser(buckPyProcess != null ) buckPyStdoutParser = new BuildFileToJsonParser(buckPyProcess.getInputStream());
SplitZipStep.java,Path manifest = primaryDexClassesFile.get();,if (primaryDexClassesFile != null ) Path manifest = primaryDexClassesFile.get();
SplitZipStep.java,classNames = ImmutableSet.of();,if (ImmutableSet != null ) classNames = ImmutableSet.of();
AndroidBinaryRule.java,FilterResourcesStep filterResourcesStep = filterResourcesStepBuilder.build();,if (filterResourcesStepBuilder != null ) FilterResourcesStep filterResourcesStep = filterResourcesStepBuilder.build();
CompileStringsStep.java,regionSpecificToBaseLocaleMap = Maps.newHashMap();,if (Maps != null ) regionSpecificToBaseLocaleMap = Maps.newHashMap();
CompileStringsStep.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
AndroidBinaryRuleTest.java,ImmutableList<Step> commands = commandsBuilder.build();,if (commandsBuilder != null ) ImmutableList<Step> commands = commandsBuilder.build();
DefaultBuildRuleBuilderParams.java,this.pathRelativizer = Preconditions.checkNotNull(projectFilesystem).getPathRelativizer();,if (Preconditions != null ) this.pathRelativizer = Preconditions.checkNotNull(projectFilesystem).getPathRelativizer();
PythonLibrary.java,String srcName = new File(src).getName();,if (File(src) != null ) String srcName = new File(src).getName();
DefaultStepRunner.java,BuckEventBus buckEventBus = context.getBuckEventBus();,if (context != null ) BuckEventBus buckEventBus = context.getBuckEventBus();
DelegateRunnerWithTimeout.java,ExecutorService executor = MoreExecutors.newSingleThreadExecutor();,if (MoreExecutors != null ) ExecutorService executor = MoreExecutors.newSingleThreadExecutor();
AuditOwnerCommand.java,Set<InputRule> inputs = Sets.newHashSet();,if (Sets != null ) Set<InputRule> inputs = Sets.newHashSet();
BuildTarget.java,this.shortName = inputFile.getName();,if (inputFile != null ) this.shortName = inputFile.getName();
AbstractCachingBuildRule.java,this.pathRelativizer = params.getPathRelativizer();,if (params != null ) this.pathRelativizer = params.getPathRelativizer();
AbstractCachingBuildRule.java,this.pathRelativizer = buildRuleParams.getPathRelativizer();,if (buildRuleParams != null ) this.pathRelativizer = buildRuleParams.getPathRelativizer();
RuleKey.java,Path path = file.toPath();,if (file != null ) Path path = file.toPath();
DefaultFileHashCache.java,hashCache = Maps.newConcurrentMap();,if (Maps != null ) hashCache = Maps.newConcurrentMap();
BuildContext.java,List<File> bootclasspathEntries = androidPlatformTarget.getBootclasspathEntries();,if (androidPlatformTarget != null ) List<File> bootclasspathEntries = androidPlatformTarget.getBootclasspathEntries();
BuildContextTest.java,String androidBootclasspath = Paths.normalizePathSeparator(androidBootclasspathSupplier.get());,if (Paths != null ) String androidBootclasspath = Paths.normalizePathSeparator(androidBootclasspathSupplier.get());
Project.java,"module.nativeLibs = Paths.computeRelativePath(relativePath, ndkLibrary.getLibraryPath());","if (ndkLibrary != null ) module.nativeLibs = Paths.computeRelativePath(relativePath, ndkLibrary.getLibraryPath());"
DaemonIntegrationTest.java,SecurityManager originalSecurityManager = System.getSecurityManager();,if (System != null ) SecurityManager originalSecurityManager = System.getSecurityManager();
ArtifactCacheEvent.java,return cacheResult == null || cacheResult.isSuccess();,if (cacheResult != null ) return cacheResult == null || cacheResult.isSuccess();
Main.java,daemonOptional = Optional.absent();,if (Optional != null ) daemonOptional = Optional.absent();
Main.java,Optional<WebServer> webServerOptional = Optional.absent();,if (Optional != null ) Optional<WebServer> webServerOptional = Optional.absent();
Main.java,webServerOptional = daemonOptional.get().getWebServer();,if (daemonOptional != null ) webServerOptional = daemonOptional.get().getWebServer();
Parser.java,Path path = (Path) event.context();,if (event != null ) Path path = (Path) event.context();
CompileStringsStep.java,ProjectFilesystem filesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem filesystem = context.getProjectFilesystem();
HttpEndpoint.java,DataOutputStream out = new DataOutputStream(connection.getOutputStream());,if (DataOutputStream(connection != null ) DataOutputStream out = new DataOutputStream(connection.getOutputStream());
JarDirectoryStep.java,ZipEntry entry = entries.nextElement();,if (entries != null ) ZipEntry entry = entries.nextElement();
JarDirectoryStep.java,String entryName = entry.getName();,if (entry != null ) String entryName = entry.getName();
AndroidBinaryRule.java,"String libsDirectory = sourceDir + ""/"" + abiDirectoryComponent.get();","if (abiDirectoryComponent != null ) String libsDirectory = sourceDir + ""/"" + abiDirectoryComponent.get();"
SmartDexingStep.java,File secondaryOutputDirFile = new File(secondaryOutputDir.get());,if (File(secondaryOutputDir != null ) File secondaryOutputDirFile = new File(secondaryOutputDir.get());
SmartDexingStep.java,File secondaryInputsDirFile = new File(secondaryInputsDir.get());,if (File(secondaryInputsDir != null ) File secondaryInputsDirFile = new File(secondaryInputsDir.get());
SmartDexingStep.java,long outputHashFileModTime = new File(outputHashPath).lastModified();,if (File(outputHashPath) != null ) long outputHashFileModTime = new File(outputHashPath).lastModified();
UnzipStep.java,File parentFolder = target.getParentFile();,if (target != null ) File parentFolder = target.getParentFile();
AndroidBinaryRule.java,resDirectories = filterResourcesCommand.getFilteredResourceDirectories();,if (filterResourcesCommand != null ) resDirectories = filterResourcesCommand.getFilteredResourceDirectories();
FilterResourcesStep.java,Set<String> drawables = drawableFinder.findDrawables(originalToFiltered.keySet());,if (drawableFinder != null ) Set<String> drawables = drawableFinder.findDrawables(originalToFiltered.keySet());
FilterResourcesStepTest.java,Iterator<String> destIterator = command.getFilteredResourceDirectories().iterator();,if (command != null ) Iterator<String> destIterator = command.getFilteredResourceDirectories().iterator();
GenRDotJavaStep.java,this.androidManifestPath = androidManifest.getAbsolutePath();,if (androidManifest != null ) this.androidManifestPath = androidManifest.getAbsolutePath();
ExportFile.java,String shortName = params.getBuildTarget().getShortName();,if (params != null ) String shortName = params.getBuildTarget().getShortName();
ExportFile.java,String name = new File(outName).getName();,if (File(outName) != null ) String name = new File(outName).getName();
ExportFile.java,String pathToOutputFile = out.get();,if (out != null ) String pathToOutputFile = out.get();
Genrule.java,localPath = new File(canonicalPath).getName();,if (File(canonicalPath) != null ) localPath = new File(canonicalPath).getName();
Paths.java,String name = new File(path).getName();,if (File(path) != null ) String name = new File(path).getName();
DefaultJavaLibraryRuleTest.java,ImmutableSortedSet<BuildRule> deps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) ImmutableSortedSet<BuildRule> deps = ImmutableSortedSet.of();
DefaultJavaLibraryRuleTest.java,ImmutableSet<BuildTargetPattern> visibilityPatterns = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<BuildTargetPattern> visibilityPatterns = ImmutableSet.of();
DefaultJavaLibraryRuleTest.java,ImmutableSortedSet<BuildRule> deps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) ImmutableSortedSet<BuildRule> deps = ImmutableSortedSet.of();
DefaultJavaLibraryRuleTest.java,ImmutableSet<BuildTargetPattern> visibilityPatterns = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<BuildTargetPattern> visibilityPatterns = ImmutableSet.of();
DefaultJavaLibraryRuleTest.java,ImmutableSortedSet<BuildRule> deps = ImmutableSortedSet.of();,if (ImmutableSortedSet != null ) ImmutableSortedSet<BuildRule> deps = ImmutableSortedSet.of();
DefaultJavaLibraryRuleTest.java,ImmutableSet<BuildTargetPattern> visibilityPatterns = ImmutableSet.of();,if (ImmutableSet != null ) ImmutableSet<BuildTargetPattern> visibilityPatterns = ImmutableSet.of();
MergeAndroidResourcesStep.java,String line = scanner.nextLine();,if (scanner != null ) String line = scanner.nextLine();
MergeAndroidResourcesStep.java,boolean isMatch = matcher.matches();,if (matcher != null ) boolean isMatch = matcher.matches();
SplitZipStep.java,Matcher m = classFilePattern.matcher(entry.getName());,if (classFilePattern != null ) Matcher m = classFilePattern.matcher(entry.getName());
AuditRulesCommand.java,PrintStream out = console.getStdOut();,if (console != null ) PrintStream out = console.getStdOut();
AuditRulesCommand.java,Path root = projectFilesystem.getRootPath();,if (projectFilesystem != null ) Path root = projectFilesystem.getRootPath();
AuditRulesCommand.java,rawRules = parser.getAllRules(path.toString());,if (parser != null ) rawRules = parser.getAllRules(path.toString());
ProGuardObfuscateStepTest.java,totalSize += entry.getSize();,if (entry != null ) totalSize += entry.getSize();
ZipDirectoryWithMaxDeflateStepTest.java,ZipFile resultZip = new ZipFile(outputApk.getAbsoluteFile());,if (ZipFile(outputApk != null ) ZipFile resultZip = new ZipFile(outputApk.getAbsoluteFile());
MergeAndroidResourcesStep.java,Closer closer = Closer.create();,if (Closer != null ) Closer closer = Closer.create();
JarDirectoryStep.java,Closer closer = Closer.create();,if (Closer != null ) Closer closer = Closer.create();
ZipDirectoryWithMaxDeflateStep.java,Closer closer = Closer.create();,if (Closer != null ) Closer closer = Closer.create();
BuckTargetsPanel.java,BuckTarget target = (BuckTarget) targetsList.getSelectedValue();,if (targetsList != null ) BuckTarget target = (BuckTarget) targetsList.getSelectedValue();
AbstractBuildRule.java,ruleKey = builder.build();,if (builder != null ) ruleKey = builder.build();
RuleKey.java,logElms = Lists.newArrayList();,if (Lists != null ) logElms = Lists.newArrayList();
RuleKey.java,RuleKey ruleKey = new RuleKey(hasher.hash());,if (RuleKey(hasher != null ) RuleKey ruleKey = new RuleKey(hasher.hash());
DirArtifactCacheTest.java,RuleKey ruleKeyX = RuleKey.builder(inputRuleX).build();,if (RuleKey != null ) RuleKey ruleKeyX = RuleKey.builder(inputRuleX).build();
DirArtifactCacheTest.java,RuleKey ruleKeyX = RuleKey.builder(inputRuleX).build();,if (RuleKey != null ) RuleKey ruleKeyX = RuleKey.builder(inputRuleX).build();
DirArtifactCacheTest.java,RuleKey ruleKeyX = RuleKey.builder(inputRuleX).build();,if (RuleKey != null ) RuleKey ruleKeyX = RuleKey.builder(inputRuleX).build();
DirArtifactCacheTest.java,RuleKey ruleKeyX = RuleKey.builder(inputRuleX).build();,if (RuleKey != null ) RuleKey ruleKeyX = RuleKey.builder(inputRuleX).build();
DirArtifactCacheTest.java,RuleKey ruleKeyY = RuleKey.builder(inputRuleY).build();,if (RuleKey != null ) RuleKey ruleKeyY = RuleKey.builder(inputRuleY).build();
DirArtifactCacheTest.java,RuleKey ruleKeyZ = RuleKey.builder(inputRuleZ).build();,if (RuleKey != null ) RuleKey ruleKeyZ = RuleKey.builder(inputRuleZ).build();
DalvikAwareOutputStreamHelper.java,String name = entry.getRelativePath();,if (entry != null ) String name = entry.getRelativePath();
TargetsCommand.java,String targetsText = buckRunner.getStdout();,if (buckRunner != null ) String targetsText = buckRunner.getStdout();
TargetsCommand.java,ImmutableList<BuckTarget> targets = builder.build();,if (builder != null ) ImmutableList<BuckTarget> targets = builder.build();
BuckPluginComponent.java,ImmutableList<BuckTarget> targets = TargetsCommand.getTargets(buckRunner.get());,if (TargetsCommand != null ) ImmutableList<BuckTarget> targets = TargetsCommand.getTargets(buckRunner.get());
DalvikAwareOutputStreamHelper.java,String name = fileLike.getRelativePath();,if (fileLike != null ) String name = fileLike.getRelativePath();
MkdirStep.java,File directory = getPath(context).toFile();,if (getPath(context) != null ) File directory = getPath(context).toFile();
LinearAllocAwareZipSplitter.java,String name = fileLike.getRelativePath();,if (fileLike != null ) String name = fileLike.getRelativePath();
ZipOutputStreamHelper.java,String name = fileLike.getRelativePath();,if (fileLike != null ) String name = fileLike.getRelativePath();
Genrule.java,commandInUse = cmdExe.get();,if (cmdExe != null ) commandInUse = cmdExe.get();
Genrule.java,commandInUse = cmd.get();,if (cmd != null ) commandInUse = cmd.get();
Genrule.java,commandInUse = bash.get();,if (bash != null ) commandInUse = bash.get();
Genrule.java,commandInUse = cmd.get();,if (cmd != null ) commandInUse = cmd.get();
Genrule.java,fullyQualifiedNameToBuildRule = Maps.newHashMap();,if (Maps != null ) fullyQualifiedNameToBuildRule = Maps.newHashMap();
Genrule.java,Buildable matchingBuildable = matchingRule.getBuildable();,if (matchingRule != null ) Buildable matchingBuildable = matchingRule.getBuildable();
Genrule.java,File output = filesystem.getFileForRelativePath(matchingRule.getPathToOutputFile());,if (filesystem != null ) File output = filesystem.getFileForRelativePath(matchingRule.getPathToOutputFile());
GenruleTest.java,GenruleStep genruleStep = rule.createGenruleStep();,if (rule != null ) GenruleStep genruleStep = rule.createGenruleStep();
GenruleTest.java,GenruleStep genruleStep = rule.createGenruleStep();,if (rule != null ) GenruleStep genruleStep = rule.createGenruleStep();
GenruleTest.java,GenruleStep genruleStep = rule.createGenruleStep();,if (rule != null ) GenruleStep genruleStep = rule.createGenruleStep();
GenruleTest.java,GenruleStep genruleStep = rule.createGenruleStep();,if (rule != null ) GenruleStep genruleStep = rule.createGenruleStep();
AbstractDependencyVisitor.java,this.toExplore = Lists.newLinkedList();,if (Lists != null ) this.toExplore = Lists.newLinkedList();
AbstractDependencyVisitor.java,this.explored = Sets.newHashSet();,if (Sets != null ) this.explored = Sets.newHashSet();
PythonBinaryRule.java,Optional<String> pythonPathEntry = pythonLibrary.getPythonPathDirectory();,if (pythonLibrary != null ) Optional<String> pythonPathEntry = pythonLibrary.getPythonPathDirectory();
PythonLibrary.java,this.pythonPathDirectory = Optional.absent();,if (Optional != null ) this.pythonPathDirectory = Optional.absent();
AbstractCachingBuildRule.java,int exitCode = process.waitFor();,if (process != null ) int exitCode = process.waitFor();
AuditRulesCommand.java,Path root = projectFilesystem.getProjectRoot().toPath();,if (projectFilesystem != null ) Path root = projectFilesystem.getProjectRoot().toPath();
RepackZipEntriesStep.java,workingDirectory = Files.createTempDir();,if (Files != null ) workingDirectory = Files.createTempDir();
ZipStep.java,Verbosity verbosity = context.getVerbosity();,if (context != null ) Verbosity verbosity = context.getVerbosity();
RepackZipEntriesStepTest.java,UnzipStep unzipStep = (UnzipStep) iter.next();,if (iter != null ) UnzipStep unzipStep = (UnzipStep) iter.next();
RepackZipEntriesStepTest.java,CopyStep copyStep = (CopyStep) iter.next();,if (iter != null ) CopyStep copyStep = (CopyStep) iter.next();
RepackZipEntriesStepTest.java,ZipStep zipStep = (ZipStep) iter.next();,if (iter != null ) ZipStep zipStep = (ZipStep) iter.next();
ShellStep.java,this.stdOut = result.getStdOut();,if (result != null ) this.stdOut = result.getStdOut();
AuditOwnerCommand.java,File ruleBuck = rule.getBuildTarget().getBuildFile();,if (rule != null ) File ruleBuck = rule.getBuildTarget().getBuildFile();
TargetsCommand.java,File buildFile = buildTarget.getBuildFile();,if (buildTarget != null ) File buildFile = buildTarget.getBuildFile();
Parser.java,File buildFile = buildTarget.getBuildFile();,if (buildTarget != null ) File buildFile = buildTarget.getBuildFile();
Parser.java,File buildFile = buildTarget.getBuildFile();,if (buildTarget != null ) File buildFile = buildTarget.getBuildFile();
CassandraArtifactCache.java,int ttl = keyspaceAndTtl.get().getTtl();,if (keyspaceAndTtl != null ) int ttl = keyspaceAndTtl.get().getTtl();
CassandraArtifactCache.java,MutationBatch m = keyspace.prepareMutationBatch();,if (keyspace != null ) MutationBatch m = keyspace.prepareMutationBatch();
ZipSplitter.java,long entrySize = entry.getSize();,if (entry != null ) long entrySize = entry.getSize();
ZipSplitter.java,long entrySize = entry.getSize();,if (entry != null ) long entrySize = entry.getSize();
ZipSplitter.java,String name = fileLike.getRelativePath();,if (fileLike != null ) String name = fileLike.getRelativePath();
ZipSplitter.java,InputStream in = fileLike.getInput();,if (fileLike != null ) InputStream in = fileLike.getInput();
Parser.java,buildFileTree = supplier.get();,if (supplier != null ) buildFileTree = supplier.get();
DirectoryTraversal.java,DirectoryWithRelativePath directoryWithRelativePath = directoriesToVisit.pop();,if (directoriesToVisit != null ) DirectoryWithRelativePath directoryWithRelativePath = directoriesToVisit.pop();
Parser.java,String path = event.context().toString();,if (event != null ) String path = event.context().toString();
AndroidBinaryRule.java,"String libsDirectory = artifactsDir + ""/"" + abiDirectoryComponent.get();","if (abiDirectoryComponent != null ) String libsDirectory = artifactsDir + ""/"" + abiDirectoryComponent.get();"
NdkLibrary.java,this.makefileDirectory = getMakefileDirectory(buildRuleParams.getBuildTarget());,if (getMakefileDirectory(buildRuleParams != null ) this.makefileDirectory = getMakefileDirectory(buildRuleParams.getBuildTarget());
NdkLibrary.java,this.buildArtifactsDirectory = getBuildArtifactsDirectory(buildRuleParams.getBuildTarget());,if (getBuildArtifactsDirectory(buildRuleParams != null ) this.buildArtifactsDirectory = getBuildArtifactsDirectory(buildRuleParams.getBuildTarget());
DefaultJavaLibraryRule.java,final ArtifactCache artifactCache = context.getArtifactCache();,if (context != null ) final ArtifactCache artifactCache = context.getArtifactCache();
DefaultJavaLibraryRule.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
DefaultJavaLibraryRule.java,String hash = abiKeyHash.get();,if (abiKeyHash != null ) String hash = abiKeyHash.get();
AbstractCachingBuildRule.java,BuckEventBus eventBus = context.getEventBus();,if (context != null ) BuckEventBus eventBus = context.getEventBus();
AbstractCachingBuildRule.java,RuleKey ruleKeyNoDeps = abiRule.getRuleKeyWithoutDeps();,if (abiRule != null ) RuleKey ruleKeyNoDeps = abiRule.getRuleKeyWithoutDeps();
AbstractCachingBuildRule.java,String pathToOutputFile = buildable.getPathToOutputFile();,if (buildable != null ) String pathToOutputFile = buildable.getPathToOutputFile();
AbstractCachingBuildRule.java,String pathToOutputFile = buildable.getPathToOutputFile();,if (buildable != null ) String pathToOutputFile = buildable.getPathToOutputFile();
ArchivingBuildable.java,this.outputZip = getPathToOutputZip(buildRuleParams.getBuildTarget());,if (getPathToOutputZip(buildRuleParams != null ) this.outputZip = getPathToOutputZip(buildRuleParams.getBuildTarget());
ArchivingBuildable.java,String outputParentDirectory = new File(pathToOutputFile).getParent();,if (File(pathToOutputFile) != null ) String outputParentDirectory = new File(pathToOutputFile).getParent();
DefaultJavaLibraryRuleIntegrationTest.java,File[] cacheEntries = buildCache.listFiles();,if (buildCache != null ) File[] cacheEntries = buildCache.listFiles();
DefaultJavaLibraryRuleTest.java,projectRoot = projectFilesystem.getProjectRoot();,if (projectFilesystem != null ) projectRoot = projectFilesystem.getProjectRoot();
AbstractCachingBuildRuleTest.java,String pathToSuccessFile = cachingRule.getPathToSuccessFile();,if (cachingRule != null ) String pathToSuccessFile = cachingRule.getPathToSuccessFile();
AbstractCachingBuildRuleTest.java,String pathToSuccessFile = buildRule.getPathToSuccessFile();,if (buildRule != null ) String pathToSuccessFile = buildRule.getPathToSuccessFile();
AbstractCachingBuildRuleTest.java,BuildRuleSuccess success = result.get();,if (result != null ) BuildRuleSuccess success = result.get();
AbstractCachingBuildRuleTest.java,String pathToSuccessFile = cachingRule.getPathToSuccessFile();,if (cachingRule != null ) String pathToSuccessFile = cachingRule.getPathToSuccessFile();
Genrule.java,fullyQualifiedNameToBuildRule = Maps.newHashMap();,if (Maps != null ) fullyQualifiedNameToBuildRule = Maps.newHashMap();
Genrule.java,Buildable matchingBuildable = matchingRule.getBuildable();,if (matchingRule != null ) Buildable matchingBuildable = matchingRule.getBuildable();
Genrule.java,File output = filesystem.getFileForRelativePath(matchingRule.getPathToOutputFile());,if (filesystem != null ) File output = filesystem.getFileForRelativePath(matchingRule.getPathToOutputFile());
Project.java,"module.nativeLibs = Paths.computeRelativePath(relativePath, ndkLibraryRule.getLibraryPath());","if (ndkLibraryRule != null ) module.nativeLibs = Paths.computeRelativePath(relativePath, ndkLibraryRule.getLibraryPath());"
PythonBinaryRule.java,Optional<String> pythonPathEntry = pythonLibraryRule.getPythonPathDirectory();,if (pythonLibraryRule != null ) Optional<String> pythonPathEntry = pythonLibraryRule.getPythonPathDirectory();
AndroidBinaryRule.java,String dirName = new File(classpathEntry).getParent();,if (File(classpathEntry) != null ) String dirName = new File(classpathEntry).getParent();
AndroidBinaryRuleTest.java,String rootPath = traversal.getRoot().getPath();,if (traversal != null ) String rootPath = traversal.getRoot().getPath();
AndroidBinaryRuleTest.java,String rootPath = traversal.getRoot().getPath();,if (traversal != null ) String rootPath = traversal.getRoot().getPath();
Project.java,boolean isAndroidRule = projectRule.isAndroidRule();,if (projectRule != null ) boolean isAndroidRule = projectRule.isAndroidRule();
Project.java,boolean depShouldExportDeps = dep.getExportDeps() || rule.isPackagingRule();,if (rule != null ) boolean depShouldExportDeps = dep.getExportDeps() || rule.isPackagingRule();
TargetsCommand.java,String outputPath = target.getValue().getPathToOutputFile();,if (target != null ) String outputPath = target.getValue().getPathToOutputFile();
TargetsCommand.java,String outputPath = buildRule.getPathToOutputFile();,if (buildRule != null ) String outputPath = buildRule.getPathToOutputFile();
AnnotationProcessingParams.java,String pathToOutput = rule.getPathToOutputFile();,if (rule != null ) String pathToOutput = rule.getPathToOutputFile();
BuildTargetSourcePath.java,String path = rule.getPathToOutputFile();,if (rule != null ) String path = rule.getPathToOutputFile();
Genrule.java,String output = rule.getPathToOutputFile();,if (rule != null ) String output = rule.getPathToOutputFile();
AndroidResourceRuleTest.java,String rootPath = traversal.getRoot().getPath();,if (traversal != null ) String rootPath = traversal.getRoot().getPath();
AbstractCachingBuildRule.java,Optional<RuleKey> ruleKeyNoDeps = abiRule.getRuleKeyWithoutDeps();,if (abiRule != null ) Optional<RuleKey> ruleKeyNoDeps = abiRule.getRuleKeyWithoutDeps();
AbstractBuildRule.java,RuleKey ruleKey = builder.build();,if (builder != null ) RuleKey ruleKey = builder.build();
RuleKeyTest.java,String asWrittenToDisk = original.toString();,if (original != null ) String asWrittenToDisk = original.toString();
TestCommand.java,Ansi ansi = console.getAnsi();,if (console != null ) Ansi ansi = console.getAnsi();
TestCommand.java,numFailures += summary.getFailureCount();,if (summary != null ) numFailures += summary.getFailureCount();
JarDirectoryStep.java,Set<String> directoryEntriesInsertedIntoOutputJar = Sets.newHashSet();,if (Sets != null ) Set<String> directoryEntriesInsertedIntoOutputJar = Sets.newHashSet();
AbstractCommandRunner.java,this.artifactCache = Preconditions.checkNotNull(params.getArtifactCache());,if (Preconditions != null ) this.artifactCache = Preconditions.checkNotNull(params.getArtifactCache());
DefaultJavaLibraryRule.java,String resource = rawResource.resolve(context).toString();,if (rawResource != null ) String resource = rawResource.resolve(context).toString();
PrebuiltNativeLibraryRuleTest.java,String rootPath = traversal.getRoot().getPath();,if (traversal != null ) String rootPath = traversal.getRoot().getPath();
BuildContextTest.java,String androidBootclasspath = androidBootclasspathSupplier.get();,if (androidBootclasspathSupplier != null ) String androidBootclasspath = androidBootclasspathSupplier.get();
RepackZipEntriesStepTest.java,ZipStep zipCommand = (ZipStep) iter.next();,if (iter != null ) ZipStep zipCommand = (ZipStep) iter.next();
ZipSplitterTest.java,privateDir = Files.createTempDir();,if (Files != null ) privateDir = Files.createTempDir();
OutputKey.java,RuleKey.Builder builder = RuleKey.builder();,if (RuleKey != null ) RuleKey.Builder builder = RuleKey.builder();
OutputKey.java,RuleKey ruleKey = builder.build();,if (builder != null ) RuleKey ruleKey = builder.build();
RepackZipEntriesStepTest.java,ShellStep zipCommand = iter.next();,if (iter != null ) ShellStep zipCommand = iter.next();
TestCommand.java,ExecutionContext executionContext = build.getExecutionContext();,if (build != null ) ExecutionContext executionContext = build.getExecutionContext();
HttpEndpoint.java,DataOutputStream out = new DataOutputStream(connection.getOutputStream());,if (DataOutputStream(connection != null ) DataOutputStream out = new DataOutputStream(connection.getOutputStream());
ChromeTraceBuildListenerTest.java,Supplier<Long> threadIdSupplier = BuckEventBus.getDefaultThreadIdSupplier();,if (BuckEventBus != null ) Supplier<Long> threadIdSupplier = BuckEventBus.getDefaultThreadIdSupplier();
SimpleConsoleEventBusListenerTest.java,Supplier<Long> threadIdSupplier = BuckEventBus.getDefaultThreadIdSupplier();,if (BuckEventBus != null ) Supplier<Long> threadIdSupplier = BuckEventBus.getDefaultThreadIdSupplier();
SuperConsoleEventBusListenerTest.java,Supplier<Long> threadIdSupplier = BuckEventBus.getDefaultThreadIdSupplier();,if (BuckEventBus != null ) Supplier<Long> threadIdSupplier = BuckEventBus.getDefaultThreadIdSupplier();
JarDirectoryStep.java,Closer closer = Closer.create();,if (Closer != null ) Closer closer = Closer.create();
HttpUtil.java,int responseCode = connection.getResponseCode();,if (connection != null ) int responseCode = connection.getResponseCode();
JUnitRunner.java,Method[] publicInstanceMethods = testClass.getMethods();,if (testClass != null ) Method[] publicInstanceMethods = testClass.getMethods();
JUnitRunner.java,"Request request = Request.method(testClass, method.getName());","if (method != null ) Request request = Request.method(testClass, method.getName());"
TestResult.java,Result result = runTestAndProduceJUnitResult.call();,if (runTestAndProduceJUnitResult != null ) Result result = runTestAndProduceJUnitResult.call();
TestResult.java,int numFailures = result.getFailureCount();,if (result != null ) int numFailures = result.getFailureCount();
TestResult.java,String className = testMethod.getDeclaringClass().getCanonicalName();,if (testMethod != null ) String className = testMethod.getDeclaringClass().getCanonicalName();
TestResult.java,String methodName = testMethod.getName();,if (testMethod != null ) String methodName = testMethod.getName();
InstallCommand.java,PrintStream stdOut = console.getStdOut();,if (console != null ) PrintStream stdOut = console.getStdOut();
InstallCommand.java,long start = System.currentTimeMillis();,if (System != null ) long start = System.currentTimeMillis();
InstallCommand.java,long end = System.currentTimeMillis();,if (System != null ) long end = System.currentTimeMillis();
ProjectIntegrationTest.java,String stderr = result.getStderr();,if (result != null ) String stderr = result.getStderr();
BuildTarget.java,String parentDirectoryName = buildFile.getParentFile().getAbsolutePath();,if (buildFile != null ) String parentDirectoryName = buildFile.getParentFile().getAbsolutePath();
AndroidBinaryRule.java,"String libsDirectory = sourceDir + ""/"" + abiDirectoryComponent.get();","if (abiDirectoryComponent != null ) String libsDirectory = sourceDir + ""/"" + abiDirectoryComponent.get();"
GenruleTest.java,"String basePathWithTrailingDot = new File(""."").getAbsolutePath();","if (File("" != null ) String basePathWithTrailingDot = new File(""."").getAbsolutePath();"
GenruleTest.java,"String basePathWithTrailingDot = new File(""."").getAbsolutePath();","if (File("" != null ) String basePathWithTrailingDot = new File(""."").getAbsolutePath();"
GenruleTest.java,"String basePathWithTrailingDot = new File(""."").getAbsolutePath();","if (File("" != null ) String basePathWithTrailingDot = new File(""."").getAbsolutePath();"
CassandraArtifactCache.java,this.keyspace = context.getClient();,if (context != null ) this.keyspace = context.getClient();
CassandraArtifactCache.java,MutationBatch m = keyspace.prepareMutationBatch();,if (keyspace != null ) MutationBatch m = keyspace.prepareMutationBatch();
Parser.java,this.buildFiles = buildFileTreeSupplier.get();,if (buildFileTreeSupplier != null ) this.buildFiles = buildFileTreeSupplier.get();
Parser.java,buildFiles = buildFileTreeSupplier.get();,if (buildFileTreeSupplier != null ) buildFiles = buildFileTreeSupplier.get();
ProjectBuildFileParser.java,Closer closer = Closer.create();,if (Closer != null ) Closer closer = Closer.create();
Project.java,String keystorePathRelativeToProjectRoot = keystoreProperties.getKeystore();,if (keystoreProperties != null ) String keystorePathRelativeToProjectRoot = keystoreProperties.getKeystore();
Project.java,String keystorePath = keystorePathRelativeToProjectRoot.substring(relativePath.length());,if (keystorePathRelativeToProjectRoot != null ) String keystorePath = keystorePathRelativeToProjectRoot.substring(relativePath.length());
KeystoreProperties.java,File keystoreDirectory = keystorePropertiesFile.getParentFile();,if (keystorePropertiesFile != null ) File keystoreDirectory = keystorePropertiesFile.getParentFile();
ReadKeystorePropertiesAndSignApkStepTest.java,SignApkStep signApkCommand = readKeystorePropertiesAndSignCommand.getSignApkCommand();,if (readKeystorePropertiesAndSignCommand != null ) SignApkStep signApkCommand = readKeystorePropertiesAndSignCommand.getSignApkCommand();
KeystoreRuleTest.java,KeystoreProperties keystoreProperties = keystore.getKeystoreProperties();,if (keystore != null ) KeystoreProperties keystoreProperties = keystore.getKeystoreProperties();
BuildFileToJsonParser.java,currentArray = Lists.newArrayList();,if (Lists != null ) currentArray = Lists.newArrayList();
ProjectBuildFileParser.java,executor = Executors.newSingleThreadExecutor();,if (Executors != null ) executor = Executors.newSingleThreadExecutor();
AndroidBinaryRule.java,TargetCpuType filter = cpuFilter.get();,if (cpuFilter != null ) TargetCpuType filter = cpuFilter.get();
Parser.java,this.absolutePathToProjectRoot = projectFilesystem.getProjectRoot().getAbsolutePath();,if (projectFilesystem != null ) this.absolutePathToProjectRoot = projectFilesystem.getProjectRoot().getAbsolutePath();
Parser.java,Set<File> buildTargetFiles = Sets.newHashSet();,if (Sets != null ) Set<File> buildTargetFiles = Sets.newHashSet();
Parser.java,File buildFile = buildTarget.getBuildFile();,if (buildTarget != null ) File buildFile = buildTarget.getBuildFile();
AbstractCachingBuildRule.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
AbstractCachingBuildRule.java,Optional<RuleKey> cachedRuleKey = getRuleKeyOnDisk(context.getProjectFilesystem());,if (getRuleKeyOnDisk(context != null ) Optional<RuleKey> cachedRuleKey = getRuleKeyOnDisk(context.getProjectFilesystem());
Main.java,EventBus events = buckEvents.getEventBus();,if (buckEvents != null ) EventBus events = buckEvents.getEventBus();
BuckEvent.java,nanoTime = System.nanoTime();,if (System != null ) nanoTime = System.nanoTime();
BuckEvent.java,threadId = Thread.currentThread().getId();,if (Thread != null ) threadId = Thread.currentThread().getId();
Genrule.java,fullyQualifiedNameToBuildRule = Maps.newHashMap();,if (Maps != null ) fullyQualifiedNameToBuildRule = Maps.newHashMap();
GenruleTest.java,"String basePathWithTrailingDot = new File(""."").getAbsolutePath();","if (File("" != null ) String basePathWithTrailingDot = new File(""."").getAbsolutePath();"
GenruleTest.java,"String basePathWithTrailingDot = new File(""."").getAbsolutePath();","if (File("" != null ) String basePathWithTrailingDot = new File(""."").getAbsolutePath();"
GenruleTest.java,String transformedString = rule.replaceBinaryBuildRuleRefsInCmd();,if (rule != null ) String transformedString = rule.replaceBinaryBuildRuleRefsInCmd();
GenruleTest.java,String transformedString = rule.replaceBinaryBuildRuleRefsInCmd();,if (rule != null ) String transformedString = rule.replaceBinaryBuildRuleRefsInCmd();
GenruleTest.java,String transformedString = rule.replaceBinaryBuildRuleRefsInCmd();,if (rule != null ) String transformedString = rule.replaceBinaryBuildRuleRefsInCmd();
Main.java,ExecutorService busExecutor = Executors.newCachedThreadPool();,if (Executors != null ) ExecutorService busExecutor = Executors.newCachedThreadPool();
BuildRuleFactoryParams.java,SourcePath sourcePath = asSourcePath(option.get());,if (asSourcePath(option != null ) SourcePath sourcePath = asSourcePath(option.get());
AuditOwnerCommandTest.java,buckConfig = BuckConfig.emptyConfig();,if (BuckConfig != null ) buckConfig = BuckConfig.emptyConfig();
BuckConfigTest.java,BuckConfig emptyConfig = BuckConfig.emptyConfig();,if (BuckConfig != null ) BuckConfig emptyConfig = BuckConfig.emptyConfig();
CleanCommandTest.java,BuckConfig buckConfig = BuckConfig.emptyConfig();,if (BuckConfig != null ) BuckConfig buckConfig = BuckConfig.emptyConfig();
InstallCommandOptionsTest.java,buckConfig = BuckConfig.emptyConfig();,if (BuckConfig != null ) buckConfig = BuckConfig.emptyConfig();
InstallCommandTest.java,buckConfig = BuckConfig.emptyConfig();,if (BuckConfig != null ) buckConfig = BuckConfig.emptyConfig();
TestCommandTest.java,TestCommandOptions options = new TestCommandOptions(BuckConfig.emptyConfig());,if (TestCommandOptions(BuckConfig != null ) TestCommandOptions options = new TestCommandOptions(BuckConfig.emptyConfig());
TestCommandTest.java,TestCommandOptions options = new TestCommandOptions(BuckConfig.emptyConfig());,if (TestCommandOptions(BuckConfig != null ) TestCommandOptions options = new TestCommandOptions(BuckConfig.emptyConfig());
Parser.java,Path path = (Path) event.context();,if (event != null ) Path path = (Path) event.context();
ParserTest.java,buildFileParser = new ProjectBuildFileParser(filesystem.getIgnorePaths());,if (ProjectBuildFileParser(filesystem != null ) buildFileParser = new ProjectBuildFileParser(filesystem.getIgnorePaths());
InstallCommandTest.java,"List<IDevice> filteredDevices = installCommand.filterDevices(devices, options.adbOptions());","if (options != null ) List<IDevice> filteredDevices = installCommand.filterDevices(devices, options.adbOptions());"
InstallCommandTest.java,"List<IDevice> filteredDevices = installCommand.filterDevices(devices, options.adbOptions());","if (options != null ) List<IDevice> filteredDevices = installCommand.filterDevices(devices, options.adbOptions());"
InstallCommandTest.java,"List<IDevice> filteredDevices = installCommand.filterDevices(devices, options.adbOptions());","if (options != null ) List<IDevice> filteredDevices = installCommand.filterDevices(devices, options.adbOptions());"
InstallCommandTest.java,"List<IDevice> filteredDevices = installCommand.filterDevices(devices, options.adbOptions());","if (options != null ) List<IDevice> filteredDevices = installCommand.filterDevices(devices, options.adbOptions());"
InstallCommandTest.java,"List<IDevice> filteredDevices = installCommand.filterDevices(devices, options.adbOptions());","if (options != null ) List<IDevice> filteredDevices = installCommand.filterDevices(devices, options.adbOptions());"
InstallCommandTest.java,"List<IDevice> filteredDevices = installCommand.filterDevices(devices, options.adbOptions());","if (options != null ) List<IDevice> filteredDevices = installCommand.filterDevices(devices, options.adbOptions());"
InstallCommandTest.java,"filteredDevices = installCommand.filterDevices(devices, options.adbOptions());","if (options != null ) filteredDevices = installCommand.filterDevices(devices, options.adbOptions());"
InstallCommandTest.java,"filteredDevices = installCommand.filterDevices(devices, options.adbOptions());","if (options != null ) filteredDevices = installCommand.filterDevices(devices, options.adbOptions());"
InstallCommandTest.java,"filteredDevices = installCommand.filterDevices(devices, options.adbOptions());","if (options != null ) filteredDevices = installCommand.filterDevices(devices, options.adbOptions());"
InstallCommandTest.java,"filteredDevices = installCommand.filterDevices(devices, options.adbOptions());","if (options != null ) filteredDevices = installCommand.filterDevices(devices, options.adbOptions());"
DefaultJavaLibraryRule.java,outputClasspathEntries = ImmutableSet.of();,if (ImmutableSet != null ) outputClasspathEntries = ImmutableSet.of();
AbstractCachingBuildRule.java,RuleKey ruleKeyNoDeps = abiRule.getRuleKeyWithoutDeps();,if (abiRule != null ) RuleKey ruleKeyNoDeps = abiRule.getRuleKeyWithoutDeps();
AbstractCachingBuildRule.java,RuleKey cachedRuleKeyNoDeps = abiRule.getRuleKeyWithoutDepsOnDisk();,if (abiRule != null ) RuleKey cachedRuleKeyNoDeps = abiRule.getRuleKeyWithoutDepsOnDisk();
AbstractCachingBuildRule.java,String abiKeyForDeps = abiRule.getAbiKeyForDeps();,if (abiRule != null ) String abiKeyForDeps = abiRule.getAbiKeyForDeps();
AbstractCachingBuildRule.java,String cachedAbiKeyForDeps = abiRule.getAbiKeyForDepsOnDisk();,if (abiRule != null ) String cachedAbiKeyForDeps = abiRule.getAbiKeyForDepsOnDisk();
AbstractCachingBuildRule.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
AbiWriterTest.java,ArrayList<FileAndSource> targets = Lists.newArrayList();,if (Lists != null ) ArrayList<FileAndSource> targets = Lists.newArrayList();
AndroidBinaryRule.java,TargetCpuType filter = cpuFilter.get();,if (cpuFilter != null ) TargetCpuType filter = cpuFilter.get();
AndroidTransitiveDependencyGraph.java,String nativeLibsDirectory = androidRule.getNativeLibs();,if (androidRule != null ) String nativeLibsDirectory = androidRule.getNativeLibs();
NdkLibraryRule.java,String basePathWithSlash = buildRuleParams.getBuildTarget().getBasePathWithSlash();,if (buildRuleParams != null ) String basePathWithSlash = buildRuleParams.getBuildTarget().getBasePathWithSlash();
AbstractCommandRunner.java,this.eventBus = Preconditions.checkNotNull(params.getEventBus());,if (Preconditions != null ) this.eventBus = Preconditions.checkNotNull(params.getEventBus());
InstallCommand.java,File apk = new File(installableBuildRule.getApkPath());,if (File(installableBuildRule != null ) File apk = new File(installableBuildRule.getApkPath());
DefaultJavaLibraryRule.java,String abiKey = abiKeySupplier.get();,if (abiKeySupplier != null ) String abiKey = abiKeySupplier.get();
AbstractCachingBuildRule.java,EventBus eventBus = context.getEventBus();,if (context != null ) EventBus eventBus = context.getEventBus();
BuckEvent.java,timestamp = System.currentTimeMillis();,if (System != null ) timestamp = System.currentTimeMillis();
AbstractCachingBuildRule.java,List<String> lines = Lists.newArrayList();,if (Lists != null ) List<String> lines = Lists.newArrayList();
TestCommand.java,StepRunner stepRunner = build.getStepRunner();,if (build != null ) StepRunner stepRunner = build.getStepRunner();
DefaultJavaLibraryRuleTest.java,ImmutableList<String> parameters = scenario.buildAndGetCompileParameters();,if (scenario != null ) ImmutableList<String> parameters = scenario.buildAndGetCompileParameters();
SymlinkFileStep.java,this.target = Preconditions.checkNotNull(target).getAbsolutePath();,if (Preconditions != null ) this.target = Preconditions.checkNotNull(target).getAbsolutePath();
BuildCommand.java,ExecutorService busExecutor = Executors.newCachedThreadPool();,if (Executors != null ) ExecutorService busExecutor = Executors.newCachedThreadPool();
Annotations.java,AnnotationValue rhs = value.getValue();,if (value != null ) AnnotationValue rhs = value.getValue();
Annotations.java,SortedSet<String> converted = Sets.newTreeSet();,if (Sets != null ) SortedSet<String> converted = Sets.newTreeSet();
TypeSummary.java,Set<String> nestedTypes = Sets.newTreeSet();,if (Sets != null ) Set<String> nestedTypes = Sets.newTreeSet();
TypeSummary.java,Set<String> contained = Sets.newTreeSet();,if (Sets != null ) Set<String> contained = Sets.newTreeSet();
TypeSummary.java,Set<String> enumValues = Sets.newLinkedHashSet();,if (Sets != null ) Set<String> enumValues = Sets.newLinkedHashSet();
BuckConfigTest.java,ImmutableSet<String> ignorePaths = config.getIgnorePaths();,if (config != null ) ImmutableSet<String> ignorePaths = config.getIgnorePaths();
BuckConfigTest.java,ImmutableSet<String> ignorePaths = config.getIgnorePaths();,if (config != null ) ImmutableSet<String> ignorePaths = config.getIgnorePaths();
BuckConfigTest.java,ImmutableSet<String> ignorePaths = config.getIgnorePaths();,if (config != null ) ImmutableSet<String> ignorePaths = config.getIgnorePaths();
BuildFileTreeTest.java,File tempDir = Files.createTempDir();,if (Files != null ) File tempDir = Files.createTempDir();
BuildFileTreeTest.java,File tempDir = Files.createTempDir();,if (Files != null ) File tempDir = Files.createTempDir();
JavacInMemoryStep.java,abiKey = abiWriter.computeAbiKey();,if (abiWriter != null ) abiKey = abiWriter.computeAbiKey();
TestCommand.java,StepRunner stepRunner = build.getCommandRunner();,if (build != null ) StepRunner stepRunner = build.getCommandRunner();
AbstractCachingBuildRule.java,StepRunner stepRunner = context.getCommandRunner();,if (context != null ) StepRunner stepRunner = context.getCommandRunner();
AbstractCachingBuildRule.java,List<InputRule> inputs = Lists.newArrayList();,if (Lists != null ) List<InputRule> inputs = Lists.newArrayList();
ProjectWorkspace.java,File directory = path.getParent().toFile();,if (path != null ) File directory = path.getParent().toFile();
AndroidBinaryBuildRuleFactory.java,ParseContext buildFileParseContext = ParseContext.forBaseName(params.target.getBaseName());,if (ParseContext != null ) ParseContext buildFileParseContext = ParseContext.forBaseName(params.target.getBaseName());
AndroidInstrumentationApkRuleFactory.java,ParseContext buildFileParseContext = ParseContext.forBaseName(params.target.getBaseName());,if (ParseContext != null ) ParseContext buildFileParseContext = ParseContext.forBaseName(params.target.getBaseName());
ApkGenruleBuildRuleFactory.java,ParseContext buildFileParseContext = ParseContext.forBaseName(params.target.getBaseName());,if (ParseContext != null ) ParseContext buildFileParseContext = ParseContext.forBaseName(params.target.getBaseName());
JavaLibraryBuildRuleFactory.java,ParseContext buildFileParseContext = ParseContext.forBaseName(target.getBaseName());,if (ParseContext != null ) ParseContext buildFileParseContext = ParseContext.forBaseName(target.getBaseName());
AbstractBuildRuleFactory.java,ParseContext buildFileParseContext = ParseContext.forBaseName(target.getBaseName());,if (ParseContext != null ) ParseContext buildFileParseContext = ParseContext.forBaseName(target.getBaseName());
AbstractBuildRuleFactory.java,final ParseContext parseContext = ParseContext.forBaseName(params.target.getBaseName());,if (ParseContext != null ) final ParseContext parseContext = ParseContext.forBaseName(params.target.getBaseName());
BuildRuleFactoryParams.java,this.sourcePathContext = ParseContext.forBaseName(target.getBaseName());,if (ParseContext != null ) this.sourcePathContext = ParseContext.forBaseName(target.getBaseName());
Build.java,Set<BuildRule> rulesToBuild = dependencyGraph.getNodesWithNoIncomingEdges();,if (dependencyGraph != null ) Set<BuildRule> rulesToBuild = dependencyGraph.getNodesWithNoIncomingEdges();
ThreadTrace.java,String trace = threadTracer.get().getFormattedTrace();,if (threadTracer != null ) String trace = threadTracer.get().getFormattedTrace();
ThreadTrace.java,this.startTime = System.currentTimeMillis();,if (System != null ) this.startTime = System.currentTimeMillis();
ThreadTrace.java,int outstandingEventCount = outstandingEvents.size();,if (outstandingEvents != null ) int outstandingEventCount = outstandingEvents.size();
ThreadTrace.java,long now = System.currentTimeMillis();,if (System != null ) long now = System.currentTimeMillis();
ThreadTrace.java,long elapsed = now - startEvent.getEventTime();,if (startEvent != null ) long elapsed = now - startEvent.getEventTime();
ThreadTrace.java,int count = events.size();,if (events != null ) int count = events.size();
ThreadTrace.java,long now = System.currentTimeMillis();,if (System != null ) long now = System.currentTimeMillis();
ThreadTrace.java,LinkedList<String> indent = Lists.newLinkedList();,if (Lists != null ) LinkedList<String> indent = Lists.newLinkedList();
TraceEvent.java,this.eventTime = System.currentTimeMillis();,if (System != null ) this.eventTime = System.currentTimeMillis();
TraceEventTest.java,ThreadTrace threadTrace = ThreadTrace.threadTracer.get(); // Use ThreadTrace API to capture id.,if (id != null ) ThreadTrace threadTrace = ThreadTrace.threadTracer.get(); // Use ThreadTrace API to capture id.
TraceEventTest.java,ThreadTrace threadTrace = ThreadTrace.threadTracer.get(); // Use ThreadTrace API handlers.,if (handlers != null ) ThreadTrace threadTrace = ThreadTrace.threadTracer.get(); // Use ThreadTrace API handlers.
AbstractBuildRule.java,RuleKey ruleKey = ruleKeyBuilder().build();,if (ruleKeyBuilder() != null ) RuleKey ruleKey = ruleKeyBuilder().build();
BuildCommand.java,Verbosity verbosity = options.getVerbosity();,if (options != null ) Verbosity verbosity = options.getVerbosity();
TestCommand.java,Verbosity verbosity = options.getVerbosity();,if (options != null ) Verbosity verbosity = options.getVerbosity();
UninstallCommand.java,Verbosity verbosity = options.getVerbosity();,if (options != null ) Verbosity verbosity = options.getVerbosity();
AuditOwnerCommandTest.java,OutputStream nullOut = ByteStreams.nullOutputStream();,if (ByteStreams != null ) OutputStream nullOut = ByteStreams.nullOutputStream();
InstallCommandTest.java,OutputStream nullOut = ByteStreams.nullOutputStream();,if (ByteStreams != null ) OutputStream nullOut = ByteStreams.nullOutputStream();
TargetsCommandTest.java,String output = stdOutStream.getContentsAsString(Charset.defaultCharset());,if (stdOutStream != null ) String output = stdOutStream.getContentsAsString(Charset.defaultCharset());
ShellStepTest.java,Ansi ansi = Ansi.withoutTty();,if (Ansi != null ) Ansi ansi = Ansi.withoutTty();
ProjectConfigRule.java,BuildRule srcRule = buildRuleBuilderParams.get(srcTargetId.orNull());,if (buildRuleBuilderParams != null ) BuildRule srcRule = buildRuleBuilderParams.get(srcTargetId.orNull());
ProjectConfigRule.java,BuildRule testRule = buildRuleBuilderParams.get(testTargetId.orNull());,if (buildRuleBuilderParams != null ) BuildRule testRule = buildRuleBuilderParams.get(testTargetId.orNull());
MoreFiles.java,Iterator<String> iter = lines.iterator();,if (lines != null ) Iterator<String> iter = lines.iterator();
MoreFiles.java,String line = reader.readLine();,if (reader != null ) String line = reader.readLine();
AnnotationProcessingParams.java,BuildRule rule = buildRuleBuilderParams.get(target.getFullyQualifiedName());,if (buildRuleBuilderParams != null ) BuildRule rule = buildRuleBuilderParams.get(target.getFullyQualifiedName());
Parser.java,this.parsedBuildFiles = Sets.newHashSet();,if (Sets != null ) this.parsedBuildFiles = Sets.newHashSet();
AndroidInstrumentationApkRuleFactory.java,ParseContext buildFileParseContext = ParseContext.forBaseName(target.getBaseName());,if (ParseContext != null ) ParseContext buildFileParseContext = ParseContext.forBaseName(target.getBaseName());
AnnotationProcessingParams.java,BuildRule rule = buildRuleIndex.get(target.getFullyQualifiedName());,if (buildRuleIndex != null ) BuildRule rule = buildRuleIndex.get(target.getFullyQualifiedName());
ProjectConfigRule.java,BuildRule srcRule = buildRuleIndex.get(srcTargetId.orNull());,if (buildRuleIndex != null ) BuildRule srcRule = buildRuleIndex.get(srcTargetId.orNull());
ProjectConfigRule.java,BuildRule testRule = buildRuleIndex.get(testTargetId.orNull());,if (buildRuleIndex != null ) BuildRule testRule = buildRuleIndex.get(testTargetId.orNull());
RuleMap.java,Iterable<BuildRule> rules = buildRuleIndex.values();,if (buildRuleIndex != null ) Iterable<BuildRule> rules = buildRuleIndex.values();
TargetsCommand.java,File outputFile = target.getValue().getOutput();,if (target != null ) File outputFile = target.getValue().getOutput();
TargetsCommand.java,File outputFile = buildRule.getOutput();,if (buildRule != null ) File outputFile = buildRule.getOutput();
TestCommand.java,File output = path.getOutput();,if (path != null ) File output = path.getOutput();
TestCommand.java,String classDirectory = output.getAbsolutePath();,if (output != null ) String classDirectory = output.getAbsolutePath();
AnnotationProcessingParams.java,File output = rule.getOutput();,if (rule != null ) File output = rule.getOutput();
DefaultJavaLibraryRule.java,outputClasspathEntries = ImmutableSet.of(getOutput().getPath());,if (ImmutableSet != null ) outputClasspathEntries = ImmutableSet.of(getOutput().getPath());
JavaTestRule.java,File outputFile = rule.getOutput();,if (rule != null ) File outputFile = rule.getOutput();
ExportFileRule.java,File outputFile = out.get();,if (out != null ) File outputFile = out.get();
Genrule.java,File output = rule.getOutput();,if (rule != null ) File output = rule.getOutput();
AbstractCachingBuildRule.java,Optional<RuleKey> cachedRuleKey = getRuleKeyOnDisk(context.getProjectFilesystem());,if (getRuleKeyOnDisk(context != null ) Optional<RuleKey> cachedRuleKey = getRuleKeyOnDisk(context.getProjectFilesystem());
JUnitStep.java,boolean shouldPrintOutWhenTestsStartAndStop = context.getVerbosity().shouldPrintCommand();,if (context != null ) boolean shouldPrintOutWhenTestsStartAndStop = context.getVerbosity().shouldPrintCommand();
JavaTestRule.java,"classNamesForSources = getClassNamesForSources(rule.getJavaSrcs(), rule.getOutput());","if (rule != null ) classNamesForSources = getClassNamesForSources(rule.getJavaSrcs(), rule.getOutput());"
ShTestRule.java,ProjectFilesystem filesystem = buildContext.getProjectFilesystem();,if (buildContext != null ) ProjectFilesystem filesystem = buildContext.getProjectFilesystem();
OutputKey.java,RuleKey.Builder builder = RuleKey.builder();,if (RuleKey != null ) RuleKey.Builder builder = RuleKey.builder();
SmartDexingStep.java,outputToInputs = inputResolver.createOutputToInputs();,if (inputResolver != null ) outputToInputs = inputResolver.createOutputToInputs();
SplitZipStep.java,String filename = SmartDexingStep.transformInputToDexOutput(secondary.getName());,if (SmartDexingStep != null ) String filename = SmartDexingStep.transformInputToDexOutput(secondary.getName());
AbstractCommandRunner.java,BuildTargetParser buildTargetParser = parser.getBuildTargetParser();,if (parser != null ) BuildTargetParser buildTargetParser = parser.getBuildTargetParser();
BuildCommand.java,"buildTargets = getBuildTargets(parser, options.getArgumentsFormattedAsBuildTargets());","if (options != null ) buildTargets = getBuildTargets(parser, options.getArgumentsFormattedAsBuildTargets());"
BuildCommand.java,Path path = (Path) event.context();,if (event != null ) Path path = (Path) event.context();
BuildFileToJsonParser.java,Closer closer = Closer.create();,if (Closer != null ) Closer closer = Closer.create();
Parser.java,String fullyQualifiedName = buildTarget.getFullyQualifiedName();,if (buildTarget != null ) String fullyQualifiedName = buildTarget.getFullyQualifiedName();
ParserTest.java,File projectDirectoryRoot = tempDir.getRoot();,if (tempDir != null ) File projectDirectoryRoot = tempDir.getRoot();
ParserTest.java,RawRulePredicate predicate = RawRulePredicates.alwaysTrue();,if (RawRulePredicates != null ) RawRulePredicate predicate = RawRulePredicates.alwaysTrue();
AndroidResourceRule.java,BuildTarget buildTarget = cachingBuildRuleParams.getBuildTarget();,if (cachingBuildRuleParams != null ) BuildTarget buildTarget = cachingBuildRuleParams.getBuildTarget();
NdkLibraryRule.java,String basePathWithSlash = cachingBuildRuleParams.getBuildTarget().getBasePathWithSlash();,if (cachingBuildRuleParams != null ) String basePathWithSlash = cachingBuildRuleParams.getBuildTarget().getBasePathWithSlash();
AbstractCachingBuildRule.java,this.artifactCache = cachingBuildRuleParams.getArtifactCache();,if (cachingBuildRuleParams != null ) this.artifactCache = cachingBuildRuleParams.getArtifactCache();
AndroidTransitiveDependencyGraph.java,ImmutableSet<String> noDxPaths = noDxPathsBuilder.build();,if (noDxPathsBuilder != null ) ImmutableSet<String> noDxPaths = noDxPathsBuilder.build();
AbstractCachingBuildRule.java,depsWithUncachedDescendantsCache = depsWithUncachedDescendantsBuilder.build();,if (depsWithUncachedDescendantsBuilder != null ) depsWithUncachedDescendantsCache = depsWithUncachedDescendantsBuilder.build();
AbstractCachingBuildRule.java,List<BuildRule> rules = Lists.newArrayList();,if (Lists != null ) List<BuildRule> rules = Lists.newArrayList();
AbstractCachingBuildRule.java,List<String> lines = Lists.newArrayList();,if (Lists != null ) List<String> lines = Lists.newArrayList();
AbstractCachingBuildRule.java,ProjectFilesystem projectFilesystem = context.getProjectFilesystem();,if (context != null ) ProjectFilesystem projectFilesystem = context.getProjectFilesystem();
AbstractCachingBuildRule.java,buildRuleResult = SettableFuture.create();,if (SettableFuture != null ) buildRuleResult = SettableFuture.create();
AbstractCachingBuildRule.java,buildRuleResult = SettableFuture.create();,if (SettableFuture != null ) buildRuleResult = SettableFuture.create();
AbstractCachingBuildRule.java,StepRunner stepRunner = context.getCommandRunner();,if (context != null ) StepRunner stepRunner = context.getCommandRunner();
AbstractCachingBuildRuleTest.java,List<String> inputs = Lists.newArrayList();,if (Lists != null ) List<String> inputs = Lists.newArrayList();
AbstractCachingBuildRuleTest.java,ListeningExecutorService executor = MoreExecutors.sameThreadExecutor();,if (MoreExecutors != null ) ListeningExecutorService executor = MoreExecutors.sameThreadExecutor();
AbstractCachingBuildRuleTest.java,AbstractBuildRuleBuilder builder = JavaBinaryRule.newJavaBinaryRuleBuilder();,if (JavaBinaryRule != null ) AbstractBuildRuleBuilder builder = JavaBinaryRule.newJavaBinaryRuleBuilder();
AbstractCachingBuildRuleTest.java,AbstractBuildRuleBuilder builder = JavaBinaryRule.newJavaBinaryRuleBuilder();,if (JavaBinaryRule != null ) AbstractBuildRuleBuilder builder = JavaBinaryRule.newJavaBinaryRuleBuilder();
Project.java,DependentModule sourceFolderModule = DependentModule.newSourceFolder();,if (DependentModule != null ) DependentModule sourceFolderModule = DependentModule.newSourceFolder();
JavaTestRule.java,ImmutableSortedSet<BuildRule> srcUnderTest = builder.build();,if (builder != null ) ImmutableSortedSet<BuildRule> srcUnderTest = builder.build();
ProjectIntegrationTest.java,File destDir = temporaryFolder.getRoot();,if (temporaryFolder != null ) File destDir = temporaryFolder.getRoot();
InputRule.java,RuleKey ruleKey = ruleKeyBuilder().build();,if (ruleKeyBuilder() != null ) RuleKey ruleKey = ruleKeyBuilder().build();
AbstractCommandRunner.java,this.ansi = Preconditions.checkNotNull(console.getAnsi());,if (Preconditions != null ) this.ansi = Preconditions.checkNotNull(console.getAnsi());
DefaultJavaLibraryRule.java,bootclasspathSupplier = context.getAndroidBootclasspathSupplier();,if (context != null ) bootclasspathSupplier = context.getAndroidBootclasspathSupplier();
DefaultJavaLibraryRule.java,String annotationGenFolder = annotationProcessingParams.getGeneratedSourceFolderName();,if (annotationProcessingParams != null ) String annotationGenFolder = annotationProcessingParams.getGeneratedSourceFolderName();
JavacOptionsUtil.java,String bootclasspath = bootclasspathSupplier.get();,if (bootclasspathSupplier != null ) String bootclasspath = bootclasspathSupplier.get();
JavacOptionsUtil.java,String generateTo = annotationProcessingData.getGeneratedSourceFolderName();,if (annotationProcessingData != null ) String generateTo = annotationProcessingData.getGeneratedSourceFolderName();
AnnotationProcessingParams.java,String type = rule.getType().getDisplayName();,if (rule != null ) String type = rule.getType().getDisplayName();
Parser.java,BuildRuleType buildRuleType = BuildRuleType.valueOf(type.toUpperCase());,if (BuildRuleType != null ) BuildRuleType buildRuleType = BuildRuleType.valueOf(type.toUpperCase());
AbstractCachingBuildRuleTest.java,ExecutorService executor = MoreExecutors.sameThreadExecutor();,if (MoreExecutors != null ) ExecutorService executor = MoreExecutors.sameThreadExecutor();
AndroidBinaryBuildRuleFactory.java,String trimmedResourceFilter = resourceFilter.get().trim();,if (resourceFilter != null ) String trimmedResourceFilter = resourceFilter.get().trim();
AndroidPlatformTargetTest.java,Set<String> additionalJarPaths = ImmutableSet.of();,if (ImmutableSet != null ) Set<String> additionalJarPaths = ImmutableSet.of();
AndroidBinaryRule.java,Set<String> additionalLibraryJarsForProguard = Sets.newHashSet();,if (Sets != null ) Set<String> additionalLibraryJarsForProguard = Sets.newHashSet();
AndroidBinaryRule.java,Set<String> proguardConfigs = Sets.newHashSet();,if (Sets != null ) Set<String> proguardConfigs = Sets.newHashSet();
AndroidTransitiveDependencyGraph.java,String proguardConfig = androidLibraryRule.getProguardConfig();,if (androidLibraryRule != null ) String proguardConfig = androidLibraryRule.getProguardConfig();
AndroidTransitiveDependencyGraph.java,String manifestFile = androidLibraryRule.getManifestFile();,if (androidLibraryRule != null ) String manifestFile = androidLibraryRule.getManifestFile();
AndroidTransitiveDependencyGraph.java,String proguardConfig = androidRule.getProguardConfig();,if (androidRule != null ) String proguardConfig = androidRule.getProguardConfig();
Project.java,this.sourceJar = rule.getSourceJar();,if (rule != null ) this.sourceJar = rule.getSourceJar();
Project.java,this.javadocUrl = rule.getJavadocUrl();,if (rule != null ) this.javadocUrl = rule.getJavadocUrl();
PrebuiltJarBuildRuleFactory.java,String sourceJarFile = params.resolveFilePathRelativeToBuildFileDirectory(sourceJar.get());,if (params != null ) String sourceJarFile = params.resolveFilePathRelativeToBuildFileDirectory(sourceJar.get());
ExportFileBuildRuleFactory.java,String srcPath = params.resolveFilePathRelativeToBuildFileDirectory(src.get());,if (params != null ) String srcPath = params.resolveFilePathRelativeToBuildFileDirectory(src.get());
BuckConfig.java,File projectRoot = file.getAbsoluteFile().getParentFile();,if (file != null ) File projectRoot = file.getAbsoluteFile().getParentFile();
Main.java,buckConfig = BuckConfig.emptyConfig();,if (BuckConfig != null ) buckConfig = BuckConfig.emptyConfig();
AndroidResourceRule.java,BuildRuleType type = rule.getType();,if (rule != null ) BuildRuleType type = rule.getType();
AbstractCachingBuildRuleTest.java,deps = Sets.newHashSet();,if (Sets != null ) deps = Sets.newHashSet();
ProjectTest.java,DependentModule inheritedJdk = DependentModule.newInheritedJdk();,if (DependentModule != null ) DependentModule inheritedJdk = DependentModule.newInheritedJdk();
NdkLibraryRule.java,String basePathWithSlash = buildRuleParams.getBuildTarget().getBasePathWithSlash();,if (buildRuleParams != null ) String basePathWithSlash = buildRuleParams.getBuildTarget().getBasePathWithSlash();
AbstractCachingBuildRule.java,StepRunner stepRunner = context.getCommandRunner();,if (context != null ) StepRunner stepRunner = context.getCommandRunner();
AndroidResourceRule.java,BuildTarget buildTarget = buildRuleParams.getBuildTarget();,if (buildRuleParams != null ) BuildTarget buildTarget = buildRuleParams.getBuildTarget();
RobolectricTestBuildRuleFactoryTest.java,RobolectricTestRule.Builder builder = factory.newBuilder();,if (factory != null ) RobolectricTestRule.Builder builder = factory.newBuilder();
ProjectCommand.java,"exitCode = project.createIntellijProject(tempFile, console.getStdOut());","if (console != null ) exitCode = project.createIntellijProject(tempFile, console.getStdOut());"
SplitZipStep.java,String filename = SmartDexingCommand.transformInputToDexOutput(secondary.getName());,if (SmartDexingCommand != null ) String filename = SmartDexingCommand.transformInputToDexOutput(secondary.getName());
TestCommand.java,commands = ImmutableList.of();,if (ImmutableList != null ) commands = ImmutableList.of();
AbstractCachingBuildRule.java,CommandRunner commandRunner = context.getCommandRunner();,if (context != null ) CommandRunner commandRunner = context.getCommandRunner();
ReadKeystorePropertiesAndSignApkStepTest.java,SignApkCommand signApkCommand = readKeystorePropertiesAndSignCommand.getSignApkCommand();,if (readKeystorePropertiesAndSignCommand != null ) SignApkCommand signApkCommand = readKeystorePropertiesAndSignCommand.getSignApkCommand();
AndroidBinaryRuleTest.java,List<Command> commands = commandsBuilder.build();,if (commandsBuilder != null ) List<Command> commands = commandsBuilder.build();
GenruleTest.java,ImmutableList<Command> commands = builder.build();,if (builder != null ) ImmutableList<Command> commands = builder.build();
RepackZipEntriesStepTest.java,ShellCommand zipCommand = iter.next();,if (iter != null ) ShellCommand zipCommand = iter.next();
MoreAsserts.java,Iterator<Command> observedIter = observed.iterator();,if (observed != null ) Iterator<Command> observedIter = observed.iterator();
MoreAsserts.java,Command observedCommand = observedIter.next();,if (observedIter != null ) Command observedCommand = observedIter.next();
AndroidTransitiveDependencyGraph.java,Set<String> classpathEntries = pathsToDexBuilder.build();,if (pathsToDexBuilder != null ) Set<String> classpathEntries = pathsToDexBuilder.build();
AndroidTransitiveDependencyGraph.java,Set<String> pathsToThirdPartyJars = pathsToThirdPartyJarsBuilder.build();,if (pathsToThirdPartyJarsBuilder != null ) Set<String> pathsToThirdPartyJars = pathsToThirdPartyJarsBuilder.build();
UberRDotJavaUtil.java,Set<String> classpathEntries = ImmutableSet.of();,if (ImmutableSet != null ) Set<String> classpathEntries = ImmutableSet.of();
RuleKey.java,String ruleLabel = rule.getType().getDisplayName();,if (rule != null ) String ruleLabel = rule.getType().getDisplayName();
GenruleTest.java,ImmutableList<Command> commands = builder.build();,if (builder != null ) ImmutableList<Command> commands = builder.build();
BuildFileToJsonParser.java,Process process = processBuilder.start();,if (processBuilder != null ) Process process = processBuilder.start();
BuildFileToJsonParser.java,BuildFileToJsonParser parser = new BuildFileToJsonParser(process.getInputStream());,if (BuildFileToJsonParser(process != null ) BuildFileToJsonParser parser = new BuildFileToJsonParser(process.getInputStream());
BuildFileToJsonParser.java,int exitCode = process.waitFor();,if (process != null ) int exitCode = process.waitFor();
TestCommand.java,String classDirectory = path.getOutput().getAbsolutePath();,if (path != null ) String classDirectory = path.getOutput().getAbsolutePath();
AaptCommand.java,AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget().get();,if (context != null ) AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget().get();
AidlCommand.java,AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget().get();,if (context != null ) AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget().get();
DxCommand.java,AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget().get();,if (context != null ) AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget().get();
GenProGuardConfigCommand.java,AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget().get();,if (context != null ) AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget().get();
GenRDotJavaCommand.java,AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget().get();,if (context != null ) AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget().get();
JUnitCommand.java,AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget().get();,if (context != null ) AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget().get();
ProGuardObfuscateCommand.java,AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget().get();,if (context != null ) AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget().get();
ZipalignCommand.java,AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget().get();,if (context != null ) AndroidPlatformTarget androidPlatformTarget = context.getAndroidPlatformTarget().get();
Parser.java,ParseContext parseContext = ParseContext.forBaseName(buildTarget.getBaseName());,if (ParseContext != null ) ParseContext parseContext = ParseContext.forBaseName(buildTarget.getBaseName());
ParserTest.java,File projectDirectoryRoot = tempDir.getRoot();,if (tempDir != null ) File projectDirectoryRoot = tempDir.getRoot();
TargetsCommand.java,ImmutableSet<BuildRuleType> buildRuleTypes = buildRuleTypesBuilder.build();,if (buildRuleTypesBuilder != null ) ImmutableSet<BuildRuleType> buildRuleTypes = buildRuleTypesBuilder.build();
TestCommand.java,Set<String> srcFolders = Sets.newHashSet();,if (Sets != null ) Set<String> srcFolders = Sets.newHashSet();
BuildCommand.java,BuildTargetParser buildTargetParser = parser.getBuildTargetParser();,if (parser != null ) BuildTargetParser buildTargetParser = parser.getBuildTargetParser();
BuildCommand.java,List<String> buildTargetNames =  options.getArgumentsFormattedAsBuildTargets();,if (options != null ) List<String> buildTargetNames =  options.getArgumentsFormattedAsBuildTargets();
TargetsCommand.java,Iterator<String> keySetIterator = buildTargets.keySet().iterator();,if (buildTargets != null ) Iterator<String> keySetIterator = buildTargets.keySet().iterator();
TargetsCommand.java,File buildFile = target.getBuildFile();,if (target != null ) File buildFile = target.getBuildFile();
ParserTest.java,File projectDirectoryRoot = tempDir.getRoot();,if (tempDir != null ) File projectDirectoryRoot = tempDir.getRoot();
ShellCommand.java,int exitCode = process.exitValue();,if (process != null ) int exitCode = process.exitValue();
AndroidTransitiveDependencyGraph.java,classpathEntries = pathsToDexBuilder.build();,if (pathsToDexBuilder != null ) classpathEntries = pathsToDexBuilder.build();
AndroidTransitiveDependencyGraph.java,pathsToThirdPartyJars = pathsToThirdPartyJarsBuilder.build();,if (pathsToThirdPartyJarsBuilder != null ) pathsToThirdPartyJars = pathsToThirdPartyJarsBuilder.build();
AndroidTransitiveDependencyGraph.java,classpathEntries = Sets.newHashSet(pathsToDexBuilder.build());,if (Sets != null ) classpathEntries = Sets.newHashSet(pathsToDexBuilder.build());
AndroidTransitiveDependencyGraph.java,pathsToThirdPartyJars = Sets.newHashSet(pathsToThirdPartyJarsBuilder.build());,if (Sets != null ) pathsToThirdPartyJars = Sets.newHashSet(pathsToThirdPartyJarsBuilder.build());
DefaultJavaLibraryRule.java,cachedClasspathEntries = classpathEntries.build();,if (classpathEntries != null ) cachedClasspathEntries = classpathEntries.build();
DefaultJavaLibraryRule.java,classpathEntries = classpathEntriesWithRDotJava.build();,if (classpathEntriesWithRDotJava != null ) classpathEntries = classpathEntriesWithRDotJava.build();
