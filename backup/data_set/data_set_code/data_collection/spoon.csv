Filename,Buggy/Deleted,Fixed/Added
ImportScannerTest.java,PrettyPrinter prettyPrinter = new DefaultJavaPrettyPrinter(spoon.getEnvironment());,if (DefaultJavaPrettyPrinter(spoon != null ) PrettyPrinter prettyPrinter = new DefaultJavaPrettyPrinter(spoon.getEnvironment());
ImportScannerTest.java,Factory aFactory = spoon.getFactory();,if (spoon != null ) Factory aFactory = spoon.getFactory();
ImportTest.java,PrettyPrinter prettyPrinter = new DefaultJavaPrettyPrinter(spoon.getEnvironment());,if (DefaultJavaPrettyPrinter(spoon != null ) PrettyPrinter prettyPrinter = new DefaultJavaPrettyPrinter(spoon.getEnvironment());
InitializerTest.java,CtModel model = launcher.buildModel();,if (launcher != null ) CtModel model = launcher.buildModel();
CUFilterTest.java,final CtModel model = launcher.getModel();,if (launcher != null ) final CtModel model = launcher.getModel();
FieldTest.java,CtModel ctModel = launcher.buildModel();,if (launcher != null ) CtModel ctModel = launcher.buildModel();
PackageTest.java,PrettyPrinter prettyPrinter = new DefaultJavaPrettyPrinter(spoon.getEnvironment());,if (DefaultJavaPrettyPrinter(spoon != null ) PrettyPrinter prettyPrinter = new DefaultJavaPrettyPrinter(spoon.getEnvironment());
PackageTest.java,PrettyPrinter prettyPrinter = new DefaultJavaPrettyPrinter(spoon.getEnvironment());,if (DefaultJavaPrettyPrinter(spoon != null ) PrettyPrinter prettyPrinter = new DefaultJavaPrettyPrinter(spoon.getEnvironment());
InterfaceTest.java,CtModel model = launcher.buildModel();,if (launcher != null ) CtModel model = launcher.buildModel();
InterfaceTest.java,CtModel model = launcher.buildModel();,if (launcher != null ) CtModel model = launcher.buildModel();
JavaDocTest.java,CtModel model = launcher.buildModel();,if (launcher != null ) CtModel model = launcher.buildModel();
JavaDocTest.java,CtModel model = launcher.buildModel();,if (launcher != null ) CtModel model = launcher.buildModel();
TryCatchTest.java,CtModel model = launcher.buildModel();,if (launcher != null ) CtModel model = launcher.buildModel();
AssignmentsEqualsTest.java,Factory factory = launcher.getFactory();,if (launcher != null ) Factory factory = launcher.getFactory();
JavaReflectionVisitorImpl.java,int nrEnclosingClasses = getNumberOfEnclosingClasses(constructor.getDeclaringClass());,if (getNumberOfEnclosingClasses(constructor != null ) int nrEnclosingClasses = getNumberOfEnclosingClasses(constructor.getDeclaringClass());
CommentTest.java,CtModel model = launcher.buildModel();,if (launcher != null ) CtModel model = launcher.buildModel();
CommentTest.java,CtModel model = launcher.buildModel();,if (launcher != null ) CtModel model = launcher.buildModel();
CommentTest.java,CtModel model = launcher.buildModel();,if (launcher != null ) CtModel model = launcher.buildModel();
CommentTest.java,CtModel model = launcher.buildModel();,if (launcher != null ) CtModel model = launcher.buildModel();
CommentTest.java,CtModel model = launcher.buildModel();,if (launcher != null ) CtModel model = launcher.buildModel();
CommentTest.java,CtModel model = launcher.buildModel();,if (launcher != null ) CtModel model = launcher.buildModel();
PackageTest.java,JavaOutputProcessor outputProcessor = spoon.createOutputWriter();,if (spoon != null ) JavaOutputProcessor outputProcessor = spoon.createOutputWriter();
JavaReflectionTreeBuilder.java,ctEnclosingClass = scan(clazz.getEnclosingClass());,if (scan(clazz != null ) ctEnclosingClass = scan(clazz.getEnclosingClass());
MMMethod.java,this.method = (CtMethod<?>) mtc.getAdaptationScope();,if (mtc != null ) this.method = (CtMethod<?>) mtc.getAdaptationScope();
OverriddenMethodFilter.java,context = new ClassTypingContext(method.getDeclaringType());,if (ClassTypingContext(method != null ) context = new ClassTypingContext(method.getDeclaringType());
CtMethodImpl.java,ClassTypingContext context = new ClassTypingContext(this.getDeclaringType());,if (ClassTypingContext(this != null ) ClassTypingContext context = new ClassTypingContext(this.getDeclaringType());
GenericsTest.java,ClassTypingContext ctc = new ClassTypingContext(ctClass.getReference());,if (ClassTypingContext(ctClass != null ) ClassTypingContext ctc = new ClassTypingContext(ctClass.getReference());
GenericsTest.java,ClassTypingContext ctcSub = new ClassTypingContext(ctClass.getReference());,if (ClassTypingContext(ctClass != null ) ClassTypingContext ctcSub = new ClassTypingContext(ctClass.getReference());
GenericsTest.java,ClassTypingContext ctcSub = new ClassTypingContext(ctClass.getReference());,if (ClassTypingContext(ctClass != null ) ClassTypingContext ctcSub = new ClassTypingContext(ctClass.getReference());
JDTBasedSpoonCompiler.java,outputDirectory = outputDirectory.getCanonicalFile();,if (outputDirectory != null ) outputDirectory = outputDirectory.getCanonicalFile();
JDTBasedSpoonCompiler.java,packageDir = new File(outputDirectory.getAbsolutePath());,if (File(outputDirectory != null ) packageDir = new File(outputDirectory.getAbsolutePath());
UnresolvedBugTest.java,Class testClass = unresolvedTest.getDeclaringType().getActualClass();,if (unresolvedTest != null ) Class testClass = unresolvedTest.getDeclaringType().getActualClass();
UnresolvedBugTest.java,String testMethod = unresolvedTest.getSimpleName();,if (unresolvedTest != null ) String testMethod = unresolvedTest.getSimpleName();
OneCanCallSetterWithNullParameterizedTest.java,final Factory factory = launcher.getFactory();,if (launcher != null ) final Factory factory = launcher.getFactory();
TextBlockTest.java,CtReturn ret = factory.createReturn();,if (factory != null ) CtReturn ret = factory.createReturn();
CloneHelper.java,Set<T> others = new HashSet<>(elements.size());,if (HashSet<>(elements != null ) Set<T> others = new HashSet<>(elements.size());
TestSniperPrinter.java,SourcePosition pos = element.getPosition();,if (element != null ) SourcePosition pos = element.getPosition();
EnumsTest.java,CtMethod name = factory.Core().createMethod();,if (factory != null ) CtMethod name = factory.Core().createMethod();
EnumsTest.java,CtExpression defaultExpression = ctEnumValue.getDefaultExpression();,if (ctEnumValue != null ) CtExpression defaultExpression = ctEnumValue.getDefaultExpression();
Metamodel.java,value = valueCreator.get();,if (valueCreator != null ) value = valueCreator.get();
PackageFactory.java,CtPackage current = module.getRootPackage();,if (module != null ) CtPackage current = module.getRootPackage();
PackageFactory.java,current = current.getPackage(token.nextToken());,if (current != null ) current = current.getPackage(token.nextToken());
AstCheckerTest.java,CtExecutable declaration = potentialDelegate.getExecutable().getDeclaration();,if (potentialDelegate != null ) CtExecutable declaration = potentialDelegate.getExecutable().getDeclaration();
MapUtils.java,value = valueCreator.get();,if (valueCreator != null ) value = valueCreator.get();
ImportCleaner.java,CtImport newImport = (CtImport) iter.next();,if (iter != null ) CtImport newImport = (CtImport) iter.next();
CtStatementListTest.java,Factory factory = new Launcher().getFactory();,if (Launcher() != null ) Factory factory = new Launcher().getFactory();
JDTBatchCompiler.java,compilationUnit.module = this.module.name();,if (this != null ) compilationUnit.module = this.module.name();
TemplateTest.java,Factory factory = spoon.getFactory();,if (spoon != null ) Factory factory = spoon.getFactory();
TemplateTest.java,Factory factory = launcher.getFactory();,if (launcher != null ) Factory factory = launcher.getFactory();
SubstitutionTest.java,Factory factory = spoon.getFactory();,if (spoon != null ) Factory factory = spoon.getFactory();
SubstitutionTest.java,Factory factory = spoon.getFactory();,if (spoon != null ) Factory factory = spoon.getFactory();
SubstitutionTest.java,Factory factory = spoon.getFactory();,if (spoon != null ) Factory factory = spoon.getFactory();
ReferenceBuilder.java,ReferenceBinding[] superInterfaces = typeParamBinding.superInterfaces();,if (typeParamBinding != null ) ReferenceBinding[] superInterfaces = typeParamBinding.superInterfaces();
ReferenceBuilder.java,ref = refSuperClass.clone();,if (refSuperClass != null ) ref = refSuperClass.clone();
ReferenceBuilder.java,final CtReference declaring = this.getDeclaringReferenceFromImports(binding.sourceName());,if (this != null ) final CtReference declaring = this.getDeclaringReferenceFromImports(binding.sourceName());
ReferenceBuilder.java,CtPackageReference packageReference = getPackageReference(binding.getPackage());,if (getPackageReference(binding != null ) CtPackageReference packageReference = getPackageReference(binding.getPackage());
ReferenceBuilder.java,String name = new String(binding.sourceName());,if (String(binding != null ) String name = new String(binding.sourceName());
ReferenceBuilder.java,String readableName = String.valueOf(binding.readableName());,if (String != null ) String readableName = String.valueOf(binding.readableName());
ReferenceBuilder.java,final CtReference declaring = this.getDeclaringReferenceFromImports(binding.sourceName());,if (this != null ) final CtReference declaring = this.getDeclaringReferenceFromImports(binding.sourceName());
ReferenceBuilder.java,char[] readableName = binding.readableName();,if (binding != null ) char[] readableName = binding.readableName();
ReferenceBuilder.java,ref = getTypeReference(binding.actualType());,if (getTypeReference(binding != null ) ref = getTypeReference(binding.actualType());
ReferenceBuilder.java,ref = getTypeReference(binding.actualType());,if (getTypeReference(binding != null ) ref = getTypeReference(binding.actualType());
FileCompilerConfig.java,Environment env = jdtCompiler.getEnvironment();,if (jdtCompiler != null ) Environment env = jdtCompiler.getEnvironment();
StandardEnvironment.java,SourcePosition sp = element.getPosition();,if (element != null ) SourcePosition sp = element.getPosition();
CtCatchVariableReferenceImpl.java,var = catchBlock.getParameter();,if (catchBlock != null ) var = catchBlock.getParameter();
CtTypeParameterReferenceImpl.java,e = typeReference.getTypeDeclaration();,if (typeReference != null ) e = typeReference.getTypeDeclaration();
PackageFactory.java,CtPackage current = factory.getModel().getRootPackage();,if (factory != null ) CtPackage current = factory.getModel().getRootPackage();
PackageFactory.java,current = current.getPackage(token.nextToken());,if (current != null ) current = current.getPackage(token.nextToken());
AbstractTypingContext.java,CtElement parent = result.getParent();,if (result != null ) CtElement parent = result.getParent();
TestSniperPrinter.java,SniperJavaPrettyPrinter printer = new SniperJavaPrettyPrinter(launcher.getEnvironment());,if (SniperJavaPrettyPrinter(launcher != null ) SniperJavaPrettyPrinter printer = new SniperJavaPrettyPrinter(launcher.getEnvironment());
TestSniperPrinter.java,SniperJavaPrettyPrinter printer = new SniperJavaPrettyPrinter(launcher.getEnvironment());,if (SniperJavaPrettyPrinter(launcher != null ) SniperJavaPrettyPrinter printer = new SniperJavaPrettyPrinter(launcher.getEnvironment());
MetamodelProperty.java,Factory f = valueType.getFactory();,if (valueType != null ) Factory f = valueType.getFactory();
JavaReflectionTreeBuilder.java,cl = cl.getComponentType();,if (cl != null ) cl = cl.getComponentType();
JDTCommentBuilder.java,this.filePath = CharOperation.charToString(sourceUnit.getFileName());,if (CharOperation != null ) this.filePath = CharOperation.charToString(sourceUnit.getFileName());
JDTImportBuilder.java,this.filePath = CharOperation.charToString(sourceUnit.getFileName());,if (CharOperation != null ) this.filePath = CharOperation.charToString(sourceUnit.getFileName());
CtElementImpl.java,CompilationUnit compilationUnit = sp.getCompilationUnit();,if (sp != null ) CompilationUnit compilationUnit = sp.getCompilationUnit();
JDTBatchCompiler.java,currentElement = s.substring(processingPosition + strToFind.length());,if (strToFind != null ) currentElement = s.substring(processingPosition + strToFind.length());
Substitution.java,factory = targetType.getFactory();,if (targetType != null ) factory = targetType.getFactory();
TestSniperPrinter.java,String testClass = ToBeChanged.class.getName();,if (ToBeChanged != null ) String testClass = ToBeChanged.class.getName();
TestSniperPrinter.java,SniperJavaPrettyPrinter printer = new SniperJavaPrettyPrinter(launcher.getEnvironment());,if (SniperJavaPrettyPrinter(launcher != null ) SniperJavaPrettyPrinter printer = new SniperJavaPrettyPrinter(launcher.getEnvironment());
TestSniperPrinter.java,Factory f = launcher.getFactory();,if (launcher != null ) Factory f = launcher.getFactory();
TestSniperPrinter.java,CtInvocation invocation = (CtInvocation) localVariable.getAssignment();,if (localVariable != null ) CtInvocation invocation = (CtInvocation) localVariable.getAssignment();
TestSniperPrinter.java,CtExpression prevTarget = invocation.getTarget();,if (invocation != null ) CtExpression prevTarget = invocation.getTarget();
TestSniperPrinter.java,"assertEquals(""bounds = false"", toBeRemoved.toStringDebug());","if (toBeRemoved != null ) assertEquals(""bounds = false"", toBeRemoved.toStringDebug());"
TestSniperPrinter.java,Factory f = type.getFactory();,if (type != null ) Factory f = type.getFactory();
TestSniperPrinter.java,SniperJavaPrettyPrinter printer = new SniperJavaPrettyPrinter(launcher.getEnvironment());,if (SniperJavaPrettyPrinter(launcher != null ) SniperJavaPrettyPrinter printer = new SniperJavaPrettyPrinter(launcher.getEnvironment());
TestSniperPrinter.java,Factory f = launcher.getFactory();,if (launcher != null ) Factory f = launcher.getFactory();
TestSniperPrinter.java,Factory f = type.getFactory();,if (type != null ) Factory f = type.getFactory();
TestSniperPrinter.java,CtModel model = launcher.buildModel();,if (launcher != null ) CtModel model = launcher.buildModel();
TestSniperPrinter.java,final SniperJavaPrettyPrinter sp = new SniperJavaPrettyPrinter(launcher.getEnvironment());,if (SniperJavaPrettyPrinter(launcher != null ) final SniperJavaPrettyPrinter sp = new SniperJavaPrettyPrinter(launcher.getEnvironment());
TestSniperPrinter.java,String result = sp.getResult();,if (sp != null ) String result = sp.getResult();
CtLambdaImpl.java,CtType<T> lambdaType = lambdaTypeRef.getTypeDeclaration();,if (lambdaTypeRef != null ) CtType<T> lambdaType = lambdaTypeRef.getTypeDeclaration();
DirectPrinterHelper.java,int len = text.length();,if (text != null ) int len = text.length();
ElementSourceFragment.java,ElementSourceFragment nextTobeMerged = tobeMerged.getNextSibling();,if (tobeMerged != null ) ElementSourceFragment nextTobeMerged = tobeMerged.getNextSibling();
TestSniperPrinter.java,File outputDir = f.getEnvironment().getSourceOutputDirectory();,if (f != null ) File outputDir = f.getEnvironment().getSourceOutputDirectory();
CtFieldImpl.java,DeclarationSourcePosition dsp  = (DeclarationSourcePosition) this.getPosition();,if (this != null ) DeclarationSourcePosition dsp  = (DeclarationSourcePosition) this.getPosition();
CompilationUnitFactory.java,cu = factory.Core().createCompilationUnit();,if (factory != null ) cu = factory.Core().createCompilationUnit();
CompilationUnitFactory.java,cu = factory.Core().createCompilationUnit();,if (factory != null ) cu = factory.Core().createCompilationUnit();
SniperJavaPrettyPrinter.java,isFragmentModified = changeResolver.hasChangedRole();,if (changeResolver != null ) isFragmentModified = changeResolver.hasChangedRole();
CollectionSourceFragment.java,role = esf.getRoleInParent();,if (esf != null ) role = esf.getRoleInParent();
CollectionSourceFragment.java,ContainerKind kind = esf.getContainerKindInParent();,if (esf != null ) ContainerKind kind = esf.getContainerKindInParent();
SwitchCaseTest.java,CtModel model = launcher.buildModel();,if (launcher != null ) CtModel model = launcher.buildModel();
SwitchCaseTest.java,CtModel model = launcher.buildModel();,if (launcher != null ) CtModel model = launcher.buildModel();
SwitchCaseTest.java,CtModel model = launcher.buildModel();,if (launcher != null ) CtModel model = launcher.buildModel();
SwitchCaseTest.java,CtModel model = launcher.buildModel();,if (launcher != null ) CtModel model = launcher.buildModel();
SwitchCaseTest.java,CtModel model = launcher.buildModel();,if (launcher != null ) CtModel model = launcher.buildModel();
AnnotationTest.java,CtModel model = launcher.buildModel();,if (launcher != null ) CtModel model = launcher.buildModel();
JDTTreeBuilder.java,t = factory.Core().createClass();,if (factory != null ) t = factory.Core().createClass();
TestSniperPrinter.java,SniperJavaPrettyPrinter sp = new SniperJavaPrettyPrinter(launcher.getEnvironment());,if (SniperJavaPrettyPrinter(launcher != null ) SniperJavaPrettyPrinter sp = new SniperJavaPrettyPrinter(launcher.getEnvironment());
AbstractSourceFragmentContextCollection.java,CtRole role = event.getRole();,if (event != null ) CtRole role = event.getRole();
SniperJavaPrettyPrinter.java,boolean originMuted = mutableTokenWriter.isMuted();,if (mutableTokenWriter != null ) boolean originMuted = mutableTokenWriter.isMuted();
SniperJavaPrettyPrinter.java,boolean originMuted = mutableTokenWriter.isMuted();,if (mutableTokenWriter != null ) boolean originMuted = mutableTokenWriter.isMuted();
DefaultJavaPrettyPrinter.java,sourceCompilationUnit = sourceCompilationUnit.clone();,if (sourceCompilationUnit != null ) sourceCompilationUnit = sourceCompilationUnit.clone();
DefaultJavaPrettyPrinter.java,CtPackageReference packRef = type.getPackage().getReference();,if (type != null ) CtPackageReference packRef = type.getPackage().getReference();
SniperJavaPrettyPrinter.java,SourceFragmentContext c = sourceFragmentContextStack.pop();,if (sourceFragmentContextStack != null ) SourceFragmentContext c = sourceFragmentContextStack.pop();
SniperJavaPrettyPrinter.java,SourceFragmentContext c = sourceFragmentContextStack.pop();,if (sourceFragmentContextStack != null ) SourceFragmentContext c = sourceFragmentContextStack.pop();
SniperJavaPrettyPrinter.java,boolean originMuted = mutableTokenWriter.isMuted();,if (mutableTokenWriter != null ) boolean originMuted = mutableTokenWriter.isMuted();
TestCompilationUnit.java,SourcePosition sourcePosition = myNewClass.getPosition();,if (myNewClass != null ) SourcePosition sourcePosition = myNewClass.getPosition();
CommentTest.java,CtModel model = launcher.buildModel();,if (launcher != null ) CtModel model = launcher.buildModel();
ImportScannerImpl.java,typeReference = reference.getAccessType();,if (reference != null ) typeReference = reference.getAccessType();
ImportScannerImpl.java,String javadoc = stringBuilder.toString();,if (stringBuilder != null ) String javadoc = stringBuilder.toString();
ImportScannerImpl.java,targetType = simpleType.getReference().getTopLevelType();,if (simpleType != null ) targetType = simpleType.getReference().getTopLevelType();
ImportScannerImpl.java,CtElement parent = ref.getParent();,if (ref != null ) CtElement parent = ref.getParent();
ImportScannerImpl.java,parent = parent.getParent();,if (parent != null ) parent = parent.getParent();
ImportScannerImpl.java,CtPackageReference pack = targetType.getPackage();,if (targetType != null ) CtPackageReference pack = targetType.getPackage();
ImportScannerImpl.java,CtFieldReference localReference = field.getVariable();,if (field != null ) CtFieldReference localReference = field.getVariable();
ImportScannerImpl.java,declaringType = localReference.getDeclaringType();,if (localReference != null ) declaringType = localReference.getDeclaringType();
ImportScannerImpl.java,CtExecutableReference localReference = exec.getReference();,if (exec != null ) CtExecutableReference localReference = exec.getReference();
ImportScannerImpl.java,declaringType = localReference.getDeclaringType();,if (localReference != null ) declaringType = localReference.getDeclaringType();
ImportScannerImpl.java,CtExecutableReference localReference = invo.getExecutable();,if (invo != null ) CtExecutableReference localReference = invo.getExecutable();
ImportScannerImpl.java,declaringType = localReference.getDeclaringType();,if (localReference != null ) declaringType = localReference.getDeclaringType();
ImportScannerImpl.java,CtPackageReference pack = targetType.getPackage();,if (targetType != null ) CtPackageReference pack = targetType.getPackage();
ImportScannerImpl.java,CtExecutableReference execRef = (CtExecutableReference) ctImport.getReference();,if (ctImport != null ) CtExecutableReference execRef = (CtExecutableReference) ctImport.getReference();
ImportScannerImpl.java,CtTypeReference declaringType = execRef.getDeclaringType();,if (execRef != null ) CtTypeReference declaringType = execRef.getDeclaringType();
ImportScannerImpl.java,CtFieldReference importFieldRef = (CtFieldReference) ctImport.getReference();,if (ctImport != null ) CtFieldReference importFieldRef = (CtFieldReference) ctImport.getReference();
ImportScannerImpl.java,String qualifiedName = refDeclaringType.getQualifiedName();,if (refDeclaringType != null ) String qualifiedName = refDeclaringType.getQualifiedName();
ImportScannerImpl.java,CtTypeMemberWildcardImportReferenceImpl importRef = (CtTypeMemberWildcardImportReferenceImpl) ctImport.getReference();,if (ctImport != null ) CtTypeMemberWildcardImportReferenceImpl importRef = (CtTypeMemberWildcardImportReferenceImpl) ctImport.getReference();
ImportScannerImpl.java,String importRefStr = importRef.getTypeReference().getQualifiedName();,if (importRef != null ) String importRefStr = importRef.getTypeReference().getQualifiedName();
ImportScannerImpl.java,CtTypeReference typeReference = (CtTypeReference) ctImport.getReference();,if (ctImport != null ) CtTypeReference typeReference = (CtTypeReference) ctImport.getReference();
ImportScannerImpl.java,String typeImportQualifiedName = ctImport.getReference().getSimpleName();,if (ctImport != null ) String typeImportQualifiedName = ctImport.getReference().getSimpleName();
ImportScannerImpl.java,String importRef = unresolvedImport.getUnresolvedReference();,if (unresolvedImport != null ) String importRef = unresolvedImport.getUnresolvedReference();
ImportScannerImpl.java,"refQualifiedName = refDeclaringType + ""."" + ref.getSimpleName();","if (ref != null ) refQualifiedName = refDeclaringType + ""."" + ref.getSimpleName();"
ImportScannerImpl.java,CtPackageReference pack = targetType.getPackage();,if (targetType != null ) CtPackageReference pack = targetType.getPackage();
ImportScannerImpl.java,declaringType = declaringType.getDeclaringType();,if (declaringType != null ) declaringType = declaringType.getDeclaringType();
ImportScannerImpl.java,String methodName = ref.getSimpleName();,if (ref != null ) String methodName = ref.getSimpleName();
ImportScannerImpl.java,Boolean presentInJavaLang = namesPresentInJavaLang.get(ref.getSimpleName());,if (namesPresentInJavaLang != null ) Boolean presentInJavaLang = namesPresentInJavaLang.get(ref.getSimpleName());
ImportScannerImpl.java,parent = parent.getParent();,if (parent != null ) parent = parent.getParent();
ImportScannerImpl.java,parent = parent.getParent();,if (parent != null ) parent = parent.getParent();
ImportScannerImpl.java,parent = parent.getParent();,if (parent != null ) parent = parent.getParent();
ImportScannerImpl.java,List<CtVariable> variables = avf.find();,if (avf != null ) List<CtVariable> variables = avf.find();
ImportScannerImpl.java,parent = ref.getParent();,if (ref != null ) parent = ref.getParent();
ImportScannerImpl.java,parent = parent.getParent();,if (parent != null ) parent = parent.getParent();
ImportScannerTest.java,PrettyPrinter prettyPrinter = new DefaultJavaPrettyPrinter(spoon.getEnvironment());,if (DefaultJavaPrettyPrinter(spoon != null ) PrettyPrinter prettyPrinter = new DefaultJavaPrettyPrinter(spoon.getEnvironment());
ImportScannerTest.java,countUnusedImports += imports.size();,if (imports != null ) countUnusedImports += imports.size();
ImportScannerTest.java,countMissingImports += imports.size();,if (imports != null ) countMissingImports += imports.size();
ImportScannerTest.java,Set<CtType> missingKeys = new HashSet<>(missingImports.keySet());,if (HashSet<>(missingImports != null ) Set<CtType> missingKeys = new HashSet<>(missingImports.keySet());
ImportScannerTest.java,Set<CtType> unusedKeys = new HashSet<>(unusedImports.keySet());,if (HashSet<>(unusedImports != null ) Set<CtType> unusedKeys = new HashSet<>(unusedImports.keySet());
ImportScannerTest.java,String line = aLine.trim();,if (aLine != null ) String line = aLine.trim();
ImportScannerTest.java,String line = aLine.trim();,if (aLine != null ) String line = aLine.trim();
ImportScannerTest.java,Collection<CtImport> imports = importContext.getAllImports();,if (importContext != null ) Collection<CtImport> imports = importContext.getAllImports();
ImportScannerTest.java,Collection<CtImport> imports = importContext.getAllImports();,if (importContext != null ) Collection<CtImport> imports = importContext.getAllImports();
ImportScannerTest.java,Factory aFactory = spoon.getFactory();,if (spoon != null ) Factory aFactory = spoon.getFactory();
ImportScannerTest.java,Collection<CtImport> imports = importContext.getAllImports();,if (importContext != null ) Collection<CtImport> imports = importContext.getAllImports();
ImportScannerTest.java,Factory factory = spoon.createFactory();,if (spoon != null ) Factory factory = spoon.createFactory();
ImportScannerTest.java,Factory factory = spoon.createFactory();,if (spoon != null ) Factory factory = spoon.createFactory();
ImportScannerTest.java,CtFieldReference fieldRef = factory.createFieldReference();,if (factory != null ) CtFieldReference fieldRef = factory.createFieldReference();
ImportScannerTest.java,Collection<CtImport> imports = importScanner.getAllImports();,if (importScanner != null ) Collection<CtImport> imports = importScanner.getAllImports();
ImportTest.java,Collection<CtImport> allImports = importScanner.getAllImports();,if (importScanner != null ) Collection<CtImport> allImports = importScanner.getAllImports();
ImportTest.java,allImports = importScanner.getAllImports();,if (importScanner != null ) allImports = importScanner.getAllImports();
ImportTest.java,Collection<CtImport> imports = importContext.getAllImports();,if (importContext != null ) Collection<CtImport> imports = importContext.getAllImports();
ImportTest.java,Collection<CtImport> imports = importContext.getAllImports();,if (importContext != null ) Collection<CtImport> imports = importContext.getAllImports();
ImportTest.java,Collection<CtImport> imports = importContext.getAllImports();,if (importContext != null ) Collection<CtImport> imports = importContext.getAllImports();
CtElementImpl.java,CtElement clone = this.clone();,if (this != null ) CtElement clone = this.clone();
JarLauncherTest.java,CtModel model = launcher.getModel();,if (launcher != null ) CtModel model = launcher.getModel();
SpoonTreeScanner.java,final String simpleName = elt.getClass().getSimpleName();,if (elt != null ) final String simpleName = elt.getClass().getSimpleName();
SpoonTreeScanner.java,final Hyperlink label = new Hyperlink(cl.getSimpleName());,if (Hyperlink(cl != null ) final Hyperlink label = new Hyperlink(cl.getSimpleName());
SpoonTreeScanner.java,lines = List.of();,if (List != null ) lines = List.of();
TreePrinter.java,TreeItem<String> parent = currItem.getParent();,if (currItem != null ) TreeItem<String> parent = currItem.getParent();
TestSniperPrinter.java,"assertEquals(""bounds = false"", toBeRemoved.toString());","if (toBeRemoved != null ) assertEquals(""bounds = false"", toBeRemoved.toString());"
DefaultJavaPrettyPrinter.java,boolean isInitializeStaticFinalField = isInitializeStaticFinalField(f.getTarget());,if (isInitializeStaticFinalField(f != null ) boolean isInitializeStaticFinalField = isInitializeStaticFinalField(f.getTarget());
DefaultJavaPrettyPrinter.java,boolean isStaticField = f.getVariable().isStatic();,if (f != null ) boolean isStaticField = f.getVariable().isStatic();
DefaultJavaPrettyPrinter.java,boolean isImportedField = this.isImported(f.getVariable());,if (this != null ) boolean isImportedField = this.isImported(f.getVariable());
DefaultJavaPrettyPrinter.java,final String fieldName = field.getSimpleName();,if (field != null ) final String fieldName = field.getSimpleName();
DefaultJavaPrettyPrinter.java,parent = targetExp.getParent();,if (targetExp != null ) parent = targetExp.getParent();
DefaultJavaPrettyPrinter.java,boolean isImported = this.isImported(invocation.getExecutable());,if (this != null ) boolean isImported = this.isImported(invocation.getExecutable());
CtTypeImpl.java,DefaultJavaPrettyPrinter printer = new DefaultJavaPrettyPrinter(getFactory().getEnvironment());,if (DefaultJavaPrettyPrinter(getFactory() != null ) DefaultJavaPrettyPrinter printer = new DefaultJavaPrettyPrinter(getFactory().getEnvironment());
SniperJavaPrettyPrinter.java,ElementSourceFragment rootFragment = sourceCompilationUnit.getOriginalSourceFragment();,if (sourceCompilationUnit != null ) ElementSourceFragment rootFragment = sourceCompilationUnit.getOriginalSourceFragment();
CompilationTest.java,SpoonModelBuilder compiler = launcher.createCompiler();,if (launcher != null ) SpoonModelBuilder compiler = launcher.createCompiler();
JDTBasedSpoonCompiler.java,String filename = file.getAbsolutePath();,if (file != null ) String filename = file.getAbsolutePath();
DefaultJavaPrettyPrinter.java,String elementInfo = e.getClass().getName();,if (e != null ) String elementInfo = e.getClass().getName();
CtAnnotationImpl.java,"Object array = Array.newInstance(componentType, elements.size());","if (elements != null ) Object array = Array.newInstance(componentType, elements.size());"
JDTTreeBuilder.java,char[] content = compilationUnitDeclaration.compilationResult.compilationUnit.getContents();,if (compilationUnitDeclaration != null ) char[] content = compilationUnitDeclaration.compilationResult.compilationUnit.getContents();
PositionBuilder.java,char[] contents = cr.compilationUnit.getContents();,if (cr != null ) char[] contents = cr.compilationUnit.getContents();
PositionBuilder.java,char[] contents = cr.compilationUnit.getContents();,if (cr != null ) char[] contents = cr.compilationUnit.getContents();
SniperJavaPrettyPrinter.java,CtRole role = element.getRoleInParent();,if (element != null ) CtRole role = element.getRoleInParent();
CtJavaDocImpl.java,String line = aLine.trim();,if (aLine != null ) String line = aLine.trim();
CtJavaDocImpl.java,endIndex = line.length();,if (line != null ) endIndex = line.length();
CtJavaDocImpl.java,String contentWithTags = longDescription.trim(); // trim is required for backward compatibility,if (compatibility != null ) String contentWithTags = longDescription.trim(); // trim is required for backward compatibility
FileSystemFolderTest.java,Throwable containedException = spe.getCause().getCause();,if (spe != null ) Throwable containedException = spe.getCause().getCause();
JDTCommentBuilder.java,String line = aLine.trim();,if (aLine != null ) String line = aLine.trim();
JDTCommentBuilder.java,endIndex = line.length();,if (line != null ) endIndex = line.length();
TypeFactory.java,CtTypeReference ref = factory.Core().createWildcardStaticTypeMemberReference();,if (factory != null ) CtTypeReference ref = factory.Core().createWildcardStaticTypeMemberReference();
ElementPrinterHelper.java,CtTypeReference typeStarRef = (CtTypeReference) ctImport.getReference();,if (ctImport != null ) CtTypeReference typeStarRef = (CtTypeReference) ctImport.getReference();
ElementPrinterHelper.java,importTypeStr = typeStarRef.getQualifiedName();,if (typeStarRef != null ) importTypeStr = typeStarRef.getQualifiedName();
ImportScannerImpl.java,CtWildcardStaticTypeMemberReferenceImpl importRef = (CtWildcardStaticTypeMemberReferenceImpl) ctImport.getReference();,if (ctImport != null ) CtWildcardStaticTypeMemberReferenceImpl importRef = (CtWildcardStaticTypeMemberReferenceImpl) ctImport.getReference();
ImportScannerImpl.java,String importRefStr = importRef.getQualifiedName();,if (importRef != null ) String importRefStr = importRef.getQualifiedName();
MainTest.java,SourcePosition position = modifier.getPosition();,if (modifier != null ) SourcePosition position = modifier.getPosition();
MainTest.java,CompilationUnit compilationUnit = position.getCompilationUnit();,if (position != null ) CompilationUnit compilationUnit = position.getCompilationUnit();
MainTest.java,String originalSourceCode = compilationUnit.getOriginalSourceCode();,if (compilationUnit != null ) String originalSourceCode = compilationUnit.getOriginalSourceCode();
MainTest.java,CtTypeParameter declaration = ref.getDeclaration();,if (ref != null ) CtTypeParameter declaration = ref.getDeclaration();
MainTest.java,CtExpression assigned = assign.getAssigned();,if (assign != null ) CtExpression assigned = assign.getAssigned();
MainTest.java,String report = problems.toString();,if (problems != null ) String report = problems.toString();
MainTest.java,SourcePosition sp = type.getPosition();,if (type != null ) SourcePosition sp = type.getPosition();
MainTest.java,pos = sourceFragment.getEnd();,if (sourceFragment != null ) pos = sourceFragment.getEnd();
MainTest.java,sourceFragment = sourceFragment.getNextSibling();,if (sourceFragment != null ) sourceFragment = sourceFragment.getNextSibling();
MainTest.java,CtPath path = element.getPath();,if (element != null ) CtPath path = element.getPath();
MainTest.java,String pathStr = path.toString();,if (path != null ) String pathStr = path.toString();
MainTest.java,CtElement parent = element.getParent();,if (element != null ) CtElement parent = element.getParent();
PackageFactory.java,CtPackageDeclaration pd = factory.Core().createPackageDeclaration();,if (factory != null ) CtPackageDeclaration pd = factory.Core().createPackageDeclaration();
ParentExiter.java,CompilationUnit cu = child.getPosition().getCompilationUnit();,if (child != null ) CompilationUnit cu = child.getPosition().getCompilationUnit();
CompilationUnitImpl.java,String name = getFile().getName();,if (getFile() != null ) String name = getFile().getName();
CompilationUnitImpl.java,final String nameOfType = type.getSimpleName();,if (type != null ) final String nameOfType = type.getSimpleName();
ModelStreamerTest.java,this.factory = launcher.getFactory();,if (launcher != null ) this.factory = launcher.getFactory();
MainTest.java,long startTime = System.currentTimeMillis();,if (System != null ) long startTime = System.currentTimeMillis();
MainTest.java,CtPath path = element.getPath();,if (element != null ) CtPath path = element.getPath();
MainTest.java,String pathStr = path.toString();,if (path != null ) String pathStr = path.toString();
MainTest.java,CtPath path = element.getPath();,if (element != null ) CtPath path = element.getPath();
MainTest.java,String pathStr = path.toString();,if (path != null ) String pathStr = path.toString();
AnnotationValuesTest.java,Factory factory = ModelUtils.createFactory();,if (ModelUtils != null ) Factory factory = ModelUtils.createFactory();
QualifiedThisRefTest.java,arg = factory.Core().createFieldRead();,if (factory != null ) arg = factory.Core().createFieldRead();
JDTTreeBuilderHelper.java,final TypeFactory typeFactory = jdtTreeBuilder.getFactory().Type();,if (jdtTreeBuilder != null ) final TypeFactory typeFactory = jdtTreeBuilder.getFactory().Type();
JDTTreeBuilderHelper.java,final ExecutableFactory executableFactory = jdtTreeBuilder.getFactory().Executable();,if (jdtTreeBuilder != null ) final ExecutableFactory executableFactory = jdtTreeBuilder.getFactory().Executable();
ElementSourceFragment.java,SourcePosition sp = element.getPosition();,if (element != null ) SourcePosition sp = element.getPosition();
ByteSerialization.java,byte[] serializedObject = bo.toByteArray();,if (bo != null ) byte[] serializedObject = bo.toByteArray();
ByteSerialization.java,Object objInput = si.readObject();,if (si != null ) Object objInput = si.readObject();
SerializableTest.java,String sigAf = des.getShortRepresentation();,if (des != null ) String sigAf = des.getShortRepresentation();
SerializableTest.java,String toSgAf = des.toString();,if (des != null ) String toSgAf = des.toString();
SerializableTest.java,CtPackage parentOriginal = (CtPackage) typeBef.getParent();,if (typeBef != null ) CtPackage parentOriginal = (CtPackage) typeBef.getParent();
SerializableTest.java,CtPackage parentDeser = (CtPackage) typeDes.getParent();,if (typeDes != null ) CtPackage parentDeser = (CtPackage) typeDes.getParent();
SniperJavaPrettyPrinter.java,ElementSourceFragment rootFragment = (ElementSourceFragment) sourceCompilationUnit.getOriginalSourceFragment();,if (sourceCompilationUnit != null ) ElementSourceFragment rootFragment = (ElementSourceFragment) sourceCompilationUnit.getOriginalSourceFragment();
CollectionSourceFragment.java,kind = esf.getContainerKindInParent();,if (esf != null ) kind = esf.getContainerKindInParent();
MethodsRefactoringTest.java,Object object = (Object) iter.next();,if (iter != null ) Object object = (Object) iter.next();
MavenLauncher.java,long time = date.getTime();,if (date != null ) long time = date.getTime();
MavenLauncher.java,String line = br.readLine();,if (br != null ) String line = br.readLine();
MavenLauncher.java,line = br.readLine();,if (br != null ) line = br.readLine();
InheritanceModel.java,Build build = model.getBuild();,if (model != null ) Build build = model.getBuild();
InheritanceModel.java,sourcePath = build.getSourceDirectory();,if (build != null ) sourcePath = build.getSourceDirectory();
InheritanceModel.java,Build build = model.getBuild();,if (model != null ) Build build = model.getBuild();
InheritanceModel.java,sourcePath = build.getTestSourceDirectory();,if (build != null ) sourcePath = build.getTestSourceDirectory();
InheritanceModel.java,String var = matcher.group();,if (matcher != null ) String var = matcher.group();
InheritanceModel.java,javaVersion = getSourceVersion(model.getBuild());,if (getSourceVersion(model != null ) javaVersion = getSourceVersion(model.getBuild());
InheritanceModel.java,javaVersion = getSourceVersion(profile.getBuild());,if (getSourceVersion(profile != null ) javaVersion = getSourceVersion(profile.getBuild());
InheritanceModel.java,String child = inheritanceModel.toString();,if (inheritanceModel != null ) String child = inheritanceModel.toString();
InheritanceModel.java,DependencyManagement dependencyManagement = model.getDependencyManagement();,if (model != null ) DependencyManagement dependencyManagement = model.getDependencyManagement();
InheritanceModel.java,List<Dependency> dependencies = dependencyManagement.getDependencies();,if (dependencyManagement != null ) List<Dependency> dependencies = dependencyManagement.getDependencies();
InheritanceModel.java,"String depKey = dependency.getGroupId() + "":"" + dependency.getArtifactId();","if (dependency != null ) String depKey = dependency.getGroupId() + "":"" + dependency.getArtifactId();"
InheritanceModel.java,String version = file.getName();,if (file != null ) String version = file.getName();
InheritanceModel.java,String groupId = extractVariable(dependency.getGroupId());,if (extractVariable(dependency != null ) String groupId = extractVariable(dependency.getGroupId());
InheritanceModel.java,String artifactId = extractVariable(dependency.getArtifactId());,if (extractVariable(dependency != null ) String artifactId = extractVariable(dependency.getArtifactId());
InheritanceModel.java,String groupId = extractVariable(model.getGroupId());,if (extractVariable(model != null ) String groupId = extractVariable(model.getGroupId());
InheritanceModel.java,String artifactId = extractVariable(model.getArtifactId());,if (extractVariable(model != null ) String artifactId = extractVariable(model.getArtifactId());
InheritanceModel.java,List<Dependency> dependencies = model.getDependencies();,if (model != null ) List<Dependency> dependencies = model.getDependencies();
TreeDependency.java,File file = dep.getTopLevelJar();,if (dep != null ) File file = dep.getTopLevelJar();
TreeDependency.java,File depFile = depPath.toFile();,if (depPath != null ) File depFile = depPath.toFile();
TreeDependency.java,depFile = depPath.toFile();,if (depPath != null ) depFile = depPath.toFile();
TreeDependency.java,String child = dep.toString();,if (dep != null ) String child = dep.toString();
CacheBasedConflictFinder.java,memberNames = new HashSet<>(allFields.size());,if (HashSet<>(allFields != null ) memberNames = new HashSet<>(allFields.size());
ReferenceBuilder.java,ReferenceBinding[] superInterfaces = typeParamBinding.superInterfaces();,if (typeParamBinding != null ) ReferenceBinding[] superInterfaces = typeParamBinding.superInterfaces();
CtTypeImpl.java,expectedType = tpr.clone();,if (tpr != null ) expectedType = tpr.clone();
CtTypeImpl.java,CtTypeParameter declaration = (CtTypeParameter) ctParameterType.getDeclaration();,if (ctParameterType != null ) CtTypeParameter declaration = (CtTypeParameter) ctParameterType.getDeclaration();
AbstractTypingContext.java,CtTypeParameterReference typeParamRefAdapted = typeParamRef.clone();,if (typeParamRef != null ) CtTypeParameterReference typeParamRefAdapted = typeParamRef.clone();
DefaultJavaPrettyPrinter.java,CtTypeParameterReference ref = typeParameter.getReference();,if (typeParameter != null ) CtTypeParameterReference ref = typeParameter.getReference();
MavenLauncher.java,String line = br.readLine();,if (br != null ) String line = br.readLine();
MavenLauncher.java,line = br.readLine();,if (br != null ) line = br.readLine();
TestCompilationUnit.java,CompilationUnit compilationUnit = type.getPosition().getCompilationUnit();,if (type != null ) CompilationUnit compilationUnit = type.getPosition().getCompilationUnit();
TestCompilationUnit.java,CompilationUnit compilationUnit = ctPackage.getPosition().getCompilationUnit();,if (ctPackage != null ) CompilationUnit compilationUnit = ctPackage.getPosition().getCompilationUnit();
TestCompilationUnit.java,CompilationUnit cu = launcher.getFactory().createCompilationUnit();,if (launcher != null ) CompilationUnit cu = launcher.getFactory().createCompilationUnit();
TestCompilationUnit.java,SourcePosition sp = cu.getPosition();,if (cu != null ) SourcePosition sp = cu.getPosition();
TestCompilationUnit.java,List<String> lines = Files.readAllLines(output.toPath());,if (Files != null ) List<String> lines = Files.readAllLines(output.toPath());
TestCompilationUnit.java,SourcePosition sourcePosition = myNewClass.getPosition();,if (myNewClass != null ) SourcePosition sourcePosition = myNewClass.getPosition();
TestCtBlock.java,CtBlock block = foo.getBody();,if (foo != null ) CtBlock block = foo.getBody();
TestCtBlock.java,CtStatement lastStatement = block.getLastStatement();,if (block != null ) CtStatement lastStatement = block.getLastStatement();
TestCtBlock.java,CtStatement newLastStatement = block.getLastStatement();,if (block != null ) CtStatement newLastStatement = block.getLastStatement();
TestCtBlock.java,CtBlock block = foo.getBody();,if (foo != null ) CtBlock block = foo.getBody();
TestCtBlock.java,CtBlock originalBlock = block.clone();,if (block != null ) CtBlock originalBlock = block.clone();
TestCtBlock.java,CtCase originalFirstCase = firstCase.clone();,if (firstCase != null ) CtCase originalFirstCase = firstCase.clone();
TestCtBlock.java,CtCase originalSecondCase = secondCase.clone();,if (secondCase != null ) CtCase originalSecondCase = secondCase.clone();
MavenLauncher.java,TreeDependency depTree = model.getTreeDependency();,if (model != null ) TreeDependency depTree = model.getTreeDependency();
MavenLauncher.java,List<File> dependencies = depTree.toJarList();,if (depTree != null ) List<File> dependencies = depTree.toJarList();
MavenLauncher.java,classpath[i] = file.getAbsolutePath();,if (file != null ) classpath[i] = file.getAbsolutePath();
MavenLauncher.java,File file = dep.getTopLevelJar();,if (dep != null ) File file = dep.getTopLevelJar();
MavenLauncher.java,File depFile = depPath.toFile();,if (depPath != null ) File depFile = depPath.toFile();
MavenLauncher.java,String child = dep.toString();,if (dep != null ) String child = dep.toString();
MavenLauncher.java,String groupId = model.getParent().getGroupId();,if (model != null ) String groupId = model.getParent().getGroupId();
MavenLauncher.java,String version = model.getParent().getVersion();,if (model != null ) String version = model.getParent().getVersion();
MavenLauncher.java,DependencyManagement dependencyManagement = model.getDependencyManagement();,if (model != null ) DependencyManagement dependencyManagement = model.getDependencyManagement();
MavenLauncher.java,List<Dependency> dependencies = dependencyManagement.getDependencies();,if (dependencyManagement != null ) List<Dependency> dependencies = dependencyManagement.getDependencies();
MavenLauncher.java,"String depKey = dependency.getGroupId() + "":"" + dependency.getArtifactId();","if (dependency != null ) String depKey = dependency.getGroupId() + "":"" + dependency.getArtifactId();"
MavenLauncher.java,Build build = model.getBuild();,if (model != null ) Build build = model.getBuild();
MavenLauncher.java,sourcePath = build.getSourceDirectory();,if (build != null ) sourcePath = build.getSourceDirectory();
MavenLauncher.java,Build build = model.getBuild();,if (model != null ) Build build = model.getBuild();
MavenLauncher.java,sourcePath = build.getTestSourceDirectory();,if (build != null ) sourcePath = build.getTestSourceDirectory();
MavenLauncher.java,String version = file.getName();,if (file != null ) String version = file.getName();
MavenLauncher.java,String groupId = extractVariable(dependency.getGroupId());,if (extractVariable(dependency != null ) String groupId = extractVariable(dependency.getGroupId());
MavenLauncher.java,String artifactId = extractVariable(dependency.getArtifactId());,if (extractVariable(dependency != null ) String artifactId = extractVariable(dependency.getArtifactId());
MavenLauncher.java,String groupId = extractVariable(model.getGroupId());,if (extractVariable(model != null ) String groupId = extractVariable(model.getGroupId());
MavenLauncher.java,String artifactId = extractVariable(model.getArtifactId());,if (extractVariable(model != null ) String artifactId = extractVariable(model.getArtifactId());
MavenLauncher.java,List<Dependency> dependencies = model.getDependencies();,if (model != null ) List<Dependency> dependencies = model.getDependencies();
MavenLauncher.java,String child = inheritanceModel.toString();,if (inheritanceModel != null ) String child = inheritanceModel.toString();
CtElementImpl.java,this.annotations = CtElementImpl.emptyList();,if (CtElementImpl != null ) this.annotations = CtElementImpl.emptyList();
CtElementImpl.java,this.comments = CtElementImpl.emptyList();,if (CtElementImpl != null ) this.comments = CtElementImpl.emptyList();
ImportScannerTest.java,String line = lines[i].trim();,if (lines[i] != null ) String line = lines[i].trim();
ImportScannerTest.java,String line = lines[i].trim();,if (lines[i] != null ) String line = lines[i].trim();
ReferenceBuilder.java,final ReferenceContext referenceContext = localVariableBinding.declaringScope.referenceContext();,if (localVariableBinding != null ) final ReferenceContext referenceContext = localVariableBinding.declaringScope.referenceContext();
JDTCommentBuilder.java,String line = lines[i].trim();,if (lines[i] != null ) String line = lines[i].trim();
ElementTest.java,CtElement element = spoon.getFactory().createAnnotation();,if (spoon != null ) CtElement element = spoon.getFactory().createAnnotation();
TestInterfaceWithoutSetup.java,Set<CtExtendedModifier> extendedModifierSet = fieldImplicit.getExtendedModifiers();,if (fieldImplicit != null ) Set<CtExtendedModifier> extendedModifierSet = fieldImplicit.getExtendedModifiers();
TestInterfaceWithoutSetup.java,extendedModifierSet = fieldExplicit.getExtendedModifiers();,if (fieldExplicit != null ) extendedModifierSet = fieldExplicit.getExtendedModifiers();
TestInterfaceWithoutSetup.java,extendedModifierSet = staticMethod.getExtendedModifiers();,if (staticMethod != null ) extendedModifierSet = staticMethod.getExtendedModifiers();
TestInterfaceWithoutSetup.java,extendedModifierSet = publicMethod.getExtendedModifiers();,if (publicMethod != null ) extendedModifierSet = publicMethod.getExtendedModifiers();
TestInterfaceWithoutSetup.java,extendedModifierSet = defaultMethod.getExtendedModifiers();,if (defaultMethod != null ) extendedModifierSet = defaultMethod.getExtendedModifiers();
TestInterfaceWithoutSetup.java,extendedModifierSet = explicitDefaultMethod.getExtendedModifiers();,if (explicitDefaultMethod != null ) extendedModifierSet = explicitDefaultMethod.getExtendedModifiers();
ImportBuilderTest.java,Collection<CtImport> imports = unitA.getImports();,if (unitA != null ) Collection<CtImport> imports = unitA.getImports();
ImportBuilderTest.java,CtImport ref = imports.iterator().next();,if (imports != null ) CtImport ref = imports.iterator().next();
ImportBuilderTest.java,CtTypeReference refType = (CtTypeReference)ref.getReference();,if ((CtTypeReference)ref != null ) CtTypeReference refType = (CtTypeReference)ref.getReference();
ImportBuilderTest.java,Collection<CtImport> imports = unitA.getImports();,if (unitA != null ) Collection<CtImport> imports = unitA.getImports();
ImportBuilderTest.java,CtImport ref = imports.iterator().next();,if (imports != null ) CtImport ref = imports.iterator().next();
ImportBuilderTest.java,Collection<CtImport> imports = unitA.getImports();,if (unitA != null ) Collection<CtImport> imports = unitA.getImports();
ImportBuilderTest.java,Iterator<CtImport> iterator = imports.iterator();,if (imports != null ) Iterator<CtImport> iterator = imports.iterator();
ImportBuilderTest.java,CtImport ctImport = iterator.next();,if (iterator != null ) CtImport ctImport = iterator.next();
ImportBuilderTest.java,CtPackageReference ref = (CtPackageReference)ctImport.getReference();,if ((CtPackageReference)ctImport != null ) CtPackageReference ref = (CtPackageReference)ctImport.getReference();
ImportBuilderTest.java,Collection<CtImport> imports = unitStatic.getImports();,if (unitStatic != null ) Collection<CtImport> imports = unitStatic.getImports();
ImportBuilderTest.java,CtImport ctImport = imports.iterator().next();,if (imports != null ) CtImport ctImport = imports.iterator().next();
ImportBuilderTest.java,Collection<CtImport> imports = unitStatic.getImports();,if (unitStatic != null ) Collection<CtImport> imports = unitStatic.getImports();
ImportBuilderTest.java,CtImport ctImport = imports.iterator().next();,if (imports != null ) CtImport ctImport = imports.iterator().next();
Launcher.java,t = System.currentTimeMillis();,if (System != null ) t = System.currentTimeMillis();
MetamodelProperty.java,newValueType = mMethod.getValueType();,if (mMethod != null ) newValueType = mMethod.getValueType();
MetamodelProperty.java,newValueType = mMethod.getValueType();,if (mMethod != null ) newValueType = mMethod.getValueType();
ByteSerialization.java,serializedObject = bo.toByteArray();,if (bo != null ) serializedObject = bo.toByteArray();
ByteSerialization.java,objInput = si.readObject();,if (si != null ) objInput = si.readObject();
CompilationUnitFactory.java,CompilationUnit cu = factory.Core().createCompilationUnit();,if (factory != null ) CompilationUnit cu = factory.Core().createCompilationUnit();
PrintingContext.java,TypeContext tc = currentThis.peek();,if (currentThis != null ) TypeContext tc = currentThis.peek();
CompilationUnitWrapper.java,String result = printer.getResult();,if (printer != null ) String result = printer.getResult();
CompilationUnitWrapper.java,char[] content = result.toCharArray();,if (result != null ) char[] content = result.toCharArray();
JDTBasedSpoonCompiler.java,CompilationUnitDeclaration[] units = batchCompiler.getUnits();,if (batchCompiler != null ) CompilationUnitDeclaration[] units = batchCompiler.getUnits();
ModelUtils.java,SpoonModelBuilder comp = launcher.createCompiler();,if (launcher != null ) SpoonModelBuilder comp = launcher.createCompiler();
JavaReflectionTreeBuilder.java,Iterator<RuntimeBuilderContext> contextIterator = contexts.iterator();,if (contexts != null ) Iterator<RuntimeBuilderContext> contextIterator = contexts.iterator();
JavaReflectionTreeBuilder.java,Iterator<RuntimeBuilderContext> contextIterator = contexts.iterator();,if (contexts != null ) Iterator<RuntimeBuilderContext> contextIterator = contexts.iterator();
PositionTest.java,BodyHolderSourcePosition pos = (BodyHolderSourcePosition) catcher.getPosition();,if (catcher != null ) BodyHolderSourcePosition pos = (BodyHolderSourcePosition) catcher.getPosition();
PositionBuilder.java,char[] contents = cr.compilationUnit.getContents();,if (cr != null ) char[] contents = cr.compilationUnit.getContents();
PositionBuilder.java,int length = variableDeclaration.toString().length();,if (variableDeclaration != null ) int length = variableDeclaration.toString().length();
PositionBuilder.java,Iterator<ASTPair> iterator = this.jdtTreeBuilder.getContextBuilder().stack.iterator();,if (this != null ) Iterator<ASTPair> iterator = this.jdtTreeBuilder.getContextBuilder().stack.iterator();
PositionBuilder.java,ASTPair catchNode = iterator.next();,if (iterator != null ) ASTPair catchNode = iterator.next();
PositionBuilder.java,catchNode = iterator.next();,if (iterator != null ) catchNode = iterator.next();
PositionBuilder.java,int variableNameEnd = argumentPosition.getSourceEnd();,if (argumentPosition != null ) int variableNameEnd = argumentPosition.getSourceEnd();
PositionBuilder.java,modifierStart = argumentPosition.getModifierSourceStart();,if (argumentPosition != null ) modifierStart = argumentPosition.getModifierSourceStart();
PositionBuilder.java,modifierEnd = argumentPosition.getModifierSourceEnd();,if (argumentPosition != null ) modifierEnd = argumentPosition.getModifierSourceEnd();
PositionBuilder.java,sourceEnd = argumentPosition.getSourceEnd();,if (argumentPosition != null ) sourceEnd = argumentPosition.getSourceEnd();
ImportScannerImpl.java,String packQualifiedName = ref.getPackage().getQualifiedName();,if (ref != null ) String packQualifiedName = ref.getPackage().getQualifiedName();
ImportScannerImpl.java,String typeImportQualifiedName = ctImport.getReference().getSimpleName();,if (ctImport != null ) String typeImportQualifiedName = ctImport.getReference().getSimpleName();
ImportScannerImpl.java,CtExecutableReference execRef = (CtExecutableReference) ctImport.getReference();,if (ctImport != null ) CtExecutableReference execRef = (CtExecutableReference) ctImport.getReference();
ImportScannerImpl.java,CtTypeReference declaringType = execRef.getDeclaringType();,if (execRef != null ) CtTypeReference declaringType = execRef.getDeclaringType();
ImportScannerImpl.java,String typeMethodQualifiedName = ref.getDeclaringType().getQualifiedName();,if (ref != null ) String typeMethodQualifiedName = ref.getDeclaringType().getQualifiedName();
ImportScannerImpl.java,String typeImportQualifiedName = ctImport.getReference().getSimpleName();,if (ctImport != null ) String typeImportQualifiedName = ctImport.getReference().getSimpleName();
ImportScannerImpl.java,String typeFieldQualifiedName = ref.getQualifiedName();,if (ref != null ) String typeFieldQualifiedName = ref.getQualifiedName();
ImportScannerImpl.java,String typeImportQualifiedName = ctImport.getReference().getSimpleName();,if (ctImport != null ) String typeImportQualifiedName = ctImport.getReference().getSimpleName();
UnknownDeclarationTest.java,final CtExecutable executable = reference.getDeclaration();,if (reference != null ) final CtExecutable executable = reference.getDeclaration();
JDTBasedSpoonCompilerTest.java,JDTBasedSpoonCompiler spoonCompiler = (JDTBasedSpoonCompiler) launcher.getModelBuilder();,if (launcher != null ) JDTBasedSpoonCompiler spoonCompiler = (JDTBasedSpoonCompiler) launcher.getModelBuilder();
StandardEnvironment.java,private Charset encoding = Charset.defaultCharset();,if (Charset != null ) private Charset encoding = Charset.defaultCharset();
ImportScannerTest.java,Set<CtType> keys = new HashSet<>(unusedImports.keySet());,if (HashSet<>(unusedImports != null ) Set<CtType> keys = new HashSet<>(unusedImports.keySet());
ModelUtils.java,SpoonModelBuilder comp = new Launcher().createCompiler();,if (Launcher() != null ) SpoonModelBuilder comp = new Launcher().createCompiler();
ModelUtils.java,SpoonModelBuilder comp = new Launcher().createCompiler();,if (Launcher() != null ) SpoonModelBuilder comp = new Launcher().createCompiler();
PackageFactory.java,CtPackage last = factory.getModel().getRootPackage();,if (factory != null ) CtPackage last = factory.getModel().getRootPackage();
JDTTreeBuilder.java,pack = factory.Package().getRootPackage();,if (factory != null ) pack = factory.Package().getRootPackage();
Metamodel.java,String name = type.getSimpleName();,if (type != null ) String name = type.getSimpleName();
SubstitutionVisitor.java,Object value = context.getParameterValue(element.getSimpleName());,if (context != null ) Object value = context.getParameterValue(element.getSimpleName());
SubstitutionVisitor.java,Object value = context.getParameterValue(reference.getSimpleName());,if (context != null ) Object value = context.getParameterValue(reference.getSimpleName());
SubstitutionVisitor.java,String newParamName = foreach.getVariable().getSimpleName();,if (foreach != null ) String newParamName = foreach.getVariable().getSimpleName();
SubstitutionVisitor.java,Object value = context.getParameterValue(ref.getSimpleName());,if (context != null ) Object value = context.getParameterValue(ref.getSimpleName());
SubstitutionVisitor.java,Object v = context.getParameterValue(ref.getSimpleName());,if (context != null ) Object v = context.getParameterValue(ref.getSimpleName());
SubstitutionVisitor.java,toReplace = (CtExpression) fieldAccess.getParent();,if (fieldAccess != null ) toReplace = (CtExpression) fieldAccess.getParent();
SubstitutionVisitor.java,fa = (CtFieldAccess<?>) invocation.getTarget();,if (invocation != null ) fa = (CtFieldAccess<?>) invocation.getTarget();
SubstitutionVisitor.java,SourcePosition pos = ele.getPosition();,if (ele != null ) SourcePosition pos = ele.getPosition();
SubstitutionVisitor.java,CompilationUnit cu = pos.getCompilationUnit();,if (pos != null ) CompilationUnit cu = pos.getCompilationUnit();
SubstitutionVisitor.java,String content = comment.getContent();,if (comment != null ) String content = comment.getContent();
SubstitutionVisitor.java,String value = getParameterValueAsString(e.getValue());,if (getParameterValueAsString(e != null ) String value = getParameterValueAsString(e.getValue());
Substitution.java,final Factory f = templateOfType.getFactory();,if (templateOfType != null ) final Factory f = templateOfType.getFactory();
TemplateMatcher.java,String name = var.getSimpleName();,if (var != null ) String name = var.getSimpleName();
TemplateMatcher.java,String name = templateDeclaration.getSimpleName();,if (templateDeclaration != null ) String name = templateDeclaration.getSimpleName();
TemplateMatcher.java,ParameterMatcher instance = pm.newInstance();,if (pm != null ) ParameterMatcher instance = pm.newInstance();
TemplateMatcher.java,ParameterMatcher instance = getParameterInstance(param.getVariable());,if (getParameterInstance(param != null ) ParameterMatcher instance = getParameterInstance(param.getVariable());
TemplateMatcher.java,instance = param.match().newInstance();,if (param != null ) instance = param.match().newInstance();
TemplateTest.java,Factory factory = launcher.getFactory();,if (launcher != null ) Factory factory = launcher.getFactory();
MavenLauncher.java,Parent parent = model.getParent();,if (model != null ) Parent parent = model.getParent();
MavenLauncher.java,String version = extractVariable(parent.getVersion());,if (extractVariable(parent != null ) String version = extractVariable(parent.getVersion());
MavenLauncher.java,File jar = depPath.toFile();,if (depPath != null ) File jar = depPath.toFile();
MavenLauncher.java,String version = extractVariable(dependency.getVersion());,if (extractVariable(dependency != null ) String version = extractVariable(dependency.getVersion());
MavenLauncher.java,File depFile = depPath.toFile();,if (depPath != null ) File depFile = depPath.toFile();
Metamodel.java,String iface = impl.getQualifiedName();,if (impl != null ) String iface = impl.getQualifiedName();
Metamodel.java,Factory f = method.getFactory();,if (method != null ) Factory f = method.getFactory();
RoleHandlersGenerator.java,String typeName = field.getOwnerConcept().getName();,if (field != null ) String typeName = field.getOwnerConcept().getName();
SpoonArchitectureEnforcerTest.java,CtInterface abstractIface = mmConcept.getModelInterface();,if (mmConcept != null ) CtInterface abstractIface = mmConcept.getModelInterface();
ReplaceParametrizedTest.java,factory = metaModel.getFactory();,if (metaModel != null ) factory = metaModel.getFactory();
CtAnnotationImpl.java,"Object array = Array.newInstance(componentType, elements.size());","if (elements != null ) Object array = Array.newInstance(componentType, elements.size());"
CtAnnotationImpl.java,ret = Boolean.parseBoolean(ret.toString());,if (Boolean != null ) ret = Boolean.parseBoolean(ret.toString());
CtAnnotationImpl.java,ret = Byte.parseByte(ret.toString());,if (Byte != null ) ret = Byte.parseByte(ret.toString());
CtAnnotationImpl.java,ret = Double.parseDouble(ret.toString());,if (Double != null ) ret = Double.parseDouble(ret.toString());
CtAnnotationImpl.java,ret = Float.parseFloat(ret.toString());,if (Float != null ) ret = Float.parseFloat(ret.toString());
CtAnnotationImpl.java,ret = Integer.parseInt(ret.toString());,if (Integer != null ) ret = Integer.parseInt(ret.toString());
CtAnnotationImpl.java,ret = Long.parseLong(ret.toString());,if (Long != null ) ret = Long.parseLong(ret.toString());
CtAnnotationImpl.java,ret = Short.parseShort(ret.toString());,if (Short != null ) ret = Short.parseShort(ret.toString());
Timer.java,start = System.currentTimeMillis();,if (System != null ) start = System.currentTimeMillis();
Timer.java,stop = System.currentTimeMillis();,if (System != null ) stop = System.currentTimeMillis();
MetaModelTest.java,Class ifaceClass =  iface.getActualClass();,if (iface != null ) Class ifaceClass =  iface.getActualClass();
MetaModelTest.java,Factory factory = launcher.getFactory();,if (launcher != null ) Factory factory = launcher.getFactory();
MetaModelTest.java,Factory factory = launcher.getFactory();,if (launcher != null ) Factory factory = launcher.getFactory();
MetaModelTest.java,Factory factory = launcher.getFactory();,if (launcher != null ) Factory factory = launcher.getFactory();
MetaModelTest.java,Factory factory = launcher.getFactory();,if (launcher != null ) Factory factory = launcher.getFactory();
MetaModelTest.java,Factory factory = launcher.getFactory();,if (launcher != null ) Factory factory = launcher.getFactory();
MetaModelTest.java,Factory factory = launcher.getFactory();,if (launcher != null ) Factory factory = launcher.getFactory();
CtBlockImpl.java,this.statements = CtElementImpl.emptyList();,if (CtElementImpl != null ) this.statements = CtElementImpl.emptyList();
CtPackageImpl.java,this.packs = CtElementImpl.emptySet();,if (CtElementImpl != null ) this.packs = CtElementImpl.emptySet();
CtPackageImpl.java,this.types = CtElementImpl.emptySet();,if (CtElementImpl != null ) this.types = CtElementImpl.emptySet();
FactoryTest.java,CtModel model = spoon.getModel();,if (spoon != null ) CtModel model = spoon.getModel();
CtTypeParameterReferenceImpl.java,parent = parent.getParent();,if (parent != null ) parent = parent.getParent();
JavaReflectionTreeBuilder.java,ctTypeReference = factory.Core().createTypeParameterReference();,if (factory != null ) ctTypeReference = factory.Core().createTypeParameterReference();
JavaReflectionTreeBuilder.java,ctTypeReference = factory.Core().createTypeReference();,if (factory != null ) ctTypeReference = factory.Core().createTypeReference();
JavaReflectionTreeBuilder.java,cl = cl.getComponentType();,if (cl != null ) cl = cl.getComponentType();
PositionBuilder.java,ASTPair next = iterator.next();,if (iterator != null ) ASTPair next = iterator.next();
SourcePositionImpl.java,this.file = compilationUnit.getFile();,if (compilationUnit != null ) this.file = compilationUnit.getFile();
JDTBasedSpoonCompiler.java,File f = sf.toFile();,if (sf != null ) File f = sf.toFile();
RoleHandlersGenerator.java,String typeName = field.getOwnerType().getName();,if (field != null ) String typeName = field.getOwnerType().getName();
SpoonArchitectureEnforcerTest.java,CtInterface abstractIface = mmType.getModelInterface();,if (mmType != null ) CtInterface abstractIface = mmType.getModelInterface();
MetamodelProperty.java,this.valueContainerType = MMContainerType.valueOf(valueType.getActualClass());,if (MMContainerType != null ) this.valueContainerType = MMContainerType.valueOf(valueType.getActualClass());
MetamodelProperty.java,MMContainerType valueContainerType = MMContainerType.valueOf(valueType.getActualClass());,if (MMContainerType != null ) MMContainerType valueContainerType = MMContainerType.valueOf(valueType.getActualClass());
CtLambdaImpl.java,this.thrownTypes = CtElementImpl.emptySet();,if (CtElementImpl != null ) this.thrownTypes = CtElementImpl.emptySet();
ReplaceParametrizedTest.java,argument = factory.Core().createFieldReference();,if (factory != null ) argument = factory.Core().createFieldReference();
ReplaceParametrizedTest.java,argument = factory.Core().createFieldReference();,if (factory != null ) argument = factory.Core().createFieldReference();
TypeFactory.java,pack = factory.Package().getRootPackage();,if (factory != null ) pack = factory.Package().getRootPackage();
ReplaceParametrizedTest.java,Method setter = ctsetter.getReference().getActualMethod();,if (ctsetter != null ) Method setter = ctsetter.getReference().getActualMethod();
ReplacementVisitor.java,shouldBeDeleted = entry.getValue();,if (entry != null ) shouldBeDeleted = entry.getValue();
ReplacementVisitor.java,key = entry.getKey();,if (entry != null ) key = entry.getKey();
ClassTypingContext.java,actualTypeArguments = getTypeReferences(typeDeclarer.getFormalCtTypeParameters());,if (getTypeReferences(typeDeclarer != null ) actualTypeArguments = getTypeReferences(typeDeclarer.getFormalCtTypeParameters());
CtJavaDocImpl.java,indexEndSentence = this.getContent().length();,if (this != null ) indexEndSentence = this.getContent().length();
CompilationUnitFactory.java,baseDir = this.getBaseDirectory();,if (this != null ) baseDir = this.getBaseDirectory();
JavaOutputProcessor.java,CtPackage pack = element.getPackage();,if (element != null ) CtPackage pack = element.getPackage();
JavaOutputProcessor.java,moduleDir = new File(getOutputDirectory().getAbsolutePath());,if (File(getOutputDirectory() != null ) moduleDir = new File(getOutputDirectory().getAbsolutePath());
JavaOutputProcessor.java,packageDir = this.getModuleFile(pack.getDeclaringModule());,if (this != null ) packageDir = this.getModuleFile(pack.getDeclaringModule());
StandardEnvironment.java,this.sourceOutputDirectory = directory.getCanonicalFile();,if (directory != null ) this.sourceOutputDirectory = directory.getCanonicalFile();
DefaultPrettyPrinterTest.java,PrettyPrinter pp = new DefaultJavaPrettyPrinter(factory.getEnvironment());,if (DefaultJavaPrettyPrinter(factory != null ) PrettyPrinter pp = new DefaultJavaPrettyPrinter(factory.getEnvironment());
DefaultJavaPrettyPrinter.java,final String fieldName = field.getSimpleName();,if (field != null ) final String fieldName = field.getSimpleName();
JavaOutputProcessor.java,cu = element.getPosition().getCompilationUnit();,if (element != null ) cu = element.getPosition().getCompilationUnit();
AnnotationTest.java,factory = launcher.getFactory();,if (launcher != null ) factory = launcher.getFactory();
AnnotationTest.java,factory = spoon.getFactory();,if (spoon != null ) factory = spoon.getFactory();
AnnotationTest.java,factory = spoon.getFactory();,if (spoon != null ) factory = spoon.getFactory();
AnnotationTest.java,factory = spoon.getFactory();,if (spoon != null ) factory = spoon.getFactory();
AnnotationTest.java,factory = spoon.getFactory();,if (spoon != null ) factory = spoon.getFactory();
AnnotationTest.java,factory = spoon.getFactory();,if (spoon != null ) factory = spoon.getFactory();
AnnotationTest.java,factory = spoon.getFactory();,if (spoon != null ) factory = spoon.getFactory();
JavaOutputProcessor.java,directory = directory.getCanonicalFile();,if (directory != null ) directory = directory.getCanonicalFile();
JavaOutputProcessor.java,moduleDir = new File(directory.getAbsolutePath());,if (File(directory != null ) moduleDir = new File(directory.getAbsolutePath());
MethodReferenceTest.java,final Factory factory = launcher.createFactory();,if (launcher != null ) final Factory factory = launcher.createFactory();
PackageTest.java,Factory factory = launcher.createFactory();,if (launcher != null ) Factory factory = launcher.createFactory();
PackageTest.java,"JavaOutputProcessor outputProcessor = spoon.createOutputWriter(outputDir, spoon.getEnvironment());","if (spoon != null ) JavaOutputProcessor outputProcessor = spoon.createOutputWriter(outputDir, spoon.getEnvironment());"
CtModelImpl.java,QueueProcessingManager processingManager = new QueueProcessingManager(getRootPackage().getFactory());,if (QueueProcessingManager(getRootPackage() != null ) QueueProcessingManager processingManager = new QueueProcessingManager(getRootPackage().getFactory());
JavaOutputProcessor.java,packageDir = new File(directory.getAbsolutePath());,if (File(directory != null ) packageDir = new File(directory.getAbsolutePath());
ReferenceBuilder.java,String name = new String(reference.shortReadableName());,if (String(reference != null ) String name = new String(reference.shortReadableName());
DefaultJavaPrettyPrinter.java,boolean isImportedField = importsContext.isImported(f.getVariable());,if (importsContext != null ) boolean isImportedField = importsContext.isImported(f.getVariable());
ElementPrinterHelper.java,importTypeStr = typeRef.getQualifiedName();,if (typeRef != null ) importTypeStr = typeRef.getQualifiedName();
JDTImportBuilder.java,Set<CtMethod> methods = klass.getAllMethods();,if (klass != null ) Set<CtMethod> methods = klass.getAllMethods();
HashcodeVisitor.java,hashCode += e.getSimpleName().hashCode();,if (e != null ) hashCode += e.getSimpleName().hashCode();
ImportScannerTest.java,Collection<CtReference> imports = importContext.getAllImports();,if (importContext != null ) Collection<CtReference> imports = importContext.getAllImports();
ImportScannerTest.java,Collection<CtReference> imports = importContext.getAllImports();,if (importContext != null ) Collection<CtReference> imports = importContext.getAllImports();
ImportScannerTest.java,Collection<CtReference> imports = importContext.getAllImports();,if (importContext != null ) Collection<CtReference> imports = importContext.getAllImports();
ImportScannerTest.java,Collection<CtReference> imports = importScanner.getAllImports();,if (importScanner != null ) Collection<CtReference> imports = importScanner.getAllImports();
ImportTest.java,Collection<CtReference> imports = importContext.getAllImports();,if (importContext != null ) Collection<CtReference> imports = importContext.getAllImports();
ImportTest.java,Collection<CtReference> imports = importContext.getAllImports();,if (importContext != null ) Collection<CtReference> imports = importContext.getAllImports();
ImportTest.java,Collection<CtReference> imports = importContext.getAllImports();,if (importContext != null ) Collection<CtReference> imports = importContext.getAllImports();
ImportBuilderTest.java,Collection<CtReference> imports = unitA.getImports();,if (unitA != null ) Collection<CtReference> imports = unitA.getImports();
ImportBuilderTest.java,CtReference ref = imports.iterator().next();,if (imports != null ) CtReference ref = imports.iterator().next();
ImportBuilderTest.java,Collection<CtReference> imports = unitA.getImports();,if (unitA != null ) Collection<CtReference> imports = unitA.getImports();
ImportBuilderTest.java,CtReference ref = imports.iterator().next();,if (imports != null ) CtReference ref = imports.iterator().next();
ImportBuilderTest.java,Collection<CtReference> imports = unitA.getImports();,if (unitA != null ) Collection<CtReference> imports = unitA.getImports();
ImportBuilderTest.java,Iterator<CtReference> iterator = imports.iterator();,if (imports != null ) Iterator<CtReference> iterator = imports.iterator();
ImportBuilderTest.java,CtReference firstRef = iterator.next();,if (iterator != null ) CtReference firstRef = iterator.next();
ImportBuilderTest.java,CtReference secondRef = iterator.next();,if (iterator != null ) CtReference secondRef = iterator.next();
ImportBuilderTest.java,CtReference thirdRef = iterator.next();,if (iterator != null ) CtReference thirdRef = iterator.next();
ImportBuilderTest.java,Collection<CtReference> imports = unitStatic.getImports();,if (unitStatic != null ) Collection<CtReference> imports = unitStatic.getImports();
ImportBuilderTest.java,Collection<CtReference> imports = unitStatic.getImports();,if (unitStatic != null ) Collection<CtReference> imports = unitStatic.getImports();
CtModelImpl.java,QueueProcessingManager processingManager = new QueueProcessingManager(rootPackage.getFactory());,if (QueueProcessingManager(rootPackage != null ) QueueProcessingManager processingManager = new QueueProcessingManager(rootPackage.getFactory());
CtRole.java,name = name.toLowerCase();,if (name != null ) name = name.toLowerCase();
CtRole.java,name = name.toLowerCase();,if (name != null ) name = name.toLowerCase();
CtCatchVariableImpl.java,Set<ModifierKind> modifiers = CtElementImpl.emptySet();,if (CtElementImpl != null ) Set<ModifierKind> modifiers = CtElementImpl.emptySet();
CtLocalVariableImpl.java,Set<ModifierKind> modifiers = CtElementImpl.emptySet();,if (CtElementImpl != null ) Set<ModifierKind> modifiers = CtElementImpl.emptySet();
CtConstructorImpl.java,Set<ModifierKind> modifiers = CtElementImpl.emptySet();,if (CtElementImpl != null ) Set<ModifierKind> modifiers = CtElementImpl.emptySet();
CtFieldImpl.java,Set<ModifierKind> modifiers = CtElementImpl.emptySet();,if (CtElementImpl != null ) Set<ModifierKind> modifiers = CtElementImpl.emptySet();
CtMethodImpl.java,Set<ModifierKind> modifiers = CtElementImpl.emptySet();,if (CtElementImpl != null ) Set<ModifierKind> modifiers = CtElementImpl.emptySet();
CtParameterImpl.java,Set<ModifierKind> modifiers = CtElementImpl.emptySet();,if (CtElementImpl != null ) Set<ModifierKind> modifiers = CtElementImpl.emptySet();
ClassTypingContext.java,Factory factory = method.getFactory();,if (method != null ) Factory factory = method.getFactory();
ClassTypingContext.java,CtMethod<T> adaptedMethod = factory.Core().createMethod();,if (factory != null ) CtMethod<T> adaptedMethod = factory.Core().createMethod();
ClassTypingContext.java,CtTypeParameter newTypeParam = typeParam.clone();,if (typeParam != null ) CtTypeParameter newTypeParam = typeParam.clone();
ClassTypingContext.java,CtTypeParameter typeParam = typeParamRef.getDeclaration();,if (typeParamRef != null ) CtTypeParameter typeParam = typeParamRef.getDeclaration();
MethodTypingContext.java,actualTypeArguments = getTypeReferences(scopeMethod.getFormalCtTypeParameters());,if (getTypeReferences(scopeMethod != null ) actualTypeArguments = getTypeReferences(scopeMethod.getFormalCtTypeParameters());
MethodTypingContext.java,actualTypeArguments = getTypeReferences(scopeConstructor.getFormalCtTypeParameters());,if (getTypeReferences(scopeConstructor != null ) actualTypeArguments = getTypeReferences(scopeConstructor.getFormalCtTypeParameters());
MethodTypingContext.java,this.actualTypeArguments = execRef.getActualTypeArguments();,if (execRef != null ) this.actualTypeArguments = execRef.getActualTypeArguments();
ElementPrinterHelper.java,importTypeStr = typeRef.getQualifiedName();,if (typeRef != null ) importTypeStr = typeRef.getQualifiedName();
DefaultJavaPrettyPrinter.java,SourcePosition position = literal.getPosition();,if (literal != null ) SourcePosition position = literal.getPosition();
DefaultJavaPrettyPrinter.java,SourcePosition position = literal.getPosition();,if (literal != null ) SourcePosition position = literal.getPosition();
FileCompilerConfig.java,"char[] content = IOUtils.toCharArray(inputStream, jdtCompiler.getEncoding());","if (jdtCompiler != null ) char[] content = IOUtils.toCharArray(inputStream, jdtCompiler.getEncoding());"
DefaultJavaPrettyPrinter.java,String content = comment.getContent();,if (comment != null ) String content = comment.getContent();
JDTBasedSpoonCompiler.java,InputStream is = getCompilationUnitInputStream(cu.getFile().getPath());,if (getCompilationUnitInputStream(cu != null ) InputStream is = getCompilationUnitInputStream(cu.getFile().getPath());
ElementPrinterHelper.java,List<String> sortedImports = new ArrayList<>(imports.size());,if (ArrayList<>(imports != null ) List<String> sortedImports = new ArrayList<>(imports.size());
DefaultJavaPrettyPrinter.java,String ret = printer.toString();,if (printer != null ) String ret = printer.toString();
JDTBasedSpoonCompiler.java,List<SpoonFile> sourceFiles = sourcesFolder.getAllJavaFiles();,if (sourcesFolder != null ) List<SpoonFile> sourceFiles = sourcesFolder.getAllJavaFiles();
ImportScannerImpl.java,String methodName = ref.getSimpleName();,if (ref != null ) String methodName = ref.getSimpleName();
MetamodelTest.java,List<CtType> superType = superQuery.list();,if (superQuery != null ) List<CtType> superType = superQuery.list();
SubstitutionVisitor.java,String name = parameter.getSimpleName();,if (parameter != null ) String name = parameter.getSimpleName();
SubstitutionVisitor.java,CtStatement body = foreach.getBody();,if (foreach != null ) CtStatement body = foreach.getBody();
SubstitutionVisitor.java,CtStatement b = body.clone();,if (body != null ) CtStatement b = body.clone();
ImportScannerImpl.java,targetType = simpleType.getReference().getTopLevelType();,if (simpleType != null ) targetType = simpleType.getReference().getTopLevelType();
CtRenameLocalVariableRefactoring.java,searchScope = variable.getParent();,if (variable != null ) searchScope = variable.getParent();
PrintingContext.java,TypeContext tc = currentThis.peek();,if (currentThis != null ) TypeContext tc = currentThis.peek();
TypeContext.java,typeRef = type.getReference();,if (type != null ) typeRef = type.getReference();
TypeContext.java,memberNames = new HashSet<>(allFields.size());,if (HashSet<>(allFields != null ) memberNames = new HashSet<>(allFields.size());
LocalVariableReferenceFunction.java,final String simpleName = variable.getSimpleName();,if (variable != null ) final String simpleName = variable.getSimpleName();
LocalVariableReferenceFunction.java,final CtElement variableParent = variable.getParent();,if (variable != null ) final CtElement variableParent = variable.getParent();
LocalVariableReferenceFunction.java,return variable == varRef.getDeclaration();,if (varRef != null ) return variable == varRef.getDeclaration();
ParentFunction.java,parent = parent.getParent();,if (parent != null ) parent = parent.getParent();
PotentialVariableDeclarationFunction.java,CtElement parent = scopeElement.getParent();,if (scopeElement != null ) CtElement parent = scopeElement.getParent();
SiblingsFunction.java,final CtElement parent = input.getParent();,if (input != null ) final CtElement parent = input.getParent();
SubtypeFilter.java,superTypeQualifiedName = superType.getQualifiedName();,if (superType != null ) superTypeQualifiedName = superType.getQualifiedName();
SuperInheritanceHierarchyFunction.java,typeRef = type.getReference();,if (type != null ) typeRef = type.getReference();
SuperInheritanceHierarchyFunction.java,type = typeRef.getTypeDeclaration();,if (typeRef != null ) type = typeRef.getTypeDeclaration();
SuperInheritanceHierarchyFunction.java,superInterfaces = type.getSuperInterfaces();,if (type != null ) superInterfaces = type.getSuperInterfaces();
SuperInheritanceHierarchyFunction.java,type = typeRef.getTypeDeclaration();,if (typeRef != null ) type = typeRef.getTypeDeclaration();
FileSystemFile.java,this.file = file.getCanonicalFile();,if (file != null ) this.file = file.getCanonicalFile();
FileSystemFolder.java,this.file = file.getCanonicalFile();,if (file != null ) this.file = file.getCanonicalFile();
SnippetCompilationHelper.java,Factory f = st.getFactory();,if (st != null ) Factory f = st.getFactory();
SnippetCompilationHelper.java,List<CtStatement> statements = wrapper.getBody().getStatements();,if (wrapper != null ) List<CtStatement> statements = wrapper.getBody().getStatements();
SnippetCompilationHelper.java,CtBlock body = f.Core().createBlock();,if (f != null ) CtBlock body = f.Core().createBlock();
SnippetCompilationHelper.java,CtReturn ret = f.Core().createReturn();,if (f != null ) CtReturn ret = f.Core().createReturn();
FactoryCompilerConfig.java,JDTBasedSpoonCompiler jdtCompiler = compiler.getJdtCompiler();,if (compiler != null ) JDTBasedSpoonCompiler jdtCompiler = compiler.getJdtCompiler();
FileCompilerConfig.java,JDTBasedSpoonCompiler jdtCompiler = compiler.getJdtCompiler();,if (compiler != null ) JDTBasedSpoonCompiler jdtCompiler = compiler.getJdtCompiler();
FileCompilerConfig.java,JDTBasedSpoonCompiler jdtCompiler = compiler.getJdtCompiler();,if (compiler != null ) JDTBasedSpoonCompiler jdtCompiler = compiler.getJdtCompiler();
JDTBasedSpoonCompiler.java,long t = System.currentTimeMillis();,if (System != null ) long t = System.currentTimeMillis();
JDTBasedSpoonCompiler.java,javaCompliance = factory.getEnvironment().getComplianceLevel();,if (factory != null ) javaCompliance = factory.getEnvironment().getComplianceLevel();
JDTBasedSpoonCompiler.java,t = System.currentTimeMillis();,if (System != null ) t = System.currentTimeMillis();
JDTBasedSpoonCompiler.java,long t = System.currentTimeMillis();,if (System != null ) long t = System.currentTimeMillis();
JDTBasedSpoonCompiler.java,javaCompliance = factory.getEnvironment().getComplianceLevel();,if (factory != null ) javaCompliance = factory.getEnvironment().getComplianceLevel();
JDTBasedSpoonCompiler.java,List<SpoonFile> sourceFiles = sourcesFolder.getAllJavaFiles();,if (sourcesFolder != null ) List<SpoonFile> sourceFiles = sourcesFolder.getAllJavaFiles();
JDTBasedSpoonCompiler.java,args = jdtBuilder.build();,if (jdtBuilder != null ) args = jdtBuilder.build();
JDTBasedSpoonCompiler.java,CompilationUnitDeclaration[] units = batchCompiler.getUnits();,if (batchCompiler != null ) CompilationUnitDeclaration[] units = batchCompiler.getUnits();
JDTBasedSpoonCompiler.java,final String unitPath = new String(unit.getFileName());,if (String(unit != null ) final String unitPath = new String(unit.getFileName());
JDTBasedSpoonCompiler.java,outputDirectory = outputDirectory.getCanonicalFile();,if (outputDirectory != null ) outputDirectory = outputDirectory.getCanonicalFile();
JDTBasedSpoonCompiler.java,CtPackage pack = element.getPackage();,if (element != null ) CtPackage pack = element.getPackage();
JDTBasedSpoonCompiler.java,packageDir = new File(outputDirectory.getAbsolutePath());,if (File(outputDirectory != null ) packageDir = new File(outputDirectory.getAbsolutePath());
JDTBasedSpoonCompiler.java,InputStream is = getCompilationUnitInputStream(cu.getFile().getPath());,if (getCompilationUnitInputStream(cu != null ) InputStream is = getCompilationUnitInputStream(cu.getFile().getPath());
JDTBasedSpoonCompiler.java,File f = sf.toFile();,if (sf != null ) File f = sf.toFile();
JDTBasedSpoonCompiler.java,String filename = file.getAbsolutePath();,if (file != null ) String filename = file.getAbsolutePath();
JDTBasedSpoonCompiler.java,int problemId = problem.getID();,if (problem != null ) int problemId = problem.getID();
JDTBasedSpoonCompiler.java,Environment env = factory.getEnvironment();,if (factory != null ) Environment env = factory.getEnvironment();
JDTSnippetCompiler.java,List<SpoonFile> allFiles = sources.getAllJavaFiles();,if (sources != null ) List<SpoonFile> allFiles = sources.getAllJavaFiles();
JDTSnippetCompiler.java,long t = System.currentTimeMillis();,if (System != null ) long t = System.currentTimeMillis();
JDTSnippetCompiler.java,javaCompliance = factory.getEnvironment().getComplianceLevel();,if (factory != null ) javaCompliance = factory.getEnvironment().getComplianceLevel();
JDTTreeBuilder.java,final MethodBinding methodBinding = lambdaExpression.getMethodBinding();,if (lambdaExpression != null ) final MethodBinding methodBinding = lambdaExpression.getMethodBinding();
JDTTreeBuilder.java,CtConstructorCall constructorCall = factory.Core().createConstructorCall();,if (factory != null ) CtConstructorCall constructorCall = factory.Core().createConstructorCall();
JDTTreeBuilder.java,constructorCall = factory.Core().createNewClass();,if (factory != null ) constructorCall = factory.Core().createNewClass();
JDTTreeBuilder.java,constructorCall = factory.Core().createConstructorCall();,if (factory != null ) constructorCall = factory.Core().createConstructorCall();
JDTTreeBuilder.java,CtAnnotationMethod<Object> ctAnnotationMethod = factory.Core().createAnnotationMethod();,if (factory != null ) CtAnnotationMethod<Object> ctAnnotationMethod = factory.Core().createAnnotationMethod();
JDTTreeBuilder.java,a = factory.Core().createArrayWrite();,if (factory != null ) a = factory.Core().createArrayWrite();
JDTTreeBuilder.java,a = factory.Core().createArrayRead();,if (factory != null ) a = factory.Core().createArrayRead();
JDTTreeBuilder.java,CtBreak b = factory.Core().createBreak();,if (factory != null ) CtBreak b = factory.Core().createBreak();
JDTTreeBuilder.java,CtMethod<Object> m = factory.Core().createMethod();,if (factory != null ) CtMethod<Object> m = factory.Core().createMethod();
JDTTreeBuilder.java,CtConstructor<Object> c = factory.Core().createConstructor();,if (factory != null ) CtConstructor<Object> c = factory.Core().createConstructor();
JDTTreeBuilder.java,final CtTypeParameter typeParameterRef = factory.Core().createTypeParameter();,if (factory != null ) final CtTypeParameter typeParameterRef = factory.Core().createTypeParameter();
JDTTreeBuilder.java,CtContinue c = factory.Core().createContinue();,if (factory != null ) CtContinue c = factory.Core().createContinue();
JDTTreeBuilder.java,CtInvocation<Object> inv = factory.Core().createInvocation();,if (factory != null ) CtInvocation<Object> inv = factory.Core().createInvocation();
JDTTreeBuilder.java,field = factory.Core().createField();,if (factory != null ) field = factory.Core().createField();
JDTTreeBuilder.java,field = factory.Core().createEnumValue();,if (factory != null ) field = factory.Core().createEnumValue();
JDTTreeBuilder.java,CtAnonymousExecutable b = factory.Core().createAnonymousExecutable();,if (factory != null ) CtAnonymousExecutable b = factory.Core().createAnonymousExecutable();
JDTTreeBuilder.java,CtLocalVariable<Object> v = factory.Core().createLocalVariable();,if (factory != null ) CtLocalVariable<Object> v = factory.Core().createLocalVariable();
JDTTreeBuilder.java,CtInvocation<Object> inv = factory.Core().createInvocation();,if (factory != null ) CtInvocation<Object> inv = factory.Core().createInvocation();
JDTTreeBuilder.java,t = factory.Core().createTryWithResource();,if (factory != null ) t = factory.Core().createTryWithResource();
JDTTreeBuilder.java,t = factory.Core().createTry();,if (factory != null ) t = factory.Core().createTry();
JDTTreeBuilder.java,t = factory.Core().createClass();,if (factory != null ) t = factory.Core().createClass();
JDTTreeBuilder.java,pack = factory.Package().getRootPackage();,if (factory != null ) pack = factory.Package().getRootPackage();
AbstractTypingContext.java,CtElement parent = result.getParent();,if (result != null ) CtElement parent = result.getParent();
AbstractTypingContext.java,result = result.clone();,if (result != null ) result = result.clone();
AbstractTypingContext.java,CtTypeParameterReference typeParamRefAdapted = typeParamRef.clone();,if (typeParamRef != null ) CtTypeParameterReference typeParamRefAdapted = typeParamRef.clone();
ClassTypingContext.java,scopeType = typeReference.getTypeDeclaration();,if (typeReference != null ) scopeType = typeReference.getTypeDeclaration();
ClassTypingContext.java,final String typeQualifiedName = typeRef.getQualifiedName();,if (typeRef != null ) final String typeQualifiedName = typeRef.getQualifiedName();
ClassTypingContext.java,String superTypeQualifiedName = typeRef.getQualifiedName();,if (typeRef != null ) String superTypeQualifiedName = typeRef.getQualifiedName();
ClassTypingContext.java,Factory factory = method.getFactory();,if (method != null ) Factory factory = method.getFactory();
ClassTypingContext.java,CtMethod<T> adaptedMethod = factory.Core().createMethod();,if (factory != null ) CtMethod<T> adaptedMethod = factory.Core().createMethod();
ClassTypingContext.java,CtTypeParameter newTypeParam = typeParam.clone();,if (typeParam != null ) CtTypeParameter newTypeParam = typeParam.clone();
ClassTypingContext.java,CtFormalTypeDeclarer declarer = typeParam.getTypeParameterDeclarer();,if (typeParam != null ) CtFormalTypeDeclarer declarer = typeParam.getTypeParameterDeclarer();
ClassTypingContext.java,CtTypeParameter typeParam = typeParamRef.getDeclaration();,if (typeParamRef != null ) CtTypeParameter typeParam = typeParamRef.getDeclaration();
ClassTypingContext.java,CtFormalTypeDeclarer declarer = typeParam.getTypeParameterDeclarer();,if (typeParam != null ) CtFormalTypeDeclarer declarer = typeParam.getTypeParameterDeclarer();
ClassTypingContext.java,actualTypeArguments = getTypeReferences(typeDeclarer.getFormalCtTypeParameters());,if (getTypeReferences(typeDeclarer != null ) actualTypeArguments = getTypeReferences(typeDeclarer.getFormalCtTypeParameters());
ClassTypingContext.java,List<CtTypeParameter> typeParams = declarer.getFormalCtTypeParameters();,if (declarer != null ) List<CtTypeParameter> typeParams = declarer.getFormalCtTypeParameters();
ClassTypingContext.java,CtTypeParameter typeParam = typeParamRef.getDeclaration();,if (typeParamRef != null ) CtTypeParameter typeParam = typeParamRef.getDeclaration();
ClassTypingContext.java,List<CtTypeParameter> thisTypeParameters = thisDeclarer.getFormalCtTypeParameters();,if (thisDeclarer != null ) List<CtTypeParameter> thisTypeParameters = thisDeclarer.getFormalCtTypeParameters();
ClassTypingContext.java,List<CtTypeParameter> thatTypeParameters = thatDeclarer.getFormalCtTypeParameters();,if (thatDeclarer != null ) List<CtTypeParameter> thatTypeParameters = thatDeclarer.getFormalCtTypeParameters();
MethodTypingContext.java,actualTypeArguments = getTypeReferences(scopeMethod.getFormalCtTypeParameters());,if (getTypeReferences(scopeMethod != null ) actualTypeArguments = getTypeReferences(scopeMethod.getFormalCtTypeParameters());
MethodTypingContext.java,actualTypeArguments = getTypeReferences(scopeConstructor.getFormalCtTypeParameters());,if (getTypeReferences(scopeConstructor != null ) actualTypeArguments = getTypeReferences(scopeConstructor.getFormalCtTypeParameters());
MethodTypingContext.java,this.actualTypeArguments = execRef.getActualTypeArguments();,if (execRef != null ) this.actualTypeArguments = execRef.getActualTypeArguments();
MethodTypingContext.java,CtFormalTypeDeclarer typeParamDeclarer = typeParam.getTypeParameterDeclarer();,if (typeParam != null ) CtFormalTypeDeclarer typeParamDeclarer = typeParam.getTypeParameterDeclarer();
MethodTypingContext.java,List<CtTypeParameter> thisTypeParameters = scopeMethod.getFormalCtTypeParameters();,if (scopeMethod != null ) List<CtTypeParameter> thisTypeParameters = scopeMethod.getFormalCtTypeParameters();
MethodTypingContext.java,List<CtTypeParameter> thatTypeParameters = typeParamDeclarer.getFormalCtTypeParameters();,if (typeParamDeclarer != null ) List<CtTypeParameter> thatTypeParameters = typeParamDeclarer.getFormalCtTypeParameters();
SubInheritanceHierarchyResolver.java,hasSuperInterface = superType.isInterface();,if (superType != null ) hasSuperInterface = superType.isInterface();
SubInheritanceHierarchyResolver.java,String qName = typeRef.getQualifiedName();,if (typeRef != null ) String qName = typeRef.getQualifiedName();
SubInheritanceHierarchyResolver.java,String currentQName = currentTypeRef.getQualifiedName();,if (currentTypeRef != null ) String currentQName = currentTypeRef.getQualifiedName();
SubInheritanceHierarchyResolver.java,CtTypeInformation stackType = currentSubTypes.pop();,if (currentSubTypes != null ) CtTypeInformation stackType = currentSubTypes.pop();
PrinterTest.java,PrettyPrinter printer = spoon.createPrettyPrinter();,if (spoon != null ) PrettyPrinter printer = spoon.createPrettyPrinter();
PrinterTest.java,PrettyPrinter printer = spoon.createPrettyPrinter();,if (spoon != null ) PrettyPrinter printer = spoon.createPrettyPrinter();
SubstitutionVisitor.java,String name = element.getSimpleName();,if (element != null ) String name = element.getSimpleName();
ImportScannerImpl.java,CtPackage ctPackage = typeReference.getPackage().getDeclaration();,if (typeReference != null ) CtPackage ctPackage = typeReference.getPackage().getDeclaration();
ImportScannerImpl.java,CtElement packParent = ctPackage.getParent();,if (ctPackage != null ) CtElement packParent = ctPackage.getParent();
ImportScannerImpl.java,targetType = simpleType.getReference().getTopLevelType();,if (simpleType != null ) targetType = simpleType.getReference().getTopLevelType();
JDTCommentBuilder.java,CtComment comment = factory.Core().createComment();,if (factory != null ) CtComment comment = factory.Core().createComment();
MethodTypingContext.java,List<CtTypeParameter> thatTypeParameters = thatMethod.getFormalCtTypeParameters();,if (thatMethod != null ) List<CtTypeParameter> thatTypeParameters = thatMethod.getFormalCtTypeParameters();
MethodTypingContext.java,int nrTypeParamsOfThat = thatMethod.getFormalCtTypeParameters().size();,if (thatMethod != null ) int nrTypeParamsOfThat = thatMethod.getFormalCtTypeParameters().size();
MethodTypingContext.java,CtFormalTypeDeclarer superDeclarer = superParam.getTypeParameterDeclarer();,if (superParam != null ) CtFormalTypeDeclarer superDeclarer = superParam.getTypeParameterDeclarer();
MethodTypingContext.java,Factory factory = method.getFactory();,if (method != null ) Factory factory = method.getFactory();
MethodTypingContext.java,CtMethod<T> adaptedMethod = factory.Core().createMethod();,if (factory != null ) CtMethod<T> adaptedMethod = factory.Core().createMethod();
MethodTypingContext.java,CtTypeParameter newTypeParam = typeParam.clone();,if (typeParam != null ) CtTypeParameter newTypeParam = typeParam.clone();
MethodTypingContext.java,CtTypeParameter typeParam = typeParamRef.getDeclaration();,if (typeParamRef != null ) CtTypeParameter typeParam = typeParamRef.getDeclaration();
MethodTypingContext.java,this.scopeMethod = execRef.getExecutableDeclaration();,if (execRef != null ) this.scopeMethod = execRef.getExecutableDeclaration();
MethodTypingContext.java,this.scopeMethod = (CtMethod<?>) execRef.getDeclaration();,if (execRef != null ) this.scopeMethod = (CtMethod<?>) execRef.getDeclaration();
SuperInheritanceHierarchyFunction.java,superType = superTypeRef.getTypeDeclaration();,if (superTypeRef != null ) superType = superTypeRef.getTypeDeclaration();
JDTBasedSpoonCompiler.java,final String unitPath = new String(unit.getFileName());,if (String(unit != null ) final String unitPath = new String(unit.getFileName());
CtTypeTest.java,List<CtTypeParameter> typeParameters = oCtType.getFormalCtTypeParameters();,if (oCtType != null ) List<CtTypeParameter> typeParameters = oCtType.getFormalCtTypeParameters();
SuperInheritanceHierarchyFunction.java,superType = superClassRef.getTypeDeclaration();,if (superClassRef != null ) superType = superClassRef.getTypeDeclaration();
SuperInheritanceHierarchyFunction.java,superType = ifaceRef.getTypeDeclaration();,if (ifaceRef != null ) superType = ifaceRef.getTypeDeclaration();
LocalVariableReferenceFunction.java,final String simpleName = localVariable.getSimpleName();,if (localVariable != null ) final String simpleName = localVariable.getSimpleName();
LocalVariableReferenceFunction.java,return localVariable == localVarRef.getDeclaration();,if (localVarRef != null ) return localVariable == localVarRef.getDeclaration();
CtQueryImpl.java,String name = stepFunction.getName();,if (stepFunction != null ) String name = stepFunction.getName();
QueryTest.java,factory = launcher.getFactory();,if (launcher != null ) factory = launcher.getFactory();
LocalVariableScopeFunction.java,List<CtStatement> stats = statements.getStatements();,if (statements != null ) List<CtStatement> stats = statements.getStatements();
CtLocalVariableReferenceImpl.java,parent = parent.getParent();,if (parent != null ) parent = parent.getParent();
MinimalImportScanner.java,CtElement parent = ref.getParent();,if (ref != null ) CtElement parent = ref.getParent();
MinimalImportScanner.java,parent = parent.getParent();,if (parent != null ) parent = parent.getParent();
MinimalImportScanner.java,parent = parent.getParent();,if (parent != null ) parent = parent.getParent();
MinimalImportScanner.java,parent = parent.getParent();,if (parent != null ) parent = parent.getParent();
MinimalImportScanner.java,parent = parent.getParent();,if (parent != null ) parent = parent.getParent();
MinimalImportScanner.java,List<CtVariable> variables = avf.find();,if (avf != null ) List<CtVariable> variables = avf.find();
MinimalImportScanner.java,parent = ref.getParent();,if (ref != null ) parent = ref.getParent();
MinimalImportScanner.java,CtPackage ctPackage = typeReference.getPackage().getDeclaration();,if (typeReference != null ) CtPackage ctPackage = typeReference.getPackage().getDeclaration();
MinimalImportScanner.java,CtElement packParent = ctPackage.getParent();,if (ctPackage != null ) CtElement packParent = ctPackage.getParent();
MinimalImportScanner.java,parent = parent.getParent();,if (parent != null ) parent = parent.getParent();
ModelUtils.java,SpoonCompiler comp = new Launcher().createCompiler();,if (Launcher() != null ) SpoonCompiler comp = new Launcher().createCompiler();
ModelUtils.java,SpoonCompiler comp = launcher.createCompiler();,if (launcher != null ) SpoonCompiler comp = launcher.createCompiler();
ModelUtils.java,SpoonCompiler comp = new Launcher().createCompiler();,if (Launcher() != null ) SpoonCompiler comp = new Launcher().createCompiler();
ModelUtils.java,SpoonCompiler comp = launcher.createCompiler();,if (launcher != null ) SpoonCompiler comp = launcher.createCompiler();
ModelUtils.java,SpoonCompiler comp = launcher.createCompiler();,if (launcher != null ) SpoonCompiler comp = launcher.createCompiler();
ExtendedStringLiteralTest.java,SpoonCompiler comp = launcher.createCompiler();,if (launcher != null ) SpoonCompiler comp = launcher.createCompiler();
ExceptionTest.java,SpoonCompiler comp = spoon.createCompiler();,if (spoon != null ) SpoonCompiler comp = spoon.createCompiler();
ExceptionTest.java,SpoonCompiler comp = spoon.createCompiler();,if (spoon != null ) SpoonCompiler comp = spoon.createCompiler();
ImportTest.java,SpoonCompiler comp = new Launcher().createCompiler();,if (Launcher() != null ) SpoonCompiler comp = new Launcher().createCompiler();
PackageTest.java,final SpoonCompiler newCompiler = launcher.createCompiler(launcher.createFactory());,if (launcher != null ) final SpoonCompiler newCompiler = launcher.createCompiler(launcher.createFactory());
DefaultPrettyPrinterTest.java,SpoonCompiler comp = new Launcher().createCompiler();,if (Launcher() != null ) SpoonCompiler comp = new Launcher().createCompiler();
DefaultPrettyPrinterTest.java,SpoonCompiler comp = new Launcher().createCompiler();,if (Launcher() != null ) SpoonCompiler comp = new Launcher().createCompiler();
DefaultPrettyPrinterTest.java,final SpoonCompiler compiler = launcher.createCompiler();,if (launcher != null ) final SpoonCompiler compiler = launcher.createCompiler();
DefaultPrettyPrinterTest.java,final SpoonCompiler compiler = launcher.createCompiler();,if (launcher != null ) final SpoonCompiler compiler = launcher.createCompiler();
DefaultPrettyPrinterTest.java,final SpoonCompiler compiler = launcher.createCompiler();,if (launcher != null ) final SpoonCompiler compiler = launcher.createCompiler();
DefaultPrettyPrinterTest.java,final SpoonCompiler compiler = launcher.createCompiler();,if (launcher != null ) final SpoonCompiler compiler = launcher.createCompiler();
TypeReferenceTest.java,SpoonCompiler comp = new Launcher().createCompiler();,if (Launcher() != null ) SpoonCompiler comp = new Launcher().createCompiler();
TypeReferenceTest.java,SpoonCompiler comp = new Launcher().createCompiler();,if (Launcher() != null ) SpoonCompiler comp = new Launcher().createCompiler();
SignatureTest.java,SpoonCompiler comp = launcher.createCompiler();,if (launcher != null ) SpoonCompiler comp = launcher.createCompiler();
TryCatchTest.java,final SpoonCompiler compiler = launcher.createCompiler();,if (launcher != null ) final SpoonCompiler compiler = launcher.createCompiler();
TryCatchTest.java,final SpoonCompiler newCompiler = launcher.createCompiler();,if (launcher != null ) final SpoonCompiler newCompiler = launcher.createCompiler();
VisibilityTest.java,final SpoonCompiler compiler = launcher.createCompiler();,if (launcher != null ) final SpoonCompiler compiler = launcher.createCompiler();
CtQueryImpl.java,s = (Step) s.getNext();,if (s != null ) s = (Step) s.getNext();
JDTTreeBuilderHelper.java,final CtMethod method = (CtMethod) variable.getParent();,if (variable != null ) final CtMethod method = (CtMethod) variable.getParent();
TemplateMatcher.java,"ParameterMatcher instance = findParameterMatcher(named, named.getSimpleName());","if (named != null ) ParameterMatcher instance = findParameterMatcher(named, named.getSimpleName());"
SubstitutionVisitor.java,String name = field.getSimpleName();,if (field != null ) String name = field.getSimpleName();
SubstitutionVisitor.java,CtTypeReference<T> t = (CtTypeReference<T>) lit.getValue();,if (lit != null ) CtTypeReference<T> t = (CtTypeReference<T>) lit.getValue();
SubstitutionVisitor.java,String name = variableAccess.getVariable().getSimpleName();,if (variableAccess != null ) String name = variableAccess.getVariable().getSimpleName();
SubstitutionVisitor.java,CtTypeReference<T> reference = variableAccess.getType();,if (variableAccess != null ) CtTypeReference<T> reference = variableAccess.getType();
ImportScannerImpl.java,CtTypeReference declaringType = ref.getDeclaringType();,if (ref != null ) CtTypeReference declaringType = ref.getDeclaringType();
ImportScannerImpl.java,declaringType = declaringType.getDeclaringType();,if (declaringType != null ) declaringType = declaringType.getDeclaringType();
MinimalImportScanner.java,CtTypeReference referencedType = classParent.getReference();,if (classParent != null ) CtTypeReference referencedType = classParent.getReference();
PrinterTest.java,factory = spoon.createFactory();,if (spoon != null ) factory = spoon.createFactory();
ImportScannerImpl.java,CtPackageReference pack = targetType.getPackage();,if (targetType != null ) CtPackageReference pack = targetType.getPackage();
MinimalImportScanner.java,CtElement parent = ref.getParent();,if (ref != null ) CtElement parent = ref.getParent();
MinimalImportScanner.java,CtTypeReference typeReference = parentType.getDeclaringType();,if (parentType != null ) CtTypeReference typeReference = parentType.getDeclaringType();
MinimalImportScanner.java,CtPackage ctPackage = typeReference.getPackage().getDeclaration();,if (typeReference != null ) CtPackage ctPackage = typeReference.getPackage().getDeclaration();
MinimalImportScanner.java,CtElement packParent = ctPackage.getParent();,if (ctPackage != null ) CtElement packParent = ctPackage.getParent();
DefaultJavaPrettyPrinter.java,final CtElement parent = thisAccess.getParent();,if (thisAccess != null ) final CtElement parent = thisAccess.getParent();
DefaultJavaPrettyPrinter.java,final CtField declaration = variable.getDeclaration();,if (variable != null ) final CtField declaration = variable.getDeclaration();
VisitorPartialEvaluator.java,"CtExpression<Boolean> r = evaluate(ifElement, ifElement.getCondition());","if (ifElement != null ) CtExpression<Boolean> r = evaluate(ifElement, ifElement.getCondition());"
VisitorPartialEvaluator.java,"CtExpression<Boolean> r = evaluate(conditional, conditional.getCondition());","if (conditional != null ) CtExpression<Boolean> r = evaluate(conditional, conditional.getCondition());"
IntercessionContractTest.java,declaringTypeReference = declaringTypeReference.getSuperclass();,if (declaringTypeReference != null ) declaringTypeReference = declaringTypeReference.getSuperclass();
IntercessionContractTest.java,Object element = declaringClass.newInstance();,if (declaringClass != null ) Object element = declaringClass.newInstance();
DefaultJavaPrettyPrinter.java,memberNames = new HashSet<>(allFields.size());,if (HashSet<>(allFields != null ) memberNames = new HashSet<>(allFields.size());
CtTypeImpl.java,compilationUnit = getPosition().getCompilationUnit();,if (getPosition() != null ) compilationUnit = getPosition().getCompilationUnit();
PositionTest.java,SourcePosition position = foo.getPosition();,if (foo != null ) SourcePosition position = foo.getPosition();
ImportScannerImpl.java,CtPackageReference pack = simpleType.getPackage().getReference();,if (simpleType != null ) CtPackageReference pack = simpleType.getPackage().getReference();
CtBiScannerGenerator.java,Factory factory = element.getFactory();,if (element != null ) Factory factory = element.getFactory();
EqualsVisitorGenerator.java,Factory factory = element.getFactory();,if (element != null ) Factory factory = element.getFactory();
ImportImpl.java,"String str = ""import "" + reference.toString();","if (reference != null ) String str = ""import "" + reference.toString();"
ParentTest.java,final CtMethod parent = (CtMethod) body.getParent();,if (body != null ) final CtMethod parent = (CtMethod) body.getParent();
StatementTemplate.java,factory = targetType.getFactory();,if (targetType != null ) factory = targetType.getFactory();
ParentTest.java,final Factory factory = launcher.getFactory();,if (launcher != null ) final Factory factory = launcher.getFactory();
ParentTest.java,final CtMethod parent = (CtMethod) body.getParent();,if (body != null ) final CtMethod parent = (CtMethod) body.getParent();
ImportTest.java,Factory factory = spoon.createFactory();,if (spoon != null ) Factory factory = spoon.createFactory();
ModelUtils.java,final Factory factory = launcher.createFactory();,if (launcher != null ) final Factory factory = launcher.createFactory();
LambdaTest.java,this.factory = launcher.createFactory();,if (launcher != null ) this.factory = launcher.createFactory();
JDTBasedSpoonCompiler.java,args = jdtBuilder.build();,if (jdtBuilder != null ) args = jdtBuilder.build();
JDTBasedSpoonCompiler.java,List<SpoonFile> filesToBuild = sources.getAllJavaFiles();,if (sources != null ) List<SpoonFile> filesToBuild = sources.getAllJavaFiles();
JDTBasedSpoonCompiler.java,CompilationUnitDeclaration[] units = batchCompiler.getUnits();,if (batchCompiler != null ) CompilationUnitDeclaration[] units = batchCompiler.getUnits();
JDTBasedSpoonCompiler.java,CompilationUnitDeclaration[] units = batchCompiler.getUnits();,if (batchCompiler != null ) CompilationUnitDeclaration[] units = batchCompiler.getUnits();
JDTSnippetCompiler.java,args = jdtBuilder.build();,if (jdtBuilder != null ) args = jdtBuilder.build();
JDTSnippetCompiler.java,CompilationUnitDeclaration[] units = batchCompiler.getUnits();,if (batchCompiler != null ) CompilationUnitDeclaration[] units = batchCompiler.getUnits();
CompilationUnitFactory.java,cu = factory.Core().createVirtualCompilationUnit();,if (factory != null ) cu = factory.Core().createVirtualCompilationUnit();
JDTBasedSpoonCompiler.java,f = createTmpJavaFile(file.getFileSystemParent());,if (createTmpJavaFile(file != null ) f = createTmpJavaFile(file.getFileSystemParent());
JDTBasedSpoonCompiler.java,CompilationUnitDeclaration[] units = batchCompiler.getUnits(templates.getAllJavaFiles());,if (batchCompiler != null ) CompilationUnitDeclaration[] units = batchCompiler.getUnits(templates.getAllJavaFiles());
JDTSnippetCompiler.java,CompilationUnitDeclaration[] units = batchCompiler.getUnits(sources.getAllJavaFiles());,if (batchCompiler != null ) CompilationUnitDeclaration[] units = batchCompiler.getUnits(sources.getAllJavaFiles());
XMLAnnotationProcessor.java,DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();,if (DocumentBuilderFactory != null ) DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
XMLAnnotationProcessor.java,DocumentBuilder builder = factory.newDocumentBuilder();,if (factory != null ) DocumentBuilder builder = factory.newDocumentBuilder();
XMLAnnotationProcessor.java,x = spe.getException();,if (spe != null ) x = spe.getException();
XMLAnnotationProcessor.java,x = sxe.getException();,if (sxe != null ) x = sxe.getException();
XMLAnnotationProcessor.java,String signature = executable.getSignature();,if (executable != null ) String signature = executable.getSignature();
XMLAnnotationProcessor.java,Element root = document.getDocumentElement();,if (document != null ) Element root = document.getDocumentElement();
XMLAnnotationProcessor.java,int len = nodeList.getLength();,if (nodeList != null ) int len = nodeList.getLength();
StandardEnvironment.java,File[] listFiles = getXmlRootFolder().listFiles();,if (getXmlRootFolder() != null ) File[] listFiles = getXmlRootFolder().listFiles();
XmlProcessorProperties.java,xr = XMLReaderFactory.createXMLReader();,if (XMLReaderFactory != null ) xr = XMLReaderFactory.createXMLReader();
ClasspathOptions.java,ClassLoader currentClassLoader = Thread.currentThread().getContextClassLoader();,if (Thread != null ) ClassLoader currentClassLoader = Thread.currentThread().getContextClassLoader();
ClasspathOptions.java,classpath += File.pathSeparator + url.getFile();,if (url != null ) classpath += File.pathSeparator + url.getFile();
JDTBasedSpoonCompiler.java,initialClassLoader = initialClassLoader.getParent();,if (initialClassLoader != null ) initialClassLoader = initialClassLoader.getParent();
JDTBasedSpoonCompiler.java,initialClassLoader = initialClassLoader.getParent();,if (initialClassLoader != null ) initialClassLoader = initialClassLoader.getParent();
JDTBasedSpoonCompiler.java,ClassLoader cl = Thread.currentThread().getContextClassLoader();,if (Thread != null ) ClassLoader cl = Thread.currentThread().getContextClassLoader();
JDTBatchCompiler.java,String unitFileName = new String(unit.getFileName());,if (String(unit != null ) String unitFileName = new String(unit.getFileName());
JDTBatchCompiler.java,content = IOUtils.toCharArray(f.getContent());,if (IOUtils != null ) content = IOUtils.toCharArray(f.getContent());
JDTCommentBuilder.java,String doc = stringBuilder.toString();,if (stringBuilder != null ) String doc = stringBuilder.toString();
JDTBasedSpoonCompiler.java,File source = sf.toFile();,if (sf != null ) File source = sf.toFile();
JDTBasedSpoonCompiler.java,long t = System.currentTimeMillis();,if (System != null ) long t = System.currentTimeMillis();
JDTBasedSpoonCompiler.java,javaCompliance = factory.getEnvironment().getComplianceLevel();,if (factory != null ) javaCompliance = factory.getEnvironment().getComplianceLevel();
JDTBatchCompiler.java,CompilationUnit[] units = super.getCompilationUnits();,if (super != null ) CompilationUnit[] units = super.getCompilationUnits();
JDTBatchCompiler.java,CtPackage pack = ctType.getPackage();,if (ctType != null ) CtPackage pack = ctType.getPackage();
JDTBatchCompiler.java,File directory = jdtCompiler.getSourceOutputDirectory();,if (jdtCompiler != null ) File directory = jdtCompiler.getSourceOutputDirectory();
JDTBatchCompiler.java,packageDir = new File(directory.getAbsolutePath());,if (File(directory != null ) packageDir = new File(directory.getAbsolutePath());
CtIntersectionTypeReferenceImpl.java,this.bounds = CtElementImpl.emptySet();,if (CtElementImpl != null ) this.bounds = CtElementImpl.emptySet();
InterfaceFactory.java,CtInterface<T> i = factory.Core().createInterface();,if (factory != null ) CtInterface<T> i = factory.Core().createInterface();
CtClassImpl.java,this.anonymousExecutables = CtElementImpl.emptyList();,if (CtElementImpl != null ) this.anonymousExecutables = CtElementImpl.emptyList();
CtClassImpl.java,this.constructors = CtElementImpl.emptySet();,if (CtElementImpl != null ) this.constructors = CtElementImpl.emptySet();
CtTypeImpl.java,compilationUnit = getPosition().getCompilationUnit();,if (getPosition() != null ) compilationUnit = getPosition().getCompilationUnit();
CtTypeImpl.java,this.fields = CtElementImpl.emptyList();,if (CtElementImpl != null ) this.fields = CtElementImpl.emptyList();
CtTypeImpl.java,this.nestedTypes = CtElementImpl.emptySet();,if (CtElementImpl != null ) this.nestedTypes = CtElementImpl.emptySet();
CtTypeImpl.java,this.methods = CtElementImpl.emptySet();,if (CtElementImpl != null ) this.methods = CtElementImpl.emptySet();
ReplacementVisitor.java,shouldBeDeleted = entry.getValue();,if (entry != null ) shouldBeDeleted = entry.getValue();
ReplacementVisitor.java,key = entry.getKey();,if (entry != null ) key = entry.getKey();
CtStatementImpl.java,CtElement e = target.getParent();,if (target != null ) CtElement e = target.getParent();
CtConstructorImpl.java,this.formalTypeParameters = CtElementImpl.emptyList();,if (CtElementImpl != null ) this.formalTypeParameters = CtElementImpl.emptyList();
CtMethodImpl.java,this.formalTypeParameters = CtElementImpl.emptyList();,if (CtElementImpl != null ) this.formalTypeParameters = CtElementImpl.emptyList();
CtTypeImpl.java,this.formalTypeParameters = CtElementImpl.emptyList();,if (CtElementImpl != null ) this.formalTypeParameters = CtElementImpl.emptyList();
CtCatchVariableReferenceImpl.java,var = catchBlock.getParameter();,if (catchBlock != null ) var = catchBlock.getParameter();
ContextBuilder.java,CtLocalVariable<T> var = (CtLocalVariable<T>) scanner.getResult();,if (scanner != null ) CtLocalVariable<T> var = (CtLocalVariable<T>) scanner.getResult();
ContextBuilder.java,CtCatchVariable<T> var = (CtCatchVariable<T>) scanner.getResult();,if (scanner != null ) CtCatchVariable<T> var = (CtCatchVariable<T>) scanner.getResult();
ExecutableFactory.java,CtExecutableReference<T> methodRef = factory.Core().createExecutableReference();,if (factory != null ) CtExecutableReference<T> methodRef = factory.Core().createExecutableReference();
ExecutableFactory.java,CtExecutableReference<T> methodRef = factory.Core().createExecutableReference();,if (factory != null ) CtExecutableReference<T> methodRef = factory.Core().createExecutableReference();
ReferenceBuilder.java,final CtTypeReference originalRef = bindingCache.get(b).clone();,if (bindingCache != null ) final CtTypeReference originalRef = bindingCache.get(b).clone();
JDTTreeBuilder.java,final CtTypeParameterReference typeParameterRef = factory.Core().createTypeParameterReference();,if (factory != null ) final CtTypeParameterReference typeParameterRef = factory.Core().createTypeParameterReference();
JavaReflectionTreeBuilder.java,final CtTypeParameterReference ctTypeReference = factory.Core().createTypeParameterReference();,if (factory != null ) final CtTypeParameterReference ctTypeReference = factory.Core().createTypeParameterReference();
JavaReflectionTreeBuilder.java,final CtTypeParameterReference ctTypeReference = factory.Core().createTypeParameterReference();,if (factory != null ) final CtTypeParameterReference ctTypeReference = factory.Core().createTypeParameterReference();
JDTTreeBuilder.java,CtField<Object> f = factory.Core().createField();,if (factory != null ) CtField<Object> f = factory.Core().createField();
DefaultJavaPrettyPrinter.java,String ret = sbf.toString();,if (sbf != null ) String ret = sbf.toString();
DefaultJavaPrettyPrinter.java,int i = sbf.length() - ls.length();,if (ls != null ) int i = sbf.length() - ls.length();
DefaultJavaPrettyPrinter.java,parent = ctClass.getParent();,if (ctClass != null ) parent = ctClass.getParent();
DefaultJavaPrettyPrinter.java,isStatic = reference.isStatic();,if (reference != null ) isStatic = reference.isStatic();
JDTTreeBuilder.java,type = factory.Core().createEnum();,if (factory != null ) type = factory.Core().createEnum();
JDTTreeBuilder.java,type = factory.Core().createInterface();,if (factory != null ) type = factory.Core().createInterface();
JDTTreeBuilder.java,type = factory.Core().createClass();,if (factory != null ) type = factory.Core().createClass();
JDTTreeBuilder.java,executableReference = factory.Core().createExecutableReference();,if (factory != null ) executableReference = factory.Core().createExecutableReference();
JDTTreeBuilder.java,CtParameter<Object> p = factory.Core().createParameter();,if (factory != null ) CtParameter<Object> p = factory.Core().createParameter();
JDTTreeBuilder.java,CtNewArray<Object> array = factory.Core().createNewArray();,if (factory != null ) CtNewArray<Object> array = factory.Core().createNewArray();
JDTTreeBuilder.java,CtLiteral<Character> l = factory.Core().createLiteral();,if (factory != null ) CtLiteral<Character> l = factory.Core().createLiteral();
JDTTreeBuilder.java,CtDo d = factory.Core().createDo();,if (factory != null ) CtDo d = factory.Core().createDo();
JDTTreeBuilder.java,CtLiteral<Double> d = factory.Core().createLiteral();,if (factory != null ) CtLiteral<Double> d = factory.Core().createLiteral();
JDTTreeBuilder.java,CtLiteral<String> l = factory.Core().createLiteral();,if (factory != null ) CtLiteral<String> l = factory.Core().createLiteral();
JDTTreeBuilder.java,CtLiteral<Boolean> l = factory.Core().createLiteral();,if (factory != null ) CtLiteral<Boolean> l = factory.Core().createLiteral();
JDTTreeBuilder.java,fieldAccess = factory.Core().createFieldWrite();,if (factory != null ) fieldAccess = factory.Core().createFieldWrite();
JDTTreeBuilder.java,fieldAccess = factory.Core().createFieldRead();,if (factory != null ) fieldAccess = factory.Core().createFieldRead();
JDTTreeBuilder.java,CtLiteral<Float> l = factory.Core().createLiteral();,if (factory != null ) CtLiteral<Float> l = factory.Core().createLiteral();
JDTTreeBuilder.java,CtForEach fe = factory.Core().createForEach();,if (factory != null ) CtForEach fe = factory.Core().createForEach();
JDTTreeBuilder.java,CtIf ifs = factory.Core().createIf();,if (factory != null ) CtIf ifs = factory.Core().createIf();
JDTTreeBuilder.java,CtLiteral<Integer> l = factory.Core().createLiteral();,if (factory != null ) CtLiteral<Integer> l = factory.Core().createLiteral();
JDTTreeBuilder.java,CtLiteral<Long> l = factory.Core().createLiteral();,if (factory != null ) CtLiteral<Long> l = factory.Core().createLiteral();
JDTTreeBuilder.java,CtAnnotation<A> a = factory.Core().createAnnotation();,if (factory != null ) CtAnnotation<A> a = factory.Core().createAnnotation();
JDTTreeBuilder.java,CtAnnotation<A> a = factory.Core().createAnnotation();,if (factory != null ) CtAnnotation<A> a = factory.Core().createAnnotation();
JDTTreeBuilder.java,CtInvocation<Object> inv = factory.Core().createInvocation();,if (factory != null ) CtInvocation<Object> inv = factory.Core().createInvocation();
JDTTreeBuilder.java,CtExecutableReference<Object> ref = factory.Core().createExecutableReference();,if (factory != null ) CtExecutableReference<Object> ref = factory.Core().createExecutableReference();
JDTTreeBuilder.java,CtTypeReference<Object> typeReference = factory.Core().createTypeReference();,if (factory != null ) CtTypeReference<Object> typeReference = factory.Core().createTypeReference();
JDTTreeBuilder.java,CtAnnotationFieldAccess<Object> acc = factory.Core().createAnnotationFieldAccess();,if (factory != null ) CtAnnotationFieldAccess<Object> acc = factory.Core().createAnnotationFieldAccess();
JDTTreeBuilder.java,CtMethod<Object> m = factory.Core().createMethod();,if (factory != null ) CtMethod<Object> m = factory.Core().createMethod();
JDTTreeBuilder.java,CtLiteral<Object> lit = factory.Core().createLiteral();,if (factory != null ) CtLiteral<Object> lit = factory.Core().createLiteral();
JDTTreeBuilder.java,CtTypeReference ref = factory.Type().nullType();,if (factory != null ) CtTypeReference ref = factory.Type().nullType();
JDTTreeBuilder.java,int sourceStart = qualifiedNameReference.sourceStart();,if (qualifiedNameReference != null ) int sourceStart = qualifiedNameReference.sourceStart();
JDTTreeBuilder.java,int sourceEnd = qualifiedNameReference.sourceEnd();,if (qualifiedNameReference != null ) int sourceEnd = qualifiedNameReference.sourceEnd();
JDTTreeBuilder.java,fa = factory.Core().createFieldWrite();,if (factory != null ) fa = factory.Core().createFieldWrite();
JDTTreeBuilder.java,fa = factory.Core().createFieldRead();,if (factory != null ) fa = factory.Core().createFieldRead();
JDTTreeBuilder.java,CtFieldReference<Object> ref = references.getVariableReference(qualifiedNameReference.fieldBinding());,if (references != null ) CtFieldReference<Object> ref = references.getVariableReference(qualifiedNameReference.fieldBinding());
JDTTreeBuilder.java,sourceStart = qualifiedNameReference.sourceStart();,if (qualifiedNameReference != null ) sourceStart = qualifiedNameReference.sourceStart();
JDTTreeBuilder.java,sourceStart = qualifiedNameReference.sourceStart();,if (qualifiedNameReference != null ) sourceStart = qualifiedNameReference.sourceStart();
JDTTreeBuilder.java,other = factory.Core().createFieldWrite();,if (factory != null ) other = factory.Core().createFieldWrite();
JDTTreeBuilder.java,other = factory.Core().createFieldRead();,if (factory != null ) other = factory.Core().createFieldRead();
JDTTreeBuilder.java,sourceEnd = qualifiedNameReference.sourceEnd();,if (qualifiedNameReference != null ) sourceEnd = qualifiedNameReference.sourceEnd();
JDTTreeBuilder.java,va = factory.Core().createVariableWrite();,if (factory != null ) va = factory.Core().createVariableWrite();
JDTTreeBuilder.java,va = factory.Core().createVariableRead();,if (factory != null ) va = factory.Core().createVariableRead();
JDTTreeBuilder.java,other = factory.Core().createFieldWrite();,if (factory != null ) other = factory.Core().createFieldWrite();
JDTTreeBuilder.java,other = factory.Core().createFieldRead();,if (factory != null ) other = factory.Core().createFieldRead();
JDTTreeBuilder.java,CtTypeReference<Object> ref = factory.Core().createTypeReference();,if (factory != null ) CtTypeReference<Object> ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,sourceEnd = qualifiedNameReference.sourceEnd();,if (qualifiedNameReference != null ) sourceEnd = qualifiedNameReference.sourceEnd();
JDTTreeBuilder.java,other = factory.Core().createFieldWrite();,if (factory != null ) other = factory.Core().createFieldWrite();
JDTTreeBuilder.java,other = factory.Core().createFieldRead();,if (factory != null ) other = factory.Core().createFieldRead();
JDTTreeBuilder.java,CtFieldReference fieldReference = factory.Core().createFieldReference();,if (factory != null ) CtFieldReference fieldReference = factory.Core().createFieldReference();
JDTTreeBuilder.java,va = factory.Core().createFieldWrite();,if (factory != null ) va = factory.Core().createFieldWrite();
JDTTreeBuilder.java,va = factory.Core().createFieldRead();,if (factory != null ) va = factory.Core().createFieldRead();
JDTTreeBuilder.java,va = factory.Core().createVariableWrite();,if (factory != null ) va = factory.Core().createVariableWrite();
JDTTreeBuilder.java,va = factory.Core().createVariableRead();,if (factory != null ) va = factory.Core().createVariableRead();
JDTTreeBuilder.java,CtAnnotation<A> a = factory.Core().createAnnotation();,if (factory != null ) CtAnnotation<A> a = factory.Core().createAnnotation();
JDTTreeBuilder.java,va = factory.Core().createFieldWrite();,if (factory != null ) va = factory.Core().createFieldWrite();
JDTTreeBuilder.java,va = factory.Core().createFieldRead();,if (factory != null ) va = factory.Core().createFieldRead();
JDTTreeBuilder.java,va = factory.Core().createVariableWrite();,if (factory != null ) va = factory.Core().createVariableWrite();
JDTTreeBuilder.java,va = factory.Core().createVariableRead();,if (factory != null ) va = factory.Core().createVariableRead();
JDTTreeBuilder.java,CtTypeReference<Object> typeReference = factory.Core().createTypeReference();,if (factory != null ) CtTypeReference<Object> typeReference = factory.Core().createTypeReference();
JDTTreeBuilder.java,va = factory.Core().createFieldWrite();,if (factory != null ) va = factory.Core().createFieldWrite();
JDTTreeBuilder.java,va = factory.Core().createFieldRead();,if (factory != null ) va = factory.Core().createFieldRead();
JDTTreeBuilder.java,va = factory.Core().createVariableWrite();,if (factory != null ) va = factory.Core().createVariableWrite();
JDTTreeBuilder.java,va = factory.Core().createVariableRead();,if (factory != null ) va = factory.Core().createVariableRead();
JDTTreeBuilder.java,ref = factory.Core().createParameterReference();,if (factory != null ) ref = factory.Core().createParameterReference();
JDTTreeBuilder.java,ref = factory.Core().createLocalVariableReference();,if (factory != null ) ref = factory.Core().createLocalVariableReference();
JDTTreeBuilder.java,CtThisAccess<Object> thisAccess = factory.Core().createThisAccess();,if (factory != null ) CtThisAccess<Object> thisAccess = factory.Core().createThisAccess();
JDTTreeBuilder.java,CtThisAccess<Object> thisAccess = factory.Core().createThisAccess();,if (factory != null ) CtThisAccess<Object> thisAccess = factory.Core().createThisAccess();
JDTTreeBuilder.java,CtLiteral<String> s = factory.Core().createLiteral();,if (factory != null ) CtLiteral<String> s = factory.Core().createLiteral();
JDTTreeBuilder.java,CtBinaryOperator<String> op = factory.Core().createBinaryOperator();,if (factory != null ) CtBinaryOperator<String> op = factory.Core().createBinaryOperator();
JDTTreeBuilder.java,CtSynchronized s = factory.Core().createSynchronized();,if (factory != null ) CtSynchronized s = factory.Core().createSynchronized();
JDTTreeBuilder.java,CtThrow t = factory.Core().createThrow();,if (factory != null ) CtThrow t = factory.Core().createThrow();
JDTTreeBuilder.java,CtLiteral<Boolean> l = factory.Core().createLiteral();,if (factory != null ) CtLiteral<Boolean> l = factory.Core().createLiteral();
JDTTreeBuilder.java,CtCatch c = factory.Core().createCatch();,if (factory != null ) CtCatch c = factory.Core().createCatch();
JDTTreeBuilder.java,CtCatchVariable<Throwable> var = factory.Core().createCatchVariable();,if (factory != null ) CtCatchVariable<Throwable> var = factory.Core().createCatchVariable();
JDTTreeBuilder.java,CtCatch c = factory.Core().createCatch();,if (factory != null ) CtCatch c = factory.Core().createCatch();
JDTTreeBuilder.java,CtCatchVariable<Throwable> var = factory.Core().createCatchVariable();,if (factory != null ) CtCatchVariable<Throwable> var = factory.Core().createCatchVariable();
JDTTreeBuilder.java,CtWhile w = factory.Core().createWhile();,if (factory != null ) CtWhile w = factory.Core().createWhile();
JDTTreeBuilderHelper.java,final String poolName = String.valueOf(binding.constantPoolName());,if (String != null ) final String poolName = String.valueOf(binding.constantPoolName());
JDTTreeBuilder.java,CtLocalVariableReference ref = factory.Core().createLocalVariableReference();,if (factory != null ) CtLocalVariableReference ref = factory.Core().createLocalVariableReference();
JavaOutputProcessor.java,packageDir = new File(directory.getAbsolutePath());,if (File(directory != null ) packageDir = new File(directory.getAbsolutePath());
JDTTreeBuilder.java,CoreFactory cf = factory.Core();,if (factory != null ) CoreFactory cf = factory.Core();
JDTTreeBuilder.java,ASTPair pair = stack.peek();,if (stack != null ) ASTPair pair = stack.peek();
JDTTreeBuilder.java,ASTPair pair = stack.pop();,if (stack != null ) ASTPair pair = stack.pop();
JDTTreeBuilder.java,final CtExecutableReference ref = factory.Core().createExecutableReference();,if (factory != null ) final CtExecutableReference ref = factory.Core().createExecutableReference();
JDTTreeBuilder.java,final CtReference declaringType = getDeclaringReferenceFromImports(exec.constantPoolName());,if (getDeclaringReferenceFromImports(exec != null ) final CtReference declaringType = getDeclaringReferenceFromImports(exec.constantPoolName());
JDTTreeBuilder.java,String name = new String(reference.shortReadableName());,if (String(reference != null ) String name = new String(reference.shortReadableName());
JDTTreeBuilder.java,CtPackageReference ref = factory.Core().createPackageReference();,if (factory != null ) CtPackageReference ref = factory.Core().createPackageReference();
JDTTreeBuilder.java,CtTypeParameterReference typeParameterRef = factory.Core().createTypeParameterReference();,if (factory != null ) CtTypeParameterReference typeParameterRef = factory.Core().createTypeParameterReference();
JDTTreeBuilder.java,main = factory.Core().createTypeReference();,if (factory != null ) main = factory.Core().createTypeReference();
JDTTreeBuilder.java,main = factory.Core().createTypeReference();,if (factory != null ) main = factory.Core().createTypeReference();
JDTTreeBuilder.java,CtTypeParameterReference param = factory.Core().createTypeParameterReference();,if (factory != null ) CtTypeParameterReference param = factory.Core().createTypeParameterReference();
JDTTreeBuilder.java,ref = getTypeReference(binding.actualType());,if (getTypeReference(binding != null ) ref = getTypeReference(binding.actualType());
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,final CtReference declaring = references.getDeclaringReferenceFromImports(binding.sourceName());,if (references != null ) final CtReference declaring = references.getDeclaringReferenceFromImports(binding.sourceName());
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeParameterReference();,if (factory != null ) ref = factory.Core().createTypeParameterReference();
JDTTreeBuilder.java,String name = new String(binding.sourceName());,if (String(binding != null ) String name = new String(binding.sourceName());
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeParameterReference();,if (factory != null ) ref = factory.Core().createTypeParameterReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,arrayref = factory.Core().createArrayTypeReference();,if (factory != null ) arrayref = factory.Core().createArrayTypeReference();
JDTTreeBuilder.java,CtArrayTypeReference<Object> tmp = factory.Core().createArrayTypeReference();,if (factory != null ) CtArrayTypeReference<Object> tmp = factory.Core().createArrayTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,final CtReference declaring = references.getDeclaringReferenceFromImports(binding.sourceName());,if (references != null ) final CtReference declaring = references.getDeclaringReferenceFromImports(binding.sourceName());
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,final CtCircularTypeReference circularRef = factory.Internal().createCircularTypeReference();,if (factory != null ) final CtCircularTypeReference circularRef = factory.Internal().createCircularTypeReference();
JDTTreeBuilder.java,final CtTypeReference originalRef = bindingCache.get(b).clone();,if (bindingCache != null ) final CtTypeReference originalRef = bindingCache.get(b).clone();
JDTTreeBuilder.java,CtFieldReference<T> ref = factory.Core().createFieldReference();,if (factory != null ) CtFieldReference<T> ref = factory.Core().createFieldReference();
JDTTreeBuilder.java,CtFieldReference<T> ref = factory.Core().createFieldReference();,if (factory != null ) CtFieldReference<T> ref = factory.Core().createFieldReference();
JDTTreeBuilder.java,CtParameterReference<T> ref = factory.Core().createParameterReference();,if (factory != null ) CtParameterReference<T> ref = factory.Core().createParameterReference();
JDTTreeBuilder.java,final ReferenceContext referenceContext = localVariableBinding.declaringScope.referenceContext();,if (localVariableBinding != null ) final ReferenceContext referenceContext = localVariableBinding.declaringScope.referenceContext();
JDTTreeBuilder.java,CtCatchVariableReference<T> ref = factory.Core().createCatchVariableReference();,if (factory != null ) CtCatchVariableReference<T> ref = factory.Core().createCatchVariableReference();
JDTTreeBuilder.java,CtLocalVariableReference<T> ref = factory.Core().createLocalVariableReference();,if (factory != null ) CtLocalVariableReference<T> ref = factory.Core().createLocalVariableReference();
JDTTreeBuilder.java,CtFieldReference<T> ref = factory.Core().createFieldReference();,if (factory != null ) CtFieldReference<T> ref = factory.Core().createFieldReference();
JDTTreeBuilder.java,currentReference = currentReference.getDeclaringType();,if (currentReference != null ) currentReference = currentReference.getDeclaringType();
JDTTreeBuilder.java,final String poolName = String.valueOf(binding.constantPoolName());,if (String != null ) final String poolName = String.valueOf(binding.constantPoolName());
JDTTreeBuilder.java,CtLocalVariable<T> var = (CtLocalVariable<T>) scanner.getResult();,if (scanner != null ) CtLocalVariable<T> var = (CtLocalVariable<T>) scanner.getResult();
JDTTreeBuilder.java,CtCatchVariable<T> var = (CtCatchVariable<T>) scanner.getResult();,if (scanner != null ) CtCatchVariable<T> var = (CtCatchVariable<T>) scanner.getResult();
XMLAnnotationProcessor.java,String signature = field.getSignature();,if (field != null ) String signature = field.getSignature();
CtElementImpl.java,String sig = pr.getSignature();,if (pr != null ) String sig = pr.getSignature();
SerializableTest.java,String sigAf = des.getSignature();,if (des != null ) String sigAf = des.getSignature();
TypeFactory.java,CtTypeParameterReference typeParam = factory.Core().createTypeParameterReference();,if (factory != null ) CtTypeParameterReference typeParam = factory.Core().createTypeParameterReference();
CtStackScanner.java,CtElement ret = elementStack.pop();,if (elementStack != null ) CtElement ret = elementStack.pop();
TypeReferenceTest.java,extendsGeneric = genericType.getBoundingType();,if (genericType != null ) extendsGeneric = genericType.getBoundingType();
CtScannerTest.java,Matcher m = regex.matcher(element.getQualifiedName());,if (regex != null ) Matcher m = regex.matcher(element.getQualifiedName());
JDTTreeBuilder.java,CtTypeReference<Object> ref = factory.Core().createTypeReference();,if (factory != null ) CtTypeReference<Object> ref = factory.Core().createTypeReference();
DefaultJavaPrettyPrinter.java,final CtElement parent = targetExp.getParent();,if (targetExp != null ) final CtElement parent = targetExp.getParent();
DefaultJavaPrettyPrinter.java,final CtElement parent = thisAccess.getParent();,if (thisAccess != null ) final CtElement parent = thisAccess.getParent();
DefaultJavaPrettyPrinter.java,final CtField declaration = variable.getDeclaration();,if (variable != null ) final CtField declaration = variable.getDeclaration();
CodeFactory.java,List<R> refs = new ArrayList<R>(elements.size());,if (ArrayList<R>(elements != null ) List<R> refs = new ArrayList<R>(elements.size());
FilterTest.java,factory = spoon.createFactory();,if (spoon != null ) factory = spoon.createFactory();
CtScannerTest.java,Matcher m = regex.matcher(element.getQualifiedName());,if (regex != null ) Matcher m = regex.matcher(element.getQualifiedName());
JDTTreeBuilder.java,ref = factory.Internal().createImplicitTypeReference();,if (factory != null ) ref = factory.Internal().createImplicitTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,ref = factory.Internal().createImplicitTypeReference();,if (factory != null ) ref = factory.Internal().createImplicitTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,ref = factory.Internal().createImplicitTypeReference();,if (factory != null ) ref = factory.Internal().createImplicitTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeParameterReference();,if (factory != null ) ref = factory.Core().createTypeParameterReference();
JDTTreeBuilder.java,ref = factory.Internal().createImplicitTypeReference();,if (factory != null ) ref = factory.Internal().createImplicitTypeReference();
JDTTreeBuilder.java,ref = factory.Internal().createImplicitTypeReference();,if (factory != null ) ref = factory.Internal().createImplicitTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeParameterReference();,if (factory != null ) ref = factory.Core().createTypeParameterReference();
JDTTreeBuilder.java,ref = factory.Internal().createImplicitTypeReference();,if (factory != null ) ref = factory.Internal().createImplicitTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,ref = factory.Internal().createImplicitTypeReference();,if (factory != null ) ref = factory.Internal().createImplicitTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,arrayref = factory.Internal().createImplicitArrayTypeReference();,if (factory != null ) arrayref = factory.Internal().createImplicitArrayTypeReference();
JDTTreeBuilder.java,arrayref = factory.Core().createArrayTypeReference();,if (factory != null ) arrayref = factory.Core().createArrayTypeReference();
JDTTreeBuilder.java,ref = factory.Internal().createImplicitTypeReference();,if (factory != null ) ref = factory.Internal().createImplicitTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
LambdaTest.java,final CtImplicitArrayTypeReference typeParameter = (CtImplicitArrayTypeReference) ctParameter.getType();,if (ctParameter != null ) final CtImplicitArrayTypeReference typeParameter = (CtImplicitArrayTypeReference) ctParameter.getType();
TargetedExpressionTest.java,final CtThisAccess expectedNestedAccess = factory.Core().createThisAccess();,if (factory != null ) final CtThisAccess expectedNestedAccess = factory.Core().createThisAccess();
TargetedExpressionTest.java,final CtThisAccess expectedAnonymousThisAccess = factory.Core().createThisAccess();,if (factory != null ) final CtThisAccess expectedAnonymousThisAccess = factory.Core().createThisAccess();
TargetedExpressionTest.java,final CtThisAccess expectedNestedAccess = factory.Core().createThisAccess();,if (factory != null ) final CtThisAccess expectedNestedAccess = factory.Core().createThisAccess();
TargetedExpressionTest.java,final CtThisAccess expectedAnonymousThisAccess = factory.Core().createThisAccess();,if (factory != null ) final CtThisAccess expectedAnonymousThisAccess = factory.Core().createThisAccess();
CtElementImpl.java,Object[] array = collect.toArray();,if (collect != null ) Object[] array = collect.toArray();
ModelUtils.java,SpoonCompiler comp = new Launcher().createCompiler();,if (Launcher() != null ) SpoonCompiler comp = new Launcher().createCompiler();
JDTBatchCompiler.java,CtPackage pack = ctType.getPackage();,if (ctType != null ) CtPackage pack = ctType.getPackage();
JDTBatchCompiler.java,File directory = jdtCompiler.getSourceOutputDirectory();,if (jdtCompiler != null ) File directory = jdtCompiler.getSourceOutputDirectory();
JDTBatchCompiler.java,packageDir = new File(directory.getAbsolutePath());,if (File(directory != null ) packageDir = new File(directory.getAbsolutePath());
AnnotationFactory.java,annotation = factory.Core().createAnnotation();,if (factory != null ) annotation = factory.Core().createAnnotation();
CtAnnotationImpl.java,String fieldname = method.getName();,if (method != null ) String fieldname = method.getName();
JDTTreeBuilder.java,main = factory.Core().createTypeReference();,if (factory != null ) main = factory.Core().createTypeReference();
JDTTreeBuilder.java,CtAnnotation<A> a = factory.Core().createAnnotation();,if (factory != null ) CtAnnotation<A> a = factory.Core().createAnnotation();
JDTTreeBuilder.java,CtTypeReference<A> t = references.getTypeReference(annotationBinding.getAnnotationType());,if (references != null ) CtTypeReference<A> t = references.getTypeReference(annotationBinding.getAnnotationType());
JDTTreeBuilder.java,CtAnnotation<A> a = factory.Core().createAnnotation();,if (factory != null ) CtAnnotation<A> a = factory.Core().createAnnotation();
ParentExiter.java,String name = this.jdtTreeBuilder.context.annotationValueName.peek();,if (this != null ) String name = this.jdtTreeBuilder.context.annotationValueName.peek();
JDTTreeBuilder.java,ref = factory.Internal().createImplicitTypeReference();,if (factory != null ) ref = factory.Internal().createImplicitTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
TypeFactory.java,CtTypeParameter typeParam = factory.Core().createTypeParameter();,if (factory != null ) CtTypeParameter typeParam = factory.Core().createTypeParameter();
TypeFactory.java,CtTypeParameter typeParam = factory.Core().createTypeParameter();,if (factory != null ) CtTypeParameter typeParam = factory.Core().createTypeParameter();
SignatureTest.java,String signatureInvoToString = invoToString.getSignature();,if (invoToString != null ) String signatureInvoToString = invoToString.getSignature();
SignatureTest.java,String sigleft = left.getSignature();,if (left != null ) String sigleft = left.getSignature();
TypeAnnotationVisitor.java,isToBeProcessed = iterateOnTypeReference(expression.getTypeCasts());,if (iterateOnTypeReference(expression != null ) isToBeProcessed = iterateOnTypeReference(expression.getTypeCasts());
TypeAnnotationVisitor.java,isToBeProcessed = iterateOnTypeReference(e.getFormalTypeParameters());,if (iterateOnTypeReference(e != null ) isToBeProcessed = iterateOnTypeReference(e.getFormalTypeParameters());
TypeAnnotationVisitor.java,isToBeProcessed = iterateOnTypeReference(typeInfo.getSuperInterfaces());,if (iterateOnTypeReference(typeInfo != null ) isToBeProcessed = iterateOnTypeReference(typeInfo.getSuperInterfaces());
CastTest.java,Factory factory = TestUtils.createFactory();,if (TestUtils != null ) Factory factory = TestUtils.createFactory();
ExceptionTest.java,Factory factory = TestUtils.createFactory();,if (TestUtils != null ) Factory factory = TestUtils.createFactory();
ExecutableFactoryTest.java,Factory f = TestUtils.createFactory();,if (TestUtils != null ) Factory f = TestUtils.createFactory();
FieldTest.java,final Factory factory = TestUtils.createFactory();,if (TestUtils != null ) final Factory factory = TestUtils.createFactory();
GenericsTest.java,Factory factory = TestUtils.createFactory();,if (TestUtils != null ) Factory factory = TestUtils.createFactory();
IntercessionTest.java,Factory factory = TestUtils.createFactory();,if (TestUtils != null ) Factory factory = TestUtils.createFactory();
RemoveTest.java,Factory factory = TestUtils.createFactory();,if (TestUtils != null ) Factory factory = TestUtils.createFactory();
UnsupportedOperationTest.java,final Factory factory = TestUtils.createFactory();,if (TestUtils != null ) final Factory factory = TestUtils.createFactory();
UnsupportedOperationTest.java,final Factory factory = TestUtils.createFactory();,if (TestUtils != null ) final Factory factory = TestUtils.createFactory();
BlockTest.java,Factory factory = TestUtils.createFactory();,if (TestUtils != null ) Factory factory = TestUtils.createFactory();
BlockTest.java,Factory factory = TestUtils.createFactory();,if (TestUtils != null ) Factory factory = TestUtils.createFactory();
SwitchCaseTest.java,Factory factory = TestUtils.createFactory();,if (TestUtils != null ) Factory factory = TestUtils.createFactory();
SnippetTest.java,Factory factory = TestUtils.createFactory();,if (TestUtils != null ) Factory factory = TestUtils.createFactory();
SnippetTest.java,final Factory factory = TestUtils.createFactory();,if (TestUtils != null ) final Factory factory = TestUtils.createFactory();
StringLiteralTest.java,Factory factory = TestUtils.createFactory();,if (TestUtils != null ) Factory factory = TestUtils.createFactory();
TypeTest.java,Factory factory = TestUtils.createFactory();,if (TestUtils != null ) Factory factory = TestUtils.createFactory();
AccessTest.java,Factory factory = TestUtils.createFactory();,if (TestUtils != null ) Factory factory = TestUtils.createFactory();
CtClassTest.java,CtArrayTypeReference<Object> typeStringArray = build.Core().createArrayTypeReference();,if (build != null ) CtArrayTypeReference<Object> typeStringArray = build.Core().createArrayTypeReference();
CtClassTest.java,CtArrayTypeReference<Object> typeStringArrayArray = build.Core().createArrayTypeReference();,if (build != null ) CtArrayTypeReference<Object> typeStringArrayArray = build.Core().createArrayTypeReference();
JDTTreeBuilder.java,CtField<Object> field = factory.Core().createField();,if (factory != null ) CtField<Object> field = factory.Core().createField();
JDTBasedSpoonCompiler.java,JDTBasedSpoonCompiler comp = new JDTBasedSpoonCompiler(main.createFactory());,if (JDTBasedSpoonCompiler(main != null ) JDTBasedSpoonCompiler comp = new JDTBasedSpoonCompiler(main.createFactory());
JDTBasedSpoonCompiler.java,File f = sf.toFile();,if (sf != null ) File f = sf.toFile();
JDTBasedSpoonCompiler.java,ClassLoader currentClassLoader = Thread.currentThread().getContextClassLoader();,if (Thread != null ) ClassLoader currentClassLoader = Thread.currentThread().getContextClassLoader();
JDTBasedSpoonCompiler.java,classpath += File.pathSeparator + url.getFile();,if (url != null ) classpath += File.pathSeparator + url.getFile();
JDTBasedSpoonCompiler.java,List<SpoonFile> filesToBuild = sources.getAllJavaFiles();,if (sources != null ) List<SpoonFile> filesToBuild = sources.getAllJavaFiles();
JDTBasedSpoonCompiler.java,f = createTmpJavaFile(file.getFileSystemParent());,if (createTmpJavaFile(file != null ) f = createTmpJavaFile(file.getFileSystemParent());
JDTBasedSpoonCompiler.java,CompilationUnitDeclaration[] units = batchCompiler.getUnits(templates.getAllJavaFiles());,if (batchCompiler != null ) CompilationUnitDeclaration[] units = batchCompiler.getUnits(templates.getAllJavaFiles());
JDTBasedSpoonCompiler.java,long t = System.currentTimeMillis();,if (System != null ) long t = System.currentTimeMillis();
JDTBasedSpoonCompiler.java,javaCompliance = factory.getEnvironment().getComplianceLevel();,if (factory != null ) javaCompliance = factory.getEnvironment().getComplianceLevel();
JDTBasedSpoonCompiler.java,t = System.currentTimeMillis();,if (System != null ) t = System.currentTimeMillis();
JDTBasedSpoonCompiler.java,String filename = file.getAbsolutePath();,if (file != null ) String filename = file.getAbsolutePath();
JDTBasedSpoonCompiler.java,long t = System.currentTimeMillis();,if (System != null ) long t = System.currentTimeMillis();
JDTBasedSpoonCompiler.java,javaCompliance = factory.getEnvironment().getComplianceLevel();,if (factory != null ) javaCompliance = factory.getEnvironment().getComplianceLevel();
JDTBasedSpoonCompiler.java,ClassLoader currentClassLoader = Thread.currentThread().getContextClassLoader();,if (Thread != null ) ClassLoader currentClassLoader = Thread.currentThread().getContextClassLoader();
JDTBasedSpoonCompiler.java,classpath += File.pathSeparator + url.getFile();,if (url != null ) classpath += File.pathSeparator + url.getFile();
JDTBasedSpoonCompiler.java,File source = sf.toFile();,if (sf != null ) File source = sf.toFile();
JDTBasedSpoonCompiler.java,Environment env = factory.getEnvironment();,if (factory != null ) Environment env = factory.getEnvironment();
JDTBasedSpoonCompiler.java,long t = System.currentTimeMillis();,if (System != null ) long t = System.currentTimeMillis();
JDTBasedSpoonCompiler.java,javaCompliance = factory.getEnvironment().getComplianceLevel();,if (factory != null ) javaCompliance = factory.getEnvironment().getComplianceLevel();
JDTBasedSpoonCompiler.java,ClassLoader currentClassLoader = Thread.currentThread().getContextClassLoader();,if (Thread != null ) ClassLoader currentClassLoader = Thread.currentThread().getContextClassLoader();
JDTBasedSpoonCompiler.java,classpath += File.pathSeparator + url.getFile();,if (url != null ) classpath += File.pathSeparator + url.getFile();
JDTSnippetCompiler.java,t = System.currentTimeMillis();,if (System != null ) t = System.currentTimeMillis();
JDTSnippetCompiler.java,ClassLoader currentClassLoader = Thread.currentThread().getContextClassLoader();,if (Thread != null ) ClassLoader currentClassLoader = Thread.currentThread().getContextClassLoader();
JDTSnippetCompiler.java,classpath += File.pathSeparator + url.getFile();,if (url != null ) classpath += File.pathSeparator + url.getFile();
DefaultJavaPrettyPrinter.java,String com = lines[i].trim();,if (lines[i] != null ) String com = lines[i].trim();
DefaultJavaPrettyPrinter.java,final CtElement declaration = reference.getDeclaringType().getDeclaration();,if (reference != null ) final CtElement declaration = reference.getDeclaringType().getDeclaration();
JDTTreeBuilder.java,ctRef = factory.Core().createTypeReference();,if (factory != null ) ctRef = factory.Core().createTypeReference();
JDTTreeBuilder.java,final CtReference declaringType = getDeclaringReferenceFromImports(exec.constantPoolName());,if (getDeclaringReferenceFromImports(exec != null ) final CtReference declaringType = getDeclaringReferenceFromImports(exec.constantPoolName());
NoClasspathTest.java,String s = pr.getSignature();,if (pr != null ) String s = pr.getSignature();
CodeFactory.java,CtTypeAccess<T> typeAccess = factory.Core().createTypeAccess();,if (factory != null ) CtTypeAccess<T> typeAccess = factory.Core().createTypeAccess();
JDTTreeBuilder.java,final CtTypeAccess ta = factory.Core().createTypeAccess();,if (factory != null ) final CtTypeAccess ta = factory.Core().createTypeAccess();
JDTTreeBuilder.java,CtTypeAccess<Object> ta = factory.Core().createTypeAccess();,if (factory != null ) CtTypeAccess<Object> ta = factory.Core().createTypeAccess();
JDTTreeBuilder.java,CtTypeAccess<Object> ta = factory.Core().createTypeAccess();,if (factory != null ) CtTypeAccess<Object> ta = factory.Core().createTypeAccess();
JDTTreeBuilder.java,CtTypeAccess<Object> typeAccess = factory.Core().createTypeAccess();,if (factory != null ) CtTypeAccess<Object> typeAccess = factory.Core().createTypeAccess();
JDTTreeBuilder.java,CtTypeAccess<Object> typeAccess = factory.Core().createTypeAccess();,if (factory != null ) CtTypeAccess<Object> typeAccess = factory.Core().createTypeAccess();
JDTTreeBuilder.java,CtTypeAccess<Object> typeAccess = factory.Core().createTypeAccess();,if (factory != null ) CtTypeAccess<Object> typeAccess = factory.Core().createTypeAccess();
JDTTreeBuilder.java,CtPackageReference packageRef = factory.Core().createPackageReference();,if (factory != null ) CtPackageReference packageRef = factory.Core().createPackageReference();
JDTTreeBuilder.java,CtPackageReference packageRef = factory.Core().createPackageReference();,if (factory != null ) CtPackageReference packageRef = factory.Core().createPackageReference();
JDTTreeBuilder.java,CtTypeAccess<T> typeAccess = factory.Core().createTypeAccess();,if (factory != null ) CtTypeAccess<T> typeAccess = factory.Core().createTypeAccess();
JDTTreeBuilder.java,CtFieldReference<T> fieldReference = factory.Core().createFieldReference();,if (factory != null ) CtFieldReference<T> fieldReference = factory.Core().createFieldReference();
JDTTreeBuilder.java,CtFieldRead<T> fieldRead = factory.Core().createFieldRead();,if (factory != null ) CtFieldRead<T> fieldRead = factory.Core().createFieldRead();
CtStackScanner.java,CtReference ret = referenceStack.pop();,if (referenceStack != null ) CtReference ret = referenceStack.pop();
SnippetCompilationHelper.java,CtBlock<Void> body = f.Core().createBlock();,if (f != null ) CtBlock<Void> body = f.Core().createBlock();
SnippetCompilationHelper.java,Factory f = expr.getFactory();,if (expr != null ) Factory f = expr.getFactory();
SnippetCompilationHelper.java,CtBlock<B> body = f.Core().createBlock();,if (f != null ) CtBlock<B> body = f.Core().createBlock();
SnippetCompilationHelper.java,CtReturn<B> ret = f.Core().createReturn();,if (f != null ) CtReturn<B> ret = f.Core().createReturn();
CtReferenceImpl.java,String current = pr.getSignature();,if (pr != null ) String current = pr.getSignature();
SubstitutionVisitor.java,String name = reference.getSimpleName();,if (reference != null ) String name = reference.getSimpleName();
CtElementImpl.java,Object[] array = collect.toArray();,if (collect != null ) Object[] array = collect.toArray();
CtReferenceImpl.java,Object[] array = collect.toArray();,if (collect != null ) Object[] array = collect.toArray();
JDTTreeBuilder.java,final CtCircularTypeReference circularRef = factory.Internal().createCircularTypeReference();,if (factory != null ) final CtCircularTypeReference circularRef = factory.Internal().createCircularTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,CtArrayTypeReference<Object> arrayref = factory.Core().createArrayTypeReference();,if (factory != null ) CtArrayTypeReference<Object> arrayref = factory.Core().createArrayTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createImplicitTypeReference();,if (factory != null ) ref = factory.Core().createImplicitTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createImplicitTypeReference();,if (factory != null ) ref = factory.Core().createImplicitTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createImplicitTypeReference();,if (factory != null ) ref = factory.Core().createImplicitTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createImplicitTypeReference();,if (factory != null ) ref = factory.Core().createImplicitTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createImplicitTypeReference();,if (factory != null ) ref = factory.Core().createImplicitTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createImplicitTypeReference();,if (factory != null ) ref = factory.Core().createImplicitTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createImplicitTypeReference();,if (factory != null ) ref = factory.Core().createImplicitTypeReference();
InsertBeforeTest.java,factory = spoon.createFactory();,if (spoon != null ) factory = spoon.createFactory();
InsertBeforeTest.java,CtCase<Object> caseElem = factory.Core().createCase();,if (factory != null ) CtCase<Object> caseElem = factory.Core().createCase();
InsertBeforeTest.java,CtLiteral<Object> literal = factory.Core().createLiteral();,if (factory != null ) CtLiteral<Object> literal = factory.Core().createLiteral();
InsertBeforeTest.java,Factory factory = spoon.createFactory();,if (spoon != null ) Factory factory = spoon.createFactory();
InsertBeforeTest.java,CtElement parent = theWhile.getParent();,if (theWhile != null ) CtElement parent = theWhile.getParent();
InsertBeforeTest.java,CtElement newParent = theWhile.getParent();,if (theWhile != null ) CtElement newParent = theWhile.getParent();
TypeReferenceTest.java,Factory factory = new Launcher().createFactory();,if (Launcher() != null ) Factory factory = new Launcher().createFactory();
Launcher.java,Environment env = factory.getEnvironment();,if (factory != null ) Environment env = factory.getEnvironment();
Launcher.java,XMLReader xr = XMLReaderFactory.createXMLReader();,if (XMLReaderFactory != null ) XMLReader xr = XMLReaderFactory.createXMLReader();
Launcher.java,InputStream stream = configFile.getContent();,if (configFile != null ) InputStream stream = configFile.getContent();
SpoonTask.java,String[] srcs = ds.getIncludedFiles();,if (ds != null ) String[] srcs = ds.getIncludedFiles();
JDTTreeBuilder.java,CtExecutableReference<T> ref = factory.Core().createExecutableReference();,if (factory != null ) CtExecutableReference<T> ref = factory.Core().createExecutableReference();
JavaIdentifiers.java,String s=st.nextToken();,if (s=st != null ) String s=st.nextToken();
JDTTreeBuilder.java,CtLiteral<String> l = factory.Core().createLiteral();,if (factory != null ) CtLiteral<String> l = factory.Core().createLiteral();
SubstitutionVisitor.java,toReplace = (CtExpression)fieldAccess.getParent();,if ((CtExpression)fieldAccess != null ) toReplace = (CtExpression)fieldAccess.getParent();
DefaultPrettyPrinterTest.java,final Factory factory = TestUtils.createFactory();,if (TestUtils != null ) final Factory factory = TestUtils.createFactory();
PackageFactory.java,String name = token.nextToken();,if (token != null ) String name = token.nextToken();
PackageFactory.java,last = factory.Core().createPackage();,if (factory != null ) last = factory.Core().createPackage();
PackageFactory.java,current = packages.get(token.nextElement());,if (packages != null ) current = packages.get(token.nextElement());
CtTypeImpl.java,CtPackageReference pref = tref.getPackage();,if (tref != null ) CtPackageReference pref = tref.getPackage();
CtTypeImpl.java,tref = tref.getDeclaringType();,if (tref != null ) tref = tref.getDeclaringType();
CtTypeImpl.java,pref = tref.getPackage();,if (tref != null ) pref = tref.getPackage();
CtElementImpl.java,DefaultJavaPrettyPrinter printer = new DefaultJavaPrettyPrinter(getFactory().getEnvironment());,if (DefaultJavaPrettyPrinter(getFactory() != null ) DefaultJavaPrettyPrinter printer = new DefaultJavaPrettyPrinter(getFactory().getEnvironment());
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeParameterReference();,if (factory != null ) ref = factory.Core().createTypeParameterReference();
JDTTreeBuilder.java,CtTypeParameterReference reference = factory.Core().createTypeParameterReference();,if (factory != null ) CtTypeParameterReference reference = factory.Core().createTypeParameterReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
CodeFactory.java,CtBinaryOperator<T> op = factory.Core().createBinaryOperator();,if (factory != null ) CtBinaryOperator<T> op = factory.Core().createBinaryOperator();
CodeFactory.java,CtInvocation<T> invocation = factory.Core().createInvocation();,if (factory != null ) CtInvocation<T> invocation = factory.Core().createInvocation();
CodeFactory.java,CtLiteral<T> l = factory.Core().createLiteral();,if (factory != null ) CtLiteral<T> l = factory.Core().createLiteral();
CodeFactory.java,CtLocalVariable<T> var = factory.Core().createLocalVariable();,if (factory != null ) CtLocalVariable<T> var = factory.Core().createLocalVariable();
CodeFactory.java,CtCatchVariable<T> var = factory.Core().createCatchVariable();,if (factory != null ) CtCatchVariable<T> var = factory.Core().createCatchVariable();
CodeFactory.java,CtCatchVariableReference<T> ref = factory.Core().createCatchVariableReference();,if (factory != null ) CtCatchVariableReference<T> ref = factory.Core().createCatchVariableReference();
CodeFactory.java,CtThisAccess<T> fa = factory.Core().createThisAccess();,if (factory != null ) CtThisAccess<T> fa = factory.Core().createThisAccess();
JDTBasedSpoonCompiler.java,InputStream in = stream.getContent();,if (stream != null ) InputStream in = stream.getContent();
CtTypeInformationTest.java,factory = launcher.getFactory();,if (launcher != null ) factory = launcher.getFactory();
CtTypeInformationTest.java,SpoonCompiler compiler = launcher.createCompiler();,if (launcher != null ) SpoonCompiler compiler = launcher.createCompiler();
JDTTreeBuilder.java,CtFieldRead<Object> other = factory.Core().createFieldRead();,if (factory != null ) CtFieldRead<Object> other = factory.Core().createFieldRead();
JDTTreeBuilder.java,CtFieldRead<Object> fa = factory.Core().createFieldRead();,if (factory != null ) CtFieldRead<Object> fa = factory.Core().createFieldRead();
SpoonModelTree.java,TreePath path = new TreePath(n.getPath());,if (TreePath(n != null ) TreePath path = new TreePath(n.getPath());
CtReferenceImpl.java,Class<A> ac = annotationType.getActualClass();,if (annotationType != null ) Class<A> ac = annotationType.getActualClass();
SubstitutionVisitor.java,toReplace = fieldAccess.getParent();,if (fieldAccess != null ) toReplace = fieldAccess.getParent();
CodeFactory.java,va = factory.Core().createFieldAccess();,if (factory != null ) va = factory.Core().createFieldAccess();
JDTTreeBuilder.java,CtFieldAccess<Object> acc = factory.Core().createFieldAccess();,if (factory != null ) CtFieldAccess<Object> acc = factory.Core().createFieldAccess();
JDTTreeBuilder.java,CtFieldAccess<Object> fa = factory.Core().createFieldAccess();,if (factory != null ) CtFieldAccess<Object> fa = factory.Core().createFieldAccess();
JDTTreeBuilder.java,CtFieldAccess<Object> fa = factory.Core().createFieldAccess();,if (factory != null ) CtFieldAccess<Object> fa = factory.Core().createFieldAccess();
JDTTreeBuilder.java,va = factory.Core().createFieldAccess();,if (factory != null ) va = factory.Core().createFieldAccess();
CodeFactory.java,va = factory.Core().createVariableAccess();,if (factory != null ) va = factory.Core().createVariableAccess();
JDTTreeBuilder.java,CtVariableAccess<Object> va = factory.Core().createVariableAccess();,if (factory != null ) CtVariableAccess<Object> va = factory.Core().createVariableAccess();
JDTTreeBuilder.java,CtVariableAccess<Object> va = factory.Core().createVariableAccess();,if (factory != null ) CtVariableAccess<Object> va = factory.Core().createVariableAccess();
JDTTreeBuilder.java,va = factory.Core().createVariableAccess();,if (factory != null ) va = factory.Core().createVariableAccess();
SubstitutionVisitor.java,toReplace = targetedAccess.getParent();,if (targetedAccess != null ) toReplace = targetedAccess.getParent();
JDTTreeBuilder.java,CtThisAccess<Object> fa = factory.Core().createThisAccess();,if (factory != null ) CtThisAccess<Object> fa = factory.Core().createThisAccess();
JDTTreeBuilder.java,CtThisAccess<Object> fa = factory.Core().createThisAccess();,if (factory != null ) CtThisAccess<Object> fa = factory.Core().createThisAccess();
DefaultJavaPrettyPrinter.java,CtElement parent = context.elementStack.peek();,if (context != null ) CtElement parent = context.elementStack.peek();
JDTTreeBuilder.java,CtFieldReference<Object> fr = factory.Core().createFieldReference();,if (factory != null ) CtFieldReference<Object> fr = factory.Core().createFieldReference();
JDTTreeBuilder.java,CtSuperAccess<Object> fa = factory.Core().createSuperAccess();,if (factory != null ) CtSuperAccess<Object> fa = factory.Core().createSuperAccess();
ByteSerialization.java,objInput = (Object) si.readObject();,if (si != null ) objInput = (Object) si.readObject();
ByteSerialization.java,objInput = (Object) si.readObject();,if (si != null ) objInput = (Object) si.readObject();
AnnotationTest.java,SpoonCompiler compiler = launcher.createCompiler();,if (launcher != null ) SpoonCompiler compiler = launcher.createCompiler();
AnnotationTest.java,SpoonCompiler compiler = launcher.createCompiler();,if (launcher != null ) SpoonCompiler compiler = launcher.createCompiler();
CtInheritanceScannerTest.java,Class intf = tocheck.poll();,if (tocheck != null ) Class intf = tocheck.poll();
ExecutableRefTest.java,CtExecutableReference ref = method.getReference();,if (method != null ) CtExecutableReference ref = method.getReference();
ParentTest.java,CtClass clazz = factory.Core().createClass();,if (factory != null ) CtClass clazz = factory.Core().createClass();
LauncherTest.java,List<File> inputSources = new ArrayList<>(builder.getInputSources());,if (ArrayList<>(builder != null ) List<File> inputSources = new ArrayList<>(builder.getInputSources());
ExecutableRefTest.java,Method method = executableReference.getActualMethod();,if (executableReference != null ) Method method = executableReference.getActualMethod();
ExecutableRefTest.java,List<CtStatement> ctStatements = ctBody.getStatements();,if (ctBody != null ) List<CtStatement> ctStatements = ctBody.getStatements();
Launcher.java,Environment environment = factory.getEnvironment();,if (factory != null ) Environment environment = factory.getEnvironment();
Launcher.java,Environment env = compiler.getFactory().getEnvironment();,if (compiler != null ) Environment env = compiler.getFactory().getEnvironment();
Launcher.java,long t = System.currentTimeMillis();,if (System != null ) long t = System.currentTimeMillis();
Launcher.java,t = System.currentTimeMillis();,if (System != null ) t = System.currentTimeMillis();
Launcher.java,t = System.currentTimeMillis();,if (System != null ) t = System.currentTimeMillis();
Launcher.java,t = System.currentTimeMillis();,if (System != null ) t = System.currentTimeMillis();
Launcher.java,t = System.currentTimeMillis();,if (System != null ) t = System.currentTimeMillis();
Launcher.java,t = System.currentTimeMillis();,if (System != null ) t = System.currentTimeMillis();
Launcher.java,t = System.currentTimeMillis();,if (System != null ) t = System.currentTimeMillis();
JDTBasedSpoonCompiler.java,outputDirectory = outputDirectory.getCanonicalFile();,if (outputDirectory != null ) outputDirectory = outputDirectory.getCanonicalFile();
AnnotationTest.java,this.factory = launcher.createFactory();,if (launcher != null ) this.factory = launcher.createFactory();
StaticAccessTest.java,factory = spoon.createFactory();,if (spoon != null ) factory = spoon.createFactory();
TemplateTest.java,Factory factory = spoon.createFactory();,if (spoon != null ) Factory factory = spoon.createFactory();
TryCatchTest.java,Factory factory = launcher.createFactory();,if (launcher != null ) Factory factory = launcher.createFactory();
TryCatchTest.java,Factory factory = launcher.createFactory();,if (launcher != null ) Factory factory = launcher.createFactory();
AnnotationTest.java,this.factory = launcher.createFactory();,if (launcher != null ) this.factory = launcher.createFactory();
LambdaTest.java,Factory factory = launcher.createFactory();,if (launcher != null ) Factory factory = launcher.createFactory();
AnnotationTest.java,this.factory = launcher.createFactory();,if (launcher != null ) this.factory = launcher.createFactory();
JDTTreeBuilder.java,CtNewClass<Object> c = factory.Core().createNewClass();,if (factory != null ) CtNewClass<Object> c = factory.Core().createNewClass();
SymbolicInstance.java,CtSimpleType<T> type = concreteType.getDeclaration();,if (concreteType != null ) CtSimpleType<T> type = concreteType.getDeclaration();
VisitorSymbolicEvaluator.java,BranchingPoint bp = branchingPoints.peek();,if (branchingPoints != null ) BranchingPoint bp = branchingPoints.peek();
VisitorSymbolicEvaluator.java,target = stack.getThis();,if (stack != null ) target = stack.getThis();
VisitorSymbolicEvaluator.java,result = stack.getThis();,if (stack != null ) result = stack.getThis();
VisitorSymbolicEvaluator.java,target = stack.getThis();,if (stack != null ) target = stack.getThis();
VisitorSymbolicEvaluator.java,CtExecutableReference<T> eref = invocation.getExecutable();,if (invocation != null ) CtExecutableReference<T> eref = invocation.getExecutable();
VisitorSymbolicEvaluator.java,"target = heap.getType(this, eref.getDeclaringType());","if (eref != null ) target = heap.getType(this, eref.getDeclaringType());"
VisitorSymbolicEvaluator.java,target = stack.getThis();,if (stack != null ) target = stack.getThis();
VisitorSymbolicEvaluator.java,result = evaluate(returnStatement.getReturnedExpression());,if (evaluate(returnStatement != null ) result = evaluate(returnStatement.getReturnedExpression());
VisitorSymbolicEvaluator.java,Factory f = executable.getFactory();,if (executable != null ) Factory f = executable.getFactory();
NoClasspathTest.java,CtFieldAccess  fa = (CtFieldAccess) statement.getDefaultExpression();,if (statement != null ) CtFieldAccess  fa = (CtFieldAccess) statement.getDefaultExpression();
SignatureTest.java,CtExpression lit = returnEl.getReturnedExpression();,if (returnEl != null ) CtExpression lit = returnEl.getReturnedExpression();
JDTTreeBuilder.java,CtTry t = factory.Core().createTry();,if (factory != null ) CtTry t = factory.Core().createTry();
TryCatchTest.java,Factory factory = TestUtils.createFactory();,if (TestUtils != null ) Factory factory = TestUtils.createFactory();
LauncherTest.java,JavaOutputProcessor processor = (JavaOutputProcessor) environment.getDefaultFileGenerator();,if (environment != null ) JavaOutputProcessor processor = (JavaOutputProcessor) environment.getDefaultFileGenerator();
JDTTreeBuilder.java,CoreFactory cf = factory.Core();,if (factory != null ) CoreFactory cf = factory.Core();
InsertBeforeTest.java,CtCase caseElem = factory.Core().createCase();,if (factory != null ) CtCase caseElem = factory.Core().createCase();
BasicCompilationUnit.java,this.fileName = fileName.toCharArray();,if (fileName != null ) this.fileName = fileName.toCharArray();
JDTTreeBuilder.java,CtFieldReference<T> ref = factory.Core().createFieldReference();,if (factory != null ) CtFieldReference<T> ref = factory.Core().createFieldReference();
Launcher.java,Environment env = factory.getEnvironment();,if (factory != null ) Environment env = factory.getEnvironment();
AnnotationTest.java,Factory factory = spoon.createFactory();,if (spoon != null ) Factory factory = spoon.createFactory();
AnnotationTest.java,Factory factory = spoon.createFactory();,if (spoon != null ) Factory factory = spoon.createFactory();
SpoonTask.java,String[] srcs = ds.getIncludedDirectories();,if (ds != null ) String[] srcs = ds.getIncludedDirectories();
SpoonTask.java,srcs = ds.getIncludedFiles();,if (ds != null ) srcs = ds.getIncludedFiles();
SpoonTask.java,String[] srcs = ds.getIncludedDirectories();,if (ds != null ) String[] srcs = ds.getIncludedDirectories();
SpoonTask.java,srcs = ds.getIncludedFiles();,if (ds != null ) srcs = ds.getIncludedFiles();
JDTBasedSpoonCompiler.java,List<SpoonFile> javaFiles = tmp.getAllJavaFiles();,if (tmp != null ) List<SpoonFile> javaFiles = tmp.getAllJavaFiles();
FieldAccessTest.java,CtFieldAccess expr = (CtFieldAccess) var.getDefaultExpression();,if (var != null ) CtFieldAccess expr = (CtFieldAccess) var.getDefaultExpression();
ParentTest.java,CtBinaryOperator minus = factory.Core().createBinaryOperator();,if (factory != null ) CtBinaryOperator minus = factory.Core().createBinaryOperator();
ParentTest.java,Factory factory = spoon.createFactory();,if (spoon != null ) Factory factory = spoon.createFactory();
ParentTest.java,CtLiteral<Object> literal = factory.Core().createLiteral();,if (factory != null ) CtLiteral<Object> literal = factory.Core().createLiteral();
ParentTest.java,CtBinaryOperator minus = factory.Core().createBinaryOperator();,if (factory != null ) CtBinaryOperator minus = factory.Core().createBinaryOperator();
InsertBeforeTest.java,CtCase s = factory.Core().createCase();,if (factory != null ) CtCase s = factory.Core().createCase();
CodeFactory.java,CtStatementList<R> l = factory.Core().createStatementList();,if (factory != null ) CtStatementList<R> l = factory.Core().createStatementList();
CtStatementImpl.java,CtElement e = target.getParent();,if (target != null ) CtElement e = target.getParent();
ExceptionTest.java,Factory factory = TestUtils.createFactory();,if (TestUtils != null ) Factory factory = TestUtils.createFactory();
JDTBasedSpoonCompiler.java,JDTTreeBuilder builder = new JDTTreeBuilder(factory.Template());,if (JDTTreeBuilder(factory != null ) JDTTreeBuilder builder = new JDTTreeBuilder(factory.Template());
JDTTreeBuilder.java,String name = context.annotationValueName.peek();,if (context != null ) String name = context.annotationValueName.peek();
JDTTreeBuilder.java,CtCatch c = factory.Core().createCatch();,if (factory != null ) CtCatch c = factory.Core().createCatch();
JDTCompiler.java,final ICompilerRequestor r = super.getBatchRequestor();,if (super != null ) final ICompilerRequestor r = super.getBatchRequestor();
JDTCompiler.java,CompilationUnit[] units = super.getCompilationUnits();,if (super != null ) CompilationUnit[] units = super.getCompilationUnits();
JDTCompiler.java,startTime = System.currentTimeMillis();,if (System != null ) startTime = System.currentTimeMillis();
JDTCompiler.java,File f = sf.toFile();,if (sf != null ) File f = sf.toFile();
JDTCompiler.java,classpath += File.pathSeparator + url.getFile();,if (url != null ) classpath += File.pathSeparator + url.getFile();
JDTCompiler.java,List<SpoonFile> filesToBuild = sources.getAllJavaFiles();,if (sources != null ) List<SpoonFile> filesToBuild = sources.getAllJavaFiles();
JDTCompiler.java,f = createTmpJavaFile(file.getFileSystemParent());,if (createTmpJavaFile(file != null ) f = createTmpJavaFile(file.getFileSystemParent());
JDTCompiler.java,JDTTreeBuilder builder = new JDTTreeBuilder(factory.Template());,if (JDTTreeBuilder(factory != null ) JDTTreeBuilder builder = new JDTTreeBuilder(factory.Template());
JDTCompiler.java,InputStream in = stream.getContent();,if (stream != null ) InputStream in = stream.getContent();
JDTCompiler.java,long t = System.currentTimeMillis();,if (System != null ) long t = System.currentTimeMillis();
JDTCompiler.java,javaCompliance = factory.getEnvironment().getComplianceLevel();,if (factory != null ) javaCompliance = factory.getEnvironment().getComplianceLevel();
JDTCompiler.java,t = System.currentTimeMillis();,if (System != null ) t = System.currentTimeMillis();
JDTCompiler.java,String filename = file.getAbsolutePath();,if (file != null ) String filename = file.getAbsolutePath();
JDTCompiler.java,long t = System.currentTimeMillis();,if (System != null ) long t = System.currentTimeMillis();
JDTCompiler.java,javaCompliance = factory.getEnvironment().getComplianceLevel();,if (factory != null ) javaCompliance = factory.getEnvironment().getComplianceLevel();
JDTCompiler.java,classpath += File.pathSeparator + url.getFile();,if (url != null ) classpath += File.pathSeparator + url.getFile();
JDTCompiler.java,File source = sf.toFile();,if (sf != null ) File source = sf.toFile();
JDTCompiler.java,outputDirectory = outputDirectory.getCanonicalFile();,if (outputDirectory != null ) outputDirectory = outputDirectory.getCanonicalFile();
JDTCompiler.java,CtPackage pack = element.getPackage();,if (element != null ) CtPackage pack = element.getPackage();
JDTCompiler.java,packageDir = new File(outputDirectory.getAbsolutePath());,if (File(outputDirectory != null ) packageDir = new File(outputDirectory.getAbsolutePath());
JDTCompiler.java,Environment env = factory.getEnvironment();,if (factory != null ) Environment env = factory.getEnvironment();
JDTCompiler.java,long t = System.currentTimeMillis();,if (System != null ) long t = System.currentTimeMillis();
JDTCompiler.java,javaCompliance = factory.getEnvironment().getComplianceLevel();,if (factory != null ) javaCompliance = factory.getEnvironment().getComplianceLevel();
JDTCompiler.java,classpath += File.pathSeparator + url.getFile();,if (url != null ) classpath += File.pathSeparator + url.getFile();
JDTCompiler.java,initialClassLoader = initialClassLoader.getParent();,if (initialClassLoader != null ) initialClassLoader = initialClassLoader.getParent();
JDTCompiler.java,initialClassLoader = initialClassLoader.getParent();,if (initialClassLoader != null ) initialClassLoader = initialClassLoader.getParent();
JDTCompiler.java,ClassLoader cl = Thread.currentThread().getContextClassLoader();,if (Thread != null ) ClassLoader cl = Thread.currentThread().getContextClassLoader();
JDTSnippetCompiler.java,long t = System.currentTimeMillis();,if (System != null ) long t = System.currentTimeMillis();
JDTSnippetCompiler.java,javaCompliance = factory.getEnvironment().getComplianceLevel();,if (factory != null ) javaCompliance = factory.getEnvironment().getComplianceLevel();
JDTSnippetCompiler.java,t = System.currentTimeMillis();,if (System != null ) t = System.currentTimeMillis();
JDTSnippetCompiler.java,classpath += File.pathSeparator + url.getFile();,if (url != null ) classpath += File.pathSeparator + url.getFile();
JDTTreeBuilder.java,CoreFactory cf = factory.Core();,if (factory != null ) CoreFactory cf = factory.Core();
JDTTreeBuilder.java,CoreFactory cf = factory.Core();,if (factory != null ) CoreFactory cf = factory.Core();
JDTTreeBuilder.java,ASTPair pair = stack.peek();,if (stack != null ) ASTPair pair = stack.peek();
JDTTreeBuilder.java,ASTPair pair = stack.pop();,if (stack != null ) ASTPair pair = stack.pop();
JDTTreeBuilder.java,String name = context.annotationValueName.peek();,if (context != null ) String name = context.annotationValueName.peek();
JDTTreeBuilder.java,String name = new String(reference.shortReadableName());,if (String(reference != null ) String name = new String(reference.shortReadableName());
JDTTreeBuilder.java,CtPackageReference ref = factory.Core().createPackageReference();,if (factory != null ) CtPackageReference ref = factory.Core().createPackageReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeParameterReference();,if (factory != null ) ref = factory.Core().createTypeParameterReference();
JDTTreeBuilder.java,String name = new String(binding.sourceName());,if (String(binding != null ) String name = new String(binding.sourceName());
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,CtFieldReference<T> ref = factory.Core().createFieldReference();,if (factory != null ) CtFieldReference<T> ref = factory.Core().createFieldReference();
JDTTreeBuilder.java,CtFieldReference<T> ref = factory.Core().createFieldReference();,if (factory != null ) CtFieldReference<T> ref = factory.Core().createFieldReference();
JDTTreeBuilder.java,CtNewClass<Object> c = factory.Core().createNewClass();,if (factory != null ) CtNewClass<Object> c = factory.Core().createNewClass();
JDTTreeBuilder.java,CtField<Object> f = factory.Core().createField();,if (factory != null ) CtField<Object> f = factory.Core().createField();
JDTTreeBuilder.java,CtParameter<Object> p = factory.Core().createParameter();,if (factory != null ) CtParameter<Object> p = factory.Core().createParameter();
JDTTreeBuilder.java,CtNewArray<Object> array = factory.Core().createNewArray();,if (factory != null ) CtNewArray<Object> array = factory.Core().createNewArray();
JDTTreeBuilder.java,CtBreak b = factory.Core().createBreak();,if (factory != null ) CtBreak b = factory.Core().createBreak();
JDTTreeBuilder.java,CtLiteral<Character> l = factory.Core().createLiteral();,if (factory != null ) CtLiteral<Character> l = factory.Core().createLiteral();
JDTTreeBuilder.java,CtContinue c = factory.Core().createContinue();,if (factory != null ) CtContinue c = factory.Core().createContinue();
JDTTreeBuilder.java,CtDo d = factory.Core().createDo();,if (factory != null ) CtDo d = factory.Core().createDo();
JDTTreeBuilder.java,CtLiteral<Double> d = factory.Core().createLiteral();,if (factory != null ) CtLiteral<Double> d = factory.Core().createLiteral();
JDTTreeBuilder.java,CtInvocation<Object> inv = factory.Core().createInvocation();,if (factory != null ) CtInvocation<Object> inv = factory.Core().createInvocation();
JDTTreeBuilder.java,CtLiteral<Boolean> l = factory.Core().createLiteral();,if (factory != null ) CtLiteral<Boolean> l = factory.Core().createLiteral();
JDTTreeBuilder.java,CtField<Object> field = factory.Core().createField();,if (factory != null ) CtField<Object> field = factory.Core().createField();
JDTTreeBuilder.java,CtFieldAccess<Object> acc = factory.Core().createFieldAccess();,if (factory != null ) CtFieldAccess<Object> acc = factory.Core().createFieldAccess();
JDTTreeBuilder.java,CtLiteral<Float> l = factory.Core().createLiteral();,if (factory != null ) CtLiteral<Float> l = factory.Core().createLiteral();
JDTTreeBuilder.java,CtForEach fe = factory.Core().createForEach();,if (factory != null ) CtForEach fe = factory.Core().createForEach();
JDTTreeBuilder.java,CtIf ifs = factory.Core().createIf();,if (factory != null ) CtIf ifs = factory.Core().createIf();
JDTTreeBuilder.java,CtAnonymousExecutable b = factory.Core().createAnonymousExecutable();,if (factory != null ) CtAnonymousExecutable b = factory.Core().createAnonymousExecutable();
JDTTreeBuilder.java,CtLiteral<Integer> l = factory.Core().createLiteral();,if (factory != null ) CtLiteral<Integer> l = factory.Core().createLiteral();
JDTTreeBuilder.java,CtLocalVariable<Object> v = factory.Core().createLocalVariable();,if (factory != null ) CtLocalVariable<Object> v = factory.Core().createLocalVariable();
JDTTreeBuilder.java,CtLiteral<Long> l = factory.Core().createLiteral();,if (factory != null ) CtLiteral<Long> l = factory.Core().createLiteral();
JDTTreeBuilder.java,CtAnnotation<A> a = factory.Core().createAnnotation();,if (factory != null ) CtAnnotation<A> a = factory.Core().createAnnotation();
JDTTreeBuilder.java,CtInvocation<Object> inv = factory.Core().createInvocation();,if (factory != null ) CtInvocation<Object> inv = factory.Core().createInvocation();
JDTTreeBuilder.java,CtMethod<Object> m = factory.Core().createMethod();,if (factory != null ) CtMethod<Object> m = factory.Core().createMethod();
JDTTreeBuilder.java,CtAnnotation<A> a = factory.Core().createAnnotation();,if (factory != null ) CtAnnotation<A> a = factory.Core().createAnnotation();
JDTTreeBuilder.java,CtLiteral<Object> lit = factory.Core().createLiteral();,if (factory != null ) CtLiteral<Object> lit = factory.Core().createLiteral();
JDTTreeBuilder.java,CtTypeReference<Object> ref = factory.Core().createTypeReference();,if (factory != null ) CtTypeReference<Object> ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,CtFieldAccess<Object> fa = factory.Core().createFieldAccess();,if (factory != null ) CtFieldAccess<Object> fa = factory.Core().createFieldAccess();
JDTTreeBuilder.java,CtVariableAccess<Object> va = factory.Core().createVariableAccess();,if (factory != null ) CtVariableAccess<Object> va = factory.Core().createVariableAccess();
JDTTreeBuilder.java,CtAnnotation<A> a = factory.Core().createAnnotation();,if (factory != null ) CtAnnotation<A> a = factory.Core().createAnnotation();
JDTTreeBuilder.java,va = factory.Core().createFieldAccess();,if (factory != null ) va = factory.Core().createFieldAccess();
JDTTreeBuilder.java,va = factory.Core().createVariableAccess();,if (factory != null ) va = factory.Core().createVariableAccess();
JDTTreeBuilder.java,CtLiteral<String> s = factory.Core().createLiteral();,if (factory != null ) CtLiteral<String> s = factory.Core().createLiteral();
JDTTreeBuilder.java,CtBinaryOperator<String> op = factory.Core().createBinaryOperator();,if (factory != null ) CtBinaryOperator<String> op = factory.Core().createBinaryOperator();
JDTTreeBuilder.java,CtFieldReference<Object> fr = factory.Core().createFieldReference();,if (factory != null ) CtFieldReference<Object> fr = factory.Core().createFieldReference();
JDTTreeBuilder.java,CtSuperAccess<Object> fa = factory.Core().createSuperAccess();,if (factory != null ) CtSuperAccess<Object> fa = factory.Core().createSuperAccess();
JDTTreeBuilder.java,CtSynchronized s = factory.Core().createSynchronized();,if (factory != null ) CtSynchronized s = factory.Core().createSynchronized();
JDTTreeBuilder.java,CtThisAccess<Object> fa = factory.Core().createThisAccess();,if (factory != null ) CtThisAccess<Object> fa = factory.Core().createThisAccess();
JDTTreeBuilder.java,CtThrow t = factory.Core().createThrow();,if (factory != null ) CtThrow t = factory.Core().createThrow();
JDTTreeBuilder.java,CtLiteral<Boolean> l = factory.Core().createLiteral();,if (factory != null ) CtLiteral<Boolean> l = factory.Core().createLiteral();
JDTTreeBuilder.java,CtTry t = factory.Core().createTry();,if (factory != null ) CtTry t = factory.Core().createTry();
JDTTreeBuilder.java,CtCatch c = factory.Core().createCatch();,if (factory != null ) CtCatch c = factory.Core().createCatch();
JDTTreeBuilder.java,CtWhile w = factory.Core().createWhile();,if (factory != null ) CtWhile w = factory.Core().createWhile();
Launcher.java,Environment env = Spoon.createEnvironment();,if (Spoon != null ) Environment env = Spoon.createEnvironment();
Spoon.java,Environment env = compiler.getFactory().getEnvironment();,if (compiler != null ) Environment env = compiler.getFactory().getEnvironment();
Spoon.java,long t = System.currentTimeMillis();,if (System != null ) long t = System.currentTimeMillis();
Spoon.java,t = System.currentTimeMillis();,if (System != null ) t = System.currentTimeMillis();
Spoon.java,t = System.currentTimeMillis();,if (System != null ) t = System.currentTimeMillis();
Spoon.java,t = System.currentTimeMillis();,if (System != null ) t = System.currentTimeMillis();
Spoon.java,t = System.currentTimeMillis();,if (System != null ) t = System.currentTimeMillis();
Spoon.java,t = System.currentTimeMillis();,if (System != null ) t = System.currentTimeMillis();
Spoon.java,t = System.currentTimeMillis();,if (System != null ) t = System.currentTimeMillis();
TestUtils.java,SpoonCompiler comp = Spoon.createCompiler();,if (Spoon != null ) SpoonCompiler comp = Spoon.createCompiler();
TestUtils.java,SpoonCompiler comp = Spoon.createCompiler();,if (Spoon != null ) SpoonCompiler comp = Spoon.createCompiler();
AnnotationTest.java,Factory factory = Spoon.createFactory();,if (Spoon != null ) Factory factory = Spoon.createFactory();
FilterTest.java,factory = Spoon.createFactory();,if (Spoon != null ) factory = Spoon.createFactory();
LinesTest.java,factory = Spoon.createFactory();,if (Spoon != null ) factory = Spoon.createFactory();
PrinterTest.java,factory = Spoon.createFactory();,if (Spoon != null ) factory = Spoon.createFactory();
ReplaceTest.java,factory = Spoon.createFactory();,if (Spoon != null ) factory = Spoon.createFactory();
TemplateTest.java,Factory factory = Spoon.createFactory();,if (Spoon != null ) Factory factory = Spoon.createFactory();
TemplateTest.java,Factory factory = Spoon.createFactory();,if (Spoon != null ) Factory factory = Spoon.createFactory();
Spoon.java,Environment env = factory.getEnvironment();,if (factory != null ) Environment env = factory.getEnvironment();
CtExecutableReferenceImpl.java,Annotation[] annotations = super.getAnnotations();,if (super != null ) Annotation[] annotations = super.getAnnotations();
CtFieldReferenceImpl.java,Annotation[] annotations = super.getAnnotations();,if (super != null ) Annotation[] annotations = super.getAnnotations();
CtTypeReferenceImpl.java,Annotation[] a = super.getAnnotations();,if (super != null ) Annotation[] a = super.getAnnotations();
SpoonTask.java,String[] srcs = ds.getIncludedFiles();,if (ds != null ) String[] srcs = ds.getIncludedFiles();
SpoonTask.java,String[] srcs = ds.getIncludedFiles();,if (ds != null ) String[] srcs = ds.getIncludedFiles();
AbstractLauncher.java,XMLReader xr = XMLReaderFactory.createXMLReader();,if (XMLReaderFactory != null ) XMLReader xr = XMLReaderFactory.createXMLReader();
AbstractLauncher.java,InputStream stream = configFile.getContent();,if (configFile != null ) InputStream stream = configFile.getContent();
AbstractLauncher.java,long t = System.currentTimeMillis();,if (System != null ) long t = System.currentTimeMillis();
AbstractLauncher.java,t = System.currentTimeMillis();,if (System != null ) t = System.currentTimeMillis();
AbstractLauncher.java,t = System.currentTimeMillis();,if (System != null ) t = System.currentTimeMillis();
AbstractLauncher.java,t = System.currentTimeMillis();,if (System != null ) t = System.currentTimeMillis();
AbstractLauncher.java,t = System.currentTimeMillis();,if (System != null ) t = System.currentTimeMillis();
AbstractLauncher.java,t = System.currentTimeMillis();,if (System != null ) t = System.currentTimeMillis();
Launcher.java,JSAP jsap = super.defineArgs();,if (super != null ) JSAP jsap = super.defineArgs();
CodeFactory.java,CtFieldReference<T> field = factory.Core().createFieldReference();,if (factory != null ) CtFieldReference<T> field = factory.Core().createFieldReference();
DefaultJavaPrettyPrinter.java,isStatic = reference.isStatic();,if (reference != null ) isStatic = reference.isStatic();
JDTTreeBuilder.java,CtFieldReference<Object> fr = factory.Core().createFieldReference();,if (factory != null ) CtFieldReference<Object> fr = factory.Core().createFieldReference();
JDTTreeBuilder.java,CtThisAccess<Object> fa = factory.Core().createThisAccess();,if (factory != null ) CtThisAccess<Object> fa = factory.Core().createThisAccess();
VisitorSymbolicEvaluator.java,result = stack.getThis();,if (stack != null ) result = stack.getThis();
JDTCompiler.java,compiler.startTime = System.currentTimeMillis();,if (System != null ) compiler.startTime = System.currentTimeMillis();
JDTCompiler.java,environment = compiler.getLibraryAccess();,if (compiler != null ) environment = compiler.getLibraryAccess();
JDTCompiler.java,srcSuccess = build(sources.getAllJavaFiles());,if (build(sources != null ) srcSuccess = build(sources.getAllJavaFiles());
JDTCompiler.java,templateSuccess = buildTemplates(templates.getAllJavaFiles());,if (buildTemplates(templates != null ) templateSuccess = buildTemplates(templates.getAllJavaFiles());
JDTSnippetCompiler.java,srcSuccess = build(sources.getAllJavaFiles());,if (build(sources != null ) srcSuccess = build(sources.getAllJavaFiles());
JDTTreeBuilder.java,CtLiteral<String> l = factory.Core().createLiteral();,if (factory != null ) CtLiteral<String> l = factory.Core().createLiteral();
JDTCompiler.java,this.startTime = System.currentTimeMillis();,if (System != null ) this.startTime = System.currentTimeMillis();
JDTCompiler.java,destinationPath = getDestinationDirectory().getAbsolutePath();,if (getDestinationDirectory() != null ) destinationPath = getDestinationDirectory().getAbsolutePath();
JDTCompiler.java,CompilationUnit[] units = super.getCompilationUnits();,if (super != null ) CompilationUnit[] units = super.getCompilationUnits();
JDTCompiler.java,destinationPath = getDestinationDirectory().getAbsolutePath();,if (getDestinationDirectory() != null ) destinationPath = getDestinationDirectory().getAbsolutePath();
JDTCompiler.java,"srcSuccess = build(factory, sources.getAllJavaFiles());","if (sources != null ) srcSuccess = build(factory, sources.getAllJavaFiles());"
JDTCompiler.java,"templateSuccess = buildTemplates(factory, templates.getAllJavaFiles());","if (templates != null ) templateSuccess = buildTemplates(factory, templates.getAllJavaFiles());"
JDTSnippetCompiler.java,"srcSuccess = build(factory, sources.getAllJavaFiles());","if (sources != null ) srcSuccess = build(factory, sources.getAllJavaFiles());"
TestUtils.java,Factory factory = Spoon.createFactory();,if (Spoon != null ) Factory factory = Spoon.createFactory();
TemplateTest.java,SpoonCompiler compiler = Spoon.createCompiler();,if (Spoon != null ) SpoonCompiler compiler = Spoon.createCompiler();
TemplateTest.java,SpoonCompiler compiler = Spoon.createCompiler();,if (Spoon != null ) SpoonCompiler compiler = Spoon.createCompiler();
AbstractLauncher.java,Builder builder = getFactory().getBuilder();,if (getFactory() != null ) Builder builder = getFactory().getBuilder();
Launcher.java,Factory f = super.createFactory();,if (super != null ) Factory f = super.createFactory();
SpoonBuildingManager.java,long t = System.currentTimeMillis();,if (System != null ) long t = System.currentTimeMillis();
SpoonBuildingManager.java,compiler.javaCompliance = factory.getEnvironment().getComplianceLevel();,if (factory != null ) compiler.javaCompliance = factory.getEnvironment().getComplianceLevel();
SpoonBuildingManager.java,"srcSuccess = compiler.compileSrc(factory, sources.getAllJavaFiles());","if (sources != null ) srcSuccess = compiler.compileSrc(factory, sources.getAllJavaFiles());"
SpoonBuildingManager.java,t = System.currentTimeMillis();,if (System != null ) t = System.currentTimeMillis();
SpoonBuildingManager.java,String filename = file.getAbsolutePath();,if (file != null ) String filename = file.getAbsolutePath();
JDTCompiler.java,classpath += File.pathSeparator + url.getFile();,if (url != null ) classpath += File.pathSeparator + url.getFile();
JDTCompiler.java,InputStream in = stream.getContent();,if (stream != null ) InputStream in = stream.getContent();
JDTCompiler.java,this.startTime = System.currentTimeMillis();,if (System != null ) this.startTime = System.currentTimeMillis();
JDTSnippetCompiler.java,long t = System.currentTimeMillis();,if (System != null ) long t = System.currentTimeMillis();
JDTSnippetCompiler.java,compiler.javaCompliance = factory.getEnvironment().getComplianceLevel();,if (factory != null ) compiler.javaCompliance = factory.getEnvironment().getComplianceLevel();
JDTSnippetCompiler.java,"srcSuccess = compiler.compileSrc(factory, sources.getAllJavaFiles());","if (sources != null ) srcSuccess = compiler.compileSrc(factory, sources.getAllJavaFiles());"
JDTSnippetCompiler.java,t = System.currentTimeMillis();,if (System != null ) t = System.currentTimeMillis();
JDTTreeBuilder.java,CoreFactory cf = factory.Core();,if (factory != null ) CoreFactory cf = factory.Core();
JDTTreeBuilder.java,CoreFactory cf = factory.Core();,if (factory != null ) CoreFactory cf = factory.Core();
JDTTreeBuilder.java,ASTPair pair = stack.peek();,if (stack != null ) ASTPair pair = stack.peek();
JDTTreeBuilder.java,ASTPair pair = stack.pop();,if (stack != null ) ASTPair pair = stack.pop();
JDTTreeBuilder.java,String name = context.annotationValueName.peek();,if (context != null ) String name = context.annotationValueName.peek();
JDTTreeBuilder.java,String name = new String(reference.shortReadableName());,if (String(reference != null ) String name = new String(reference.shortReadableName());
JDTTreeBuilder.java,CtPackageReference ref = factory.Core().createPackageReference();,if (factory != null ) CtPackageReference ref = factory.Core().createPackageReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeParameterReference();,if (factory != null ) ref = factory.Core().createTypeParameterReference();
JDTTreeBuilder.java,String name = new String(binding.sourceName());,if (String(binding != null ) String name = new String(binding.sourceName());
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,ref = factory.Core().createTypeReference();,if (factory != null ) ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,CtFieldReference<T> ref = factory.Core().createFieldReference();,if (factory != null ) CtFieldReference<T> ref = factory.Core().createFieldReference();
JDTTreeBuilder.java,CtFieldReference<T> ref = factory.Core().createFieldReference();,if (factory != null ) CtFieldReference<T> ref = factory.Core().createFieldReference();
JDTTreeBuilder.java,CtNewClass<Object> c = factory.Core().createNewClass();,if (factory != null ) CtNewClass<Object> c = factory.Core().createNewClass();
JDTTreeBuilder.java,CtField<Object> f = factory.Core().createField();,if (factory != null ) CtField<Object> f = factory.Core().createField();
JDTTreeBuilder.java,CtParameter<Object> p = factory.Core().createParameter();,if (factory != null ) CtParameter<Object> p = factory.Core().createParameter();
JDTTreeBuilder.java,CtNewArray<Object> array = factory.Core().createNewArray();,if (factory != null ) CtNewArray<Object> array = factory.Core().createNewArray();
JDTTreeBuilder.java,CtBreak b = factory.Core().createBreak();,if (factory != null ) CtBreak b = factory.Core().createBreak();
JDTTreeBuilder.java,CtLiteral<Character> l = factory.Core().createLiteral();,if (factory != null ) CtLiteral<Character> l = factory.Core().createLiteral();
JDTTreeBuilder.java,CtContinue c = factory.Core().createContinue();,if (factory != null ) CtContinue c = factory.Core().createContinue();
JDTTreeBuilder.java,CtDo d = factory.Core().createDo();,if (factory != null ) CtDo d = factory.Core().createDo();
JDTTreeBuilder.java,CtLiteral<Double> d = factory.Core().createLiteral();,if (factory != null ) CtLiteral<Double> d = factory.Core().createLiteral();
JDTTreeBuilder.java,CtInvocation<Object> inv = factory.Core().createInvocation();,if (factory != null ) CtInvocation<Object> inv = factory.Core().createInvocation();
JDTTreeBuilder.java,CtLiteral<String> l = factory.Core().createLiteral();,if (factory != null ) CtLiteral<String> l = factory.Core().createLiteral();
JDTTreeBuilder.java,CtLiteral<Boolean> l = factory.Core().createLiteral();,if (factory != null ) CtLiteral<Boolean> l = factory.Core().createLiteral();
JDTTreeBuilder.java,CtField<Object> field = factory.Core().createField();,if (factory != null ) CtField<Object> field = factory.Core().createField();
JDTTreeBuilder.java,CtFieldAccess<Object> acc = factory.Core().createFieldAccess();,if (factory != null ) CtFieldAccess<Object> acc = factory.Core().createFieldAccess();
JDTTreeBuilder.java,CtLiteral<Float> l = factory.Core().createLiteral();,if (factory != null ) CtLiteral<Float> l = factory.Core().createLiteral();
JDTTreeBuilder.java,CtForEach fe = factory.Core().createForEach();,if (factory != null ) CtForEach fe = factory.Core().createForEach();
JDTTreeBuilder.java,CtIf ifs = factory.Core().createIf();,if (factory != null ) CtIf ifs = factory.Core().createIf();
JDTTreeBuilder.java,CtAnonymousExecutable b = factory.Core().createAnonymousExecutable();,if (factory != null ) CtAnonymousExecutable b = factory.Core().createAnonymousExecutable();
JDTTreeBuilder.java,CtLiteral<Integer> l = factory.Core().createLiteral();,if (factory != null ) CtLiteral<Integer> l = factory.Core().createLiteral();
JDTTreeBuilder.java,CtLocalVariable<Object> v = factory.Core().createLocalVariable();,if (factory != null ) CtLocalVariable<Object> v = factory.Core().createLocalVariable();
JDTTreeBuilder.java,CtLiteral<Long> l = factory.Core().createLiteral();,if (factory != null ) CtLiteral<Long> l = factory.Core().createLiteral();
JDTTreeBuilder.java,CtAnnotation<A> a = factory.Core().createAnnotation();,if (factory != null ) CtAnnotation<A> a = factory.Core().createAnnotation();
JDTTreeBuilder.java,CtInvocation<Object> inv = factory.Core().createInvocation();,if (factory != null ) CtInvocation<Object> inv = factory.Core().createInvocation();
JDTTreeBuilder.java,CtMethod<Object> m = factory.Core().createMethod();,if (factory != null ) CtMethod<Object> m = factory.Core().createMethod();
JDTTreeBuilder.java,CtAnnotation<A> a = factory.Core().createAnnotation();,if (factory != null ) CtAnnotation<A> a = factory.Core().createAnnotation();
JDTTreeBuilder.java,CtLiteral<Object> lit = factory.Core().createLiteral();,if (factory != null ) CtLiteral<Object> lit = factory.Core().createLiteral();
JDTTreeBuilder.java,CtTypeReference<Object> ref = factory.Core().createTypeReference();,if (factory != null ) CtTypeReference<Object> ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,CtFieldAccess<Object> fa = factory.Core().createFieldAccess();,if (factory != null ) CtFieldAccess<Object> fa = factory.Core().createFieldAccess();
JDTTreeBuilder.java,CtVariableAccess<Object> va = factory.Core().createVariableAccess();,if (factory != null ) CtVariableAccess<Object> va = factory.Core().createVariableAccess();
JDTTreeBuilder.java,CtAnnotation<A> a = factory.Core().createAnnotation();,if (factory != null ) CtAnnotation<A> a = factory.Core().createAnnotation();
JDTTreeBuilder.java,va = factory.Core().createFieldAccess();,if (factory != null ) va = factory.Core().createFieldAccess();
JDTTreeBuilder.java,va = factory.Core().createVariableAccess();,if (factory != null ) va = factory.Core().createVariableAccess();
JDTTreeBuilder.java,CtLiteral<String> s = factory.Core().createLiteral();,if (factory != null ) CtLiteral<String> s = factory.Core().createLiteral();
JDTTreeBuilder.java,CtBinaryOperator<String> op = factory.Core().createBinaryOperator();,if (factory != null ) CtBinaryOperator<String> op = factory.Core().createBinaryOperator();
JDTTreeBuilder.java,CtFieldReference<Object> fr = factory.Core().createFieldReference();,if (factory != null ) CtFieldReference<Object> fr = factory.Core().createFieldReference();
JDTTreeBuilder.java,CtSuperAccess<Object> fa = factory.Core().createSuperAccess();,if (factory != null ) CtSuperAccess<Object> fa = factory.Core().createSuperAccess();
JDTTreeBuilder.java,CtSynchronized s = factory.Core().createSynchronized();,if (factory != null ) CtSynchronized s = factory.Core().createSynchronized();
JDTTreeBuilder.java,CtFieldReference<Object> fr = factory.Core().createFieldReference();,if (factory != null ) CtFieldReference<Object> fr = factory.Core().createFieldReference();
JDTTreeBuilder.java,CtThisAccess<Object> fa = factory.Core().createThisAccess();,if (factory != null ) CtThisAccess<Object> fa = factory.Core().createThisAccess();
JDTTreeBuilder.java,CtThrow t = factory.Core().createThrow();,if (factory != null ) CtThrow t = factory.Core().createThrow();
JDTTreeBuilder.java,CtLiteral<Boolean> l = factory.Core().createLiteral();,if (factory != null ) CtLiteral<Boolean> l = factory.Core().createLiteral();
JDTTreeBuilder.java,CtTry t = factory.Core().createTry();,if (factory != null ) CtTry t = factory.Core().createTry();
JDTTreeBuilder.java,CtCatch c = factory.Core().createCatch();,if (factory != null ) CtCatch c = factory.Core().createCatch();
JDTTreeBuilder.java,CtWhile w = factory.Core().createWhile();,if (factory != null ) CtWhile w = factory.Core().createWhile();
SnippetCompilationHelper.java,Factory f = st.getFactory();,if (st != null ) Factory f = st.getFactory();
SnippetCompilationHelper.java,CtBlock<Void> body = f.Core().createBlock();,if (f != null ) CtBlock<Void> body = f.Core().createBlock();
SnippetCompilationHelper.java,Factory f = expr.getFactory();,if (expr != null ) Factory f = expr.getFactory();
SnippetCompilationHelper.java,CtBlock<B> body = f.Core().createBlock();,if (f != null ) CtBlock<B> body = f.Core().createBlock();
SnippetCompilationHelper.java,CtReturn<B> ret = f.Core().createReturn();,if (f != null ) CtReturn<B> ret = f.Core().createReturn();
FieldFactory.java,CtFieldReference fieldRef = factory.Core().createFieldReference();,if (factory != null ) CtFieldReference fieldRef = factory.Core().createFieldReference();
StandardEnvironment.java,SourcePosition sp = element.getPosition();,if (element != null ) SourcePosition sp = element.getPosition();
JDTTreeBuilder.java,CtFieldReference ref = factory.Core().createFieldReference();,if (factory != null ) CtFieldReference ref = factory.Core().createFieldReference();
JDTTreeBuilder.java,CtFieldReference ref = factory.Core().createFieldReference();,if (factory != null ) CtFieldReference ref = factory.Core().createFieldReference();
JDTTreeBuilder.java,CtFieldReference fr = factory.Core().createFieldReference();,if (factory != null ) CtFieldReference fr = factory.Core().createFieldReference();
JDTTreeBuilder.java,CtFieldAccess<Class> fa = factory.Core().createFieldAccess();,if (factory != null ) CtFieldAccess<Class> fa = factory.Core().createFieldAccess();
JDTTreeBuilder.java,CtConstructor c = factory.Core().createConstructor();,if (factory != null ) CtConstructor c = factory.Core().createConstructor();
JDTTreeBuilder.java,CtInvocation inv = factory.Core().createInvocation();,if (factory != null ) CtInvocation inv = factory.Core().createInvocation();
JDTTreeBuilder.java,CtAnnotation a = factory.Core().createAnnotation();,if (factory != null ) CtAnnotation a = factory.Core().createAnnotation();
JDTTreeBuilder.java,CtAnnotation a = factory.Core().createAnnotation();,if (factory != null ) CtAnnotation a = factory.Core().createAnnotation();
JDTTreeBuilder.java,CtTypeReference ref = factory.Core().createTypeReference();,if (factory != null ) CtTypeReference ref = factory.Core().createTypeReference();
JDTTreeBuilder.java,CtVariableAccess va = factory.Core().createVariableAccess();,if (factory != null ) CtVariableAccess va = factory.Core().createVariableAccess();
JDTTreeBuilder.java,CtFieldAccess fa = factory.Core().createFieldAccess();,if (factory != null ) CtFieldAccess fa = factory.Core().createFieldAccess();
JDTTreeBuilder.java,CtAnnotation a = factory.Core().createAnnotation();,if (factory != null ) CtAnnotation a = factory.Core().createAnnotation();
JDTTreeBuilder.java,CtSuperAccess fa = factory.Core().createSuperAccess();,if (factory != null ) CtSuperAccess fa = factory.Core().createSuperAccess();
JDTTreeBuilder.java,CtFieldReference fr = factory.Core().createFieldReference();,if (factory != null ) CtFieldReference fr = factory.Core().createFieldReference();
JDTTreeBuilder.java,CtThisAccess fa = factory.Core().createThisAccess();,if (factory != null ) CtThisAccess fa = factory.Core().createThisAccess();
JDTTreeBuilder.java,pack = factory.Core().createPackage();,if (factory != null ) pack = factory.Core().createPackage();
VisitorSymbolicEvaluator.java,SymbolicInstance left = evaluate(operator.getLeftHandOperand());,if (evaluate(operator != null ) SymbolicInstance left = evaluate(operator.getLeftHandOperand());
VisitorSymbolicEvaluator.java,SymbolicInstance right = evaluate(operator.getRightHandOperand());,if (evaluate(operator != null ) SymbolicInstance right = evaluate(operator.getRightHandOperand());
CtArrayTypeReferenceImpl.java,Class c = getComponentType().getActualClass();,if (getComponentType() != null ) Class c = getComponentType().getActualClass();
CtParameterReferenceImpl.java,CtExecutable exec = executable.getDeclaration();,if (executable != null ) CtExecutable exec = executable.getDeclaration();
SubstitutionVisitor.java,CtTypeReference t = (CtTypeReference) lit.getValue();,if (lit != null ) CtTypeReference t = (CtTypeReference) lit.getValue();
TemplateMatcher.java,int numOfNonParamsinTeList = teList.size();,if (teList != null ) int numOfNonParamsinTeList = teList.size();
AnnotationTest.java,Bound actualAnnotation = (Bound)a.getActualAnnotation();,if ((Bound)a != null ) Bound actualAnnotation = (Bound)a.getActualAnnotation();
ControlTest.java,List<CtStatement> stmts = meth.getBody().getStatements();,if (meth != null ) List<CtStatement> stmts = meth.getBody().getStatements();
IntercessionTest.java,CtBlock body = foo.getBody();,if (foo != null ) CtBlock body = foo.getBody();
IntercessionTest.java,CtBlock body = foo.getBody();,if (foo != null ) CtBlock body = foo.getBody();
IntercessionTest.java,CtBlock body = foo.getBody();,if (foo != null ) CtBlock body = foo.getBody();
IntercessionTest.java,CtBlock body = foo.getBody();,if (foo != null ) CtBlock body = foo.getBody();
IntercessionTest.java,CtBlock body = foo.getBody();,if (foo != null ) CtBlock body = foo.getBody();
TestProcessor.java,CompilationUnit cu=c.getPosition().getCompilationUnit();,if (cu=c != null ) CompilationUnit cu=c.getPosition().getCompilationUnit();
TypeFactory.java,CtTypeReference ref = factory.Core().createTypeReference();,if (factory != null ) CtTypeReference ref = factory.Core().createTypeReference();
SnippetCompiler.java,String s = new String(byteArrayOutputStream.toByteArray());,if (String(byteArrayOutputStream != null ) String s = new String(byteArrayOutputStream.toByteArray());
GenericsTest.java,CtNewClass val = (CtNewClass)f.getDefaultExpression();,if ((CtNewClass)f != null ) CtNewClass val = (CtNewClass)f.getDefaultExpression();
JDTTreeBuilder.java,CtLocalVariable var = factory.Core().createLocalVariable();,if (factory != null ) CtLocalVariable var = factory.Core().createLocalVariable();
CodeFactory.java,CtFieldReference field = factory.Core().createFieldReference();,if (factory != null ) CtFieldReference field = factory.Core().createFieldReference();
CodeFactory.java,CtStatementList l = factory.Core().createStatementList();,if (factory != null ) CtStatementList l = factory.Core().createStatementList();
CodeFactory.java,CtCodeSnippetExpression<T> e = factory.Core().createCodeSnippetExpression();,if (factory != null ) CtCodeSnippetExpression<T> e = factory.Core().createCodeSnippetExpression();
SpoonBuildingManager.java,"templateSuccess = compiler.compileTemplate(factory, templates.getAllJavaFiles());","if (templates != null ) templateSuccess = compiler.compileTemplate(factory, templates.getAllJavaFiles());"
SpoonCompiler.java,ClassLoader currentClassLoader = Thread.currentThread().getContextClassLoader();//ClassLoader.getSystemClassLoader();,if (Thread != null ) ClassLoader currentClassLoader = Thread.currentThread().getContextClassLoader();//ClassLoader.getSystemClassLoader();
SpoonCompiler.java,classpath+=File.pathSeparator+url.getFile();,if (classpath+=File != null ) classpath+=File.pathSeparator+url.getFile();
IntercessionTest.java,CtCodeSnippetStatement stmt = factory.Core().createCodeSnippetStatement();,if (factory != null ) CtCodeSnippetStatement stmt = factory.Core().createCodeSnippetStatement();
IntercessionTest.java,CtCodeSnippetStatement stmt = factory.Core().createCodeSnippetStatement();,if (factory != null ) CtCodeSnippetStatement stmt = factory.Core().createCodeSnippetStatement();
CodeFactory.java,CtFieldAccess<T> fa = factory.Core().createFieldAccess();,if (factory != null ) CtFieldAccess<T> fa = factory.Core().createFieldAccess();
JDTTreeBuilder.java,CtVariableAccess fa = factory.Core().createVariableAccess();,if (factory != null ) CtVariableAccess fa = factory.Core().createVariableAccess();
JDTTreeBuilder.java,CtVariableAccess fa = factory.Core().createVariableAccess();,if (factory != null ) CtVariableAccess fa = factory.Core().createVariableAccess();
SubstitutionVisitor.java,toReplace = fieldAccess.getParent();,if (fieldAccess != null ) toReplace = fieldAccess.getParent();
JDTTreeBuilder.java,CtFieldAccess fa = factory.Core().createFieldAccess();,if (factory != null ) CtFieldAccess fa = factory.Core().createFieldAccess();
JDTTreeBuilder.java,CtFieldAccess fa = factory.Core().createFieldAccess();,if (factory != null ) CtFieldAccess fa = factory.Core().createFieldAccess();
SpoonBuildingManager.java,String filename = file.getAbsolutePath();,if (file != null ) String filename = file.getAbsolutePath();
SnippetCompiler.java,success = builder.build();,if (builder != null ) success = builder.build();
BoundProcessor.java,BoundTestTemplate template = new BoundTestTemplate(b.max());,if (BoundTestTemplate(b != null ) BoundTestTemplate template = new BoundTestTemplate(b.max());
JDTTreeBuilder.java,type = factory.Core().createAnnotationType();,if (factory != null ) type = factory.Core().createAnnotationType();
ElementReplacer.java,Object[] array = collect.toArray();,if (collect != null ) Object[] array = collect.toArray();
SpoonCompiler.java,String srcPath = f.getEnvironment().getSourcePath();,if (f != null ) String srcPath = f.getEnvironment().getSourcePath();
JDTTreeBuilder.java,CtAnnonTypeParameterReference local = factory.Core().createAnnonTypeParameterReference();,if (factory != null ) CtAnnonTypeParameterReference local = factory.Core().createAnnonTypeParameterReference();
ElementReplacer.java,Object[] array = collect.toArray();,if (collect != null ) Object[] array = collect.toArray();
ElementReplacer.java,Object[] array = collect.toArray();,if (collect != null ) Object[] array = collect.toArray();
JDTTreeBuilder.java,type = factory.Core().createAnnotationType();,if (factory != null ) type = factory.Core().createAnnotationType();
TestProcessor.java,CompilationUnit cu=c.getPosition().getCompilationUnit();,if (cu=c != null ) CompilationUnit cu=c.getPosition().getCompilationUnit();
AbstractLauncher.java,success = builder.build();,if (builder != null ) success = builder.build();
ClassFileUtil.java,int length = relativeFileName.length();,if (relativeFileName != null ) int length = relativeFileName.length();
ClassFileUtil.java,String token = tokenizer.nextToken();,if (tokenizer != null ) String token = tokenizer.nextToken();
ClassFileUtil.java,token = tokenizer.nextToken();,if (tokenizer != null ) token = tokenizer.nextToken();
JDTCompiler.java,pack[i] = tmp[i].toCharArray();,if (tmp[i] != null ) pack[i] = tmp[i].toCharArray();
JDTCompiler.java,ClassLoader currentClassLoader = Thread.currentThread().getContextClassLoader();//ClassLoader.getSystemClassLoader();,if (Thread != null ) ClassLoader currentClassLoader = Thread.currentThread().getContextClassLoader();//ClassLoader.getSystemClassLoader();
TreeBuilderRequestor.java,ClassLoader currentClassLoader = ClassLoader.getSystemClassLoader();,if (ClassLoader != null ) ClassLoader currentClassLoader = ClassLoader.getSystemClassLoader();
LtLauncher.java,JSAP jsap = super.defineArgs();,if (super != null ) JSAP jsap = super.defineArgs();
LtLauncher.java,long t = System.currentTimeMillis();,if (System != null ) long t = System.currentTimeMillis();
LtLauncher.java,t = System.currentTimeMillis();,if (System != null ) t = System.currentTimeMillis();
LtLauncher.java,t = System.currentTimeMillis();,if (System != null ) t = System.currentTimeMillis();
SpoonClassLoader.java,this.processing = new RuntimeProcessingManager(this.getFactory());,if (RuntimeProcessingManager(this != null ) this.processing = new RuntimeProcessingManager(this.getFactory());
SpoonClassLoader.java,Builder builder = this.getFactory().getBuilder();,if (this != null ) Builder builder = this.getFactory().getBuilder();
SpoonClassLoader.java,pack[i] = tmp[i].toCharArray();,if (tmp[i] != null ) pack[i] = tmp[i].toCharArray();
SpoonClassLoader.java,String classBody = printer.toString();,if (printer != null ) String classBody = printer.toString();
SpoonClassLoader.java,Builder builder = getFactory().getBuilder();,if (getFactory() != null ) Builder builder = getFactory().getBuilder();
StandardEnvironment.java,SourcePosition sp = element.getPosition();,if (element != null ) SourcePosition sp = element.getPosition();
VisitorPartialEvaluator.java,Object o = literal.getValue();,if (literal != null ) Object o = literal.getValue();
VisitorPartialEvaluator.java,List<CtStatement> lst = forLoop.getForInit();,if (forLoop != null ) List<CtStatement> lst = forLoop.getForInit();
VisitorPartialEvaluator.java,lst = forLoop.getForUpdate();,if (forLoop != null ) lst = forLoop.getForUpdate();
VisitorPartialEvaluator.java,"CtExpression<Boolean> r = evaluate(ifElement, ifElement.getCondition());","if (ifElement != null ) CtExpression<Boolean> r = evaluate(ifElement, ifElement.getCondition());"
VisitorPartialEvaluator.java,"CtExpression<Boolean> r = evaluate(conditional, conditional.getCondition());","if (conditional != null ) CtExpression<Boolean> r = evaluate(conditional, conditional.getCondition());"
SpoonTask.java,String[] srcs = ds.getIncludedFiles();,if (ds != null ) String[] srcs = ds.getIncludedFiles();
SpoonTask.java,String[] srcs = ds.getIncludedFiles();,if (ds != null ) String[] srcs = ds.getIncludedFiles();
SpoonTask.java,String[] srcs = ds.getIncludedFiles();,if (ds != null ) String[] srcs = ds.getIncludedFiles();
SymbolicInstance.java,CtSimpleType<T> type = concreteType.getDeclaration();,if (concreteType != null ) CtSimpleType<T> type = concreteType.getDeclaration();
ClassFactory.java,CtClass<T> c = factory.Core().createClass();,if (factory != null ) CtClass<T> c = factory.Core().createClass();
ClassFactory.java,CtClass<T> c = factory.Core().createClass();,if (factory != null ) CtClass<T> c = factory.Core().createClass();
ConstructorFactory.java,CtConstructor<T> newConstructor = factory.Core().createConstructor();,if (factory != null ) CtConstructor<T> newConstructor = factory.Core().createConstructor();
ConstructorFactory.java,CtConstructor<T> constructor = factory.Core().createConstructor();,if (factory != null ) CtConstructor<T> constructor = factory.Core().createConstructor();
ExecutableFactory.java,CtAnonymousExecutable a = factory.Core().createAnonymousExecutable();,if (factory != null ) CtAnonymousExecutable a = factory.Core().createAnonymousExecutable();
ExecutableFactory.java,CtParameter<T> parameter = factory.Core().createParameter();,if (factory != null ) CtParameter<T> parameter = factory.Core().createParameter();
ExecutableFactory.java,CtParameterReference<T> ref = factory.Core().createParameterReference();,if (factory != null ) CtParameterReference<T> ref = factory.Core().createParameterReference();
InterfaceFactory.java,CtInterface<T> i = factory.Core().createInterface();,if (factory != null ) CtInterface<T> i = factory.Core().createInterface();
InterfaceFactory.java,CtInterface<T> i = factory.Core().createInterface();,if (factory != null ) CtInterface<T> i = factory.Core().createInterface();
MethodFactory.java,CtMethod<T> method = factory.Core().createMethod();,if (factory != null ) CtMethod<T> method = factory.Core().createMethod();
TypeFactory.java,CtTypeReference<T> ref = factory.Core().createTypeReference();,if (factory != null ) CtTypeReference<T> ref = factory.Core().createTypeReference();
TypeFactory.java,CtTypeReference ref = factory.Core().createTypeReference();,if (factory != null ) CtTypeReference ref = factory.Core().createTypeReference();
TypeFactory.java,CtTypeParameter typeParam = factory.Core().createTypeParameter();,if (factory != null ) CtTypeParameter typeParam = factory.Core().createTypeParameter();
TypeFactory.java,CtTypeParameter typeParam = factory.Core().createTypeParameter();,if (factory != null ) CtTypeParameter typeParam = factory.Core().createTypeParameter();
DefaultJavaPrettyPrinter.java,String ret = sbf.toString();,if (sbf != null ) String ret = sbf.toString();
DefaultJavaPrettyPrinter.java,isStatic = reference.isStatic();,if (reference != null ) isStatic = reference.isStatic();
DefaultJavaPrettyPrinter.java,List<CtStatement> st = forLoop.getForInit();,if (forLoop != null ) List<CtStatement> st = forLoop.getForInit();
SnippetCompiler.java,Factory f = st.getFactory();,if (st != null ) Factory f = st.getFactory();
SnippetCompiler.java,CtBlock<Void> body = f.Core().createBlock();,if (f != null ) CtBlock<Void> body = f.Core().createBlock();
SnippetCompiler.java,success = builder.build();,if (builder != null ) success = builder.build();
SnippetCompiler.java,String s = new String(byteArrayOutputStream.toByteArray());,if (String(byteArrayOutputStream != null ) String s = new String(byteArrayOutputStream.toByteArray());
SnippetCompiler.java,Factory f = expr.getFactory();,if (expr != null ) Factory f = expr.getFactory();
SnippetCompiler.java,CtBlock<B> body = f.Core().createBlock();,if (f != null ) CtBlock<B> body = f.Core().createBlock();
SnippetCompiler.java,CtReturn<B> ret = f.Core().createReturn();,if (f != null ) CtReturn<B> ret = f.Core().createReturn();
SpoonModelTree.java,root = cst.getRoot();,if (cst != null ) root = cst.getRoot();
SpoonModelTree.java,current = (DefaultMutableTreeNode) enume.nextElement();,if (enume != null ) current = (DefaultMutableTreeNode) enume.nextElement();
SpoonModelTree.java,enume = node.depthFirstEnumeration();,if (node != null ) enume = node.depthFirstEnumeration();
SpoonModelTree.java,TreePath path = new TreePath(node.getPath());,if (TreePath(node != null ) TreePath path = new TreePath(node.getPath());
XmlProcessorProperties.java,xr = XMLReaderFactory.createXMLReader();,if (XMLReaderFactory != null ) xr = XMLReaderFactory.createXMLReader();
ImportImpl.java,"String str= ""import ""+reference.toString();","if (""+reference != null ) String str= ""import ""+reference.toString();"
CtAnnotationImpl.java,String fieldname = method.getName();,if (method != null ) String fieldname = method.getName();
CtAnnotationImpl.java,ret = Boolean.parseBoolean(ret.toString());,if (Boolean != null ) ret = Boolean.parseBoolean(ret.toString());
CtAnnotationImpl.java,ret = Byte.parseByte(ret.toString());,if (Byte != null ) ret = Byte.parseByte(ret.toString());
CtAnnotationImpl.java,ret = Double.parseDouble(ret.toString());,if (Double != null ) ret = Double.parseDouble(ret.toString());
CtAnnotationImpl.java,ret = Float.parseFloat(ret.toString());,if (Float != null ) ret = Float.parseFloat(ret.toString());
CtAnnotationImpl.java,ret = Integer.parseInt(ret.toString());,if (Integer != null ) ret = Integer.parseInt(ret.toString());
CtAnnotationImpl.java,ret = Long.parseLong(ret.toString());,if (Long != null ) ret = Long.parseLong(ret.toString());
VisitorSymbolicEvaluator.java,BranchingPoint bp = branchingPoints.peek();,if (branchingPoints != null ) BranchingPoint bp = branchingPoints.peek();
VisitorSymbolicEvaluator.java,SymbolicInstance left = evaluate(operator.getLeftHandOperand());,if (evaluate(operator != null ) SymbolicInstance left = evaluate(operator.getLeftHandOperand());
VisitorSymbolicEvaluator.java,SymbolicInstance right = evaluate(operator.getRightHandOperand());,if (evaluate(operator != null ) SymbolicInstance right = evaluate(operator.getRightHandOperand());
VisitorSymbolicEvaluator.java,result = stack.getThis();,if (stack != null ) result = stack.getThis();
VisitorSymbolicEvaluator.java,target = stack.getThis();,if (stack != null ) target = stack.getThis();
VisitorSymbolicEvaluator.java,CtExecutableReference<T> eref = invocation.getExecutable();,if (invocation != null ) CtExecutableReference<T> eref = invocation.getExecutable();
VisitorSymbolicEvaluator.java,"target = heap.getType(this, eref.getDeclaringType());","if (eref != null ) target = heap.getType(this, eref.getDeclaringType());"
VisitorSymbolicEvaluator.java,target = stack.getThis();,if (stack != null ) target = stack.getThis();
VisitorSymbolicEvaluator.java,result = evaluate(returnStatement.getReturnedExpression());,if (evaluate(returnStatement != null ) result = evaluate(returnStatement.getReturnedExpression());
VisitorSymbolicEvaluator.java,Factory f = executable.getFactory();,if (executable != null ) Factory f = executable.getFactory();
CtArrayTypeReferenceImpl.java,Class c = getComponentType().getActualClass();,if (getComponentType() != null ) Class c = getComponentType().getActualClass();
CtExecutableReferenceImpl.java,Annotation[] annotations = super.getAnnotations();,if (super != null ) Annotation[] annotations = super.getAnnotations();
CtFieldReferenceImpl.java,Annotation[] annotations = super.getAnnotations();,if (super != null ) Annotation[] annotations = super.getAnnotations();
CtTypeReferenceImpl.java,Annotation[] a = super.getAnnotations();,if (super != null ) Annotation[] a = super.getAnnotations();
SubstitutionVisitor.java,String name = parameter.getSimpleName();,if (parameter != null ) String name = parameter.getSimpleName();
SubstitutionVisitor.java,String name = element.getSimpleName();,if (element != null ) String name = element.getSimpleName();
SubstitutionVisitor.java,String name = field.getSimpleName();,if (field != null ) String name = field.getSimpleName();
SubstitutionVisitor.java,CtStatement body = foreach.getBody();,if (foreach != null ) CtStatement body = foreach.getBody();
SubstitutionVisitor.java,toReplace = fieldAccess.getParent();,if (fieldAccess != null ) toReplace = fieldAccess.getParent();
SubstitutionVisitor.java,fa = (CtFieldAccess<?>) invocation.getTarget();,if (invocation != null ) fa = (CtFieldAccess<?>) invocation.getTarget();
SubstitutionVisitor.java,CtTypeReference t = (CtTypeReference) lit.getValue();,if (lit != null ) CtTypeReference t = (CtTypeReference) lit.getValue();
SubstitutionVisitor.java,String name = variableAccess.getVariable().getSimpleName();,if (variableAccess != null ) String name = variableAccess.getVariable().getSimpleName();
SubstitutionVisitor.java,CtTypeReference<T> reference = variableAccess.getType();,if (variableAccess != null ) CtTypeReference<T> reference = variableAccess.getType();
SubstitutionVisitor.java,String name = reference.getSimpleName();,if (reference != null ) String name = reference.getSimpleName();
ClassFileUtil.java,int length = relativeFileName.length();,if (relativeFileName != null ) int length = relativeFileName.length();
ClassFileUtil.java,String token = tokenizer.nextToken();,if (tokenizer != null ) String token = tokenizer.nextToken();
ClassFileUtil.java,token = tokenizer.nextToken();,if (tokenizer != null ) token = tokenizer.nextToken();
TemplateMatcher.java,String name = var.getSimpleName();,if (var != null ) String name = var.getSimpleName();
TemplateMatcher.java,ParameterMatcher instance = pm.newInstance();,if (pm != null ) ParameterMatcher instance = pm.newInstance();
TemplateMatcher.java,instance = param.match().newInstance();,if (param != null ) instance = param.match().newInstance();
TemplateMatcher.java,int numOfNonParamsinTeList = teList.size();,if (teList != null ) int numOfNonParamsinTeList = teList.size();
StandardEnvironment.java,SourcePosition sp = element.getPosition();,if (element != null ) SourcePosition sp = element.getPosition();
SpoonTask.java,String[] srcs = ds.getIncludedFiles();,if (ds != null ) String[] srcs = ds.getIncludedFiles();
SpoonTask.java,String[] srcs = ds.getIncludedFiles();,if (ds != null ) String[] srcs = ds.getIncludedFiles();
SpoonTask.java,String[] srcs = ds.getIncludedFiles();,if (ds != null ) String[] srcs = ds.getIncludedFiles();
SymbolicInstance.java,CtSimpleType<T> type = concreteType.getDeclaration();,if (concreteType != null ) CtSimpleType<T> type = concreteType.getDeclaration();
ClassFactory.java,CtClass<T> c = factory.Core().createClass();,if (factory != null ) CtClass<T> c = factory.Core().createClass();
ClassFactory.java,CtClass<T> c = factory.Core().createClass();,if (factory != null ) CtClass<T> c = factory.Core().createClass();
ConstructorFactory.java,CtConstructor<T> newConstructor = factory.Core().createConstructor();,if (factory != null ) CtConstructor<T> newConstructor = factory.Core().createConstructor();
ConstructorFactory.java,CtConstructor<T> constructor = factory.Core().createConstructor();,if (factory != null ) CtConstructor<T> constructor = factory.Core().createConstructor();
ExecutableFactory.java,CtAnonymousExecutable a = factory.Core().createAnonymousExecutable();,if (factory != null ) CtAnonymousExecutable a = factory.Core().createAnonymousExecutable();
ExecutableFactory.java,CtParameter<T> parameter = factory.Core().createParameter();,if (factory != null ) CtParameter<T> parameter = factory.Core().createParameter();
ExecutableFactory.java,CtParameterReference<T> ref = factory.Core().createParameterReference();,if (factory != null ) CtParameterReference<T> ref = factory.Core().createParameterReference();
InterfaceFactory.java,CtInterface<T> i = factory.Core().createInterface();,if (factory != null ) CtInterface<T> i = factory.Core().createInterface();
InterfaceFactory.java,CtInterface<T> i = factory.Core().createInterface();,if (factory != null ) CtInterface<T> i = factory.Core().createInterface();
MethodFactory.java,CtMethod<T> method = factory.Core().createMethod();,if (factory != null ) CtMethod<T> method = factory.Core().createMethod();
TypeFactory.java,CtTypeReference<T> ref = factory.Core().createTypeReference();,if (factory != null ) CtTypeReference<T> ref = factory.Core().createTypeReference();
TypeFactory.java,CtTypeReference ref = factory.Core().createTypeReference();,if (factory != null ) CtTypeReference ref = factory.Core().createTypeReference();
TypeFactory.java,CtTypeParameter typeParam = factory.Core().createTypeParameter();,if (factory != null ) CtTypeParameter typeParam = factory.Core().createTypeParameter();
TypeFactory.java,CtTypeParameter typeParam = factory.Core().createTypeParameter();,if (factory != null ) CtTypeParameter typeParam = factory.Core().createTypeParameter();
DefaultJavaPrettyPrinter.java,String ret = sbf.toString();,if (sbf != null ) String ret = sbf.toString();
DefaultJavaPrettyPrinter.java,isStatic = reference.isStatic();,if (reference != null ) isStatic = reference.isStatic();
DefaultJavaPrettyPrinter.java,List<CtStatement> st = forLoop.getForInit();,if (forLoop != null ) List<CtStatement> st = forLoop.getForInit();
SnippetCompiler.java,Factory f = st.getFactory();,if (st != null ) Factory f = st.getFactory();
SnippetCompiler.java,CtBlock<Void> body = f.Core().createBlock();,if (f != null ) CtBlock<Void> body = f.Core().createBlock();
SnippetCompiler.java,success = builder.build();,if (builder != null ) success = builder.build();
SnippetCompiler.java,String s = new String(byteArrayOutputStream.toByteArray());,if (String(byteArrayOutputStream != null ) String s = new String(byteArrayOutputStream.toByteArray());
SnippetCompiler.java,Factory f = expr.getFactory();,if (expr != null ) Factory f = expr.getFactory();
SnippetCompiler.java,CtBlock<B> body = f.Core().createBlock();,if (f != null ) CtBlock<B> body = f.Core().createBlock();
SnippetCompiler.java,CtReturn<B> ret = f.Core().createReturn();,if (f != null ) CtReturn<B> ret = f.Core().createReturn();
SpoonModelTree.java,this.root = cst.getRoot();,if (cst != null ) this.root = cst.getRoot();
SpoonModelTree.java,current = (DefaultMutableTreeNode) enume.nextElement();,if (enume != null ) current = (DefaultMutableTreeNode) enume.nextElement();
SpoonModelTree.java,enume = node.depthFirstEnumeration();,if (node != null ) enume = node.depthFirstEnumeration();
SpoonModelTree.java,TreePath path = new TreePath(node.getPath());,if (TreePath(node != null ) TreePath path = new TreePath(node.getPath());
XmlProcessorProperties.java,xr = XMLReaderFactory.createXMLReader();,if (XMLReaderFactory != null ) xr = XMLReaderFactory.createXMLReader();
ImportImpl.java,"String str= ""import ""+reference.toString();","if (""+reference != null ) String str= ""import ""+reference.toString();"
CtAnnotationImpl.java,String fieldname = method.getName();,if (method != null ) String fieldname = method.getName();
CtAnnotationImpl.java,ret = Boolean.parseBoolean(ret.toString());,if (Boolean != null ) ret = Boolean.parseBoolean(ret.toString());
CtAnnotationImpl.java,ret = Byte.parseByte(ret.toString());,if (Byte != null ) ret = Byte.parseByte(ret.toString());
CtAnnotationImpl.java,ret = Double.parseDouble(ret.toString());,if (Double != null ) ret = Double.parseDouble(ret.toString());
CtAnnotationImpl.java,ret = Float.parseFloat(ret.toString());,if (Float != null ) ret = Float.parseFloat(ret.toString());
CtAnnotationImpl.java,ret = Integer.parseInt(ret.toString());,if (Integer != null ) ret = Integer.parseInt(ret.toString());
CtAnnotationImpl.java,ret = Long.parseLong(ret.toString());,if (Long != null ) ret = Long.parseLong(ret.toString());
VisitorPartialEvaluator.java,Object o = literal.getValue();,if (literal != null ) Object o = literal.getValue();
VisitorPartialEvaluator.java,List<CtStatement> lst = forLoop.getForInit();,if (forLoop != null ) List<CtStatement> lst = forLoop.getForInit();
VisitorPartialEvaluator.java,lst = forLoop.getForUpdate();,if (forLoop != null ) lst = forLoop.getForUpdate();
VisitorPartialEvaluator.java,"CtExpression<Boolean> r = evaluate(ifElement, ifElement.getCondition());","if (ifElement != null ) CtExpression<Boolean> r = evaluate(ifElement, ifElement.getCondition());"
VisitorPartialEvaluator.java,"CtExpression<Boolean> r = evaluate(conditional, conditional.getCondition());","if (conditional != null ) CtExpression<Boolean> r = evaluate(conditional, conditional.getCondition());"
VisitorSymbolicEvaluator.java,BranchingPoint bp = branchingPoints.peek();,if (branchingPoints != null ) BranchingPoint bp = branchingPoints.peek();
VisitorSymbolicEvaluator.java,SymbolicInstance left = evaluate(operator.getLeftHandOperand());,if (evaluate(operator != null ) SymbolicInstance left = evaluate(operator.getLeftHandOperand());
VisitorSymbolicEvaluator.java,SymbolicInstance right = evaluate(operator.getRightHandOperand());,if (evaluate(operator != null ) SymbolicInstance right = evaluate(operator.getRightHandOperand());
VisitorSymbolicEvaluator.java,result = stack.getThis();,if (stack != null ) result = stack.getThis();
VisitorSymbolicEvaluator.java,target = stack.getThis();,if (stack != null ) target = stack.getThis();
VisitorSymbolicEvaluator.java,CtExecutableReference<T> eref = invocation.getExecutable();,if (invocation != null ) CtExecutableReference<T> eref = invocation.getExecutable();
VisitorSymbolicEvaluator.java,"target = heap.getType(this, eref.getDeclaringType());","if (eref != null ) target = heap.getType(this, eref.getDeclaringType());"
VisitorSymbolicEvaluator.java,target = stack.getThis();,if (stack != null ) target = stack.getThis();
VisitorSymbolicEvaluator.java,result = evaluate(returnStatement.getReturnedExpression());,if (evaluate(returnStatement != null ) result = evaluate(returnStatement.getReturnedExpression());
VisitorSymbolicEvaluator.java,Factory f = executable.getFactory();,if (executable != null ) Factory f = executable.getFactory();
CtArrayTypeReferenceImpl.java,Class c = getComponentType().getActualClass();,if (getComponentType() != null ) Class c = getComponentType().getActualClass();
CtExecutableReferenceImpl.java,Annotation[] annotations = super.getAnnotations();,if (super != null ) Annotation[] annotations = super.getAnnotations();
CtFieldReferenceImpl.java,Annotation[] annotations = super.getAnnotations();,if (super != null ) Annotation[] annotations = super.getAnnotations();
CtTypeReferenceImpl.java,String simpleN = this.getSimpleName();,if (this != null ) String simpleN = this.getSimpleName();
CtTypeReferenceImpl.java,Annotation[] a = super.getAnnotations();,if (super != null ) Annotation[] a = super.getAnnotations();
SubstitutionVisitor.java,String name = parameter.getSimpleName();,if (parameter != null ) String name = parameter.getSimpleName();
SubstitutionVisitor.java,String name = element.getSimpleName();,if (element != null ) String name = element.getSimpleName();
SubstitutionVisitor.java,String name = field.getSimpleName();,if (field != null ) String name = field.getSimpleName();
SubstitutionVisitor.java,CtStatement body = foreach.getBody();,if (foreach != null ) CtStatement body = foreach.getBody();
SubstitutionVisitor.java,toReplace = fieldAccess.getParent();,if (fieldAccess != null ) toReplace = fieldAccess.getParent();
SubstitutionVisitor.java,fa = (CtFieldAccess<?>) invocation.getTarget();,if (invocation != null ) fa = (CtFieldAccess<?>) invocation.getTarget();
SubstitutionVisitor.java,CtTypeReference t = (CtTypeReference) lit.getValue();,if (lit != null ) CtTypeReference t = (CtTypeReference) lit.getValue();
SubstitutionVisitor.java,String name = variableAccess.getVariable().getSimpleName();,if (variableAccess != null ) String name = variableAccess.getVariable().getSimpleName();
SubstitutionVisitor.java,CtTypeReference<T> reference = variableAccess.getType();,if (variableAccess != null ) CtTypeReference<T> reference = variableAccess.getType();
SubstitutionVisitor.java,String name = reference.getSimpleName();,if (reference != null ) String name = reference.getSimpleName();
ClassFileUtil.java,int length = relativeFileName.length();,if (relativeFileName != null ) int length = relativeFileName.length();
ClassFileUtil.java,String token = tokenizer.nextToken();,if (tokenizer != null ) String token = tokenizer.nextToken();
ClassFileUtil.java,token = tokenizer.nextToken();,if (tokenizer != null ) token = tokenizer.nextToken();
TemplateMatcher.java,String name = var.getSimpleName();,if (var != null ) String name = var.getSimpleName();
TemplateMatcher.java,ParameterMatcher instance = (ParameterMatcher) pm.newInstance();,if (pm != null ) ParameterMatcher instance = (ParameterMatcher) pm.newInstance();
TemplateMatcher.java,instance = param.match().newInstance();,if (param != null ) instance = param.match().newInstance();
TemplateMatcher.java,int numOfNonParamsinTeList = teList.size();,if (teList != null ) int numOfNonParamsinTeList = teList.size();
JDTTreeBuilder.java,CtAnnotation a = factory.Core().createAnnotation();,if (factory != null ) CtAnnotation a = factory.Core().createAnnotation();
EnumFactory.java,CtEnum e = factory.Core().createEnum();,if (factory != null ) CtEnum e = factory.Core().createEnum();
DefaultJavaPrettyPrinter.java,CtNewClass nc = (CtNewClass) f.getDefaultExpression();,if (f != null ) CtNewClass nc = (CtNewClass) f.getDefaultExpression();
DefaultJavaPrettyPrinter.java,CtTypeReference ref = reference.getDeclaringType();,if (reference != null ) CtTypeReference ref = reference.getDeclaringType();
JDTTreeBuilder.java,CtBinaryOperator op = factory.Core().createBinaryOperator();,if (factory != null ) CtBinaryOperator op = factory.Core().createBinaryOperator();
JDTTreeBuilder.java,type = factory.Core().createAnnotationType();,if (factory != null ) type = factory.Core().createAnnotationType();
JDTTreeBuilder.java,CtBinaryOperator op = factory.Core().createBinaryOperator();,if (factory != null ) CtBinaryOperator op = factory.Core().createBinaryOperator();
JDTTreeBuilder.java,CtNewArray array = factory.Core().createNewArray();,if (factory != null ) CtNewArray array = factory.Core().createNewArray();
JDTTreeBuilder.java,CtArrayAccess a = factory.Core().createArrayAccess();,if (factory != null ) CtArrayAccess a = factory.Core().createArrayAccess();
JDTTreeBuilder.java,CtLiteral<CtTypeReference> l = factory.Core().createLiteral();,if (factory != null ) CtLiteral<CtTypeReference> l = factory.Core().createLiteral();
JDTTreeBuilder.java,CtAssert a = factory.Core().createAssert();,if (factory != null ) CtAssert a = factory.Core().createAssert();
JDTTreeBuilder.java,CtAssignment assign = factory.Core().createAssignment();,if (factory != null ) CtAssignment assign = factory.Core().createAssignment();
JDTTreeBuilder.java,CtCase c = factory.Core().createCase();,if (factory != null ) CtCase c = factory.Core().createCase();
JDTTreeBuilder.java,CtOperatorAssignment a = factory.Core().createOperatorAssignment();,if (factory != null ) CtOperatorAssignment a = factory.Core().createOperatorAssignment();
JDTTreeBuilder.java,CtConditional c = factory.Core().createConditional();,if (factory != null ) CtConditional c = factory.Core().createConditional();
JDTTreeBuilder.java,CtBinaryOperator op = factory.Core().createBinaryOperator();,if (factory != null ) CtBinaryOperator op = factory.Core().createBinaryOperator();
JDTTreeBuilder.java,CtBinaryOperator op = factory.Core().createBinaryOperator();,if (factory != null ) CtBinaryOperator op = factory.Core().createBinaryOperator();
JDTTreeBuilder.java,CtBinaryOperator op = factory.Core().createBinaryOperator();,if (factory != null ) CtBinaryOperator op = factory.Core().createBinaryOperator();
JDTTreeBuilder.java,CtLiteral<CtTypeReference> l = factory.Core().createLiteral();,if (factory != null ) CtLiteral<CtTypeReference> l = factory.Core().createLiteral();
JDTTreeBuilder.java,CtLiteral<CtTypeReference> l = factory.Core().createLiteral();,if (factory != null ) CtLiteral<CtTypeReference> l = factory.Core().createLiteral();
JDTTreeBuilder.java,CtLiteral<CtTypeReference> l = factory.Core().createLiteral();,if (factory != null ) CtLiteral<CtTypeReference> l = factory.Core().createLiteral();
JDTTreeBuilder.java,CtUnaryOperator op = factory.Core().createUnaryOperator();,if (factory != null ) CtUnaryOperator op = factory.Core().createUnaryOperator();
JDTTreeBuilder.java,CtUnaryOperator op = factory.Core().createUnaryOperator();,if (factory != null ) CtUnaryOperator op = factory.Core().createUnaryOperator();
JDTTreeBuilder.java,CtLiteral<CtTypeReference> l = factory.Core().createLiteral();,if (factory != null ) CtLiteral<CtTypeReference> l = factory.Core().createLiteral();
JDTTreeBuilder.java,CtReturn ret = factory.Core().createReturn();,if (factory != null ) CtReturn ret = factory.Core().createReturn();
JDTTreeBuilder.java,CtLiteral<CtTypeReference> l = factory.Core().createLiteral();,if (factory != null ) CtLiteral<CtTypeReference> l = factory.Core().createLiteral();
JDTTreeBuilder.java,CtLiteral<CtTypeReference> l = factory.Core().createLiteral();,if (factory != null ) CtLiteral<CtTypeReference> l = factory.Core().createLiteral();
JDTTreeBuilder.java,CtBinaryOperator op = factory.Core().createBinaryOperator();,if (factory != null ) CtBinaryOperator op = factory.Core().createBinaryOperator();
JDTTreeBuilder.java,CtSwitch s = factory.Core().createSwitch();,if (factory != null ) CtSwitch s = factory.Core().createSwitch();
JDTTreeBuilder.java,CtUnaryOperator op = factory.Core().createUnaryOperator();,if (factory != null ) CtUnaryOperator op = factory.Core().createUnaryOperator();
CtAnnotationImpl.java,CtSimpleType t = getAnnotationType().getDeclaration();,if (getAnnotationType() != null ) CtSimpleType t = getAnnotationType().getDeclaration();
CtAnnotationImpl.java,Class c = getAnnotationType().getActualClass();,if (getAnnotationType() != null ) Class c = getAnnotationType().getActualClass();
CtAnnotationImpl.java,Class c = getAnnotationType().getActualClass();,if (getAnnotationType() != null ) Class c = getAnnotationType().getActualClass();
CtClassImpl.java,CtSimpleType sup = getSuperclass().getDeclaration();,if (getSuperclass() != null ) CtSimpleType sup = getSuperclass().getDeclaration();
VisitorPartialEvaluator.java,CtVariable v = variableAccess.getVariable().getDeclaration();,if (variableAccess != null ) CtVariable v = variableAccess.getVariable().getDeclaration();
VisitorSymbolicEvaluator.java,SymbolicInstance res = evaluate(assignment.getAssignment());,if (evaluate(assignment != null ) SymbolicInstance res = evaluate(assignment.getAssignment());
VisitorSymbolicEvaluator.java,"SymbolicInstance type = heap.getType(this, fieldAccess.getType());","if (fieldAccess != null ) SymbolicInstance type = heap.getType(this, fieldAccess.getType());"
VisitorSymbolicEvaluator.java,SymbolicInstance result=evaluate(ifElement.getCondition());,if (result=evaluate(ifElement != null ) SymbolicInstance result=evaluate(ifElement.getCondition());
TemplateMatcher.java,CtVariable teVar = (CtVariable) iter.next();,if (iter != null ) CtVariable teVar = (CtVariable) iter.next();
CompilationUnitFactory.java,cu =  factory.Core().createVirtualCompilationUnit();,if (factory != null ) cu =  factory.Core().createVirtualCompilationUnit();
CompilationUnitImpl.java,String name=getFile().getName();,if (name=getFile() != null ) String name=getFile().getName();
AbstractLauncher.java,success=builder.build();,if (success=builder != null ) success=builder.build();
AbstractLauncher.java,long t=System.currentTimeMillis();,if (t=System != null ) long t=System.currentTimeMillis();
AbstractLauncher.java,t=System.currentTimeMillis();,if (t=System != null ) t=System.currentTimeMillis();
AbstractLauncher.java,t=System.currentTimeMillis();,if (t=System != null ) t=System.currentTimeMillis();
AbstractLauncher.java,t=System.currentTimeMillis();,if (t=System != null ) t=System.currentTimeMillis();
SnippetCompiler.java,Factory f = st.getFactory();,if (st != null ) Factory f = st.getFactory();
SnippetCompiler.java,CtBlock<T> body = f.Core().createBlock();,if (f != null ) CtBlock<T> body = f.Core().createBlock();
SnippetCompiler.java,CtReturn<T> ret = f.Core().createReturn();,if (f != null ) CtReturn<T> ret = f.Core().createReturn();
JDTCompiler.java,INameEnvironment environment = f.getEnvironment().getLibraries();,if (f != null ) INameEnvironment environment = f.getEnvironment().getLibraries();
SnippetCompiler.java,Set<ModifierKind> backup = new TreeSet<ModifierKind>(workCopy.getModifiers());,if (TreeSet<ModifierKind>(workCopy != null ) Set<ModifierKind> backup = new TreeSet<ModifierKind>(workCopy.getModifiers());
SpoonBuildingManager.java,long t=System.currentTimeMillis();,if (t=System != null ) long t=System.currentTimeMillis();
SpoonBuildingManager.java,"srcSuccess=compiler.compileSrc(factory, source.getAllJavaFiles());","if (source != null ) srcSuccess=compiler.compileSrc(factory, source.getAllJavaFiles());"
SpoonBuildingManager.java,t=System.currentTimeMillis();,if (t=System != null ) t=System.currentTimeMillis();
SpoonBuildingManager.java,"templateSuccess=compiler.compileTemplate(factory, templates.getAllJavaFiles());","if (templates != null ) templateSuccess=compiler.compileTemplate(factory, templates.getAllJavaFiles());"
VisitorSymbolicEvaluator.java,CtSimpleType<T> c = newClass.getType().getDeclaration();,if (newClass != null ) CtSimpleType<T> c = newClass.getType().getDeclaration();
LtLauncher.java,long t = System.currentTimeMillis();,if (System != null ) long t = System.currentTimeMillis();
LtLauncher.java,t = System.currentTimeMillis();,if (System != null ) t = System.currentTimeMillis();
LtLauncher.java,t = System.currentTimeMillis();,if (System != null ) t = System.currentTimeMillis();
