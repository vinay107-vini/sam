Filename,Buggy/Deleted,Fixed/Added
SourceElement.java,String descriptionKey = typeElement.getDescriptionKey();,if (typeElement != null ) String descriptionKey = typeElement.getDescriptionKey();
SourceElement.java,boolean skipGeneratingParseOrExitMethod = typeElement.isSkipGeneratingParseOrExitMethod();,if (typeElement != null ) boolean skipGeneratingParseOrExitMethod = typeElement.isSkipGeneratingParseOrExitMethod();
SourceElement.java,List<String> description = List.of(typeElement.getDescription());,if (List != null ) List<String> description = List.of(typeElement.getDescription());
SourceElement.java,boolean superCommand = typeElement.isSuperCommand();,if (typeElement != null ) boolean superCommand = typeElement.isSuperCommand();
ConverterStore.java,StringConverter<T> newInstance = converterSupplier.get();,if (converterSupplier != null ) StringConverter<T> newInstance = converterSupplier.get();
ImplClass.java,this.sourceElement = commandRepresentation.sourceElement();,if (commandRepresentation != null ) this.sourceElement = commandRepresentation.sourceElement();
ImplClass.java,this.allMappings = commandRepresentation.allMappings();,if (commandRepresentation != null ) this.allMappings = commandRepresentation.allMappings();
ExtractMethod.java,ParameterSpec parser = parserTypeFactory.get().asParam();,if (parserTypeFactory != null ) ParameterSpec parser = parserTypeFactory.get().asParam();
ExtractMethod.java,ParameterSpec parser = parserTypeFactory.get().asParam();,if (parserTypeFactory != null ) ParameterSpec parser = parserTypeFactory.get().asParam();
ExtractMethod.java,ParameterSpec parser = parserTypeFactory.get().asParam();,if (parserTypeFactory != null ) ParameterSpec parser = parserTypeFactory.get().asParam();
ParseMethod.java,ParameterSpec parser = parserType.asParam();,if (parserType != null ) ParameterSpec parser = parserType.asParam();
ExtractMethod.java,String name = mapping.sourceMethod().methodName();,if (mapping != null ) String name = mapping.sourceMethod().methodName();
ImplClass.java,MethodSpec.Builder spec = MethodSpec.constructorBuilder();,if (MethodSpec != null ) MethodSpec.Builder spec = MethodSpec.constructorBuilder();
ImplClass.java,String fieldName = mapping.sourceMethod().methodName();,if (mapping != null ) String fieldName = mapping.sourceMethod().methodName();
FileConverter.java,File file = Paths.get(token).toFile();,if (Paths != null ) File file = Paths.get(token).toFile();
StandardConverters.java,String canonicalName = clazz.getCanonicalName();,if (clazz != null ) String canonicalName = clazz.getCanonicalName();
StandardConverters.java,StringConverter<T> newInstance = converterSupplier.get();,if (converterSupplier != null ) StringConverter<T> newInstance = converterSupplier.get();
StandardConverters.java,String canonicalName = clazz.getCanonicalName();,if (clazz != null ) String canonicalName = clazz.getCanonicalName();
StandardConverters.java,StringConverter<T> newInstance = converterSupplier.get();,if (converterSupplier != null ) StringConverter<T> newInstance = converterSupplier.get();
StandardConverters.java,StringConverter<T> result = (StringConverter<T>) stringConverter.get();,if (stringConverter != null ) StringConverter<T> result = (StringConverter<T>) stringConverter.get();
ConverterType.java,TypeMirror type = converter.asType();,if (converter != null ) TypeMirror type = converter.asType();
Util.java,Element enclosingElement = result.getLast().getEnclosingElement();,if (result != null ) Element enclosingElement = result.getLast().getEnclosingElement();
AnnotatedMethodsFactory.java,Set<String> enumNames = new HashSet<>(methods.size());,if (HashSet<>(methods != null ) Set<String> enumNames = new HashSet<>(methods.size());
AnnotatedMethodsFactory.java,String enumName = enumNames.enumNameFor(sourceMethod.simpleName());,if (enumNames != null ) String enumName = enumNames.enumNameFor(sourceMethod.simpleName());
AnnotatedMethodsFactory.java,ExecutableElement method = sourceMethod.method();,if (sourceMethod != null ) ExecutableElement method = sourceMethod.method();
ParameterValidator.java,int index = sourceParameter.index();,if (sourceParameter != null ) int index = sourceParameter.index();
Executable.java,String canonicalName = annotation.annotationType().getCanonicalName();,if (annotation != null ) String canonicalName = annotation.annotationType().getCanonicalName();
Suppliers.java,value = delegate.get();,if (delegate != null ) value = delegate.get();
Suppliers.java,value = delegate.getAsInt();,if (delegate != null ) value = delegate.getAsInt();
MoreTypes.java,TypeMirror nextMirrorA = aIterator.next();,if (aIterator != null ) TypeMirror nextMirrorA = aIterator.next();
MoreTypes.java,TypeMirror nextMirrorB = bIterator.next();,if (bIterator != null ) TypeMirror nextMirrorB = bIterator.next();
MoreTypes.java,int nArguments = aArguments.size();,if (aArguments != null ) int nArguments = aArguments.size();
MoreTypes.java,TypeParameterElement aElement = (TypeParameterElement) a.asElement();,if (a != null ) TypeParameterElement aElement = (TypeParameterElement) a.asElement();
MoreTypes.java,TypeParameterElement bElement = (TypeParameterElement) b.asElement();,if (b != null ) TypeParameterElement bElement = (TypeParameterElement) b.asElement();
MoreTypes.java,List<TypeMirror> noArguments = List.of();,if (List != null ) List<TypeMirror> noArguments = List.of();
MoreTypes.java,result += t.getKind().hashCode();,if (t != null ) result += t.getKind().hashCode();
MoreTypes.java,result += t.asElement().hashCode();,if (t != null ) result += t.asElement().hashCode();
MoreTypes.java,TypeParameterElement element = (TypeParameterElement) t.asElement();,if (t != null ) TypeParameterElement element = (TypeParameterElement) t.asElement();
MoreTypes.java,TypeElement typeElement = MoreElements.asType(type.asElement());,if (MoreElements != null ) TypeElement typeElement = MoreElements.asType(type.asElement());
GeneratedTypes.java,this.sourceElement = commandRepresentation.sourceElement();,if (commandRepresentation != null ) this.sourceElement = commandRepresentation.sourceElement();
GeneratedTypes.java,this.generatedClass = commandRepresentation.sourceElement().generatedClass();,if (commandRepresentation != null ) this.generatedClass = commandRepresentation.sourceElement().generatedClass();
OptEnum.java,this.options = commandRepresentation.namedOptions();,if (commandRepresentation != null ) this.options = commandRepresentation.namedOptions();
OptEnum.java,this.sourceElement = commandRepresentation.sourceElement();,if (commandRepresentation != null ) this.sourceElement = commandRepresentation.sourceElement();
OptEnum.java,TypeSpec.Builder spec = TypeSpec.enumBuilder(sourceElement.optionEnumType());,if (TypeSpec != null ) TypeSpec.Builder spec = TypeSpec.enumBuilder(sourceElement.optionEnumType());
ParserClass.java,this.sourceElement = commandRepresentation.sourceElement();,if (commandRepresentation != null ) this.sourceElement = commandRepresentation.sourceElement();
ParserClass.java,this.namedOptions = commandRepresentation.namedOptions();,if (commandRepresentation != null ) this.namedOptions = commandRepresentation.namedOptions();
ParserClass.java,this.optionNames = commandRepresentation.optionNames();,if (commandRepresentation != null ) this.optionNames = commandRepresentation.optionNames();
ParserClass.java,TypeSpec.Builder spec = TypeSpec.classBuilder(sourceElement.generatedClass());,if (TypeSpec != null ) TypeSpec.Builder spec = TypeSpec.classBuilder(sourceElement.generatedClass());
HarvestMethod.java,this.sourceElement = commandRepresentation.sourceElement();,if (commandRepresentation != null ) this.sourceElement = commandRepresentation.sourceElement();
HarvestMethod.java,this.namedOptions = commandRepresentation.namedOptions();,if (commandRepresentation != null ) this.namedOptions = commandRepresentation.namedOptions();
HarvestMethod.java,this.positionalParameters = commandRepresentation.positionalParameters();,if (commandRepresentation != null ) this.positionalParameters = commandRepresentation.positionalParameters();
HarvestMethod.java,this.repeatablePositionalParameters = commandRepresentation.repeatablePositionalParameters();,if (commandRepresentation != null ) this.repeatablePositionalParameters = commandRepresentation.repeatablePositionalParameters();
HarvestMethod.java,ParameterSpec parser = parserTypeFactory.define().asParam();,if (parserTypeFactory != null ) ParameterSpec parser = parserTypeFactory.define().asParam();
HarvestMethod.java,ParameterSpec parser = parserTypeFactory.define().asParam();,if (parserTypeFactory != null ) ParameterSpec parser = parserTypeFactory.define().asParam();
HarvestMethod.java,ParameterSpec parser = parserTypeFactory.define().asParam();,if (parserTypeFactory != null ) ParameterSpec parser = parserTypeFactory.define().asParam();
OptionNamesMethod.java,this.namedOptions = commandRepresentation.namedOptions();,if (commandRepresentation != null ) this.namedOptions = commandRepresentation.namedOptions();
OptionNamesMethod.java,this.sourceElement = commandRepresentation.sourceElement();,if (commandRepresentation != null ) this.sourceElement = commandRepresentation.sourceElement();
OptionNamesMethod.java,this.optionNames = commandRepresentation.optionNames();,if (commandRepresentation != null ) this.optionNames = commandRepresentation.optionNames();
OptionStatesMethod.java,this.namedOptions = commandRepresentation.namedOptions();,if (commandRepresentation != null ) this.namedOptions = commandRepresentation.namedOptions();
OptionStatesMethod.java,this.sourceElement = commandRepresentation.sourceElement();,if (commandRepresentation != null ) this.sourceElement = commandRepresentation.sourceElement();
OptionStatesMethod.java,this.optType = commandRepresentation.optType();,if (commandRepresentation != null ) this.optType = commandRepresentation.optType();
ParserTypeFactory.java,this.sourceElement = commandRepresentation.sourceElement();,if (commandRepresentation != null ) this.sourceElement = commandRepresentation.sourceElement();
ParserTypeFactory.java,this.positionalParameters = commandRepresentation.positionalParameters();,if (commandRepresentation != null ) this.positionalParameters = commandRepresentation.positionalParameters();
ParserTypeFactory.java,this.repeatablePositionalParameters = commandRepresentation.repeatablePositionalParameters();,if (commandRepresentation != null ) this.repeatablePositionalParameters = commandRepresentation.repeatablePositionalParameters();
ParserTypeFactory.java,this.namedOptions = commandRepresentation.namedOptions();,if (commandRepresentation != null ) this.namedOptions = commandRepresentation.namedOptions();
ParserTypeFactory.java,this.optionNames = commandRepresentation.optionNames();,if (commandRepresentation != null ) this.optionNames = commandRepresentation.optionNames();
ParserTypeFactory.java,this.optType = commandRepresentation.optType();,if (commandRepresentation != null ) this.optType = commandRepresentation.optType();
ParserTypeFactory.java,int numParams = positionalParameters.size();,if (positionalParameters != null ) int numParams = positionalParameters.size();
ParseMethod.java,this.sourceElement = commandRepresentation.sourceElement();,if (commandRepresentation != null ) this.sourceElement = commandRepresentation.sourceElement();
ParseMethod.java,ParserType parserType = parserTypeFactory.get();,if (parserTypeFactory != null ) ParserType parserType = parserTypeFactory.get();
CreateModelMethod.java,this.sourceElement = commandRepresentation.sourceElement();,if (commandRepresentation != null ) this.sourceElement = commandRepresentation.sourceElement();
CreateModelMethod.java,this.namedOptions = commandRepresentation.namedOptions();,if (commandRepresentation != null ) this.namedOptions = commandRepresentation.namedOptions();
CreateModelMethod.java,this.positionalParameters = commandRepresentation.positionalParameters();,if (commandRepresentation != null ) this.positionalParameters = commandRepresentation.positionalParameters();
CreateModelMethod.java,this.repeatablePositionalParameters = commandRepresentation.repeatablePositionalParameters();,if (commandRepresentation != null ) this.repeatablePositionalParameters = commandRepresentation.repeatablePositionalParameters();
HarvestMethod.java,ParameterSpec parser = parserTypeFactory.define().asParam();,if (parserTypeFactory != null ) ParameterSpec parser = parserTypeFactory.define().asParam();
GeneratedTypes.java,this.generatedClass = sourceElement.generatedClass();,if (sourceElement != null ) this.generatedClass = sourceElement.generatedClass();
SuperficialValidation.java,TypeMirror expectedType = valueEntry.getKey().getReturnType();,if (valueEntry != null ) TypeMirror expectedType = valueEntry.getKey().getReturnType();
SuperficialValidation.java,TypeMirror componentType = MoreTypes.asArray(expectedType).getComponentType();,if (MoreTypes != null ) TypeMirror componentType = MoreTypes.asArray(expectedType).getComponentType();
AnnotatedMethodsFactory.java,String simpleName = method.simpleName().toString();,if (method != null ) String simpleName = method.simpleName().toString();
BaseAnnotationProcessor.java,this.elements = processingEnv.getElementUtils();,if (processingEnv != null ) this.elements = processingEnv.getElementUtils();
BasicAnnotationProcessor.java,this.elements = processingEnv.getElementUtils();,if (processingEnv != null ) this.elements = processingEnv.getElementUtils();
BasicAnnotationProcessor.java,this.messager = processingEnv.getMessager();,if (processingEnv != null ) this.messager = processingEnv.getMessager();
BasicAnnotationProcessor.java,"Set<Element> prevRoundElements = deferredElementsByAnnotation.getOrDefault(annotationType, Set.of());","if (Set != null ) Set<Element> prevRoundElements = deferredElementsByAnnotation.getOrDefault(annotationType, Set.of());"
BasicAnnotationProcessor.java,this.name = name.toString();,if (name != null ) this.name = name.toString();
BasicAnnotationProcessor.java,this.messager = processingEnv.getMessager();,if (processingEnv != null ) this.messager = processingEnv.getMessager();
BasicAnnotationProcessor.java,this.name = name.toString();,if (name != null ) this.name = name.toString();
AnnotatedMethodsBuilder.java,Set<String> names = new HashSet<>(methods.size());,if (HashSet<>(methods != null ) Set<String> names = new HashSet<>(methods.size());
AnnotatedMethodsBuilder.java,String enumName = createEnumName(method.simpleName().toString());,if (createEnumName(method != null ) String enumName = createEnumName(method.simpleName().toString());
AnnotatedMethodsBuilder.java,Set<String> names = new HashSet<>(methods.size());,if (HashSet<>(methods != null ) Set<String> names = new HashSet<>(methods.size());
AnnotatedMethodsBuilder.java,enumName = enumName.makeLonger();,if (enumName != null ) enumName = enumName.makeLonger();
OptEnum.java,EnumName enumName = option.enumName();,if (option != null ) EnumName enumName = option.enumName();
OptEnum.java,String enumConstant = enumName.enumConstant();,if (enumName != null ) String enumConstant = enumName.enumConstant();
OptionNamesMethod.java,String enumConstant = namedOption.enumName().enumConstant();,if (namedOption != null ) String enumConstant = namedOption.enumName().enumConstant();
OptionStatesMethod.java,String enumConstant = namedOption.enumName().enumConstant();,if (namedOption != null ) String enumConstant = namedOption.enumName().enumConstant();
ParserTypeFactory.java,FieldSpec optionNames = commonFields.optionNames();,if (commonFields != null ) FieldSpec optionNames = commonFields.optionNames();
ParserTypeFactory.java,MethodSpec optionStates = optionStatesMethod.get();,if (optionStatesMethod != null ) MethodSpec optionStates = optionStatesMethod.get();
SubParser.java,String token = it.next();,if (it != null ) String token = it.next();
SuperParser.java,String token = it.next();,if (it != null ) String token = it.next();
ParseMethod.java,FieldSpec optionNames = commonFields.optionNames();,if (commonFields != null ) FieldSpec optionNames = commonFields.optionNames();
ParseMethod.java,MethodSpec optionStates = optionStatesMethod.get();,if (optionStatesMethod != null ) MethodSpec optionStates = optionStatesMethod.get();
ParseMethod.java,int numParams = positionalParameters.size();,if (positionalParameters != null ) int numParams = positionalParameters.size();
Mapping.java,String fieldName = match.sourceMethod().methodName();,if (match != null ) String fieldName = match.sourceMethod().methodName();
AutoOrEnumMapper.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
AutoOrEnumMapper.java,TypeMirror type = baseType.asType();,if (baseType != null ) TypeMirror type = baseType.asType();
AutoMappings.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
StatefulParseMethod.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
StatefulParser.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
StatefulParser.java,String enumConstant = namedOption.enumName().enumConstant();,if (namedOption != null ) String enumConstant = namedOption.enumName().enumConstant();
TryReadOptionMethod.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
FlagParser.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
FlagParser.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
OptionParser.java,TypeSpec.Builder spec = TypeSpec.classBuilder(generatedTypes.optionParserType());,if (TypeSpec != null ) TypeSpec.Builder spec = TypeSpec.classBuilder(generatedTypes.optionParserType());
ReadOptionArgumentMethod.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
ReadOptionNameMethod.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
RegularOptionParser.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
RepeatableOptionParser.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
TryReadOptionMethod.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
StandardErrorHandler.java,CommandModel model = parsingFailed.commandModel();,if (parsingFailed != null ) CommandModel model = parsingFailed.commandModel();
AtFileReader.java,current = it.next();,if (it != null ) current = it.next();
AtFileReader.java,int length = line.length();,if (line != null ) int length = line.length();
CpArgumentsTest.java,FileSystem fs = Jimfs.newFileSystem(Configuration.unix());,if (Jimfs != null ) FileSystem fs = Jimfs.newFileSystem(Configuration.unix());
CommonFields.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
StandardErrorHandler.java,CommandModel model = notSuccess.commandModel();,if (notSuccess != null ) CommandModel model = notSuccess.commandModel();
Util.java,List<ExecutableElement> constructors = ElementFilter.constructorsIn(classToCheck.getEnclosedElements());,if (ElementFilter != null ) List<ExecutableElement> constructors = ElementFilter.constructorsIn(classToCheck.getEnclosedElements());
Util.java,String base = el.getSimpleName().toString();,if (el != null ) String base = el.getSimpleName().toString();
GeneratedTypes.java,String name = item.enumName().original();,if (item != null ) String name = item.enumName().original();
AutoMappings.java,CodeBlock code = conversion.code();,if (conversion != null ) CodeBlock code = conversion.code();
AutoMappings.java,boolean multiline = conversion.multiline();,if (conversion != null ) boolean multiline = conversion.multiline();
ConverterMapper.java,M sourceMethod = match.sourceMethod();,if (match != null ) M sourceMethod = match.sourceMethod();
ListMatcher.java,TypeMirror returnType = parameter.returnType();,if (parameter != null ) TypeMirror returnType = parameter.returnType();
OptionalMatcher.java,TypeMirror returnType = parameter.returnType();,if (parameter != null ) TypeMirror returnType = parameter.returnType();
AutoOrEnumMapper.java,TypeMirror baseType = match.baseType();,if (match != null ) TypeMirror baseType = match.baseType();
ExecutableElementsFinder.java,List<ExecutableElement> methods = findParameterlessMethodsIn(sourceElement.element().asType());,if (findParameterlessMethodsIn(sourceElement != null ) List<ExecutableElement> methods = findParameterlessMethodsIn(sourceElement.element().asType());
ExecutableElementsFinder.java,TypeElement el = element.orElseThrow();,if (element != null ) TypeElement el = element.orElseThrow();
ExecutableElementsFinder.java,List<ExecutableElement> methods = parameterlessMethodsIn(el.getEnclosedElements());,if (parameterlessMethodsIn(el != null ) List<ExecutableElement> methods = parameterlessMethodsIn(el.getEnclosedElements());
ExecutableElementsFinder.java,mirror = el.getSuperclass();,if (el != null ) mirror = el.getSuperclass();
ExecutableElementsFinder.java,Set<Name> abstractNames = allAbstractByName.keySet();,if (allAbstractByName != null ) Set<Name> abstractNames = allAbstractByName.keySet();
ExecutableElementsFinder.java,Set<Name> names = allAbstractByName.keySet();,if (allAbstractByName != null ) Set<Name> names = allAbstractByName.keySet();
ExecutableElementsFinder.java,List<ExecutableElement> methods = findMethodsIn(sourceElement.element().asType());,if (findMethodsIn(sourceElement != null ) List<ExecutableElement> methods = findMethodsIn(sourceElement.element().asType());
AnnotatedMethodsFactory.java,EnumName enumName = enumNames.get(sourceMethod.simpleName());,if (enumNames != null ) EnumName enumName = enumNames.get(sourceMethod.simpleName());
AnnotatedMethodsFactory.java,ExecutableElement method = annotatedMethod.method();,if (annotatedMethod != null ) ExecutableElement method = annotatedMethod.method();
ExecutableElements.java,enumName = enumName.makeLonger();,if (enumName != null ) enumName = enumName.makeLonger();
AnnotatedMethodFactory.java,EnumName enumName = enumNames.get(sourceMethod.getSimpleName());,if (enumNames != null ) EnumName enumName = enumNames.get(sourceMethod.getSimpleName());
AnnotatedMethodFactory.java,Annotation annotation = sourceMethod.annotation();,if (sourceMethod != null ) Annotation annotation = sourceMethod.annotation();
ExecutableElementsFinder.java,List<ExecutableElement> methodsIn = findMethodsIn(sourceElement.element().asType());,if (findMethodsIn(sourceElement != null ) List<ExecutableElement> methodsIn = findMethodsIn(sourceElement.element().asType());
SourceParameterValidator.java,int index = sourceParameter.annotatedMethod().index();,if (sourceParameter != null ) int index = sourceParameter.annotatedMethod().index();
MethodsFactory.java,name = name.makeLonger();,if (name != null ) name = name.makeLonger();
TypeToolTest.java,"DeclaredType listOfString = types.getDeclaredType(list, string.asType());","if (string != null ) DeclaredType listOfString = types.getDeclaredType(list, string.asType());"
SourceFileGenerator.java,String packageName = sourceElement.generatedClass().packageName();,if (sourceElement != null ) String packageName = sourceElement.generatedClass().packageName();
OptionEnum.java,EnumName enumName = param.enumName();,if (param != null ) EnumName enumName = param.enumName();
Util.java,Element enclosingElement = current.getEnclosingElement();,if (current != null ) Element enclosingElement = current.getEnclosingElement();
Util.java,current = opt.orElseThrow();,if (opt != null ) current = opt.orElseThrow();
SourceParameterValidator.java,int index = item.annotatedMethod().index();,if (item != null ) int index = item.annotatedMethod().index();
AbstractMethodsFinder.java,List<ExecutableElement> methods = methodsIn(el.getEnclosedElements());,if (methodsIn(el != null ) List<ExecutableElement> methods = methodsIn(el.getEnclosedElements());
AbstractMethodsFinder.java,List<ExecutableElement> methods = allMethodsFinder.findMethodsInSourceElement();,if (allMethodsFinder != null ) List<ExecutableElement> methods = allMethodsFinder.findMethodsInSourceElement();
AbstractMethodsUtil.java,Name name = abstractMethod.getSimpleName();,if (abstractMethod != null ) Name name = abstractMethod.getSimpleName();
AllMethodsFinder.java,TypeMirror mirror = sourceElement.element().asType();,if (sourceElement != null ) TypeMirror mirror = sourceElement.element().asType();
AllMethodsFinder.java,TypeElement el = element.orElseThrow();,if (element != null ) TypeElement el = element.orElseThrow();
AllMethodsFinder.java,List<ExecutableElement> methods = methodsIn(el.getEnclosedElements());,if (methodsIn(el != null ) List<ExecutableElement> methods = methodsIn(el.getEnclosedElements());
AllMethodsFinder.java,mirror = el.getSuperclass();,if (el != null ) mirror = el.getSuperclass();
MultilineConverter.java,MapExpr mapExpr = item.mapExpr();,if (item != null ) MapExpr mapExpr = item.mapExpr();
Mapping.java,TypeName fieldType = TypeName.get(parameter.returnType());,if (TypeName != null ) TypeName fieldType = TypeName.get(parameter.returnType());
Mapping.java,String fieldName = parameter.enumName().original();,if (parameter != null ) String fieldName = parameter.enumName().original();
Mapping.java,String fieldName = namedOption.enumName().original();,if (namedOption != null ) String fieldName = namedOption.enumName().original();
AutoMappingFinder.java,Match m = match.orElseThrow();,if (match != null ) Match m = match.orElseThrow();
ConverterValidator.java,Match m = match.orElseThrow();,if (match != null ) Match m = match.orElseThrow();
OptionalMatcher.java,String wrapped = optionalPrimitive.wrappedObjectType();,if (optionalPrimitive != null ) String wrapped = optionalPrimitive.wrappedObjectType();
OptionalMatcher.java,TypeMirror baseType = el.asType();,if (el != null ) TypeMirror baseType = el.asType();
OptionalPrimitive.java,this.wrappedObjectType = wrappedObjectType.getCanonicalName();,if (wrappedObjectType != null ) this.wrappedObjectType = wrappedObjectType.getCanonicalName();
CommandProcessor.java,int index = item.annotatedMethod().index();,if (item != null ) int index = item.annotatedMethod().index();
NamedOptionFactory.java,Optional<TypeElement> converter = sourceMethod.annotatedMethod().converter();,if (sourceMethod != null ) Optional<TypeElement> converter = sourceMethod.annotatedMethod().converter();
NamedOptionFactory.java,Optional<TypeElement> converter = annotationUtil.getConverter(sourceMethod.method());,if (annotationUtil != null ) Optional<TypeElement> converter = annotationUtil.getConverter(sourceMethod.method());
Mapped.java,TypeName fieldType = parameter.returnType();,if (parameter != null ) TypeName fieldType = parameter.returnType();
PositionalParamFactory.java,int position = sourceMethod.annotatedMethod().index();,if (sourceMethod != null ) int position = sourceMethod.annotatedMethod().index();
PositionalParamFactory.java,int position = sourceMethod.index();,if (sourceMethod != null ) int position = sourceMethod.index();
ListMatcher.java,TypeMirror returnType = parameter.sourceMethod().returnType();,if (parameter != null ) TypeMirror returnType = parameter.sourceMethod().returnType();
OptionalMatcher.java,TypeMirror returnType = parameter.sourceMethod().returnType();,if (parameter != null ) TypeMirror returnType = parameter.sourceMethod().returnType();
PositionalParamFactory.java,int position = sourceMethod.getIndex();,if (sourceMethod != null ) int position = sourceMethod.getIndex();
CommandProcessor.java,PositionalParameter item = allPositionalParameters.get(i).item();,if (allPositionalParameters != null ) PositionalParameter item = allPositionalParameters.get(i).item();
PositionalParamFactory.java,int position = sourceMethod.index().orElseThrow();,if (sourceMethod != null ) int position = sourceMethod.index().orElseThrow();
OptionalMatcherTest.java,TypeMirror baseType = match.baseType();,if (match != null ) TypeMirror baseType = match.baseType();
OptionalMatcherTest.java,TypeMirror baseType = match.baseType();,if (match != null ) TypeMirror baseType = match.baseType();
ListMatcher.java,TypeMirror returnType = sourceMethod.returnType();,if (sourceMethod != null ) TypeMirror returnType = sourceMethod.returnType();
OptionalMatcher.java,TypeMirror returnType = sourceMethod.returnType();,if (sourceMethod != null ) TypeMirror returnType = sourceMethod.returnType();
ParameterAnnotation.java,this.index = annotatedParameter.index();,if (annotatedParameter != null ) this.index = annotatedParameter.index();
SourceMethod.java,ParameterStyle parameterStyle = ParameterStyle.getStyle(annotatedMethod.sourceMethod());,if (ParameterStyle != null ) ParameterStyle parameterStyle = ParameterStyle.getStyle(annotatedMethod.sourceMethod());
MethodsFactory.java,resultName = resultName.makeLonger();,if (resultName != null ) resultName = resultName.makeLonger();
ExactMatcher.java,TypeMirror sourceType = sourceMethod.returnType();,if (sourceMethod != null ) TypeMirror sourceType = sourceMethod.returnType();
ConvertModule.java,result = result.makeLonger();,if (result != null ) result = result.makeLonger();
SourceMethodValidator.java,Element el = declared.asElement();,if (declared != null ) Element el = declared.asElement();
Util.java,CodeBlock.Builder args = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder args = CodeBlock.builder();
Util.java,CodeBlock.Builder result = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder result = CodeBlock.builder();
SourceElement.java,String[] description = get().description();,if (get() != null ) String[] description = get().description();
ParameterStyle.java,String[] description = get(method).description();,if (get(method) != null ) String[] description = get(method).description();
ParameterStyle.java,String[] description = get(method).description();,if (get(method) != null ) String[] description = get(method).description();
ParameterStyle.java,String[] description = get(method).description();,if (get(method) != null ) String[] description = get(method).description();
ParseMethodOverloadRequest.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
ParseMethod.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
AtFileReader.java,List<String> tokens = new ArrayList<>(lines.size());,if (ArrayList<>(lines != null ) List<String> tokens = new ArrayList<>(lines.size());
Util.java,List<ExecutableElement> constructors = ElementFilter.constructorsIn(classToCheck.getEnclosedElements());,if (ElementFilter != null ) List<ExecutableElement> constructors = ElementFilter.constructorsIn(classToCheck.getEnclosedElements());
Util.java,Element enclosingElement = current.getEnclosingElement();,if (current != null ) Element enclosingElement = current.getEnclosingElement();
Util.java,current = opt.orElseThrow();,if (opt != null ) current = opt.orElseThrow();
Util.java,String base = el.getSimpleName().toString();,if (el != null ) String base = el.getSimpleName().toString();
Util.java,CodeBlock.Builder args = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder args = CodeBlock.builder();
Util.java,CodeBlock.Builder result = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder result = CodeBlock.builder();
CommonFields.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
FlagParser.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
FlagParser.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
GeneratedTypes.java,this.generatedClass = sourceElement.generatedClass();,if (sourceElement != null ) this.generatedClass = sourceElement.generatedClass();
GeneratedTypes.java,String name = item.enumName().original();,if (item != null ) String name = item.enumName().original();
Impl.java,TypeSpec.Builder spec = TypeSpec.classBuilder(generatedTypes.implType());,if (TypeSpec != null ) TypeSpec.Builder spec = TypeSpec.classBuilder(generatedTypes.implType());
Impl.java,MethodSpec.Builder spec = MethodSpec.constructorBuilder();,if (MethodSpec != null ) MethodSpec.Builder spec = MethodSpec.constructorBuilder();
MultilineConverter.java,MapExpr mapExpr = item.mapExpr();,if (item != null ) MapExpr mapExpr = item.mapExpr();
OptionEnum.java,TypeSpec.Builder spec = TypeSpec.enumBuilder(sourceElement.optionEnumType());,if (TypeSpec != null ) TypeSpec.Builder spec = TypeSpec.enumBuilder(sourceElement.optionEnumType());
OptionEnum.java,EnumName enumName = param.enumName();,if (param != null ) EnumName enumName = param.enumName();
OptionEnum.java,String enumConstant = enumName.enumConstant();,if (enumName != null ) String enumConstant = enumName.enumConstant();
OptionParser.java,TypeSpec.Builder spec = TypeSpec.classBuilder(generatedTypes.optionParserType());,if (TypeSpec != null ) TypeSpec.Builder spec = TypeSpec.classBuilder(generatedTypes.optionParserType());
ParseMethod.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
ReadOptionArgumentMethod.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
ReadOptionNameMethod.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
RegularOptionParser.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
RepeatableOptionParser.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
StatefulParseMethod.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
StatefulParser.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
StatefulParser.java,String enumConstant = namedOption.enumName().enumConstant();,if (namedOption != null ) String enumConstant = namedOption.enumName().enumConstant();
TryParseOptionMethod.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
TryParseOptionMethod.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
ConvertModule.java,result = result.makeLonger();,if (result != null ) result = result.makeLonger();
Mapped.java,TypeName fieldType = parameter.returnType();,if (parameter != null ) TypeName fieldType = parameter.returnType();
Mapped.java,String fieldName = parameter.enumName().original();,if (parameter != null ) String fieldName = parameter.enumName().original();
Mapped.java,String fieldName = namedOption.enumName().original();,if (namedOption != null ) String fieldName = namedOption.enumName().original();
ExactMatcher.java,TypeMirror sourceType = sourceMethod.returnType();,if (sourceMethod != null ) TypeMirror sourceType = sourceMethod.returnType();
ListMatcher.java,TypeMirror returnType = sourceMethod.returnType();,if (sourceMethod != null ) TypeMirror returnType = sourceMethod.returnType();
OptionalMatcher.java,TypeMirror returnType = sourceMethod.returnType();,if (sourceMethod != null ) TypeMirror returnType = sourceMethod.returnType();
OptionalMatcher.java,String wrapped = optionalPrimitive.wrappedObjectType();,if (optionalPrimitive != null ) String wrapped = optionalPrimitive.wrappedObjectType();
OptionalMatcher.java,TypeMirror baseType = el.asType();,if (el != null ) TypeMirror baseType = el.asType();
OptionalPrimitive.java,this.wrappedObjectType = wrappedObjectType.getCanonicalName();,if (wrappedObjectType != null ) this.wrappedObjectType = wrappedObjectType.getCanonicalName();
AutoConverterFinder.java,Match m = match.orElseThrow();,if (match != null ) Match m = match.orElseThrow();
AutoConverterFinder.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
AutoConverters.java,String canonicalName = autoType.getCanonicalName();,if (autoType != null ) String canonicalName = autoType.getCanonicalName();
AutoConverters.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
ConverterValidator.java,Match m = match.orElseThrow();,if (match != null ) Match m = match.orElseThrow();
ParameterMethodProcessingStep.java,TypeKind kind = method.getReturnType().getKind();,if (method != null ) TypeKind kind = method.getReturnType().getKind();
SourceElement.java,String[] description = get().description();,if (get() != null ) String[] description = get().description();
SourceFileGenerator.java,String packageName = sourceElement.generatedClass().packageName();,if (sourceElement != null ) String packageName = sourceElement.generatedClass().packageName();
SourceFileGenerator.java,String stack = sw.toString();,if (sw != null ) String stack = sw.toString();
AbstractMethodsFinder.java,List<ExecutableElement> methods = allMethodsFinder.findMethodsInSourceElement();,if (allMethodsFinder != null ) List<ExecutableElement> methods = allMethodsFinder.findMethodsInSourceElement();
AbstractMethodsUtil.java,Name name = abstractMethod.getSimpleName();,if (abstractMethod != null ) Name name = abstractMethod.getSimpleName();
AllMethodsFinder.java,TypeMirror mirror = sourceElement.element().asType();,if (sourceElement != null ) TypeMirror mirror = sourceElement.element().asType();
AllMethodsFinder.java,TypeElement el = element.orElseThrow();,if (element != null ) TypeElement el = element.orElseThrow();
AllMethodsFinder.java,List<ExecutableElement> methods = methodsIn(el.getEnclosedElements());,if (methodsIn(el != null ) List<ExecutableElement> methods = methodsIn(el.getEnclosedElements());
AllMethodsFinder.java,mirror = el.getSuperclass();,if (el != null ) mirror = el.getSuperclass();
ParameterMethodValidator.java,Element el = declared.asElement();,if (declared != null ) Element el = declared.asElement();
ParameterStyle.java,String[] description = get(method).description();,if (get(method) != null ) String[] description = get(method).description();
ParameterStyle.java,String[] description = get(method).description();,if (get(method) != null ) String[] description = get(method).description();
ParameterStyle.java,String[] description = get(method).description();,if (get(method) != null ) String[] description = get(method).description();
OptionalMatcherTest.java,TypeMirror baseType = match.baseType();,if (match != null ) TypeMirror baseType = match.baseType();
OptionalMatcherTest.java,TypeMirror baseType = match.baseType();,if (match != null ) TypeMirror baseType = match.baseType();
StandardErrorHandler.java,CommandModel model = notSuccess.commandModel();,if (notSuccess != null ) CommandModel model = notSuccess.commandModel();
Synopsis.java,Multiplicity skew = param.multiplicity();,if (param != null ) Multiplicity skew = param.multiplicity();
Synopsis.java,String paramLabel = param.paramLabel();,if (param != null ) String paramLabel = param.paramLabel();
LeftOptional.java,LeftOptional<L> result = (LeftOptional<L>) supplier.get();,if (supplier != null ) LeftOptional<L> result = (LeftOptional<L>) supplier.get();
Optional.java,Optional<R> result = (Optional<R>) supplier.get();,if (supplier != null ) Optional<R> result = (Optional<R>) supplier.get();
AtFileReader.java,List<String> tokens = new ArrayList<>(lines.size());,if (ArrayList<>(lines != null ) List<String> tokens = new ArrayList<>(lines.size());
AtFileReader.java,int length = line.length();,if (line != null ) int length = line.length();
SuperArgumentsTest.java,SuperArguments result = success.result();,if (success != null ) SuperArguments result = success.result();
ParserTestFixture.java,boolean success = messageTest.test(hasMessage.message());,if (messageTest != null ) boolean success = messageTest.test(hasMessage.message());
TestOutputStream.java,String stdout = baos.toString();,if (baos != null ) String stdout = baos.toString();
TestOutputStream.java,String stdout = baos.toString();,if (baos != null ) String stdout = baos.toString();
TypeTool.java,String canonicalName = someClass.getCanonicalName();,if (someClass != null ) String canonicalName = someClass.getCanonicalName();
Util.java,current = opt.get();,if (opt != null ) current = opt.get();
AutoConverterFinder.java,Match m = match.get();,if (match != null ) Match m = match.get();
ConverterValidator.java,Match m = match.get();,if (match != null ) Match m = match.get();
AllMethodsFinder.java,TypeElement el = element.get();,if (element != null ) TypeElement el = element.get();
OptionalMatcherTest.java,TypeElement optional = elements.getTypeElement(Optional.class.getCanonicalName());,if (elements != null ) TypeElement optional = elements.getTypeElement(Optional.class.getCanonicalName());
AtFileReader.java,Optional<LineResult> left = result.getLeft();,if (result != null ) Optional<LineResult> left = result.getLeft();
ParserTestFixture.java,String[] actual = getUsageDocumentation(result.getLeft().get());,if (getUsageDocumentation(result != null ) String[] actual = getUsageDocumentation(result.getLeft().get());
AtFileReader.java,ArrayList<String> copy = new ArrayList<>(arrayLines.size());,if (ArrayList<>(arrayLines != null ) ArrayList<String> copy = new ArrayList<>(arrayLines.size());
ParserTestFixture.java,Optional<E> result = parser.apply(args).getRight();,if (parser != null ) Optional<E> result = parser.apply(args).getRight();
ParserTestFixture.java,Object result = method.invoke(parsed.get());,if (method != null ) Object result = method.invoke(parsed.get());
SuperArgumentsTest.java,SuperArguments result = success.result();,if (success != null ) SuperArguments result = success.result();
UsageMethod.java,Multiplicity multiplicity = param.multiplicity();,if (param != null ) Multiplicity multiplicity = param.multiplicity();
UsageMethod.java,String paramLabel = param.paramLabel();,if (param != null ) String paramLabel = param.paramLabel();
StatefulParser.java,String enumConstant = namedOption.enumConstant();,if (namedOption != null ) String enumConstant = namedOption.enumConstant();
ConvertModule.java,result = originalName.makeLonger();,if (originalName != null ) result = originalName.makeLonger();
ConverterFileExists.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
UsageMethod.java,Multiplicity skew = param.multiplicity();,if (param != null ) Multiplicity skew = param.multiplicity();
OptionParser.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
OptionParser.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
OptionParser.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
OptionParser.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
CpArgumentsTest.java,String message = error.message();,if (error != null ) String message = error.message();
ParserFlavour.java,String[] description = get(sourceElement).description();,if (get(sourceElement) != null ) String[] description = get(sourceElement).description();
ParserFlavour.java,this.className = annotationClass.getCanonicalName();,if (annotationClass != null ) this.className = annotationClass.getCanonicalName();
ParserFlavour.java,String[] description = get(sourceElement).description();,if (get(sourceElement) != null ) String[] description = get(sourceElement).description();
StatefulParser.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
StatefulParser.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
BuildMethod.java,String itemName = parameter.paramLabel();,if (parameter != null ) String itemName = parameter.paramLabel();
UsageMethod.java,Multiplicity skew = param.skew();,if (param != null ) Multiplicity skew = param.skew();
UsageMethod.java,Skew skew = param.skew();,if (param != null ) Skew skew = param.skew();
Synopsis.java,Skew skew = param.skew();,if (param != null ) Skew skew = param.skew();
ErrorHandler.java,CommandModel model = notSuccess.commandModel();,if (notSuccess != null ) CommandModel model = notSuccess.commandModel();
ParseOrExitMethod.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
OptionEnum.java,TypeSpec.Builder spec = TypeSpec.enumBuilder(sourceElement.itemType());,if (TypeSpec != null ) TypeSpec.Builder spec = TypeSpec.enumBuilder(sourceElement.itemType());
OptionEnum.java,TypeSpec optionSpec = anonymousClassBuilder(description).build();,if (anonymousClassBuilder(description) != null ) TypeSpec optionSpec = anonymousClassBuilder(description).build();
OptionEnum.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
MakeLinesMethod.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
PrintItemDocumentationMethod.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
PrintUsageDocumentationMethod.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
BuildMethod.java,CodeBlock.Builder args = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder args = CodeBlock.builder();
BuildMethod.java,CodeBlock.Builder result = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder result = CodeBlock.builder();
ConvEx.java,FieldSpec error = commonFields.convExError();,if (commonFields != null ) FieldSpec error = commonFields.convExError();
CommandProcessingStep.java,SourceFileGenerator sourceFileGenerator = component.sourceFileGenerator();,if (component != null ) SourceFileGenerator sourceFileGenerator = component.sourceFileGenerator();
AtFileReader.java,List<String> copy = new ArrayList<>(lines.size());,if (ArrayList<>(lines != null ) List<String> copy = new ArrayList<>(lines.size());
AtFileReader.java,Iterator<String> it = copy.iterator();,if (copy != null ) Iterator<String> it = copy.iterator();
AtFileReader.java,List<String> tokens = new ArrayList<>(copy.size());,if (ArrayList<>(copy != null ) List<String> tokens = new ArrayList<>(copy.size());
AtFileReader.java,String line = it.next();,if (it != null ) String line = it.next();
AtFileReader.java,line = it.next();,if (it != null ) line = it.next();
CpArgumentsTest.java,String message = failure.message();,if (failure != null ) String message = failure.message();
ParseOrExitMethod.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
ReadAtFileMethod.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
ReadAtLinesMethod.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
ReadTokenFromAtFileMethod.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
CpArgumentsTest.java,String message = failure.getError().getMessage();,if (failure != null ) String message = failure.getError().getMessage();
SuperArgumentsTest.java,SuperArguments result = success.getResult();,if (success != null ) SuperArguments result = success.getResult();
SuperArgumentsTest.java,SuperArguments result = success.getResult();,if (success != null ) SuperArguments result = success.getResult();
AtFileTest.java,Iterator<String> it = copy.iterator();,if (copy != null ) Iterator<String> it = copy.iterator();
AtFileTest.java,ArrayList<String> tokens = new ArrayList<>(copy.size());,if (ArrayList<>(copy != null ) ArrayList<String> tokens = new ArrayList<>(copy.size());
AtFileTest.java,String result = it.next();,if (it != null ) String result = it.next();
AtFileTest.java,result = it.next();,if (it != null ) result = it.next();
BuildMethod.java,String paramLabel = parameter.paramLabel();,if (parameter != null ) String paramLabel = parameter.paramLabel();
OptionalMatcherTest.java,TypeMirror baseType = unwrapSuccess.baseType();,if (unwrapSuccess != null ) TypeMirror baseType = unwrapSuccess.baseType();
OptionalMatcherTest.java,TypeMirror baseType = unwrapSuccess.baseType();,if (unwrapSuccess != null ) TypeMirror baseType = unwrapSuccess.baseType();
OptionalMatcher.java,TypeMirror baseType = el.asType();,if (el != null ) TypeMirror baseType = el.asType();
Util.java,String base = el.getSimpleName().toString();,if (el != null ) String base = el.getSimpleName().toString();
AllMethodsFinder.java,mirror = element.get().getSuperclass();,if (element != null ) mirror = element.get().getSuperclass();
ParameterMethodValidator.java,TypeKind kind = mirror.getKind();,if (mirror != null ) TypeKind kind = mirror.getKind();
TypeTool.java,String canonicalName = someClass.getCanonicalName();,if (someClass != null ) String canonicalName = someClass.getCanonicalName();
OptionalMatcher.java,TypeElement optional = elements.getTypeElement(Optional.class.getCanonicalName());,if (elements != null ) TypeElement optional = elements.getTypeElement(Optional.class.getCanonicalName());
OptionalMatcher.java,TypeElement element = elements.getTypeElement(optionalPrimitive.wrappedObjectType());,if (elements != null ) TypeElement element = elements.getTypeElement(optionalPrimitive.wrappedObjectType());
MethodsFactory.java,List<ExecutableElement> methods = abstractMethodsFinder.findAbstractMethods();,if (abstractMethodsFinder != null ) List<ExecutableElement> methods = abstractMethodsFinder.findAbstractMethods();
ParameterMethodProcessingStep.java,Element enclosing = method.getEnclosingElement();,if (method != null ) Element enclosing = method.getEnclosingElement();
AllMethodsFinder.java,mirror = folded.getSuperclass();,if (folded != null ) mirror = folded.getSuperclass();
NamedOptionFactory.java,CodeBlock mapExpr = CodeBlock.builder().build();,if (CodeBlock != null ) CodeBlock mapExpr = CodeBlock.builder().build();
AutoConverterFinder.java,TypeMirror baseType = match.baseType();,if (match != null ) TypeMirror baseType = match.baseType();
NamedOptionFactory.java,TypeName type = TypeName.get(sourceMethod.returnType());,if (TypeName != null ) TypeName type = TypeName.get(sourceMethod.returnType());
OptionEnum.java,TypeSpec.Builder spec = TypeSpec.enumBuilder(generatedTypes.optionType());,if (TypeSpec != null ) TypeSpec.Builder spec = TypeSpec.enumBuilder(generatedTypes.optionType());
NamedOptionFactory.java,String name = enumName.enumConstant();,if (enumName != null ) String name = enumName.enumConstant();
ConvertedParameter.java,String fieldName = enumName.enumConstant();,if (enumName != null ) String fieldName = enumName.enumConstant();
Impl.java,TypeName fieldType = c.parameter().returnType();,if (c != null ) TypeName fieldType = c.parameter().returnType();
PrintUsageDocumentationMethod.java,CodeBlock.Builder result = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder result = CodeBlock.builder();
PrintUsageDocumentationMethod.java,CodeBlock.Builder result = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder result = CodeBlock.builder();
BuildMethod.java,String paramLabel = parameter.paramLabel();,if (parameter != null ) String paramLabel = parameter.paramLabel();
PrintTokensMethod.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
BuildMethod.java,List<String> dashedNames = parameter.parameter().names();,if (parameter != null ) List<String> dashedNames = parameter.parameter().names();
Impl.java,TypeName returnType = c.parameter().returnType();,if (c != null ) TypeName returnType = c.parameter().returnType();
StatefulParser.java,String enumConstant = namedOption.enumConstant();,if (namedOption != null ) String enumConstant = namedOption.enumConstant();
BuildMethod.java,String enumConstant = parameter.enumConstant();,if (parameter != null ) String enumConstant = parameter.enumConstant();
BuildMethod.java,String enumConstant = parameter.enumConstant();,if (parameter != null ) String enumConstant = parameter.enumConstant();
OptionEnum.java,String enumConstant = param.enumConstant();,if (param != null ) String enumConstant = param.enumConstant();
StatefulParser.java,List<String> dashedNames = parameter.parameter().names();,if (parameter != null ) List<String> dashedNames = parameter.parameter().names();
StatefulParser.java,String enumConstant = parameter.enumConstant();,if (parameter != null ) String enumConstant = parameter.enumConstant();
StatefulParser.java,String enumConstant = parameter.enumConstant();,if (parameter != null ) String enumConstant = parameter.enumConstant();
StatefulParser.java,CodeBlock.Builder result = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder result = CodeBlock.builder();
StatefulParser.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
OptionParsersMethod.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
OptionParsersMethod.java,String enumConstant = param.enumConstant();,if (param != null ) String enumConstant = param.enumConstant();
OptionsByNameMethod.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
AllMethodsFinder.java,sourceElement = folded.getSuperclass();,if (folded != null ) sourceElement = folded.getSuperclass();
ParserFlavour.java,String name = get(sourceElement).name();,if (get(sourceElement) != null ) String name = get(sourceElement).name();
ParserFlavour.java,String key = get(sourceElement).descriptionKey();,if (get(sourceElement) != null ) String key = get(sourceElement).descriptionKey();
ParserFlavour.java,String name = get(sourceElement).name();,if (get(sourceElement) != null ) String name = get(sourceElement).name();
ParserFlavour.java,String key = get(sourceElement).descriptionKey();,if (get(sourceElement) != null ) String key = get(sourceElement).descriptionKey();
OptionEnum.java,CodeBlock description = descriptionBlock(param.parameter().description());,if (descriptionBlock(param != null ) CodeBlock description = descriptionBlock(param.parameter().description());
CommandProcessor.java,TypeKind kind = mirror.getKind();,if (mirror != null ) TypeKind kind = mirror.getKind();
CommandProcessingStep.java,GeneratedType generatedType = GeneratedType.create(sourceElement.element());,if (GeneratedType != null ) GeneratedType generatedType = GeneratedType.create(sourceElement.element());
CommandProcessingStep.java,JavaFile javaFile = builder.build();,if (builder != null ) JavaFile javaFile = builder.build();
CommandProcessingStep.java,List<SourceMethod> positionalParameters = methods.params();,if (methods != null ) List<SourceMethod> positionalParameters = methods.params();
CommandProcessingStep.java,TypeKind kind = mirror.getKind();,if (mirror != null ) TypeKind kind = mirror.getKind();
CommandProcessingStep.java,sourceElement = element.orElse(null).getSuperclass();,if (element != null ) sourceElement = element.orElse(null).getSuperclass();
AutoConverterFinder.java,TypeMirror baseReturnType = match.baseType();,if (match != null ) TypeMirror baseReturnType = match.baseType();
AutoConverterFinder.java,TypeMirror baseReturnType = match.baseReturnType();,if (match != null ) TypeMirror baseReturnType = match.baseReturnType();
CommandProcessingStep.java,String sourceCode = javaFile.toString();,if (javaFile != null ) String sourceCode = javaFile.toString();
Withers.java,FieldSpec exitHook = commonFields.exitHook();,if (commonFields != null ) FieldSpec exitHook = commonFields.exitHook();
GeneratedClass.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
GeneratedClass.java,FieldSpec exitHook = exitHookField.get();,if (exitHookField != null ) FieldSpec exitHook = exitHookField.get();
GeneratedClass.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
ExitHookField.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
GeneratedClass.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
GeneratedClass.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
GeneratedClass.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
GeneratedClass.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
GeneratedClass.java,String enumConstant = param.enumConstant();,if (param != null ) String enumConstant = param.enumConstant();
GeneratedClass.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
GeneratedClass.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
GeneratedClass.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
GeneratedClass.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
GeneratedClass.java,CodeBlock.Builder result = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder result = CodeBlock.builder();
GeneratedClass.java,CodeBlock.Builder result = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder result = CodeBlock.builder();
GeneratedClass.java,int paramsWidth = positionalParameters.paramsWidth();,if (positionalParameters != null ) int paramsWidth = positionalParameters.paramsWidth();
GeneratedClass.java,int paramsWidth = params.paramsWidth();,if (params != null ) int paramsWidth = params.paramsWidth();
OptionEnum.java,List<String> description = param.parameter().description();,if (param != null ) List<String> description = param.parameter().description();
OptionEnum.java,TypeSpec optionSpec = anonymousClassBuilder(descExpression(description)).build();,if (anonymousClassBuilder(descExpression(description)) != null ) TypeSpec optionSpec = anonymousClassBuilder(descExpression(description)).build();
CommandProcessingStep.java,TypeSpec typeSpec = context.generatedClass().define();,if (context != null ) TypeSpec typeSpec = context.generatedClass().define();
Context.java,this.sourceElement = sourceElement.element();,if (sourceElement != null ) this.sourceElement = sourceElement.element();
GeneratedTypes.java,boolean helpParameterEnabled = flavour.helpEnabled(sourceElement.element());,if (flavour != null ) boolean helpParameterEnabled = flavour.helpEnabled(sourceElement.element());
AbstractParameter.java,this.sourceMethod = sourceMethod.method();,if (sourceMethod != null ) this.sourceMethod = sourceMethod.method();
GeneratedClass.java,Modifier[] accessModifiers = context.getAccessModifiers();,if (context != null ) Modifier[] accessModifiers = context.getAccessModifiers();
Context.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
GeneratedClass.java,this.exitHook = context.exitHookField();,if (context != null ) this.exitHook = context.exitHookField();
CommandProcessingStep.java,List<ExecutableElement> positionalParameters = methods.params();,if (methods != null ) List<ExecutableElement> positionalParameters = methods.params();
StatefulParser.java,List<String> dashedNames = parameter.parameter().dashedNames();,if (parameter != null ) List<String> dashedNames = parameter.parameter().dashedNames();
ParameterContext.java,this.sourceElement = sourceElement.element();,if (sourceElement != null ) this.sourceElement = sourceElement.element();
GeneratedClass.java,ClassName optionType = generatedTypes.optionType();,if (generatedTypes != null ) ClassName optionType = generatedTypes.optionType();
StatefulParser.java,ClassName optionType = generatedTypes.optionType();,if (generatedTypes != null ) ClassName optionType = generatedTypes.optionType();
ParameterContext.java,this.sourceMethod = sourceMethod.method();,if (sourceMethod != null ) this.sourceMethod = sourceMethod.method();
ParameterContext.java,this.descriptionKey = descriptionKey.key();,if (descriptionKey != null ) this.descriptionKey = descriptionKey.key();
ParameterModule.java,String methodName = sourceMethod.getSimpleName().toString();,if (sourceMethod != null ) String methodName = sourceMethod.getSimpleName().toString();
ParameterContext.java,this.bundleKey = bundleKey.key();,if (bundleKey != null ) this.bundleKey = bundleKey.key();
AutoMapper.java,CodeBlock mapExpr = coercion.getValue();,if (coercion != null ) CodeBlock mapExpr = coercion.getValue();
ExactMatcher.java,List<String> dashedNames = parameter.dashedNames();,if (parameter != null ) List<String> dashedNames = parameter.dashedNames();
ExactMatcher.java,String enumConstant = parameter.enumName().enumConstant();,if (parameter != null ) String enumConstant = parameter.enumName().enumConstant();
ExactMatcher.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
SuppliedClassValidator.java,Element enclosingElement = current.getEnclosingElement();,if (current != null ) Element enclosingElement = current.getEnclosingElement();
SuppliedClassValidator.java,List<ExecutableElement> constructors = ElementFilter.constructorsIn(classToCheck.getEnclosedElements());,if (ElementFilter != null ) List<ExecutableElement> constructors = ElementFilter.constructorsIn(classToCheck.getEnclosedElements());
NamedOptionFactory.java,this.mapperPresent = mapperClass.isPresent();,if (mapperClass != null ) this.mapperPresent = mapperClass.isPresent();
GeneratedClass.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
GeneratedClass.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
GeneratedClass.java,ClassName parserType = generatedTypes.regularParamParserType();,if (generatedTypes != null ) ClassName parserType = generatedTypes.regularParamParserType();
ParamParser.java,boolean anyRegular = !context.regularParams().isEmpty();,if (!context != null ) boolean anyRegular = !context.regularParams().isEmpty();
ParseMethod.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
AutoMatcher.java,Optional<Match> match = matcher.tryMatch();,if (matcher != null ) Optional<Match> match = matcher.tryMatch();
MapperMatcher.java,Optional<Match> match = matcher.tryMatch();,if (matcher != null ) Optional<Match> match = matcher.tryMatch();
OptionEnum.java,CodeBlock names = c.parameter().getNames();,if (c != null ) CodeBlock names = c.parameter().getNames();
CoercionFactory.java,CodeBlock tailExpr = match.tailExpr();,if (match != null ) CodeBlock tailExpr = match.tailExpr();
CoercionFactory.java,CodeBlock extractExpr = match.extractExpr();,if (match != null ) CodeBlock extractExpr = match.extractExpr();
CoercionFactory.java,Skew skew = match.skew();,if (match != null ) Skew skew = match.skew();
CoercionFactory.java,ParameterSpec constructorParam = match.constructorParam();,if (match != null ) ParameterSpec constructorParam = match.constructorParam();
GeneratedClass.java,List<Parameter> params = context.parameters();,if (context != null ) List<Parameter> params = context.parameters();
GeneratedClass.java,List<NamedOption> options = context.options();,if (context != null ) List<NamedOption> options = context.options();
GeneratedClass.java,List<PositionalParameter> params = context.params();,if (context != null ) List<PositionalParameter> params = context.params();
OptionEnum.java,List<Parameter> parameters = context.parameters();,if (context != null ) List<Parameter> parameters = context.parameters();
OptionEnum.java,CodeBlock names = param.getNames();,if (param != null ) CodeBlock names = param.getNames();
OptionEnum.java,List<String> names = param.dashedNames();,if (param != null ) List<String> names = param.dashedNames();
CommandProcessingStep.java,List<ExecutableElement> sourceMethods = findRelevantMethods(sourceElement.asType());,if (findRelevantMethods(sourceElement != null ) List<ExecutableElement> sourceMethods = findRelevantMethods(sourceElement.asType());
CommandProcessingStep.java,sourceElement = element.getSuperclass();,if (element != null ) sourceElement = element.getSuperclass();
CommandProcessingStep.java,List<ExecutableElement> sourceMethods = findAllAbstractMethods(sourceElement.asType());,if (findAllAbstractMethods(sourceElement != null ) List<ExecutableElement> sourceMethods = findAllAbstractMethods(sourceElement.asType());
CommandProcessingStep.java,TypeMirror superclass = sourceElement.getSuperclass();,if (sourceElement != null ) TypeMirror superclass = sourceElement.getSuperclass();
ParameterMethodProcessingStep.java,Element enclosingElement = method.getEnclosingElement();,if (method != null ) Element enclosingElement = method.getEnclosingElement();
ParseMethod.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
OptionEnum.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
OptionEnum.java,List<NamedOption> options = context.options();,if (context != null ) List<NamedOption> options = context.options();
OptionEnum.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
OptionEnum.java,String enumConstant = param.enumConstant();,if (param != null ) String enumConstant = param.enumConstant();
OptionEnum.java,List<PositionalParameter> params = context.params();,if (context != null ) List<PositionalParameter> params = context.params();
OptionEnum.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
SuperArgumentsTest.java,SuperArguments result = success.getResult();,if (success != null ) SuperArguments result = success.getResult();
GeneratedClass.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
GeneratedClass.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
GeneratedClass.java,this.runBeforeExit = context.runBeforeExit();,if (context != null ) this.runBeforeExit = context.runBeforeExit();
OptionEnum.java,TypeSpec.Builder spec = TypeSpec.enumBuilder(context.optionType());,if (TypeSpec != null ) TypeSpec.Builder spec = TypeSpec.enumBuilder(context.optionType());
CommandProcessingStep.java,TypeSpec typeSpec = GeneratedClass.create(context).define();,if (GeneratedClass != null ) TypeSpec typeSpec = GeneratedClass.create(context).define();
OptionEnum.java,List<Parameter> options = context.options();,if (context != null ) List<Parameter> options = context.options();
OptionEnum.java,List<Parameter> params = context.params();,if (context != null ) List<Parameter> params = context.params();
GeneratedClass.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
CoercionFactory.java,CodeBlock mapExpr = success.mapExpr();,if (success != null ) CodeBlock mapExpr = success.mapExpr();
CoercionFactory.java,CodeBlock tailExpr = success.tailExpr();,if (success != null ) CodeBlock tailExpr = success.tailExpr();
CoercionFactory.java,CodeBlock extractExpr = success.extractExpr();,if (success != null ) CodeBlock extractExpr = success.extractExpr();
CoercionFactory.java,Skew skew = success.skew();,if (success != null ) Skew skew = success.skew();
CoercionFactory.java,ParameterSpec constructorParam = success.constructorParam();,if (success != null ) ParameterSpec constructorParam = success.constructorParam();
CoercionFactory.java,CodeBlock tailExpr = match.tailExpr();,if (match != null ) CodeBlock tailExpr = match.tailExpr();
CoercionFactory.java,CodeBlock extractExpr = match.extractExpr();,if (match != null ) CodeBlock extractExpr = match.extractExpr();
CoercionFactory.java,Skew skew = match.skew();,if (match != null ) Skew skew = match.skew();
CoercionFactory.java,ParameterSpec constructorParam = match.constructorParam();,if (match != null ) ParameterSpec constructorParam = match.constructorParam();
AutoMatcher.java,Optional<Match> success = matcher.tryMatch();,if (matcher != null ) Optional<Match> success = matcher.tryMatch();
MapperMatcher.java,Optional<Match> unwrap = matcher.tryMatch();,if (matcher != null ) Optional<Match> unwrap = matcher.tryMatch();
Coercion.java,CodeBlock tailExpr = match.tailExpr();,if (match != null ) CodeBlock tailExpr = match.tailExpr();
Coercion.java,CodeBlock extractExpr = match.extractExpr();,if (match != null ) CodeBlock extractExpr = match.extractExpr();
Coercion.java,Skew skew = match.skew();,if (match != null ) Skew skew = match.skew();
Coercion.java,ParameterSpec constructorParam = match.constructorParam();,if (match != null ) ParameterSpec constructorParam = match.constructorParam();
Coercion.java,CodeBlock mapExpr = success.mapExpr();,if (success != null ) CodeBlock mapExpr = success.mapExpr();
Coercion.java,CodeBlock tailExpr = success.tailExpr();,if (success != null ) CodeBlock tailExpr = success.tailExpr();
Coercion.java,CodeBlock extractExpr = success.extractExpr();,if (success != null ) CodeBlock extractExpr = success.extractExpr();
Coercion.java,Skew skew = success.skew();,if (success != null ) Skew skew = success.skew();
Coercion.java,ParameterSpec constructorParam = success.constructorParam();,if (success != null ) ParameterSpec constructorParam = success.constructorParam();
Coercion.java,CodeBlock tailExpr = matcher.tailExpr();,if (matcher != null ) CodeBlock tailExpr = matcher.tailExpr();
Coercion.java,CodeBlock extractExpr = unwrapSuccess.extractExpr();,if (unwrapSuccess != null ) CodeBlock extractExpr = unwrapSuccess.extractExpr();
Coercion.java,Skew skew = unwrapSuccess.skew();,if (unwrapSuccess != null ) Skew skew = unwrapSuccess.skew();
Coercion.java,ParameterSpec constructorParam = unwrapSuccess.constructorParam();,if (unwrapSuccess != null ) ParameterSpec constructorParam = unwrapSuccess.constructorParam();
Coercion.java,Skew skew = matcher.skew();,if (matcher != null ) Skew skew = matcher.skew();
AutoMatcher.java,Optional<UnwrapSuccess> success = matcher.tryUnwrapReturnType();,if (matcher != null ) Optional<UnwrapSuccess> success = matcher.tryUnwrapReturnType();
MapperMatcher.java,Optional<UnwrapSuccess> unwrap = matcher.tryUnwrapReturnType();,if (matcher != null ) Optional<UnwrapSuccess> unwrap = matcher.tryUnwrapReturnType();
Optionalish.java,TypeElement optional = tool.asTypeElement(Optional.class.getCanonicalName());,if (tool != null ) TypeElement optional = tool.asTypeElement(Optional.class.getCanonicalName());
Optionalish.java,TypeElement element = tool.asTypeElement(optionalPrimitive.wrappedObjectType());,if (tool != null ) TypeElement element = tool.asTypeElement(optionalPrimitive.wrappedObjectType());
CommandProcessingStep.java,TypeSpec typeSpec = GeneratedClass.create(context).define();,if (GeneratedClass != null ) TypeSpec typeSpec = GeneratedClass.create(context).define();
CommandProcessingStep.java,TypeSpec typeSpec = GeneratedClass.create(context).define();,if (GeneratedClass != null ) TypeSpec typeSpec = GeneratedClass.create(context).define();
CommandProcessingStep.java,OptionalInt order = param.positionalOrder();,if (param != null ) OptionalInt order = param.positionalOrder();
CommandProcessingStep.java,currentOrdinal = order.getAsInt();,if (order != null ) currentOrdinal = order.getAsInt();
CommandProcessingStep.java,TypeSpec typeSpec = GeneratedClass.create(context).define();,if (GeneratedClass != null ) TypeSpec typeSpec = GeneratedClass.create(context).define();
Util.java,String typeName = type.toString();,if (type != null ) String typeName = type.toString();
NamedOptionFactory.java,TypeMirror mirror = sourceMethod().getReturnType();,if (sourceMethod() != null ) TypeMirror mirror = sourceMethod().getReturnType();
NamedOptionFactory.java,"String argname = flag ? """" : ' ' + name.enumConstant();","if (name != null ) String argname = flag ? """" : ' ' + name.enumConstant();"
AutoMatcher.java,CodeBlock tailExpr = matcher.tailExpr();,if (matcher != null ) CodeBlock tailExpr = matcher.tailExpr();
AutoMatcher.java,CodeBlock extractExpr = unwrapSuccess.extractExpr();,if (unwrapSuccess != null ) CodeBlock extractExpr = unwrapSuccess.extractExpr();
AutoMatcher.java,Skew skew = matcher.skew();,if (matcher != null ) Skew skew = matcher.skew();
AutoMatcher.java,ParameterSpec constructorParam = unwrapSuccess.constructorParam();,if (unwrapSuccess != null ) ParameterSpec constructorParam = unwrapSuccess.constructorParam();
AutoMatcher.java,Matcher matcher = entry.getKey();,if (entry != null ) Matcher matcher = entry.getKey();
AutoMatcher.java,UnwrapSuccess unwrapSuccess = entry.getValue();,if (entry != null ) UnwrapSuccess unwrapSuccess = entry.getValue();
PositionalParamFactory.java,Coercion coercion = basicInfo.coercion();,if (basicInfo != null ) Coercion coercion = basicInfo.coercion();
ReferenceTool.java,TypeMirror outputType = functionType.outputType();,if (functionType != null ) TypeMirror outputType = functionType.outputType();
TypevarMapping.java,this.types = tool.types();,if (tool != null ) this.types = tool.types();
TypevarMapping.java,List<TypeMirror> result = new ArrayList<>(parameters.size());,if (ArrayList<>(parameters != null ) List<TypeMirror> result = new ArrayList<>(parameters.size());
ExpectedType.java,AnnotatedType[] interfaces = expectedClass.getAnnotatedInterfaces();,if (expectedClass != null ) AnnotatedType[] interfaces = expectedClass.getAnnotatedInterfaces();
TypevarMappingTest.java,TypeMirror returnType = getSetMethod.getReturnType();,if (getSetMethod != null ) TypeMirror returnType = getSetMethod.getReturnType();
TypevarMappingTest.java,TypeMirror substitute = mapping.substitute(string.asType());,if (mapping != null ) TypeMirror substitute = mapping.substitute(string.asType());
MapperClassValidator.java,TypeMirror inputType = functionType.inputType();,if (functionType != null ) TypeMirror inputType = functionType.inputType();
AutoMatcher.java,Optional<UnwrapSuccess> success = matcher.tryUnwrapReturnType();,if (matcher != null ) Optional<UnwrapSuccess> success = matcher.tryUnwrapReturnType();
OptionalishTest.java,TypeMirror wrapped = opt.get().wrappedType();,if (opt != null ) TypeMirror wrapped = opt.get().wrappedType();
OptionalishTest.java,TypeMirror wrapped = opt.get().wrappedType();,if (opt != null ) TypeMirror wrapped = opt.get().wrappedType();
NonFlagCoercion.java,this.skew = skew.widen();,if (skew != null ) this.skew = skew.widen();
OptionalPrimitive.java,this.type = type.getCanonicalName();,if (type != null ) this.type = type.getCanonicalName();
PositionalParamFactory.java,Coercion coercion = basicInfo.nonFlagCoercion();,if (basicInfo != null ) Coercion coercion = basicInfo.nonFlagCoercion();
OptionalMatcher.java,ParameterSpec constructorParam = constructorParam(opt.liftedType());,if (constructorParam(opt != null ) ParameterSpec constructorParam = constructorParam(opt.liftedType());
OptionalishTest.java,TypeMirror liftedType = opt.get().liftedType();,if (opt != null ) TypeMirror liftedType = opt.get().liftedType();
AutoMatcher.java,ParameterSpec constructorParam = constructorParam(unwrapSuccess.constructorParamType());,if (constructorParam(unwrapSuccess != null ) ParameterSpec constructorParam = constructorParam(unwrapSuccess.constructorParamType());
MapperMatcher.java,ParameterSpec constructorParam = constructorParam(unwrapSuccess.constructorParamType());,if (constructorParam(unwrapSuccess != null ) ParameterSpec constructorParam = constructorParam(unwrapSuccess.constructorParamType());
Matcher.java,ParameterSpec constructorParam = constructorParam(unwrapSuccess.constructorParamType());,if (constructorParam(unwrapSuccess != null ) ParameterSpec constructorParam = constructorParam(unwrapSuccess.constructorParamType());
AutoMatcher.java,ParameterSpec constructorParam = constructorParam(unwrapSuccess.liftedType());,if (constructorParam(unwrapSuccess != null ) ParameterSpec constructorParam = constructorParam(unwrapSuccess.liftedType());
Matcher.java,ParameterSpec constructorParam = constructorParam(unwrapSuccess.liftedType());,if (constructorParam(unwrapSuccess != null ) ParameterSpec constructorParam = constructorParam(unwrapSuccess.liftedType());
AutoMatcher.java,Optionalish optional = opt.get();,if (opt != null ) Optionalish optional = opt.get();
AutoMatcher.java,ParameterSpec param = constructorParam(optional.liftedType());,if (constructorParam(optional != null ) ParameterSpec param = constructorParam(optional.liftedType());
OptionalMatcher.java,TypeMirror testType = opt.wrappedType();,if (opt != null ) TypeMirror testType = opt.wrappedType();
OptionalMatcher.java,ParameterSpec constructorParam = constructorParam(opt.liftedType());,if (constructorParam(opt != null ) ParameterSpec constructorParam = constructorParam(opt.liftedType());
MapperMatcher.java,ParameterSpec param = constructorParam(optional.liftedType());,if (constructorParam(optional != null ) ParameterSpec param = constructorParam(optional.liftedType());
AutoMatcher.java,Types types = tool().types();,if (tool() != null ) Types types = tool().types();
AutoMapper.java,String canonicalName = coercion.getKey();,if (coercion != null ) String canonicalName = coercion.getKey();
ParameterScoped.java,Types types = tool().types();,if (tool() != null ) Types types = tool().types();
BasicInfo.java,Types types = tool().types();,if (tool() != null ) Types types = tool().types();
AutoMatcher.java,TypeMirror returnType = basicInfo.returnType();,if (basicInfo != null ) TypeMirror returnType = basicInfo.returnType();
AutoMatcher.java,ParameterSpec param = basicInfo.constructorParam(optional.liftedType());,if (basicInfo != null ) ParameterSpec param = basicInfo.constructorParam(optional.liftedType());
MapperMatcher.java,TypeMirror returnType = basicInfo.returnType();,if (basicInfo != null ) TypeMirror returnType = basicInfo.returnType();
MapperMatcher.java,ParameterSpec param = basicInfo.constructorParam(optional.liftedType());,if (basicInfo != null ) ParameterSpec param = basicInfo.constructorParam(optional.liftedType());
BasicInfo.java,Types types = tool.types();,if (tool != null ) Types types = tool.types();
ParameterFactory.java,String methodName = sourceMethod.getSimpleName().toString();,if (sourceMethod != null ) String methodName = sourceMethod.getSimpleName().toString();
ParameterFactory.java,TypeMirror mirror = sourceMethod.getReturnType();,if (sourceMethod != null ) TypeMirror mirror = sourceMethod.getReturnType();
ParameterFactory.java,"String argname = flag ? """" : ' ' + name.enumConstant();","if (name != null ) String argname = flag ? """" : ' ' + name.enumConstant();"
OptionEnum.java,List<String> names = param.names();,if (param != null ) List<String> names = param.names();
Parameter.java,String methodName = sourceMethod.getSimpleName().toString();,if (sourceMethod != null ) String methodName = sourceMethod.getSimpleName().toString();
Parameter.java,"String argname = flag ? """" : ' ' + name.enumConstant();","if (name != null ) String argname = flag ? """" : ' ' + name.enumConstant();"
Processor.java,Elements elements = processingEnv.getElementUtils();,if (processingEnv != null ) Elements elements = processingEnv.getElementUtils();
Processor.java,"TypeTool tool = new TypeTool(elements, processingEnv.getTypeUtils());","if (processingEnv != null ) TypeTool tool = new TypeTool(elements, processingEnv.getTypeUtils());"
Processor.java,Messager messager = processingEnv.getMessager();,if (processingEnv != null ) Messager messager = processingEnv.getMessager();
Processor.java,Filer filer = processingEnv.getFiler();,if (processingEnv != null ) Filer filer = processingEnv.getFiler();
Processor.java,TypeSpec typeSpec = GeneratedClass.create(context).define();,if (GeneratedClass != null ) TypeSpec typeSpec = GeneratedClass.create(context).define();
Processor.java,OptionalInt order = param.positionalOrder();,if (param != null ) OptionalInt order = param.positionalOrder();
Processor.java,currentOrdinal = order.getAsInt();,if (order != null ) currentOrdinal = order.getAsInt();
Processor.java,JavaFile javaFile = builder.build();,if (builder != null ) JavaFile javaFile = builder.build();
Processor.java,Filer filer = processingEnv.getFiler();,if (processingEnv != null ) Filer filer = processingEnv.getFiler();
Processor.java,String sourceCode = javaFile.toString();,if (javaFile != null ) String sourceCode = javaFile.toString();
Processor.java,TypeKind kind = mirror.getKind();,if (mirror != null ) TypeKind kind = mirror.getKind();
Processor.java,Element p = method.getEnclosingElement();,if (method != null ) Element p = method.getEnclosingElement();
Processor.java,Element enclosingElement = current.getEnclosingElement();,if (current != null ) Element enclosingElement = current.getEnclosingElement();
CoercionProvider.java,ParameterSpec constructorParam = basicInfo.constructorParam(basicInfo.returnType());,if (basicInfo != null ) ParameterSpec constructorParam = basicInfo.constructorParam(basicInfo.returnType());
CoercionProvider.java,TypeMirror inputType = collectorInfo.inputType();,if (collectorInfo != null ) TypeMirror inputType = collectorInfo.inputType();
CollectorClassValidatorTest.java,TypeElement element = tool.asTypeElement(clazz.getCanonicalName());,if (tool != null ) TypeElement element = tool.asTypeElement(clazz.getCanonicalName());
CollectorClassValidatorTest.java,Types types = tool.types();,if (tool != null ) Types types = tool.types();
TypeTool.java,TypeKind kind = mirror.getKind();,if (mirror != null ) TypeKind kind = mirror.getKind();
TypevarMapping.java,TypeMirror m = map.get(p.toString());,if (map != null ) TypeMirror m = map.get(p.toString());
TypeTool.java,String canonicalName = type.getCanonicalName();,if (type != null ) String canonicalName = type.getCanonicalName();
TypeTool.java,AnnotatedType[] interfaces = type.getAnnotatedInterfaces();,if (type != null ) AnnotatedType[] interfaces = type.getAnnotatedInterfaces();
Flattener.java,TypeMirror m = solution.get(p.toString());,if (solution != null ) TypeMirror m = solution.get(p.toString());
ReferenceTool.java,Class<E> expected = expectedType.expectedClass();,if (expectedType != null ) Class<E> expected = expectedType.expectedClass();
Resolver.java,DeclaredType declared = opt.get();,if (opt != null ) DeclaredType declared = opt.get();
HierarchyUtil.java,currentAnimal = relation.dog().asType();,if (relation != null ) currentAnimal = relation.dog().asType();
ReferenceToolTest.java,ReferencedType<Function> referencedType = referenceTool.getReferencedType();,if (referenceTool != null ) ReferencedType<Function> referencedType = referenceTool.getReferencedType();
Resolver.java,currentGoal = relation.dog().asType();,if (relation != null ) currentGoal = relation.dog().asType();
GeneratedClass.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
OptionEnum.java,List<Parameter> params = context.positionalParams();,if (context != null ) List<Parameter> params = context.positionalParams();
Context.java,String simpleName = sourceType.getSimpleName().toString();,if (sourceType != null ) String simpleName = sourceType.getSimpleName().toString();
Context.java,boolean helpParameterEnabled = !annotation.helpDisabled();,if (!annotation != null ) boolean helpParameterEnabled = !annotation.helpDisabled();
CoercionProvider.java,ParameterSpec constructorParam = basicInfo.constructorParam(basicInfo.originalReturnType());,if (basicInfo != null ) ParameterSpec constructorParam = basicInfo.constructorParam(basicInfo.originalReturnType());
CollectorAbsentAuto.java,TypeMirror returnType = basicInfo.originalReturnType();,if (basicInfo != null ) TypeMirror returnType = basicInfo.originalReturnType();
CollectorAbsentExplicit.java,TypeMirror returnType = basicInfo.originalReturnType();,if (basicInfo != null ) TypeMirror returnType = basicInfo.originalReturnType();
Processor.java,boolean anyMnemonics = methods.anyMnemonics();,if (methods != null ) boolean anyMnemonics = methods.anyMnemonics();
Processor.java,Element enclosingElement = method.getEnclosingElement();,if (method != null ) Element enclosingElement = method.getEnclosingElement();
CoercionProvider.java,TypeElement collectorClass = basicInfo.collectorClass().get();,if (basicInfo != null ) TypeElement collectorClass = basicInfo.collectorClass().get();
CoercionProvider.java,ParameterSpec constructorParam = basicInfo.constructorParam(basicInfo.originalReturnType());,if (basicInfo != null ) ParameterSpec constructorParam = basicInfo.constructorParam(basicInfo.originalReturnType());
CoercionProvider.java,ParameterSpec constructorParam = basicInfo.constructorParam(basicInfo.originalReturnType());,if (basicInfo != null ) ParameterSpec constructorParam = basicInfo.constructorParam(basicInfo.originalReturnType());
CoercionProvider.java,CollectorInfo collectorInfo = basicInfo.collectorInfo();,if (basicInfo != null ) CollectorInfo collectorInfo = basicInfo.collectorInfo();
CoercionProvider.java,CollectorInfo collectorInfo = basicInfo.collectorInfo();,if (basicInfo != null ) CollectorInfo collectorInfo = basicInfo.collectorInfo();
CoercionProvider.java,AbstractCollector collectorInfo = basicInfo.collectorInfo();,if (basicInfo != null ) AbstractCollector collectorInfo = basicInfo.collectorInfo();
CoercionProvider.java,AbstractCollector collectorInfo = basicInfo.collectorInfo();,if (basicInfo != null ) AbstractCollector collectorInfo = basicInfo.collectorInfo();
MapperClassValidatorTest.java,CodeBlock mapExpr = value.mapExpr();,if (value != null ) CodeBlock mapExpr = value.mapExpr();
Coercion.java,CodeBlock mapExpr = mapperType.mapExpr();,if (mapperType != null ) CodeBlock mapExpr = mapperType.mapExpr();
ParserState.java,CodeBlock.Builder builder = getStreamExpression(param).toBuilder();,if (getStreamExpression(param) != null ) CodeBlock.Builder builder = getStreamExpression(param).toBuilder();
CoercionProvider.java,ParameterSpec constructorParam = basicInfo.param(basicInfo.originalReturnType());,if (basicInfo != null ) ParameterSpec constructorParam = basicInfo.param(basicInfo.originalReturnType());
CoercionProvider.java,ParameterSpec constructorParam = basicInfo.param(basicInfo.originalReturnType());,if (basicInfo != null ) ParameterSpec constructorParam = basicInfo.param(basicInfo.originalReturnType());
CollectorAbsentAuto.java,ParameterSpec param = basicInfo.param(optional.liftedType());,if (basicInfo != null ) ParameterSpec param = basicInfo.param(optional.liftedType());
CollectorAbsentExplicit.java,ParameterSpec param = basicInfo.param(optional.liftedType());,if (basicInfo != null ) ParameterSpec param = basicInfo.param(optional.liftedType());
CoercionProvider.java,TypeMirror constructorParamType = basicInfo.originalReturnType();,if (basicInfo != null ) TypeMirror constructorParamType = basicInfo.originalReturnType();
CoercionProvider.java,TypeMirror constructorParamType = basicInfo.originalReturnType();,if (basicInfo != null ) TypeMirror constructorParamType = basicInfo.originalReturnType();
CollectorAbsentExplicit.java,either = attempt.findCoercion();,if (attempt != null ) either = attempt.findCoercion();
CollectorAbsentAuto.java,CanonicalOptional optional = canonicalOptional.get();,if (canonicalOptional != null ) CanonicalOptional optional = canonicalOptional.get();
CoercionProvider.java,AbstractCollector collectorInfo = collectorInfo(Optional.empty());,if (collectorInfo(Optional != null ) AbstractCollector collectorInfo = collectorInfo(Optional.empty());
Flattener.java,Preference pref = this.preference.get();,if (this != null ) Preference pref = this.preference.get();
CollectorClassValidator.java,TypeMirror preference = mapperPreference.get();,if (mapperPreference != null ) TypeMirror preference = mapperPreference.get();
CollectorClassValidator.java,TypeParameterElement p = findByName(t.toString()).getValue();,if (findByName(t != null ) TypeParameterElement p = findByName(t.toString()).getValue();
CollectorClassValidator.java,inputType = typeParameters.get(inputType.toString());,if (typeParameters != null ) inputType = typeParameters.get(inputType.toString());
GeneratedClass.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
GeneratedClass.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
GeneratedClass.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
GeneratedClass.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
GeneratedClass.java,CodeBlock.Builder spec = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder spec = CodeBlock.builder();
Tokenizer.java,CodeBlock.Builder spec = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder spec = CodeBlock.builder();
Processor.java,TypeSpec typeSpec = Parser.create(context).define();,if (Parser != null ) TypeSpec typeSpec = Parser.create(context).define();
Option.java,List<String> desc = param.description();,if (param != null ) List<String> desc = param.description();
Flattener.java,TypeMirror test = result.get(entry.getKey());,if (result != null ) TypeMirror test = result.get(entry.getKey());
TypeTool.java,TypeKind kind = typeArgument.getKind();,if (typeArgument != null ) TypeKind kind = typeArgument.getKind();
TypeToolTest.java,TypeMirror returnType = getSetMethod.getReturnType();,if (getSetMethod != null ) TypeMirror returnType = getSetMethod.getReturnType();
Resolver.java,DeclaredType declared = TypeTool.asDeclared(x.asType());,if (TypeTool != null ) DeclaredType declared = TypeTool.asDeclared(x.asType());
Flattener.java,TypeMirror current = result.get(entry.getKey());,if (result != null ) TypeMirror current = result.get(entry.getKey());
Flattener.java,TypeMirror current = out.get(entry.getKey());,if (out != null ) TypeMirror current = out.get(entry.getKey());
Flattener.java,TypeMirror m = result.get(typeParameter.toString());,if (result != null ) TypeMirror m = result.get(typeParameter.toString());
Option.java,List<Param> parameters = context.parameters();,if (context != null ) List<Param> parameters = context.parameters();
Context.java,String camel = sourceType.getSimpleName().toString();,if (sourceType != null ) String camel = sourceType.getSimpleName().toString();
ParserState.java,ParameterType parameterType = param.coercion().parameterType();,if (param != null ) ParameterType parameterType = param.coercion().parameterType();
Parser.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
ParserState.java,CodeBlock.Builder spec = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder spec = CodeBlock.builder();
Option.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Option.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Processor.java,tokens[i] = tokens[i].trim();,if (tokens[i] != null ) tokens[i] = tokens[i].trim();
Option.java,String argumentName = param.descriptionArgumentName();,if (param != null ) String argumentName = param.descriptionArgumentName();
Tokenizer.java,CodeBlock.Builder spec = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder spec = CodeBlock.builder();
Tokenizer.java,MethodSpec.Builder spec = MethodSpec.constructorBuilder();,if (MethodSpec != null ) MethodSpec.Builder spec = MethodSpec.constructorBuilder();
HelplessArgumentsTest.java,String message = out.toString();,if (out != null ) String message = out.toString();
HelplessArgumentsTest.java,String message = out.toString();,if (out != null ) String message = out.toString();
ParserTestFixture.java,E parsed = this.parsed.get();,if (this != null ) E parsed = this.parsed.get();
Option.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Option.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Option.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Param.java,char c = param.shortName();,if (param != null ) char c = param.shortName();
Param.java,String longName = param.longName();,if (param != null ) String longName = param.longName();
Parser.java,TypeSpec.Builder spec = TypeSpec.classBuilder(context.generatedClass());,if (TypeSpec != null ) TypeSpec.Builder spec = TypeSpec.classBuilder(context.generatedClass());
Tokenizer.java,CodeBlock.Builder spec = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder spec = CodeBlock.builder();
TypeTool.java,TypeElement element = tool.asTypeElement(type.asElement());,if (tool != null ) TypeElement element = tool.asTypeElement(type.asElement());
Util.java,List<ExecutableElement> constructors = ElementFilter.constructorsIn(classToCheck.getEnclosedElements());,if (ElementFilter != null ) List<ExecutableElement> constructors = ElementFilter.constructorsIn(classToCheck.getEnclosedElements());
Util.java,Element enclosingElement = current.getEnclosingElement();,if (current != null ) Element enclosingElement = current.getEnclosingElement();
Processor.java,Element enclosingElement = current.getEnclosingElement();,if (current != null ) Element enclosingElement = current.getEnclosingElement();
Processor.java,List<Param> result = new ArrayList<>(abstractMethods.size());,if (ArrayList<>(abstractMethods != null ) List<Param> result = new ArrayList<>(abstractMethods.size());
Processor.java,Element enclosingElement = method.getEnclosingElement();,if (method != null ) Element enclosingElement = method.getEnclosingElement();
Attempt.java,MapperType mapperType = MapperType.create(mapExpr.get());,if (MapperType != null ) MapperType mapperType = MapperType.create(mapExpr.get());
Solver.java,TypeMirror t = result.get(typeParameter.toString());,if (result != null ) TypeMirror t = result.get(typeParameter.toString());
Solver.java,TypeMirror current = result.get(entry.getKey());,if (result != null ) TypeMirror current = result.get(entry.getKey());
CollectorClassValidator.java,List<TypeMirror> solution = new ArrayList<>(typeParameters.size());,if (ArrayList<>(typeParameters != null ) List<TypeMirror> solution = new ArrayList<>(typeParameters.size());
CollectorClassValidator.java,String param = typeParameter.toString();,if (typeParameter != null ) String param = typeParameter.toString();
MapperClassAnalyzer.java,String key = tEntry.getKey();,if (tEntry != null ) String key = tEntry.getKey();
MapperClassAnalyzer.java,TypeMirror tSolution = tEntry.getValue();,if (tEntry != null ) TypeMirror tSolution = tEntry.getValue();
MapperClassValidator.java,TypeMirror t = result.get(typeParameter.toString());,if (result != null ) TypeMirror t = result.get(typeParameter.toString());
MapperClassValidator.java,TypeMirror current = result.get(entry.getKey());,if (result != null ) TypeMirror current = result.get(entry.getKey());
MapperClassValidator.java,TypeMirror typeMirror = m.get(entry.getKey());,if (m != null ) TypeMirror typeMirror = m.get(entry.getKey());
Resolver.java,DeclaredType declaredType = result.getKey();,if (result != null ) DeclaredType declaredType = result.getKey();
ReferenceTool.java,this.resolver = new Resolver(basicInfo.tool());,if (Resolver(basicInfo != null ) this.resolver = new Resolver(basicInfo.tool());
Resolver.java,currentGoal = tool.erasure(relation.dog());,if (tool != null ) currentGoal = tool.erasure(relation.dog());
ReferenceTool.java,this.expectedClass = expectation.expectedClass();,if (expectation != null ) this.expectedClass = expectation.expectedClass();
ResolverTest.java,TypeMirror typeMirror = result.get();,if (result != null ) TypeMirror typeMirror = result.get();
CollectorAbsentMapperAbsent.java,MapperType mapperType = MapperType.create(mapExpr.get());,if (MapperType != null ) MapperType mapperType = MapperType.create(mapExpr.get());
CollectorAbsentMapperAbsent.java,TypeMirror returnType = basicInfo.originalReturnType();,if (basicInfo != null ) TypeMirror returnType = basicInfo.originalReturnType();
CollectorAbsentMapperAbsent.java,CanonicalOptional optional = canonicalOptional.get();,if (canonicalOptional != null ) CanonicalOptional optional = canonicalOptional.get();
CollectorAbsentMapperPresent.java,TypeMirror returnType = basicInfo.originalReturnType();,if (basicInfo != null ) TypeMirror returnType = basicInfo.originalReturnType();
CollectorAbsentMapperPresent.java,either = attempt.findCoercion();,if (attempt != null ) either = attempt.findCoercion();
CanonicalOptionalTest.java,TypeMirror liftedType = opt.get().canonicalType();,if (opt != null ) TypeMirror liftedType = opt.get().canonicalType();
CollectorAbsentMapperAbsent.java,"MapperType mapperType = MapperType.create(expectedReturnType, autoMapper.get());","if (autoMapper != null ) MapperType mapperType = MapperType.create(expectedReturnType, autoMapper.get());"
AnnotationUtil.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
AnnotationUtil.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
Param.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
Param.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
TypeTool.java,TypeMirror string = asTypeElement(String.class).asType();,if (asTypeElement(String != null ) TypeMirror string = asTypeElement(String.class).asType();
Impl.java,MethodSpec.Builder builder = MethodSpec.constructorBuilder();,if (MethodSpec != null ) MethodSpec.Builder builder = MethodSpec.constructorBuilder();
Impl.java,CodeBlock extractExpr = p.coercion().extractExpr();,if (p != null ) CodeBlock extractExpr = p.coercion().extractExpr();
Impl.java,ParameterSpec constructorParam = p.coercion().constructorParam();,if (p != null ) ParameterSpec constructorParam = p.coercion().constructorParam();
OptionType.java,ParameterType parameterType = param.coercion().parameterType();,if (param != null ) ParameterType parameterType = param.coercion().parameterType();
Parser.java,OptionalInt order = param.positionalOrder();,if (param != null ) OptionalInt order = param.positionalOrder();
Parser.java,currentOrdinal = order.getAsInt();,if (order != null ) currentOrdinal = order.getAsInt();
Processor.java,TypeSpec typeSpec = Parser.create(context).define();,if (Parser != null ) TypeSpec typeSpec = Parser.create(context).define();
CanonicalOptionalTest.java,TypeMirror liftedType = opt.get().liftedType();,if (opt != null ) TypeMirror liftedType = opt.get().liftedType();
AutoMapper.java,CodeBlock.Builder lambda = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder lambda = CodeBlock.builder();
Param.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
Param.java,TypeMirror returnType = sourceMethod.getReturnType();,if (sourceMethod != null ) TypeMirror returnType = sourceMethod.getReturnType();
Param.java,boolean repeatable = coercion.repeatable();,if (coercion != null ) boolean repeatable = coercion.repeatable();
Param.java,boolean repeatable = coercion.repeatable();,if (coercion != null ) boolean repeatable = coercion.repeatable();
Param.java,boolean optional = coercion.optional();,if (coercion != null ) boolean optional = coercion.optional();
MapperAbsentCollectorAbsent.java,collector = Optional.empty();,if (Optional != null ) collector = Optional.empty();
MapperAbsentCollectorAbsent.java,mapExpr = findAutoMapper(optionalInfo.get());,if (findAutoMapper(optionalInfo != null ) mapExpr = findAutoMapper(optionalInfo.get());
MapperAbsentCollectorAbsent.java,extractExpr = liftedType.extractExpr();,if (liftedType != null ) extractExpr = liftedType.extractExpr();
MapperAbsentCollectorAbsent.java,collector = Optional.empty();,if (Optional != null ) collector = Optional.empty();
MapperAbsentCollectorAbsent.java,mapExpr = findAutoMapper(listInfo.get());,if (findAutoMapper(listInfo != null ) mapExpr = findAutoMapper(listInfo.get());
MapperAbsentCollectorAbsent.java,extractExpr = liftedType.extractExpr();,if (liftedType != null ) extractExpr = liftedType.extractExpr();
MapperAbsentCollectorAbsent.java,collector = Optional.empty();,if (Optional != null ) collector = Optional.empty();
MapperAbsentCollectorAbsent.java,collector = Optional.empty();,if (Optional != null ) collector = Optional.empty();
MapperAbsentCollectorAbsent.java,TypeMirror constructorParamType = liftedType.liftedType();,if (liftedType != null ) TypeMirror constructorParamType = liftedType.liftedType();
CoercionProvider.java,mapExpr = findAutoMapper(optionalInfo.get());,if (findAutoMapper(optionalInfo != null ) mapExpr = findAutoMapper(optionalInfo.get());
CoercionProvider.java,collector = Optional.empty();,if (Optional != null ) collector = Optional.empty();
CoercionProvider.java,mapExpr = findAutoMapper(listInfo.get());,if (findAutoMapper(listInfo != null ) mapExpr = findAutoMapper(listInfo.get());
CoercionProvider.java,collector = Optional.empty();,if (Optional != null ) collector = Optional.empty();
ExplicitMapperNotRepeatableHandler.java,constructorParamType = basicInfo.originalReturnType();,if (basicInfo != null ) constructorParamType = basicInfo.originalReturnType();
ExplicitMapperNotRepeatableHandler.java,collector = Optional.empty();,if (Optional != null ) collector = Optional.empty();
ExplicitMapperNotRepeatableHandler.java,extractExpr = liftedType.extractExpr();,if (liftedType != null ) extractExpr = liftedType.extractExpr();
ExplicitMapperNotRepeatableHandler.java,constructorParamType = liftedType.liftedType();,if (liftedType != null ) constructorParamType = liftedType.liftedType();
ExplicitMapperNotRepeatableHandler.java,collector = Optional.empty();,if (Optional != null ) collector = Optional.empty();
ExplicitMapperNotRepeatableHandler.java,extractExpr = liftedType.extractExpr();,if (liftedType != null ) extractExpr = liftedType.extractExpr();
ExplicitMapperNotRepeatableHandler.java,constructorParamType = liftedType.liftedType();,if (liftedType != null ) constructorParamType = liftedType.liftedType();
ExplicitMapperNotRepeatableHandler.java,collector = Optional.empty();,if (Optional != null ) collector = Optional.empty();
ExplicitMapperNotRepeatableHandler.java,constructorParamType = basicInfo.returnType();,if (basicInfo != null ) constructorParamType = basicInfo.returnType();
Parser.java,currentOrdinal = param.positionalOrder().ordinal();,if (param != null ) currentOrdinal = param.positionalOrder().ordinal();
Tokenizer.java,PositionalRank positionalRank = param.positionalOrder();,if (param != null ) PositionalRank positionalRank = param.positionalOrder();
ExplicitMapperNotRepeatableHandler.java,mapperType = getLeft(either).asOptional();,if (getLeft(either) != null ) mapperType = getLeft(either).asOptional();
ExplicitMapperNotRepeatableHandler.java,constructorParamType = basicInfo.returnType();,if (basicInfo != null ) constructorParamType = basicInfo.returnType();
ExplicitMapperNotRepeatableHandler.java,constructorParamType = basicInfo.returnType();,if (basicInfo != null ) constructorParamType = basicInfo.returnType();
ExplicitMapperNotRepeatableHandler.java,constructorParamType = basicInfo.returnType();,if (basicInfo != null ) constructorParamType = basicInfo.returnType();
CoercionProvider.java,constructorParamType = basicInfo.originalReturnType();,if (basicInfo != null ) constructorParamType = basicInfo.originalReturnType();
CoercionProvider.java,collector = Optional.empty();,if (Optional != null ) collector = Optional.empty();
CoercionProvider.java,extractExpr = liftedType.extractExpr();,if (liftedType != null ) extractExpr = liftedType.extractExpr();
CoercionProvider.java,constructorParamType = basicInfo.returnType();,if (basicInfo != null ) constructorParamType = basicInfo.returnType();
CoercionProvider.java,collector = Optional.empty();,if (Optional != null ) collector = Optional.empty();
CoercionProvider.java,constructorParamType = basicInfo.returnType();,if (basicInfo != null ) constructorParamType = basicInfo.returnType();
CoercionProvider.java,mapExpr = findMapExpr(optionalInfo.get());,if (findMapExpr(optionalInfo != null ) mapExpr = findMapExpr(optionalInfo.get());
CoercionProvider.java,mapExpr = findMapExpr(listInfo.get());,if (findMapExpr(listInfo != null ) mapExpr = findMapExpr(listInfo.get());
CoercionProvider.java,factory = findCoercion(optionalInfo.get());,if (findCoercion(optionalInfo != null ) factory = findCoercion(optionalInfo.get());
CoercionProvider.java,factory = findCoercion(listInfo.get());,if (findCoercion(listInfo != null ) factory = findCoercion(listInfo.get());
Coercion.java,TypeMirror innerType = mapperType.innerType();,if (mapperType != null ) TypeMirror innerType = mapperType.innerType();
Coercion.java,TypeName t = TypeName.get(collectorInfo.inputType());,if (TypeName != null ) TypeName t = TypeName.get(collectorInfo.inputType());
Coercion.java,TypeName r = TypeName.get(basicInfo.originalReturnType());,if (TypeName != null ) TypeName r = TypeName.get(basicInfo.originalReturnType());
ExplicitMapperCoercion.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
Coercion.java,TypeName r = TypeName.get(basicInfo.returnType());,if (TypeName != null ) TypeName r = TypeName.get(basicInfo.returnType());
CoercionProvider.java,TypeMirror constructorParamType = basicInfo.returnType();,if (basicInfo != null ) TypeMirror constructorParamType = basicInfo.returnType();
InferredAttributes.java,TypeMirror returnType = liftedType.liftedType();,if (liftedType != null ) TypeMirror returnType = liftedType.liftedType();
CoercionProvider.java,factory = findCoercion(basicInfo.optionalInfo().get());,if (findCoercion(basicInfo != null ) factory = findCoercion(basicInfo.optionalInfo().get());
CoercionFactory.java,MapperType type = mapperType.get();,if (mapperType != null ) MapperType type = mapperType.get();
CoercionFactory.java,MapperType type = mapperType.get();,if (mapperType != null ) MapperType type = mapperType.get();
CoercionProvider.java,extractExpr = liftedType.extractExpr();,if (liftedType != null ) extractExpr = liftedType.extractExpr();
CoercionProvider.java,constructorParamType = basicInfo.returnType();,if (basicInfo != null ) constructorParamType = basicInfo.returnType();
CoercionFactory.java,CodeBlock mapExpr = mapExpr(basicInfo.paramName());,if (mapExpr(basicInfo != null ) CodeBlock mapExpr = mapExpr(basicInfo.paramName());
CoercionFactory.java,"CodeBlock initMapper = initMapper(innerType, basicInfo.paramName());","if (basicInfo != null ) CodeBlock initMapper = initMapper(innerType, basicInfo.paramName());"
Param.java,boolean repeatable = attributes.repeatable();,if (attributes != null ) boolean repeatable = attributes.repeatable();
Param.java,boolean repeatable = attributes.repeatable();,if (attributes != null ) boolean repeatable = attributes.repeatable();
Param.java,boolean repeatable = attributes.repeatable();,if (attributes != null ) boolean repeatable = attributes.repeatable();
Param.java,boolean repeatable = attributes.repeatable();,if (attributes != null ) boolean repeatable = attributes.repeatable();
CoercionProvider.java,CoercionFactory coercion = findCoercion(collectorInfo.inputType());,if (findCoercion(collectorInfo != null ) CoercionFactory coercion = findCoercion(collectorInfo.inputType());
CoercionProvider.java,extractExpr = basicInfo.extractExpr(); // TODO,if (TODO != null ) extractExpr = basicInfo.extractExpr(); // TODO
CoercionFactory.java,TypeMirror constructorParamType = basicInfo.returnType();,if (basicInfo != null ) TypeMirror constructorParamType = basicInfo.returnType();
Param.java,boolean optional = attributes.optional();,if (attributes != null ) boolean optional = attributes.optional();
Param.java,boolean optional = attributes.optional();,if (attributes != null ) boolean optional = attributes.optional();
Coercion.java,Optional<Boolean> optional = Optional.empty();,if (Optional != null ) Optional<Boolean> optional = Optional.empty();
TypeTool.java,opt = solution.get(typeArgument.toString());,if (solution != null ) opt = solution.get(typeArgument.toString());
CoercionFactory.java,TypeName t = TypeName.get(collectorInfo.inputType());,if (TypeName != null ) TypeName t = TypeName.get(collectorInfo.inputType());
CoercionFactory.java,TypeName r = TypeName.get(basicInfo.returnType());,if (TypeName != null ) TypeName r = TypeName.get(basicInfo.returnType());
CoercionProvider.java,ParameterSpec mapperParam = mapperParam(collectorInfo.inputType());,if (mapperParam(collectorInfo != null ) ParameterSpec mapperParam = mapperParam(collectorInfo.inputType());
ReferenceTool.java,DeclaredType supplierType = supplier.get();,if (supplier != null ) DeclaredType supplierType = supplier.get();
MapperClassValidator.java,DeclaredType supplierType = supplier.get();,if (supplier != null ) DeclaredType supplierType = supplier.get();
CoercionProvider.java,Optional<String> hint = new HintProvider(basicInfo).findHint();,if (HintProvider(basicInfo) != null ) Optional<String> hint = new HintProvider(basicInfo).findHint();
PreciseTypeHint.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
RawCombinatorHint.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
OptionalHint.java,String qname = mirror.getQualifiedName().toString();,if (mirror != null ) String qname = mirror.getQualifiedName().toString();
Resolver.java,nextGoal = tool.erasure(relation.dog.asType());,if (tool != null ) nextGoal = tool.erasure(relation.dog.asType());
Resolver.java,nextGoal = tool.erasure(extension.baseClass.asType());,if (tool != null ) nextGoal = tool.erasure(extension.baseClass.asType());
Resolver.java,TypeMirror superclass = typeElement.getSuperclass();,if (typeElement != null ) TypeMirror superclass = typeElement.getSuperclass();
Resolver.java,DeclaredType input = extension.extensionClass();,if (extension != null ) DeclaredType input = extension.extensionClass();
CoercionFactory.java,"CodeBlock mapExpr = mapExpr(innerType, basicInfo.paramName());","if (basicInfo != null ) CodeBlock mapExpr = mapExpr(innerType, basicInfo.paramName());"
Helper.java,CodeBlock initMapper = param.coercion().initMapper();,if (param != null ) CodeBlock initMapper = param.coercion().initMapper();
ParamName.java,int length = input.length();,if (input != null ) int length = input.length();
Param.java,String name = snakeCase(sourceMethod.getSimpleName().toString());,if (snakeCase(sourceMethod != null ) String name = snakeCase(sourceMethod.getSimpleName().toString());
Util.java,int length = input.length();,if (input != null ) int length = input.length();
CoercionProvider.java,TypeMirror returnType = basicInfo.returnType();,if (basicInfo != null ) TypeMirror returnType = basicInfo.returnType();
StandardCoercions.java,this.hashCode = typeMirror.toString().hashCode();,if (typeMirror != null ) this.hashCode = typeMirror.toString().hashCode();
CoercionFactory.java,boolean useReturnType = basicInfo.isOptional() || basicInfo.isRepeatable();,if (basicInfo != null ) boolean useReturnType = basicInfo.isOptional() || basicInfo.isRepeatable();
MapperClassValidator.java,List<TypeMirror> solution = new ArrayList<>(typeParameters.size());,if (ArrayList<>(typeParameters != null ) List<TypeMirror> solution = new ArrayList<>(typeParameters.size());
MapperClassValidator.java,String param = typeParameter.toString();,if (typeParameter != null ) String param = typeParameter.toString();
Coercion.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
CoercionFactory.java,collectorParam = Optional.empty();,if (Optional != null ) collectorParam = Optional.empty();
MapperCoercion.java,CodeBlock.Builder typeParameterList = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder typeParameterList = CodeBlock.builder();
MapperCoercion.java,List<TypeMirror> solution = mapperType.solution();,if (mapperType != null ) List<TypeMirror> solution = mapperType.solution();
AnnotationUtil.java,TypeElement element = tool.asTypeElement(type.asElement());,if (tool != null ) TypeElement element = tool.asTypeElement(type.asElement());
MapperClassValidator.java,List<TypeMirror> solution = new ArrayList<>(typeParameters.size());,if (ArrayList<>(typeParameters != null ) List<TypeMirror> solution = new ArrayList<>(typeParameters.size());
MapperClassValidator.java,String param = typeParameter.toString();,if (typeParameter != null ) String param = typeParameter.toString();
MapperCoercion.java,CodeBlock.Builder typeParameterList = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder typeParameterList = CodeBlock.builder();
MapperCoercion.java,List<TypeMirror> solution = mapperType.solution();,if (mapperType != null ) List<TypeMirror> solution = mapperType.solution();
MapperClassValidator.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
TypeTool.java,TypeMirror value = solution.get(input.toString());,if (solution != null ) TypeMirror value = solution.get(input.toString());
InferredAttributes.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
InferredAttributes.java,"LiftedType liftedType = LiftedType.lift(originalReturnType, TypeTool.get());","if (TypeTool != null ) LiftedType liftedType = LiftedType.lift(originalReturnType, TypeTool.get());"
Param.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
Param.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
CoercionProvider.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
CoercionProvider.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
InferredAttributes.java,"LiftedType liftedType = LiftedType.lift(mirror, TypeTool.get());","if (TypeTool != null ) LiftedType liftedType = LiftedType.lift(mirror, TypeTool.get());"
BasicInfo.java,optionalInfo = Optional.empty();,if (Optional != null ) optionalInfo = Optional.empty();
CoercionProvider.java,TypeMirror returnType = sourceMethod.getReturnType();,if (sourceMethod != null ) TypeMirror returnType = sourceMethod.getReturnType();
Infer.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
OptionalInfo.java,TypeMirror returnType = liftedType.liftedType();,if (liftedType != null ) TypeMirror returnType = liftedType.liftedType();
OptionalInfo.java,TypeMirror returnType = basicInfo.returnType();,if (basicInfo != null ) TypeMirror returnType = basicInfo.returnType();
CollectorClassValidator.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
MapperClassValidator.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
OptionalInfo.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
CollectorClassValidator.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
LiftedType.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
LiftedType.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
LiftedType.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
MapperClassValidator.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
MapperClassValidator.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
Resolver.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
Resolver.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
Resolver.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
TypeToolTest.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
HelplessArgumentsTest.java,HelplessArguments args = opt.result().get();,if (opt != null ) HelplessArguments args = opt.result().get();
HelplessArgumentsTest.java,HelplessArguments args = opt.result().get();,if (opt != null ) HelplessArguments args = opt.result().get();
HelplessArgumentsTest.java,HelplessArguments args = opt.result().get();,if (opt != null ) HelplessArguments args = opt.result().get();
VariousArgumentsTest.java,VariousArguments args = parsed.get();,if (parsed != null ) VariousArguments args = parsed.get();
Messages.java,CodeBlock.Builder code = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder code = CodeBlock.builder();
Option.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Param.java,boolean repeatable = parameter.repeatable();,if (parameter != null ) boolean repeatable = parameter.repeatable();
Param.java,boolean flag = parameter.flag();,if (parameter != null ) boolean flag = parameter.flag();
Param.java,boolean repeatable = parameter.repeatable();,if (parameter != null ) boolean repeatable = parameter.repeatable();
LiftedType.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
Param.java,boolean optional = parameter.optional();,if (parameter != null ) boolean optional = parameter.optional();
Param.java,boolean optional = parameter.optional();,if (parameter != null ) boolean optional = parameter.optional();
Processor.java,String key = generatedClass.packageName() + '.' + generatedClass.simpleName();,if (generatedClass != null ) String key = generatedClass.packageName() + '.' + generatedClass.simpleName();
StandardCoercions.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
Processor.java,String sourceCode = javaFile.toString();,if (javaFile != null ) String sourceCode = javaFile.toString();
CoercionProvider.java,TypeMirror returnType = sourceMethod.getReturnType();,if (sourceMethod != null ) TypeMirror returnType = sourceMethod.getReturnType();
CoercionProvider.java,TypeMirror returnType = sourceMethod.getReturnType();,if (sourceMethod != null ) TypeMirror returnType = sourceMethod.getReturnType();
OptionalPrimitiveHint.java,String qname = mirror.getQualifiedName().toString();,if (mirror != null ) String qname = mirror.getQualifiedName().toString();
Param.java,TypeTool tt = TypeTool.get();,if (TypeTool != null ) TypeTool tt = TypeTool.get();
Resolver.java,TypeElement b = extension.baseClass();,if (extension != null ) TypeElement b = extension.baseClass();
Resolver.java,DeclaredType x = extension.extensionClass();,if (extension != null ) DeclaredType x = extension.extensionClass();
Resolver.java,TypeMirror xParam = xParams.get(entry.getKey());,if (xParams != null ) TypeMirror xParam = xParams.get(entry.getKey());
MapperClassValidator.java,List<Extension> extensions = resolver.extensions();,if (resolver != null ) List<Extension> extensions = resolver.extensions();
MapperClassValidator.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
Resolver.java,tmpname = tool.erasure(extension.baseClass.asType());,if (tool != null ) tmpname = tool.erasure(extension.baseClass.asType());
CoercionProvider.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
CoercionKind.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
Helper.java,CodeBlock mapExpr = param.coercion().map();,if (param != null ) CodeBlock mapExpr = param.coercion().map();
Tokenizer.java,PositionalOrder positionalOrder = param.positionalOrder();,if (param != null ) PositionalOrder positionalOrder = param.positionalOrder();
Option.java,TypeSpec.Builder spec = TypeSpec.enumBuilder(context.optionType());,if (TypeSpec != null ) TypeSpec.Builder spec = TypeSpec.enumBuilder(context.optionType());
Processor.java,List<Param> parameters = new ArrayList<>(abstractMethods.size());,if (ArrayList<>(abstractMethods != null ) List<Param> parameters = new ArrayList<>(abstractMethods.size());
Processor.java,PositionalOrder paramOrder = param.positionalOrder();,if (param != null ) PositionalOrder paramOrder = param.positionalOrder();
Processor.java,PositionalOrder previousOrder = previousPositional.positionalOrder();,if (previousPositional != null ) PositionalOrder previousOrder = previousPositional.positionalOrder();
TypeTool.java,TypeMirror result = solution.get(input.toString());,if (solution != null ) TypeMirror result = solution.get(input.toString());
TypeTool.java,String key = typeArgument.toString();,if (typeArgument != null ) String key = typeArgument.toString();
TypeToolTest.java,List<ExecutableElement> methods = ElementFilter.methodsIn(foo.getEnclosedElements());,if (ElementFilter != null ) List<ExecutableElement> methods = ElementFilter.methodsIn(foo.getEnclosedElements());
TypeToolTest.java,TypeMirror returnType = getSet.getReturnType();,if (getSet != null ) TypeMirror returnType = getSet.getReturnType();
TypeToolTest.java,List<ExecutableElement> methods = ElementFilter.methodsIn(foo.getEnclosedElements());,if (ElementFilter != null ) List<ExecutableElement> methods = ElementFilter.methodsIn(foo.getEnclosedElements());
TypeToolTest.java,TypeMirror returnType = getSet.getReturnType();,if (getSet != null ) TypeMirror returnType = getSet.getReturnType();
TypeToolTest.java,TypeTool tt = TypeTool.get();,if (TypeTool != null ) TypeTool tt = TypeTool.get();
CoercionProvider.java,TypeName mapperType = TypeName.get(mapperClass.asType());,if (TypeName != null ) TypeName mapperType = TypeName.get(mapperClass.asType());
CoercionProvider.java,TypeName mapperType = TypeName.get(mapperClass.asType());,if (TypeName != null ) TypeName mapperType = TypeName.get(mapperClass.asType());
SuppliedClassValidator.java,List<ExecutableElement> constructors = ElementFilter.constructorsIn(classToCheck.getEnclosedElements());,if (ElementFilter != null ) List<ExecutableElement> constructors = ElementFilter.constructorsIn(classToCheck.getEnclosedElements());
Param.java,longName = sourceMethod.getSimpleName().toString();,if (sourceMethod != null ) longName = sourceMethod.getSimpleName().toString();
Param.java,longName = param.longName();,if (param != null ) longName = param.longName();
Param.java,String name = snakeCase(sourceMethod.getSimpleName().toString());,if (snakeCase(sourceMethod != null ) String name = snakeCase(sourceMethod.getSimpleName().toString());
CoercionProvider.java,TypeMirror superclass = element.getSuperclass();,if (element != null ) TypeMirror superclass = element.getSuperclass();
RawCombinatorWarning.java,String qname = typeElement.getQualifiedName().toString();,if (typeElement != null ) String qname = typeElement.getQualifiedName().toString();
AnnotationUtil.java,String clazzName = clazz.getName();,if (clazz != null ) String clazzName = clazz.getName();
CoercionProvider.java,TypeMirror returnType = sourceMethod.getReturnType();,if (sourceMethod != null ) TypeMirror returnType = sourceMethod.getReturnType();
Resolver.java,tmpname = extension.baseClass.getQualifiedName().toString();,if (extension != null ) tmpname = extension.baseClass.getQualifiedName().toString();
CollectorClassValidator.java,TypeTool tool = TypeTool.get();,if (TypeTool != null ) TypeTool tool = TypeTool.get();
MapperClassUtil.java,Object annotationValueValue = annotationValue.getValue();,if (annotationValue != null ) Object annotationValueValue = annotationValue.getValue();
AnnotationSpec.java,Builder builder = builder(annotation.annotationType());,if (builder(annotation != null ) Builder builder = builder(annotation.annotationType());
AnnotationSpec.java,Method[] methods = annotation.annotationType().getDeclaredMethods();,if (annotation != null ) Method[] methods = annotation.annotationType().getDeclaredMethods();
AnnotationSpec.java,String name = executableElement.getSimpleName().toString();,if (executableElement != null ) String name = executableElement.getSimpleName().toString();
ClassName.java,clazz = clazz.getEnclosingClass();,if (clazz != null ) clazz = clazz.getEnclosingClass();
ClassName.java,String simpleName = element.getSimpleName().toString();,if (element != null ) String simpleName = element.getSimpleName().toString();
CodeBlock.java,p += matcher.regionEnd();,if (matcher != null ) p += matcher.regionEnd();
CodeBlock.java,CodeBlock otherBlock = other.builder.build();,if (other != null ) CodeBlock otherBlock = other.builder.build();
CodeWriter.java,ListIterator<String> partIterator = codeBlock.formatParts.listIterator();,if (codeBlock != null ) ListIterator<String> partIterator = codeBlock.formatParts.listIterator();
CodeWriter.java,String part = partIterator.next();,if (partIterator != null ) String part = partIterator.next();
CodeWriter.java,ClassName resolved = resolve(c.simpleName());,if (resolve(c != null ) ClassName resolved = resolve(c.simpleName());
CodeWriter.java,ClassName topLevelClassName = className.topLevelClassName();,if (className != null ) ClassName topLevelClassName = className.topLevelClassName();
CodeWriter.java,String simpleName = topLevelClassName.simpleName();,if (topLevelClassName != null ) String simpleName = topLevelClassName.simpleName();
FieldSpec.java,this.javadoc = builder.javadoc.build();,if (builder != null ) this.javadoc = builder.javadoc.build();
JavaFile.java,this.fileComment = builder.fileComment.build();,if (builder != null ) this.fileComment = builder.fileComment.build();
LineWrapper.java,column = indentLevel * indent.length();,if (indent != null ) column = indentLevel * indent.length();
LineWrapper.java,column += buffer.length();,if (buffer != null ) column += buffer.length();
MethodSpec.java,CodeBlock code = builder.code.build();,if (builder != null ) CodeBlock code = builder.code.build();
MethodSpec.java,this.javadoc = builder.javadoc.build();,if (builder != null ) this.javadoc = builder.javadoc.build();
MethodSpec.java,Element enclosingClass = method.getEnclosingElement();,if (method != null ) Element enclosingClass = method.getEnclosingElement();
MethodSpec.java,Set<Modifier> modifiers = method.getModifiers();,if (method != null ) Set<Modifier> modifiers = method.getModifiers();
MethodSpec.java,String methodName = method.getSimpleName().toString();,if (method != null ) String methodName = method.getSimpleName().toString();
MethodSpec.java,TypeVariable var = (TypeVariable) typeParameterElement.asType();,if (typeParameterElement != null ) TypeVariable var = (TypeVariable) typeParameterElement.asType();
MethodSpec.java,TypeMirror resolvedReturnType = executableType.getReturnType();,if (executableType != null ) TypeMirror resolvedReturnType = executableType.getReturnType();
ParameterSpec.java,TypeName type = TypeName.get(element.asType());,if (TypeName != null ) TypeName type = TypeName.get(element.asType());
ParameterSpec.java,String name = element.getSimpleName().toString();,if (element != null ) String name = element.getSimpleName().toString();
TypeName.java,result = resultBuilder.toString();,if (resultBuilder != null ) result = resultBuilder.toString();
TypeSpec.java,this.javadoc = builder.javadoc.build();,if (builder != null ) this.javadoc = builder.javadoc.build();
TypeSpec.java,this.staticBlock = builder.staticBlock.build();,if (builder != null ) this.staticBlock = builder.staticBlock.build();
TypeSpec.java,this.initializerBlock = builder.initializerBlock.build();,if (builder != null ) this.initializerBlock = builder.initializerBlock.build();
TypeSpec.java,this.annotations = Collections.emptyList();,if (Collections != null ) this.annotations = Collections.emptyList();
TypeSpec.java,this.modifiers = Collections.emptySet();,if (Collections != null ) this.modifiers = Collections.emptySet();
TypeSpec.java,this.typeVariables = Collections.emptyList();,if (Collections != null ) this.typeVariables = Collections.emptyList();
TypeSpec.java,this.superinterfaces = Collections.emptyList();,if (Collections != null ) this.superinterfaces = Collections.emptyList();
TypeSpec.java,this.enumConstants = Collections.emptyMap();,if (Collections != null ) this.enumConstants = Collections.emptyMap();
TypeSpec.java,this.fieldSpecs = Collections.emptyList();,if (Collections != null ) this.fieldSpecs = Collections.emptyList();
TypeSpec.java,this.methodSpecs = Collections.emptyList();,if (Collections != null ) this.methodSpecs = Collections.emptyList();
TypeSpec.java,this.typeSpecs = Collections.emptyList();,if (Collections != null ) this.typeSpecs = Collections.emptyList();
TypeSpec.java,this.originatingElements = Collections.emptyList();,if (Collections != null ) this.originatingElements = Collections.emptyList();
TypeSpec.java,implementsTypes = Collections.emptyList();,if (Collections != null ) implementsTypes = Collections.emptyList();
TypeVariableName.java,TypeParameterElement element = (TypeParameterElement) mirror.asElement();,if (mirror != null ) TypeParameterElement element = (TypeParameterElement) mirror.asElement();
TypeVariableName.java,String name = element.getSimpleName().toString();,if (element != null ) String name = element.getSimpleName().toString();
WildcardTypeName.java,TypeMirror extendsBound = mirror.getExtendsBound();,if (mirror != null ) TypeMirror extendsBound = mirror.getExtendsBound();
WildcardTypeName.java,TypeMirror superBound = mirror.getSuperBound();,if (mirror != null ) TypeMirror superBound = mirror.getSuperBound();
MapperClassValidator.java,List<ExecutableElement> constructors = ElementFilter.constructorsIn(mapperClass.getEnclosedElements());,if (ElementFilter != null ) List<ExecutableElement> constructors = ElementFilter.constructorsIn(mapperClass.getEnclosedElements());
CoercionProvider.java,TypeName mapperType = TypeName.get(mapperClass.asType());,if (TypeName != null ) TypeName mapperType = TypeName.get(mapperClass.asType());
Tokenizer.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Tokenizer.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Tokenizer.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Impl.java,ParameterSpec quote = option.context.quoteParam();,if (option != null ) ParameterSpec quote = option.context.quoteParam();
Impl.java,ParameterSpec collect = option.context.toArrayParam();,if (option != null ) ParameterSpec collect = option.context.toArrayParam();
OptionType.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
OptionType.java,valueExpr = param.coercion().jsonExpr();,if (param != null ) valueExpr = param.coercion().jsonExpr();
ParserTestFixture.java,ObjectNode node = MAPPER.createObjectNode();,if (MAPPER != null ) ObjectNode node = MAPPER.createObjectNode();
ParserTestFixture.java,String k = kvs[i].toString();,if (kvs[i] != null ) String k = kvs[i].toString();
ParserTestFixture.java,String jsonString = parsed.get().toString();,if (parsed != null ) String jsonString = parsed.get().toString();
CollectionWarning.java,String qname = mirror.getQualifiedName().toString();,if (mirror != null ) String qname = mirror.getQualifiedName().toString();
Impl.java,ParameterSpec quote = option.context.quoteParam();,if (option != null ) ParameterSpec quote = option.context.quoteParam();
CoercionProvider.java,TypeName mapperType = TypeName.get(mapperClass.asType());,if (TypeName != null ) TypeName mapperType = TypeName.get(mapperClass.asType());
TypeTool.java,DeclaredType result = solution.get(input.toString());,if (solution != null ) DeclaredType result = solution.get(input.toString());
MapperClassValidator.java,resolved = resolver.asMap();,if (resolver != null ) resolved = resolver.asMap();
CollectorClassValidatorTest.java,List<ExecutableElement> methods = ElementFilter.methodsIn(foo.getEnclosedElements());,if (ElementFilter != null ) List<ExecutableElement> methods = ElementFilter.methodsIn(foo.getEnclosedElements());
CollectorClassValidatorTest.java,TypeMirror getSetReturnType = getSet.getReturnType();,if (getSet != null ) TypeMirror getSetReturnType = getSet.getReturnType();
Helper.java,CodeBlock initCollector = param.coercion().initCollector();,if (param != null ) CodeBlock initCollector = param.coercion().initCollector();
CoercionProvider.java,TriggerKind tk = trigger(sourceMethod.getReturnType());,if (trigger(sourceMethod != null ) TriggerKind tk = trigger(sourceMethod.getReturnType());
Helper.java,CodeBlock initCollector = param.coercion().initCollector();,if (param != null ) CodeBlock initCollector = param.coercion().initCollector();
Resolver.java,TypeMirror typeMirror = xParams.get(entry.getKey());,if (xParams != null ) TypeMirror typeMirror = xParams.get(entry.getKey());
Resolver.java,TypeMirror typeMirror = xargs.get(entry.getKey());,if (xargs != null ) TypeMirror typeMirror = xargs.get(entry.getKey());
Resolver.java,List<TypeElement> family = HierarchyUtil.getFamilyTree(mapperClass.asType());,if (HierarchyUtil != null ) List<TypeElement> family = HierarchyUtil.getFamilyTree(mapperClass.asType());
Resolver.java,"Resolver resolver = new Resolver(map, Collections.emptyMap());","if (Collections != null ) Resolver resolver = new Resolver(map, Collections.emptyMap());"
Resolver.java,qname = extension.baseClass.getQualifiedName().toString();,if (extension != null ) qname = extension.baseClass.getQualifiedName().toString();
Helper.java,CodeBlock mapExpr = param.coercion().map();,if (param != null ) CodeBlock mapExpr = param.coercion().map();
MapperClassValidator.java,List<TypeElement> family = HierarchyUtil.getFamilyTree(mapperClass.asType());,if (HierarchyUtil != null ) List<TypeElement> family = HierarchyUtil.getFamilyTree(mapperClass.asType());
MapperClassValidator.java,qname = extension.baseClass.getQualifiedName().toString();,if (extension != null ) qname = extension.baseClass.getQualifiedName().toString();
MapperClassValidator.java,TypeMirror typeMirror = xargs.get(entry.getKey());,if (xargs != null ) TypeMirror typeMirror = xargs.get(entry.getKey());
MapperClassValidator.java,TypeMirror superclass = typeElement.getSuperclass();,if (typeElement != null ) TypeMirror superclass = typeElement.getSuperclass();
OptionType.java,valueExpr = param.coercion().jsonExpr();,if (param != null ) valueExpr = param.coercion().jsonExpr();
Impl.java,TypeSpec.Builder builder = TypeSpec.classBuilder(context.implType());,if (TypeSpec != null ) TypeSpec.Builder builder = TypeSpec.classBuilder(context.implType());
CoercionProvider.java,final TypeMirror trigger = triggerKind.getValue();,if (triggerKind != null ) final TypeMirror trigger = triggerKind.getValue();
CoercionProvider.java,TypeMirror trigger = triggerKind.getValue();,if (triggerKind != null ) TypeMirror trigger = triggerKind.getValue();
CoercionProvider.java,CoercionKind kind = triggerKind.getKey();,if (triggerKind != null ) CoercionKind kind = triggerKind.getKey();
CoercionProvider.java,TypeMirror triggerMirror = trigger(sourceMethod.getReturnType());,if (trigger(sourceMethod != null ) TypeMirror triggerMirror = trigger(sourceMethod.getReturnType());
GitArgumentsTest.java,String[] remainingArgs = result.remainingArgs();,if (result != null ) String[] remainingArgs = result.remainingArgs();
CoercionProvider.java,List<ExecutableElement> constructors = ElementFilter.constructorsIn(mapperClass.getEnclosedElements());,if (ElementFilter != null ) List<ExecutableElement> constructors = ElementFilter.constructorsIn(mapperClass.getEnclosedElements());
CoercionProvider.java,List<TypeMirror> interfaces = InterfaceUtil.allInterfaces(mapperClass.asType());,if (InterfaceUtil != null ) List<TypeMirror> interfaces = InterfaceUtil.allInterfaces(mapperClass.asType());
Processor.java,List<Param> result = new ArrayList<>(params.size());,if (ArrayList<>(params != null ) List<Param> result = new ArrayList<>(params.size());
Processor.java,PositionalOrder paramOrder = param.positionalOrder();,if (param != null ) PositionalOrder paramOrder = param.positionalOrder();
Processor.java,PositionalOrder previousOrder = previous.positionalOrder();,if (previous != null ) PositionalOrder previousOrder = previous.positionalOrder();
Processor.java,Set<Character> names = new HashSet<>(params.size());,if (HashSet<>(params != null ) Set<Character> names = new HashSet<>(params.size());
Processor.java,Character name = param.shortName();,if (param != null ) Character name = param.shortName();
Processor.java,Set<String> names = new HashSet<>(params.size());,if (HashSet<>(params != null ) Set<String> names = new HashSet<>(params.size());
Processor.java,String name = param.longName();,if (param != null ) String name = param.longName();
CoercionProvider.java,TypeName typeName = TypeName.get(sourceMethod.getReturnType());,if (TypeName != null ) TypeName typeName = TypeName.get(sourceMethod.getReturnType());
Option.java,String[] desc = param.description();,if (param != null ) String[] desc = param.description();
Param.java,result = name.toUpperCase();,if (name != null ) result = name.toUpperCase();
Option.java,String[] desc = getText(param.description());,if (getText(param != null ) String[] desc = getText(param.description());
Param.java,result = description.argumentName();,if (description != null ) result = description.argumentName();
Param.java,result = name.toUpperCase();,if (name != null ) result = name.toUpperCase();
HelplessArgumentsTest.java,HelplessArguments args = opt.get();,if (opt != null ) HelplessArguments args = opt.get();
HelplessArgumentsTest.java,HelplessArguments args = opt.get();,if (opt != null ) HelplessArguments args = opt.get();
HelplessArgumentsTest.java,HelplessArguments args = opt.get();,if (opt != null ) HelplessArguments args = opt.get();
CoercionProvider.java,TypeName typeName = TypeName.get(sourceMethod.getReturnType());,if (TypeName != null ) TypeName typeName = TypeName.get(sourceMethod.getReturnType());
Param.java,TypeElement typeElement = asType(declared.asElement());,if (asType(declared != null ) TypeElement typeElement = asType(declared.asElement());
OptionType.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Param.java,TypeMirror type = sourceMethod.getReturnType();,if (sourceMethod != null ) TypeMirror type = sourceMethod.getReturnType();
Param.java,TypeElement element = asType(declared.asElement());,if (asType(declared != null ) TypeElement element = asType(declared.asElement());
OptionType.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
OptionType.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
OptionType.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
OptionType.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
OptionType.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
OptionType.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
OptionType.java,TypeSpec.Builder builder = TypeSpec.enumBuilder(context.optionTypeType());,if (TypeSpec != null ) TypeSpec.Builder builder = TypeSpec.enumBuilder(context.optionTypeType());
OptionType.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Helper.java,CodeBlock.Builder args = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder args = CodeBlock.builder();
Option.java,TypeSpec.Builder builder = TypeSpec.enumBuilder(context.optionType());,if (TypeSpec != null ) TypeSpec.Builder builder = TypeSpec.enumBuilder(context.optionType());
Option.java,String[] desc = getText(param.description());,if (getText(param != null ) String[] desc = getText(param.description());
Option.java,String argumentName = param.descriptionArgumentName();,if (param != null ) String argumentName = param.descriptionArgumentName();
Helper.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
OptionType.java,MethodSpec.Builder builder = MethodSpec.constructorBuilder();,if (MethodSpec != null ) MethodSpec.Builder builder = MethodSpec.constructorBuilder();
Type.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Type.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Type.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Type.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Type.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Type.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Option.java,MethodSpec.Builder builder = MethodSpec.constructorBuilder();,if (MethodSpec != null ) MethodSpec.Builder builder = MethodSpec.constructorBuilder();
Option.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Processor.java,Set<String> names = new HashSet<>(params.size());,if (HashSet<>(params != null ) Set<String> names = new HashSet<>(params.size());
Processor.java,String name = param.shortName();,if (param != null ) String name = param.shortName();
Option.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Option.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Option.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Option.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
CurlArgumentsParser.java,Iterator<String> it = tokens.iterator();,if (tokens != null ) Iterator<String> it = tokens.iterator();
CurlArgumentsParser.java,String token = it.next();,if (it != null ) String token = it.next();
CurlArgumentsParsr.java,Iterator<String> it = tokens.iterator();,if (tokens != null ) Iterator<String> it = tokens.iterator();
CurlArgumentsParsr.java,String token = it.next();,if (it != null ) String token = it.next();
Helper.java,CodeBlock.Builder spec = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder spec = CodeBlock.builder();
Helper.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Helper.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Helper.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Parser.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Parser.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Parser.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Parser.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
ParserTestFixture.java,ObjectNode node = mapper.createObjectNode();,if (mapper != null ) ObjectNode node = mapper.createObjectNode();
ClassName.java,clazz = clazz.getEnclosingClass();,if (clazz != null ) clazz = clazz.getEnclosingClass();
ClassName.java,type = type.getEnclosingElement();,if (type != null ) type = type.getEnclosingElement();
CodeWriter.java,typeName = typeName.withoutAnnotations();,if (typeName != null ) typeName = typeName.withoutAnnotations();
LineWrapper.java,column = indentLevel * indent.length();,if (indent != null ) column = indentLevel * indent.length();
LineWrapper.java,column += buffer.length();,if (buffer != null ) column += buffer.length();
Option.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Parser.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Parser.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Helper.java,int maxPositional = option.context.maxPositional();,if (option != null ) int maxPositional = option.context.maxPositional();
Parser.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Helper.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Helper.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Helper.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Helper.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Impl.java,int maxPositional = context.maxPositional();,if (context != null ) int maxPositional = context.maxPositional();
GradleArgumentsTest.java,Option[] options = Option.values();,if (Option != null ) Option[] options = Option.values();
Param.java,String stopword = everythingAfter.value();,if (everythingAfter != null ) String stopword = everythingAfter.value();
Helper.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Impl.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Impl.java,Type optionType = param.optionType();,if (param != null ) Type optionType = param.optionType();
Helper.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Helper.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Param.java,TypeMirror type = executableElement.getReturnType();,if (executableElement != null ) TypeMirror type = executableElement.getReturnType();
Processor.java,Element enclosingElement = executableElement.getEnclosingElement();,if (executableElement != null ) Element enclosingElement = executableElement.getEnclosingElement();
Impl.java,OptionType optionType = param.optionType();,if (param != null ) OptionType optionType = param.optionType();
Processor.java,TypeSpec typeSpec = Parser.create(context).analyse();,if (Parser != null ) TypeSpec typeSpec = Parser.create(context).analyse();
Parser.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Processor.java,TypeSpec typeSpec = Analyser.create(context).analyse();,if (Analyser != null ) TypeSpec typeSpec = Analyser.create(context).analyse();
Analyser.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Binder.java,CodeBlock.Builder args = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder args = CodeBlock.builder();
Binder.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Param.java,TypeMirror type = variableElement.asType();,if (variableElement != null ) TypeMirror type = variableElement.asType();
CurlTest.java,Curl curl = binder.bind();,if (binder != null ) Curl curl = binder.bind();
GradleManTest.java,GradleMan gradleMan = binder.bind();,if (binder != null ) GradleMan gradleMan = binder.bind();
GradleManTest.java,GradleMan gradleMan = parse.bind();,if (parse != null ) GradleMan gradleMan = parse.bind();
GradleManTest.java,GradleMan gradleMan = binder.bind();,if (binder != null ) GradleMan gradleMan = binder.bind();
GradleManTest.java,GradleMan gradleMan = binder.bind();,if (binder != null ) GradleMan gradleMan = binder.bind();
GradleManTest.java,GradleMan gradleMan = binder.bind();,if (binder != null ) GradleMan gradleMan = binder.bind();
GradleManTest.java,GradleMan gradleMan = binder.bind();,if (binder != null ) GradleMan gradleMan = binder.bind();
GradleManTest.java,GradleMan gradleMan = binder.bind();,if (binder != null ) GradleMan gradleMan = binder.bind();
GradleManTest.java,GradleMan gradleMan = binder.bind();,if (binder != null ) GradleMan gradleMan = binder.bind();
GradleManTest.java,GradleMan gradleMan = binder.bind();,if (binder != null ) GradleMan gradleMan = binder.bind();
GradleManTest.java,GradleMan.Foo foo = binder.bind();,if (binder != null ) GradleMan.Foo foo = binder.bind();
NoNameTest.java,NoName noName = binder.bind();,if (binder != null ) NoName noName = binder.bind();
RmTest.java,Rm rm = binder.bind();,if (binder != null ) Rm rm = binder.bind();
Binder.java,CodeBlock.Builder args = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder args = CodeBlock.builder();
Binder.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Param.java,TypeMirror type = variableElement.asType();,if (variableElement != null ) TypeMirror type = variableElement.asType();
CurlTest.java,Curl curl = binder.bind();,if (binder != null ) Curl curl = binder.bind();
GradleManTest.java,GradleMan gradleMan = binder.bind();,if (binder != null ) GradleMan gradleMan = binder.bind();
GradleManTest.java,GradleMan gradleMan = parse.bind();,if (parse != null ) GradleMan gradleMan = parse.bind();
GradleManTest.java,GradleMan gradleMan = binder.bind();,if (binder != null ) GradleMan gradleMan = binder.bind();
GradleManTest.java,GradleMan gradleMan = binder.bind();,if (binder != null ) GradleMan gradleMan = binder.bind();
GradleManTest.java,GradleMan gradleMan = binder.bind();,if (binder != null ) GradleMan gradleMan = binder.bind();
GradleManTest.java,GradleMan gradleMan = binder.bind();,if (binder != null ) GradleMan gradleMan = binder.bind();
GradleManTest.java,GradleMan gradleMan = binder.bind();,if (binder != null ) GradleMan gradleMan = binder.bind();
GradleManTest.java,GradleMan gradleMan = binder.bind();,if (binder != null ) GradleMan gradleMan = binder.bind();
GradleManTest.java,GradleMan gradleMan = binder.bind();,if (binder != null ) GradleMan gradleMan = binder.bind();
GradleManTest.java,GradleMan.Foo foo = binder.bind();,if (binder != null ) GradleMan.Foo foo = binder.bind();
NoNameTest.java,NoName noName = binder.bind();,if (binder != null ) NoName noName = binder.bind();
RmTest.java,Rm rm = binder.bind();,if (binder != null ) Rm rm = binder.bind();
Param.java,String stopword = everythingAfter.value();,if (everythingAfter != null ) String stopword = everythingAfter.value();
Param.java,ln = longName.value();,if (longName != null ) ln = longName.value();
Param.java,sn = shortName.value();,if (shortName != null ) sn = shortName.value();
Param.java,ln = variableElement.getSimpleName().toString();,if (variableElement != null ) ln = variableElement.getSimpleName().toString();
Binder.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Processor.java,TypeSpec typeSpec = Analyser.create(constructor).analyse();,if (Analyser != null ) TypeSpec typeSpec = Analyser.create(constructor).analyse();
Param.java,TypeMirror type = var.asType();,if (var != null ) TypeMirror type = var.asType();
Param.java,TypeName type = TypeName.get(variableElement.asType());,if (TypeName != null ) TypeName type = TypeName.get(variableElement.asType());
Keys.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Names.java,TypeName type = TypeName.get(variableElement.asType());,if (TypeName != null ) TypeName type = TypeName.get(variableElement.asType());
Names.java,String stopword = everythingAfter.value();,if (everythingAfter != null ) String stopword = everythingAfter.value();
Names.java,ln = longName.value();,if (longName != null ) ln = longName.value();
Names.java,sn = shortName.value();,if (shortName != null ) sn = shortName.value();
Names.java,ln = variableElement.getSimpleName().toString();,if (variableElement != null ) ln = variableElement.getSimpleName().toString();
Argument.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Argument.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Processor.java,TypeSpec typeSpec = analyser.analyse();,if (analyser != null ) TypeSpec typeSpec = analyser.analyse();
Names.java,TypeName type = TypeName.get(variableElement.asType());,if (TypeName != null ) TypeName type = TypeName.get(variableElement.asType());
Option.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Option.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Names.java,sn = Character.toString(shortName.value());,if (Character != null ) sn = Character.toString(shortName.value());
Names.java,ln = longName.value();,if (longName != null ) ln = longName.value();
Names.java,sn = variableElement.getSimpleName().toString();,if (variableElement != null ) sn = variableElement.getSimpleName().toString();
Names.java,ln = longName.value();,if (longName != null ) ln = longName.value();
Names.java,sn = Character.toString(shortName.value());,if (Character != null ) sn = Character.toString(shortName.value());
Names.java,ln = variableElement.getSimpleName().toString();,if (variableElement != null ) ln = variableElement.getSimpleName().toString();
Analyser.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Option.java,String originalClassName = originalClass.simpleName();,if (originalClass != null ) String originalClassName = originalClass.simpleName();
Analyser.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
GradleManTest.java,GradleMan gradleMan = parser.bind();,if (parser != null ) GradleMan gradleMan = parser.bind();
GradleManTest.java,GradleMan gradleMan = parser.bind();,if (parser != null ) GradleMan gradleMan = parser.bind();
GradleManTest.java,GradleMan gradleMan = parser.bind();,if (parser != null ) GradleMan gradleMan = parser.bind();
GradleManTest.java,GradleMan gradleMan = parser.bind();,if (parser != null ) GradleMan gradleMan = parser.bind();
GradleManTest.java,GradleMan gradleMan = parser.bind();,if (parser != null ) GradleMan gradleMan = parser.bind();
GradleManTest.java,GradleMan gradleMan = parser.bind();,if (parser != null ) GradleMan gradleMan = parser.bind();
GradleManTest.java,GradleMan gradleMan = parser.bind();,if (parser != null ) GradleMan gradleMan = parser.bind();
GradleManTest.java,GradleMan.Foo foo = parser.bind();,if (parser != null ) GradleMan.Foo foo = parser.bind();
GradleManTest.java,GradleMan gradleMan = parser.bind();,if (parser != null ) GradleMan gradleMan = parser.bind();
Analyser.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Analyser.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Analyser.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Analyser.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
GradleManTest.java,GradleMan gradleMan = parser.parse();,if (parser != null ) GradleMan gradleMan = parser.parse();
GradleManTest.java,GradleMan gradleMan = parser.parse();,if (parser != null ) GradleMan gradleMan = parser.parse();
GradleManTest.java,GradleMan gradleMan = parser.parse();,if (parser != null ) GradleMan gradleMan = parser.parse();
GradleManTest.java,GradleMan gradleMan = parser.parse();,if (parser != null ) GradleMan gradleMan = parser.parse();
GradleManTest.java,GradleMan gradleMan = parser.parse();,if (parser != null ) GradleMan gradleMan = parser.parse();
GradleManTest.java,GradleMan gradleMan = parser.parse();,if (parser != null ) GradleMan gradleMan = parser.parse();
GradleManTest.java,GradleMan gradleMan = parser.parse();,if (parser != null ) GradleMan gradleMan = parser.parse();
GradleManTest.java,List<Argument> arguments = parser.arguments();,if (parser != null ) List<Argument> arguments = parser.arguments();
GradleManTest.java,GradleMan.Foo foo = parser.parse();,if (parser != null ) GradleMan.Foo foo = parser.parse();
Names.java,sn = shortName.value();,if (shortName != null ) sn = shortName.value();
Names.java,sn = shortName.value();,if (shortName != null ) sn = shortName.value();
LessElements.java,element = element.getEnclosingElement();,if (element != null ) element = element.getEnclosingElement();
GradleManTest.java,List<Option> options = GradleManParser.options();,if (GradleManParser != null ) List<Option> options = GradleManParser.options();
Analyser.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Analyser.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
GradleManTest.java,GradleMan gradleMan = parser.parse();,if (parser != null ) GradleMan gradleMan = parser.parse();
Analyser.java,CodeBlock.Builder builder = CodeBlock.builder();,if (CodeBlock != null ) CodeBlock.Builder builder = CodeBlock.builder();
Processor.java,Elements elements = processingEnv.getElementUtils();,if (processingEnv != null ) Elements elements = processingEnv.getElementUtils();
