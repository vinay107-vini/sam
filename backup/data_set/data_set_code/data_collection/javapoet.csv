Filename,Buggy/Deleted,Fixed/Added
MethodSpec.java,ParameterSpec.Builder builder = parameterSpec.toBuilder();,if (parameterSpec != null ) ParameterSpec.Builder builder = parameterSpec.toBuilder();
ClassName.java,type = type.getEnclosingElement();,if (type != null ) type = type.getEnclosingElement();
ClassName.java,return packageName == null || packageName.isEmpty();,if (packageName != null ) return packageName == null || packageName.isEmpty();
ClassName.java,clazz = clazz.getEnclosingClass();,if (clazz != null ) clazz = clazz.getEnclosingClass();
CodeWriter.java,typeName = typeName.withoutAnnotations();,if (typeName != null ) typeName = typeName.withoutAnnotations();
AnnotatedTypeNameTest.java,String actual = WildcardTypeName.supertypeOf(type).toString();,if (WildcardTypeName != null ) String actual = WildcardTypeName.supertypeOf(type).toString();
AnnotatedTypeNameTest.java,String actual = WildcardTypeName.subtypeOf(type).toString();,if (WildcardTypeName != null ) String actual = WildcardTypeName.subtypeOf(type).toString();
AnnotatedTypeNameTest.java,String actual = type.toString();,if (type != null ) String actual = type.toString();
AnnotatedTypeNameTest.java,String actual = type.toString();,if (type != null ) String actual = type.toString();
LineWrapper.java,column = indentLevel * indent.length();,if (indent != null ) column = indentLevel * indent.length();
LineWrapper.java,column += buffer.length();,if (buffer != null ) column += buffer.length();
ClassNameTest.java,TypeElement element = elements.getTypeElement(Object.class.getCanonicalName());,if (elements != null ) TypeElement element = elements.getTypeElement(Object.class.getCanonicalName());
MethodSpec.java,TypeName type = TypeName.get(parameter.asType());,if (TypeName != null ) TypeName type = TypeName.get(parameter.asType());
MethodSpec.java,String name = parameter.getSimpleName().toString();,if (parameter != null ) String name = parameter.getSimpleName().toString();
MethodSpec.java,Set<Modifier> parameterModifiers = parameter.getModifiers();,if (parameter != null ) Set<Modifier> parameterModifiers = parameter.getModifiers();
TypeVariableName.java,this.hashCode = name.hashCode() ^ bounds.hashCode();,if (bounds != null ) this.hashCode = name.hashCode() ^ bounds.hashCode();
WildcardTypeName.java,this.hashCode = upperBounds.hashCode() ^ lowerBounds.hashCode();,if (lowerBounds != null ) this.hashCode = upperBounds.hashCode() ^ lowerBounds.hashCode();
AnnotatedTypeNameTest.java,String actual = type.annotated(annotation).toString();,if (type != null ) String actual = type.annotated(annotation).toString();
AnnotatedTypeNameTest.java,String actual = type.annotated(annotation).toString();,if (type != null ) String actual = type.annotated(annotation).toString();
CodeWriter.java,ClassName enclosingClassName = className.enclosingClassName();,if (className != null ) ClassName enclosingClassName = className.enclosingClassName();
CodeWriter.java,List<String> classNames = className.simpleNames();,if (className != null ) List<String> classNames = className.simpleNames();
CodeBlock.java,Iterator<Character> iterChars = paramChars.iterator();,if (paramChars != null ) Iterator<Character> iterChars = paramChars.iterator();
CodeBlock.java,Iterator<Integer> iterIndexes = paramIndexes.iterator();,if (paramIndexes != null ) Iterator<Integer> iterIndexes = paramIndexes.iterator();
CodeBlock.java,char c = iterChars.next();,if (iterChars != null ) char c = iterChars.next();
CodeBlock.java,int index = iterIndexes.next();,if (iterIndexes != null ) int index = iterIndexes.next();
CodeBlock.java,Iterator<Object> i = Arrays.asList(args).iterator();,if (Arrays != null ) Iterator<Object> i = Arrays.asList(args).iterator();
TypeVariableName.java,TypeMirror upperBound = typeVariable.getUpperBound();,if (typeVariable != null ) TypeMirror upperBound = typeVariable.getUpperBound();
TypesTest.java,Types types = compilation.getTypes();,if (compilation != null ) Types types = compilation.getTypes();
TypesTest.java,Elements elements = compilation.getElements();,if (compilation != null ) Elements elements = compilation.getElements();
TypesTest.java,Types types = compilation.getTypes();,if (compilation != null ) Types types = compilation.getTypes();
TypesTest.java,Elements elements = compilation.getElements();,if (compilation != null ) Elements elements = compilation.getElements();
MethodSpecTest.java,DeclaredType classType = (DeclaredType) classElement.asType();,if (classElement != null ) DeclaredType classType = (DeclaredType) classElement.asType();
MethodSpecTest.java,DeclaredType classType = (DeclaredType) classElement.asType();,if (classElement != null ) DeclaredType classType = (DeclaredType) classElement.asType();
MethodSpecTest.java,MethodSpec method = MethodSpec.overriding(methodElement).build();,if (MethodSpec != null ) MethodSpec method = MethodSpec.overriding(methodElement).build();
MethodSpecTest.java,MethodSpec method = MethodSpec.overriding(methodElement).build();,if (MethodSpec != null ) MethodSpec method = MethodSpec.overriding(methodElement).build();
FileReadingTest.java,File classOutput = temporaryFolder.newFolder();,if (temporaryFolder != null ) File classOutput = temporaryFolder.newFolder();
Util.java,boolean containsSubset = set.isEmpty();,if (set != null ) boolean containsSubset = set.isEmpty();
WildcardTypeName.java,TypeName extendsBound = TypeName.get(mirror.getExtendsBound());,if (TypeName != null ) TypeName extendsBound = TypeName.get(mirror.getExtendsBound());
WildcardTypeName.java,TypeName superBound = TypeName.get(mirror.getSuperBound());,if (TypeName != null ) TypeName superBound = TypeName.get(mirror.getSuperBound());
FieldSpec.java,this.initializer = builder.initializer.build();,if (builder != null ) this.initializer = builder.initializer.build();
CodeWriter.java,Type[] extendsBounds = wildcardName.getUpperBounds();,if (wildcardName != null ) Type[] extendsBounds = wildcardName.getUpperBounds();
CodeWriter.java,Type[] superBounds = wildcardName.getLowerBounds();,if (wildcardName != null ) Type[] superBounds = wildcardName.getLowerBounds();
Types.java,int hashCode = Arrays.hashCode(typeArguments) ^ rawType.hashCode();,if (rawType != null ) int hashCode = Arrays.hashCode(typeArguments) ^ rawType.hashCode();
Types.java,int hashCode = componentType.hashCode();,if (componentType != null ) int hashCode = componentType.hashCode();
Types.java,int hashCode = name.hashCode();,if (name != null ) int hashCode = name.hashCode();
Types.java,TypeMirror upperBound = typeVariable.getUpperBound();,if (typeVariable != null ) TypeMirror upperBound = typeVariable.getUpperBound();
Types.java,Type extendsBound = get(mirror.getExtendsBound());,if (get(mirror != null ) Type extendsBound = get(mirror.getExtendsBound());
Types.java,Type superBound = get(mirror.getSuperBound());,if (get(mirror != null ) Type superBound = get(mirror.getSuperBound());
Types.java,ClassLoader classLoader = Types.class.getClassLoader();,if (Types != null ) ClassLoader classLoader = Types.class.getClassLoader();
Types.java,Object result = accessors.get(method.getName());,if (accessors != null ) Object result = accessors.get(method.getName());
CodeWriter.java,ImmutableList<String> classNames = className.simpleNames();,if (className != null ) ImmutableList<String> classNames = className.simpleNames();
TypeSpec.java,this.originatingElements = originatingElementsBuilder.build();,if (originatingElementsBuilder != null ) this.originatingElements = originatingElementsBuilder.build();
TypeSpec.java,implementsTypes = ImmutableList.of();,if (ImmutableList != null ) implementsTypes = ImmutableList.of();
TestFiler.java,originatingElementsMap = LinkedHashMultimap.create();,if (LinkedHashMultimap != null ) originatingElementsMap = LinkedHashMultimap.create();
Types.java,TypeMirror upperBound = mirror.getUpperBound();,if (mirror != null ) TypeMirror upperBound = mirror.getUpperBound();
TypesTest.java,Type[] bounds = typeVariable.getBounds();,if (typeVariable != null ) Type[] bounds = typeVariable.getBounds();
CodeBlock.java,this.formatParts = builder.formatParts.build();,if (builder != null ) this.formatParts = builder.formatParts.build();
CodeBlock.java,this.args = builder.args.build();,if (builder != null ) this.args = builder.args.build();
TypeSpec.java,implementsTypes = ImmutableList.of();,if (ImmutableList != null ) implementsTypes = ImmutableList.of();
Snippet.java,this.formatParts = formatPartsBuilder.build();,if (formatPartsBuilder != null ) this.formatParts = formatPartsBuilder.build();
ClassName.java,List<String> names = Lists.newArrayList();,if (Lists != null ) List<String> names = Lists.newArrayList();
ClassName.java,List<String> names = Lists.newArrayList();,if (Lists != null ) List<String> names = Lists.newArrayList();
ClassName.java,fullyQualifiedName = builder.append(simpleName()).toString();,if (builder != null ) fullyQualifiedName = builder.append(simpleName()).toString();
ClassName.java,String simpleName = element.getSimpleName().toString();,if (element != null ) String simpleName = element.getSimpleName().toString();
ClassName.java,List<String> enclosingNames = Lists.newArrayList();,if (Lists != null ) List<String> enclosingNames = Lists.newArrayList();
ClassName.java,Element current = element.getEnclosingElement();,if (element != null ) Element current = element.getEnclosingElement();
ClassName.java,current = current.getEnclosingElement();,if (current != null ) current = current.getEnclosingElement();
ClassName.java,List<String> enclosingNames = Lists.newArrayList();,if (Lists != null ) List<String> enclosingNames = Lists.newArrayList();
ClassName.java,current = current.getEnclosingClass();,if (current != null ) current = current.getEnclosingClass();
ClassName.java,type = type.getEnclosingElement();,if (type != null ) type = type.getEnclosingElement();
CodeWriter.java,ClassName enclosingClassName = className.enclosingClassName().orNull();,if (className != null ) ClassName enclosingClassName = className.enclosingClassName().orNull();
ClassName.java,Iterator<String> enclosingIterator = enclosingSimpleNames().iterator();,if (enclosingSimpleNames() != null ) Iterator<String> enclosingIterator = enclosingSimpleNames().iterator();
CodeWriter.java,TypeName upperBound = typeVariable.upperBound();,if (typeVariable != null ) TypeName upperBound = typeVariable.upperBound();
CodeWriter.java,TypeName extendsBound = wildcardName.extendsBound();,if (wildcardName != null ) TypeName extendsBound = wildcardName.extendsBound();
CodeWriter.java,TypeName superBound = wildcardName.superBound();,if (wildcardName != null ) TypeName superBound = wildcardName.superBound();
TypeVariableName.java,TypeMirror upperBound = mirror.getUpperBound();,if (mirror != null ) TypeMirror upperBound = mirror.getUpperBound();
ClassNameTest.java,Elements elements = compilationRule.getElements();,if (compilationRule != null ) Elements elements = compilationRule.getElements();
ClassNameTest.java,TypeElement element = elements.getTypeElement(ClassNameTest.class.getCanonicalName());,if (elements != null ) TypeElement element = elements.getTypeElement(ClassNameTest.class.getCanonicalName());
ClassNameTest.java,Elements elements = compilationRule.getElements();,if (compilationRule != null ) Elements elements = compilationRule.getElements();
ClassNameTest.java,TypeElement element = elements.getTypeElement(OuterClass.class.getCanonicalName());,if (elements != null ) TypeElement element = elements.getTypeElement(OuterClass.class.getCanonicalName());
ClassNameTest.java,Elements elements = compilationRule.getElements();,if (compilationRule != null ) Elements elements = compilationRule.getElements();
ClassNameTest.java,TypeElement element = elements.getTypeElement(InnerClass.class.getCanonicalName());,if (elements != null ) TypeElement element = elements.getTypeElement(InnerClass.class.getCanonicalName());
AnonymousClassWriter.java,this.constructorArguments = Optional.absent();,if (Optional != null ) this.constructorArguments = Optional.absent();
AnonymousClassWriter.java,this.body = ClassBodyWriter.forAnonymousType();,if (ClassBodyWriter != null ) this.body = ClassBodyWriter.forAnonymousType();
BlockWriter.java,this.snippets = Lists.newArrayList();,if (Lists != null ) this.snippets = Lists.newArrayList();
ClassBodyWriter.java,this.fieldWriters = Maps.newLinkedHashMap();,if (Maps != null ) this.fieldWriters = Maps.newLinkedHashMap();
ClassBodyWriter.java,this.constructorWriters = Lists.newArrayList();,if (Lists != null ) this.constructorWriters = Lists.newArrayList();
ClassBodyWriter.java,this.methodWriters = Lists.newArrayList();,if (Lists != null ) this.methodWriters = Lists.newArrayList();
ClassBodyWriter.java,this.nestedTypeWriters = Lists.newArrayList();,if (Lists != null ) this.nestedTypeWriters = Lists.newArrayList();
ClassWriter.java,this.supertype = Optional.absent();,if (Optional != null ) this.supertype = Optional.absent();
ClassWriter.java,this.typeVariables = Lists.newArrayList();,if (Lists != null ) this.typeVariables = Lists.newArrayList();
ConstructorWriter.java,this.typeVariables = Lists.newArrayList();,if (Lists != null ) this.typeVariables = Lists.newArrayList();
ConstructorWriter.java,this.parameterWriters = Maps.newLinkedHashMap();,if (Maps != null ) this.parameterWriters = Maps.newLinkedHashMap();
EnumWriter.java,this.constructorSnippets = Lists.newArrayList();,if (Lists != null ) this.constructorSnippets = Lists.newArrayList();
EnumWriter.java,this.body = ClassBodyWriter.forAnonymousType();,if (ClassBodyWriter != null ) this.body = ClassBodyWriter.forAnonymousType();
FieldWriter.java,this.initializer = Optional.absent();,if (Optional != null ) this.initializer = Optional.absent();
IndentingAppendable.java,CharSequence line = lines.next();,if (lines != null ) CharSequence line = lines.next();
InterfaceWriter.java,this.typeVariables = Lists.newArrayList();,if (Lists != null ) this.typeVariables = Lists.newArrayList();
JavaWriter.java,typeWriters = Lists.newArrayList();,if (Lists != null ) typeWriters = Lists.newArrayList();
JavaWriter.java,ClassName typeName = typeWriter.name();,if (typeWriter != null ) ClassName typeName = typeWriter.name();
JavaWriter.java,String packageName = typeName.packageName();,if (typeName != null ) String packageName = typeName.packageName();
JavaWriter.java,ClassName typeName = typeWriter.name();,if (typeWriter != null ) ClassName typeName = typeWriter.name();
JavaWriter.java,String packageName = typeName.packageName();,if (typeName != null ) String packageName = typeName.packageName();
JavaWriter.java,Writer closeable = sourceFile.openWriter();,if (sourceFile != null ) Writer closeable = sourceFile.openWriter();
JavaWriter.java,Closer closer = Closer.create();,if (Closer != null ) Closer closer = Closer.create();
MethodWriter.java,this.typeVariables = Lists.newArrayList();,if (Lists != null ) this.typeVariables = Lists.newArrayList();
MethodWriter.java,this.parameterWriters = Maps.newLinkedHashMap();,if (Maps != null ) this.parameterWriters = Maps.newLinkedHashMap();
MethodWriter.java,this.throwsTypes = Lists.newArrayList();,if (Lists != null ) this.throwsTypes = Lists.newArrayList();
Modifiable.java,this.annotations = Lists.newArrayList();,if (Lists != null ) this.annotations = Lists.newArrayList();
Snippet.java,Iterator<Snippet> iterator = parameterSnippets.iterator();,if (parameterSnippets != null ) Iterator<Snippet> iterator = parameterSnippets.iterator();
Snippet.java,Snippet firstSnippet = iterator.next();,if (iterator != null ) Snippet firstSnippet = iterator.next();
Snippet.java,Snippet nextSnippet = iterator.next();,if (iterator != null ) Snippet nextSnippet = iterator.next();
TypeWriter.java,this.implementedTypes = Lists.newArrayList();,if (Lists != null ) this.implementedTypes = Lists.newArrayList();
TypeWriter.java,this.explicitImports = Lists.newArrayList();,if (Lists != null ) this.explicitImports = Lists.newArrayList();
TypeWriter.java,this.originatingElements = Lists.newArrayList();,if (Lists != null ) this.originatingElements = Lists.newArrayList();
TypeWriter.java,String packageName = name().packageName();,if (name() != null ) String packageName = name().packageName();
TypeWriter.java,TypeWriter currentType = declaredTypes.pop();,if (declaredTypes != null ) TypeWriter currentType = declaredTypes.pop();
TypeWriter.java,ImmutableSet<String> declaredSimpleNames = declaredSimpleNamesBuilder.build();,if (declaredSimpleNamesBuilder != null ) ImmutableSet<String> declaredSimpleNames = declaredSimpleNamesBuilder.build();
TypeWriter.java,importCandidate = importCandidate.get().enclosingClassName();,if (importCandidate != null ) importCandidate = importCandidate.get().enclosingClassName();
TypeWriter.java,Optional<ClassName> enclosingClassName = className.enclosingClassName();,if (className != null ) Optional<ClassName> enclosingClassName = className.enclosingClassName();
TypeWriter.java,enclosingClassName = enclosingClassName.get().enclosingClassName();,if (enclosingClassName != null ) enclosingClassName = enclosingClassName.get().enclosingClassName();
Writables.java,boolean needsWrap = parts.hasNext();,if (parts != null ) boolean needsWrap = parts.hasNext();
AnonymousClassWriterTest.java,ConstructorWriter constructorWriter = classWriter.addConstructor();,if (classWriter != null ) ConstructorWriter constructorWriter = classWriter.addConstructor();
AnonymousClassWriterTest.java,ConstructorWriter constructorWriter = classWriter.addConstructor();,if (classWriter != null ) ConstructorWriter constructorWriter = classWriter.addConstructor();
EnumWriterTest.java,ConstructorWriter constructorWriterWriter = enumWriter.addConstructor();,if (enumWriter != null ) ConstructorWriter constructorWriterWriter = enumWriter.addConstructor();
ClassName.java,current = clazz.getEnclosingClass();,if (clazz != null ) current = clazz.getEnclosingClass();
TestFiler.java,Path locationPath = fileSystemRoot.resolve(location.getName());,if (fileSystemRoot != null ) Path locationPath = fileSystemRoot.resolve(location.getName());
ClassWriter.java,this.constructorWriters = Lists.newArrayList();,if (Lists != null ) this.constructorWriters = Lists.newArrayList();
ClassWriter.java,ConstructorWriter constructorWriter = new ConstructorWriter(name.simpleName());,if (ConstructorWriter(name != null ) ConstructorWriter constructorWriter = new ConstructorWriter(name.simpleName());
EnumWriter.java,ConstructorWriter constructorWriter = new ConstructorWriter(name.simpleName());,if (ConstructorWriter(name != null ) ConstructorWriter constructorWriter = new ConstructorWriter(name.simpleName());
TypeWriter.java,this.nestedTypeWriters = Lists.newArrayList();,if (Lists != null ) this.nestedTypeWriters = Lists.newArrayList();
AnonymousClassWriter.java,this.methodWriters = Lists.newArrayList();,if (Lists != null ) this.methodWriters = Lists.newArrayList();
AnonymousClassWriter.java,this.fieldWriters = Maps.newLinkedHashMap();,if (Maps != null ) this.fieldWriters = Maps.newLinkedHashMap();
TypeWriter.java,this.methodWriters = Lists.newArrayList();,if (Lists != null ) this.methodWriters = Lists.newArrayList();
TypeWriter.java,this.fieldWriters = Maps.newLinkedHashMap();,if (Maps != null ) this.fieldWriters = Maps.newLinkedHashMap();
AnonymousClassWriter.java,arguments = Optional.absent();,if (Optional != null ) arguments = Optional.absent();
AnonymousClassWriter.java,typeVariables = Lists.newArrayList();,if (Lists != null ) typeVariables = Lists.newArrayList();
AnonymousClassWriterTest.java,ConstructorWriter constructorWriter = classWriter.addConstructor();,if (classWriter != null ) ConstructorWriter constructorWriter = classWriter.addConstructor();
AnonymousClassWriterTest.java,ConstructorWriter constructorWriter = classWriter.addConstructor();,if (classWriter != null ) ConstructorWriter constructorWriter = classWriter.addConstructor();
MethodWriter.java,this.body = Optional.absent();,if (Optional != null ) this.body = Optional.absent();
ClassWriter.java,Iterator<TypeVariableName> typeVariablesIterator = typeVariables.iterator();,if (typeVariables != null ) Iterator<TypeVariableName> typeVariablesIterator = typeVariables.iterator();
ClassWriter.java,Iterator<TypeName> implementedTypesIterator = implementedTypes.iterator();,if (implementedTypes != null ) Iterator<TypeName> implementedTypesIterator = implementedTypes.iterator();
ConstructorWriter.java,Iterator<TypeVariableName> typeVariablesIterator = typeVariables.iterator();,if (typeVariables != null ) Iterator<TypeVariableName> typeVariablesIterator = typeVariables.iterator();
ConstructorWriter.java,Iterator<VariableWriter> parameterWritersIterator = parameterWriters.values().iterator();,if (parameterWriters != null ) Iterator<VariableWriter> parameterWritersIterator = parameterWriters.values().iterator();
EnumWriter.java,Iterator<TypeName> implementedTypesIterator = implementedTypes.iterator();,if (implementedTypes != null ) Iterator<TypeName> implementedTypesIterator = implementedTypes.iterator();
EnumWriter.java,Iterator<Snippet> snippetIterator = constructorSnippets.iterator();,if (constructorSnippets != null ) Iterator<Snippet> snippetIterator = constructorSnippets.iterator();
InterfaceWriter.java,Iterator<TypeVariableName> typeVariablesIterator = typeVariables.iterator();,if (typeVariables != null ) Iterator<TypeVariableName> typeVariablesIterator = typeVariables.iterator();
InterfaceWriter.java,Iterator<TypeName> implementedTypesIterator = implementedTypes.iterator();,if (implementedTypes != null ) Iterator<TypeName> implementedTypesIterator = implementedTypes.iterator();
IntersectionTypeName.java,Iterator<TypeName> iterator = typeNames.iterator();,if (typeNames != null ) Iterator<TypeName> iterator = typeNames.iterator();
MethodWriter.java,Iterator<TypeVariableName> typeVariablesIterator = typeVariables.iterator();,if (typeVariables != null ) Iterator<TypeVariableName> typeVariablesIterator = typeVariables.iterator();
MethodWriter.java,Iterator<VariableWriter> parameterWritersIterator = parameterWriters.values().iterator();,if (parameterWriters != null ) Iterator<VariableWriter> parameterWritersIterator = parameterWriters.values().iterator();
TypeVariableName.java,Iterator<TypeName> boundsIterator = bounds.iterator();,if (bounds != null ) Iterator<TypeName> boundsIterator = bounds.iterator();
JavaWriter.java,this.typeWriters = Lists.newArrayList();,if (Lists != null ) this.typeWriters = Lists.newArrayList();
JavaWriter.java,this.explicitImports = Lists.newArrayList();,if (Lists != null ) this.explicitImports = Lists.newArrayList();
JavaWriter.java,TypeWriter currentType = declaredTypes.pop();,if (declaredTypes != null ) TypeWriter currentType = declaredTypes.pop();
JavaWriter.java,ImmutableSet<String> declaredSimpleNames = declaredSimpleNamesBuilder.build();,if (declaredSimpleNamesBuilder != null ) ImmutableSet<String> declaredSimpleNames = declaredSimpleNamesBuilder.build();
JavaWriter.java,importCandidate = importCandidate.get().enclosingClassName();,if (importCandidate != null ) importCandidate = importCandidate.get().enclosingClassName();
JavaWriter.java,Closer closer = Closer.create();,if (Closer != null ) Closer closer = Closer.create();
JavaWriter.java,Optional<ClassName> enclosingClassName = className.enclosingClassName();,if (className != null ) Optional<ClassName> enclosingClassName = className.enclosingClassName();
JavaWriter.java,enclosingClassName = enclosingClassName.get().enclosingClassName();,if (enclosingClassName != null ) enclosingClassName = enclosingClassName.get().enclosingClassName();
TypeWriter.java,this.supertype = Optional.absent();,if (Optional != null ) this.supertype = Optional.absent();
JavaWriter.java,this.typeWriters = Lists.newArrayList();,if (Lists != null ) this.typeWriters = Lists.newArrayList();
JavaWriter.java,this.explicitImports = Lists.newArrayList();,if (Lists != null ) this.explicitImports = Lists.newArrayList();
JavaWriter.java,TypeWriter currentType = declaredTypes.pop();,if (declaredTypes != null ) TypeWriter currentType = declaredTypes.pop();
JavaWriter.java,ImmutableSet<String> declaredSimpleNames = declaredSimpleNamesBuilder.build();,if (declaredSimpleNamesBuilder != null ) ImmutableSet<String> declaredSimpleNames = declaredSimpleNamesBuilder.build();
JavaWriter.java,importCandidate = importCandidate.get().enclosingClassName();,if (importCandidate != null ) importCandidate = importCandidate.get().enclosingClassName();
JavaWriter.java,Closer closer = Closer.create();,if (Closer != null ) Closer closer = Closer.create();
JavaWriter.java,Optional<ClassName> enclosingClassName = className.enclosingClassName();,if (className != null ) Optional<ClassName> enclosingClassName = className.enclosingClassName();
JavaWriter.java,enclosingClassName = enclosingClassName.get().enclosingClassName();,if (enclosingClassName != null ) enclosingClassName = enclosingClassName.get().enclosingClassName();
JavaWriter.java,String compressed = name.substring(packagePrefix.length());,if (name != null ) String compressed = name.substring(packagePrefix.length());
JavaWriter.java,Iterator<String> iterator = names.iterator();,if (names != null ) Iterator<String> iterator = names.iterator();
JavaWriter.java,String name = iterator.next();,if (iterator != null ) String name = iterator.next();
JavaWriter.java,Object value = entry.getValue();,if (entry != null ) Object value = entry.getValue();
JavaWriter.java,Scope popped = scopes.pop();,if (scopes != null ) Scope popped = scopes.pop();
ClassWriter.java,this.fieldWriters = Maps.newLinkedHashMap();,if (Maps != null ) this.fieldWriters = Maps.newLinkedHashMap();
TypeWriter.java,nestedTypeWriters = Lists.newArrayList();,if (Lists != null ) nestedTypeWriters = Lists.newArrayList();
ClassWriter.java,this.nestedTypeWriters = Lists.newArrayList();,if (Lists != null ) this.nestedTypeWriters = Lists.newArrayList();
InterfaceWriter.java,this.nestedTypeWriters = Lists.newArrayList();,if (Lists != null ) this.nestedTypeWriters = Lists.newArrayList();
ClassWriter.java,this.fieldWriters = Lists.newArrayList();,if (Lists != null ) this.fieldWriters = Lists.newArrayList();
ClassWriter.java,this.methodWriters = Lists.newArrayList();,if (Lists != null ) this.methodWriters = Lists.newArrayList();
InterfaceWriter.java,this.methodWriters = Lists.newArrayList();,if (Lists != null ) this.methodWriters = Lists.newArrayList();
JavaWriter.java,Scope beginScope = scopes.getFirst();,if (scopes != null ) Scope beginScope = scopes.getFirst();
JavaWriter.java,final String name = iterator.next();,if (iterator != null ) final String name = iterator.next();
JavaWriter.java,Scope scope = scopes.peekFirst();,if (scopes != null ) Scope scope = scopes.peekFirst();
JavaWriter.java,Object value = entry.getValue();,if (entry != null ) Object value = entry.getValue();
