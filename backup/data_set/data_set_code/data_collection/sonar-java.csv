Filename,Buggy/Deleted,Fixed/Added
HardCodedCredentialsShouldNotBeUsedCheck.java,char[] secretReassignedAsCharsVariable = secretReassginedVariable.toCharArray();,if (secretReassginedVariable != null ) char[] secretReassignedAsCharsVariable = secretReassginedVariable.toCharArray();
HardCodedCredentialsShouldNotBeUsedCheck.java,Symbol symbol = identifier.symbol();,if (identifier != null ) Symbol symbol = identifier.symbol();
HardCodedCredentialsShouldNotBeUsedCheck.java,VariableTree variable = (VariableTree) symbol.declaration();,if (symbol != null ) VariableTree variable = (VariableTree) symbol.declaration();
HardCodedCredentialsShouldNotBeUsedCheck.java,Symbol symbol = variable.symbol();,if (variable != null ) Symbol symbol = variable.symbol();
HardCodedCredentialsShouldNotBeUsedCheck.java,ExpressionTree expressionTree = tree.methodSelect();,if (tree != null ) ExpressionTree expressionTree = tree.methodSelect();
HardCodedCredentialsShouldNotBeUsedCheck.java,ExpressionTree expression = ExpressionUtils.skipParentheses(tree.expression());,if (ExpressionUtils != null ) ExpressionTree expression = ExpressionUtils.skipParentheses(tree.expression());
HardCodedCredentialsShouldNotBeUsedCheck.java,Symbol symbol = identifier.symbol();,if (identifier != null ) Symbol symbol = identifier.symbol();
HardCodedCredentialsShouldNotBeUsedCheck.java,VariableTree variable = (VariableTree) symbol.declaration();,if (symbol != null ) VariableTree variable = (VariableTree) symbol.declaration();
HardCodedCredentialsShouldNotBeUsedCheck.java,ExpressionTree initializer = variable.initializer();,if (variable != null ) ExpressionTree initializer = variable.initializer();
AbstractPatternTreeTest.java,PatternTree nestedPattern = guardedPattern.pattern();,if (guardedPattern != null ) PatternTree nestedPattern = guardedPattern.pattern();
Expectations.java,ruleKey = rspecKeyAnnotation.value();,if (rspecKeyAnnotation != null ) ruleKey = rspecKeyAnnotation.value();
Expectations.java,ruleKey = ruleAnnotation.key();,if (ruleAnnotation != null ) ruleKey = ruleAnnotation.key();
CheckListTest.java,String key = ruleAnnotation.key();,if (ruleAnnotation != null ) String key = ruleAnnotation.key();
JavaRulesDefinition.java,JavaSonarWayProfile.Profile profile = JavaSonarWayProfile.readProfile();,if (JavaSonarWayProfile != null ) JavaSonarWayProfile.Profile profile = JavaSonarWayProfile.readProfile();
JavaRulesDefinition.java,String ruleKey = ruleAnnotation.key();,if (ruleAnnotation != null ) String ruleKey = ruleAnnotation.key();
JavaRulesDefinition.java,String rspecKey = rspecKeyAnnotation.value();,if (rspecKeyAnnotation != null ) String rspecKey = rspecKeyAnnotation.value();
JavaSonarWayProfile.java,String key = ruleAnnotation.key();,if (ruleAnnotation != null ) String key = ruleAnnotation.key();
JavaSonarWayProfile.java,rspecKey = rspecKeyAnnotation.value();,if (rspecKeyAnnotation != null ) rspecKey = rspecKeyAnnotation.value();
JavaRulesDefinitionTest.java,RulesDefinition.Context context = new RulesDefinition.Context();,if (RulesDefinition != null ) RulesDefinition.Context context = new RulesDefinition.Context();
JavaRulesDefinitionTest.java,JavaSonarWayProfile.Profile profile = new JavaSonarWayProfile.Profile();,if (JavaSonarWayProfile != null ) JavaSonarWayProfile.Profile profile = new JavaSonarWayProfile.Profile();
OptionalGetBeforeIsPresentCheck.java,SymbolicValue peek = programState.peekValue();,if (programState != null ) SymbolicValue peek = programState.peekValue();
OptionalGetBeforeIsPresentCheck.java,String identifier = getIdentifierPart(mit.methodSelect());,if (getIdentifierPart(mit != null ) String identifier = getIdentifierPart(mit.methodSelect());
AwsRegionShouldBeSetExplicitlyCheck.java,VariableTree actualDeclaration = declaration.get();,if (declaration != null ) VariableTree actualDeclaration = declaration.get();
AwsRegionShouldBeSetExplicitlyCheck.java,ExpressionTree initializer = actualDeclaration.initializer();,if (actualDeclaration != null ) ExpressionTree initializer = actualDeclaration.initializer();
AwsRegionShouldBeSetExplicitlyCheck.java,ExpressionTree expression = terminalCall.methodSelect();,if (terminalCall != null ) ExpressionTree expression = terminalCall.methodSelect();
AwsRegionShouldBeSetExplicitlyCheck.java,ExpressionTree currentExpression = memberSelectExpressionTree.expression();,if (memberSelectExpressionTree != null ) ExpressionTree currentExpression = memberSelectExpressionTree.expression();
AwsRegionShouldBeSetExplicitlyCheck.java,Tree declaration = identifier.symbol().declaration();,if (identifier != null ) Tree declaration = identifier.symbol().declaration();
AwsRegionShouldBeSetExplicitlyCheck.java,expression = currentInvocation.methodSelect();,if (currentInvocation != null ) expression = currentInvocation.methodSelect();
AwsRegionShouldBeSetExplicitlyCheck.java,Tree parent = identifier.parent();,if (identifier != null ) Tree parent = identifier.parent();
AwsRegionShouldBeSetExplicitlyCheck.java,ExpressionTree expression = tree.methodSelect();,if (tree != null ) ExpressionTree expression = tree.methodSelect();
AwsRegionShouldBeSetExplicitlyCheck.java,Symbol owner = invocation.symbol().owner();,if (invocation != null ) Symbol owner = invocation.symbol().owner();
AwsRegionShouldBeSetExplicitlyCheck.java,Tree parent = tree.parent();,if (tree != null ) Tree parent = tree.parent();
AwsRegionShouldBeSetExplicitlyCheck.java,Tree parent = tree.parent();,if (tree != null ) Tree parent = tree.parent();
AwsRegionShouldBeSetExplicitlyCheck.java,Tree parent = tree.parent();,if (tree != null ) Tree parent = tree.parent();
JavaFrontend.java,successfullyScanned += generatedFilesScannedWithoutParsing.get(true).size();,if (generatedFilesScannedWithoutParsing != null ) successfullyScanned += generatedFilesScannedWithoutParsing.get(true).size();
SimplifiedRegexCharacterClass.java,RegexSyntaxElement value = entry.getValue();,if (entry != null ) RegexSyntaxElement value = entry.getValue();
SimplifiedRegexCharacterClass.java,RegexSyntaxElement value = entry.getValue();,if (entry != null ) RegexSyntaxElement value = entry.getValue();
SimplifiedRegexCharacterClassTest.java,RegexSource dummySource = new JavaAnalyzerRegexSource(Collections.emptyList());,if (JavaAnalyzerRegexSource(Collections != null ) RegexSource dummySource = new JavaAnalyzerRegexSource(Collections.emptyList());
AbstractAutomataChecker.java,AutomatonState.TransitionType transition = auto.start.incomingTransitionType();,if (auto != null ) AutomatonState.TransitionType transition = auto.start.incomingTransitionType();
RegexTreeHelper.java,TransitionType transition = successor.incomingTransitionType();,if (successor != null ) TransitionType transition = successor.incomingTransitionType();
RegexLookaheadCheck.java,RegexTree lookAroundElement = lookAround.getElement();,if (lookAround != null ) RegexTree lookAroundElement = lookAround.getElement();
ReluctantQuantifierWithEmptyContinuationCheck.java,endState = regexParseResult.getFinalState();,if (regexParseResult != null ) endState = regexParseResult.getFinalState();
ImpossibleBoundariesCheck.java,start = regexParseResult.getStartState();,if (regexParseResult != null ) start = regexParseResult.getStartState();
ImpossibleBoundariesCheck.java,end = regexParseResult.getFinalState();,if (regexParseResult != null ) end = regexParseResult.getFinalState();
ImpossibleBoundariesCheck.java,start = tree.getElement();,if (tree != null ) start = tree.getElement();
ImpossibleBoundariesCheck.java,end = tree.getElement().continuation();,if (tree != null ) end = tree.getElement().continuation();
ImpossibleBoundariesCheck.java,AutomatonState.TransitionType transition = successor.incomingTransitionType();,if (successor != null ) AutomatonState.TransitionType transition = successor.incomingTransitionType();
UnicodeAwareCharClassesCheck.java,int unicodeUnawareRangeSize = unicodeUnawareRanges.size();,if (unicodeUnawareRanges != null ) int unicodeUnawareRangeSize = unicodeUnawareRanges.size();
UnicodeAwareCharClassesCheck.java,int lowerBound = tree.getLowerBound().codePointOrUnit();,if (tree != null ) int lowerBound = tree.getLowerBound().codePointOrUnit();
UnicodeAwareCharClassesCheck.java,String property = tree.property();,if (tree != null ) String property = tree.property();
ArrayCopyLoopCheck.java,BlockTree block = (BlockTree) tree.statement();,if (tree != null ) BlockTree block = (BlockTree) tree.statement();
ArrayCopyLoopCheck.java,ExpressionTree condition = tree.condition();,if (tree != null ) ExpressionTree condition = tree.condition();
RedundantRegexAlternativesCheck.java,List<RegexTree> alternatives = tree.getAlternatives();,if (tree != null ) List<RegexTree> alternatives = tree.getAlternatives();
ReluctantQuantifierCheck.java,List<RegexTree> items = tree.getItems();,if (tree != null ) List<RegexTree> items = tree.getItems();
ReluctantQuantifierCheck.java,String newQuantifier = makePossessive(repetition.getQuantifier());,if (makePossessive(repetition != null ) String newQuantifier = makePossessive(repetition.getQuantifier());
ReluctantQuantifierCheck.java,RegexTree element = repetition.getElement();,if (repetition != null ) RegexTree element = repetition.getElement();
ReluctantQuantifierCheck.java,String body = characterClass.getContents().getText();,if (characterClass != null ) String body = characterClass.getContents().getText();
EmptyStringRepetitionCheck.java,RegexTree element = tree.getElement();,if (tree != null ) RegexTree element = tree.getElement();
PossessiveQuantifierContinuationCheck.java,AutomatonState continuation = repetitionTree.continuation();,if (repetitionTree != null ) AutomatonState continuation = repetitionTree.continuation();
PossessiveQuantifierContinuationCheck.java,continuation = continuation.continuation();,if (continuation != null ) continuation = continuation.continuation();
PossessiveQuantifierContinuationCheck.java,Quantifier quantifier = repetitionTree.getQuantifier();,if (repetitionTree != null ) Quantifier quantifier = repetitionTree.getQuantifier();
ImpossibleBackReferenceCheck.java,Integer maximumRepetitions = tree.getQuantifier().getMaximumRepetitions();,if (tree != null ) Integer maximumRepetitions = tree.getQuantifier().getMaximumRepetitions();
ImpossibleBackReferenceCheck.java,CapturingGroupTree group = capturingGroups.get(backReference.groupName());,if (capturingGroups != null ) CapturingGroupTree group = capturingGroups.get(backReference.groupName());
AnchorPrecedenceCheck.java,List<RegexTree> alternatives = tree.getAlternatives();,if (tree != null ) List<RegexTree> alternatives = tree.getAlternatives();
MissingPackageInfoCheck.java,PackageDeclarationTree packageDeclaration = context.getTree().packageDeclaration();,if (context != null ) PackageDeclarationTree packageDeclaration = context.getTree().packageDeclaration();
MissingPackageInfoCheck.java,String packageName = ExpressionsHelper.concatenate(packageDeclaration.packageName());,if (ExpressionsHelper != null ) String packageName = ExpressionsHelper.concatenate(packageDeclaration.packageName());
UselessPackageInfoCheck.java,PackageDeclarationTree packageDeclaration = context.getTree().packageDeclaration();,if (context != null ) PackageDeclarationTree packageDeclaration = context.getTree().packageDeclaration();
UselessPackageInfoCheck.java,var cacheKey = cacheKey(inputFileScannerContext.getInputFile());,if (cacheKey(inputFileScannerContext != null ) var cacheKey = cacheKey(inputFileScannerContext.getInputFile());
UselessPackageInfoCheck.java,var cacheKey = cacheKey(context.getInputFile());,if (cacheKey(context != null ) var cacheKey = cacheKey(context.getInputFile());
MethodTreeImpl.java,Symbol owner = symbol.owner();,if (symbol != null ) Symbol owner = symbol.owner();
MethodTreeImpl.java,Type superClass = typeSymbol.superClass();,if (typeSymbol != null ) Type superClass = typeSymbol.superClass();
ToStringUsingBoxingCheck.java,String callingToStringOrCompareTo = isCallingToStringOrCompareTo(mit.methodSelect());,if (isCallingToStringOrCompareTo(mit != null ) String callingToStringOrCompareTo = isCallingToStringOrCompareTo(mit.methodSelect());
ToStringUsingBoxingCheck.java,MemberSelectExpressionTree mset = (MemberSelectExpressionTree) mit.methodSelect();,if (mit != null ) MemberSelectExpressionTree mset = (MemberSelectExpressionTree) mit.methodSelect();
JMethodSymbol.java,returnType = sema.typeSymbol(methodBinding().getReturnType());,if (sema != null ) returnType = sema.typeSymbol(methodBinding().getReturnType());
InternalCheckVerifier.java,FileSystem fileSystem = context.fileSystem();,if (context != null ) FileSystem fileSystem = context.fileSystem();
InternalCheckVerifier.java,Configuration config = context.config();,if (context != null ) Configuration config = context.config();
HardCodedPasswordCheck.java,"char[] passwordToChar = ""password"".toCharArray(); // Compliant","if (Compliant != null ) char[] passwordToChar = ""password"".toCharArray(); // Compliant"
HardCodedPasswordCheck.java,"String passwordToString = ""http-password"".toString(); // Compliant","if (Compliant != null ) String passwordToString = ""http-password"".toString(); // Compliant"
HardCodedCredentialsCheck.java,List<ExpressionTree> arguments = tree.arguments();,if (tree != null ) List<ExpressionTree> arguments = tree.arguments();
HardCodedCredentialsCheck.java,String value = ExpressionsHelper.getConstantValueAsString(argument).value();,if (ExpressionsHelper != null ) String value = ExpressionsHelper.getConstantValueAsString(argument).value();
HardCodedCredentialsCheck.java,String cleanedLiteral = LiteralUtils.trimQuotes(tree.value());,if (LiteralUtils != null ) String cleanedLiteral = LiteralUtils.trimQuotes(tree.value());
HardCodedCredentialsCheck.java,String userInfo = new URL(stringLiteral).getUserInfo();,if (URL(stringLiteral) != null ) String userInfo = new URL(stringLiteral).getUserInfo();
HardCodedCredentialsCheck.java,Tree parent = tree.parent();,if (tree != null ) Tree parent = tree.parent();
HardCodedCredentialsCheck.java,IdentifierTree variable = tree.simpleName();,if (tree != null ) IdentifierTree variable = tree.simpleName();
HardCodedCredentialsCheck.java,ExpressionTree initializer = tree.initializer();,if (tree != null ) ExpressionTree initializer = tree.initializer();
HardCodedCredentialsCheck.java,ExpressionTree variable = tree.variable();,if (tree != null ) ExpressionTree variable = tree.variable();
HardCodedCredentialsCheck.java,String literal = ExpressionsHelper.getConstantValueAsString(expression).value();,if (ExpressionsHelper != null ) String literal = ExpressionsHelper.getConstantValueAsString(expression).value();
HardCodedCredentialsCheck.java,ExpressionTree methodSelect = mit.methodSelect();,if (mit != null ) ExpressionTree methodSelect = mit.methodSelect();
HardCodedCredentialsCheck.java,ExpressionTree leftExpression = methodSelect.expression();,if (methodSelect != null ) ExpressionTree leftExpression = methodSelect.expression();
JavaFrontend.java,long batchModeSizeInKB = sonarComponents.getBatchModeSizeInKB();,if (sonarComponents != null ) long batchModeSizeInKB = sonarComponents.getBatchModeSizeInKB();
SonarComponents.java,Configuration config = context.config();,if (context != null ) Configuration config = context.config();
CollectionIsEmptyCheck.java,Optional<MethodInvocationTree> leftCallToSize = getCallToSizeInvocation(tree.leftOperand());,if (getCallToSizeInvocation(tree != null ) Optional<MethodInvocationTree> leftCallToSize = getCallToSizeInvocation(tree.leftOperand());
RawExceptionCheck.java,Type symbolType = exception.symbolType();,if (exception != null ) Type symbolType = exception.symbolType();
LoggerClass.java,Logger logger = LoggerFactory.getLogger(Generic.class.getName()); // Compliant,if (Compliant != null ) Logger logger = LoggerFactory.getLogger(Generic.class.getName()); // Compliant
LoggerClassCheck.java,VariableTree declaration = field.declaration();,if (field != null ) VariableTree declaration = field.declaration();
LoggerClassCheck.java,ExpressionTree initializer = declaration.initializer();,if (declaration != null ) ExpressionTree initializer = declaration.initializer();
AutoScanTest.java,Collection<IssueDiff> diffs = newDifferencesByRules.values();,if (newDifferencesByRules != null ) Collection<IssueDiff> diffs = newDifferencesByRules.values();
PopulateBeansCheck.java,Enumeration names = request.getParameterNames();,if (request != null ) Enumeration names = request.getParameterNames();
PopulateBeansCheck.java,String name = (String) names.nextElement();,if (names != null ) String name = (String) names.nextElement();
JMethodSymbol.java,ITypeBinding[] parameterTypeBindings = methodBinding().getParameterTypes();,if (methodBinding() != null ) ITypeBinding[] parameterTypeBindings = methodBinding().getParameterTypes();
JSymbol.java,IMethodBinding declaringMethod = variableBinding.getDeclaringMethod();,if (variableBinding != null ) IMethodBinding declaringMethod = variableBinding.getDeclaringMethod();
JSymbol.java,ITypeBinding declaringClass = variableBinding.getDeclaringClass();,if (variableBinding != null ) ITypeBinding declaringClass = variableBinding.getDeclaringClass();
PrivateFieldUsedLocallyCheck.java,parent = parent.parent();,if (parent != null ) parent = parent.parent();
S2755_XxeProcessingCheck_DocumentBuilderFactory.java,DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();,if (DocumentBuilderFactory != null ) DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
S2755_XxeProcessingCheck_DocumentBuilderFactory.java,DocumentBuilder builder = factory.newDocumentBuilder(); // Noncompliant,if (Noncompliant != null ) DocumentBuilder builder = factory.newDocumentBuilder(); // Noncompliant
S2755_XxeProcessingCheck_DocumentBuilderFactory.java,DocumentBuilderFactory df = DocumentBuilderFactory.newInstance();,if (DocumentBuilderFactory != null ) DocumentBuilderFactory df = DocumentBuilderFactory.newInstance();
S2755_XxeProcessingCheck_DocumentBuilderFactory.java,DocumentBuilderFactory df = DocumentBuilderFactory.newInstance();,if (DocumentBuilderFactory != null ) DocumentBuilderFactory df = DocumentBuilderFactory.newInstance();
S2755_XxeProcessingCheck_DocumentBuilderFactory.java,DocumentBuilder builder = df.newDocumentBuilder(); // Noncompliant [[sc=34;ec=52]],if ([[sc=34;ec=52]] != null ) DocumentBuilder builder = df.newDocumentBuilder(); // Noncompliant [[sc=34;ec=52]]
S2755_XxeProcessingCheck_DocumentBuilderFactory.java,DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();,if (DocumentBuilderFactory != null ) DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
S2755_XxeProcessingCheck_DocumentBuilderFactory.java,DocumentBuilder builder = factory.newDocumentBuilder(); // Noncompliant,if (Noncompliant != null ) DocumentBuilder builder = factory.newDocumentBuilder(); // Noncompliant
S2755_XxeProcessingCheck_DocumentBuilderFactory.java,DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();,if (DocumentBuilderFactory != null ) DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
S2755_XxeProcessingCheck_DocumentBuilderFactory.java,DocumentBuilder builder = factory.newDocumentBuilder(); // Noncompliant,if (Noncompliant != null ) DocumentBuilder builder = factory.newDocumentBuilder(); // Noncompliant
DenialOfServiceXMLCheck.java,ProgramState endState = context.getState();,if (context != null ) ProgramState endState = context.getState();
DenialOfServiceXMLCheck.java,SymbolicValue peek = endState.peekValue();,if (endState != null ) SymbolicValue peek = endState.peekValue();
DenialOfServiceXMLCheck.java,DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); // Noncompliant {{Enable XML parsing limitations to prevent Denial of Service attacks.}},if (attacks != null ) DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); // Noncompliant {{Enable XML parsing limitations to prevent Denial of Service attacks.}}
DenialOfServiceXMLCheck.java,DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); // Noncompliant {{Enable XML parsing limitations to prevent Denial of Service attacks.}},if (attacks != null ) DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); // Noncompliant {{Enable XML parsing limitations to prevent Denial of Service attacks.}}
DenialOfServiceXMLCheck.java,DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); // Noncompliant {{Enable XML parsing limitations to prevent Denial of Service attacks.}},if (attacks != null ) DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); // Noncompliant {{Enable XML parsing limitations to prevent Denial of Service attacks.}}
DenialOfServiceXMLCheck.java,DocumentBuilderFactory df = DocumentBuilderFactory.newInstance(); // Noncompliant {{Enable XML parsing limitations to prevent Denial of Service attacks.}},if (attacks != null ) DocumentBuilderFactory df = DocumentBuilderFactory.newInstance(); // Noncompliant {{Enable XML parsing limitations to prevent Denial of Service attacks.}}
DenialOfServiceXMLCheck.java,SAXParserFactory factory = SAXParserFactory.newInstance(); // Noncompliant {{Enable XML parsing limitations to prevent Denial of Service attacks.}},if (attacks != null ) SAXParserFactory factory = SAXParserFactory.newInstance(); // Noncompliant {{Enable XML parsing limitations to prevent Denial of Service attacks.}}
DenialOfServiceXMLCheck.java,TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant {{Enable XML parsing limitations to prevent Denial of Service attacks.}},if (attacks != null ) TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant {{Enable XML parsing limitations to prevent Denial of Service attacks.}}
CallToDeprecatedMethodCheck.java,name = deprecatedSymbol.owner().name();,if (deprecatedSymbol != null ) name = deprecatedSymbol.owner().name();
LeastSpecificTypeCheck.java,boolean springInjectionAnnotated = isSpringInjectionAnnotated(methodSymbol.metadata());,if (isSpringInjectionAnnotated(methodSymbol != null ) boolean springInjectionAnnotated = isSpringInjectionAnnotated(methodSymbol.metadata());
JavaAstScanner.java,JavaVersion javaVersion = visitor.getJavaVersion();,if (visitor != null ) JavaVersion javaVersion = visitor.getJavaVersion();
LocksNotUnlockedCheck.java,executorService = MoreExecutors.executor();,if (MoreExecutors != null ) executorService = MoreExecutors.executor();
NullabilityDataUtils.java,String name = annotation.symbol().name();,if (annotation != null ) String name = annotation.symbol().name();
NullableAnnotationUtils.java,SymbolMetadata metadata = symbol.metadata();,if (symbol != null ) SymbolMetadata metadata = symbol.metadata();
NullableAnnotationUtils.java,String nonNullAnnotation = nonNullAnnotation(symbol.metadata());,if (nonNullAnnotation(symbol != null ) String nonNullAnnotation = nonNullAnnotation(symbol.metadata());
NullableAnnotationUtils.java,Symbol annotationSymbol = annotationInstance.symbol();,if (annotationInstance != null ) Symbol annotationSymbol = annotationInstance.symbol();
NullableAnnotationUtils.java,Type annotationType = annotationSymbol.type();,if (annotationSymbol != null ) Type annotationType = annotationSymbol.type();
NullableAnnotationUtilsTest.java,Constructor<NullableAnnotationUtils> constructor = NullableAnnotationUtils.class.getDeclaredConstructor();,if (NullableAnnotationUtils != null ) Constructor<NullableAnnotationUtils> constructor = NullableAnnotationUtils.class.getDeclaredConstructor();
SpringNullableAndNonNullAnnotationsWithoutJSR305.java,RequestAttributes attributes = RequestContextHolder.getRequestAttributes();,if (RequestContextHolder != null ) RequestAttributes attributes = RequestContextHolder.getRequestAttributes();
ExplodedGraphWalker.java,boolean nonNullParameters = isGloballyAnnotatedParameterNonNull(methodTree.symbol());,if (isGloballyAnnotatedParameterNonNull(methodTree != null ) boolean nonNullParameters = isGloballyAnnotatedParameterNonNull(methodTree.symbol());
ExplodedGraphWalker.java,boolean nullableParameters = isGloballyAnnotatedParameterNullable(methodTree.symbol());,if (isGloballyAnnotatedParameterNullable(methodTree != null ) boolean nullableParameters = isGloballyAnnotatedParameterNullable(methodTree.symbol());
ChangeMethodContractCheck.java,String level = levelToString(nullabilityData.level());,if (levelToString(nullabilityData != null ) String level = levelToString(nullabilityData.level());
JSymbolMetadata.java,Symbol owner = symbol.owner();,if (symbol != null ) Symbol owner = symbol.owner();
JSymbolMetadataNullabilityHelper.java,NullabilityType type = typeFromAnnotation.get();,if (typeFromAnnotation != null ) NullabilityType type = typeFromAnnotation.get();
EqualsParametersMarkedNonNullCheck.java,List<VariableTree> params = methodTree.parameters();,if (methodTree != null ) List<VariableTree> params = methodTree.parameters();
XmlFileSensor.java,FileSystem fs = context.fileSystem();,if (context != null ) FileSystem fs = context.fileSystem();
XmlFileSensorTest.java,context = SensorContextTester.create(temporaryFolder.newFolder());,if (SensorContextTester != null ) context = SensorContextTester.create(temporaryFolder.newFolder());
ArtifactIdNamingConventionCheck.java,"NodeList artifactIds = evaluate(artifactIdExpression, file.getNamespaceUnawareDocument());","if (file != null ) NodeList artifactIds = evaluate(artifactIdExpression, file.getNamespaceUnawareDocument());"
DeprecatedPomPropertiesCheck.java,String text = node.getNodeValue();,if (node != null ) String text = node.getNodeValue();
SingleConnectionFactoryCheck.java,NamedNodeMap attributes = bean.getAttributes();,if (bean != null ) NamedNodeMap attributes = bean.getAttributes();
GroupIdNamingConventionCheck.java,"NodeList groupIds = evaluate(groupIdExpression, file.getNamespaceUnawareDocument());","if (file != null ) NodeList groupIds = evaluate(groupIdExpression, file.getNamespaceUnawareDocument());"
StringMatcherTest.java,StringMatcher matcher = StringMatcher.any();,if (StringMatcher != null ) StringMatcher matcher = StringMatcher.any();
DatabaseSchemaUpdateCheck.java,NodeList children = property.getChildNodes();,if (property != null ) NodeList children = property.getChildNodes();
DefaultMessageListenerContainerCheck.java,NamedNodeMap attributes = bean.getAttributes();,if (bean != null ) NamedNodeMap attributes = bean.getAttributes();
ActionNumberCheck.java,int numberForward = maximumForwards + secondaries.size();,if (secondaries != null ) int numberForward = maximumForwards + secondaries.size();
ValidationFiltersCheck.java,Node firstChild = node.getFirstChild();,if (node != null ) Node firstChild = node.getFirstChild();
XmlFileSensorTest.java,Collection<Issue> issues = context.allIssues();,if (context != null ) Collection<Issue> issues = context.allIssues();
XmlFileSensorTest.java,Issue issue = issues.iterator().next();,if (issues != null ) Issue issue = issues.iterator().next();
JavaPlugin.java,SonarEdition edition = context.getRuntime().getEdition();,if (context != null ) SonarEdition edition = context.getRuntime().getEdition();
PreparedStatementAndResultSetCheck.java,"ExpressionTree lastAssignmentExpr = ReassignmentFinder.getClosestReassignmentOrDeclarationExpression(identifier, identifier.symbol());","if (identifier != null ) ExpressionTree lastAssignmentExpr = ReassignmentFinder.getClosestReassignmentOrDeclarationExpression(identifier, identifier.symbol());"
PreparedStatementAndResultSetCheck.java,parent = parent.parent();,if (parent != null ) parent = parent.parent();
PreparedStatementAndResultSetCheck.java,Integer left = getNumberQuery(expr.leftOperand());,if (getNumberQuery(expr != null ) Integer left = getNumberQuery(expr.leftOperand());
PreparedStatementAndResultSetCheck.java,Integer right = getNumberQuery(expr.rightOperand());,if (getNumberQuery(expr != null ) Integer right = getNumberQuery(expr.rightOperand());
PreparedStatementAndResultSetCheck.java,ResultSet rs=pstmt.executeQuery();,if (rs=pstmt != null ) ResultSet rs=pstmt.executeQuery();
PreparedStatementAndResultSetCheck.java,int methodFirstArgumentValue = methodFirstArgumentAsInteger.intValue();,if (methodFirstArgumentAsInteger != null ) int methodFirstArgumentValue = methodFirstArgumentAsInteger.intValue();
AVLTree.java,final int h = key.hashCode();,if (key != null ) final int h = key.hashCode();
AVLTree.java,final int c = t.key().hashCode();,if (t != null ) final int c = t.key().hashCode();
AVLTree.java,final int h = key.hashCode();,if (key != null ) final int h = key.hashCode();
AVLTree.java,final int c = t.key().hashCode();,if (t != null ) final int c = t.key().hashCode();
AVLTree.java,final int h = key.hashCode();,if (key != null ) final int h = key.hashCode();
AVLTree.java,final int c = t.key().hashCode();,if (t != null ) final int c = t.key().hashCode();
AVLTree.java,"AVLTree left = remove(key, t.left());","if (t != null ) AVLTree left = remove(key, t.left());"
AVLTree.java,"AVLTree right = remove(key, t.right());","if (t != null ) AVLTree right = remove(key, t.right());"
AVLTree.java,AVLTree lrl = lr.left();,if (lr != null ) AVLTree lrl = lr.left();
AVLTree.java,AVLTree lrr = lr.right();,if (lr != null ) AVLTree lrr = lr.right();
AVLTree.java,AVLTree rll = rl.left();,if (rl != null ) AVLTree rll = rl.left();
AVLTree.java,AVLTree rlr = rl.right();,if (rl != null ) AVLTree rlr = rl.right();
ListUtilsTest.java,List<String> list = Collections.emptyList();,if (Collections != null ) List<String> list = Collections.emptyList();
PCollectionsTest.java,Constructor<PCollections> constructor = PCollections.class.getDeclaredConstructor();,if (PCollections != null ) Constructor<PCollections> constructor = PCollections.class.getDeclaredConstructor();
SetUtilsTest.java,Set<String> set = SetUtils.immutableSetOf();,if (SetUtils != null ) Set<String> set = SetUtils.immutableSetOf();
SetUtilsTest.java,Set<String> list = Collections.emptySet();,if (Collections != null ) Set<String> list = Collections.emptySet();
SinglyLinkedListTest.java,PStack<Object> empty = PCollections.emptyStack();,if (PCollections != null ) PStack<Object> empty = PCollections.emptyStack();
SinglyLinkedListTest.java,PStack<Object> stack = PCollections.emptyStack();,if (PCollections != null ) PStack<Object> stack = PCollections.emptyStack();
SinglyLinkedListTest.java,PStack<Object> stack = PCollections.emptyStack();,if (PCollections != null ) PStack<Object> stack = PCollections.emptyStack();
SinglyLinkedListTest.java,PStack<Object> s = PCollections.emptyStack();,if (PCollections != null ) PStack<Object> s = PCollections.emptyStack();
SinglyLinkedListTest.java,PStack<Object> s = PCollections.emptyStack();,if (PCollections != null ) PStack<Object> s = PCollections.emptyStack();
SinglyLinkedListTest.java,s = s.pop().pop();,if (s != null ) s = s.pop().pop();
SinglyLinkedListTest.java,PStack<Object> emptyStack = PCollections.emptyStack();,if (PCollections != null ) PStack<Object> emptyStack = PCollections.emptyStack();
ArrayDesignatorOnVariableCheck.java,Tree parent = current.parent();,if (current != null ) Tree parent = current.parent();
UnusedLocalVariableCheck.java,Tree parent = current.parent();,if (current != null ) Tree parent = current.parent();
UnusedLocalVariableCheck.java,Tree parent = current.parent();,if (current != null ) Tree parent = current.parent();
ExplodedGraphWalker.java,sv = handleCatchVariable(variableSymbol.type());,if (handleCatchVariable(variableSymbol != null ) sv = handleCatchVariable(variableSymbol.type());
ExplodedGraphWalker.java,programState = programState.clearStack();,if (programState != null ) programState = programState.clearStack();
StringPrimitiveConstructorCheck.java,String typeName = newClassTree.symbolType().name();,if (newClassTree != null ) String typeName = newClassTree.symbolType().name();
StringPrimitiveConstructorCheck.java,Arguments arguments = newClassTree.arguments();,if (newClassTree != null ) Arguments arguments = newClassTree.arguments();
ArrayDesignatorAfterTypeCheck.java,TypeTree returnType = methodTree.returnType();,if (methodTree != null ) TypeTree returnType = methodTree.returnType();
ArrayDesignatorAfterTypeCheck.java,SyntaxToken identifierToken = methodTree.simpleName().identifierToken();,if (methodTree != null ) SyntaxToken identifierToken = methodTree.simpleName().identifierToken();
ArrayDesignatorAfterTypeCheck.java,SyntaxToken openBracketToken = arrayTypeTree.openBracketToken();,if (arrayTypeTree != null ) SyntaxToken openBracketToken = arrayTypeTree.openBracketToken();
ArrayDesignatorAfterTypeCheck.java,returnType = arrayTypeTree.type();,if (arrayTypeTree != null ) returnType = arrayTypeTree.type();
ArrayDesignatorOnVariableCheck.java,TypeTree type = variableTree.type();,if (variableTree != null ) TypeTree type = variableTree.type();
ArrayDesignatorOnVariableCheck.java,SyntaxToken identifierToken = variableTree.simpleName().identifierToken();,if (variableTree != null ) SyntaxToken identifierToken = variableTree.simpleName().identifierToken();
ArrayDesignatorOnVariableCheck.java,SyntaxToken openBracketToken = arrayTypeTree.openBracketToken();,if (arrayTypeTree != null ) SyntaxToken openBracketToken = arrayTypeTree.openBracketToken();
ArrayDesignatorOnVariableCheck.java,type = arrayTypeTree.type();,if (arrayTypeTree != null ) type = arrayTypeTree.type();
StaticMembersAccessCheck.java,ExpressionTree memberSelectExpression = memberSelect.expression();,if (memberSelect != null ) ExpressionTree memberSelectExpression = memberSelect.expression();
CommentedOutCodeLineCheck.java,previousCommentLine = syntaxTrivia.startLine();,if (syntaxTrivia != null ) previousCommentLine = syntaxTrivia.startLine();
HiddenFieldCheck.java,int line = hiddenVariable.firstToken().line();,if (hiddenVariable != null ) int line = hiddenVariable.firstToken().line();
IndentationCheck.java,excludeIssueAtLine = tree.openBraceToken().line();,if (tree != null ) excludeIssueAtLine = tree.openBraceToken().line();
IndentationCheck.java,excludeIssueAtLine = block.openBraceToken().line();,if (block != null ) excludeIssueAtLine = block.openBraceToken().line();
IndentationCheck.java,excludeIssueAtLine = tree.lastToken().line();,if (tree != null ) excludeIssueAtLine = tree.lastToken().line();
IndentationCheck.java,excludeIssueAtLine = previousCaseLabelTree.lastToken().line();,if (previousCaseLabelTree != null ) excludeIssueAtLine = previousCaseLabelTree.lastToken().line();
IndentationCheck.java,excludeIssueAtLine = tree.lastToken().line();,if (tree != null ) excludeIssueAtLine = tree.lastToken().line();
MissingCurlyBracesCheck.java,SyntaxToken firstToken = statementTree.firstToken();,if (statementTree != null ) SyntaxToken firstToken = statementTree.firstToken();
MultilineBlocksCurlyBracesCheck.java,int previousLine = previousToken.line();,if (previousToken != null ) int previousLine = previousToken.line();
MultilineBlocksCurlyBracesCheck.java,int currentLine = currentToken.line();,if (currentToken != null ) int currentLine = currentToken.line();
TrailingCommentCheck.java,int tokenLine = syntaxToken.line();,if (syntaxToken != null ) int tokenLine = syntaxToken.line();
UnnecessaryEscapeSequencesInTextBlockCheck.java,int startLine = textBlock.token().line();,if (textBlock != null ) int startLine = textBlock.token().line();
VarCanBeUsedCheck.java,int line = firstToken.line();,if (firstToken != null ) int line = firstToken.line();
RegexComplexityCheck.java,int line = regexPart.token().line();,if (regexPart != null ) int line = regexPart.token().line();
ExpectedExceptionCheck.java,int collectAfterLine = methodIdentifier.identifierToken().line();,if (methodIdentifier != null ) int collectAfterLine = methodIdentifier.identifierToken().line();
AnyRuleIssueFilter.java,int startLine = firstSyntaxToken.line();,if (firstSyntaxToken != null ) int startLine = firstSyntaxToken.line();
AnyRuleIssueFilter.java,int endLine = lastSyntaxToken.line();,if (lastSyntaxToken != null ) int endLine = lastSyntaxToken.line();
SuppressWarningFilter.java,int endLine = tree.lastToken().line();,if (tree != null ) int endLine = tree.lastToken().line();
SonarComponents.java,pos = matcher.end();,if (matcher != null ) pos = matcher.end();
CommentLinesVisitor.java,int line = trivia.startLine();,if (trivia != null ) int line = trivia.startLine();
JavaAnalyzerRegexSource.java,int textBlockLine = literal.token().line();,if (literal != null ) int textBlockLine = literal.token().line();
DateFormatWeekYearCheck.java,SyntaxToken firstToken = argument.firstToken();,if (argument != null ) SyntaxToken firstToken = argument.firstToken();
DateFormatWeekYearCheck.java,int line = firstToken.line();,if (firstToken != null ) int line = firstToken.line();
EmptyMethodsCheck.java,int spaces = method.firstToken().column();,if (method != null ) int spaces = method.firstToken().column();
IndentationCheck.java,expectedLevel = tree.closeBraceToken().column();,if (tree != null ) expectedLevel = tree.closeBraceToken().column();
IndentationCheck.java,expectedLevel = block.closeBraceToken().column();,if (block != null ) expectedLevel = block.closeBraceToken().column();
IndentationCheck.java,SyntaxToken firstSyntaxToken = tree.firstToken();,if (tree != null ) SyntaxToken firstSyntaxToken = tree.firstToken();
IndentationCheck.java,int level = firstSyntaxToken.column();,if (firstSyntaxToken != null ) int level = firstSyntaxToken.column();
MultilineBlocksCurlyBracesCheck.java,int previousColumn = previousToken.column();,if (previousToken != null ) int previousColumn = previousToken.column();
MultilineBlocksCurlyBracesCheck.java,int currentColumn = currentToken.column();,if (currentToken != null ) int currentColumn = currentToken.column();
OverrideAnnotationCheck.java,SyntaxToken firstToken = tree.firstToken();,if (tree != null ) SyntaxToken firstToken = tree.firstToken();
QuickFixHelper.java,int startLine = firstToken.line();,if (firstToken != null ) int startLine = firstToken.line();
QuickFixHelper.java,int endLine = endToken.line();,if (endToken != null ) int endLine = endToken.line();
QuickFixHelper.java,int beginIndex = firstToken.column();,if (firstToken != null ) int beginIndex = firstToken.column();
SonarSymbolTableVisitor.java,SyntaxToken syntaxToken = declaration.identifierToken();,if (declaration != null ) SyntaxToken syntaxToken = declaration.identifierToken();
SonarSymbolTableVisitor.java,syntaxToken = usage.identifierToken();,if (usage != null ) syntaxToken = usage.identifierToken();
SyntaxHighlighterVisitor.java,SyntaxToken firstToken = from.firstToken();,if (from != null ) SyntaxToken firstToken = from.firstToken();
SyntaxHighlighterVisitor.java,SyntaxToken lastToken = to.lastToken();,if (to != null ) SyntaxToken lastToken = to.lastToken();
SyntaxHighlighterVisitor.java,endLine = lastToken.line();,if (lastToken != null ) endLine = lastToken.line();
SyntaxHighlighterVisitor.java,String comment = syntaxTrivia.comment();,if (syntaxTrivia != null ) String comment = syntaxTrivia.comment();
SyntaxHighlighterVisitor.java,int startLine = syntaxTrivia.startLine();,if (syntaxTrivia != null ) int startLine = syntaxTrivia.startLine();
SyntaxHighlighterVisitor.java,int startColumn = syntaxTrivia.column();,if (syntaxTrivia != null ) int startColumn = syntaxTrivia.column();
JWarning.java,SyntaxToken token = tree.firstToken();,if (tree != null ) SyntaxToken token = tree.firstToken();
JWarning.java,SyntaxToken token = tree.lastToken();,if (tree != null ) SyntaxToken token = tree.lastToken();
AnalyzerMessage.java,SyntaxToken firstSyntaxToken = getNonEmptyTree(syntaxNode).firstToken();,if (getNonEmptyTree(syntaxNode) != null ) SyntaxToken firstSyntaxToken = getNonEmptyTree(syntaxNode).firstToken();
AnalyzerMessage.java,SyntaxToken lastSyntaxToken = getNonEmptyTree(syntaxNode).lastToken();,if (getNonEmptyTree(syntaxNode) != null ) SyntaxToken lastSyntaxToken = getNonEmptyTree(syntaxNode).lastToken();
AnalyzerMessage.java,String text = syntaxToken.text();,if (syntaxToken != null ) String text = syntaxToken.text();
TreeTokenCompletenessTest.java,List<Integer> keys = new ArrayList<>(differences.keySet());,if (ArrayList<>(differences != null ) List<Integer> keys = new ArrayList<>(differences.keySet());
TreeTokenCompletenessTest.java,String text = token.text();,if (token != null ) String text = token.text();
TreeTokenCompletenessTest.java,lastColumn += text.length();,if (text != null ) lastColumn += text.length();
TreeTokenCompletenessTest.java,String comment = trivia.comment();,if (trivia != null ) String comment = trivia.comment();
TreeTokenCompletenessTest.java,lastColumn += comment.length();,if (comment != null ) lastColumn += comment.length();
QuickFixHelper.java,SyntaxToken firstToken = tree.firstToken();,if (tree != null ) SyntaxToken firstToken = tree.firstToken();
QuickFixHelper.java,SyntaxToken endToken = tree.lastToken();,if (tree != null ) SyntaxToken endToken = tree.lastToken();
DefaultJavaFileScannerContextTest.java,List<String> lines = context.getFileLinesWithLineEndings();,if (context != null ) List<String> lines = context.getFileLinesWithLineEndings();
ReturnEmptyArrayNotNullCheck.java,Returns returnType = returnTypes.peek();,if (returnTypes != null ) Returns returnType = returnTypes.peek();
ArrayDesignatorOnVariableCheck.java,SyntaxToken arrayDesignatorToken = arrayTypeTree.ellipsisToken();,if (arrayTypeTree != null ) SyntaxToken arrayDesignatorToken = arrayTypeTree.ellipsisToken();
ArrayDesignatorOnVariableCheck.java,arrayDesignatorToken = arrayTypeTree.openBracketToken();,if (arrayTypeTree != null ) arrayDesignatorToken = arrayTypeTree.openBracketToken();
ReplaceLambdaByMethodRefCheck.java,arguments = mit.arguments();,if (mit != null ) arguments = mit.arguments();
ReplaceLambdaByMethodRefCheck.java,List<VariableTree> parameters = lambdaTree.parameters();,if (lambdaTree != null ) List<VariableTree> parameters = lambdaTree.parameters();
AssertionArgumentOrderCheck.java,SyntaxToken firstToken = tree.firstToken();,if (tree != null ) SyntaxToken firstToken = tree.firstToken();
AssertionArgumentOrderCheck.java,SyntaxToken endToken = tree.lastToken();,if (tree != null ) SyntaxToken endToken = tree.lastToken();
AssertionArgumentOrderCheck.java,int startLine = firstToken.line();,if (firstToken != null ) int startLine = firstToken.line();
AssertionArgumentOrderCheck.java,int endLine = endToken.line();,if (endToken != null ) int endLine = endToken.line();
AssertionArgumentOrderCheck.java,int beginIndex = firstToken.column();,if (firstToken != null ) int beginIndex = firstToken.column();
ImmediateReverseBoxingCheck.java,String name = expression.symbolType().name();,if (expression != null ) String name = expression.symbolType().name();
ToArrayCheck.java,Object o = (Object) list.toArray(); // Compliant,if (Compliant != null ) Object o = (Object) list.toArray(); // Compliant
InternalCheckVerifier.java,int actualSize = actual.size();,if (actual != null ) int actualSize = actual.size();
InternalCheckVerifier.java,int expectedSize = expected.size();,if (expected != null ) int expectedSize = expected.size();
AnalyzerMessage.java,SyntaxToken firstSyntaxToken = getNonEmptyTree(startTree).firstToken();,if (getNonEmptyTree(startTree) != null ) SyntaxToken firstSyntaxToken = getNonEmptyTree(startTree).firstToken();
AnalyzerMessage.java,SyntaxToken lastSyntaxToken = getNonEmptyTree(endTree).lastToken();,if (getNonEmptyTree(endTree) != null ) SyntaxToken lastSyntaxToken = getNonEmptyTree(endTree).lastToken();
AnalyzerMessage.java,Tree lastTree = lastSyntaxToken.parent();,if (lastSyntaxToken != null ) Tree lastTree = lastSyntaxToken.parent();
AnalyzerMessage.java,int[] endOfTextBlock = endOfTextBlock(textBlockTree.token());,if (endOfTextBlock(textBlockTree != null ) int[] endOfTextBlock = endOfTextBlock(textBlockTree.token());
DefaultMessageListenerContainerCheck.java,NamedNodeMap attributes = bean.getAttributes();,if (bean != null ) NamedNodeMap attributes = bean.getAttributes();
ActionNumberCheck.java,int numberForward = maximumForwards + secondaries.size();,if (secondaries != null ) int numberForward = maximumForwards + secondaries.size();
ValidationFiltersCheck.java,Node firstChild = node.getFirstChild();,if (node != null ) Node firstChild = node.getFirstChild();
DatabaseSchemaUpdateCheck.java,NodeList children = property.getChildNodes();,if (property != null ) NodeList children = property.getChildNodes();
XmlFileSensorTest.java,Collection<Issue> issues = context.allIssues();,if (context != null ) Collection<Issue> issues = context.allIssues();
XmlFileSensorTest.java,Issue issue = issues.iterator().next();,if (issues != null ) Issue issue = issues.iterator().next();
InternalCheckVerifier.java,VisitorsBridgeForTests.TestJavaFileScannerContext testJavaFileScannerContext = visitorsBridge.lastCreatedTestContext();,if (visitorsBridge != null ) VisitorsBridgeForTests.TestJavaFileScannerContext testJavaFileScannerContext = visitorsBridge.lastCreatedTestContext();
FilterVerifier.java,VisitorsBridgeForTests.TestJavaFileScannerContext testJavaFileScannerContext = visitorsBridge.lastCreatedTestContext();,if (visitorsBridge != null ) VisitorsBridgeForTests.TestJavaFileScannerContext testJavaFileScannerContext = visitorsBridge.lastCreatedTestContext();
SonarComponents.java,InputComponent inputComponent = analyzerMessage.getInputComponent();,if (analyzerMessage != null ) InputComponent inputComponent = analyzerMessage.getInputComponent();
SonarComponents.java,Double cost = analyzerMessage.getCost();,if (analyzerMessage != null ) Double cost = analyzerMessage.getCost();
VisitorsBridgeForTestsTest.java,VisitorsBridgeForTests.TestJavaFileScannerContext lastContext = visitorsBridgeForTests.lastCreatedTestContext();,if (visitorsBridgeForTests != null ) VisitorsBridgeForTests.TestJavaFileScannerContext lastContext = visitorsBridgeForTests.lastCreatedTestContext();
PublicApiChecker.java,Tree currentParent = currentParents.peek();,if (currentParents != null ) Tree currentParent = currentParents.peek();
PublicApiChecker.java,Tree annotationType = annotationTree.annotationType();,if (annotationTree != null ) Tree annotationType = annotationTree.annotationType();
PublicApiChecker.java,Tree tokenTree = methodTree.returnType();,if (methodTree != null ) Tree tokenTree = methodTree.returnType();
JUtilsTest.java,TypeCastExpressionTreeImpl e = (TypeCastExpressionTreeImpl) f.initializer();,if (f != null ) TypeCastExpressionTreeImpl e = (TypeCastExpressionTreeImpl) f.initializer();
JUtilsTest.java,MethodInvocationTreeImpl methodInvocation = (MethodInvocationTreeImpl) s.expression();,if (s != null ) MethodInvocationTreeImpl methodInvocation = (MethodInvocationTreeImpl) s.expression();
JUtilsTest.java,List<StatementTree> body = m.block().body();,if (m != null ) List<StatementTree> body = m.block().body();
TryStatementTreeImpl.java,this.resources = ResourceListTreeImpl.emptyList();,if (ResourceListTreeImpl != null ) this.resources = ResourceListTreeImpl.emptyList();
JWTWithStrongCipherCheckAuth0Test.java,String tokenSignedLater = builder.sign(Algorithm.none()); // Noncompliant,if (Noncompliant != null ) String tokenSignedLater = builder.sign(Algorithm.none()); // Noncompliant
JWTWithStrongCipherCheckJwtkTest.java,static JwtBuilder builderAsField = Jwts.builder();,if (Jwts != null ) static JwtBuilder builderAsField = Jwts.builder();
JWTWithStrongCipherCheckJwtkTest.java,JwtParser parser = Jwts.parser();,if (Jwts != null ) JwtParser parser = Jwts.parser();
SwitchRedundantKeywordCheck.java,List<StatementTree> body = blockTree.body();,if (blockTree != null ) List<StatementTree> body = blockTree.body();
SwitchRedundantKeywordCheck.java,int statementsInBody = body.size();,if (body != null ) int statementsInBody = body.size();
TypeParametersShadowingCheck.java,IdentifierTree id = typeParameter.identifier();,if (typeParameter != null ) IdentifierTree id = typeParameter.identifier();
TypeParametersShadowingCheck.java,String name = id.toString();,if (id != null ) String name = id.toString();
DisableAutoEscapingCheck.java,Symbol owner = identifier.symbol().owner();,if (identifier != null ) Symbol owner = identifier.symbol().owner();
JWTWithStrongCipherCheck.java,ExpressionTree methodSelect = mit.methodSelect();,if (mit != null ) ExpressionTree methodSelect = mit.methodSelect();
JWTWithStrongCipherCheck.java,Tree parent = tokenIdentifier.parent();,if (tokenIdentifier != null ) Tree parent = tokenIdentifier.parent();
JWTWithStrongCipherCheck.java,Tree declaration = symbol.declaration();,if (symbol != null ) Tree declaration = symbol.declaration();
ExpressionsHelper.java,Tree reportTree = classTree.simpleName();,if (classTree != null ) Tree reportTree = classTree.simpleName();
PseudoRandomCheck.java,Tree parent = mit.parent();,if (mit != null ) Tree parent = mit.parent();
JavaFrontendTest.java,File baseDir = temp.getRoot().getAbsoluteFile();,if (temp != null ) File baseDir = temp.getRoot().getAbsoluteFile();
JavaFrontendTest.java,lastScannedTree = context.getTree();,if (context != null ) lastScannedTree = context.getTree();
JavaAstScannerTest.java,List<JavaFileScanner> emptyList = Collections.emptyList();,if (Collections != null ) List<JavaFileScanner> emptyList = Collections.emptyList();
JavaSensorTest.java,Configuration settings = new MapSettings().asConfig();,if (MapSettings() != null ) Configuration settings = new MapSettings().asConfig();
CollectorsToListCheck.java,MemberSelectExpressionTree memberSelect = (MemberSelectExpressionTree) mit.methodSelect();,if (mit != null ) MemberSelectExpressionTree memberSelect = (MemberSelectExpressionTree) mit.methodSelect();
AccessibilityChangeCheck.java,Arguments arguments = mit.arguments();,if (mit != null ) Arguments arguments = mit.arguments();
UnusedLocalVariableCheck.java,ExpressionTree expression = expressionStatement.expression();,if (expressionStatement != null ) ExpressionTree expression = expressionStatement.expression();
UnusedLocalVariableCheck.java,Symbol symbol = variableTree.symbol();,if (variableTree != null ) Symbol symbol = variableTree.symbol();
UnusedLocalVariableCheck.java,Symbol reference = identifier.symbol();,if (identifier != null ) Symbol reference = identifier.symbol();
JParser.java,Type superclassType = ee.getSuperclassType();,if (ee != null ) Type superclassType = ee.getSuperclassType();
JParser.java,IdentifierTreeImpl identifier = convertSimpleName(e.getName());,if (convertSimpleName(e != null ) IdentifierTreeImpl identifier = convertSimpleName(e.getName());
JParser.java,IdentifierTreeImpl i = convertSimpleName(e.getName());,if (convertSimpleName(e != null ) IdentifierTreeImpl i = convertSimpleName(e.getName());
JParser.java,StatementTree thenStatement = convertStatement(e.getThenStatement());,if (convertStatement(e != null ) StatementTree thenStatement = convertStatement(e.getThenStatement());
JParser.java,IdentifierTreeImpl i = convertSimpleName(e.getLabel());,if (convertSimpleName(e != null ) IdentifierTreeImpl i = convertSimpleName(e.getLabel());
JParser.java,JLabelSymbol symbol = new JLabelSymbol(i.name());,if (JLabelSymbol(i != null ) JLabelSymbol symbol = new JLabelSymbol(i.name());
JParser.java,t.typeBinding = t.methodBinding.getDeclaringClass();,if (t != null ) t.typeBinding = t.methodBinding.getDeclaringClass();
JParser.java,"t.methodBinding = excludeRecovery(t.methodBinding, arguments.size());","if (arguments != null ) t.methodBinding = excludeRecovery(t.methodBinding, arguments.size());"
JParser.java,t.typeBinding = t.methodBinding.getDeclaringClass();,if (t != null ) t.typeBinding = t.methodBinding.getDeclaringClass();
JParser.java,"t.methodBinding = excludeRecovery(t.methodBinding, arguments.size());","if (arguments != null ) t.methodBinding = excludeRecovery(t.methodBinding, arguments.size());"
JParser.java,IdentifierTreeImpl rhs = convertSimpleName(e.getName());,if (convertSimpleName(e != null ) IdentifierTreeImpl rhs = convertSimpleName(e.getName());
JParser.java,IdentifierTreeImpl rhs = convertSimpleName(e.getName());,if (convertSimpleName(e != null ) IdentifierTreeImpl rhs = convertSimpleName(e.getName());
JParser.java,IdentifierTreeImpl rhs = convertSimpleName(e.getName());,if (convertSimpleName(e != null ) IdentifierTreeImpl rhs = convertSimpleName(e.getName());
JParser.java,qualifiedSuper.typeBinding = keywordSuper.typeBinding.getSuperclass();,if (keywordSuper != null ) qualifiedSuper.typeBinding = keywordSuper.typeBinding.getSuperclass();
JParser.java,TypeTree type = convertType(e.getType());,if (convertType(e != null ) TypeTree type = convertType(e.getType());
JParser.java,type = arrayType.type();,if (arrayType != null ) type = arrayType.type();
JParser.java,TypeTree type = convertType(e.getType());,if (convertType(e != null ) TypeTree type = convertType(e.getType());
JParser.java,Op op = operators.get(e.getOperator());,if (operators != null ) Op op = operators.get(e.getOperator());
JParser.java,IntersectionType intersectionType = (IntersectionType) e.getType();,if (e != null ) IntersectionType intersectionType = (IntersectionType) e.getType();
JParser.java,classBody.typeBinding = e.getAnonymousClassDeclaration().resolveBinding();,if (e != null ) classBody.typeBinding = e.getAnonymousClassDeclaration().resolveBinding();
JParser.java,IdentifierTreeImpl i = (IdentifierTreeImpl) t.getConstructorIdentifier();,if (t != null ) IdentifierTreeImpl i = (IdentifierTreeImpl) t.getConstructorIdentifier();
JParser.java,int nbArguments = arguments.size();,if (arguments != null ) int nbArguments = arguments.size();
JParser.java,Op op = operators.get(e.getOperator());,if (operators != null ) Op op = operators.get(e.getOperator());
JParser.java,IdentifierTreeImpl rhs = convertSimpleName(e.getName());,if (convertSimpleName(e != null ) IdentifierTreeImpl rhs = convertSimpleName(e.getName());
JParser.java,"t.methodBinding = excludeRecovery(e.resolveMethodBinding(), arguments.size());","if (arguments != null ) t.methodBinding = excludeRecovery(e.resolveMethodBinding(), arguments.size());"
JParser.java,IdentifierTreeImpl rhs = convertSimpleName(e.getName());,if (convertSimpleName(e != null ) IdentifierTreeImpl rhs = convertSimpleName(e.getName());
JParser.java,qualifiedSuper.typeBinding = keywordSuper.typeBinding.getSuperclass();,if (keywordSuper != null ) qualifiedSuper.typeBinding = keywordSuper.typeBinding.getSuperclass();
JParser.java,"t.methodBinding = excludeRecovery(e.resolveMethodBinding(), arguments.size());","if (arguments != null ) t.methodBinding = excludeRecovery(e.resolveMethodBinding(), arguments.size());"
JParser.java,Op op = operators.get(e.getOperator());,if (operators != null ) Op op = operators.get(e.getOperator());
JParser.java,Op op = operators.get(e.getOperator());,if (operators != null ) Op op = operators.get(e.getOperator());
JParser.java,IdentifierTreeImpl i = convertSimpleName(e.getName());,if (convertSimpleName(e != null ) IdentifierTreeImpl i = convertSimpleName(e.getName());
JParser.java,IdentifierTreeImpl i = convertSimpleName(e.getName());,if (convertSimpleName(e != null ) IdentifierTreeImpl i = convertSimpleName(e.getName());
JParser.java,IdentifierTreeImpl i = convertSimpleName(e.getName());,if (convertSimpleName(e != null ) IdentifierTreeImpl i = convertSimpleName(e.getName());
JParser.java,TypeTree t = convertType(e.getElementType());,if (convertType(e != null ) TypeTree t = convertType(e.getElementType());
TypeParameterTreeImpl.java,this.bounds = BoundListTreeImpl.emptyList();,if (BoundListTreeImpl != null ) this.bounds = BoundListTreeImpl.emptyList();
ClassTreeImpl.java,this.superInterfaces = QualifiedIdentifierListTreeImpl.emptyList();,if (QualifiedIdentifierListTreeImpl != null ) this.superInterfaces = QualifiedIdentifierListTreeImpl.emptyList();
TypeCastExpressionTreeImpl.java,this.bounds = BoundListTreeImpl.emptyList();,if (BoundListTreeImpl != null ) this.bounds = BoundListTreeImpl.emptyList();
PerformanceMeasure.java,this.startNanos = measure.nanoTimeSupplier.get();,if (measure != null ) this.startNanos = measure.nanoTimeSupplier.get();
PerformanceMeasure.java,long start = System.nanoTime();,if (System != null ) long start = System.nanoTime();
PerformanceMeasure.java,long start = System.nanoTime();,if (System != null ) long start = System.nanoTime();
PerformanceMeasure.java,long start = System.nanoTime();,if (System != null ) long start = System.nanoTime();
PerformanceMeasure.java,long[] sortedMeasures = measures.sorted().toArray();,if (measures != null ) long[] sortedMeasures = measures.sorted().toArray();
PerformanceMeasure.java,Collection<PerformanceMeasure> children = measure.children();,if (measure != null ) Collection<PerformanceMeasure> children = measure.children();
PerformanceMeasure.java,Path parentDirectory = path.getParent();,if (path != null ) Path parentDirectory = path.getParent();
JParserSemanticTest.java,IdentifierTreeImpl i = (IdentifierTreeImpl) e.patternVariable();,if (e != null ) IdentifierTreeImpl i = (IdentifierTreeImpl) e.patternVariable();
JParser.java,BlockTreeImpl blockTree = convertBlock(e.getBody());,if (convertBlock(e != null ) BlockTreeImpl blockTree = convertBlock(e.getBody());
JParser.java,ModifiersTreeImpl modifiers = convertModifiers(fieldDeclaration.modifiers());,if (convertModifiers(fieldDeclaration != null ) ModifiersTreeImpl modifiers = convertModifiers(fieldDeclaration.modifiers());
JParser.java,TypeTree type = convertType(fieldDeclaration.getType());,if (convertType(fieldDeclaration != null ) TypeTree type = convertType(fieldDeclaration.getType());
JParser.java,t.variableBinding = fragment.resolveBinding();,if (fragment != null ) t.variableBinding = fragment.resolveBinding();
JavaSquid.java,jspCodeVisitors = sonarComponents.jspCodeVisitors();,if (sonarComponents != null ) jspCodeVisitors = sonarComponents.jspCodeVisitors();
SonarComponents.java,Collection<JavaCheck> checksCollection = checksElement.all();,if (checksElement != null ) Collection<JavaCheck> checksCollection = checksElement.all();
SonarComponentsTest.java,JavaCheck[] visitors = sonarComponents.checkClasses();,if (sonarComponents != null ) JavaCheck[] visitors = sonarComponents.checkClasses();
SonarComponentsTest.java,Collection<JavaCheck> testChecks = sonarComponents.testCheckClasses();,if (sonarComponents != null ) Collection<JavaCheck> testChecks = sonarComponents.testCheckClasses();
SonarComponentsTest.java,JavaCheck[] visitors = sonarComponents.checkClasses();,if (sonarComponents != null ) JavaCheck[] visitors = sonarComponents.checkClasses();
SonarComponentsTest.java,Collection<JavaCheck> testChecks = sonarComponents.testCheckClasses();,if (sonarComponents != null ) Collection<JavaCheck> testChecks = sonarComponents.testCheckClasses();
SonarComponentsTest.java,JavaCheck[] visitors = sonarComponents.checkClasses();,if (sonarComponents != null ) JavaCheck[] visitors = sonarComponents.checkClasses();
SonarComponentsTest.java,Collection<JavaCheck> testChecks = sonarComponents.testCheckClasses();,if (sonarComponents != null ) Collection<JavaCheck> testChecks = sonarComponents.testCheckClasses();
SonarComponentsTest.java,JavaCheck[] visitors = sonarComponents.checkClasses();,if (sonarComponents != null ) JavaCheck[] visitors = sonarComponents.checkClasses();
SonarComponentsTest.java,Collection<JavaCheck> testChecks = sonarComponents.testCheckClasses();,if (sonarComponents != null ) Collection<JavaCheck> testChecks = sonarComponents.testCheckClasses();
SonarComponentsTest.java,List<JavaCheck> checks = sonarComponents.jspCodeVisitors();,if (sonarComponents != null ) List<JavaCheck> checks = sonarComponents.jspCodeVisitors();
JavaAstScanner.java,ExecutionTimeReport executionTimeReport = new ExecutionTimeReport(Clock.systemUTC());,if (ExecutionTimeReport(Clock != null ) ExecutionTimeReport executionTimeReport = new ExecutionTimeReport(Clock.systemUTC());
JavaAstScanner.java,JavaVersion javaVersion = visitor.getJavaVersion();,if (visitor != null ) JavaVersion javaVersion = visitor.getJavaVersion();
JavaAstScanner.java,version = Integer.toString(javaVersion.asInt());,if (Integer != null ) version = Integer.toString(javaVersion.asInt());
JParser.java,char[] sourceChars = source.toCharArray();,if (source != null ) char[] sourceChars = source.toCharArray();
JavaAstScannerTest.java,DefaultFileSystem fileSystem = context.fileSystem();,if (context != null ) DefaultFileSystem fileSystem = context.fileSystem();
RedundantTypeCastCheck.java,SyntaxToken startToken = tree.openParenToken();,if (tree != null ) SyntaxToken startToken = tree.openParenToken();
RedundantTypeCastCheck.java,ParenthesizedTree parent = (ParenthesizedTree) tree.parent();,if (tree != null ) ParenthesizedTree parent = (ParenthesizedTree) tree.parent();
RedundantTypeCastCheck.java,parent = (ParenthesizedTree) parent.parent();,if (parent != null ) parent = (ParenthesizedTree) parent.parent();
RedundantTypeCastCheck.java,startToken = parent.openParenToken();,if (parent != null ) startToken = parent.openParenToken();
SelfAssignementCheck.java,SyntaxToken reportTree = node.operatorToken();,if (node != null ) SyntaxToken reportTree = node.operatorToken();
UnreachableCatchCheck.java,SyntaxToken typeFirstToken = typeTree.firstToken();,if (typeTree != null ) SyntaxToken typeFirstToken = typeTree.firstToken();
JWarning.java,int tokenLine = syntaxToken.line();,if (syntaxToken != null ) int tokenLine = syntaxToken.line();
JWarning.java,int tokenStartColumn = syntaxToken.column();,if (syntaxToken != null ) int tokenStartColumn = syntaxToken.column();
JavaCheckVerifierTest.java,IssuableSubscriptionVisitor visitor = new FakeVisitor().withDefaultIssues();,if (FakeVisitor() != null ) IssuableSubscriptionVisitor visitor = new FakeVisitor().withDefaultIssues();
JavaCheckVerifierTest.java,IssuableSubscriptionVisitor visitor = new FakeVisitor().withDefaultIssues();,if (FakeVisitor() != null ) IssuableSubscriptionVisitor visitor = new FakeVisitor().withDefaultIssues();
JavaCheckVerifierTest.java,FakeVisitor visitor = new FakeVisitor().withDefaultIssues();,if (FakeVisitor() != null ) FakeVisitor visitor = new FakeVisitor().withDefaultIssues();
JavaCheckVerifierTest.java,IssuableSubscriptionVisitor visitor = new FakeVisitor().withDefaultIssues();,if (FakeVisitor() != null ) IssuableSubscriptionVisitor visitor = new FakeVisitor().withDefaultIssues();
JavaCheckVerifierTest.java,IssuableSubscriptionVisitor visitor = new FakeVisitor().withDefaultIssues();,if (FakeVisitor() != null ) IssuableSubscriptionVisitor visitor = new FakeVisitor().withDefaultIssues();
JavaCheckVerifierTest.java,IssuableSubscriptionVisitor visitor = new FakeVisitor().withDefaultIssues();,if (FakeVisitor() != null ) IssuableSubscriptionVisitor visitor = new FakeVisitor().withDefaultIssues();
JavaCheckVerifierTest.java,IssuableSubscriptionVisitor visitor = new FakeVisitor().withDefaultIssues();,if (FakeVisitor() != null ) IssuableSubscriptionVisitor visitor = new FakeVisitor().withDefaultIssues();
JavaCheckVerifierTest.java,FakeVisitor visitor = new FakeVisitor().withDefaultIssues();,if (FakeVisitor() != null ) FakeVisitor visitor = new FakeVisitor().withDefaultIssues();
JavaCheckVerifierTest.java,FakeVisitor visitor = new FakeVisitor().withDefaultIssues();,if (FakeVisitor() != null ) FakeVisitor visitor = new FakeVisitor().withDefaultIssues();
JavaCheckVerifierTest.java,Double messageCost = analyzerMessage.getCost();,if (analyzerMessage != null ) Double messageCost = analyzerMessage.getCost();
JavaCheckVerifierTest.java,AnalyzerMessage.TextSpan textSpan = analyzerMessage.primaryLocation();,if (analyzerMessage != null ) AnalyzerMessage.TextSpan textSpan = analyzerMessage.primaryLocation();
MultipleFilesJavaCheckVerifierTest.java,FakeVisitor visitor = new JavaCheckVerifierTest.FakeVisitor().withDefaultIssues();,if (JavaCheckVerifierTest != null ) FakeVisitor visitor = new JavaCheckVerifierTest.FakeVisitor().withDefaultIssues();
SyntaxTreeDebug.java,ExpressionTree value = syntaxNode.value();,if (syntaxNode != null ) ExpressionTree value = syntaxNode.value();
CatchOfThrowableOrErrorCheck.java,Closer closer = Closer.create();,if (Closer != null ) Closer closer = Closer.create();
AbstractClassNoFieldShouldBeInterfaceCheck.java,SymbolMetadata classMetadata = tree.symbol().metadata();,if (tree != null ) SymbolMetadata classMetadata = tree.symbol().metadata();
SynchronizedClassUsageByAPICheck.java,StringBuffer requestURLBuffer = request.getRequestURL(); // compliant because of return type of getRequestURL,if (getRequestURL != null ) StringBuffer requestURLBuffer = request.getRequestURL(); // compliant because of return type of getRequestURL
ControllingPermissionsCheck.java,ModifiersTree modifiers = tree.modifiers();,if (tree != null ) ModifiersTree modifiers = tree.modifiers();
ControllingPermissionsCheck.java,TypeTree superClass = tree.superClass();,if (tree != null ) TypeTree superClass = tree.superClass();
FileCreateTempFileCheck.java,File tempDir = tempPath.toFile();,if (tempPath != null ) File tempDir = tempPath.toFile();
FileCreateTempFileCheck_no_version.java,File tempDir = tempPath.toFile();,if (tempPath != null ) File tempDir = tempPath.toFile();
MainInServletCheck.java,Symbol.TypeSymbol symbol = node.symbol();,if (node != null ) Symbol.TypeSymbol symbol = node.symbol();
ImpossibleRegexCheck.java,List<RegexTree> items = tree.getItems();,if (tree != null ) List<RegexTree> items = tree.getItems();
RegexHotspotCheck.java,IdentifierTree variable = (IdentifierTree) aet.variable();,if (aet != null ) IdentifierTree variable = (IdentifierTree) aet.variable();
RegexHotspotCheck.java,String regexp = ExpressionsHelper.getConstantValueAsString(exp).value();,if (ExpressionsHelper != null ) String regexp = ExpressionsHelper.getConstantValueAsString(exp).value();
AndroidSSLConnectionCheck.java,List<VariableTree> parameters = methodTree.parameters();,if (methodTree != null ) List<VariableTree> parameters = methodTree.parameters();
StandardInputReadCheck.java,Symbol symbol = identifier.symbol();,if (identifier != null ) Symbol symbol = identifier.symbol();
StandardInputReadCheck.java,Symbol owner = symbol.owner();,if (symbol != null ) Symbol owner = symbol.owner();
StandardInputReadCheck.java,int i = scanner.nextInt();,if (scanner != null ) int i = scanner.nextInt();
StandardInputReadCheck.java,Console console = System.console();,if (System != null ) Console console = System.console();
CommandLineArgumentsCheck.java,List<IdentifierTree> argsUsages = commandLineParameters.symbol().usages();,if (commandLineParameters != null ) List<IdentifierTree> argsUsages = commandLineParameters.symbol().usages();
SocketUsageCheck.java,TypeTree superClass = tree.superClass();,if (tree != null ) TypeTree superClass = tree.superClass();
Struts2EndpointCheck.java,Symbol owner = methodTree.symbol().owner();,if (methodTree != null ) Symbol owner = methodTree.symbol().owner();
XmlDeserializationCheck.java,Tree parent = newClassTree.parent();,if (newClassTree != null ) Tree parent = newClassTree.parent();
XmlDeserializationCheck.java,parent = parent.parent();,if (parent != null ) parent = parent.parent();
XmlDeserialization.java,Object result = xmlDecoder.readObject();,if (xmlDecoder != null ) Object result = xmlDecoder.readObject();
XmlDeserialization.java,"Object result = xmlDecoder.readObject();  // this will be highlighted as secondary for both issues, because we don't consider scope","if (scope != null ) Object result = xmlDecoder.readObject();  // this will be highlighted as secondary for both issues, because we don't consider scope"
ObjectDeserialization.java,Foo deserialized = (Foo) ois.readObject();  // Noncompliant [[sc=30;ec=46]] {{Make sure deserializing objects is safe here.}},if (here != null ) Foo deserialized = (Foo) ois.readObject();  // Noncompliant [[sc=30;ec=46]] {{Make sure deserializing objects is safe here.}}
ObjectDeserialization.java,deserialized = (Foo) ois.readUnshared();  // Noncompliant {{Make sure deserializing objects is safe here.}},if (here != null ) deserialized = (Foo) ois.readUnshared();  // Noncompliant {{Make sure deserializing objects is safe here.}}
CookieDomainCheck.java,String domain = ExpressionsHelper.getConstantValueAsString(arg).value();,if (ExpressionsHelper != null ) String domain = ExpressionsHelper.getConstantValueAsString(arg).value();
JunitMethodDeclarationCheck.java,String name = methodTree.simpleName().name();,if (methodTree != null ) String name = methodTree.simpleName().name();
JunitMethodDeclarationCheck.java,TypeTree returnType = methodTree.returnType();,if (methodTree != null ) TypeTree returnType = methodTree.returnType();
JunitMethodDeclarationCheck.java,Symbol.MethodSymbol symbol = methodTree.symbol();,if (methodTree != null ) Symbol.MethodSymbol symbol = methodTree.symbol();
JunitMethodDeclarationCheck.java,TypeTree returnType = methodTree.returnType();,if (methodTree != null ) TypeTree returnType = methodTree.returnType();
JunitMethodDeclarationCheck.java,Symbol.MethodSymbol symbol = methodTree.symbol();,if (methodTree != null ) Symbol.MethodSymbol symbol = methodTree.symbol();
JunitMethodDeclarationCheck.java,TypeTree returnType = methodTree.returnType();,if (methodTree != null ) TypeTree returnType = methodTree.returnType();
PrintStackTraceCalledWithoutArgumentCheck.java,Symbol.TypeSymbol enclosingSymbol = tree.symbol();,if (tree != null ) Symbol.TypeSymbol enclosingSymbol = tree.symbol();
PrintStackTraceCalledWithoutArgumentCheck.java,MemberSelectExpressionTree memberSelectExpressionTree = (MemberSelectExpressionTree) tree.methodSelect();,if (tree != null ) MemberSelectExpressionTree memberSelectExpressionTree = (MemberSelectExpressionTree) tree.methodSelect();
PrintStackTraceCalledWithoutArgumentCheck.java,IdentifierTree identifierTree = memberSelectExpressionTree.identifier();,if (memberSelectExpressionTree != null ) IdentifierTree identifierTree = memberSelectExpressionTree.identifier();
SMTPSSLServerIdentityCheck.java,Arguments args = mit.arguments();,if (mit != null ) Arguments args = mit.arguments();
SMTPSSLServerIdentityCheck.java,Arguments args = mit.arguments();,if (mit != null ) Arguments args = mit.arguments();
AESAlgorithmCheck.java,String algorithmName = ExpressionsHelper.getConstantValueAsString(algorithmTree).value();,if (ExpressionsHelper != null ) String algorithmName = ExpressionsHelper.getConstantValueAsString(algorithmTree).value();
HostnameVerifierImplementationCheck.java,BlockTree blockTree = tree.block();,if (tree != null ) BlockTree blockTree = tree.block();
HostnameVerifierImplementationCheck.java,Tree lambdaBody = lambdaExpression.body();,if (lambdaExpression != null ) Tree lambdaBody = lambdaExpression.body();
NullCipherCheck.java,c = new javax.crypto.NullCipher(); // Noncompliant,if (Noncompliant != null ) c = new javax.crypto.NullCipher(); // Noncompliant
SecureXmlTransformerCheck.java,Arguments arguments = methodInvocation.arguments();,if (methodInvocation != null ) Arguments arguments = methodInvocation.arguments();
SecureXmlTransformerCheck.java,TransformerFactory classField = TransformerFactory.newInstance();,if (TransformerFactory != null ) TransformerFactory classField = TransformerFactory.newInstance();
SecureXmlTransformerCheck.java,TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant
SecureXmlTransformerCheck.java,TransformerFactory factory = SAXTransformerFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) TransformerFactory factory = SAXTransformerFactory.newInstance(); // Noncompliant
SecureXmlTransformerCheck.java,TransformerFactory factory = TransformerFactory.newInstance();,if (TransformerFactory != null ) TransformerFactory factory = TransformerFactory.newInstance();
SecureXmlTransformerCheck.java,TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant
SecureXmlTransformerCheck.java,TransformerFactory factory = TransformerFactory.newInstance();,if (TransformerFactory != null ) TransformerFactory factory = TransformerFactory.newInstance();
SecureXmlTransformerCheck.java,TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant
SecureXmlTransformerCheck.java,TransformerFactory factory = TransformerFactory.newInstance();,if (TransformerFactory != null ) TransformerFactory factory = TransformerFactory.newInstance();
SecureXmlTransformerCheck.java,TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant
SecureXmlTransformerCheck.java,TransformerFactory factory = TransformerFactory.newInstance();,if (TransformerFactory != null ) TransformerFactory factory = TransformerFactory.newInstance();
SecureXmlTransformerCheck.java,TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant
SecureXmlTransformerCheck.java,TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant
SecureXmlTransformerCheck.java,TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant
SecureXmlTransformerCheck.java,TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant
SecureXmlTransformerCheck.java,TransformerFactory factory = TransformerFactory.newInstance();,if (TransformerFactory != null ) TransformerFactory factory = TransformerFactory.newInstance();
SecureXmlTransformerCheck.java,factory = TransformerFactory.newInstance(); // FN,if (FN != null ) factory = TransformerFactory.newInstance(); // FN
SecureXmlTransformerCheck.java,TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant (FP),if ((FP) != null ) TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant (FP)
SecureXmlTransformerCheck.java,"TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant (FP, would require symbolic execution)","if (execution) != null ) TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant (FP, would require symbolic execution)"
SecureXmlTransformerCheck.java,TransformerFactory factory = TransformerFactory.newInstance();,if (TransformerFactory != null ) TransformerFactory factory = TransformerFactory.newInstance();
DeprecatedHashAlgorithmCheck.java,md = DigestUtils.getShaDigest(); // Noncompliant,if (Noncompliant != null ) md = DigestUtils.getShaDigest(); // Noncompliant
DuplicateArgumentCheck.java,Arguments arguments = mit.arguments();,if (mit != null ) Arguments arguments = mit.arguments();
DuplicateArgumentCheck.java,int arity = arguments.size();,if (arguments != null ) int arity = arguments.size();
InstanceOfAlwaysTrueCheck.java,Type expressionType = instanceOfTree.expression().symbolType();,if (instanceOfTree != null ) Type expressionType = instanceOfTree.expression().symbolType();
InstanceOfAlwaysTrueCheck.java,Type instanceOf = instanceOfTree.type().symbolType();,if (instanceOfTree != null ) Type instanceOf = instanceOfTree.type().symbolType();
SAMAnnotatedCheck.java,IdentifierTree simpleName = classTree.simpleName();,if (classTree != null ) IdentifierTree simpleName = classTree.simpleName();
SAMAnnotatedCheck.java,MethodTree declaration = method.declaration();,if (method != null ) MethodTree declaration = method.declaration();
ClassComplexityCheck.java,int size = context.getComplexityNodes(tree).size();,if (context != null ) int size = context.getComplexityNodes(tree).size();
NullDereferenceInConditionalCheck.java,ExpressionTree nonNullOperand = getNonNullOperand(tree.leftOperand());,if (getNonNullOperand(tree != null ) ExpressionTree nonNullOperand = getNonNullOperand(tree.leftOperand());
NullDereferenceInConditionalCheck.java,scanLeft = !isIdentifierWithSameName(tree.leftOperand());,if (!isIdentifierWithSameName(tree != null ) scanLeft = !isIdentifierWithSameName(tree.leftOperand());
NullDereferenceInConditionalCheck.java,scanRight = !isIdentifierWithSameName(tree.rightOperand());,if (!isIdentifierWithSameName(tree != null ) scanRight = !isIdentifierWithSameName(tree.rightOperand());
ArrayForVarArgCheck.java,Type lastParamType = getLastParameterType(methodSymbol.parameterTypes());,if (getLastParameterType(methodSymbol != null ) Type lastParamType = getLastParameterType(methodSymbol.parameterTypes());
RedundantTypeCastCheck.java,Type expressionType = typeCastTree.expression().symbolType();,if (typeCastTree != null ) Type expressionType = typeCastTree.expression().symbolType();
RedundantTypeCastCheck.java,ExpressionTree expression = typeCastTree.expression();,if (typeCastTree != null ) ExpressionTree expression = typeCastTree.expression();
RedundantTypeCastCheck.java,Tree parent = typeCastTree.parent();,if (typeCastTree != null ) Tree parent = typeCastTree.parent();
RedundantTypeCastCheck.java,Tree parent = skipParentheses(typeCastTree.parent());,if (skipParentheses(typeCastTree != null ) Tree parent = skipParentheses(typeCastTree.parent());
RedundantTypeCastCheck.java,Tree parent = skipParentheses(typeCastTree.parent());,if (skipParentheses(typeCastTree != null ) Tree parent = skipParentheses(typeCastTree.parent());
RedundantTypeCastCheck.java,method = method.parent();,if (method != null ) method = method.parent();
RedundantTypeCastCheck.java,Tree invocation = arguments.parent();,if (arguments != null ) Tree invocation = arguments.parent();
RedundantTypeCastCheck.java,List<Type> parameterTypes = sym.parameterTypes();,if (sym != null ) List<Type> parameterTypes = sym.parameterTypes();
RedundantTypeCastCheck.java,int nbParameters = parameterTypes.size();,if (parameterTypes != null ) int nbParameters = parameterTypes.size();
RedundantTypeCastCheck.java,skip = skip.parent();,if (skip != null ) skip = skip.parent();
RedundantTypeCastCheck.java,Tree parentTree = skipParentheses(typeCastTree.parent());,if (skipParentheses(typeCastTree != null ) Tree parentTree = skipParentheses(typeCastTree.parent());
RedundantTypeCastCheck.java,Tree preParent = skipParentheses(parentTree.parent());,if (skipParentheses(parentTree != null ) Tree preParent = skipParentheses(parentTree.parent());
RedundantTypeCastCheck.java,ExpressionTree castExpression = typeCastTree.expression();,if (typeCastTree != null ) ExpressionTree castExpression = typeCastTree.expression();
RedundantTypeCastCheck.java,Symbol methodCaller = methodInvocationTree.symbol();,if (methodInvocationTree != null ) Symbol methodCaller = methodInvocationTree.symbol();
RedundantTypeCastCheck.java,Symbol owner = symbol.owner();,if (symbol != null ) Symbol owner = symbol.owner();
UnreachableCatchCheck.java,Type type = typeTree.symbolType();,if (typeTree != null ) Type type = typeTree.symbolType();
UselessImportCheck.java,CompilationUnitTree cut = context.getTree();,if (context != null ) CompilationUnitTree cut = context.getTree();
UselessImportCheck.java,id = (IdentifierTree) importTree.qualifiedIdentifier();,if (importTree != null ) id = (IdentifierTree) importTree.qualifiedIdentifier();
UselessImportCheck.java,Symbol owner = symbol.owner();,if (symbol != null ) Symbol owner = symbol.owner();
UselessImportCheck.java,Iterator<String> it = pendingImports.iterator();,if (pendingImports != null ) Iterator<String> it = pendingImports.iterator();
UselessImportCheck.java,String pendingImport = it.next();,if (it != null ) String pendingImport = it.next();
InternalCheckVerifier.java,DefaultFileSystem fileSystem = context.fileSystem();,if (context != null ) DefaultFileSystem fileSystem = context.fileSystem();
CatchUsesExceptionWithContextCheck.java,exceptions = Collections.emptyList();,if (Collections != null ) exceptions = Collections.emptyList();
RedundantThrowsDeclarationCheck.java,List<String> undocumentedExceptionNames = new Javadoc(methodTree).undocumentedThrownExceptions();,if (Javadoc(methodTree) != null ) List<String> undocumentedExceptionNames = new Javadoc(methodTree).undocumentedThrownExceptions();
SwitchCaseWithoutBreakCheck.java,List<CaseGroupTree> caseGroupTrees = switchStatementTree.cases();,if (switchStatementTree != null ) List<CaseGroupTree> caseGroupTrees = switchStatementTree.cases();
UndocumentedApiCheck.java,List<String> undocumentedParameters = javadoc.undocumentedParameters();,if (javadoc != null ) List<String> undocumentedParameters = javadoc.undocumentedParameters();
UndocumentedApiCheck.java,List<String> undocumentedExceptions = javadoc.undocumentedThrownExceptions();,if (javadoc != null ) List<String> undocumentedExceptions = javadoc.undocumentedThrownExceptions();
UnusedMethodParameterCheck.java,List<String> undocumentedParameters = new Javadoc(methodTree).undocumentedParameters();,if (Javadoc(methodTree) != null ) List<String> undocumentedParameters = new Javadoc(methodTree).undocumentedParameters();
JavaAnalyzerRegexSource.java,int lineLength = lines[i].length();,if (lines[i] != null ) int lineLength = lines[i].length();
SwitchWithTooManyCasesCheck.java,List<CaseGroupTree> cases = switchStatementTree.cases();,if (switchStatementTree != null ) List<CaseGroupTree> cases = switchStatementTree.cases();
CollectionCallingItselfCheck.java,MemberSelectExpressionTree mse = (MemberSelectExpressionTree) methodInvocationTree.methodSelect();,if (methodInvocationTree != null ) MemberSelectExpressionTree mse = (MemberSelectExpressionTree) methodInvocationTree.methodSelect();
CollectionCallingItselfCheck.java,IdentifierTree identifier = mse.identifier();,if (mse != null ) IdentifierTree identifier = mse.identifier();
CollectionCallingItselfCheck.java,reportedName = identifier.name();,if (identifier != null ) reportedName = identifier.name();
CollectionCallingItselfCheck.java,method = identifier.symbol();,if (identifier != null ) method = identifier.symbol();
ConstructorCallingOverridableCheck.java,Symbol.TypeSymbol constructorType = m.symbol().enclosingClass();,if (m != null ) Symbol.TypeSymbol constructorType = m.symbol().enclosingClass();
InterfaceOrSuperclassShadowingCheck.java,Symbol.TypeSymbol classSymbol = classTree.symbol();,if (classTree != null ) Symbol.TypeSymbol classSymbol = classTree.symbol();
KeySetInsteadOfEntrySetCheck.java,ExpressionTree expressionTree = forEachTree.expression();,if (forEachTree != null ) ExpressionTree expressionTree = forEachTree.expression();
StringToPrimitiveConversionCheck.java,Type variableType = variableTree.type().symbolType();,if (variableTree != null ) Type variableType = variableTree.type().symbolType();
StringToPrimitiveConversionCheck.java,ExpressionTree initializer = variableTree.initializer();,if (variableTree != null ) ExpressionTree initializer = variableTree.initializer();
ClassNamedLikeExceptionCheck.java,Symbol.TypeSymbol symbol = classTree.symbol();,if (classTree != null ) Symbol.TypeSymbol symbol = classTree.symbol();
ClassNamedLikeExceptionCheck.java,String className = symbol.name();,if (symbol != null ) String className = symbol.name();
AndroidSSLConnectionCheck.java,List<VariableTree> parameters = methodTree.parameters();,if (methodTree != null ) List<VariableTree> parameters = methodTree.parameters();
SerializableComparatorCheck.java,Symbol.TypeSymbol symbol = classTree.symbol();,if (classTree != null ) Symbol.TypeSymbol symbol = classTree.symbol();
SerializableComparatorCheck.java,Type type = symbol.type();,if (symbol != null ) Type type = symbol.type();
SerializableComparatorCheck.java,IdentifierTree simpleName = classTree.simpleName();,if (classTree != null ) IdentifierTree simpleName = classTree.simpleName();
SubscriptionVisitor.java,semanticModel = (Sema) context.getSemanticModel();,if (context != null ) semanticModel = (Sema) context.getSemanticModel();
ParameterReassignedToCheck.java,Symbol var = tree.parameter().symbol();,if (tree != null ) Symbol var = tree.parameter().symbol();
ParameterReassignedToCheck.java,Symbol var = tree.variable().symbol();,if (tree != null ) Symbol var = tree.variable().symbol();
PrintfMisuseCheck.java,ExpressionTree init = var.initializer();,if (var != null ) ExpressionTree init = var.initializer();
UnusedMethodParameterCheck.java,Symbol symbol = var.symbol();,if (var != null ) Symbol symbol = var.symbol();
DivisionByZeroCheck.java,expr = programState.peekValue();,if (programState != null ) expr = programState.peekValue();
ExceptionalYieldChecker.java,int parameterCausingExceptionIndex = yield.parameterCausingExceptionIndex();,if (yield != null ) int parameterCausingExceptionIndex = yield.parameterCausingExceptionIndex();
UnitTestUtils.java,Symbol.MethodSymbol symbol = methodTree.symbol();,if (methodTree != null ) Symbol.MethodSymbol symbol = methodTree.symbol();
UnitTestUtils.java,symbol = symbol.overriddenSymbol();,if (symbol != null ) symbol = symbol.overriddenSymbol();
TooManyMethodsCheck.java,Symbol symbol = member.symbol();,if (member != null ) Symbol symbol = member.symbol();
SynchronizedOverrideCheck.java,Symbol.MethodSymbol overriddenSymbol =  methodSymbol.overriddenSymbol();,if (methodSymbol != null ) Symbol.MethodSymbol overriddenSymbol =  methodSymbol.overriddenSymbol();
RedundantTypeCastCheck.java,Symbol.MethodSymbol overriddenSymbol = childMethod.overriddenSymbol();,if (childMethod != null ) Symbol.MethodSymbol overriddenSymbol = childMethod.overriddenSymbol();
RedundantAbstractMethodCheck.java,Symbol.MethodSymbol overridee = method.overriddenSymbol();,if (method != null ) Symbol.MethodSymbol overridee = method.overriddenSymbol();
OverrideAnnotationCheck.java,Symbol.MethodSymbol overriddenSymbol = methodSymbol.overriddenSymbol();,if (methodSymbol != null ) Symbol.MethodSymbol overriddenSymbol = methodSymbol.overriddenSymbol();
ChangeMethodContractCheck.java,Symbol.MethodSymbol overridee = methodSymbol.overriddenSymbol();,if (methodSymbol != null ) Symbol.MethodSymbol overridee = methodSymbol.overriddenSymbol();
AnonymousClassShouldBeLambdaCheck.java,Symbol overridenSymbol = methodSymbol.overriddenSymbol();,if (methodSymbol != null ) Symbol overridenSymbol = methodSymbol.overriddenSymbol();
AbstractCallToDeprecatedCodeChecker.java,Symbol.MethodSymbol overriddenMethod = symbol.overriddenSymbol();,if (symbol != null ) Symbol.MethodSymbol overriddenMethod = symbol.overriddenSymbol();
AbstractCallToDeprecatedCodeChecker.java,overriddenMethod = overriddenMethod.overriddenSymbol();,if (overriddenMethod != null ) overriddenMethod = overriddenMethod.overriddenSymbol();
MethodTreeImpl.java,Symbol.MethodSymbol methodSymbol = symbol().overriddenSymbol();,if (symbol() != null ) Symbol.MethodSymbol methodSymbol = symbol().overriddenSymbol();
JavaTreeModelTest.java,SwitchExpressionTree switchExpression = tree.asSwitchExpression();,if (tree != null ) SwitchExpressionTree switchExpression = tree.asSwitchExpression();
JavaTreeModelTest.java,SwitchExpressionTree switchExpression = (SwitchExpressionTree) rst.expression();,if (rst != null ) SwitchExpressionTree switchExpression = (SwitchExpressionTree) rst.expression();
SpringComponentScanCheck.java,Type type = annotation.symbolType();,if (annotation != null ) Type type = annotation.symbolType();
SimplifiedRegexCharacterClassTest.java,RegexSource dummySource = new JavaRegexSource(Collections.emptyList());,if (JavaRegexSource(Collections != null ) RegexSource dummySource = new JavaRegexSource(Collections.emptyList());
JavaAnalyzerRegexSource.java,sourceText = sb.toString();,if (sb != null ) sourceText = sb.toString();
JavaCharacterParser.java,SourceCharacter sourceCharacter = unicodeProcessedCharacters.getCurrent();,if (unicodeProcessedCharacters != null ) SourceCharacter sourceCharacter = unicodeProcessedCharacters.getCurrent();
JavaCharacterParser.java,SourceCharacter sourceCharacter = unicodeProcessedCharacters.getCurrent();,if (unicodeProcessedCharacters != null ) SourceCharacter sourceCharacter = unicodeProcessedCharacters.getCurrent();
JavaCharacterParser.java,char ch = sourceCharacter.getCharacter();,if (sourceCharacter != null ) char ch = sourceCharacter.getCharacter();
JavaCharacterParser.java,sourceCharacter = unicodeProcessedCharacters.getCurrent();,if (unicodeProcessedCharacters != null ) sourceCharacter = unicodeProcessedCharacters.getCurrent();
JavaUnicodeEscapeParser.java,this.sourceText = source.getSourceText();,if (source != null ) this.sourceText = source.getSourceText();
JavaUnicodeEscapeParser.java,this.textLength = sourceText.length();,if (sourceText != null ) this.textLength = sourceText.length();
RegexLexer.java,SourceCharacter sourceCharacter = characters.getCurrent();,if (characters != null ) SourceCharacter sourceCharacter = characters.getCurrent();
RegexLexer.java,char ch = characters.getCurrent().getCharacter();,if (characters != null ) char ch = characters.getCurrent().getCharacter();
RegexParser.java,this.characters = source.createLexer();,if (source != null ) this.characters = source.createLexer();
RegexParser.java,int index = characters.getCurrentStartIndex();,if (characters != null ) int index = characters.getCurrentStartIndex();
RegexParser.java,SourceCharacter current = characters.getCurrent();,if (characters != null ) SourceCharacter current = characters.getCurrent();
RegexParser.java,SourceCharacter openingBrace = characters.getCurrent();,if (characters != null ) SourceCharacter openingBrace = characters.getCurrent();
RegexParser.java,int startIndex = characters.getCurrentStartIndex();,if (characters != null ) int startIndex = characters.getCurrentStartIndex();
RegexParser.java,"IndexRange range = new IndexRange(startIndex, characters.getCurrentStartIndex());","if (characters != null ) IndexRange range = new IndexRange(startIndex, characters.getCurrentStartIndex());"
RegexParser.java,SourceCharacter character = characters.getCurrent();,if (characters != null ) SourceCharacter character = characters.getCurrent();
RegexParser.java,SourceCharacter openingParen = characters.getCurrent();,if (characters != null ) SourceCharacter openingParen = characters.getCurrent();
RegexParser.java,String name = sb.toString();,if (sb != null ) String name = sb.toString();
RegexParser.java,boolean previousFreeSpacingMode = characters.getFreeSpacingMode();,if (characters != null ) boolean previousFreeSpacingMode = characters.getFreeSpacingMode();
RegexParser.java,SourceCharacter closingParen = characters.getCurrent();,if (characters != null ) SourceCharacter closingParen = characters.getCurrent();
RegexParser.java,Integer flag = parseFlag(characters.getCurrent().getCharacter());,if (parseFlag(characters != null ) Integer flag = parseFlag(characters.getCurrent().getCharacter());
RegexParser.java,SourceCharacter backslash = characters.getCurrent();,if (characters != null ) SourceCharacter backslash = characters.getCurrent();
RegexParser.java,SourceCharacter character = characters.getCurrent();,if (characters != null ) SourceCharacter character = characters.getCurrent();
RegexParser.java,char c = simpleEscapeToCharacter(character.getCharacter());,if (simpleEscapeToCharacter(character != null ) char c = simpleEscapeToCharacter(character.getCharacter());
RegexParser.java,SourceCharacter c = characters.getCurrent();,if (characters != null ) SourceCharacter c = characters.getCurrent();
RegexParser.java,SourceCharacter marker = characters.getCurrent();,if (characters != null ) SourceCharacter marker = characters.getCurrent();
RegexParser.java,SourceCharacter openerChar = characters.getCurrent();,if (characters != null ) SourceCharacter openerChar = characters.getCurrent();
RegexParser.java,SourceCharacter closerChar = characters.getCurrent();,if (characters != null ) SourceCharacter closerChar = characters.getCurrent();
RegexParser.java,SourceCharacter firstDigit = characters.getCurrent();,if (characters != null ) SourceCharacter firstDigit = characters.getCurrent();
RegexParser.java,SourceCharacter currentChar = characters.getCurrent();,if (characters != null ) SourceCharacter currentChar = characters.getCurrent();
RegexParser.java,char asChar = currentChar.getCharacter();,if (currentChar != null ) char asChar = currentChar.getCharacter();
RegexParser.java,SourceCharacter boundary = characters.getCurrent();,if (characters != null ) SourceCharacter boundary = characters.getCurrent();
RegexParser.java,SourceCharacter openingBracket = characters.getCurrent();,if (characters != null ) SourceCharacter openingBracket = characters.getCurrent();
RegexParser.java,SourceCharacter firstAnd = characters.getCurrent();,if (characters != null ) SourceCharacter firstAnd = characters.getCurrent();
RegexParser.java,SourceCharacter secondAnd = characters.getCurrent();,if (characters != null ) SourceCharacter secondAnd = characters.getCurrent();
RegexParser.java,SourceCharacter startCharacter = characters.getCurrent();,if (characters != null ) SourceCharacter startCharacter = characters.getCurrent();
RegexParser.java,SourceCharacter backslash = characters.getCurrent();,if (characters != null ) SourceCharacter backslash = characters.getCurrent();
RegexParser.java,SourceCharacter endCharacter = characters.getCurrent();,if (characters != null ) SourceCharacter endCharacter = characters.getCurrent();
RegexParser.java,IndexRange range = characters.getCurrentIndexRange();,if (characters != null ) IndexRange range = characters.getCurrentIndexRange();
CurlyBraceQuantifier.java,this.minimumRepetitions = Integer.parseInt(minimumRepetitionsToken.getText());,if (Integer != null ) this.minimumRepetitions = Integer.parseInt(minimumRepetitionsToken.getText());
CurlyBraceQuantifier.java,this.maximumRepetitions = Integer.parseInt(maximumRepetitionsToken.getText());,if (Integer != null ) this.maximumRepetitions = Integer.parseInt(maximumRepetitionsToken.getText());
EscapedCharacterClassTree.java,this.type = marker.getCharacter();,if (marker != null ) this.type = marker.getCharacter();
RegexBaseVisitor.java,RegexTree element = tree.getElement();,if (tree != null ) RegexTree element = tree.getElement();
RepetitionTree.java,Integer max = quantifier.getMaximumRepetitions();,if (quantifier != null ) Integer max = quantifier.getMaximumRepetitions();
RepetitionTree.java,int min = quantifier.getMinimumRepetitions();,if (quantifier != null ) int min = quantifier.getMinimumRepetitions();
RepetitionTree.java,Integer max = quantifier.getMaximumRepetitions();,if (quantifier != null ) Integer max = quantifier.getMaximumRepetitions();
CombinedTests.java,RegexTree regex = parseResult.getResult();,if (parseResult != null ) RegexTree regex = parseResult.getResult();
CombinedTests.java,List<RegexTree> items = sequence.getItems();,if (sequence != null ) List<RegexTree> items = sequence.getItems();
CombinedTests.java,"SimpleQuantifier quantifier = assertType(SimpleQuantifier.class, firstPart.getQuantifier());","if (firstPart != null ) SimpleQuantifier quantifier = assertType(SimpleQuantifier.class, firstPart.getQuantifier());"
CombinedTests.java,"CapturingGroupTree repeatedGroup = assertType(CapturingGroupTree.class, firstPart.getElement());","if (firstPart != null ) CapturingGroupTree repeatedGroup = assertType(CapturingGroupTree.class, firstPart.getElement());"
CombinedTests.java,"DisjunctionTree repeatedDisjunction = assertType(DisjunctionTree.class, repeatedGroup.getElement());","if (repeatedGroup != null ) DisjunctionTree repeatedDisjunction = assertType(DisjunctionTree.class, repeatedGroup.getElement());"
CombinedTests.java,List<RegexTree> repeatedAlternatives = repeatedDisjunction.getAlternatives();,if (repeatedDisjunction != null ) List<RegexTree> repeatedAlternatives = repeatedDisjunction.getAlternatives();
CombinedTests.java,"DisjunctionTree disjunction = assertType(DisjunctionTree.class, secondPart.getElement());","if (secondPart != null ) DisjunctionTree disjunction = assertType(DisjunctionTree.class, secondPart.getElement());"
CombinedTests.java,List<RegexTree> alternatives = disjunction.getAlternatives();,if (disjunction != null ) List<RegexTree> alternatives = disjunction.getAlternatives();
CombinedTests.java,RegexTree regex = parseResult.getResult();,if (parseResult != null ) RegexTree regex = parseResult.getResult();
CombinedTests.java,List<RegexTree> items = sequence.getItems();,if (sequence != null ) List<RegexTree> items = sequence.getItems();
CombinedTests.java,"SimpleQuantifier quantifier = assertType(SimpleQuantifier.class, firstPart.getQuantifier());","if (firstPart != null ) SimpleQuantifier quantifier = assertType(SimpleQuantifier.class, firstPart.getQuantifier());"
CombinedTests.java,"CapturingGroupTree repeatedGroup = assertType(CapturingGroupTree.class, firstPart.getElement());","if (firstPart != null ) CapturingGroupTree repeatedGroup = assertType(CapturingGroupTree.class, firstPart.getElement());"
CombinedTests.java,"DisjunctionTree repeatedDisjunction = assertType(DisjunctionTree.class, repeatedGroup.getElement());","if (repeatedGroup != null ) DisjunctionTree repeatedDisjunction = assertType(DisjunctionTree.class, repeatedGroup.getElement());"
CombinedTests.java,List<RegexTree> repeatedAlternatives = repeatedDisjunction.getAlternatives();,if (repeatedDisjunction != null ) List<RegexTree> repeatedAlternatives = repeatedDisjunction.getAlternatives();
CombinedTests.java,"DisjunctionTree disjunction = assertType(DisjunctionTree.class, thirdPart.getElement());","if (thirdPart != null ) DisjunctionTree disjunction = assertType(DisjunctionTree.class, thirdPart.getElement());"
CombinedTests.java,List<RegexTree> alternatives = disjunction.getAlternatives();,if (disjunction != null ) List<RegexTree> alternatives = disjunction.getAlternatives();
RegexParserTestUtils.java,AutomatonState finalState = result.getResult().continuation();,if (result != null ) AutomatonState finalState = result.getResult().continuation();
RegexParserTestUtils.java,finalState = finalState.continuation();,if (finalState != null ) finalState = finalState.continuation();
RegexParserTestUtils.java,List<SyntaxError> errors = result.getSyntaxErrors();,if (result != null ) List<SyntaxError> errors = result.getSyntaxErrors();
RegexParserTestUtils.java,int expectedSize = expected.length();,if (expected != null ) int expectedSize = expected.length();
RegexParserTestUtils.java,String actual = o.getClass().getSimpleName();,if (o != null ) String actual = o.getClass().getSimpleName();
RegexParserTestUtils.java,String expected = klass.getSimpleName();,if (klass != null ) String expected = klass.getSimpleName();
CapturingGroupTreeTest.java,RegexTree abcElement = abc.getElement();,if (abc != null ) RegexTree abcElement = abc.getElement();
CapturingGroupTreeTest.java,RegexTree bcElement = bc.getElement();,if (bc != null ) RegexTree bcElement = bc.getElement();
CharacterClassTreeTest.java,"CharacterClassIntersectionTree intersection = assertType(CharacterClassIntersectionTree.class, characterClass.getContents());","if (characterClass != null ) CharacterClassIntersectionTree intersection = assertType(CharacterClassIntersectionTree.class, characterClass.getContents());"
CharacterClassTreeTest.java,List<CharacterClassElementTree> elements = union.getCharacterClasses();,if (union != null ) List<CharacterClassElementTree> elements = union.getCharacterClasses();
CurlyBraceQuantifierTest.java,"CurlyBraceQuantifier quantifier = assertType(CurlyBraceQuantifier.class, repetition.getQuantifier());","if (repetition != null ) CurlyBraceQuantifier quantifier = assertType(CurlyBraceQuantifier.class, repetition.getQuantifier());"
CurlyBraceQuantifierTest.java,"CurlyBraceQuantifier quantifier = assertType(CurlyBraceQuantifier.class, repetition.getQuantifier());","if (repetition != null ) CurlyBraceQuantifier quantifier = assertType(CurlyBraceQuantifier.class, repetition.getQuantifier());"
CurlyBraceQuantifierTest.java,"CurlyBraceQuantifier quantifier = assertType(CurlyBraceQuantifier.class, repetition.getQuantifier());","if (repetition != null ) CurlyBraceQuantifier quantifier = assertType(CurlyBraceQuantifier.class, repetition.getQuantifier());"
CurlyBraceQuantifierTest.java,"CurlyBraceQuantifier quantifier = assertType(CurlyBraceQuantifier.class, repetition.getQuantifier());","if (repetition != null ) CurlyBraceQuantifier quantifier = assertType(CurlyBraceQuantifier.class, repetition.getQuantifier());"
CurlyBraceQuantifierTest.java,"CurlyBraceQuantifier quantifier = assertType(CurlyBraceQuantifier.class, repetition.getQuantifier());","if (repetition != null ) CurlyBraceQuantifier quantifier = assertType(CurlyBraceQuantifier.class, repetition.getQuantifier());"
CurlyBraceQuantifierTest.java,RegexTree x = repetition.getElement();,if (repetition != null ) RegexTree x = repetition.getElement();
CurlyBraceQuantifierTest.java,"CurlyBraceQuantifier quantifier = assertType(CurlyBraceQuantifier.class, repetition.getQuantifier());","if (repetition != null ) CurlyBraceQuantifier quantifier = assertType(CurlyBraceQuantifier.class, repetition.getQuantifier());"
CurlyBraceQuantifierTest.java,"EndOfRepetitionState endOfRep = assertType(EndOfRepetitionState.class, repetition.continuation());","if (repetition != null ) EndOfRepetitionState endOfRep = assertType(EndOfRepetitionState.class, repetition.continuation());"
CurlyBraceQuantifierTest.java,RegexTree x = repetition.getElement();,if (repetition != null ) RegexTree x = repetition.getElement();
CurlyBraceQuantifierTest.java,"CurlyBraceQuantifier quantifier = assertType(CurlyBraceQuantifier.class, repetition.getQuantifier());","if (repetition != null ) CurlyBraceQuantifier quantifier = assertType(CurlyBraceQuantifier.class, repetition.getQuantifier());"
CurlyBraceQuantifierTest.java,"EndOfRepetitionState endOfRep = assertType(EndOfRepetitionState.class, repetition.continuation());","if (repetition != null ) EndOfRepetitionState endOfRep = assertType(EndOfRepetitionState.class, repetition.continuation());"
CurlyBraceQuantifierTest.java,RegexTree x = repetition.getElement();,if (repetition != null ) RegexTree x = repetition.getElement();
CurlyBraceQuantifierTest.java,"EndOfRepetitionState endOfRep = assertType(EndOfRepetitionState.class, repetition.continuation());","if (repetition != null ) EndOfRepetitionState endOfRep = assertType(EndOfRepetitionState.class, repetition.continuation());"
CurlyBraceQuantifierTest.java,"FinalState finalState = assertType(FinalState.class, endOfRep.continuation());","if (endOfRep != null ) FinalState finalState = assertType(FinalState.class, endOfRep.continuation());"
CurlyBraceQuantifierTest.java,"BranchState branch = assertType(BranchState.class, x.continuation());","if (x != null ) BranchState branch = assertType(BranchState.class, x.continuation());"
DisjunctionTreeTest.java,"FinalState finalState = assertType(FinalState.class, disjunction.continuation());","if (disjunction != null ) FinalState finalState = assertType(FinalState.class, disjunction.continuation());"
DisjunctionTreeTest.java,"FinalState finalState = assertType(FinalState.class, disjunction.continuation());","if (disjunction != null ) FinalState finalState = assertType(FinalState.class, disjunction.continuation());"
EscapedCharacterClassTreeTest.java,RegexLexer lexer = source.createLexer();,if (source != null ) RegexLexer lexer = source.createLexer();
EscapedCharacterClassTreeTest.java,SourceCharacter backslash = lexer.getCurrent();,if (lexer != null ) SourceCharacter backslash = lexer.getCurrent();
EscapedCharacterClassTreeTest.java,SourceCharacter type = lexer.getCurrent();,if (lexer != null ) SourceCharacter type = lexer.getCurrent();
EscapedCharacterClassTreeTest.java,SourceCharacter openingBrace = lexer.getCurrent();,if (lexer != null ) SourceCharacter openingBrace = lexer.getCurrent();
EscapedCharacterClassTreeTest.java,SourceCharacter closingBrace = lexer.getCurrent();,if (lexer != null ) SourceCharacter closingBrace = lexer.getCurrent();
GroupTreesTest.java,RegexTree element = group.getElement();,if (group != null ) RegexTree element = group.getElement();
GroupTreesTest.java,RegexTree element = group.getElement();,if (group != null ) RegexTree element = group.getElement();
GroupTreesTest.java,"FinalState finalState = assertType(FinalState.class, group.continuation());","if (group != null ) FinalState finalState = assertType(FinalState.class, group.continuation());"
GroupTreesTest.java,RegexTree x = lookAround.getElement();,if (lookAround != null ) RegexTree x = lookAround.getElement();
GroupTreesTest.java,"FinalState finalState = assertType(FinalState.class, regex.continuation());","if (regex != null ) FinalState finalState = assertType(FinalState.class, regex.continuation());"
GroupTreesTest.java,"EndOfLookaroundState endOfLookaroundState = assertType(EndOfLookaroundState.class, x.continuation());","if (x != null ) EndOfLookaroundState endOfLookaroundState = assertType(EndOfLookaroundState.class, x.continuation());"
GroupTreesTest.java,RegexTree x = lookAround.getElement();,if (lookAround != null ) RegexTree x = lookAround.getElement();
GroupTreesTest.java,"FinalState finalState = assertType(FinalState.class, regex.continuation());","if (regex != null ) FinalState finalState = assertType(FinalState.class, regex.continuation());"
GroupTreesTest.java,"EndOfLookaroundState endOfLookaroundState = assertType(EndOfLookaroundState.class, x.continuation());","if (x != null ) EndOfLookaroundState endOfLookaroundState = assertType(EndOfLookaroundState.class, x.continuation());"
GroupTreesTest.java,RegexTree x = lookAround.getElement();,if (lookAround != null ) RegexTree x = lookAround.getElement();
GroupTreesTest.java,"FinalState finalState = assertType(FinalState.class, regex.continuation());","if (regex != null ) FinalState finalState = assertType(FinalState.class, regex.continuation());"
GroupTreesTest.java,"EndOfLookaroundState endOfLookaroundState = assertType(EndOfLookaroundState.class, x.continuation());","if (x != null ) EndOfLookaroundState endOfLookaroundState = assertType(EndOfLookaroundState.class, x.continuation());"
GroupTreesTest.java,RegexTree x = lookAround.getElement();,if (lookAround != null ) RegexTree x = lookAround.getElement();
GroupTreesTest.java,"FinalState finalState = assertType(FinalState.class, regex.continuation());","if (regex != null ) FinalState finalState = assertType(FinalState.class, regex.continuation());"
GroupTreesTest.java,"EndOfLookaroundState endOfLookaroundState = assertType(EndOfLookaroundState.class, x.continuation());","if (x != null ) EndOfLookaroundState endOfLookaroundState = assertType(EndOfLookaroundState.class, x.continuation());"
OpeningQuoteTest.java,RegexSyntaxElement openingQuote = result.openingQuote();,if (result != null ) RegexSyntaxElement openingQuote = result.openingQuote();
QuantifierTest.java,"SimpleQuantifier quantifier = assertType(SimpleQuantifier.class, repetition.getQuantifier());","if (repetition != null ) SimpleQuantifier quantifier = assertType(SimpleQuantifier.class, repetition.getQuantifier());"
QuantifierTest.java,RegexTree x = repetition.getElement();,if (repetition != null ) RegexTree x = repetition.getElement();
QuantifierTest.java,"SimpleQuantifier quantifier = assertType(SimpleQuantifier.class, repetition.getQuantifier());","if (repetition != null ) SimpleQuantifier quantifier = assertType(SimpleQuantifier.class, repetition.getQuantifier());"
QuantifierTest.java,"EndOfRepetitionState endOfRep = assertType(EndOfRepetitionState.class, repetition.continuation());","if (repetition != null ) EndOfRepetitionState endOfRep = assertType(EndOfRepetitionState.class, repetition.continuation());"
QuantifierTest.java,"SimpleQuantifier quantifier = assertType(SimpleQuantifier.class, repetition.getQuantifier());","if (repetition != null ) SimpleQuantifier quantifier = assertType(SimpleQuantifier.class, repetition.getQuantifier());"
QuantifierTest.java,"SimpleQuantifier quantifier = assertType(SimpleQuantifier.class, repetition.getQuantifier());","if (repetition != null ) SimpleQuantifier quantifier = assertType(SimpleQuantifier.class, repetition.getQuantifier());"
QuantifierTest.java,"SimpleQuantifier quantifier = assertType(SimpleQuantifier.class, repetition.getQuantifier());","if (repetition != null ) SimpleQuantifier quantifier = assertType(SimpleQuantifier.class, repetition.getQuantifier());"
QuantifierTest.java,"EndOfRepetitionState endOfRep = assertType(EndOfRepetitionState.class, repetition.continuation());","if (repetition != null ) EndOfRepetitionState endOfRep = assertType(EndOfRepetitionState.class, repetition.continuation());"
QuantifierTest.java,"FinalState finalState = assertType(FinalState.class, endOfRep.continuation());","if (endOfRep != null ) FinalState finalState = assertType(FinalState.class, endOfRep.continuation());"
QuantifierTest.java,RegexTree x = repetition.getElement();,if (repetition != null ) RegexTree x = repetition.getElement();
RegexBaseVisitorTest.java,RegexTree tree = result.getResult();,if (result != null ) RegexTree tree = result.getResult();
RegexBaseVisitorTest.java,RegexTree tree = result.getResult();,if (result != null ) RegexTree tree = result.getResult();
SimplifiedRegexCharacterClassTest.java,RegexSource dummySource = new RegexSource(Collections.emptyList());,if (RegexSource(Collections != null ) RegexSource dummySource = new RegexSource(Collections.emptyList());
JavaCharacterParser.java,JavaCharacter javaCharacter = unicodeProcessedCharacters.getCurrent();,if (unicodeProcessedCharacters != null ) JavaCharacter javaCharacter = unicodeProcessedCharacters.getCurrent();
JavaCharacterParser.java,JavaCharacter javaCharacter = unicodeProcessedCharacters.getCurrent();,if (unicodeProcessedCharacters != null ) JavaCharacter javaCharacter = unicodeProcessedCharacters.getCurrent();
JavaCharacterParser.java,char ch = javaCharacter.getCharacter();,if (javaCharacter != null ) char ch = javaCharacter.getCharacter();
JavaCharacterParser.java,javaCharacter = unicodeProcessedCharacters.getCurrent();,if (unicodeProcessedCharacters != null ) javaCharacter = unicodeProcessedCharacters.getCurrent();
RegexCheck.java,AnalyzerMessage.TextSpan startSpan = AnalyzerMessage.textSpanFor(startLocation.getJavaTree());,if (AnalyzerMessage != null ) AnalyzerMessage.TextSpan startSpan = AnalyzerMessage.textSpanFor(startLocation.getJavaTree());
RegexCheck.java,AnalyzerMessage.TextSpan endSpan = AnalyzerMessage.textSpanFor(endLocation.getJavaTree());,if (AnalyzerMessage != null ) AnalyzerMessage.TextSpan endSpan = AnalyzerMessage.textSpanFor(endLocation.getJavaTree());
RegexCheck.java,AnalyzerMessage.TextSpan result = AnalyzerMessage.textSpanFor(location.getJavaTree());,if (AnalyzerMessage != null ) AnalyzerMessage.TextSpan result = AnalyzerMessage.textSpanFor(location.getJavaTree());
RegexLexer.java,JavaCharacter javaCharacter = characters.getCurrent();,if (characters != null ) JavaCharacter javaCharacter = characters.getCurrent();
RegexParser.java,JavaCharacter current = characters.getCurrent();,if (characters != null ) JavaCharacter current = characters.getCurrent();
RegexParser.java,JavaCharacter openingBrace = characters.getCurrent();,if (characters != null ) JavaCharacter openingBrace = characters.getCurrent();
RegexParser.java,JavaCharacter character = characters.getCurrent();,if (characters != null ) JavaCharacter character = characters.getCurrent();
RegexParser.java,JavaCharacter openingParen = characters.getCurrent();,if (characters != null ) JavaCharacter openingParen = characters.getCurrent();
RegexParser.java,JavaCharacter closingParen = characters.getCurrent();,if (characters != null ) JavaCharacter closingParen = characters.getCurrent();
RegexParser.java,JavaCharacter backslash = characters.getCurrent();,if (characters != null ) JavaCharacter backslash = characters.getCurrent();
RegexParser.java,JavaCharacter character = characters.getCurrent();,if (characters != null ) JavaCharacter character = characters.getCurrent();
RegexParser.java,JavaCharacter c = characters.getCurrent();,if (characters != null ) JavaCharacter c = characters.getCurrent();
RegexParser.java,JavaCharacter marker = characters.getCurrent();,if (characters != null ) JavaCharacter marker = characters.getCurrent();
RegexParser.java,JavaCharacter openerChar = characters.getCurrent();,if (characters != null ) JavaCharacter openerChar = characters.getCurrent();
RegexParser.java,JavaCharacter closerChar = characters.getCurrent();,if (characters != null ) JavaCharacter closerChar = characters.getCurrent();
RegexParser.java,JavaCharacter firstDigit = characters.getCurrent();,if (characters != null ) JavaCharacter firstDigit = characters.getCurrent();
RegexParser.java,JavaCharacter currentChar = characters.getCurrent();,if (characters != null ) JavaCharacter currentChar = characters.getCurrent();
RegexParser.java,JavaCharacter boundary = characters.getCurrent();,if (characters != null ) JavaCharacter boundary = characters.getCurrent();
RegexParser.java,JavaCharacter openingBracket = characters.getCurrent();,if (characters != null ) JavaCharacter openingBracket = characters.getCurrent();
RegexParser.java,JavaCharacter firstAnd = characters.getCurrent();,if (characters != null ) JavaCharacter firstAnd = characters.getCurrent();
RegexParser.java,JavaCharacter secondAnd = characters.getCurrent();,if (characters != null ) JavaCharacter secondAnd = characters.getCurrent();
RegexParser.java,JavaCharacter startCharacter = characters.getCurrent();,if (characters != null ) JavaCharacter startCharacter = characters.getCurrent();
RegexParser.java,JavaCharacter backslash = characters.getCurrent();,if (characters != null ) JavaCharacter backslash = characters.getCurrent();
RegexParser.java,JavaCharacter endCharacter = characters.getCurrent();,if (characters != null ) JavaCharacter endCharacter = characters.getCurrent();
RegexSource.java,this.indexOfLiteral = entry.getValue();,if (entry != null ) this.indexOfLiteral = entry.getValue();
RegexSource.java,this.indexInsideLiteral = sourceIndex - entry.getKey();,if (entry != null ) this.indexInsideLiteral = sourceIndex - entry.getKey();
RegexToken.java,value = super.getText();,if (super != null ) value = super.getText();
CurlyBraceQuantifierTest.java,List<Location> locations = error.getLocations();,if (error != null ) List<Location> locations = error.getLocations();
CurlyBraceQuantifierTest.java,List<Location> locations = error.getLocations();,if (error != null ) List<Location> locations = error.getLocations();
CurlyBraceQuantifierTest.java,List<Location> locations = error.getLocations();,if (error != null ) List<Location> locations = error.getLocations();
CurlyBraceQuantifierTest.java,List<Location> locations = error.getLocations();,if (error != null ) List<Location> locations = error.getLocations();
CurlyBraceQuantifierTest.java,List<Location> locations = error.getLocations();,if (error != null ) List<Location> locations = error.getLocations();
CurlyBraceQuantifierTest.java,List<Location> locations = error.getLocations();,if (error != null ) List<Location> locations = error.getLocations();
CurlyBraceQuantifierTest.java,List<Location> locations = error.getLocations();,if (error != null ) List<Location> locations = error.getLocations();
EscapedCharacterClassTreeTest.java,JavaCharacter backslash = lexer.getCurrent();,if (lexer != null ) JavaCharacter backslash = lexer.getCurrent();
EscapedCharacterClassTreeTest.java,JavaCharacter type = lexer.getCurrent();,if (lexer != null ) JavaCharacter type = lexer.getCurrent();
EscapedCharacterClassTreeTest.java,JavaCharacter openingBrace = lexer.getCurrent();,if (lexer != null ) JavaCharacter openingBrace = lexer.getCurrent();
EscapedCharacterClassTreeTest.java,JavaCharacter closingBrace = lexer.getCurrent();,if (lexer != null ) JavaCharacter closingBrace = lexer.getCurrent();
GroupTreesTest.java,List<Location> locations = error.getLocations();,if (error != null ) List<Location> locations = error.getLocations();
GroupTreesTest.java,List<Location> locations = error.getLocations();,if (error != null ) List<Location> locations = error.getLocations();
QuantifierTest.java,List<Location> locations = error.getLocations();,if (error != null ) List<Location> locations = error.getLocations();
MyJavaRulesDefinition.java,String ruleKey = ruleAnnotation.key();,if (ruleAnnotation != null ) String ruleKey = ruleAnnotation.key();
MyJavaRulesDefinition.java,String metadataKey = rule.key();,if (rule != null ) String metadataKey = rule.key();
MyJavaRulesDefinitionTest.java,context = new RulesDefinition.Context();,if (RulesDefinition != null ) context = new RulesDefinition.Context();
RegexTreeHelper.java,TransitionType transition = auto.start.incomingTransitionType();,if (auto != null ) TransitionType transition = auto.start.incomingTransitionType();
CurlyBraceQuantifierTest.java,"FinalState finalState = assertType(FinalState.class, repetition.continuation());","if (repetition != null ) FinalState finalState = assertType(FinalState.class, repetition.continuation());"
CurlyBraceQuantifierTest.java,"FinalState finalState = assertType(FinalState.class, repetition.continuation());","if (repetition != null ) FinalState finalState = assertType(FinalState.class, repetition.continuation());"
CurlyBraceQuantifierTest.java,"FinalState finalState = assertType(FinalState.class, repetition.continuation());","if (repetition != null ) FinalState finalState = assertType(FinalState.class, repetition.continuation());"
QuantifierTest.java,"FinalState finalState = assertType(FinalState.class, repetition.continuation());","if (repetition != null ) FinalState finalState = assertType(FinalState.class, repetition.continuation());"
QuantifierTest.java,"FinalState finalState = assertType(FinalState.class, repetition.continuation());","if (repetition != null ) FinalState finalState = assertType(FinalState.class, repetition.continuation());"
MethodTreeUtils.java,match = expressionMatch(mit.methodSelect());,if (expressionMatch(mit != null ) match = expressionMatch(mit.methodSelect());
InterruptedExceptionCheck.java,Optional<Type> interruptType = findInterruptingType(catchTree.parameter());,if (findInterruptingType(catchTree != null ) Optional<Type> interruptType = findInterruptingType(catchTree.parameter());
MutableMembersUsageCheck.java,ExpressionTree initializer = tree.initializer();,if (tree != null ) ExpressionTree initializer = tree.initializer();
SpecializedFunctionalInterfacesCheck.java,boolean usedAsMethodReference = isReferenced(variableTree.symbol().usages());,if (isReferenced(variableTree != null ) boolean usedAsMethodReference = isReferenced(variableTree.symbol().usages());
S2755_XxeProcessingCheck_DocumentBuilderFactory.java,DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); // Noncompliant {{Disable access to external entities in XML parsing.}},if (parsing != null ) DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); // Noncompliant {{Disable access to external entities in XML parsing.}}
S2755_XxeProcessingCheck_DocumentBuilderFactory.java,DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); // Noncompliant
S2755_XxeProcessingCheck_DocumentBuilderFactory.java,DocumentBuilder builder = factory.newDocumentBuilder();,if (factory != null ) DocumentBuilder builder = factory.newDocumentBuilder();
UnusedGroupNamesCheck.java,Integer groupNumberValue = groupNumber.get();,if (groupNumber != null ) Integer groupNumberValue = groupNumber.get();
UnusedGroupNamesCheck.java,String groupNameValue = groupName.get();,if (groupName != null ) String groupNameValue = groupName.get();
VisitorsBridge.java,this.symbolicExecutionEnabled = symbolicExecutionMode.isEnabled();,if (symbolicExecutionMode != null ) this.symbolicExecutionEnabled = symbolicExecutionMode.isEnabled();
CaseInsensitiveComparisonCheck.java,MemberSelectExpressionTree memberSelect = (MemberSelectExpressionTree) methodInvocation.methodSelect();,if (methodInvocation != null ) MemberSelectExpressionTree memberSelect = (MemberSelectExpressionTree) methodInvocation.methodSelect();
CaseInsensitiveComparisonCheck.java,String name = memberSelect.identifier().name();,if (memberSelect != null ) String name = memberSelect.identifier().name();
CaseInsensitiveComparisonCheck.java,result = foo.equals(bar.toLowerCase());             // Noncompliant {{Replace these toUpperCase()/toLowerCase() and equals() calls with a single equalsIgnoreCase() call.}},if (call != null ) result = foo.equals(bar.toLowerCase());             // Noncompliant {{Replace these toUpperCase()/toLowerCase() and equals() calls with a single equalsIgnoreCase() call.}}
CaseInsensitiveComparisonCheck.java,result = foo.equals(bar.toUpperCase());             // Noncompliant {{Replace these toUpperCase()/toLowerCase() and equals() calls with a single equalsIgnoreCase() call.}},if (call != null ) result = foo.equals(bar.toUpperCase());             // Noncompliant {{Replace these toUpperCase()/toLowerCase() and equals() calls with a single equalsIgnoreCase() call.}}
CaseInsensitiveComparisonCheck.java,String foo = this.foo.toUpperCase();                        // Compliant,if (Compliant != null ) String foo = this.foo.toUpperCase();                        // Compliant
MockitoAnnotatedObjectsShouldBeInitializedCheck.java,SymbolMetadata metadata = clazz.symbol().metadata();,if (clazz != null ) SymbolMetadata metadata = clazz.symbol().metadata();
UnpredictableSaltCheck.java,byte[] hashedPassword = md.digest(); // Noncompliant [[sc=29;ec=40]] {{Add an unpredictable salt value to this hash.}},if (hash != null ) byte[] hashedPassword = md.digest(); // Noncompliant [[sc=29;ec=40]] {{Add an unpredictable salt value to this hash.}}
UnpredictableSaltCheck.java,byte[] hashedPassword = md.digest(); // Compliant,if (Compliant != null ) byte[] hashedPassword = md.digest(); // Compliant
UnpredictableSaltCheck.java,byte[] hashedPassword = md.digest(); // Compliant,if (Compliant != null ) byte[] hashedPassword = md.digest(); // Compliant
UnpredictableSaltCheck.java,byte[] hashedPassword = md.digest(); // Compliant,if (Compliant != null ) byte[] hashedPassword = md.digest(); // Compliant
UnpredictableSaltCheck.java,byte[] hashedPassword = md.digest(); // Compliant,if (Compliant != null ) byte[] hashedPassword = md.digest(); // Compliant
UnpredictableSaltCheck.java,byte[] hashedPassword = md.digest(); // Compliant,if (Compliant != null ) byte[] hashedPassword = md.digest(); // Compliant
UnpredictableSaltCheck.java,byte[] hashedPassword = md.digest(); // Compliant,if (Compliant != null ) byte[] hashedPassword = md.digest(); // Compliant
UnpredictableSaltCheck.java,byte[] hashedPassword = md.digest(); // Compliant,if (Compliant != null ) byte[] hashedPassword = md.digest(); // Compliant
BooleanLiteralCheck.java,"literal = getBooleanLiteral(expression.trueExpression(), expression.falseExpression());","if (expression != null ) literal = getBooleanLiteral(expression.trueExpression(), expression.falseExpression());"
BooleanLiteralCheck.java,"literal = getBooleanLiteral(expression.leftOperand(), expression.rightOperand());","if (expression != null ) literal = getBooleanLiteral(expression.leftOperand(), expression.rightOperand());"
UnpredictableSaltCheck.java,Tree declaration = symbol.declaration();,if (symbol != null ) Tree declaration = symbol.declaration();
FileCreateTempFileCheck.java,ExpressionTree variable = tree.variable();,if (tree != null ) ExpressionTree variable = tree.variable();
FileCreateTempFileCheck.java,ExpressionTree initializer = tree.initializer();,if (tree != null ) ExpressionTree initializer = tree.initializer();
FileCreateTempFileCheck.java,Symbol symbol = tree.symbol();,if (tree != null ) Symbol symbol = tree.symbol();
FileCreateTempFileCheck.java,ExpressionTree methodSelect = mit.methodSelect();,if (mit != null ) ExpressionTree methodSelect = mit.methodSelect();
UnpredictableSaltCheck.java,ExpressionTree methodSelect = mit.methodSelect();,if (mit != null ) ExpressionTree methodSelect = mit.methodSelect();
JParser.java,final int line = problem.getSourceLineNumber();,if (problem != null ) final int line = problem.getSourceLineNumber();
JParser.java,final int column = astNode.getColumnNumber(problem.getSourceStart());,if (astNode != null ) final int column = astNode.getColumnNumber(problem.getSourceStart());
ControlCharacterInLiteralCheck.java,String literalValue = trimQuotes(literal.value());,if (trimQuotes(literal != null ) String literalValue = trimQuotes(literal.value());
InterruptedExceptionCheck.java,Symbol symbol = tree.symbol();,if (tree != null ) Symbol symbol = tree.symbol();
AnalyzerMessage.java,String text = syntaxToken.text();,if (syntaxToken != null ) String text = syntaxToken.text();
DateTimeFormatterMismatchCheck.java,Arguments arguments = invocation.arguments();,if (invocation != null ) Arguments arguments = invocation.arguments();
DateTimeFormatterMismatchCheck.java,Symbol symbol = identifier.symbol();,if (identifier != null ) Symbol symbol = identifier.symbol();
DateTimeFormatterMismatchCheck.java,Tree declaration = symbol.declaration();,if (symbol != null ) Tree declaration = symbol.declaration();
DateTimeFormatterMismatchCheck.java,ExpressionTree initializer = variable.initializer();,if (variable != null ) ExpressionTree initializer = variable.initializer();
DateTimeFormatterMismatchCheck.java,ExpressionTree wanderer = callToAppendValue.methodSelect();,if (callToAppendValue != null ) ExpressionTree wanderer = callToAppendValue.methodSelect();
DateTimeFormatterMismatchCheck.java,wanderer = mit.methodSelect();,if (mit != null ) wanderer = mit.methodSelect();
DateTimeFormatterMismatchCheck.java,IdentifierTree identifier = select.identifier();,if (select != null ) IdentifierTree identifier = select.identifier();
DateTimeFormatterMismatchCheck.java,IdentifierTree identifier = select.identifier();,if (select != null ) IdentifierTree identifier = select.identifier();
SuppressWarningFilter.java,excludedLinesByRule = excludedLinesByComponent.get(issue.componentKey());,if (excludedLinesByComponent != null ) excludedLinesByRule = excludedLinesByComponent.get(issue.componentKey());
AssertionsCompletenessCheck.java,Symbol owner = methodTree.symbol().owner();,if (methodTree != null ) Symbol owner = methodTree.symbol().owner();
AssertionsInTestsCheck.java,String methodName = method.name();,if (method != null ) String methodName = method.name();
UselessPackageInfoCheck.java,File file = context.getInputFile().file();,if (context != null ) File file = context.getInputFile().file();
ClasspathForMainTest.java,List<File> elements = createJavaClasspath().getElements();,if (createJavaClasspath() != null ) List<File> elements = createJavaClasspath().getElements();
ClasspathForMainTest.java,List<File> elements = createJavaClasspath().getElements();,if (createJavaClasspath() != null ) List<File> elements = createJavaClasspath().getElements();
SynchronizationOnStringOrBoxedCheck.java,Type expressionType = syncStatement.expression().symbolType();,if (syncStatement != null ) Type expressionType = syncStatement.expression().symbolType();
JParserReleasingJarsTest.java,Symbol foo = getFooSymbol(Collections.emptyList());,if (getFooSymbol(Collections != null ) Symbol foo = getFooSymbol(Collections.emptyList());
SerializableFieldInSerializableClassCheck.java,IdentifierTree simpleName = variableTree.simpleName();,if (variableTree != null ) IdentifierTree simpleName = variableTree.simpleName();
SerializableFieldInSerializableClassCheck.java,ExpressionTree initializer = variableTree.initializer();,if (variableTree != null ) ExpressionTree initializer = variableTree.initializer();
SerializableFieldInSerializableClassCheck.java,Symbol.VariableSymbol variableSymbol = (Symbol.VariableSymbol) variableTree.symbol();,if (variableTree != null ) Symbol.VariableSymbol variableSymbol = (Symbol.VariableSymbol) variableTree.symbol();
ConstraintManager.java,final Type type = identifier.symbol().type();,if (identifier != null ) final Type type = identifier.symbol().type();
MutableMembersUsageCheck.java,VariableTree declaration = symbol.declaration();,if (symbol != null ) VariableTree declaration = symbol.declaration();
ListTreeImpl.java,E result = topIter.next();,if (topIter != null ) E result = topIter.next();
AbstractIterator.java,this.next = this.computeNext();,if (this != null ) this.next = this.computeNext();
ListTreeImplTest.java,Iterable<Tree> result = listTree.children();,if (listTree != null ) Iterable<Tree> result = listTree.children();
ListTreeImplTest.java,Iterable<Tree> result = listTree.children();,if (listTree != null ) Iterable<Tree> result = listTree.children();
ProgramStateTest.java,Constraint relationConstraint = Iterables.getOnlyElement(learnedConstraints).constraint();,if (Iterables != null ) Constraint relationConstraint = Iterables.getOnlyElement(learnedConstraints).constraint();
SyntaxHighlighterVisitor.java,keywords = ImmutableSet.copyOf(JavaKeyword.keywordValues());,if (ImmutableSet != null ) keywords = ImmutableSet.copyOf(JavaKeyword.keywordValues());
SyntaxHighlighterVisitor.java,restrictedKeywords = ImmutableSet.copyOf(JavaRestrictedKeyword.restrictedKeywordValues());,if (ImmutableSet != null ) restrictedKeywords = ImmutableSet.copyOf(JavaRestrictedKeyword.restrictedKeywordValues());
SyntaxHighlighterVisitor.java,typesByKind = typesByKindBuilder.build();,if (typesByKindBuilder != null ) typesByKind = typesByKindBuilder.build();
JavaVersionAwareVisitorTest.java,messages = Lists.newLinkedList();,if (Lists != null ) messages = Lists.newLinkedList();
TreeTokenCompletenessTest.java,List<Integer> keys = Lists.newArrayList(differences.keySet());,if (Lists != null ) List<Integer> keys = Lists.newArrayList(differences.keySet());
TreeTokenCompletenessTest.java,List<String> diffsWithLines = Lists.newLinkedList();,if (Lists != null ) List<String> diffsWithLines = Lists.newLinkedList();
ModifiersTreeImpl.java,this.annotations = annotationBuilder.build();,if (annotationBuilder != null ) this.annotations = annotationBuilder.build();
ModifiersTreeImpl.java,this.modifiers = modifierBuilder.build();,if (modifierBuilder != null ) this.modifiers = modifierBuilder.build();
Flow.java,this.elementsBuilder = ImmutableList.builder();,if (ImmutableList != null ) this.elementsBuilder = ImmutableList.builder();
MapComputeIfAbsentOrPresentCheck.java,ProgramState ps = context.getState();,if (context != null ) ProgramState ps = context.getState();
MapComputeIfAbsentOrPresentCheck.java,ProgramState psAfterInvocation = context.getState();,if (context != null ) ProgramState psAfterInvocation = context.getState();
MapComputeIfAbsentOrPresentCheck.java,SymbolicValue valueSV = psAfterInvocation.peekValue();,if (psAfterInvocation != null ) SymbolicValue valueSV = psAfterInvocation.peekValue();
MapComputeIfAbsentOrPresentCheck.java,Tree parent = mit.parent();,if (mit != null ) Tree parent = mit.parent();
MapComputeIfAbsentOrPresentCheck.java,parent = parent.parent();,if (parent != null ) parent = parent.parent();
UnusedGroupNamesCheck.java,Type returnedType = returnedSymbol.type();,if (returnedSymbol != null ) Type returnedType = returnedSymbol.type();
UnusedGroupNamesCheck.java,String methodName = mit.symbol().name();,if (mit != null ) String methodName = mit.symbol().name();
UnusedGroupNamesCheck.java,Tree parent = mit.parent();,if (mit != null ) Tree parent = mit.parent();
UnusedGroupNamesCheck.java,symbol = mset.identifier().symbol();,if (mset != null ) symbol = mset.identifier().symbol();
UnusedGroupNamesCheck.java,target = regexParseResult.getResult();,if (regexParseResult != null ) target = regexParseResult.getResult();
RegexParser.java,"DotTree tree = new DotTree(source, characters.getCurrentIndexRange());","if (characters != null ) DotTree tree = new DotTree(source, characters.getCurrentIndexRange());"
RegexBaseVisitor.java,activeFlags = regexParseResult.getInitialFlags();,if (regexParseResult != null ) activeFlags = regexParseResult.getInitialFlags();
AbstractRegexCheck.java,Arguments args = mit.arguments();,if (mit != null ) Arguments args = mit.arguments();
ConvertTest.java,Constructor<Convert> constructor = Convert.class.getDeclaredConstructor();,if (Convert != null ) Constructor<Convert> constructor = Convert.class.getDeclaredConstructor();
Result.java,Symbol symbol = tree.symbol();,if (tree != null ) Symbol symbol = tree.symbol();
Result.java,result = entry.getValue();,if (entry != null ) result = entry.getValue();
Result.java,SyntaxToken token = usage.identifierToken();,if (usage != null ) SyntaxToken token = usage.identifierToken();
A.java,var conn = url.openConnection();,if (url != null ) var conn = url.openConnection();
A.java,var stream = reader.lines();,if (reader != null ) var stream = reader.lines();
A.java,var conn = url.openConnection();,if (url != null ) var conn = url.openConnection();
A.java,var stream = reader.lines();,if (reader != null ) var stream = reader.lines();
InvalidRegexCheck.java,String key = backReference.getKey();,if (backReference != null ) String key = backReference.getKey();
InvalidRegexCheck.java,BackReferenceTree backReferenceTree = backReference.getValue();,if (backReference != null ) BackReferenceTree backReferenceTree = backReference.getValue();
InvalidRegexCheck.java,String groupName = backReferenceTree.groupName();,if (backReferenceTree != null ) String groupName = backReferenceTree.groupName();
RedundantTypeCastCheck.java,Symbol methodAsArg = expression.method().symbol();,if (expression != null ) Symbol methodAsArg = expression.method().symbol();
CallOuterPrivateMethodCheck.java,usages = HashMultiset.create();,if (HashMultiset != null ) usages = HashMultiset.create();
CallOuterPrivateMethodCheck.java,Multiset<Symbol> innerClassUsages = usageByInnerClassEntry.getValue();,if (usageByInnerClassEntry != null ) Multiset<Symbol> innerClassUsages = usageByInnerClassEntry.getValue();
KeySetInsteadOfEntrySetCheck.java,Tree firstArgument = Iterables.getOnlyElement(tree.arguments());,if (Iterables != null ) Tree firstArgument = Iterables.getOnlyElement(tree.arguments());
ObjectFinalizeOverridenCallsSuperFinalizeCheck.java,StatementTree last = Iterables.getLast(blockTree.body());,if (Iterables != null ) StatementTree last = Iterables.getLast(blockTree.body());
SelectorMethodArgumentCheck.java,Collection<IdentifierTree> usages = variable.usages();,if (variable != null ) Collection<IdentifierTree> usages = variable.usages();
SillyEqualsCheck.java,ExpressionTree firstArgument = Iterables.getOnlyElement(tree.arguments());,if (Iterables != null ) ExpressionTree firstArgument = Iterables.getOnlyElement(tree.arguments());
TooManyStatementsPerLineCheck.java,int count = entry.getCount();,if (entry != null ) int count = entry.getCount();
BaseTreeVisitorIssueFilter.java,excludedLinesByRule = HashMultimap.create();,if (HashMultimap != null ) excludedLinesByRule = HashMultimap.create();
FilterVerifier.java,List<Integer> lines = Lists.newArrayList(issuesByLines.keySet());,if (Lists != null ) List<Integer> lines = Lists.newArrayList(issuesByLines.keySet());
DebugMethodYieldsCheck.java,IdentifierTree methodName = methodNames.pop();,if (methodNames != null ) IdentifierTree methodName = methodNames.pop();
DebugMethodYieldsCheck.java,Flow.Builder builder = Flow.builder();,if (Flow != null ) Flow.Builder builder = Flow.builder();
DebugMethodYieldsOnInvocationsCheck.java,IdentifierTree methodName = getIdentifier(mit.methodSelect());,if (getIdentifier(mit != null ) IdentifierTree methodName = getIdentifier(mit.methodSelect());
DebugMethodYieldsOnInvocationsCheck.java,Flow.Builder builder = Flow.builder();,if (Flow != null ) Flow.Builder builder = Flow.builder();
JavaRulesDefinitionTest.java,settings = new MapSettings().asConfig();,if (MapSettings() != null ) settings = new MapSettings().asConfig();
JavaRulesDefinitionTest.java,JavaRulesDefinition definition = new JavaRulesDefinition(settings.asConfig());,if (JavaRulesDefinition(settings != null ) JavaRulesDefinition definition = new JavaRulesDefinition(settings.asConfig());
JavaRulesDefinitionTest.java,RulesDefinition.Context context = new RulesDefinition.Context();,if (RulesDefinition != null ) RulesDefinition.Context context = new RulesDefinition.Context();
CheckListTest.java,Set<String> names = Sets.newHashSet();,if (Sets != null ) Set<String> names = Sets.newHashSet();
JavaAstScanner.java,String fileContent = inputFile.contents();,if (inputFile != null ) String fileContent = inputFile.contents();
InternalCheckVerifier.java,Multiset<Integer> actualLines = HashMultiset.create();,if (HashMultiset != null ) Multiset<Integer> actualLines = HashMultiset.create();
CheckVerifierTest.java,List<String> issuesOnFile = Lists.newLinkedList();,if (Lists != null ) List<String> issuesOnFile = Lists.newLinkedList();
ExpectationsTest.java,Parser parser = new Expectations().parser();,if (Expectations() != null ) Parser parser = new Expectations().parser();
ExpectationsTest.java,Parser parser = new Expectations().parser();,if (Expectations() != null ) Parser parser = new Expectations().parser();
PrintfFailCheck.java,GregorianCalendar gc = (GregorianCalendar) GregorianCalendar.getInstance();,if (GregorianCalendar != null ) GregorianCalendar gc = (GregorianCalendar) GregorianCalendar.getInstance();
PrintfMisuseCheck.java,GregorianCalendar gc = (GregorianCalendar) GregorianCalendar.getInstance();,if (GregorianCalendar != null ) GregorianCalendar gc = (GregorianCalendar) GregorianCalendar.getInstance();
DuplicatesInCharacterClassCheck.java,int lower = range.getLowerBound().codePointOrUnit();,if (range != null ) int lower = range.getLowerBound().codePointOrUnit();
DuplicatesInCharacterClassCheck.java,int upper = range.getUpperBound().codePointOrUnit();,if (range != null ) int upper = range.getUpperBound().codePointOrUnit();
SuppressWarningTest.java,ORCHESTRATOR = orchestratorBuilder.build();,if (orchestratorBuilder != null ) ORCHESTRATOR = orchestratorBuilder.build();
SuppressWarningFilter.java,String componentKey = analyzerMessage.getInputComponent().key();,if (analyzerMessage != null ) String componentKey = analyzerMessage.getInputComponent().key();
SonarComponentsTest.java,DefaultFileSystem fileSystem = context.fileSystem();,if (context != null ) DefaultFileSystem fileSystem = context.fileSystem();
SonarComponentsTest.java,List<Issue> issues = new ArrayList<>(context.allIssues());,if (ArrayList<>(context != null ) List<Issue> issues = new ArrayList<>(context.allIssues());
IgnoredReturnValueCheck.java,Tree parent =  mit.parent();,if (mit != null ) Tree parent =  mit.parent();
ReplaceLambdaByMethodRefCheck.java,Tree lambdaBody = lambda.body();,if (lambda != null ) Tree lambdaBody = lambda.body();
ReplaceLambdaByMethodRefCheck.java,ExpressionTree leftOperand = ExpressionUtils.skipParentheses(bet.leftOperand());,if (ExpressionUtils != null ) ExpressionTree leftOperand = ExpressionUtils.skipParentheses(bet.leftOperand());
ReplaceLambdaByMethodRefCheck.java,ExpressionTree rightOperand = ExpressionUtils.skipParentheses(bet.rightOperand());,if (ExpressionUtils != null ) ExpressionTree rightOperand = ExpressionUtils.skipParentheses(bet.rightOperand());
ReplaceLambdaByMethodRefCheck.java,List<VariableTree> parameters = tree.parameters();,if (tree != null ) List<VariableTree> parameters = tree.parameters();
UnicodeAwareCharClassesCheck.java,int unicodeUnawareRangeSize = unicodeUnawareRange.size();,if (unicodeUnawareRange != null ) int unicodeUnawareRangeSize = unicodeUnawareRange.size();
CharacterClassTreeTest.java,List<RegexTree> elements = union.getCharacterClasses();,if (union != null ) List<RegexTree> elements = union.getCharacterClasses();
JavaTreeModelTest.java,SyntaxToken token = tree.token();,if (tree != null ) SyntaxToken token = tree.token();
JavaTreeModelTest.java,token = tree.token();,if (tree != null ) token = tree.token();
JavaTreeModelTest.java,token = tree.token();,if (tree != null ) token = tree.token();
JavaTreeModelTest.java,token = tree.token();,if (tree != null ) token = tree.token();
JavaTreeModelTest.java,token = tree.token();,if (tree != null ) token = tree.token();
JavaTreeModelTest.java,token = tree.token();,if (tree != null ) token = tree.token();
JavaTreeModelTest.java,token = tree.token();,if (tree != null ) token = tree.token();
JavaTreeModelTest.java,token = tree.token();,if (tree != null ) token = tree.token();
JavaTreeModelTest.java,token = tree.token();,if (tree != null ) token = tree.token();
JavaTreeModelTest.java,SyntaxToken token = tree.token();,if (tree != null ) SyntaxToken token = tree.token();
JavaTreeModelTest.java,ParameterizedTypeTree parameterizedTypeTree = (ParameterizedTypeTree) variableTree.type();,if (variableTree != null ) ParameterizedTypeTree parameterizedTypeTree = (ParameterizedTypeTree) variableTree.type();
JavaTreeModelTest.java,TypeArguments typeArguments = parameterizedTypeTree.typeArguments();,if (parameterizedTypeTree != null ) TypeArguments typeArguments = parameterizedTypeTree.typeArguments();
JavaTreeModelTest.java,parameterizedTypeTree = (ParameterizedTypeTree) variableTree.type();,if (variableTree != null ) parameterizedTypeTree = (ParameterizedTypeTree) variableTree.type();
JavaTreeModelTest.java,typeArguments = parameterizedTypeTree.typeArguments();,if (parameterizedTypeTree != null ) typeArguments = parameterizedTypeTree.typeArguments();
JavaTreeModelTest.java,parameterizedTypeTree = (ParameterizedTypeTree) variableTree.type();,if (variableTree != null ) parameterizedTypeTree = (ParameterizedTypeTree) variableTree.type();
JavaTreeModelTest.java,typeArguments = parameterizedTypeTree.typeArguments();,if (parameterizedTypeTree != null ) typeArguments = parameterizedTypeTree.typeArguments();
JavaTreeModelTest.java,List<ModifierKeywordTree> modifiers = tree.modifiers().modifiers();,if (tree != null ) List<ModifierKeywordTree> modifiers = tree.modifiers().modifiers();
JavaTreeModelTest.java,TypeParameters typeParameters = tree.typeParameters();,if (tree != null ) TypeParameters typeParameters = tree.typeParameters();
JavaTreeModelTest.java,modifiers = tree.modifiers().modifiers();,if (tree != null ) modifiers = tree.modifiers().modifiers();
JavaTreeModelTest.java,typeParameters = tree.typeParameters();,if (tree != null ) typeParameters = tree.typeParameters();
JavaTreeModelTest.java,List<AnnotationTree> annotations = tree.modifiers().annotations();,if (tree != null ) List<AnnotationTree> annotations = tree.modifiers().annotations();
JavaTreeModelTest.java,annotations = tree.modifiers().annotations();,if (tree != null ) annotations = tree.modifiers().annotations();
JavaTreeModelTest.java,annotations = tree.modifiers().annotations();,if (tree != null ) annotations = tree.modifiers().annotations();
JavaTreeModelTest.java,annotations = tree.modifiers().annotations();,if (tree != null ) annotations = tree.modifiers().annotations();
JavaTreeModelTest.java,annotations = tree.modifiers().annotations();,if (tree != null ) annotations = tree.modifiers().annotations();
JavaTreeModelTest.java,annotations = variable.modifiers().annotations();,if (variable != null ) annotations = variable.modifiers().annotations();
JavaTreeModelTest.java,type = variable.type();,if (variable != null ) type = variable.type();
JavaTreeModelTest.java,type = classTree.superClass();,if (classTree != null ) type = classTree.superClass();
JavaTreeModelTest.java,type = classTree.superClass();,if (classTree != null ) type = classTree.superClass();
JavaTreeModelTest.java,type = classTree.superClass();,if (classTree != null ) type = classTree.superClass();
JavaTreeModelTest.java,type = typeCast.type();,if (typeCast != null ) type = typeCast.type();
JavaTreeModelTest.java,NewClassTree newClassTree = tree.initializer();,if (tree != null ) NewClassTree newClassTree = tree.initializer();
JavaTreeModelTest.java,newClassTree = tree.initializer();,if (tree != null ) newClassTree = tree.initializer();
JavaTreeModelTest.java,TypeParameters typeParameters = tree.typeParameters();,if (tree != null ) TypeParameters typeParameters = tree.typeParameters();
JavaTreeModelTest.java,List<StatementTree> declarations = block.body();,if (block != null ) List<StatementTree> declarations = block.body();
JavaTreeModelTest.java,SwitchExpressionTree switchExpression = tree.asSwitchExpression();,if (tree != null ) SwitchExpressionTree switchExpression = tree.asSwitchExpression();
JavaTreeModelTest.java,VariableTree parameterTree = catchTree.parameter();,if (catchTree != null ) VariableTree parameterTree = catchTree.parameter();
JavaTreeModelTest.java,parameterTree = catchTree.parameter();,if (catchTree != null ) parameterTree = catchTree.parameter();
JavaTreeModelTest.java,parameterTree = catchTree.parameter();,if (catchTree != null ) parameterTree = catchTree.parameter();
JavaTreeModelTest.java,UnionTypeTree type = (UnionTypeTree) parameterTree.type();,if (parameterTree != null ) UnionTypeTree type = (UnionTypeTree) parameterTree.type();
JavaTreeModelTest.java,MemberSelectExpressionTree memberSelectExpression = (MemberSelectExpressionTree) tree.methodSelect();,if (tree != null ) MemberSelectExpressionTree memberSelectExpression = (MemberSelectExpressionTree) tree.methodSelect();
JavaTreeModelTest.java,MemberSelectExpressionTree memberSelectExpression = (MemberSelectExpressionTree) tree.methodSelect();,if (tree != null ) MemberSelectExpressionTree memberSelectExpression = (MemberSelectExpressionTree) tree.methodSelect();
JavaTreeModelTest.java,memberSelectExpression = (MemberSelectExpressionTree) memberSelectExpression.expression();,if (memberSelectExpression != null ) memberSelectExpression = (MemberSelectExpressionTree) memberSelectExpression.expression();
JavaTreeModelTest.java,MemberSelectExpressionTree memberSelectExpression = (MemberSelectExpressionTree) tree.methodSelect();,if (tree != null ) MemberSelectExpressionTree memberSelectExpression = (MemberSelectExpressionTree) tree.methodSelect();
JavaTreeModelTest.java,MemberSelectExpressionTree methodSelect = (MemberSelectExpressionTree) tree.methodSelect();,if (tree != null ) MemberSelectExpressionTree methodSelect = (MemberSelectExpressionTree) tree.methodSelect();
JavaTreeModelTest.java,methodSelect = (MemberSelectExpressionTree) tree.methodSelect();,if (tree != null ) methodSelect = (MemberSelectExpressionTree) tree.methodSelect();
JavaTreeModelTest.java,arrayTypeTree = (ArrayTypeTree) field.type();,if (field != null ) arrayTypeTree = (ArrayTypeTree) field.type();
JavaTreeModelTest.java,arrayTypeTree = (ArrayTypeTree) field.type();,if (field != null ) arrayTypeTree = (ArrayTypeTree) field.type();
JavaTreeModelTest.java,childArrayTypeTree = (ArrayTypeTree) arrayTypeTree.type();,if (arrayTypeTree != null ) childArrayTypeTree = (ArrayTypeTree) arrayTypeTree.type();
JavaTreeModelTest.java,arrayTypeTree = (ArrayTypeTree) field.type();,if (field != null ) arrayTypeTree = (ArrayTypeTree) field.type();
JavaTreeModelTest.java,arrayTypeTree = (ArrayTypeTree) field.type();,if (field != null ) arrayTypeTree = (ArrayTypeTree) field.type();
JavaTreeModelTest.java,arrayTypeTree = (ArrayTypeTree) field.type();,if (field != null ) arrayTypeTree = (ArrayTypeTree) field.type();
JavaTreeModelTest.java,childArrayTypeTree = (ArrayTypeTree) arrayTypeTree.type();,if (arrayTypeTree != null ) childArrayTypeTree = (ArrayTypeTree) arrayTypeTree.type();
JavaTreeModelTest.java,arrayTypeTree = (ArrayTypeTree) field.type();,if (field != null ) arrayTypeTree = (ArrayTypeTree) field.type();
JavaTreeModelTest.java,childArrayTypeTree = (ArrayTypeTree) arrayTypeTree.type();,if (arrayTypeTree != null ) childArrayTypeTree = (ArrayTypeTree) arrayTypeTree.type();
JavaTreeModelTest.java,arrayTypeTree = (ArrayTypeTree) field.type();,if (field != null ) arrayTypeTree = (ArrayTypeTree) field.type();
JavaTreeModelTest.java,childArrayTypeTree = (ArrayTypeTree) arrayTypeTree.type();,if (arrayTypeTree != null ) childArrayTypeTree = (ArrayTypeTree) arrayTypeTree.type();
JavaTreeModelTest.java,arrayTypeTree = (ArrayTypeTree) method.returnType();,if (method != null ) arrayTypeTree = (ArrayTypeTree) method.returnType();
JavaTreeModelTest.java,arrayTypeTree = (ArrayTypeTree) method.returnType();,if (method != null ) arrayTypeTree = (ArrayTypeTree) method.returnType();
JavaTreeModelTest.java,arrayTypeTree = (ArrayTypeTree) method.returnType();,if (method != null ) arrayTypeTree = (ArrayTypeTree) method.returnType();
JavaTreeModelTest.java,arrayTypeTree = (ArrayTypeTree) method.returnType();,if (method != null ) arrayTypeTree = (ArrayTypeTree) method.returnType();
JavaTreeModelTest.java,childArrayTypeTree = (ArrayTypeTree) arrayTypeTree.type();,if (arrayTypeTree != null ) childArrayTypeTree = (ArrayTypeTree) arrayTypeTree.type();
JavaTreeModelTest.java,arrayTypeTree = (ArrayTypeTree) method.returnType();,if (method != null ) arrayTypeTree = (ArrayTypeTree) method.returnType();
JavaTreeModelTest.java,childArrayTypeTree = (ArrayTypeTree) arrayTypeTree.type();,if (arrayTypeTree != null ) childArrayTypeTree = (ArrayTypeTree) arrayTypeTree.type();
JavaTreeModelTest.java,arrayTypeTree = (ArrayTypeTree) method.returnType();,if (method != null ) arrayTypeTree = (ArrayTypeTree) method.returnType();
JavaTreeModelTest.java,childArrayTypeTree = (ArrayTypeTree) arrayTypeTree.type();,if (arrayTypeTree != null ) childArrayTypeTree = (ArrayTypeTree) arrayTypeTree.type();
JavaTreeModelTest.java,arrayTypeTree = (ArrayTypeTree) variable.type();,if (variable != null ) arrayTypeTree = (ArrayTypeTree) variable.type();
JavaTreeModelTest.java,arrayTypeTree = (ArrayTypeTree) variable.type();,if (variable != null ) arrayTypeTree = (ArrayTypeTree) variable.type();
JavaTreeModelTest.java,arrayTypeTree = (ArrayTypeTree) variable.type();,if (variable != null ) arrayTypeTree = (ArrayTypeTree) variable.type();
JavaTreeModelTest.java,childArrayTypeTree = (ArrayTypeTree) variable.type();,if (variable != null ) childArrayTypeTree = (ArrayTypeTree) variable.type();
JavaTreeModelTest.java,arrayTypeTree = (ArrayTypeTree) childArrayTypeTree.type();,if (childArrayTypeTree != null ) arrayTypeTree = (ArrayTypeTree) childArrayTypeTree.type();
JavaTreeModelTest.java,arrayTypeTree = (ArrayTypeTree) variable.type();,if (variable != null ) arrayTypeTree = (ArrayTypeTree) variable.type();
JavaTreeModelTest.java,arrayTypeTree = (ArrayTypeTree) variable.type();,if (variable != null ) arrayTypeTree = (ArrayTypeTree) variable.type();
JavaTreeModelTest.java,arrayTypeTree = (ArrayTypeTree) variable.type();,if (variable != null ) arrayTypeTree = (ArrayTypeTree) variable.type();
JavaTreeModelTest.java,childArrayTypeTree = (ArrayTypeTree) arrayTypeTree.type();,if (arrayTypeTree != null ) childArrayTypeTree = (ArrayTypeTree) arrayTypeTree.type();
JavaTreeModelTest.java,arrayTypeTree = (ArrayTypeTree) variable.type();,if (variable != null ) arrayTypeTree = (ArrayTypeTree) variable.type();
JavaTreeModelTest.java,childArrayTypeTree = (ArrayTypeTree) arrayTypeTree.type();,if (arrayTypeTree != null ) childArrayTypeTree = (ArrayTypeTree) arrayTypeTree.type();
JavaTreeModelTest.java,arrayTypeTree = (ArrayTypeTree) variable.type();,if (variable != null ) arrayTypeTree = (ArrayTypeTree) variable.type();
JavaTreeModelTest.java,childArrayTypeTree = (ArrayTypeTree) arrayTypeTree.type();,if (arrayTypeTree != null ) childArrayTypeTree = (ArrayTypeTree) arrayTypeTree.type();
JavaTreeModelTest.java,tree = (BinaryExpressionTree) tree.leftOperand();,if (tree != null ) tree = (BinaryExpressionTree) tree.leftOperand();
JavaTreeModelTest.java,tree = (BinaryExpressionTree) tree.leftOperand();,if (tree != null ) tree = (BinaryExpressionTree) tree.leftOperand();
JavaTreeModelTest.java,tree = (BinaryExpressionTree) tree.leftOperand();,if (tree != null ) tree = (BinaryExpressionTree) tree.leftOperand();
JavaTreeModelTest.java,tree = (BinaryExpressionTree) tree.leftOperand();,if (tree != null ) tree = (BinaryExpressionTree) tree.leftOperand();
JavaTreeModelTest.java,tree = (BinaryExpressionTree) tree.leftOperand();,if (tree != null ) tree = (BinaryExpressionTree) tree.leftOperand();
JavaTreeModelTest.java,tree = (BinaryExpressionTree) tree.leftOperand();,if (tree != null ) tree = (BinaryExpressionTree) tree.leftOperand();
JavaTreeModelTest.java,tree = (BinaryExpressionTree) tree.leftOperand();,if (tree != null ) tree = (BinaryExpressionTree) tree.leftOperand();
JavaTreeModelTest.java,tree = (BinaryExpressionTree) tree.leftOperand();,if (tree != null ) tree = (BinaryExpressionTree) tree.leftOperand();
JavaTreeModelTest.java,tree = (BinaryExpressionTree) tree.leftOperand();,if (tree != null ) tree = (BinaryExpressionTree) tree.leftOperand();
JavaTreeModelTest.java,tree = (BinaryExpressionTree) tree.leftOperand();,if (tree != null ) tree = (BinaryExpressionTree) tree.leftOperand();
JavaTreeModelTest.java,tree = (BinaryExpressionTree) tree.leftOperand();,if (tree != null ) tree = (BinaryExpressionTree) tree.leftOperand();
JavaTreeModelTest.java,tree = (BinaryExpressionTree) tree.leftOperand();,if (tree != null ) tree = (BinaryExpressionTree) tree.leftOperand();
JavaTreeModelTest.java,tree = (ConditionalExpressionTree) tree.falseExpression();,if (tree != null ) tree = (ConditionalExpressionTree) tree.falseExpression();
JavaTreeModelTest.java,typeArguments = tree.typeArguments();,if (tree != null ) typeArguments = tree.typeArguments();
SpringComponentWithNonAutowiredMembersCheck.java,SymbolMetadata clazzMeta = clazzTree.symbol().metadata();,if (clazzTree != null ) SymbolMetadata clazzMeta = clazzTree.symbol().metadata();
NullableAnnotationUtils.java,Type type = annotation.symbol().type();,if (annotation != null ) Type type = annotation.symbol().type();
NullableAnnotationUtils.java,SymbolMetadata metadata = symbol.metadata();,if (symbol != null ) SymbolMetadata metadata = symbol.metadata();
BooleanMethodReturnCheck.java,SymbolMetadata methodMetadata = methodTree.symbol().metadata();,if (methodTree != null ) SymbolMetadata methodMetadata = methodTree.symbol().metadata();
PrimitivesMarkedNullableCheck.java,SymbolMetadata methodMetadata = methodTree.symbol().metadata();,if (methodTree != null ) SymbolMetadata methodMetadata = methodTree.symbol().metadata();
ReturnEmptyArrayNotNullCheck.java,Type type = annotation.annotationType().symbolType();,if (annotation != null ) Type type = annotation.annotationType().symbolType();
IgnoredReturnValueCheck.java,Symbol methodSymbol = mit.symbol();,if (mit != null ) Symbol methodSymbol = mit.symbol();
RedundantModifierCheck.java,ModifiersTree modifiers = methodTree.modifiers();,if (methodTree != null ) ModifiersTree modifiers = methodTree.modifiers();
RedundantModifierCheck.java,ModifiersTree modifiers = variableTree.modifiers();,if (variableTree != null ) ModifiersTree modifiers = variableTree.modifiers();
ExternalIssueAssert.java,actual.engineId = issue.engineId();,if (issue != null ) actual.engineId = issue.engineId();
ExternalIssueAssert.java,actual.ruleId = issue.ruleId();,if (issue != null ) actual.ruleId = issue.ruleId();
ExternalIssueAssert.java,actual.ruleKey = issue.ruleKey().rule();,if (issue != null ) actual.ruleKey = issue.ruleKey().rule();
ExternalIssueAssert.java,actual.ruleType = issue.type();,if (issue != null ) actual.ruleType = issue.type();
ExternalIssueAssert.java,actual.severity = issue.severity();,if (issue != null ) actual.severity = issue.severity();
ExternalIssueAssert.java,actual.message = issue.primaryLocation().message();,if (issue != null ) actual.message = issue.primaryLocation().message();
ExternalIssueAssert.java,actual.textRange = issue.primaryLocation().textRange();,if (issue != null ) actual.textRange = issue.primaryLocation().textRange();
ExternalIssueAssert.java,actual.remediationEffort = issue.remediationEffort();,if (issue != null ) actual.remediationEffort = issue.remediationEffort();
ExpressionsHelperTest.java,Constructor constructor = ExpressionsHelper.class.getDeclaredConstructor();,if (ExpressionsHelper != null ) Constructor constructor = ExpressionsHelper.class.getDeclaredConstructor();
SerializableContractTest.java,Constructor constructor = SerializableContract.class.getDeclaredConstructor();,if (SerializableContract != null ) Constructor constructor = SerializableContract.class.getDeclaredConstructor();
PCollectionsTest.java,Constructor constructor = PCollections.class.getDeclaredConstructor();,if (PCollections != null ) Constructor constructor = PCollections.class.getDeclaredConstructor();
LiteralUtilsTest.java,Constructor constructor = LiteralUtils.class.getDeclaredConstructor();,if (LiteralUtils != null ) Constructor constructor = LiteralUtils.class.getDeclaredConstructor();
ModifiersUtilsTest.java,Constructor constructor = ModifiersUtils.class.getDeclaredConstructor();,if (ModifiersUtils != null ) Constructor constructor = ModifiersUtils.class.getDeclaredConstructor();
MethodBehavior.java,type = type.symbol().superClass();,if (type != null ) type = type.symbol().superClass();
MethodBehavior.java,typeName = type.fullyQualifiedName();,if (type != null ) typeName = type.fullyQualifiedName();
JParserSemanticTest.java,AbstractTypedTree t = (AbstractTypedTree) v.type();,if (v != null ) AbstractTypedTree t = (AbstractTypedTree) v.type();
JParserSemanticTest.java,AbstractTypedTree t = (AbstractTypedTree) v.type();,if (v != null ) AbstractTypedTree t = (AbstractTypedTree) v.type();
JParserSemanticTest.java,AbstractTypedTree t = (AbstractTypedTree) v.type();,if (v != null ) AbstractTypedTree t = (AbstractTypedTree) v.type();
JParserSemanticTest.java,AbstractTypedTree t = (AbstractTypedTree) v.type();,if (v != null ) AbstractTypedTree t = (AbstractTypedTree) v.type();
SyntaxTreeNameFinderTest.java,BlockTree block = tree.block();,if (tree != null ) BlockTree block = tree.block();
SyntaxTreeNameFinderTest.java,BlockTree block = tree.block();,if (tree != null ) BlockTree block = tree.block();
SyntaxTreeNameFinderTest.java,BlockTree block = tree.block();,if (tree != null ) BlockTree block = tree.block();
CookieHttpOnlyCheck.java,Arguments arguments = newClassTree.arguments();,if (newClassTree != null ) Arguments arguments = newClassTree.arguments();
CookieHttpOnlyCheck.java,boolean secure = play.mvc.Http.Cookie.secure(); // Coverage,if (Coverage != null ) boolean secure = play.mvc.Http.Cookie.secure(); // Coverage
GarbageCollectorCalledCheck.java,MemberSelectExpressionTree mset = (MemberSelectExpressionTree) mit.methodSelect();,if (mit != null ) MemberSelectExpressionTree mset = (MemberSelectExpressionTree) mit.methodSelect();
GarbageCollectorCalledCheck.java,MethodInvocationTree mit = (MethodInvocationTree) mset.expression();,if (mset != null ) MethodInvocationTree mit = (MethodInvocationTree) mset.expression();
GarbageCollectorCalledCheck.java,MemberSelectExpressionTree subMset = (MemberSelectExpressionTree) mit.methodSelect();,if (mit != null ) MemberSelectExpressionTree subMset = (MemberSelectExpressionTree) mit.methodSelect();
BadTestClassNameCheck.java,Symbol.TypeSymbol classSymbol = classTree.symbol();,if (classTree != null ) Symbol.TypeSymbol classSymbol = classTree.symbol();
AssertionsInTestsCheck.java,Symbol.MethodSymbol symbol = methodTree.symbol();,if (methodTree != null ) Symbol.MethodSymbol symbol = methodTree.symbol();
AssertionsInTestsCheck.java,symbol = symbol.overriddenSymbol();,if (symbol != null ) symbol = symbol.overriddenSymbol();
AssertionsInTestsCheck.java,Symbol.TypeSymbol enclosingClass = methodTree.symbol().enclosingClass();,if (methodTree != null ) Symbol.TypeSymbol enclosingClass = methodTree.symbol().enclosingClass();
StaxParser.java,XMLInputFactory xmlInputFactory = SafetyFactory.createXMLInputFactory();,if (SafetyFactory != null ) XMLInputFactory xmlInputFactory = SafetyFactory.createXMLInputFactory();
CFG.java,outerTry.successorBlock = exitBlocks.peek();,if (exitBlocks != null ) outerTry.successorBlock = exitBlocks.peek();
CheckListTest.java,List<Class> checks = CheckList.getChecks();,if (CheckList != null ) List<Class> checks = CheckList.getChecks();
CheckListTest.java,List<Class> checks = CheckList.getChecks();,if (CheckList != null ) List<Class> checks = CheckList.getChecks();
CheckListTest.java,List<Class> checks = CheckList.getChecks();,if (CheckList != null ) List<Class> checks = CheckList.getChecks();
CheckListTest.java,Set<Class> testChecks = new HashSet<>(CheckList.getJavaTestChecks());,if (HashSet<>(CheckList != null ) Set<Class> testChecks = new HashSet<>(CheckList.getJavaTestChecks());
CheckListTest.java,Constructor constructor = CheckList.class.getDeclaredConstructor();,if (CheckList != null ) Constructor constructor = CheckList.class.getDeclaredConstructor();
CFG.java,ExpressionTree value = tree.value();,if (tree != null ) ExpressionTree value = tree.value();
BehaviorCache.java,URL hardcodedMethodBehaviorsURL = methodBehaviorFileUrlSupplier.get();,if (methodBehaviorFileUrlSupplier != null ) URL hardcodedMethodBehaviorsURL = methodBehaviorFileUrlSupplier.get();
CFG.java,List<CaseLabelTree> labels = caseGroupTree.labels();,if (caseGroupTree != null ) List<CaseLabelTree> labels = caseGroupTree.labels();
CFG.java,currentBlock = switches.removeLast();,if (switches != null ) currentBlock = switches.removeLast();
MethodBehaviorJsonAdapter.java,String domainConstraint = constraintsByDomainJsonArray.get(i).getAsString();,if (constraintsByDomainJsonArray != null ) String domainConstraint = constraintsByDomainJsonArray.get(i).getAsString();
JavaPerformanceTest.java,double time = sensorTime(result.getLogs());,if (sensorTime(result != null ) double time = sensorTime(result.getLogs());
SemanticTest.java,ORCHESTRATOR = orchestratorBuilder.build();,if (orchestratorBuilder != null ) ORCHESTRATOR = orchestratorBuilder.build();
SemanticTest.java,Server server = ORCHESTRATOR.getServer();,if (ORCHESTRATOR != null ) Server server = ORCHESTRATOR.getServer();
SemanticTest.java,List<String> logs = Files.readAllLines(logFile.toPath());,if (Files != null ) List<String> logs = Files.readAllLines(logFile.toPath());
SemanticTest.java,int nbLines = logs.size();,if (logs != null ) int nbLines = logs.size();
BytecodeCFG.java,exitBlock.successors = Collections.emptyList();,if (Collections != null ) exitBlock.successors = Collections.emptyList();
BytecodeCFG.java,this.id = cfg.blocks.size();,if (cfg != null ) this.id = cfg.blocks.size();
BytecodeCFGMethodVisitor.java,currentBlock.falseBlock = currentBlock.createSuccessor();,if (currentBlock != null ) currentBlock.falseBlock = currentBlock.createSuccessor();
AarLoader.java,classesLoader = extractClassesJar(file.getName());,if (extractClassesJar(file != null ) classesLoader = extractClassesJar(file.getName());
FileSystemLoader.java,this.baseDirPath = baseDir.toPath();,if (baseDir != null ) this.baseDirPath = baseDir.toPath();
BytecodeEGWalker.java,BytecodeCFG bytecodeCFG = cfgVisitor.getCfg();,if (cfgVisitor != null ) BytecodeCFG bytecodeCFG = cfgVisitor.getCfg();
BytecodeEGWalker.java,exitBlock = bytecodeCFG.exitBlock();,if (bytecodeCFG != null ) exitBlock = bytecodeCFG.exitBlock();
BytecodeEGWalker.java,"programState = setDoubleOrLong(sv, instruction.isLongOrDoubleValue());","if (instruction != null ) programState = setDoubleOrLong(sv, instruction.isLongOrDoubleValue());"
BytecodeEGWalker.java,"programState = setDoubleOrLong(sv, instruction.isLongOrDoubleValue());","if (instruction != null ) programState = setDoubleOrLong(sv, instruction.isLongOrDoubleValue());"
BytecodeEGWalker.java,"programState = setDoubleOrLong(sv, instruction.isLongOrDoubleValue());","if (instruction != null ) programState = setDoubleOrLong(sv, instruction.isLongOrDoubleValue());"
BytecodeEGWalker.java,sv = programState.peekValue();,if (programState != null ) sv = programState.peekValue();
BytecodeEGWalker.java,sv = programState.peekValue();,if (programState != null ) sv = programState.peekValue();
BytecodeEGWalker.java,sv = programState.peekValue();,if (programState != null ) sv = programState.peekValue();
BytecodeEGWalker.java,sv = programState.peekValue();,if (programState != null ) sv = programState.peekValue();
BytecodeEGWalker.java,"programState = setDoubleOrLong(sv, instruction.isLongOrDoubleValue());","if (instruction != null ) programState = setDoubleOrLong(sv, instruction.isLongOrDoubleValue());"
BytecodeEGWalker.java,"programState = setDoubleOrLong(sv, instruction.isLongOrDoubleValue());","if (instruction != null ) programState = setDoubleOrLong(sv, instruction.isLongOrDoubleValue());"
BytecodeEGWalker.java,"programState = setDoubleOrLong(sv, instruction.isLongOrDoubleValue());","if (instruction != null ) programState = setDoubleOrLong(sv, instruction.isLongOrDoubleValue());"
BytecodeEGWalker.java,sv = programState.peekValue();,if (programState != null ) sv = programState.peekValue();
BytecodeEGWalker.java,sv = programState.peekValue();,if (programState != null ) sv = programState.peekValue();
BytecodeEGWalker.java,"programState = setDoubleOrLong(sv, instruction.isLongOrDoubleValue());","if (instruction != null ) programState = setDoubleOrLong(sv, instruction.isLongOrDoubleValue());"
BytecodeEGWalker.java,"programState = setDoubleOrLong(sv, instruction.isLongOrDoubleValue());","if (instruction != null ) programState = setDoubleOrLong(sv, instruction.isLongOrDoubleValue());"
BytecodeEGWalker.java,SymbolicValue.InstanceOfSymbolicValue instanceOf = new SymbolicValue.InstanceOfSymbolicValue();,if (SymbolicValue != null ) SymbolicValue.InstanceOfSymbolicValue instanceOf = new SymbolicValue.InstanceOfSymbolicValue();
BytecodeEGWalker.java,String signature = instruction.fieldOrMethod.completeSignature();,if (instruction != null ) String signature = instruction.fieldOrMethod.completeSignature();
BytecodeEGWalker.java,"programState = setDoubleOrLong(returnSV, instruction.isLongOrDoubleValue());","if (instruction != null ) programState = setDoubleOrLong(returnSV, instruction.isLongOrDoubleValue());"
BytecodeEGWalker.java,Instruction terminator = block.terminator();,if (block != null ) Instruction terminator = block.terminator();
BytecodeEGWalker.java,parameterIdx += argumentType.getSize();,if (argumentType != null ) parameterIdx += argumentType.getSize();
BytecodeSECheck.java,ProgramState state = dispatcher.getState();,if (dispatcher != null ) ProgramState state = dispatcher.getState();
BytecodeSECheck.java,SymbolicValue objectRef = state.peekValue(inst.arity());,if (state != null ) SymbolicValue objectRef = state.peekValue(inst.arity());
BytecodeSECheck.java,ProgramState currentState = dispatcher.getState();,if (dispatcher != null ) ProgramState currentState = dispatcher.getState();
BytecodeSECheck.java,ExplodedGraph.Node node = dispatcher.getNode();,if (dispatcher != null ) ExplodedGraph.Node node = dispatcher.getNode();
BytecodeSECheck.java,SymbolicValue result = currentState.peekValue();,if (currentState != null ) SymbolicValue result = currentState.peekValue();
BytecodeSECheck.java,SymbolicValue result = currentState.peekValue();,if (currentState != null ) SymbolicValue result = currentState.peekValue();
BytecodeSECheck.java,SymbolicValue result = currentState.peekValue();,if (currentState != null ) SymbolicValue result = currentState.peekValue();
BytecodeSECheck.java,SymbolicValue result = currentState.peekValue();,if (currentState != null ) SymbolicValue result = currentState.peekValue();
BytecodeSECheck.java,SymbolicValue result = currentState.peekValue();,if (currentState != null ) SymbolicValue result = currentState.peekValue();
VisitorsBridge.java,"this.behaviorCache = new BehaviorCache(classLoader, symbolicExecutionMode.isCrossFileEnabled());","if (symbolicExecutionMode != null ) this.behaviorCache = new BehaviorCache(classLoader, symbolicExecutionMode.isCrossFileEnabled());"
ConstraintManager.java,result = new SymbolicValue.AndSymbolicValue();,if (SymbolicValue != null ) result = new SymbolicValue.AndSymbolicValue();
ConstraintManager.java,result = new SymbolicValue.OrSymbolicValue();,if (SymbolicValue != null ) result = new SymbolicValue.OrSymbolicValue();
ConstraintManager.java,result = new SymbolicValue.XorSymbolicValue();,if (SymbolicValue != null ) result = new SymbolicValue.XorSymbolicValue();
BytecodeCFGBuilderTest.java,BytecodeCFG cfg = ins.cfg();,if (ins != null ) BytecodeCFG cfg = ins.cfg();
BytecodeListingParser.java,byte[] bytes = cw.toByteArray();,if (cw != null ) byte[] bytes = cw.toByteArray();
AarLoaderTest.java,InputStream is = url.openStream();,if (url != null ) InputStream is = url.openStream();
JarLoaderTest.java,InputStream is = url.openStream();,if (url != null ) InputStream is = url.openStream();
SquidClassLoaderTest.java,classLoader = new SquidClassLoader(Collections.emptyList());,if (SquidClassLoader(Collections != null ) classLoader = new SquidClassLoader(Collections.emptyList());
SquidClassLoaderTest.java,String className = getClass().getCanonicalName();,if (getClass() != null ) String className = getClass().getCanonicalName();
SquidClassLoaderTest.java,SquidClassLoader classLoader = new SquidClassLoader(Collections.emptyList());,if (SquidClassLoader(Collections != null ) SquidClassLoader classLoader = new SquidClassLoader(Collections.emptyList());
SquidClassLoaderTest.java,String className = getClass().getCanonicalName();,if (getClass() != null ) String className = getClass().getCanonicalName();
BytecodeEGWalkerExecuteTest.java,SymbolicValue sv = programState.peekValue();,if (programState != null ) SymbolicValue sv = programState.peekValue();
BytecodeEGWalkerExecuteTest.java,sv = programState.peekValue();,if (programState != null ) sv = programState.peekValue();
BytecodeEGWalkerExecuteTest.java,sv = programState.peekValue();,if (programState != null ) sv = programState.peekValue();
BytecodeEGWalkerExecuteTest.java,SymbolicValue exception = programState.peekValue();,if (programState != null ) SymbolicValue exception = programState.peekValue();
BytecodeEGWalkerExecuteTest.java,BytecodeCFG cfg = instr.cfg();,if (instr != null ) BytecodeCFG cfg = instr.cfg();
BytecodeEGWalkerExecuteTest.java,BytecodeCFG cfg = instr.cfg();,if (instr != null ) BytecodeCFG cfg = instr.cfg();
BytecodeEGWalkerExecuteTest.java,SymbolicValue fieldValue = programState.peekValue();,if (programState != null ) SymbolicValue fieldValue = programState.peekValue();
BytecodeEGWalkerExecuteTest.java,fieldValue = programState.peekValue();,if (programState != null ) fieldValue = programState.peekValue();
BytecodeEGWalkerExecuteTest.java,SymbolicValue length = programState.peekValue();,if (programState != null ) SymbolicValue length = programState.peekValue();
BytecodeEGWalkerExecuteTest.java,SymbolicValue result = programState.peekValue();,if (programState != null ) SymbolicValue result = programState.peekValue();
BytecodeEGWalkerExecuteTest.java,RelationalSymbolicValue relSV = (RelationalSymbolicValue) programState.peekValue();,if (programState != null ) RelationalSymbolicValue relSV = (RelationalSymbolicValue) programState.peekValue();
BytecodeEGWalkerExecuteTest.java,RelationalSymbolicValue relSV = (RelationalSymbolicValue) programState.peekValue();,if (programState != null ) RelationalSymbolicValue relSV = (RelationalSymbolicValue) programState.peekValue();
BytecodeEGWalkerExecuteTest.java,RelationalSymbolicValue relSV = (RelationalSymbolicValue) programState.peekValue();,if (programState != null ) RelationalSymbolicValue relSV = (RelationalSymbolicValue) programState.peekValue();
BytecodeEGWalkerExecuteTest.java,RelationalSymbolicValue relSV = (RelationalSymbolicValue) programState.peekValue();,if (programState != null ) RelationalSymbolicValue relSV = (RelationalSymbolicValue) programState.peekValue();
BytecodeEGWalkerExecuteTest.java,RelationalSymbolicValue relSV = (RelationalSymbolicValue) programState.peekValue();,if (programState != null ) RelationalSymbolicValue relSV = (RelationalSymbolicValue) programState.peekValue();
BytecodeEGWalkerExecuteTest.java,BytecodeCFG cfg = mv.cfg();,if (mv != null ) BytecodeCFG cfg = mv.cfg();
BytecodeEGWalkerExecuteTest.java,BytecodeCFG cfg = mv.cfg();,if (mv != null ) BytecodeCFG cfg = mv.cfg();
BytecodeEGWalkerExecuteTest.java,List<MethodYield> yields = mb.yields();,if (mb != null ) List<MethodYield> yields = mb.yields();
BytecodeEGWalkerTest.java,ProgramState next = ps.iterator().next();,if (ps != null ) ProgramState next = ps.iterator().next();
BytecodeEGWalkerTest.java,ProgramState ps = pss.iterator().next();,if (pss != null ) ProgramState ps = pss.iterator().next();
BytecodeEGWalkerTest.java,ps = pss.iterator().next();,if (pss != null ) ps = pss.iterator().next();
BytecodeEGWalkerTest.java,List<MethodYield> yields = mb.yields();,if (mb != null ) List<MethodYield> yields = mb.yields();
BytecodeEGWalkerTest.java,List<MethodYield> yields = mb.yields();,if (mb != null ) List<MethodYield> yields = mb.yields();
BytecodeSECheckTest.java,SymbolicValue peekValue = ps.peekValue();,if (ps != null ) SymbolicValue peekValue = ps.peekValue();
BytecodeSECheckTest.java,peekValue = ps.peekValue();,if (ps != null ) peekValue = ps.peekValue();
BytecodeSECheckTest.java,peekValue = ps.peekValue();,if (ps != null ) peekValue = ps.peekValue();
BytecodeSECheckTest.java,peekValue = ps.peekValue();,if (ps != null ) peekValue = ps.peekValue();
BytecodeSECheckTest.java,SymbolicValue peekValue = ps.peekValue();,if (ps != null ) SymbolicValue peekValue = ps.peekValue();
BytecodeSECheckTest.java,peekValue = ps.peekValue();,if (ps != null ) peekValue = ps.peekValue();
BytecodeSECheckTest.java,peekValue = ps.peekValue();,if (ps != null ) peekValue = ps.peekValue();
BytecodeSECheckTest.java,peekValue = ps.peekValue();,if (ps != null ) peekValue = ps.peekValue();
BytecodeSECheckTest.java,peekValue = ps.peekValue();,if (ps != null ) peekValue = ps.peekValue();
BytecodeSECheckTest.java,SymbolicValue result = ps.peekValue();,if (ps != null ) SymbolicValue result = ps.peekValue();
BytecodeSECheckTest.java,result = ps.peekValue();,if (ps != null ) result = ps.peekValue();
BytecodeSECheckTest.java,result = ps.peekValue();,if (ps != null ) result = ps.peekValue();
BytecodeSECheckTest.java,SymbolicValue peekValue = ps.peekValue();,if (ps != null ) SymbolicValue peekValue = ps.peekValue();
BytecodeSECheckTest.java,peekValue = ps.peekValue();,if (ps != null ) peekValue = ps.peekValue();
BytecodeSECheckTest.java,peekValue = ps.peekValue();,if (ps != null ) peekValue = ps.peekValue();
BytecodeSECheckTest.java,SymbolicValue peekValue = ps.peekValue();,if (ps != null ) SymbolicValue peekValue = ps.peekValue();
BytecodeSECheckTest.java,peekValue = ps.peekValue();,if (ps != null ) peekValue = ps.peekValue();
BytecodeSECheckTest.java,peekValue = ps.peekValue();,if (ps != null ) peekValue = ps.peekValue();
BytecodeSECheckTest.java,peekValue = ps.peekValue();,if (ps != null ) peekValue = ps.peekValue();
MethodYieldTest.java,List<MethodBehavior> methodBehaviors = new ArrayList<>(behaviorCache.values());,if (ArrayList<>(behaviorCache != null ) List<MethodBehavior> methodBehaviors = new ArrayList<>(behaviorCache.values());
ThreadLocalCleanup.java,UserSession session = DELEGATE.get();,if (DELEGATE != null ) UserSession session = DELEGATE.get();
MethodTreeUtils.java,Tree memberSelectParent = memberSelect.parent();,if (memberSelect != null ) Tree memberSelectParent = memberSelect.parent();
ExceptionalYieldChecker.java,Set<Flow> exceptionFlows = yield.exceptionFlows();,if (yield != null ) Set<Flow> exceptionFlows = yield.exceptionFlows();
JdbcResourcesTestFile.java,"ResultSet result = statement.getResultSet(); // Noncompliant {{Use try-with-resources or close this ""ResultSet"" in a ""finally"" clause.}}","if (clause != null ) ResultSet result = statement.getResultSet(); // Noncompliant {{Use try-with-resources or close this ""ResultSet"" in a ""finally"" clause.}}"
UnclosedResourcesCheck.java,parent = parent.parent();,if (parent != null ) parent = parent.parent();
UnclosedResourcesCheck.java,Tree parent = syntaxNode.parent();,if (syntaxNode != null ) Tree parent = syntaxNode.parent();
UnclosedResourcesCheck.java,parent = parent.parent();,if (parent != null ) parent = parent.parent();
UnclosedResourcesCheck.java,final SymbolicValue instanceValue = programState.peekValue();,if (programState != null ) final SymbolicValue instanceValue = programState.peekValue();
UnclosedResourcesCheck.java,SymbolicValue peekedValue = programState.peekValue();,if (programState != null ) SymbolicValue peekedValue = programState.peekValue();
UnclosedResourcesCheck.java,Symbol methodClass = mit.symbol().owner();,if (mit != null ) Symbol methodClass = mit.symbol().owner();
UnclosedResourcesCheck.java,enclosingType = enclosingType.parent();,if (enclosingType != null ) enclosingType = enclosingType.parent();
RegexParser.java,JavaCharacter character = characters.getCurrent();,if (characters != null ) JavaCharacter character = characters.getCurrent();
QuantifierTest.java,"SimpleQuantifier quantifier = assertType(SimpleQuantifier.class, repetition.getQuantifier());","if (repetition != null ) SimpleQuantifier quantifier = assertType(SimpleQuantifier.class, repetition.getQuantifier());"
AbstractPrintfChecker.java,String methodName = mit.symbol().name();,if (mit != null ) String methodName = mit.symbol().name();
PrintfFailCheck.java,Type argType = argExpressionTree.symbolType();,if (argExpressionTree != null ) Type argType = argExpressionTree.symbolType();
UnreachableCatchCheck.java,Type type = typeTree.symbolType();,if (typeTree != null ) Type type = typeTree.symbolType();
PackageInfoCheck.java,Path parentDirAbsolutePath = parentFile.getAbsoluteFile().toPath();,if (parentFile != null ) Path parentDirAbsolutePath = parentFile.getAbsoluteFile().toPath();
ErrorClassExtendedCheck.java,TypeTree superClass = tree.superClass();,if (tree != null ) TypeTree superClass = tree.superClass();
ErrorClassExtendedCheck.java,IdentifierTree idt = (IdentifierTree) mse.expression();,if (mse != null ) IdentifierTree idt = (IdentifierTree) mse.expression();
DuplicatesInCharacterClassCheck.java,char lower = range.getLowerBound().getCharacter();,if (range != null ) char lower = range.getLowerBound().getCharacter();
DuplicatesInCharacterClassCheck.java,char upper = range.getUpperBound().getCharacter();,if (range != null ) char upper = range.getUpperBound().getCharacter();
RegexParser.java,IndexRange range = startRange.merge(endCharacter.getRange());,if (startRange != null ) IndexRange range = startRange.merge(endCharacter.getRange());
CanonEqFlagInRegexCheck.java,String str = String.valueOf(tree.getCharacter());,if (String != null ) String str = String.valueOf(tree.getCharacter());
JParser.java,expressionsToConvert = Collections.emptyList();,if (Collections != null ) expressionsToConvert = Collections.emptyList();
JParser.java,expressionsToConvert = Collections.singletonList(c.getExpression());,if (Collections != null ) expressionsToConvert = Collections.singletonList(c.getExpression());
CanonEqFlagInRegexCheck.java,previousChar = currentCharacter.getCharacter();,if (currentCharacter != null ) previousChar = currentCharacter.getCharacter();
InvalidRegexCheck.java,String key = backReference.getKey();,if (backReference != null ) String key = backReference.getKey();
InvalidRegexCheck.java,BackReferenceTree backReferenceTree = backReference.getValue();,if (backReference != null ) BackReferenceTree backReferenceTree = backReference.getValue();
InvalidRegexCheck.java,String groupName = backReferenceTree.groupName();,if (backReferenceTree != null ) String groupName = backReferenceTree.groupName();
RedosCheck.java,RegexTree regex = regexForLiterals.getResult();,if (regexForLiterals != null ) RegexTree regex = regexForLiterals.getResult();
RegexBaseVisitor.java,activeFlags |= normalizeFlags(tree.getEnabledFlags());,if (normalizeFlags(tree != null ) activeFlags |= normalizeFlags(tree.getEnabledFlags());
RegexBaseVisitor.java,activeFlags &= ~normalizeFlags(tree.getDisabledFlags());,if (~normalizeFlags(tree != null ) activeFlags &= ~normalizeFlags(tree.getDisabledFlags());
RegexBaseVisitor.java,activeFlags ^= tree.getEnabledFlags();,if (tree != null ) activeFlags ^= tree.getEnabledFlags();
RegexBaseVisitor.java,activeFlags ^= ~tree.getDisabledFlags();,if (~tree != null ) activeFlags ^= ~tree.getDisabledFlags();
RegexParseErrorCheck.java,List<SyntaxError> syntaxErrors = regexForLiterals.getSyntaxErrors();,if (regexForLiterals != null ) List<SyntaxError> syntaxErrors = regexForLiterals.getSyntaxErrors();
RegexParser.java,JavaCharacter p = characters.getCurrent();,if (characters != null ) JavaCharacter p = characters.getCurrent();
RegexParser.java,JavaCharacter openingCurlyBrace = characters.getCurrent();,if (characters != null ) JavaCharacter openingCurlyBrace = characters.getCurrent();
RegexParser.java,JavaCharacter closingCurlyBrace = characters.getCurrent();,if (characters != null ) JavaCharacter closingCurlyBrace = characters.getCurrent();
JavaCharacterParser.java,JavaCharacter javaCharacter = unicodeProcessedCharacters.getCurrent();,if (unicodeProcessedCharacters != null ) JavaCharacter javaCharacter = unicodeProcessedCharacters.getCurrent();
CombinedTests.java,"GroupTree repeatedGroup = assertType(GroupTree.class, firstPart.getElement());","if (firstPart != null ) GroupTree repeatedGroup = assertType(GroupTree.class, firstPart.getElement());"
RegexParserTestUtils.java,RegexParseResult result = new RegexParser(source).parse();,if (RegexParser(source) != null ) RegexParseResult result = new RegexParser(source).parse();
RegexParserTestUtils.java,RegexParseResult result = new RegexParser(source).parse();,if (RegexParser(source) != null ) RegexParseResult result = new RegexParser(source).parse();
JavaCharacterParser.java,JavaCharacter javaCharacter = unicodeProcessedCharacters.getCurrent();,if (unicodeProcessedCharacters != null ) JavaCharacter javaCharacter = unicodeProcessedCharacters.getCurrent();
RegexParser.java,JavaCharacter dash = characters.getCurrent();,if (characters != null ) JavaCharacter dash = characters.getCurrent();
RegexParser.java,JavaCharacter character = characters.getCurrent();,if (characters != null ) JavaCharacter character = characters.getCurrent();
RegexParser.java,this.sourceText = source.getSourceText();,if (source != null ) this.sourceText = source.getSourceText();
RegexParserTestUtils.java,RegexParseResult result = new RegexParser(source).parse();,if (RegexParser(source) != null ) RegexParseResult result = new RegexParser(source).parse();
CurlyBraceQuantifier.java,this.minimumRepetitions = Integer.parseInt(minimumRepetitionsToken.getValue());,if (Integer != null ) this.minimumRepetitions = Integer.parseInt(minimumRepetitionsToken.getValue());
CurlyBraceQuantifier.java,this.maximumRepetitions = Integer.parseInt(maximumRepetitionsToken.getValue());,if (Integer != null ) this.maximumRepetitions = Integer.parseInt(maximumRepetitionsToken.getValue());
ObjectFinalizeOverridenNotPublicCheck.java,Tree returnType = methodTree.returnType();,if (methodTree != null ) Tree returnType = methodTree.returnType();
ObjectCreatedOnlyToCallGetClassCheck.java,B b = new A().bar();,if (A() != null ) B b = new A().bar();
SpringComponentWithWrongScopeCheck.java,Object value = annotationValue.value();,if (annotationValue != null ) Object value = annotationValue.value();
AssertJChainSimplificationCheckTest.java,assertThat(x == null).isTrue(); // Noncompliant {{Use assertThat(actual).isNull() instead}},if (instead}} != null ) assertThat(x == null).isTrue(); // Noncompliant {{Use assertThat(actual).isNull() instead}}
JUnit45MethodAnnotationCheck.java,String name = methodTree.simpleName().name();,if (methodTree != null ) String name = methodTree.simpleName().name();
ConvertTest.java,Constructor constructor = Convert.class.getDeclaredConstructor();,if (Convert != null ) Constructor constructor = Convert.class.getDeclaredConstructor();
ThreadLocalCleanupCheck.java,Tree parent = usage.parent();,if (usage != null ) Tree parent = usage.parent();
ThreadLocalCleanupCheck.java,Tree mseParent = parent.parent();,if (parent != null ) Tree mseParent = parent.parent();
SpringAntMatcherOrderCheck.java,Tree parent = method.parent();,if (method != null ) Tree parent = method.parent();
SpringAntMatcherOrderCheck.java,parent = parent.parent();,if (parent != null ) parent = parent.parent();
AbstractOneExpectedExceptionRule.java,Tree mitParent = mit.parent();,if (mit != null ) Tree mitParent = mit.parent();
AbstractOneExpectedExceptionRule.java,mitParent = mitParent.parent();,if (mitParent != null ) mitParent = mitParent.parent();
AbstractOneExpectedExceptionRule.java,Tree memberSelectParent = memberSelect.parent();,if (memberSelect != null ) Tree memberSelectParent = memberSelect.parent();
AssertionArgumentOrderCheck.java,Tree parentOfParent = mit.parent();,if (mit != null ) Tree parentOfParent = mit.parent();
AssertionArgumentOrderCheck.java,Tree secondInvocationParent = secondInvocation.parent();,if (secondInvocation != null ) Tree secondInvocationParent = secondInvocation.parent();
AbstractOneExpectedExceptionRule.java,Arguments arguments = mit.arguments();,if (mit != null ) Arguments arguments = mit.arguments();
GeneratedFileTest.java,tmp = temporaryFolder.newFolder().toPath();,if (temporaryFolder != null ) tmp = temporaryFolder.newFolder().toPath();
Jasper.java,GeneratedFile generatedFile = generatedJavaFiles.get(smapFile.getGeneratedFile());,if (generatedJavaFiles != null ) GeneratedFile generatedFile = generatedJavaFiles.get(smapFile.getGeneratedFile());
StandardInputReadCheck.java,Symbol.TypeSymbol enclosingClass = identifier.symbol().enclosingClass();,if (identifier != null ) Symbol.TypeSymbol enclosingClass = identifier.symbol().enclosingClass();
JUnitMethodDeclarationCheck.java,SymbolMetadata metadata = methodTree.symbol().metadata();,if (methodTree != null ) SymbolMetadata metadata = methodTree.symbol().metadata();
JUnitMethodDeclarationCheck.java,String name = methodTree.simpleName().name();,if (methodTree != null ) String name = methodTree.simpleName().name();
JUnitMethodDeclarationCheck.java,SymbolMetadata methodMetadata = methodTree.symbol().metadata();,if (methodTree != null ) SymbolMetadata methodMetadata = methodTree.symbol().metadata();
JUnitMethodDeclarationCheck.java,Symbol.MethodSymbol symbol = methodTree.symbol();,if (methodTree != null ) Symbol.MethodSymbol symbol = methodTree.symbol();
JUnitMethodDeclarationCheck.java,Symbol.MethodSymbol symbol = methodTree.symbol();,if (methodTree != null ) Symbol.MethodSymbol symbol = methodTree.symbol();
JUnitMethodDeclarationCheck.java,SymbolMetadata metadata = methodTree.symbol().metadata();,if (methodTree != null ) SymbolMetadata metadata = methodTree.symbol().metadata();
JUnitMethodDeclarationCheck.java,SymbolMetadata metadata = symbol.metadata();,if (symbol != null ) SymbolMetadata metadata = symbol.metadata();
JUnitMethodDeclarationCheck.java,SymbolMetadata metadata = methodTree.symbol().metadata();,if (methodTree != null ) SymbolMetadata metadata = methodTree.symbol().metadata();
GeneratedFile.java,int inputStartLine = startLoc.startLine();,if (startLoc != null ) int inputStartLine = startLoc.startLine();
GeneratedFile.java,Path startFile = startLoc.inputFile();,if (startLoc != null ) Path startFile = startLoc.inputFile();
GeneratedFile.java,int inputEndLine = endLoc.endLine();,if (endLoc != null ) int inputEndLine = endLoc.endLine();
GeneratedFile.java,Path endFile = endLoc.inputFile();,if (endLoc != null ) Path endFile = endLoc.inputFile();
Jasper.java,List<Path> jspFiles = jspFiles(sensorContext.fileSystem());,if (jspFiles(sensorContext != null ) List<Path> jspFiles = jspFiles(sensorContext.fileSystem());
JasperTest.java,List<String> tag = Files.readAllLines(tagFile.path());,if (Files != null ) List<String> tag = Files.readAllLines(tagFile.path());
JunitMethodDeclarationCheck.java,String name = methodTree.simpleName().name();,if (methodTree != null ) String name = methodTree.simpleName().name();
JunitMethodDeclarationCheck.java,TypeTree returnType = methodTree.returnType();,if (methodTree != null ) TypeTree returnType = methodTree.returnType();
JunitMethodDeclarationCheck.java,Symbol.MethodSymbol symbol = methodTree.symbol();,if (methodTree != null ) Symbol.MethodSymbol symbol = methodTree.symbol();
JunitMethodDeclarationCheck.java,TypeTree returnType = methodTree.returnType();,if (methodTree != null ) TypeTree returnType = methodTree.returnType();
JunitMethodDeclarationCheck.java,Symbol.MethodSymbol symbol = methodTree.symbol();,if (methodTree != null ) Symbol.MethodSymbol symbol = methodTree.symbol();
JunitMethodDeclarationCheck.java,TypeTree returnType = methodTree.returnType();,if (methodTree != null ) TypeTree returnType = methodTree.returnType();
BooleanLiteralInAssertionsCheck.java,int arity = mit.arguments().size();,if (mit != null ) int arity = mit.arguments().size();
JspCodeCheck.java,String name = tree.simpleName().name();,if (tree != null ) String name = tree.simpleName().name();
JType.java,ITypeBinding[] typeArgs = typeBinding.getTypeArguments();,if (typeBinding != null ) ITypeBinding[] typeArgs = typeBinding.getTypeArguments();
JType.java,typeArguments = Collections.emptyList();,if (Collections != null ) typeArguments = Collections.emptyList();
Jasper.java,File baseDir = sensorContext.fileSystem().baseDir();,if (sensorContext != null ) File baseDir = sensorContext.fileSystem().baseDir();
Jasper.java,Compiler compiler = compilationContext.createCompiler();,if (compilationContext != null ) Compiler compiler = compilationContext.createCompiler();
Jasper.java,List<Path> jspFiles = jspFiles(context.fileSystem());,if (jspFiles(context != null ) List<Path> jspFiles = jspFiles(context.fileSystem());
JavaAstScannerTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
AarLoaderTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
FileSystemLoaderTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
JarLoaderTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
SquidClassLoaderTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
ExceptionalCheckBasedYieldTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
JUtils.java,ITypeBinding[] typeArguments = t.typeBinding.getTypeArguments();,if (t != null ) ITypeBinding[] typeArguments = t.typeBinding.getTypeArguments();
SQLInjectionCheck.java,ExpressionTree initializerOrExpression = getInitializerOrExpression(symbol.declaration());,if (getInitializerOrExpression(symbol != null ) ExpressionTree initializerOrExpression = getInitializerOrExpression(symbol.declaration());
JSymbol.java,result += name().hashCode();,if (name() != null ) result += name().hashCode();
SuppressWarningFilter.java,excludedLinesByRule = excludedLinesByComponent.get(issue.componentKey());,if (excludedLinesByComponent != null ) excludedLinesByRule = excludedLinesByComponent.get(issue.componentKey());
SuppressWarningFilter.java,RuleKey issueRuleKey = issue.ruleKey();,if (issue != null ) RuleKey issueRuleKey = issue.ruleKey();
SonarComponentsTest.java,InputFile inputFile = inputFileBuilder.build();,if (inputFileBuilder != null ) InputFile inputFile = inputFileBuilder.build();
MemberSelectExpressionTreeImpl.java,this.annotations = Collections.emptyList();,if (Collections != null ) this.annotations = Collections.emptyList();
CallToDeprecatedMethodCheck.java,Symbol symbol = identifierTree.symbol();,if (identifierTree != null ) Symbol symbol = identifierTree.symbol();
CallToDeprecatedMethodCheck.java,name = symbol.owner().name();,if (symbol != null ) name = symbol.owner().name();
CallToDeprecatedMethodCheck.java,name = symbol.name();,if (symbol != null ) name = symbol.name();
CallToDeprecatedMethodCheck.java,Tree parent = identifierTree.parent();,if (identifierTree != null ) Tree parent = identifierTree.parent();
CallToDeprecatedMethodCheck.java,Symbol.MethodSymbol overriddenMethod = symbol.overriddenSymbol();,if (symbol != null ) Symbol.MethodSymbol overriddenMethod = symbol.overriddenSymbol();
CallToDeprecatedMethodCheck.java,overriddenMethod = overriddenMethod.overriddenSymbol();,if (overriddenMethod != null ) overriddenMethod = overriddenMethod.overriddenSymbol();
Jasper.java,String javaFilename = path.getFileName().toString();,if (path != null ) String javaFilename = path.getFileName().toString();
CustomUnclosedResourcesCheck.java,classConstructor = MethodMatcherCollection.create();,if (MethodMatcherCollection != null ) classConstructor = MethodMatcherCollection.create();
CollectionInappropriateCallsCheck.java,TypeCriteria parameterType = TypeCriteria.anyType();,if (TypeCriteria != null ) TypeCriteria parameterType = TypeCriteria.anyType();
ImmediateReverseBoxingCheck.java,MethodMatcherCollection matchers = MethodMatcherCollection.create();,if (MethodMatcherCollection != null ) MethodMatcherCollection matchers = MethodMatcherCollection.create();
ImmediateReverseBoxingCheck.java,typeCriteria = TypeCriteria.is(type.getKey());,if (TypeCriteria != null ) typeCriteria = TypeCriteria.is(type.getKey());
ImmediateReverseBoxingCheck.java,MethodMatcherCollection matchers = MethodMatcherCollection.create();,if (MethodMatcherCollection != null ) MethodMatcherCollection matchers = MethodMatcherCollection.create();
PrimitiveTypeBoxingWithToStringCheck.java,MethodMatcherCollection matchers = MethodMatcherCollection.create();,if (MethodMatcherCollection != null ) MethodMatcherCollection matchers = MethodMatcherCollection.create();
MethodMatcher.java,parameters = ParametersCriteria.any();,if (ParametersCriteria != null ) parameters = ParametersCriteria.any();
MethodMatcher.java,parameters = ParametersCriteria.none();,if (ParametersCriteria != null ) parameters = ParametersCriteria.none();
MethodMatcher.java,MethodSymbol symbol = methodTree.symbol();,if (methodTree != null ) MethodSymbol symbol = methodTree.symbol();
MethodMatcher.java,Symbol.TypeSymbol enclosingClass = symbol.enclosingClass();,if (symbol != null ) Symbol.TypeSymbol enclosingClass = symbol.enclosingClass();
MethodMatcher.java,Tree expression = referenceTree.expression();,if (referenceTree != null ) Tree expression = referenceTree.expression();
MethodMatcher.java,ExpressionTree methodSelect = mit.methodSelect();,if (mit != null ) ExpressionTree methodSelect = mit.methodSelect();
MethodMatcherCollectionTest.java,MethodMatcherCollection mmc = MethodMatcherCollection.create();,if (MethodMatcherCollection != null ) MethodMatcherCollection mmc = MethodMatcherCollection.create();
MethodMatcherTest.java,public ExpectedException exception = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException exception = ExpectedException.none();
MethodMatcherTest.java,MethodMatcher matcher = MethodMatcher.create().withoutParameter();,if (MethodMatcher != null ) MethodMatcher matcher = MethodMatcher.create().withoutParameter();
MethodMatcherTest.java,MethodMatcher matcher = entry.getKey();,if (entry != null ) MethodMatcher matcher = entry.getKey();
MethodMatcherTest.java,Symbol symbol = mit.symbol();,if (mit != null ) Symbol symbol = mit.symbol();
MethodMatcherTest.java,Symbol.MethodSymbol symbol = methodTree.symbol();,if (methodTree != null ) Symbol.MethodSymbol symbol = methodTree.symbol();
NameCriteriaTest.java,NameCriteria nc = NameCriteria.any();,if (NameCriteria != null ) NameCriteria nc = NameCriteria.any();
AnalysisError.java,this.cause = sw.toString();,if (sw != null ) this.cause = sw.toString();
Jasper.java,List<Path> jspFiles = jspFiles(context.fileSystem());,if (jspFiles(context != null ) List<Path> jspFiles = jspFiles(context.fileSystem());
JSema.java,IBinaryType type = answer.getBinaryType();,if (answer != null ) IBinaryType type = answer.getBinaryType();
JSema.java,IBinaryAnnotation[] binaryAnnotations = type.getAnnotations();,if (type != null ) IBinaryAnnotation[] binaryAnnotations = type.getAnnotations();
KindMaps.java,this.literals = literalsBuilder.build();,if (literalsBuilder != null ) this.literals = literalsBuilder.build();
KindMapsTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
SonarComponents.java,errorsSize += analysisError.serializedSize();,if (analysisError != null ) errorsSize += analysisError.serializedSize();
JavaSquidSensorTest.java,AnalysisError analysisError = analysisErrors.iterator().next();,if (analysisErrors != null ) AnalysisError analysisError = analysisErrors.iterator().next();
CheckVerifier.java,RemediationFunction remediationFunction = remediationFunction(issues.iterator().next());,if (remediationFunction(issues != null ) RemediationFunction remediationFunction = remediationFunction(issues.iterator().next());
CheckVerifier.java,ruleKey = rspecKeyAnnotation.value();,if (rspecKeyAnnotation != null ) ruleKey = rspecKeyAnnotation.value();
CheckVerifier.java,ruleKey = ruleAnnotation.key();,if (ruleAnnotation != null ) ruleKey = ruleAnnotation.key();
CheckVerifier.java,int line = issue.getLine();,if (issue != null ) int line = issue.getLine();
CheckVerifier.java,Double cost = issue.getCost();,if (issue != null ) Double cost = issue.getCost();
CheckVerifier.java,Double effortToFix = analyzerMessage.getCost();,if (analyzerMessage != null ) Double effortToFix = analyzerMessage.getCost();
CheckVerifier.java,AnalyzerMessage.TextSpan textSpan = analyzerMessage.primaryLocation();,if (analyzerMessage != null ) AnalyzerMessage.TextSpan textSpan = analyzerMessage.primaryLocation();
CheckVerifier.java,Multiset<String> actualLines = HashMultiset.create();,if (HashMultiset != null ) Multiset<String> actualLines = HashMultiset.create();
CheckVerifier.java,String absolutePath = analyzerMessage.getInputComponent().toString();,if (analyzerMessage != null ) String absolutePath = analyzerMessage.getInputComponent().toString();
JavaCheckVerifier.java,File filePath = new File(filename).getAbsoluteFile();,if (File(filename) != null ) File filePath = new File(filename).getAbsoluteFile();
JavaCheckVerifier.java,File moduleBaseDir = filePath.getParentFile();,if (filePath != null ) File moduleBaseDir = filePath.getParentFile();
JavaCheckVerifier.java,VisitorsBridgeForTests.TestJavaFileScannerContext testJavaFileScannerContext = visitorsBridge.lastCreatedTestContext();,if (visitorsBridge != null ) VisitorsBridgeForTests.TestJavaFileScannerContext testJavaFileScannerContext = visitorsBridge.lastCreatedTestContext();
MultipleFilesJavaCheckVerifier.java,VisitorsBridgeForTests.TestJavaFileScannerContext testJavaFileScannerContext = visitorsBridge.lastCreatedTestContext();,if (visitorsBridge != null ) VisitorsBridgeForTests.TestJavaFileScannerContext testJavaFileScannerContext = visitorsBridge.lastCreatedTestContext();
JavaCheckVerifierTest.java,Path tmp = temp.newFolder().toPath();,if (temp != null ) Path tmp = temp.newFolder().toPath();
JavaCheckVerifierTest.java,IssuableSubscriptionVisitor visitor = new LinearFakeVisitor().withDefaultIssues();,if (LinearFakeVisitor() != null ) IssuableSubscriptionVisitor visitor = new LinearFakeVisitor().withDefaultIssues();
JavaCheckVerifierTest.java,IssuableSubscriptionVisitor visitor = new NoJsonVisitor().withDefaultIssues();,if (NoJsonVisitor() != null ) IssuableSubscriptionVisitor visitor = new NoJsonVisitor().withDefaultIssues();
Expectations.java,Issue issue = Issue.create();,if (Issue != null ) Issue issue = Issue.create();
Expectations.java,String name = scanner.next();,if (scanner != null ) String name = scanner.next();
JavaCheckVerifier.java,Collection<File> classpath = Lists.newLinkedList();,if (Lists != null ) Collection<File> classpath = Lists.newLinkedList();
JavaCheckVerifier.java,VisitorsBridgeForTests.TestJavaFileScannerContext testJavaFileScannerContext = visitorsBridge.lastCreatedTestContext();,if (visitorsBridge != null ) VisitorsBridgeForTests.TestJavaFileScannerContext testJavaFileScannerContext = visitorsBridge.lastCreatedTestContext();
JavaCheckVerifier.java,List<Integer> unexpectedLines = Lists.newLinkedList();,if (Lists != null ) List<Integer> unexpectedLines = Lists.newLinkedList();
JavaCheckVerifier.java,Set<String> unseenFlowIds = expectations.unseenFlowIds();,if (expectations != null ) Set<String> unseenFlowIds = expectations.unseenFlowIds();
JavaCheckVerifier.java,int line = issue.getLine();,if (issue != null ) int line = issue.getLine();
JavaCheckVerifier.java,Double effortToFix = analyzerMessage.getCost();,if (analyzerMessage != null ) Double effortToFix = analyzerMessage.getCost();
JavaCheckVerifier.java,Iterator<AnalyzerMessage> actualIterator = actual.iterator();,if (actual != null ) Iterator<AnalyzerMessage> actualIterator = actual.iterator();
JavaCheckVerifier.java,AnalyzerMessage.TextSpan flowLocation = actualIterator.next().primaryLocation();,if (actualIterator != null ) AnalyzerMessage.TextSpan flowLocation = actualIterator.next().primaryLocation();
JavaCheckVerifier.java,Expectations.FlowComment flowComment = expectedIterator.next();,if (expectedIterator != null ) Expectations.FlowComment flowComment = expectedIterator.next();
JavaCheckVerifier.java,Multiset<Integer> actualLines = HashMultiset.create();,if (HashMultiset != null ) Multiset<Integer> actualLines = HashMultiset.create();
JavaCheckVerifierTest.java,IssuableSubscriptionVisitor visitor = new FakeVisitor().withDefaultIssues();,if (FakeVisitor() != null ) IssuableSubscriptionVisitor visitor = new FakeVisitor().withDefaultIssues();
TriggeringSecuringHelper.java,ExpressionTree methodSelect = mit.methodSelect();,if (mit != null ) ExpressionTree methodSelect = mit.methodSelect();
VerifiedServerHostnamesCheck.java,Arguments args = mit.arguments();,if (mit != null ) Arguments args = mit.arguments();
XxeActiveMQCheck.java,Arguments arguments = methodInvocation.arguments();,if (methodInvocation != null ) Arguments arguments = methodInvocation.arguments();
ExpressionUtils.java,Tree parent = mit.parent();,if (mit != null ) Tree parent = mit.parent();
CollectionInappropriateCallsCheck.java,Type argumentType = firstArgument.symbolType();,if (firstArgument != null ) Type argumentType = firstArgument.symbolType();
XxeProcessingCheck_DocumentBuilderFactory.java,DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); // Noncompliant {{Disable XML external entity (XXE) processing.}},if (processing != null ) DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); // Noncompliant {{Disable XML external entity (XXE) processing.}}
XxeProcessingCheck_SaxParser.java,SAXParserFactory factory = SAXParserFactory.newInstance(); // Noncompliant {{Disable XML external entity (XXE) processing.}},if (processing != null ) SAXParserFactory factory = SAXParserFactory.newInstance(); // Noncompliant {{Disable XML external entity (XXE) processing.}}
XxeProcessingCheck_TransformerFactory.java,TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant {{Disable XML external entity (XXE) processing.}},if (processing != null ) TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant {{Disable XML external entity (XXE) processing.}}
XxeProcessingCheck_TransformerFactory.java,TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant
XxeProcessingCheck_XmlInputFactory.java,XMLInputFactory factory = XMLInputFactory.newInstance(); // Noncompliant [[sc=47;ec=58]] {{Disable XML external entity (XXE) processing.}},if (processing != null ) XMLInputFactory factory = XMLInputFactory.newInstance(); // Noncompliant [[sc=47;ec=58]] {{Disable XML external entity (XXE) processing.}}
XxeProcessingCheck_XmlInputFactory.java,XMLInputFactory factory = XMLInputFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) XMLInputFactory factory = XMLInputFactory.newInstance(); // Noncompliant
XxeProcessingCheck_XmlInputFactory.java,XMLInputFactory factory = XMLInputFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) XMLInputFactory factory = XMLInputFactory.newInstance(); // Noncompliant
XxeProcessingCheck_XmlInputFactory.java,XMLInputFactory factory = XMLInputFactory.newInstance(); // Noncompliant {{Disable XML external entity (XXE) processing.}},if (processing != null ) XMLInputFactory factory = XMLInputFactory.newInstance(); // Noncompliant {{Disable XML external entity (XXE) processing.}}
XmlExternalEntityProcessingCheck.java,XMLInputFactory factory = XMLInputFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) XMLInputFactory factory = XMLInputFactory.newInstance(); // Noncompliant
XmlExternalEntityProcessingCheck.java,XMLInputFactory factory = XMLInputFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) XMLInputFactory factory = XMLInputFactory.newInstance(); // Noncompliant
XmlExternalEntityProcessingCheck.java,XMLInputFactory factory = XMLInputFactory.newInstance();,if (XMLInputFactory != null ) XMLInputFactory factory = XMLInputFactory.newInstance();
XmlExternalEntityProcessingCheck.java,XMLInputFactory factory = XMLInputFactory.newInstance();// Noncompliant,if (Noncompliant != null ) XMLInputFactory factory = XMLInputFactory.newInstance();// Noncompliant
XmlExternalEntityProcessingCheck.java,XMLInputFactory factory = XMLInputFactory.newInstance();,if (XMLInputFactory != null ) XMLInputFactory factory = XMLInputFactory.newInstance();
XmlExternalEntityProcessingCheck.java,XMLInputFactory factory = XMLInputFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) XMLInputFactory factory = XMLInputFactory.newInstance(); // Noncompliant
XmlExternalEntityProcessingCheck.java,XMLInputFactory factory = XMLInputFactory.newInstance();,if (XMLInputFactory != null ) XMLInputFactory factory = XMLInputFactory.newInstance();
XmlExternalEntityProcessingCheck.java,XMLInputFactory factory = XMLInputFactory.newInstance();,if (XMLInputFactory != null ) XMLInputFactory factory = XMLInputFactory.newInstance();
XmlExternalEntityProcessingCheck.java,XMLInputFactory factory = XMLInputFactory.newFactory();,if (XMLInputFactory != null ) XMLInputFactory factory = XMLInputFactory.newFactory();
XmlExternalEntityProcessingCheck.java,XMLInputFactory factory = XMLInputFactory.newFactory(); // Noncompliant,if (Noncompliant != null ) XMLInputFactory factory = XMLInputFactory.newFactory(); // Noncompliant
XmlExternalEntityProcessingCheck.java,XMLInputFactory factory = XMLInputFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) XMLInputFactory factory = XMLInputFactory.newInstance(); // Noncompliant
XmlExternalEntityProcessingCheck.java,XMLInputFactory factory = XMLInputFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) XMLInputFactory factory = XMLInputFactory.newInstance(); // Noncompliant
XmlExternalEntityProcessingCheck.java,XMLInputFactory factory = XMLInputFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) XMLInputFactory factory = XMLInputFactory.newInstance(); // Noncompliant
XmlExternalEntityProcessingCheck.java,XMLInputFactory factory = XMLInputFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) XMLInputFactory factory = XMLInputFactory.newInstance(); // Noncompliant
XmlExternalEntityProcessingCheck.java,XMLInputFactory factory = XMLInputFactory.newInstance();,if (XMLInputFactory != null ) XMLInputFactory factory = XMLInputFactory.newInstance();
XmlExternalEntityProcessingCheck.java,factory = XMLInputFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) factory = XMLInputFactory.newInstance(); // Noncompliant
XmlExternalEntityProcessingCheck.java,factory = XMLInputFactory.newInstance();,if (XMLInputFactory != null ) factory = XMLInputFactory.newInstance();
XmlExternalEntityProcessingCheck.java,"XMLInputFactory factory = XMLInputFactory.newInstance(); // Compliant, reported only when declared inside method","if (method != null ) XMLInputFactory factory = XMLInputFactory.newInstance(); // Compliant, reported only when declared inside method"
XmlExternalEntityProcessingCheck.java,staxTest.factory = XMLInputFactory.newInstance(); // Compliant,if (Compliant != null ) staxTest.factory = XMLInputFactory.newInstance(); // Compliant
XmlExternalEntityProcessingCheck.java,factory = XMLInputFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) factory = XMLInputFactory.newInstance(); // Noncompliant
XmlExternalEntityProcessingCheck.java,factory = XMLInputFactory.newInstance(); // Compliant,if (Compliant != null ) factory = XMLInputFactory.newInstance(); // Compliant
XmlExternalEntityProcessingCheck.java,this.factory = XMLInputFactory.newInstance(); // Compliant,if (Compliant != null ) this.factory = XMLInputFactory.newInstance(); // Compliant
XmlExternalEntityProcessingCheck.java,this.factory = XMLInputFactory.newInstance(); // Compliant,if (Compliant != null ) this.factory = XMLInputFactory.newInstance(); // Compliant
XmlExternalEntityProcessingCheck.java,factory = XMLInputFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) factory = XMLInputFactory.newInstance(); // Noncompliant
XmlExternalEntityProcessingCheck.java,SAXParserFactory factory = SAXParserFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) SAXParserFactory factory = SAXParserFactory.newInstance(); // Noncompliant
XmlExternalEntityProcessingCheck.java,SAXParserFactory factory = SAXParserFactory.newInstance();,if (SAXParserFactory != null ) SAXParserFactory factory = SAXParserFactory.newInstance();
XmlExternalEntityProcessingCheck.java,SAXParserFactory factory = SAXParserFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) SAXParserFactory factory = SAXParserFactory.newInstance(); // Noncompliant
XmlExternalEntityProcessingCheck.java,SAXParserFactory factory = SAXParserFactory.newInstance();,if (SAXParserFactory != null ) SAXParserFactory factory = SAXParserFactory.newInstance();
XmlExternalEntityProcessingCheck.java,SAXParserFactory factory = SAXParserFactory.newInstance();,if (SAXParserFactory != null ) SAXParserFactory factory = SAXParserFactory.newInstance();
XmlExternalEntityProcessingCheck.java,SAXParserFactory factory = SAXParserFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) SAXParserFactory factory = SAXParserFactory.newInstance(); // Noncompliant
XmlExternalEntityProcessingCheck.java,SAXParserFactory factory = SAXParserFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) SAXParserFactory factory = SAXParserFactory.newInstance(); // Noncompliant
XmlExternalEntityProcessingCheck.java,SAXParserFactory factory = SAXParserFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) SAXParserFactory factory = SAXParserFactory.newInstance(); // Noncompliant
XmlExternalEntityProcessingCheck.java,SAXParserFactory factory = SAXParserFactory.newInstance();,if (SAXParserFactory != null ) SAXParserFactory factory = SAXParserFactory.newInstance();
XmlExternalEntityProcessingCheck.java,XMLReader xmlReader = factory.createXMLReader(); // Noncompliant,if (Noncompliant != null ) XMLReader xmlReader = factory.createXMLReader(); // Noncompliant
XmlExternalEntityProcessingCheck.java,XMLReader xmlReader = factory.createXMLReader();,if (factory != null ) XMLReader xmlReader = factory.createXMLReader();
XmlExternalEntityProcessingCheck.java,XMLReader xmlReader = factory.createXMLReader(); // Noncompliant,if (Noncompliant != null ) XMLReader xmlReader = factory.createXMLReader(); // Noncompliant
XmlExternalEntityProcessingCheck.java,XMLReader xmlReader = factory.createXMLReader(); // Noncompliant,if (Noncompliant != null ) XMLReader xmlReader = factory.createXMLReader(); // Noncompliant
XmlExternalEntityProcessingCheck.java,XMLReader xmlReader = factory.createXMLReader();,if (factory != null ) XMLReader xmlReader = factory.createXMLReader();
XmlExternalEntityProcessingCheck.java,DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); // Noncompliant
XmlExternalEntityProcessingCheck.java,DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();,if (DocumentBuilderFactory != null ) DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
XmlExternalEntityProcessingCheck.java,DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); // Noncompliant
XmlExternalEntityProcessingCheck.java,DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); // Noncompliant
XmlExternalEntityProcessingCheck.java,DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();,if (DocumentBuilderFactory != null ) DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
XmlExternalEntityProcessingCheck.java,XMLInputFactory factory = XMLInputFactory.newInstance();,if (XMLInputFactory != null ) XMLInputFactory factory = XMLInputFactory.newInstance();
XmlExternalEntityProcessingCheck.java,schema = factory.newSchema();,if (factory != null ) schema = factory.newSchema();
XmlExternalEntityProcessingCheck.java,TransformerFactory classField = TransformerFactory.newInstance();,if (TransformerFactory != null ) TransformerFactory classField = TransformerFactory.newInstance();
XmlExternalEntityProcessingCheck.java,TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant
XmlExternalEntityProcessingCheck.java,TransformerFactory factory = SAXTransformerFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) TransformerFactory factory = SAXTransformerFactory.newInstance(); // Noncompliant
XmlExternalEntityProcessingCheck.java,TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant
XmlExternalEntityProcessingCheck.java,TransformerFactory factory = TransformerFactory.newInstance();,if (TransformerFactory != null ) TransformerFactory factory = TransformerFactory.newInstance();
XmlExternalEntityProcessingCheck.java,TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant
XmlExternalEntityProcessingCheck.java,TransformerFactory factory = TransformerFactory.newInstance();,if (TransformerFactory != null ) TransformerFactory factory = TransformerFactory.newInstance();
XmlExternalEntityProcessingCheck.java,TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant
XmlExternalEntityProcessingCheck.java,TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant
XmlExternalEntityProcessingCheck.java,TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant
XmlExternalEntityProcessingCheck.java,TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant
XmlExternalEntityProcessingCheck.java,TransformerFactory factory = TransformerFactory.newInstance();,if (TransformerFactory != null ) TransformerFactory factory = TransformerFactory.newInstance();
XmlExternalEntityProcessingCheck.java,factory = TransformerFactory.newInstance(); // FN,if (FN != null ) factory = TransformerFactory.newInstance(); // FN
XmlExternalEntityProcessingCheck.java,"TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant (FP, would require symbolic execution)","if (execution) != null ) TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant (FP, would require symbolic execution)"
XmlExternalEntityProcessingCheck.java,TransformerFactory factory = TransformerFactory.newInstance();,if (TransformerFactory != null ) TransformerFactory factory = TransformerFactory.newInstance();
XmlExternalEntityProcessingCheck.java,Arguments arguments = methodInvocation.arguments();,if (methodInvocation != null ) Arguments arguments = methodInvocation.arguments();
XmlExternalEntityProcessingCheck.java,Arguments arguments = methodInvocation.arguments();,if (methodInvocation != null ) Arguments arguments = methodInvocation.arguments();
XmlExternalEntityProcessingCheck.java,Arguments arguments = methodInvocation.arguments();,if (methodInvocation != null ) Arguments arguments = methodInvocation.arguments();
XmlExternalEntityProcessingCheck.java,Arguments arguments = methodInvocation.arguments();,if (methodInvocation != null ) Arguments arguments = methodInvocation.arguments();
PrintfMisuseCheck.java,String methodName = mit.symbol().name();,if (mit != null ) String methodName = mit.symbol().name();
XmlExternalEntityProcessingCheck.java,TransformerFactory factory = TransformerFactory.newInstance();,if (TransformerFactory != null ) TransformerFactory factory = TransformerFactory.newInstance();
XmlExternalEntityProcessingCheck.java,TransformerFactory factory = TransformerFactory.newInstance();,if (TransformerFactory != null ) TransformerFactory factory = TransformerFactory.newInstance();
XmlExternalEntityProcessingCheck.java,TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant,if (Noncompliant != null ) TransformerFactory factory = TransformerFactory.newInstance(); // Noncompliant
CryptographicKeySizeCheck.java,Tree parent = mit.parent();,if (mit != null ) Tree parent = mit.parent();
CryptographicKeySizeCheck.java,Tree methodSelect = mit.methodSelect();,if (mit != null ) Tree methodSelect = mit.methodSelect();
ExpressionUtils.java,ExpressionTree variable = skipParentheses(tree.variable());,if (skipParentheses(tree != null ) ExpressionTree variable = skipParentheses(tree.variable());
UnusedLocalVariableCheck.java,IdentifierTree simpleName = variableTree.simpleName();,if (variableTree != null ) IdentifierTree simpleName = variableTree.simpleName();
UnusedMethodParameterCheck.java,Set<String> unresolvedIdentifierNames = unresolvedIdentifierNames(methodTree.block());,if (unresolvedIdentifierNames(methodTree != null ) Set<String> unresolvedIdentifierNames = unresolvedIdentifierNames(methodTree.block());
UnusedMethodParameterCheck.java,ExpressionTree methodSelect = tree.methodSelect();,if (tree != null ) ExpressionTree methodSelect = tree.methodSelect();
ConstantUtils.java,Symbol symbol = tree.symbol();,if (tree != null ) Symbol symbol = tree.symbol();
ConstantUtils.java,Symbol owner = symbol.owner();,if (symbol != null ) Symbol owner = symbol.owner();
ConstantUtils.java,Object left = resolveAsConstant(binaryExpression.leftOperand());,if (resolveAsConstant(binaryExpression != null ) Object left = resolveAsConstant(binaryExpression.leftOperand());
ConstantUtils.java,Object right = resolveAsConstant(binaryExpression.rightOperand());,if (resolveAsConstant(binaryExpression != null ) Object right = resolveAsConstant(binaryExpression.rightOperand());
HardCodedCredentialsCheck.java,String literal = ExpressionsHelper.getConstantValueAsString(expression).value();,if (ExpressionsHelper != null ) String literal = ExpressionsHelper.getConstantValueAsString(expression).value();
SerializableSuperConstructorCheck.java,Type superclass = classSymbol.superClass();,if (classSymbol != null ) Type superclass = classSymbol.superClass();
CookieHttpOnlyCheck.java,VariableTree declaration = var.declaration();,if (var != null ) VariableTree declaration = var.declaration();
CookieHttpOnlyCheck.java,ExpressionTree returnedExpression = returnStatement.expression();,if (returnStatement != null ) ExpressionTree returnedExpression = returnStatement.expression();
PseudoRandomCheck.java,double j = Math.random(); // Noncompliant [[sc=21;ec=27]],if ([[sc=21;ec=27]] != null ) double j = Math.random(); // Noncompliant [[sc=21;ec=27]]
HardCodedCredentialsCheck.java,String identifierName = identifierTree.name();,if (identifierTree != null ) String identifierName = identifierTree.name();
VisitorsBridge.java,key = annotation.key();,if (annotation != null ) key = annotation.key();
NullShouldNotBeUsedWithOptionalCheck.java,Type type = annotation.annotationType().symbolType();,if (annotation != null ) Type type = annotation.annotationType().symbolType();
EclipseBugTest.java,char[] sourceChars = source.toCharArray();,if (source != null ) char[] sourceChars = source.toCharArray();
EclipseBugTest.java,IProblem[] problems = astNode.getProblems();,if (astNode != null ) IProblem[] problems = astNode.getProblems();
JParser.java,expression = convertExpression(e.getExpression());,if (convertExpression(e != null ) expression = convertExpression(e.getExpression());
Lambdas.java,Stream<Object> s = objs.stream();,if (objs != null ) Stream<Object> s = objs.stream();
MethodJavaSymbolTest.java,List<Type> thrownTypes = methodSymbol.thrownTypes();,if (methodSymbol != null ) List<Type> thrownTypes = methodSymbol.thrownTypes();
ArrayForVarArgCheck.java,methodName = nct.identifier();,if (nct != null ) methodName = nct.identifier();
ArrayForVarArgCheck.java,methodName = mit.methodSelect();,if (mit != null ) methodName = mit.methodSelect();
ArrayForVarArgCheck.java,Type lastParamType = getLastParameterType(methodType.argTypes());,if (getLastParameterType(methodType != null ) Type lastParamType = getLastParameterType(methodType.argTypes());
IteratorNextExceptionCheck.java,Type methodType = ExpressionUtils.methodName(methodInvocationTree).symbolType();,if (ExpressionUtils != null ) Type methodType = ExpressionUtils.methodName(methodInvocationTree).symbolType();
RedundantAbstractMethodCheck.java,Type type = method.type();,if (method != null ) Type type = method.type();
RedundantTypeCastCheck.java,Type type = methodTree.symbol().type();,if (methodTree != null ) Type type = methodTree.symbol().type();
SpringBeansShouldBeAccessibleCheck.java,ExpressionTree values = (ExpressionTree) annotationValue.value();,if (annotationValue != null ) ExpressionTree values = (ExpressionTree) annotationValue.value();
MethodTreeUtilsTest.java,ActionParser parser = JavaParser.createParser();,if (JavaParser != null ) ActionParser parser = JavaParser.createParser();
JavaLexer.java,LexerlessGrammarBuilder b = LexerlessGrammarBuilder.create();,if (LexerlessGrammarBuilder != null ) LexerlessGrammarBuilder b = LexerlessGrammarBuilder.create();
JavaLexer.java,String[] keywords = JavaKeyword.keywordValues();,if (JavaKeyword != null ) String[] keywords = JavaKeyword.keywordValues();
JavaLexer.java,String[] restrictedKeywords = JavaRestrictedKeyword.restrictedKeywordValues();,if (JavaRestrictedKeyword != null ) String[] restrictedKeywords = JavaRestrictedKeyword.restrictedKeywordValues();
JavaNodeBuilder.java,Token trivialToken = trivia.getToken();,if (trivia != null ) Token trivialToken = trivia.getToken();
JavaParser.java,JavaTree parent = parentList.pop();,if (parentList != null ) JavaTree parent = parentList.pop();
TreeFactory.java,JavaKeyword keyword = (JavaKeyword) token.getGrammarRuleKey();,if (token != null ) JavaKeyword keyword = (JavaKeyword) token.getGrammarRuleKey();
TreeFactory.java,ModifiersTreeImpl newModifiers = ModifiersTreeImpl.emptyModifiers();,if (ModifiersTreeImpl != null ) ModifiersTreeImpl newModifiers = ModifiersTreeImpl.emptyModifiers();
TreeFactory.java,ListTreeImpl<ModuleNameTree> otherModuleNames = ModuleNameListTreeImpl.emptyList();,if (ModuleNameListTreeImpl != null ) ListTreeImpl<ModuleNameTree> otherModuleNames = ModuleNameListTreeImpl.emptyList();
TreeFactory.java,toKeyword = toModuleNames.first();,if (toModuleNames != null ) toKeyword = toModuleNames.first();
TreeFactory.java,otherModuleNames = toModuleNames.second();,if (toModuleNames != null ) otherModuleNames = toModuleNames.second();
TreeFactory.java,ListTreeImpl<ModuleNameTree> otherModuleNames = ModuleNameListTreeImpl.emptyList();,if (ModuleNameListTreeImpl != null ) ListTreeImpl<ModuleNameTree> otherModuleNames = ModuleNameListTreeImpl.emptyList();
TreeFactory.java,toKeyword = toModuleNames.first();,if (toModuleNames != null ) toKeyword = toModuleNames.first();
TreeFactory.java,otherModuleNames = toModuleNames.second();,if (toModuleNames != null ) otherModuleNames = toModuleNames.second();
TreeFactory.java,InternalSyntaxToken dotToken = dotStar.get().first();,if (dotStar != null ) InternalSyntaxToken dotToken = dotStar.get().first();
TreeFactory.java,InternalSyntaxToken staticKeyword = staticToken.orNull();,if (staticToken != null ) InternalSyntaxToken staticKeyword = staticToken.orNull();
TreeFactory.java,InternalSyntaxToken implementsKeyword = implementsClause.get().first();,if (implementsClause != null ) InternalSyntaxToken implementsKeyword = implementsClause.get().first();
TreeFactory.java,QualifiedIdentifierListTreeImpl interfaces = implementsClause.get().second();,if (implementsClause != null ) QualifiedIdentifierListTreeImpl interfaces = implementsClause.get().second();
TreeFactory.java,InternalSyntaxToken semicolon = semicolonToken.get();,if (semicolonToken != null ) InternalSyntaxToken semicolon = semicolonToken.get();
TreeFactory.java,InternalSyntaxToken implementsKeyword = implementsClause.get().first();,if (implementsClause != null ) InternalSyntaxToken implementsKeyword = implementsClause.get().first();
TreeFactory.java,QualifiedIdentifierListTreeImpl interfaces = implementsClause.get().second();,if (implementsClause != null ) QualifiedIdentifierListTreeImpl interfaces = implementsClause.get().second();
TreeFactory.java,InternalSyntaxToken extendsKeyword = extendsClause.get().first();,if (extendsClause != null ) InternalSyntaxToken extendsKeyword = extendsClause.get().first();
TreeFactory.java,QualifiedIdentifierListTreeImpl interfaces = extendsClause.get().second();,if (extendsClause != null ) QualifiedIdentifierListTreeImpl interfaces = extendsClause.get().second();
TreeFactory.java,ListTree<TypeTree> throwsClauses = QualifiedIdentifierListTreeImpl.emptyList();,if (QualifiedIdentifierListTreeImpl != null ) ListTree<TypeTree> throwsClauses = QualifiedIdentifierListTreeImpl.emptyList();
TreeFactory.java,throwsToken = throwsClause.get().first();,if (throwsClause != null ) throwsToken = throwsClause.get().first();
TreeFactory.java,throwsClauses = throwsClause.get().second();,if (throwsClause != null ) throwsClauses = throwsClause.get().second();
TreeFactory.java,ModifiersTreeImpl emptyModifiers = ModifiersTreeImpl.emptyModifiers();,if (ModifiersTreeImpl != null ) ModifiersTreeImpl emptyModifiers = ModifiersTreeImpl.emptyModifiers();
TreeFactory.java,defaultToken = defaultValue.get().first();,if (defaultValue != null ) defaultToken = defaultValue.get().first();
TreeFactory.java,defaultExpression = defaultValue.get().second();,if (defaultValue != null ) defaultExpression = defaultValue.get().second();
TreeFactory.java,ArgumentListTreeImpl elementValuePairs = partial.get();,if (partial != null ) ArgumentListTreeImpl elementValuePairs = partial.get();
TreeFactory.java,InternalSyntaxToken comma = rest.get().first();,if (rest != null ) InternalSyntaxToken comma = rest.get().first();
TreeFactory.java,FormalParametersListTreeImpl partial = rest.get().second();,if (rest != null ) FormalParametersListTreeImpl partial = rest.get().second();
TreeFactory.java,VariableTreeImpl newVariable = rest.second();,if (rest != null ) VariableTreeImpl newVariable = rest.second();
TreeFactory.java,InternalSyntaxToken separator = rest.first();,if (rest != null ) InternalSyntaxToken separator = rest.first();
TreeFactory.java,List<CatchTreeImpl> catchTrees = catches.or(Collections.emptyList());,if (catches != null ) List<CatchTreeImpl> catchTrees = catches.or(Collections.emptyList());
TreeFactory.java,List<CatchTreeImpl> catchTrees = catches.or(Collections.emptyList());,if (catches != null ) List<CatchTreeImpl> catchTrees = catches.or(Collections.emptyList());
TreeFactory.java,identifier = new IdentifierTreeImpl(identifierToken.get());,if (IdentifierTreeImpl(identifierToken != null ) identifier = new IdentifierTreeImpl(identifierToken.get());
TreeFactory.java,result = operatorAndOperand.operand();,if (operatorAndOperand != null ) result = operatorAndOperand.operand();
TreeFactory.java,lastOperator = operatorAndOperand.operator();,if (operatorAndOperand != null ) lastOperator = operatorAndOperand.operator();
TreeFactory.java,InternalSyntaxToken postfixOperatorToken = postfixOperator.get();,if (postfixOperator != null ) InternalSyntaxToken postfixOperatorToken = postfixOperator.get();
TreeFactory.java,BoundListTreeImpl bounds = BoundListTreeImpl.emptyList();,if (BoundListTreeImpl != null ) BoundListTreeImpl bounds = BoundListTreeImpl.emptyList();
TreeFactory.java,andToken = classTypes.get().first();,if (classTypes != null ) andToken = classTypes.get().first();
TreeFactory.java,bounds = classTypes.get().second();,if (classTypes != null ) bounds = classTypes.get().second();
TreeFactory.java,VariableTreeImpl variable = identifiers.first();,if (identifiers != null ) VariableTreeImpl variable = identifiers.first();
TreeFactory.java,variable = identifier.second();,if (identifier != null ) variable = identifier.second();
TreeFactory.java,InternalSyntaxToken comma = identifier.first();,if (identifier != null ) InternalSyntaxToken comma = identifier.first();
TreeFactory.java,typeTree = newClassTree.identifier();,if (newClassTree != null ) typeTree = newClassTree.identifier();
TreeFactory.java,typeTree = newArrayTree.type();,if (newArrayTree != null ) typeTree = newArrayTree.type();
TreeFactory.java,InternalSyntaxToken dotToken = rest.first();,if (rest != null ) InternalSyntaxToken dotToken = rest.first();
TreeFactory.java,ParameterizedTypeTreeImpl parameterizedType = (ParameterizedTypeTreeImpl) rest.second();,if (rest != null ) ParameterizedTypeTreeImpl parameterizedType = (ParameterizedTypeTreeImpl) rest.second();
TreeFactory.java,IdentifierTreeImpl identifier = (IdentifierTreeImpl) parameterizedType.type();,if (parameterizedType != null ) IdentifierTreeImpl identifier = (IdentifierTreeImpl) parameterizedType.type();
TreeFactory.java,List<AnnotationTree> firstIdentifierAnnotations = firstIdentifier.annotations();,if (firstIdentifier != null ) List<AnnotationTree> firstIdentifierAnnotations = firstIdentifier.annotations();
TreeFactory.java,Optional<InternalSyntaxToken> dotTokenOptional = tuple.first();,if (tuple != null ) Optional<InternalSyntaxToken> dotTokenOptional = tuple.first();
TreeFactory.java,ExpressionTree selector = tuple.second();,if (tuple != null ) ExpressionTree selector = tuple.second();
TreeFactory.java,InternalSyntaxToken dotToken = dotTokenOptional.get();,if (dotTokenOptional != null ) InternalSyntaxToken dotToken = dotTokenOptional.get();
TreeFactory.java,IdentifierTreeImpl identifier = (IdentifierTreeImpl) methodInvocation.methodSelect();,if (methodInvocation != null ) IdentifierTreeImpl identifier = (IdentifierTreeImpl) methodInvocation.methodSelect();
TreeFactory.java,InternalSyntaxToken openBracketToken = dim.second().first();,if (dim != null ) InternalSyntaxToken openBracketToken = dim.second().first();
TreeFactory.java,InternalSyntaxToken closeBracketToken = dim.second().second();,if (dim != null ) InternalSyntaxToken closeBracketToken = dim.second().second();
TreeFactory.java,InternalSyntaxToken openBracketToken = dim.first();,if (dim != null ) InternalSyntaxToken openBracketToken = dim.first();
TreeFactory.java,InternalSyntaxToken closeBracketToken = dim.second();,if (dim != null ) InternalSyntaxToken closeBracketToken = dim.second();
TryStatementTreeImpl.java,this.variableTreeResources = ResourceListTreeImpl.emptyList();,if (ResourceListTreeImpl != null ) this.variableTreeResources = ResourceListTreeImpl.emptyList();
TryStatementTreeImpl.java,Iterator<SyntaxToken> separators = resources.separators().iterator();,if (resources != null ) Iterator<SyntaxToken> separators = resources.separators().iterator();
TryStatementTreeImpl.java,separator = separators.next();,if (separators != null ) separator = separators.next();
ArrayJavaType.java,erasure.elementType = elementType.erasure();,if (elementType != null ) erasure.elementType = elementType.erasure();
BytecodeCompleter.java,String bytecodeName = typeSymbol.getFullyQualifiedName();,if (typeSymbol != null ) String bytecodeName = typeSymbol.getFullyQualifiedName();
BytecodeCompleter.java,owner = owner.owner();,if (owner != null ) owner = owner.owner();
BytecodeCompleter.java,String className = classReader.getClassName();,if (classReader != null ) String className = classReader.getClassName();
BytecodeFieldVisitor.java,AnnotationInstanceResolve annotationInstance = new AnnotationInstanceResolve(annotationType.getSymbol());,if (AnnotationInstanceResolve(annotationType != null ) AnnotationInstanceResolve annotationInstance = new AnnotationInstanceResolve(annotationType.getSymbol());
BytecodeMethodVisitor.java,AnnotationInstanceResolve annotationInstance = new AnnotationInstanceResolve(annotationType.getSymbol());,if (AnnotationInstanceResolve(annotationType != null ) AnnotationInstanceResolve annotationInstance = new AnnotationInstanceResolve(annotationType.getSymbol());
BytecodeMethodVisitor.java,AnnotationInstanceResolve annotationInstance = new AnnotationInstanceResolve(annotationType.getSymbol());,if (AnnotationInstanceResolve(annotationType != null ) AnnotationInstanceResolve annotationInstance = new AnnotationInstanceResolve(annotationType.getSymbol());
BytecodeVisitor.java,AnnotationInstanceResolve annotationInstance = new AnnotationInstanceResolve(annotationType.getSymbol());,if (AnnotationInstanceResolve(annotationType != null ) AnnotationInstanceResolve annotationInstance = new AnnotationInstanceResolve(annotationType.getSymbol());
BytecodeVisitor.java,interfaces = ImmutableList.builder();,if (ImmutableList != null ) interfaces = ImmutableList.builder();
BytecodeVisitor.java,int lookupSize = lookup.size();,if (lookup != null ) int lookupSize = lookup.size();
BytecodeVisitor.java,int lookupSize = lookup.size();,if (lookup != null ) int lookupSize = lookup.size();
BytecodeVisitor.java,currentSymbol = currentSymbol.owner();,if (currentSymbol != null ) currentSymbol = currentSymbol.owner();
ClassJavaType.java,ClassJavaType type = (ClassJavaType) symbol.superClass();,if (symbol != null ) ClassJavaType type = (ClassJavaType) symbol.superClass();
FirstPass.java,PackageDeclarationTree packageDeclaration = tree.packageDeclaration();,if (tree != null ) PackageDeclarationTree packageDeclaration = tree.packageDeclaration();
FirstPass.java,ExpressionTree packageName = packageDeclaration.packageName();,if (packageDeclaration != null ) ExpressionTree packageName = packageDeclaration.packageName();
FirstPass.java,env = new Resolve.Env();,if (Resolve != null ) env = new Resolve.Env();
FirstPass.java,packageName += tree.name();,if (tree != null ) packageName += tree.name();
FirstPass.java,isStatic = tree.isStatic();,if (tree != null ) isStatic = tree.isStatic();
FirstPass.java,currentSymbol = new Resolve.JavaSymbolNotFound();,if (Resolve != null ) currentSymbol = new Resolve.JavaSymbolNotFound();
FirstPass.java,resolved = Collections.emptyList();,if (Collections != null ) resolved = Collections.emptyList();
FirstPass.java,currentSymbol = new Resolve.JavaSymbolNotFound();,if (Resolve != null ) currentSymbol = new Resolve.JavaSymbolNotFound();
FirstPass.java,resolved = Collections.emptyList();,if (Collections != null ) resolved = Collections.emptyList();
FirstPass.java,name = tree.simpleName().name();,if (tree != null ) name = tree.simpleName().name();
FirstPass.java,TypeParameters typeParameterTrees = tree.typeParameters();,if (tree != null ) TypeParameters typeParameterTrees = tree.typeParameters();
FirstPass.java,Resolve.Env classEnv = env.dup();,if (env != null ) Resolve.Env classEnv = env.dup();
FirstPass.java,Resolve.Env methodEnv = env.dup();,if (env != null ) Resolve.Env methodEnv = env.dup();
FirstPass.java,symbol.defaultValue = getDefaultValueFromTree(tree.defaultValue());,if (getDefaultValueFromTree(tree != null ) symbol.defaultValue = getDefaultValueFromTree(tree.defaultValue());
FirstPass.java,result |= Flags.flagForModifier(modifier.modifier());,if (Flags != null ) result |= Flags.flagForModifier(modifier.modifier());
FirstPass.java,String name = identifierTree.name();,if (identifierTree != null ) String name = identifierTree.name();
FirstPass.java,Resolve.Env newEnv = env.dup();,if (env != null ) Resolve.Env newEnv = env.dup();
JavaSymbol.java,this.usagesBuilder = ImmutableList.builder();,if (ImmutableList != null ) this.usagesBuilder = ImmutableList.builder();
JavaSymbol.java,symbol = symbol.owner();,if (symbol != null ) symbol = symbol.owner();
JavaSymbol.java,result = result.owner();,if (result != null ) result = result.owner();
JavaSymbol.java,ClassJavaType superClassType = (ClassJavaType) this.superClass();,if (this != null ) ClassJavaType superClassType = (ClassJavaType) this.superClass();
JavaSymbol.java,ClassJavaType superClassType = (ClassJavaType) this.superClass();,if (this != null ) ClassJavaType superClassType = (ClassJavaType) this.superClass();
JavaSymbol.java,TypeJavaSymbol superClassSymbol = superClassType.getSymbol();,if (superClassType != null ) TypeJavaSymbol superClassSymbol = superClassType.getSymbol();
JavaSymbol.java,superClassType = (ClassJavaType) superClassSymbol.superClass();,if (superClassSymbol != null ) superClassType = (ClassJavaType) superClassSymbol.superClass();
JavaSymbol.java,superTypes = types.build();,if (types != null ) superTypes = types.build();
JavaSymbol.java,ClassJavaType classType = todo.pop();,if (todo != null ) ClassJavaType classType = todo.pop();
JavaSymbol.java,signature += owner.getType().fullyQualifiedName();,if (owner != null ) signature += owner.getType().fullyQualifiedName();
JavaType.java,"return symbol == null ? """" : symbol.toString();","if (symbol != null ) return symbol == null ? """" : symbol.toString();"
LabelsVisitor.java,LabeledStatementTree labelTree = labelTrees.get(label.name());,if (labelTrees != null ) LabeledStatementTree labelTree = labelTrees.get(label.name());
LabelsVisitor.java,JavaSymbol symbol = (JavaSymbol) labelTree.symbol();,if (labelTree != null ) JavaSymbol symbol = (JavaSymbol) labelTree.symbol();
LambdaBlockReturnVisitor.java,ExpressionTree expression = tree.expression();,if (tree != null ) ExpressionTree expression = tree.expression();
LeastUpperBound.java,Iterator<Type> iterator = types.iterator();,if (types != null ) Iterator<Type> iterator = types.iterator();
LeastUpperBound.java,Type first = iterator.next();,if (iterator != null ) Type first = iterator.next();
LeastUpperBound.java,Symbol.TypeSymbol symbol = type.symbol();,if (type != null ) Symbol.TypeSymbol symbol = type.symbol();
LeastUpperBound.java,Type superClass = symbol.superClass();,if (symbol != null ) Type superClass = symbol.superClass();
LeastUpperBound.java,JavaSymbol.TypeJavaSymbol superClassSymbol = substitutedSuperClass.getSymbol();,if (substitutedSuperClass != null ) JavaSymbol.TypeJavaSymbol superClassSymbol = substitutedSuperClass.getSymbol();
LeastUpperBound.java,superClass = superClassSymbol.superClass();,if (superClassSymbol != null ) superClass = superClassSymbol.superClass();
LeastUpperBound.java,Type erasedSupertype = supertype.erasure();,if (supertype != null ) Type erasedSupertype = supertype.erasure();
ParametrizedTypeJavaType.java,this.rawType = symbol.getType().erasure();,if (symbol != null ) this.rawType = symbol.getType().erasure();
ParametrizedTypeJavaType.java,List<JavaType> myTypes = typeSubstitution.substitutedTypes();,if (typeSubstitution != null ) List<JavaType> myTypes = typeSubstitution.substitutedTypes();
ParametrizedTypeJavaType.java,List<JavaType> itsTypes = superType.typeSubstitution.substitutedTypes();,if (superType != null ) List<JavaType> itsTypes = superType.typeSubstitution.substitutedTypes();
Resolve.java,JavaType enclosingType = env.enclosingClass.getType();,if (env != null ) JavaType enclosingType = env.enclosingClass.getType();
Resolve.java,JavaType superclass = site.getSuperType();,if (site != null ) JavaType superclass = site.getSuperType();
Resolve.java,JavaSymbol owner = site.symbol.owner();,if (site != null ) JavaSymbol owner = site.symbol.owner();
Resolve.java,JavaType superclass = site.getSuperType();,if (site != null ) JavaType superclass = site.getSuperType();
Resolve.java,returnType = returnType.erasure();,if (returnType != null ) returnType = returnType.erasure();
Resolve.java,int argsSize = argTypes.size();,if (argTypes != null ) int argsSize = argTypes.size();
Resolve.java,int formalsSize = formals.size();,if (formals != null ) int formalsSize = formals.size();
Resolve.java,AbstractTypedTree tree = arg.tree();,if (arg != null ) AbstractTypedTree tree = arg.tree();
Resolve.java,Tree expression = methodRefTree.expression();,if (methodRefTree != null ) Tree expression = methodRefTree.expression();
Resolve.java,String methodName = getMethodReferenceMethodName(methodRefTree.method().name());,if (getMethodReferenceMethodName(methodRefTree != null ) String methodName = getMethodReferenceMethodName(methodRefTree.method().name());
Resolve.java,"result = sameOutermostClass(env.enclosingClass, c.owner());","if (c != null ) result = sameOutermostClass(env.enclosingClass, c.owner());"
Resolve.java,result = env.packge == c.packge();,if (c != null ) result = env.packge == c.packge();
Resolve.java,c = c.owner().enclosingClass();,if (c != null ) c = c.owner().enclosingClass();
Resolve.java,JavaSymbol.PackageJavaSymbol thisPackage = symbol.packge();,if (symbol != null ) JavaSymbol.PackageJavaSymbol thisPackage = symbol.packge();
Resolve.java,JavaSymbol.MethodJavaSymbol overriddenSymbol = methodJavaSymbol.overriddenSymbol();,if (methodJavaSymbol != null ) JavaSymbol.MethodJavaSymbol overriddenSymbol = methodJavaSymbol.overriddenSymbol();
Resolve.java,overriddenSymbol = overriddenSymbol.overriddenSymbol();,if (overriddenSymbol != null ) overriddenSymbol = overriddenSymbol.overriddenSymbol();
SecondPass.java,type.interfaces = Collections.emptyList();,if (Collections != null ) type.interfaces = Collections.emptyList();
SecondPass.java,type.interfaces = interfaces.build();,if (interfaces != null ) type.interfaces = interfaces.build();
SecondPass.java,List<JavaType> argTypes = Collections.emptyList();,if (Collections != null ) List<JavaType> argTypes = Collections.emptyList();
SecondPass.java,JavaSymbol owner = symbol.owner();,if (symbol != null ) JavaSymbol owner = symbol.owner();
SecondPass.java,Tree superClassTree = tree.superClass();,if (tree != null ) Tree superClassTree = tree.superClass();
SecondPass.java,"returnType = resolveType(env, methodTree.returnType());","if (methodTree != null ) returnType = resolveType(env, methodTree.returnType());"
SecondPass.java,JavaSymbol owner = symbol.enclosingClass().owner();,if (symbol != null ) JavaSymbol owner = symbol.enclosingClass().owner();
SecondPass.java,List<VariableTree> parametersTree = methodTree.parameters();,if (methodTree != null ) List<VariableTree> parametersTree = methodTree.parameters();
SecondPass.java,List<JavaSymbol> scopeSymbols = symbol.parameters.scopeSymbols();,if (symbol != null ) List<JavaSymbol> scopeSymbols = symbol.parameters.scopeSymbols();
SecondPass.java,"symbol.type = resolveType(env, variableTree.type());","if (variableTree != null ) symbol.type = resolveType(env, variableTree.type());"
SemanticModel.java,JavaTree parent = parentList.pop();,if (parentList != null ) JavaTree parent = parentList.pop();
SemanticModel.java,node = node.parent();,if (node != null ) node = node.parent();
Symbols.java,boxedTypes = HashBiMap.create();,if (HashBiMap != null ) boxedTypes = HashBiMap.create();
TypeAndReferenceSolver.java,Arguments arguments = tree.arguments();,if (tree != null ) Arguments arguments = tree.arguments();
TypeAndReferenceSolver.java,name = scopeSymbol.name();,if (scopeSymbol != null ) name = scopeSymbol.name();
TypeAndReferenceSolver.java,List<JavaType> argTypes = getParameterTypes(tree.arguments());,if (getParameterTypes(tree != null ) List<JavaType> argTypes = getParameterTypes(tree.arguments());
TypeAndReferenceSolver.java,JavaSymbol.MethodJavaSymbol methodSymbol = (JavaSymbol.MethodJavaSymbol) mit.symbol();,if (mit != null ) JavaSymbol.MethodJavaSymbol methodSymbol = (JavaSymbol.MethodJavaSymbol) mit.symbol();
TypeAndReferenceSolver.java,int size = inferedArgTypes.size();,if (inferedArgTypes != null ) int size = inferedArgTypes.size();
TypeAndReferenceSolver.java,List<JavaType> typeParamTypes = getParameterTypes(tree.typeArguments());,if (getParameterTypes(tree != null ) List<JavaType> typeParamTypes = getParameterTypes(tree.typeArguments());
TypeAndReferenceSolver.java,resultType = (JavaType) mit.symbolType();,if (mit != null ) resultType = (JavaType) mit.symbolType();
TypeAndReferenceSolver.java,List<JavaType> argTypes = getParameterTypes(tree.arguments());,if (getParameterTypes(tree != null ) List<JavaType> argTypes = getParameterTypes(tree.arguments());
TypeAndReferenceSolver.java,List<JavaType> typeParamTypes = getParameterTypes(tree.typeArguments());,if (getParameterTypes(tree != null ) List<JavaType> typeParamTypes = getParameterTypes(tree.typeArguments());
TypeAndReferenceSolver.java,symbol = resolution.symbol();,if (resolution != null ) symbol = resolution.symbol();
TypeAndReferenceSolver.java,returnType = resolution.type();,if (resolution != null ) returnType = resolution.type();
TypeAndReferenceSolver.java,MethodJavaType methodType = (MethodJavaType) resolution.type();,if (resolution != null ) MethodJavaType methodType = (MethodJavaType) resolution.type();
TypeAndReferenceSolver.java,List<JavaType> parameterTypes = getParameterTypes(tree.arguments());,if (getParameterTypes(tree != null ) List<JavaType> parameterTypes = getParameterTypes(tree.arguments());
TypeAndReferenceSolver.java,Tree methodSelect = tree.methodSelect();,if (tree != null ) Tree methodSelect = tree.methodSelect();
TypeAndReferenceSolver.java,JavaType type = getType(mset.expression());,if (getType(mset != null ) JavaType type = getType(mset.expression());
TypeAndReferenceSolver.java,identifier = mset.identifier();,if (mset != null ) identifier = mset.identifier();
TypeAndReferenceSolver.java,MethodJavaType methodType = (MethodJavaType) resolution.type();,if (resolution != null ) MethodJavaType methodType = (MethodJavaType) resolution.type();
TypeAndReferenceSolver.java,JavaSymbol.MethodJavaSymbol methodSymbol = (JavaSymbol.MethodJavaSymbol) mit.symbol();,if (mit != null ) JavaSymbol.MethodJavaSymbol methodSymbol = (JavaSymbol.MethodJavaSymbol) mit.symbol();
TypeAndReferenceSolver.java,JavaType methodReturnedType = (JavaType) mit.symbolType();,if (mit != null ) JavaType methodReturnedType = (JavaType) mit.symbolType();
TypeAndReferenceSolver.java,AbstractTypedTree inferedExpression = deferredType.tree();,if (deferredType != null ) AbstractTypedTree inferedExpression = deferredType.tree();
TypeAndReferenceSolver.java,JavaType type = getType(mset.expression());,if (getType(mset != null ) JavaType type = getType(mset.expression());
TypeAndReferenceSolver.java,identifier = mset.identifier();,if (mset != null ) identifier = mset.identifier();
TypeAndReferenceSolver.java,identifierTree = mse.identifier();,if (mse != null ) identifierTree = mse.identifier();
TypeAndReferenceSolver.java,List<AnnotationTree> identifierAnnotations = identifierTree.annotations();,if (identifierTree != null ) List<AnnotationTree> identifierAnnotations = identifierTree.annotations();
TypeAndReferenceSolver.java,resolvedSymbol = res.symbol();,if (res != null ) resolvedSymbol = res.symbol();
TypeAndReferenceSolver.java,resolvedSymbol = resolution.symbol();,if (resolution != null ) resolvedSymbol = resolution.symbol();
TypeAndReferenceSolver.java,JavaType type = resolution.type();,if (resolution != null ) JavaType type = resolution.type();
TypeAndReferenceSolver.java,type = type.erasure();,if (type != null ) type = type.erasure();
TypeAndReferenceSolver.java,JavaType expressionType = getType(mse.expression());,if (getType(mse != null ) JavaType expressionType = getType(mse.expression());
TypeAndReferenceSolver.java,expressionType = expressionType.primitiveWrapperType();,if (expressionType != null ) expressionType = expressionType.primitiveWrapperType();
TypeAndReferenceSolver.java,JavaType bound = getType(tree.bound());,if (getType(tree != null ) JavaType bound = getType(tree.bound());
TypeAndReferenceSolver.java,JavaType trueType = getType(tree.trueExpression());,if (getType(tree != null ) JavaType trueType = getType(tree.trueExpression());
TypeAndReferenceSolver.java,JavaType falseType = getType(tree.falseExpression());,if (getType(tree != null ) JavaType falseType = getType(tree.falseExpression());
TypeAndReferenceSolver.java,JavaType lambdaType = (JavaType) lambdaExpressionTree.symbolType();,if (lambdaExpressionTree != null ) JavaType lambdaType = (JavaType) lambdaExpressionTree.symbolType();
TypeAndReferenceSolver.java,ExpressionTree expression = tree.expression();,if (tree != null ) ExpressionTree expression = tree.expression();
TypeAndReferenceSolver.java,Tree parent = tree.parent();,if (tree != null ) Tree parent = tree.parent();
TypeAndReferenceSolver.java,parent = parent.parent();,if (parent != null ) parent = parent.parent();
TypeAndReferenceSolver.java,Tree parent = tree.parent();,if (tree != null ) Tree parent = tree.parent();
TypeAndReferenceSolver.java,parent = parent.parent();,if (parent != null ) parent = parent.parent();
TypeAndReferenceSolver.java,JavaType type = getType(tree.type());,if (getType(tree != null ) JavaType type = getType(tree.type());
TypeAndReferenceSolver.java,int dimensions = tree.dimensions().size();,if (tree != null ) int dimensions = tree.dimensions().size();
TypeAndReferenceSolver.java,JavaType expType = getType(tree.expression());,if (getType(tree != null ) JavaType expType = getType(tree.expression());
TypeAndReferenceSolver.java,JavaType parenthesizedExpressionType = getType(tree.expression());,if (getType(tree != null ) JavaType parenthesizedExpressionType = getType(tree.expression());
TypeAndReferenceSolver.java,JavaType type = getType(tree.expression());,if (getType(tree != null ) JavaType type = getType(tree.expression());
TypeAndReferenceSolver.java,JavaType left = getType(tree.leftOperand());,if (getType(tree != null ) JavaType left = getType(tree.leftOperand());
TypeAndReferenceSolver.java,JavaType right = getType(tree.rightOperand());,if (getType(tree != null ) JavaType right = getType(tree.rightOperand());
TypeAndReferenceSolver.java,List<JavaType> typeArgumentsTypes = Collections.emptyList();,if (Collections != null ) List<JavaType> typeArgumentsTypes = Collections.emptyList();
TypeAndReferenceSolver.java,List<JavaType> parameterTypes = getParameterTypes(tree.arguments());,if (getParameterTypes(tree != null ) List<JavaType> parameterTypes = getParameterTypes(tree.arguments());
TypeAndReferenceSolver.java,ExpressionTree enclosingExpression = tree.enclosingExpression();,if (tree != null ) ExpressionTree enclosingExpression = tree.enclosingExpression();
TypeAndReferenceSolver.java,TypeTree typeTree = tree.identifier();,if (tree != null ) TypeTree typeTree = tree.identifier();
TypeAndReferenceSolver.java,IdentifierTree constructorIdentifier = newClassTreeImpl.getConstructorIdentifier();,if (newClassTreeImpl != null ) IdentifierTree constructorIdentifier = newClassTreeImpl.getConstructorIdentifier();
TypeAndReferenceSolver.java,JavaSymbol.TypeJavaSymbol constructorIdentifierSymbol = (JavaSymbol.TypeJavaSymbol) identifierType.symbol();,if (identifierType != null ) JavaSymbol.TypeJavaSymbol constructorIdentifierSymbol = (JavaSymbol.TypeJavaSymbol) identifierType.symbol();
TypeAndReferenceSolver.java,Tree parent = newClassTreeImpl.parent();,if (newClassTreeImpl != null ) Tree parent = newClassTreeImpl.parent();
TypeAndReferenceSolver.java,ClassTree classBody = tree.classBody();,if (tree != null ) ClassTree classBody = tree.classBody();
TypeAndReferenceSolver.java,anonymousClassType.interfaces = Collections.emptyList();,if (Collections != null ) anonymousClassType.interfaces = Collections.emptyList();
TypeAndReferenceSolver.java,JavaType type = idType.type();,if (idType != null ) JavaType type = idType.type();
TypeAndReferenceSolver.java,JavaSymbol owner = constructorIdentifierSymbol.owner();,if (constructorIdentifierSymbol != null ) JavaSymbol owner = constructorIdentifierSymbol.owner();
TypeAndReferenceSolver.java,ExpressionTree expression = tree.expression();,if (tree != null ) ExpressionTree expression = tree.expression();
TypeAndReferenceSolver.java,JavaSymbol symbol = resolution.symbol();,if (resolution != null ) JavaSymbol symbol = resolution.symbol();
TypeAndReferenceSolver.java,int size = resolvedFormals.size();,if (resolvedFormals != null ) int size = resolvedFormals.size();
TypeAndReferenceSolver.java,ExpressionTree initializer = tree.initializer();,if (tree != null ) ExpressionTree initializer = tree.initializer();
TypeAndReferenceSolver.java,TypeTree typeTree = tree.type();,if (tree != null ) TypeTree typeTree = tree.type();
TypeAndReferenceSolver.java,JavaType initializerType = (JavaType) initializer.symbolType();,if (initializer != null ) JavaType initializerType = (JavaType) initializer.symbolType();
TypeAndReferenceSolver.java,TypeTree typeTree = tree.variable().type();,if (tree != null ) TypeTree typeTree = tree.variable().type();
TypeAndReferenceSolver.java,String fullyQualifiedName = type.fullyQualifiedName();,if (type != null ) String fullyQualifiedName = type.fullyQualifiedName();
TypeAndReferenceSolver.java,JavaType type = getType(tree.variable());,if (getType(tree != null ) JavaType type = getType(tree.variable());
TypeAndReferenceSolver.java,JavaType type = typesOfLiterals.get(tree.kind());,if (typesOfLiterals != null ) JavaType type = typesOfLiterals.get(tree.kind());
TypeAndReferenceSolver.java,JavaType type = getType(tree.expression());,if (getType(tree != null ) JavaType type = getType(tree.expression());
TypeAndReferenceSolver.java,Type expressionType = tree.expression().symbolType();,if (tree != null ) Type expressionType = tree.expression().symbolType();
TypeAndReferenceSolver.java,NewClassTree newClassTree = tree.initializer();,if (tree != null ) NewClassTree newClassTree = tree.initializer();
TypeAndReferenceSolver.java,ClassTree classBody = newClassTree.classBody();,if (newClassTree != null ) ClassTree classBody = newClassTree.classBody();
TypeAndReferenceSolver.java,Arguments arguments = tree.arguments();,if (tree != null ) Arguments arguments = tree.arguments();
TypeAndReferenceSolver.java,IdentifierTree variable = (IdentifierTree) aet.variable();,if (aet != null ) IdentifierTree variable = (IdentifierTree) aet.variable();
TypeAndReferenceSolver.java,JavaType methodRefType = (JavaType) methodRefTree.symbolType();,if (methodRefTree != null ) JavaType methodRefType = (JavaType) methodRefTree.symbolType();
TypeAndReferenceSolver.java,JavaSymbol methodSymbol = resolution.symbol();,if (resolution != null ) JavaSymbol methodSymbol = resolution.symbol();
TypeAndReferenceSolver.java,IdentifierTree methodIdentifier = methodRefTree.method();,if (methodRefTree != null ) IdentifierTree methodIdentifier = methodRefTree.method();
TypeAndReferenceSolver.java,JavaType expressionType = getType(methodReferenceTree.expression());,if (getType(methodReferenceTree != null ) JavaType expressionType = getType(methodReferenceTree.expression());
TypeInferenceSolver.java,boolean isVarArgs = method.isVarArgs();,if (method != null ) boolean isVarArgs = method.isVarArgs();
TypeInferenceSolver.java,int numberFormals = formals.size();,if (formals != null ) int numberFormals = formals.size();
TypeInferenceSolver.java,int numberArgs = argTypes.size();,if (argTypes != null ) int numberArgs = argTypes.size();
TypeInferenceSolver.java,List<JavaType> formalTypeSubstitutedTypes = formalType.typeSubstitution.substitutedTypes();,if (formalType != null ) List<JavaType> formalTypeSubstitutedTypes = formalType.typeSubstitution.substitutedTypes();
TypeInferenceSolver.java,List<JavaType> argTypeSubstitutedTypes = parametrizedArgType.typeSubstitution.substitutedTypes();,if (parametrizedArgType != null ) List<JavaType> argTypeSubstitutedTypes = parametrizedArgType.typeSubstitution.substitutedTypes();
TypeInferenceSolver.java,JavaType superclass = argType.symbol.getSuperclass();,if (argType != null ) JavaType superclass = argType.symbol.getSuperclass();
TypeInferenceSolver.java,return rawType == type.erasure();,if (type != null ) return rawType == type.erasure();
TypeSubstitution.java,TypeVariableJavaType typeVar = substitution.getKey();,if (substitution != null ) TypeVariableJavaType typeVar = substitution.getKey();
TypeSubstitution.java,JavaType targetType = filterWildcard(substitution.getValue());,if (filterWildcard(substitution != null ) JavaType targetType = filterWildcard(substitution.getValue());
TypeSubstitutionSolver.java,TypeJavaSymbol siteSymbol = site.getSymbol();,if (site != null ) TypeJavaSymbol siteSymbol = site.getSymbol();
TypeSubstitutionSolver.java,Type superClass = siteSymbol.superClass();,if (siteSymbol != null ) Type superClass = siteSymbol.superClass();
TypeSubstitutionSolver.java,TypeVariableJavaType typeVar = entry.getKey();,if (entry != null ) TypeVariableJavaType typeVar = entry.getKey();
TypeSubstitutionSolver.java,JavaType subs = entry.getValue();,if (entry != null ) JavaType subs = entry.getValue();
TypeSubstitutionSolver.java,subs = subs.erasure();,if (subs != null ) subs = subs.erasure();
TypeSubstitutionSolver.java,JavaType value = entry.getValue();,if (entry != null ) JavaType value = entry.getValue();
TypeSubstitutionSolver.java,Type superClass = targetSymbol.superClass();,if (targetSymbol != null ) Type superClass = targetSymbol.superClass();
UnknownType.java,interfaces = Collections.emptyList();,if (Collections != null ) interfaces = Collections.emptyList();
JavaParserTest.java,ActionParser<Tree> parser = JavaParser.createParser();,if (JavaParser != null ) ActionParser<Tree> parser = JavaParser.createParser();
ClassDeclarationTest.java,LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();,if (JavaLexer != null ) LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();
EnumConstantTest.java,LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();,if (JavaLexer != null ) LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();
EnumConstantTest.java,LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();,if (JavaLexer != null ) LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();
EnumDeclarationTest.java,LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();,if (JavaLexer != null ) LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();
InterfaceDeclarationTest.java,LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();,if (JavaLexer != null ) LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();
FormalParameterDeclsRestTest.java,LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();,if (JavaLexer != null ) LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();
FormalParameterDeclsTest.java,LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();,if (JavaLexer != null ) LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();
FormalParameterTest.java,LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();,if (JavaLexer != null ) LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();
FormalParametersTest.java,LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();,if (JavaLexer != null ) LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();
BlockStatementTest.java,LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();,if (JavaLexer != null ) LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();
BlockStatementsTest.java,LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();,if (JavaLexer != null ) LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();
BlockTest.java,LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();,if (JavaLexer != null ) LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();
CatchClauseTest.java,LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();,if (JavaLexer != null ) LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();
LocalVariableDeclarationStatementTest.java,LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();,if (JavaLexer != null ) LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();
ResourceTest.java,LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();,if (JavaLexer != null ) LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();
TryStatementTest.java,LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();,if (JavaLexer != null ) LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();
VariableDeclaratorTest.java,LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();,if (JavaLexer != null ) LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();
VariableDeclaratorsTest.java,LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();,if (JavaLexer != null ) LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();
ModifiersTest.java,LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();,if (JavaLexer != null ) LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();
TypeArgumentTest.java,ParameterizedTypeTree type = (ParameterizedTypeTree) field.type();,if (field != null ) ParameterizedTypeTree type = (ParameterizedTypeTree) field.type();
TypeParameterTest.java,LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();,if (JavaLexer != null ) LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();
TypeParametersTest.java,LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();,if (JavaLexer != null ) LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();
TypeDeclarationTest.java,LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();,if (JavaLexer != null ) LexerlessGrammarBuilder b = JavaLexer.createGrammarBuilder();
PublicApiCheckerTest.java,ActionParser p = JavaParser.createParser();,if (JavaParser != null ) ActionParser p = JavaParser.createParser();
CFGTestLoader.java,ActionParser<Tree> parser = JavaParser.createParser();,if (JavaParser != null ) ActionParser<Tree> parser = JavaParser.createParser();
JMethodSymbolTest.java,List<File> classpath = Collections.emptyList();,if (Collections != null ) List<File> classpath = Collections.emptyList();
JParserSemanticTest.java,Symbol oldOwner = oldSymbol.owner();,if (oldSymbol != null ) Symbol oldOwner = oldSymbol.owner();
JParserSemanticTest.java,List<File> classpath = Collections.emptyList();,if (Collections != null ) List<File> classpath = Collections.emptyList();
JSymbolMetadataTest.java,List<File> classpath = Collections.emptyList();,if (Collections != null ) List<File> classpath = Collections.emptyList();
JSymbolTest.java,List<File> classpath = Collections.emptyList();,if (Collections != null ) List<File> classpath = Collections.emptyList();
JTypeSymbolTest.java,List<File> classpath = Collections.emptyList();,if (Collections != null ) List<File> classpath = Collections.emptyList();
JTypeTest.java,List<File> classpath = Collections.emptyList();,if (Collections != null ) List<File> classpath = Collections.emptyList();
JUtilsTest.java,List<File> classpath = Collections.emptyList();,if (Collections != null ) List<File> classpath = Collections.emptyList();
JavaTreeModelTest.java,type = classTree.superClass();,if (classTree != null ) type = classTree.superClass();
JavaTreeModelTest.java,type = classTree.superClass();,if (classTree != null ) type = classTree.superClass();
JavaTreeModelTest.java,type = classTree.superClass();,if (classTree != null ) type = classTree.superClass();
JavaTreeModelTest.java,MemberSelectExpressionTree memberSelectExpression = (MemberSelectExpressionTree) tree.methodSelect();,if (tree != null ) MemberSelectExpressionTree memberSelectExpression = (MemberSelectExpressionTree) tree.methodSelect();
JavaTreeModelTest.java,memberSelectExpression = (MemberSelectExpressionTree) tree.methodSelect();,if (tree != null ) memberSelectExpression = (MemberSelectExpressionTree) tree.methodSelect();
JavaTreeModelTest.java,memberSelectExpression = (MemberSelectExpressionTree) memberSelectExpression.expression();,if (memberSelectExpression != null ) memberSelectExpression = (MemberSelectExpressionTree) memberSelectExpression.expression();
JavaTreeModelTest.java,memberSelectExpression = (MemberSelectExpressionTree) tree.methodSelect();,if (tree != null ) memberSelectExpression = (MemberSelectExpressionTree) tree.methodSelect();
JavaTreeModelTest.java,memberSelectExpression = (MemberSelectExpressionTree) tree.methodSelect();,if (tree != null ) memberSelectExpression = (MemberSelectExpressionTree) tree.methodSelect();
JavaTreeModelTest.java,memberSelectExpression = (MemberSelectExpressionTree) tree.methodSelect();,if (tree != null ) memberSelectExpression = (MemberSelectExpressionTree) tree.methodSelect();
JavaTreeModelTest.java,arrayTypeTree = (ArrayTypeTree) variable.type();,if (variable != null ) arrayTypeTree = (ArrayTypeTree) variable.type();
JavaTreeModelTest.java,childArrayTypeTree = (ArrayTypeTree) arrayTypeTree.type();,if (arrayTypeTree != null ) childArrayTypeTree = (ArrayTypeTree) arrayTypeTree.type();
BytecodeCompleterTest.java,JavaType superclass = classSymbol.getSuperclass();,if (classSymbol != null ) JavaType superclass = classSymbol.getSuperclass();
BytecodeCompleterTest.java,JavaType superSuperClass = superclass.getSymbol().getSuperclass();,if (superclass != null ) JavaType superSuperClass = superclass.getSymbol().getSuperclass();
BytecodeCompleterTest.java,Collection<Symbol> symbols = superclass.getSymbol().memberSymbols();,if (superclass != null ) Collection<Symbol> symbols = superclass.getSymbol().memberSymbols();
BytecodeCompleterTest.java,JavaSymbol.TypeJavaSymbol symbol = bytecodeCompleter.getClassSymbol(InnerClassBeforeOuter.class.getName());,if (bytecodeCompleter != null ) JavaSymbol.TypeJavaSymbol symbol = bytecodeCompleter.getClassSymbol(InnerClassBeforeOuter.class.getName());
BytecodeCompleterTest.java,JavaSymbol.TypeJavaSymbol outerClass = (JavaSymbol.TypeJavaSymbol) innerClass.owner();,if (innerClass != null ) JavaSymbol.TypeJavaSymbol outerClass = (JavaSymbol.TypeJavaSymbol) innerClass.owner();
BytecodeCompleterTest.java,JavaSymbol.TypeJavaSymbol outerClass = bytecodeCompleter.getClassSymbol(HasInnerClass.class.getName());,if (bytecodeCompleter != null ) JavaSymbol.TypeJavaSymbol outerClass = bytecodeCompleter.getClassSymbol(HasInnerClass.class.getName());
BytecodeCompleterTest.java,JavaSymbol.TypeJavaSymbol outerClass = bytecodeCompleter.getClassSymbol(InnerClassConstructors.class.getName());,if (bytecodeCompleter != null ) JavaSymbol.TypeJavaSymbol outerClass = bytecodeCompleter.getClassSymbol(InnerClassConstructors.class.getName());
BytecodeCompleterTest.java,JavaSymbol.TypeJavaSymbol innerClassRef = foo.getReturnType();,if (foo != null ) JavaSymbol.TypeJavaSymbol innerClassRef = foo.getReturnType();
BytecodeCompleterTest.java,SymbolMetadataResolve metadata = classSymbol.metadata();,if (classSymbol != null ) SymbolMetadataResolve metadata = classSymbol.metadata();
BytecodeCompleterTest.java,Object value = iterator.next().value();,if (iterator != null ) Object value = iterator.next().value();
BytecodeCompleterTest.java,value = iterator.next().value();,if (iterator != null ) value = iterator.next().value();
BytecodeCompleterTest.java,SymbolMetadata barMetadata = barMethod.metadata();,if (barMethod != null ) SymbolMetadata barMetadata = barMethod.metadata();
BytecodeCompleterTest.java,SymbolMetadataResolve metadata = symbol.metadata();,if (symbol != null ) SymbolMetadataResolve metadata = symbol.metadata();
BytecodeCompleterTest.java,Type superClass = clazz.superClass();,if (clazz != null ) Type superClass = clazz.superClass();
BytecodeCompleterTest.java,List<Type> interfaces = clazz.interfaces();,if (clazz != null ) List<Type> interfaces = clazz.interfaces();
BytecodeCompleterTest.java,Symbol method = symbols.iterator().next();,if (symbols != null ) Symbol method = symbols.iterator().next();
BytecodeCompleterTest.java,Type type = field.type();,if (field != null ) Type type = field.type();
BytecodeCompleterTest.java,Scope members = classSymbol.members();,if (classSymbol != null ) Scope members = classSymbol.members();
BytecodeCompleterTest.java,Scope members = classSymbol.members();,if (classSymbol != null ) Scope members = classSymbol.members();
FlagsTest.java,Constructor constructor = Flags.class.getDeclaredConstructor();,if (Flags != null ) Constructor constructor = Flags.class.getDeclaredConstructor();
GenericsTest.java,List<IdentifierTree> usages = method.usages();,if (method != null ) List<IdentifierTree> usages = method.usages();
GenericsTest.java,current = current.parent();,if (current != null ) current = current.parent();
GenericsTest.java,String result = actual.toString();,if (actual != null ) String result = actual.toString();
GenericsTest.java,List<JavaType> substitutedTypes = javaType.typeSubstitution.substitutedTypes();,if (javaType != null ) List<JavaType> substitutedTypes = javaType.typeSubstitution.substitutedTypes();
GenericsTest.java,List<String> names = new ArrayList<>(substitutedTypes.size());,if (ArrayList<>(substitutedTypes != null ) List<String> names = new ArrayList<>(substitutedTypes.size());
GenericsTest.java,List<Tree> declaredClasses = tree.types();,if (tree != null ) List<Tree> declaredClasses = tree.types();
GenericsTest.java,List<Type> results = Lists.newLinkedList();,if (Lists != null ) List<Type> results = Lists.newLinkedList();
GenericsTest.java,List<Type> results = Lists.newLinkedList();,if (Lists != null ) List<Type> results = Lists.newLinkedList();
Java10SemanticTest.java,Type type = var.symbol().type();,if (var != null ) Type type = var.symbol().type();
Java10SemanticTest.java,Type type = var.symbol().type();,if (var != null ) Type type = var.symbol().type();
Java10SemanticTest.java,Type type = var.symbol().type();,if (var != null ) Type type = var.symbol().type();
Java10SemanticTest.java,Type type = var.symbol().type();,if (var != null ) Type type = var.symbol().type();
Java10SemanticTest.java,Type type = var.symbol().type();,if (var != null ) Type type = var.symbol().type();
Java10SemanticTest.java,JavaSymbol.TypeJavaSymbol symbol = (JavaSymbol.TypeJavaSymbol) type.symbol();,if (type != null ) JavaSymbol.TypeJavaSymbol symbol = (JavaSymbol.TypeJavaSymbol) type.symbol();
Java10SemanticTest.java,Type type = var.symbol().type();,if (var != null ) Type type = var.symbol().type();
Java10SemanticTest.java,Type type = var.symbol().type();,if (var != null ) Type type = var.symbol().type();
Java10SemanticTest.java,Type type = var.symbol().type();,if (var != null ) Type type = var.symbol().type();
Java10SemanticTest.java,Type type = var.symbol().type();,if (var != null ) Type type = var.symbol().type();
Java10SemanticTest.java,Type type = var.symbol().type();,if (var != null ) Type type = var.symbol().type();
Java10SemanticTest.java,Type type = var.symbol().type();,if (var != null ) Type type = var.symbol().type();
Java10SemanticTest.java,Type type = var.symbol().type();,if (var != null ) Type type = var.symbol().type();
Java10SemanticTest.java,Type type = var.symbol().type();,if (var != null ) Type type = var.symbol().type();
Java10SemanticTest.java,Type type = var.symbol().type();,if (var != null ) Type type = var.symbol().type();
Java10SemanticTest.java,Type type = var.symbol().type();,if (var != null ) Type type = var.symbol().type();
JavaTypeTest.java,Set<ClassJavaType> objectDirectSuperTypes = symbols.objectType.directSuperTypes();,if (symbols != null ) Set<ClassJavaType> objectDirectSuperTypes = symbols.objectType.directSuperTypes();
JavaTypeTest.java,Set<ClassJavaType> integerDirectSuperTypes = symbols.intType.primitiveWrapperType.directSuperTypes();,if (symbols != null ) Set<ClassJavaType> integerDirectSuperTypes = symbols.intType.primitiveWrapperType.directSuperTypes();
JavaTypeTest.java,Set<ClassJavaType> arrayDirectSuperTypes = arrayType.directSuperTypes();,if (arrayType != null ) Set<ClassJavaType> arrayDirectSuperTypes = arrayType.directSuperTypes();
LeastUpperBoundTest.java,Type a = classA.symbol().type();,if (classA != null ) Type a = classA.symbol().type();
LeastUpperBoundTest.java,List<Type> results = Lists.newLinkedList();,if (Lists != null ) List<Type> results = Lists.newLinkedList();
MethodReferenceResolutionTest.java,Type symbolType = flatMap.symbolType();,if (flatMap != null ) Type symbolType = flatMap.symbolType();
MethodReferenceResolutionTest.java,JavaType mapType = (JavaType) map.symbolType();,if (map != null ) JavaType mapType = (JavaType) map.symbolType();
ResolveTest.java,env = new Resolve.Env();,if (Resolve != null ) env = new Resolve.Env();
SymbolTableTest.java,public ExpectedException expectedEx = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedEx = ExpectedException.none();
SymbolTableTest.java,JavaType symbolType = (JavaType) tree.symbolType();,if (tree != null ) JavaType symbolType = (JavaType) tree.symbolType();
SymbolTableTest.java,Type symbolType = variable.initializer().symbolType();,if (variable != null ) Type symbolType = variable.initializer().symbolType();
SymbolTableTest.java,SymbolMetadataResolve metadata = classDeclaration.metadata();,if (classDeclaration != null ) SymbolMetadataResolve metadata = classDeclaration.metadata();
SymbolTableTest.java,symbolType = (ClassJavaType) nct.symbolType();,if (nct != null ) symbolType = (ClassJavaType) nct.symbolType();
SymbolTableTest.java,symbolType = (ClassJavaType) nct.symbolType();,if (nct != null ) symbolType = (ClassJavaType) nct.symbolType();
SymbolTableTest.java,superType = symbolType.getSuperType();,if (symbolType != null ) superType = symbolType.getSuperType();
SymbolTableTest.java,symbolType = (ClassJavaType) nct.symbolType();,if (nct != null ) symbolType = (ClassJavaType) nct.symbolType();
SymbolTableTest.java,superType = symbolType.getSuperType();,if (symbolType != null ) superType = symbolType.getSuperType();
SymbolTableTest.java,symbolType = (ClassJavaType) nct.symbolType();,if (nct != null ) symbolType = (ClassJavaType) nct.symbolType();
SymbolTableTest.java,superType = symbolType.getSuperType();,if (symbolType != null ) superType = symbolType.getSuperType();
SymbolTableTest.java,symbolType = (ClassJavaType) nct.symbolType();,if (nct != null ) symbolType = (ClassJavaType) nct.symbolType();
SymbolTableTest.java,superType = symbolType.getSuperType();,if (symbolType != null ) superType = symbolType.getSuperType();
SymbolTableTest.java,symbolType = (ClassJavaType) nct.symbolType();,if (nct != null ) symbolType = (ClassJavaType) nct.symbolType();
SymbolTableTest.java,symbolType = (ClassJavaType) nct.symbolType();,if (nct != null ) symbolType = (ClassJavaType) nct.symbolType();
SymbolTableTest.java,superType = symbolType.getSuperType();,if (symbolType != null ) superType = symbolType.getSuperType();
SymbolTableTest.java,Tree parent = referenceTree.parent();,if (referenceTree != null ) Tree parent = referenceTree.parent();
SymbolTableTest.java,parent = parent.parent();,if (parent != null ) parent = parent.parent();
SymbolTableTest.java,ParametrizedTypeJavaType superType = (ParametrizedTypeJavaType) enumSymbol.getSuperclass();,if (enumSymbol != null ) ParametrizedTypeJavaType superType = (ParametrizedTypeJavaType) enumSymbol.getSuperclass();
SymbolTableTest.java,ParametrizedTypeJavaType superType = (ParametrizedTypeJavaType) enumSymbol.getSuperclass();,if (enumSymbol != null ) ParametrizedTypeJavaType superType = (ParametrizedTypeJavaType) enumSymbol.getSuperclass();
SymbolTableTest.java,tree = tree.parent();,if (tree != null ) tree = tree.parent();
SymbolTableTest.java,Type initalizerType = init.symbolType();,if (init != null ) Type initalizerType = init.symbolType();
SymbolTableTest.java,initalizerType = init.symbolType();,if (init != null ) initalizerType = init.symbolType();
SymbolTableTest.java,MethodTree methodTree = (MethodTree) barMethod.declaration();,if (barMethod != null ) MethodTree methodTree = (MethodTree) barMethod.declaration();
SymbolTableTest.java,MethodInvocationTree methodInvocation = (MethodInvocationTree) expression.expression();,if (expression != null ) MethodInvocationTree methodInvocation = (MethodInvocationTree) expression.expression();
SymbolTableTest.java,Symbol symbolNotFound = methodInvocation.symbol();,if (methodInvocation != null ) Symbol symbolNotFound = methodInvocation.symbol();
SymbolTableTest.java,Type mapType = mapMethod.symbolType();,if (mapMethod != null ) Type mapType = mapMethod.symbolType();
SymbolTableTest.java,JavaType lambdaType = (JavaType) lambda.symbolType();,if (lambda != null ) JavaType lambdaType = (JavaType) lambda.symbolType();
SymbolTableTest.java,List<IdentifierTree> usages = maybeAddListener.usages();,if (maybeAddListener != null ) List<IdentifierTree> usages = maybeAddListener.usages();
SymbolTableTest.java,Type conditionalExpressionType = conditional.symbolType();,if (conditional != null ) Type conditionalExpressionType = conditional.symbolType();
TypeAndReferenceSolverTest.java,classType.interfaces = Collections.emptyList();,if (Collections != null ) classType.interfaces = Collections.emptyList();
TypeAndReferenceSolverTest.java,Resolve.Env top = new Resolve.Env();,if (Resolve != null ) Resolve.Env top = new Resolve.Env();
TypeAndReferenceSolverTest.java,Resolve.Env compilationUnitEnv = new Resolve.Env();,if (Resolve != null ) Resolve.Env compilationUnitEnv = new Resolve.Env();
TypeAndReferenceSolverTest.java,env = compilationUnitEnv.dup();,if (compilationUnitEnv != null ) env = compilationUnitEnv.dup();
TypeAndReferenceSolverTest.java,ParameterizedTypeTree type = (ParameterizedTypeTree) field.type();,if (field != null ) ParameterizedTypeTree type = (ParameterizedTypeTree) field.type();
TypeAndReferenceSolverTest.java,List<AnnotationTree> annotations = objectType.annotations();,if (objectType != null ) List<AnnotationTree> annotations = objectType.annotations();
TypeAndReferenceSolverTest.java,Type identifierType = newClassTree.identifier().symbolType();,if (newClassTree != null ) Type identifierType = newClassTree.identifier().symbolType();
TypeAndReferenceSolverTest.java,JavaTree.NotImplementedTreeImpl notImplementedTree = new JavaTree.NotImplementedTreeImpl();,if (JavaTree != null ) JavaTree.NotImplementedTreeImpl notImplementedTree = new JavaTree.NotImplementedTreeImpl();
TypeInferenceSolverTest.java,JavaType aRawType = aXType.erasure();,if (aXType != null ) JavaType aRawType = aXType.erasure();
TypeInferenceSolverTest.java,type.interfaces = Collections.emptyList();,if (Collections != null ) type.interfaces = Collections.emptyList();
TypeInferenceSolverTest.java,List<JavaType> result = new ArrayList<>(types.size());,if (ArrayList<>(types != null ) List<JavaType> result = new ArrayList<>(types.size());
TypeSubstitutionSolverTest.java,ActionParser<Tree> parser = JavaParser.createParser();,if (JavaParser != null ) ActionParser<Tree> parser = JavaParser.createParser();
TypeSubstitutionSolverTest.java,JavaSymbol.MethodJavaSymbol methodJavaSymbol = (JavaSymbol.MethodJavaSymbol) mit.symbol();,if (mit != null ) JavaSymbol.MethodJavaSymbol methodJavaSymbol = (JavaSymbol.MethodJavaSymbol) mit.symbol();
MethodYieldTest.java,ActionParser<Tree> p = JavaParser.createParser();,if (JavaParser != null ) ActionParser<Tree> p = JavaParser.createParser();
Assertions.java,InternalSyntaxToken syntaxToken = (InternalSyntaxToken) tree.lastToken();,if (tree != null ) InternalSyntaxToken syntaxToken = (InternalSyntaxToken) tree.lastToken();
ASTUtils.java,BindingResolver bindingResolver = ast.getBindingResolver();,if (ast != null ) BindingResolver bindingResolver = ast.getBindingResolver();
CookieHttpOnlyCheck.java,MethodInvocationTree mit = (MethodInvocationTree) declaration.initializer();,if (declaration != null ) MethodInvocationTree mit = (MethodInvocationTree) declaration.initializer();
JavaRulesDefinitionTest.java,RulesDefinition.Context context = new RulesDefinition.Context();,if (RulesDefinition != null ) RulesDefinition.Context context = new RulesDefinition.Context();
JavaSonarWayProfileTest.java,BuiltInQualityProfilesDefinition.Context context = new BuiltInQualityProfilesDefinition.Context();,if (BuiltInQualityProfilesDefinition != null ) BuiltInQualityProfilesDefinition.Context context = new BuiltInQualityProfilesDefinition.Context();
SonarComponentsTest.java,DefaultFileSystem fileSystem = context.fileSystem();,if (context != null ) DefaultFileSystem fileSystem = context.fileSystem();
ExecutionDataVisitor.java,String sessionId = info.getId();,if (info != null ) String sessionId = info.getId();
ExecutionDataVisitor.java,boolean[] src = data.getProbes();,if (data != null ) boolean[] src = data.getProbes();
JaCoCoSensor.java,Configuration config = context.config();,if (context != null ) Configuration config = context.config();
JaCoCoSensor.java,Configuration settings = context.config();,if (context != null ) Configuration settings = context.config();
JaCoCoSensor.java,FileSystem fs = context.fileSystem();,if (context != null ) FileSystem fs = context.fileSystem();
JaCoCoSensor.java,String reportPathProperty = reportPathProp.get();,if (reportPathProp != null ) String reportPathProperty = reportPathProp.get();
JacocoReportReader.java,byte firstByte = dis.readByte();,if (dis != null ) byte firstByte = dis.readByte();
JacocoReportReader.java,char version = dis.readChar();,if (dis != null ) char version = dis.readChar();
UnitTestAnalyzer.java,"String className = fullyQualifiedClassName(coverage.getPackageName(), coverage.getName());","if (coverage != null ) String className = fullyQualifiedClassName(coverage.getPackageName(), coverage.getName());"
UnitTestAnalyzer.java,File[] files = dir.listFiles();,if (dir != null ) File[] files = dir.listFiles();
UnitTestAnalyzer.java,String vmClassName = data.getName();,if (data != null ) String vmClassName = data.getName();
UnitTestAnalyzer.java,ICounter branchCounter = line.getBranchCounter();,if (line != null ) ICounter branchCounter = line.getBranchCounter();
UnitTestAnalyzer.java,int conditions = branchCounter.getTotalCount();,if (branchCounter != null ) int conditions = branchCounter.getTotalCount();
UnitTestAnalyzer.java,int coveredConditions = branchCounter.getCoveredCount();,if (branchCounter != null ) int coveredConditions = branchCounter.getCoveredCount();
JaCoCoReportMergerTest.java,public ExpectedException exception = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException exception = ExpectedException.none();
JaCoCoReportMergerTest.java,Constructor constructor = JaCoCoReportMerger.class.getDeclaredConstructor();,if (JaCoCoReportMerger != null ) Constructor constructor = JaCoCoReportMerger.class.getDeclaredConstructor();
JaCoCoSensorTest.java,SensorContextTester context = SensorContextTester.create(temp.newFolder());,if (SensorContextTester != null ) SensorContextTester context = SensorContextTester.create(temp.newFolder());
JaCoCoSensorTest.java,context = SensorContextTester.create(temp.newFolder());,if (SensorContextTester != null ) context = SensorContextTester.create(temp.newFolder());
JaCoCoSensorTest.java,outputDir = temp.newFolder();,if (temp != null ) outputDir = temp.newFolder();
JacocoReportReaderTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
JaCoCoControllerTest.java,this.javaVersion = javaVersion.get();,if (javaVersion != null ) this.javaVersion = javaVersion.get();
JUnitListener.java,jacoco = JacocoController.getInstance();,if (JacocoController != null ) jacoco = JacocoController.getInstance();
JacocoController.java,this.agent = RT.getAgent();,if (RT != null ) this.agent = RT.getAgent();
JacocoControllerTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
RedundantTypeCastCheck.java,Type cast = typeCastTree.type().symbolType();,if (typeCastTree != null ) Type cast = typeCastTree.type().symbolType();
RedundantTypeCastCheck.java,Symbol.MethodSymbol sym = (Symbol.MethodSymbol) mit.symbol();,if (mit != null ) Symbol.MethodSymbol sym = (Symbol.MethodSymbol) mit.symbol();
AnonymousClassesTooBigCheck.java,SyntaxToken firstToken = lambdaExpressionTree.firstToken();,if (lambdaExpressionTree != null ) SyntaxToken firstToken = lambdaExpressionTree.firstToken();
AnonymousClassesTooBigCheck.java,SyntaxToken lastSyntaxToken = lambdaExpressionTree.lastToken();,if (lambdaExpressionTree != null ) SyntaxToken lastSyntaxToken = lambdaExpressionTree.lastToken();
AnonymousClassesTooBigCheckCustom.java,List<Person> pl = Person.createShortList();,if (Person != null ) List<Person> pl = Person.createShortList();
SynchronizationOnGetClassCheck.java,Tree parent = expressionTree.parent();,if (expressionTree != null ) Tree parent = expressionTree.parent();
SynchronizationOnGetClassCheck.java,parent = parent.parent();,if (parent != null ) parent = parent.parent();
JParser.java,IdentifierTreeImpl i = convertSimpleName(e.getLabel());,if (convertSimpleName(e != null ) IdentifierTreeImpl i = convertSimpleName(e.getLabel());
JParser.java,IdentifierTreeImpl i = convertSimpleName(e.getLabel());,if (convertSimpleName(e != null ) IdentifierTreeImpl i = convertSimpleName(e.getLabel());
JSymbol.java,IMethodBinding declaringMethod = typeBinding.getDeclaringMethod();,if (typeBinding != null ) IMethodBinding declaringMethod = typeBinding.getDeclaringMethod();
JSymbol.java,ITypeBinding declaringClass = typeBinding.getDeclaringClass();,if (typeBinding != null ) ITypeBinding declaringClass = typeBinding.getDeclaringClass();
JSymbol.java,IMethodBinding declaringMethod = variableBinding.getDeclaringMethod();,if (variableBinding != null ) IMethodBinding declaringMethod = variableBinding.getDeclaringMethod();
JSymbol.java,ITypeBinding declaringClass = variableBinding.getDeclaringClass();,if (variableBinding != null ) ITypeBinding declaringClass = variableBinding.getDeclaringClass();
JSymbol.java,node = node.parent();,if (node != null ) node = node.parent();
JSymbol.java,ITypeBinding declaringClass = typeBinding.getDeclaringClass();,if (typeBinding != null ) ITypeBinding declaringClass = typeBinding.getDeclaringClass();
JSymbol.java,ITypeBinding declaringClass = variableBinding.getDeclaringClass();,if (variableBinding != null ) ITypeBinding declaringClass = variableBinding.getDeclaringClass();
JSymbol.java,IMethodBinding declaringMethod = variableBinding.getDeclaringMethod();,if (variableBinding != null ) IMethodBinding declaringMethod = variableBinding.getDeclaringMethod();
JSymbol.java,node = node.parent();,if (node != null ) node = node.parent();
UselessImportCheck.java,Symbol owner = symbol.owner();,if (symbol != null ) Symbol owner = symbol.owner();
JavaSquidTest.java,File baseDir = temp.getRoot().getAbsoluteFile();,if (temp != null ) File baseDir = temp.getRoot().getAbsoluteFile();
AnnotationArgumentOrderCheck.java,TypeSymbol annotationSymbol = annotationTree.symbolType().symbol();,if (annotationTree != null ) TypeSymbol annotationSymbol = annotationTree.symbolType().symbol();
AnnotationArgumentOrderCheck.java,IdentifierTree nameTree = (IdentifierTree) assignmentTree.variable();,if (assignmentTree != null ) IdentifierTree nameTree = (IdentifierTree) assignmentTree.variable();
UselessExtendsCheck.java,Set<Type> superTypes = JUtils.superTypes(classTree.symbol());,if (JUtils != null ) Set<Type> superTypes = JUtils.superTypes(classTree.symbol());
InnerStaticClassesCheck.java,Symbol.TypeSymbol symbol = tree.symbol();,if (tree != null ) Symbol.TypeSymbol symbol = tree.symbol();
ConstructorCallingOverridableCheck.java,Symbol.TypeSymbol methodEnclosingClass = symbol.enclosingClass();,if (symbol != null ) Symbol.TypeSymbol methodEnclosingClass = symbol.enclosingClass();
FileHeaderCheckTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
ArtifactIdNamingConventionCheckTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
GroupIdNamingConventionCheckTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
PostAnalysisIssueFilterTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
VisitorsBridge.java,String name = currentFile.filename();,if (currentFile != null ) String name = currentFile.filename();
ForLoopVariableTypeCheck.java,JavaType expressionType = (JavaType) expression.symbolType();,if (expression != null ) JavaType expressionType = (JavaType) expression.symbolType();
JParserSemanticTest.java,IdentifierTreeImpl keywordThis = (IdentifierTreeImpl) e.identifier();,if (e != null ) IdentifierTreeImpl keywordThis = (IdentifierTreeImpl) e.identifier();
JParser.java,keywordSuper.typeBinding = qualifier.typeBinding.getSuperclass();,if (qualifier != null ) keywordSuper.typeBinding = qualifier.typeBinding.getSuperclass();
JParser.java,keywordSuper.typeBinding = qualifier.typeBinding.getSuperclass();,if (qualifier != null ) keywordSuper.typeBinding = qualifier.typeBinding.getSuperclass();
JParserSemanticTest.java,UnqualifiedKeywordSuper keywordSuper = (UnqualifiedKeywordSuper) expression.expression();,if (expression != null ) UnqualifiedKeywordSuper keywordSuper = (UnqualifiedKeywordSuper) expression.expression();
JParserSemanticTest.java,IdentifierTreeImpl keywordSuper = (IdentifierTreeImpl) qualifiedSuper.identifier();,if (qualifiedSuper != null ) IdentifierTreeImpl keywordSuper = (IdentifierTreeImpl) qualifiedSuper.identifier();
JParserSemanticTest.java,UnqualifiedKeywordSuper keywordSuper = (UnqualifiedKeywordSuper) creationReference.expression();,if (creationReference != null ) UnqualifiedKeywordSuper keywordSuper = (UnqualifiedKeywordSuper) creationReference.expression();
JParserSemanticTest.java,IdentifierTreeImpl keywordSuper = (IdentifierTreeImpl) qualifiedSuper.identifier();,if (qualifiedSuper != null ) IdentifierTreeImpl keywordSuper = (IdentifierTreeImpl) qualifiedSuper.identifier();
UnqualifiedKeywordSuper.java,node = (JavaTree) node.parent();,if (node != null ) node = (JavaTree) node.parent();
JParserSemanticTest.java,MethodReferenceTreeImpl creationReference = (MethodReferenceTreeImpl) s.expression();,if (s != null ) MethodReferenceTreeImpl creationReference = (MethodReferenceTreeImpl) s.expression();
RedundantTypeCastCheck.java,Tree parent = skipParentheses(tree.parent());,if (skipParentheses(tree != null ) Tree parent = skipParentheses(tree.parent());
RedundantTypeCastCheck.java,method = method.parent();,if (method != null ) method = method.parent();
RedundantTypeCastCheck.java,target = variableTree.symbol().type();,if (variableTree != null ) target = variableTree.symbol().type();
RedundantTypeCastCheck.java,JavaSymbol.MethodJavaSymbol sym = (JavaSymbol.MethodJavaSymbol) mit.symbol();,if (mit != null ) JavaSymbol.MethodJavaSymbol sym = (JavaSymbol.MethodJavaSymbol) mit.symbol();
RedundantTypeCastCheck.java,target = tree.type().symbolType();,if (tree != null ) target = tree.type().symbolType();
RedundantTypeCastCheck.java,MethodJavaSymbol overriddenSymbol = childMethod.overriddenSymbol();,if (childMethod != null ) MethodJavaSymbol overriddenSymbol = childMethod.overriddenSymbol();
JParserSemanticTest.java,MemberSelectExpressionTreeImpl e = (MemberSelectExpressionTreeImpl) s.expression();,if (s != null ) MemberSelectExpressionTreeImpl e = (MemberSelectExpressionTreeImpl) s.expression();
JParserSemanticTest.java,IdentifierTreeImpl i = (IdentifierTreeImpl) e.identifier();,if (e != null ) IdentifierTreeImpl i = (IdentifierTreeImpl) e.identifier();
RedundantAbstractMethodCheck.java,JavaSymbol.MethodJavaSymbol overridee = method.overriddenSymbol();,if (method != null ) JavaSymbol.MethodJavaSymbol overridee = method.overriddenSymbol();
EnumMapCheck.java,List<TypeVariableJavaType> typeParameters = parametrizedTypeJavaType.typeParameters();,if (parametrizedTypeJavaType != null ) List<TypeVariableJavaType> typeParameters = parametrizedTypeJavaType.typeParameters();
StringConcatenationInLoopCheck.java,semanticModel = (SemanticModel) context.getSemanticModel();,if (context != null ) semanticModel = (SemanticModel) context.getSemanticModel();
StringConcatenationInLoopCheck.java,Tree loopTree = loopLevel.peek();,if (loopLevel != null ) Tree loopTree = loopLevel.peek();
SubscriptionVisitor.java,semanticModel = (SemanticModel) context.getSemanticModel();,if (context != null ) semanticModel = (SemanticModel) context.getSemanticModel();
ParameterNullnessCheck.java,List<JavaSymbol> argumentSymbols = methodSymbol.getParameters().scopeSymbols();,if (methodSymbol != null ) List<JavaSymbol> argumentSymbols = methodSymbol.getParameters().scopeSymbols();
JSymbol.java,annotations = sema.resolvePackageAnnotations(binding.getName());,if (sema != null ) annotations = sema.resolvePackageAnnotations(binding.getName());
JSymbol.java,annotations = binding.getAnnotations();,if (binding != null ) annotations = binding.getAnnotations();
NullableAnnotationUtils.java,SymbolMetadata metadata = symbol.metadata();,if (symbol != null ) SymbolMetadata metadata = symbol.metadata();
NonNullSetToNullCheck.java,List<JavaSymbol> scopeSymbols = symbol.getParameters().scopeSymbols();,if (symbol != null ) List<JavaSymbol> scopeSymbols = symbol.getParameters().scopeSymbols();
FlowComputation.java,JavaSymbol.MethodJavaSymbol methodSymbol = (JavaSymbol.MethodJavaSymbol) mit.symbol();,if (mit != null ) JavaSymbol.MethodJavaSymbol methodSymbol = (JavaSymbol.MethodJavaSymbol) mit.symbol();
JParser.java,IdentifierTreeImpl rhs = convertSimpleName(e.getName());,if (convertSimpleName(e != null ) IdentifierTreeImpl rhs = convertSimpleName(e.getName());
UnusedTypeParameterCheck.java,semanticModel = (SemanticModel) context.getSemanticModel();,if (context != null ) semanticModel = (SemanticModel) context.getSemanticModel();
SimpleClassNameCheck.java,SemanticModel semanticModel = (SemanticModel) context.getSemanticModel();,if (context != null ) SemanticModel semanticModel = (SemanticModel) context.getSemanticModel();
UselessImportCheck.java,SemanticModel semanticModel = (SemanticModel) context.getSemanticModel();,if (context != null ) SemanticModel semanticModel = (SemanticModel) context.getSemanticModel();
ClassWithOnlyStaticMethodsInstantiationCheck.java,semanticModel = (SemanticModel) context.getSemanticModel();,if (context != null ) semanticModel = (SemanticModel) context.getSemanticModel();
ClassWithOnlyStaticMethodsInstantiationCheck.java,Type enclosingClassType = semanticModel.getEnclosingClass(identifier).type();,if (semanticModel != null ) Type enclosingClassType = semanticModel.getEnclosingClass(identifier).type();
JParser.java,IdentifierTreeImpl t = convertSimpleName(e.getName());,if (convertSimpleName(e != null ) IdentifierTreeImpl t = convertSimpleName(e.getName());
ControllingPermissionsCheck.java,Symbol.TypeSymbol symbol = tree.symbolType().symbol();,if (tree != null ) Symbol.TypeSymbol symbol = tree.symbolType().symbol();
ControllingPermissionsCheck.java,Type superClass = symbol.superClass();,if (symbol != null ) Type superClass = symbol.superClass();
EnumSetCheck.java,List<TypeVariableJavaType> typeParameters = parametrizedType.typeParameters();,if (parametrizedType != null ) List<TypeVariableJavaType> typeParameters = parametrizedType.typeParameters();
EnumSetCheck.java,Type variableType = typeTree.symbolType();,if (typeTree != null ) Type variableType = typeTree.symbolType();
EnumSetCheck.java,typeParameters = parametrizedType.typeParameters();,if (parametrizedType != null ) typeParameters = parametrizedType.typeParameters();
LeastSpecificTypeCheck.java,Symbol.TypeSymbol typeSymbol = type.symbol();,if (type != null ) Symbol.TypeSymbol typeSymbol = type.symbol();
SerialVersionUidCheck.java,TypeJavaSymbol superTypeSymbol = superType.getSymbol();,if (superType != null ) TypeJavaSymbol superTypeSymbol = superType.getSymbol();
SerialVersionUidCheck.java,String fullyQualifiedName = superTypeSymbol.getFullyQualifiedName();,if (superTypeSymbol != null ) String fullyQualifiedName = superTypeSymbol.getFullyQualifiedName();
AnonymousClassShouldBeLambdaCheck.java,JavaSymbol.TypeJavaSymbol symbol = (JavaSymbol.TypeJavaSymbol) classBody.symbol();,if (classBody != null ) JavaSymbol.TypeJavaSymbol symbol = (JavaSymbol.TypeJavaSymbol) classBody.symbol();
ConstantMathCheck.java,JavaType type = (JavaType) expression.symbolType();,if (expression != null ) JavaType type = (JavaType) expression.symbolType();
JParser.java,IdentifierTree identifier = convertSimpleName(e.getName());,if (convertSimpleName(e != null ) IdentifierTree identifier = convertSimpleName(e.getName());
JParserSemanticTest.java,MethodInvocationTreeImpl e = (MethodInvocationTreeImpl) s.expression();,if (s != null ) MethodInvocationTreeImpl e = (MethodInvocationTreeImpl) s.expression();
JParserSemanticTest.java,IdentifierTreeImpl i = (IdentifierTreeImpl) e.methodSelect();,if (e != null ) IdentifierTreeImpl i = (IdentifierTreeImpl) e.methodSelect();
JParserSemanticTest.java,MemberSelectExpressionTreeImpl m = (MemberSelectExpressionTreeImpl) e.methodSelect();,if (e != null ) MemberSelectExpressionTreeImpl m = (MemberSelectExpressionTreeImpl) e.methodSelect();
JParserSemanticTest.java,IdentifierTreeImpl i = (IdentifierTreeImpl) m.identifier();,if (m != null ) IdentifierTreeImpl i = (IdentifierTreeImpl) m.identifier();
JParserSemanticTest.java,MethodInvocationTreeImpl e = (MethodInvocationTreeImpl) s.expression();,if (s != null ) MethodInvocationTreeImpl e = (MethodInvocationTreeImpl) s.expression();
JParserSemanticTest.java,IdentifierTreeImpl i = (IdentifierTreeImpl) e.methodSelect();,if (e != null ) IdentifierTreeImpl i = (IdentifierTreeImpl) e.methodSelect();
JParserSemanticTest.java,MethodInvocationTreeImpl e = (MethodInvocationTreeImpl) s.expression();,if (s != null ) MethodInvocationTreeImpl e = (MethodInvocationTreeImpl) s.expression();
JParserSemanticTest.java,IdentifierTreeImpl i = (IdentifierTreeImpl) e.methodSelect();,if (e != null ) IdentifierTreeImpl i = (IdentifierTreeImpl) e.methodSelect();
JParserSemanticTest.java,ClassTreeImpl c = (ClassTreeImpl) e.classBody();,if (e != null ) ClassTreeImpl c = (ClassTreeImpl) e.classBody();
JParser.java,memberSelect = convertSimpleName(e.getName());,if (convertSimpleName(e != null ) memberSelect = convertSimpleName(e.getName());
MethodTreeImpl.java,Symbol.MethodSymbol methodSymbol = symbol.overriddenSymbol();,if (symbol != null ) Symbol.MethodSymbol methodSymbol = symbol.overriddenSymbol();
JavaRulingTest.java,SonarClient sonarClient = orchestrator.getServer().adminWsClient();,if (orchestrator != null ) SonarClient sonarClient = orchestrator.getServer().adminWsClient();
ConstructorCallingOverridableCheck.java,semanticModel = (SemanticModel) context.getSemanticModel();,if (context != null ) semanticModel = (SemanticModel) context.getSemanticModel();
ConstructorCallingOverridableCheck.java,TypeJavaSymbol methodEnclosingClass = (TypeJavaSymbol) symbol.enclosingClass();,if (symbol != null ) TypeJavaSymbol methodEnclosingClass = (TypeJavaSymbol) symbol.enclosingClass();
SymbolMetadataResolve.java,Symbol annotationSymbol = annotationInstance.symbol();,if (annotationInstance != null ) Symbol annotationSymbol = annotationInstance.symbol();
SymbolMetadataResolve.java,Type annotationType = annotationSymbol.type();,if (annotationSymbol != null ) Type annotationType = annotationSymbol.type();
ConstantUtils.java,JavaSymbol owner = javaSymbol.owner();,if (javaSymbol != null ) JavaSymbol owner = javaSymbol.owner();
JavaSquid.java,ActionParser<Tree> parser = JavaParser.createParser();,if (JavaParser != null ) ActionParser<Tree> parser = JavaParser.createParser();
SyntaxHighlighterVisitorTest.java,File target = temp.newFile().getAbsoluteFile();,if (temp != null ) File target = temp.newFile().getAbsoluteFile();
JavaAstScannerTest.java,LexerlessGrammarBuilder b = LexerlessGrammarBuilder.create();,if (LexerlessGrammarBuilder != null ) LexerlessGrammarBuilder b = LexerlessGrammarBuilder.create();
RedundantThrowsDeclarationCheck.java,BlockTree block = methodTree.block();,if (methodTree != null ) BlockTree block = methodTree.block();
StringCallsBeyondBoundsCheck.java,int arity = invocation.arguments().size();,if (invocation != null ) int arity = invocation.arguments().size();
LombokFilter.java,SymbolMetadata metadata = classTree.symbol().metadata();,if (classTree != null ) SymbolMetadata metadata = classTree.symbol().metadata();
ArrayCopyLoopCheck.java,IdentifierTree identifier = (IdentifierTree) increment.expression();,if (increment != null ) IdentifierTree identifier = (IdentifierTree) increment.expression();
ConditionalOnNewLineCheck.java,SyntaxToken lastToken = ifStatementTree.thenStatement().lastToken();,if (ifStatementTree != null ) SyntaxToken lastToken = ifStatementTree.thenStatement().lastToken();
SerializableFieldInSerializableClassCheck.java,ExpressionTree expression = assignment.expression();,if (assignment != null ) ExpressionTree expression = assignment.expression();
JavaRulingTest.java,File pomFile = FileLocation.of(pomLocation).getFile();,if (FileLocation != null ) File pomFile = FileLocation.of(pomLocation).getFile();
HardCodedCredentialsCheck.java,passphrase = PASSED.toCharArray(); // FN,if (FN != null ) passphrase = PASSED.toCharArray(); // FN
RegexPatternsNeedlesslyCheck.java,int strLength = argValue.length();,if (argValue != null ) int strLength = argValue.length();
RegexPatternsNeedlesslyCheck.java,int strLength = argValue.length();,if (argValue != null ) int strLength = argValue.length();
CookieShouldNotContainSensitiveDataCheck.java,String methodName = methodTree.symbol().name();,if (methodTree != null ) String methodName = methodTree.symbol().name();
SecureCookieCheck.java,ExpressionTree returnedExpression = tree.expression();,if (tree != null ) ExpressionTree returnedExpression = tree.expression();
AbstractInjectionChecker.java,semanticModel = (SemanticModel) context.getSemanticModel();,if (context != null ) semanticModel = (SemanticModel) context.getSemanticModel();
AbstractInjectionChecker.java,IdentifierTree identifier = memberSelectExpressionTree.identifier();,if (memberSelectExpressionTree != null ) IdentifierTree identifier = memberSelectExpressionTree.identifier();
AbstractInjectionChecker.java,Symbol symbol = arg.symbol();,if (arg != null ) Symbol symbol = arg.symbol();
AbstractInjectionChecker.java,ExpressionTree initializer = declaration.initializer();,if (declaration != null ) ExpressionTree initializer = declaration.initializer();
AbstractInjectionChecker.java,Collection<IdentifierTree> usages = symbol.usages();,if (symbol != null ) Collection<IdentifierTree> usages = symbol.usages();
DynamicCodeCheck.java,Arguments arguments = mit.arguments();,if (mit != null ) Arguments arguments = mit.arguments();
SpringEndpointsCheck.java,List<AnnotationTree> annotations = methodTree.modifiers().annotations();,if (methodTree != null ) List<AnnotationTree> annotations = methodTree.modifiers().annotations();
SpringEndpointsCheck.java,Type annotationType = annotationTree.annotationType().symbolType();,if (annotationTree != null ) Type annotationType = annotationTree.annotationType().symbolType();
HttpRequestsHotspotCheck.java,HttpURLConnection con = (HttpURLConnection) url.openConnection(); // Noncompliant [[sc=53;ec=67]] {{Make sure that this http request is sent safely.}},if (safely != null ) HttpURLConnection con = (HttpURLConnection) url.openConnection(); // Noncompliant [[sc=53;ec=67]] {{Make sure that this http request is sent safely.}}
HttpRequestsHotspotCheck.java,JarURLConnection jarURLConnection = (JarURLConnection) (url.openConnection());,if ((url != null ) JarURLConnection jarURLConnection = (JarURLConnection) (url.openConnection());
HttpRequestsHotspotCheck.java,HttpClient client = HttpClientBuilder.create().build();,if (HttpClientBuilder != null ) HttpClient client = HttpClientBuilder.create().build();
HttpRequestsHotspotCheck.java,HttpRequestFactory requestFactory = new NetHttpTransport().createRequestFactory();,if (NetHttpTransport() != null ) HttpRequestFactory requestFactory = new NetHttpTransport().createRequestFactory();
HttpRequestsHotspotCheck_java10.java,HttpClient client = HttpClient.newHttpClient();,if (HttpClient != null ) HttpClient client = HttpClient.newHttpClient();
HttpRequestsHotspotCheck_java11.java,HttpClient client = HttpClient.newHttpClient();,if (HttpClient != null ) HttpClient client = HttpClient.newHttpClient();
HttpRequestsHotspotCheck_java9.java,HttpClient client = HttpClient.newHttpClient();,if (HttpClient != null ) HttpClient client = HttpClient.newHttpClient();
ExecCallCheck.java,Runtime r = Runtime.getRuntime();,if (Runtime != null ) Runtime r = Runtime.getRuntime();
FileHandlingCheck.java,Iterable<Path> paths = fileSystem.getRootDirectories(); // Noncompliant {{Make sure this file handling is safe here.}},if (here != null ) Iterable<Path> paths = fileSystem.getRootDirectories(); // Noncompliant {{Make sure this file handling is safe here.}}
ArrayDimensionTreeImpl.java,this.annotations = ImmutableList.of();,if (ImmutableList != null ) this.annotations = ImmutableList.of();
JavaTree.java,this.annotations = ImmutableList.of();,if (ImmutableList != null ) this.annotations = ImmutableList.of();
SecondPass.java,type.interfaces = ImmutableList.of();,if (ImmutableList != null ) type.interfaces = ImmutableList.of();
SecondPass.java,List<JavaType> argTypes = ImmutableList.of();,if (ImmutableList != null ) List<JavaType> argTypes = ImmutableList.of();
TypeAndReferenceSolver.java,List<JavaType> typeArgumentsTypes = ImmutableList.of();,if (ImmutableList != null ) List<JavaType> typeArgumentsTypes = ImmutableList.of();
TypeAndReferenceSolver.java,anonymousClassType.interfaces = ImmutableList.of();,if (ImmutableList != null ) anonymousClassType.interfaces = ImmutableList.of();
UnknownType.java,interfaces = ImmutableList.of();,if (ImmutableList != null ) interfaces = ImmutableList.of();
SonarComponentsTest.java,ImmutableList<File> javaTestClasspathList = ImmutableList.of();,if (ImmutableList != null ) ImmutableList<File> javaTestClasspathList = ImmutableList.of();
TypeAndReferenceSolverTest.java,classType.interfaces = ImmutableList.of();,if (ImmutableList != null ) classType.interfaces = ImmutableList.of();
TypeInferenceSolverTest.java,type.interfaces = ImmutableList.of();,if (ImmutableList != null ) type.interfaces = ImmutableList.of();
JavaComplexityTest.java,Set<String> debts = Sets.newHashSet();,if (Sets != null ) Set<String> debts = Sets.newHashSet();
CheckVerifier.java,List<Integer> unexpectedLines = Lists.newLinkedList();,if (Lists != null ) List<Integer> unexpectedLines = Lists.newLinkedList();
JavaCheckVerifier.java,List<File> classpath = Lists.newLinkedList();,if (Lists != null ) List<File> classpath = Lists.newLinkedList();
JavaCheckVerifierTest.java,List<String> issuesOnFile = Lists.newLinkedList();,if (Lists != null ) List<String> issuesOnFile = Lists.newLinkedList();
JavaCheckVerifierTest.java,List<String> issuesOnProject = Lists.newLinkedList();,if (Lists != null ) List<String> issuesOnProject = Lists.newLinkedList();
AbstractForLoopRule.java,List<ForLoopInitializer> list = Lists.newArrayList();,if (Lists != null ) List<ForLoopInitializer> list = Lists.newArrayList();
AnonymousClassShouldBeLambdaCheck.java,enumConstants = Lists.newArrayList();,if (Lists != null ) enumConstants = Lists.newArrayList();
CallSuperInTestCaseCheck.java,Collection<Symbol> symbols = Lists.newArrayList();,if (Lists != null ) Collection<Symbol> symbols = Lists.newArrayList();
ClassCouplingCheck.java,types = Sets.newHashSet();,if (Sets != null ) types = Sets.newHashSet();
ClassWithOnlyStaticMethodsInstantiationCheck.java,List<Symbol> filtered = Lists.newArrayList();,if (Lists != null ) List<Symbol> filtered = Lists.newArrayList();
CommentedOutCodeLineCheck.java,List<Integer> commentedOutCodeLines = Lists.newArrayList();,if (Lists != null ) List<Integer> commentedOutCodeLines = Lists.newArrayList();
ConcatenationWithStringValueOfCheck.java,Set<ExpressionTree> valueOfTrees = Sets.newHashSet();,if (Sets != null ) Set<ExpressionTree> valueOfTrees = Sets.newHashSet();
ForLoopCounterChangedCheck.java,Set<String> pendingLoopCounters = Sets.newHashSet();,if (Sets != null ) Set<String> pendingLoopCounters = Sets.newHashSet();
HiddenFieldCheck.java,variables = Lists.newArrayList();,if (Lists != null ) variables = Lists.newArrayList();
MembersDifferOnlyByCapitalizationCheck.java,List<Symbol> results = Lists.newLinkedList();,if (Lists != null ) List<Symbol> results = Lists.newLinkedList();
MembersDifferOnlyByCapitalizationCheck.java,List<Symbol> results = Lists.newLinkedList();,if (Lists != null ) List<Symbol> results = Lists.newLinkedList();
PackageInfoCheck.java,Set<File> directoriesWithoutPackageFile = Sets.newHashSet();,if (Sets != null ) Set<File> directoriesWithoutPackageFile = Sets.newHashSet();
SelectorMethodArgumentCheck.java,List<Symbol> booleanParameters = Lists.newLinkedList();,if (Lists != null ) List<Symbol> booleanParameters = Lists.newLinkedList();
SuppressWarningsCheck.java,allowedWarnings = Lists.newArrayList();,if (Lists != null ) allowedWarnings = Lists.newArrayList();
SuppressWarningsCheck.java,List<String> result = Lists.newArrayList();,if (Lists != null ) List<String> result = Lists.newArrayList();
TrailingCommentCheck.java,visitedTokens = Sets.newHashSet();,if (Sets != null ) visitedTokens = Sets.newHashSet();
FieldNameMatchingTypeNameCheck.java,fields = Lists.newArrayList();,if (Lists != null ) fields = Lists.newArrayList();
SerialVersionUidCheck.java,List<String> missingModifiers = Lists.newArrayList();,if (Lists != null ) List<String> missingModifiers = Lists.newArrayList();
UnusedMethodParameterCheck.java,List<IdentifierTree> unused = Lists.newArrayList();,if (Lists != null ) List<IdentifierTree> unused = Lists.newArrayList();
SuppressWarningFilter.java,List<String> rules = Lists.newArrayList();,if (Lists != null ) List<String> rules = Lists.newArrayList();
SuppressWarningFilter.java,List<String> args = Lists.newArrayList();,if (Lists != null ) List<String> args = Lists.newArrayList();
CheckListTest.java,Set<String> keys = Sets.newHashSet();,if (Sets != null ) Set<String> keys = Sets.newHashSet();
DefaultJavaResourceLocator.java,resourcesByClass = Maps.newHashMap();,if (Maps != null ) resourcesByClass = Maps.newHashMap();
JavaSquid.java,List<File> classpath = Lists.newArrayList();,if (Lists != null ) List<File> classpath = Lists.newArrayList();
JavaSquid.java,List<File> testClasspath = Lists.newArrayList();,if (Lists != null ) List<File> testClasspath = Lists.newArrayList();
SonarComponents.java,List<JavaCheck> visitors = Lists.newArrayList();,if (Lists != null ) List<JavaCheck> visitors = Lists.newArrayList();
JavaNodeBuilder.java,List<SyntaxTrivia> result = Lists.newArrayList();,if (Lists != null ) List<SyntaxTrivia> result = Lists.newArrayList();
ListTreeImpl.java,this.separators = Lists.newArrayList();,if (Lists != null ) this.separators = Lists.newArrayList();
TreeFactory.java,List<JavaTree> members = Lists.newLinkedList();,if (Lists != null ) List<JavaTree> members = Lists.newLinkedList();
TreeFactory.java,List<InternalSyntaxToken> children = Lists.newArrayList();,if (Lists != null ) List<InternalSyntaxToken> children = Lists.newArrayList();
ClassLoaderBuilder.java,List<File> files = Lists.newArrayList();,if (Lists != null ) List<File> files = Lists.newArrayList();
MethodMatcher.java,parameterTypes = Lists.newArrayList();,if (Lists != null ) parameterTypes = Lists.newArrayList();
AnnotationInstanceResolve.java,this.values = Lists.newArrayList();,if (Lists != null ) this.values = Lists.newArrayList();
BytecodeVisitor.java,List<JavaType> typeArguments = Lists.newArrayList();,if (Lists != null ) List<JavaType> typeArguments = Lists.newArrayList();
BytecodeVisitor.java,typeArguments = Lists.newArrayList();,if (Lists != null ) typeArguments = Lists.newArrayList();
BytecodeVisitor.java,List<JavaSymbol> lookup = Lists.newArrayList();,if (Lists != null ) List<JavaSymbol> lookup = Lists.newArrayList();
JavaSymbol.java,this.typeVariableTypes = Lists.newArrayList();,if (Lists != null ) this.typeVariableTypes = Lists.newArrayList();
JavaSymbol.java,this.typeVariableTypes = Lists.newArrayList();,if (Lists != null ) this.typeVariableTypes = Lists.newArrayList();
JavaSymbol.java,this.typeVariableTypes = Lists.newArrayList();,if (Lists != null ) this.typeVariableTypes = Lists.newArrayList();
LabelsVisitor.java,this.labelTrees = Maps.newHashMap();,if (Maps != null ) this.labelTrees = Maps.newHashMap();
Scope.java,List<JavaSymbol> symbolsList = Lists.newArrayList();,if (Lists != null ) List<JavaSymbol> symbolsList = Lists.newArrayList();
Scope.java,List<JavaSymbol> symbolsList = Lists.newArrayList();,if (Lists != null ) List<JavaSymbol> symbolsList = Lists.newArrayList();
SecondPass.java,List<JavaType> bounds = Lists.newArrayList();,if (Lists != null ) List<JavaType> bounds = Lists.newArrayList();
SecondPass.java,Set<ClassJavaType> types = Sets.newHashSet();,if (Sets != null ) Set<ClassJavaType> types = Sets.newHashSet();
SecondPass.java,List<JavaType> argTypes = Lists.newArrayList();,if (Lists != null ) List<JavaType> argTypes = Lists.newArrayList();
SymbolMetadataResolve.java,annotations = Lists.newArrayList();,if (Lists != null ) annotations = Lists.newArrayList();
ProgramState.java,List<SymbolicValueSymbol> result = Lists.newArrayList();,if (Lists != null ) List<SymbolicValueSymbol> result = Lists.newArrayList();
ListTreeImplTest.java,List<SyntaxToken> separators = Lists.newArrayList();,if (Lists != null ) List<SyntaxToken> separators = Lists.newArrayList();
BytecodeCompleterTest.java,List<String> interfacesName = Lists.newArrayList();,if (Lists != null ) List<String> interfacesName = Lists.newArrayList();
JavaTypeTest.java,classType.interfaces = Lists.newArrayList();,if (Lists != null ) classType.interfaces = Lists.newArrayList();
TypesTest.java,classType.interfaces = Lists.newArrayList();,if (Lists != null ) classType.interfaces = Lists.newArrayList();
TypesTest.java,subClassType.interfaces = Lists.newArrayList();,if (Lists != null ) subClassType.interfaces = Lists.newArrayList();
UnitTestAnalyzer.java,classFilesCache = Maps.newHashMap();,if (Maps != null ) classFilesCache = Maps.newHashMap();
UnitTestAnalyzer.java,Collection<File> result = Lists.newArrayList();,if (Lists != null ) Collection<File> result = Lists.newArrayList();
UnitTestClassReport.java,results = Lists.newArrayList();,if (Lists != null ) results = Lists.newArrayList();
UnitTestIndex.java,this.indexByClassname = Maps.newHashMap();,if (Maps != null ) this.indexByClassname = Maps.newHashMap();
CaseInsensitiveComparisonCheck.java,String foo = foo.toUpperCase();                             // Compliant,if (Compliant != null ) String foo = foo.toUpperCase();                             // Compliant
OptionalGetBeforeIsPresentCheck.java,Optional<Object> op = Optional.empty();,if (Optional != null ) Optional<Object> op = Optional.empty();
OptionalGetBeforeIsPresentCheck.java,Optional<Object> op = Optional.empty();,if (Optional != null ) Optional<Object> op = Optional.empty();
MethodTreeImpl.java,ArrayTypeTree arrayTypeTree = (ArrayTypeTree) variableTree.type();,if (variableTree != null ) ArrayTypeTree arrayTypeTree = (ArrayTypeTree) variableTree.type();
TransactionalMethodVisibilityCheck.java,isPublic = method.symbol().isPublic();,if (method != null ) isPublic = method.symbol().isPublic();
JaCoCoSensor.java,reportMerged = reportPaths.iterator().next();,if (reportPaths != null ) reportMerged = reportPaths.iterator().next();
Resolve.java,List<JavaType> erasedTypes = new ArrayList<>(types.size());,if (ArrayList<>(types != null ) List<JavaType> erasedTypes = new ArrayList<>(types.size());
MismatchPackageDirectoryCheck.java,File javaFile = context.getFile();,if (context != null ) File javaFile = context.getFile();
UselessPackageInfoCheck.java,File file = context.getFile();,if (context != null ) File file = context.getFile();
PostAnalysisIssueFilter.java,String componentKey = component.key();,if (component != null ) String componentKey = component.key();
DefaultJavaResourceLocator.java,sourceFileByClass = Maps.newHashMap();,if (Maps != null ) sourceFileByClass = Maps.newHashMap();
JavaFilesCache.java,currentFile = context.getFile();,if (context != null ) currentFile = context.getFile();
DefaultJavaResourceLocatorTest.java,DefaultFileSystem fs = sensorContext.fileSystem();,if (sensorContext != null ) DefaultFileSystem fs = sensorContext.fileSystem();
JavaSquidTest.java,FileSystem fs = context.fileSystem();,if (context != null ) FileSystem fs = context.fileSystem();
JavaSquidTest.java,FileSystem fs = context.fileSystem();,if (context != null ) FileSystem fs = context.fileSystem();
JavaSquidTest.java,FileSystem fs = context.fileSystem();,if (context != null ) FileSystem fs = context.fileSystem();
SonarComponentsTest.java,FileSystem fileSystem = context.fileSystem();,if (context != null ) FileSystem fileSystem = context.fileSystem();
CheckVerifier.java,String absolutePath = analyzerMessage.getFile().getPath();,if (analyzerMessage != null ) String absolutePath = analyzerMessage.getFile().getPath();
PackageInfoCheck.java,File parentFile = context.getFile().getParentFile();,if (context != null ) File parentFile = context.getFile().getParentFile();
SonarComponents.java,InputComponent inputComponent = inputFromIOFileOrDirectory(analyzerMessage.getFile());,if (inputFromIOFileOrDirectory(analyzerMessage != null ) InputComponent inputComponent = inputFromIOFileOrDirectory(analyzerMessage.getFile());
FileLinesVisitor.java,File currentFile = context.getFile();,if (context != null ) File currentFile = context.getFile();
SyntaxHighlighterVisitor.java,File file = context.getFile();,if (context != null ) File file = context.getFile();
VisitorsBridge.java,String name = currentFile.getName();,if (currentFile != null ) String name = currentFile.getName();
CommonsCollectionsTest.java,DefaultFileSystem fs = context.fileSystem();,if (context != null ) DefaultFileSystem fs = context.fileSystem();
CommonsCollectionsTest.java,String key = measure.metric().key();,if (measure != null ) String key = measure.metric().key();
CommonsCollectionsTest.java,"value = Double.parseDouble("""" + measure.value());","if (measure != null ) value = Double.parseDouble("""" + measure.value());"
JavaIssueTest.java,DefaultInputFile file = tifb.build();,if (tifb != null ) DefaultInputFile file = tifb.build();
JavaIssueTest.java,DefaultInputFile file = tifb.build();,if (tifb != null ) DefaultInputFile file = tifb.build();
JavaSquidTest.java,File file = temp.newFile().getAbsoluteFile();,if (temp != null ) File file = temp.newFile().getAbsoluteFile();
MeasurerTest.java,fs = context.fileSystem();,if (context != null ) fs = context.fileSystem();
SonarComponentsTest.java,DefaultFileSystem fileSystem = context.fileSystem();,if (context != null ) DefaultFileSystem fileSystem = context.fileSystem();
StrutsTest.java,DefaultFileSystem fs = context.fileSystem();,if (context != null ) DefaultFileSystem fs = context.fileSystem();
StrutsTest.java,String key = measure.metric().key();,if (measure != null ) String key = measure.metric().key();
StrutsTest.java,"value = Double.parseDouble("""" + measure.value());","if (measure != null ) value = Double.parseDouble("""" + measure.value());"
JavaAstScannerTest.java,fs = context.fileSystem();,if (context != null ) fs = context.fileSystem();
SonarSymbolTableVisitorTest.java,fs = context.fileSystem();,if (context != null ) fs = context.fileSystem();
SonarSymbolTableVisitorTest.java,File file = temp.newFile().getAbsoluteFile();,if (temp != null ) File file = temp.newFile().getAbsoluteFile();
SyntaxHighlighterVisitorTest.java,fs = context.fileSystem();,if (context != null ) fs = context.fileSystem();
SyntaxHighlighterVisitorTest.java,File file = temp.newFile().getAbsoluteFile();,if (temp != null ) File file = temp.newFile().getAbsoluteFile();
SonarComponents.java,File file = analyzerMessage.getFile();,if (analyzerMessage != null ) File file = analyzerMessage.getFile();
CFG.java,hasDefaultCase = containsDefaultCase(caseGroupTree.labels());,if (containsDefaultCase(caseGroupTree != null ) hasDefaultCase = containsDefaultCase(caseGroupTree.labels());
CFG.java,targetBlock = labelsBreakTarget.get(label.name());,if (labelsBreakTarget != null ) targetBlock = labelsBreakTarget.get(label.name());
MissingBeanValidationCheck.java,Type type = variable.symbol().type();,if (variable != null ) Type type = variable.symbol().type();
MissingBeanValidationCheck.java,ParameterizedTypeTree parameterizedType = (ParameterizedTypeTree) variable.type();,if (variable != null ) ParameterizedTypeTree parameterizedType = (ParameterizedTypeTree) variable.type();
Measurer.java,int methodComplexity = context.getComplexityNodes(methodTree).size();,if (context != null ) int methodComplexity = context.getComplexityNodes(methodTree).size();
TreeFactory.java,identifier = new IdentifierTreeImpl(identifierToken.get());,if (IdentifierTreeImpl(identifierToken != null ) identifier = new IdentifierTreeImpl(identifierToken.get());
TypeAndReferenceSolver.java,ExpressionTree labelExpression = tree.expression();,if (tree != null ) ExpressionTree labelExpression = tree.expression();
Struts139Test.java,String value = coverage.getValue();,if (coverage != null ) String value = coverage.getValue();
CatchUsesExceptionWithContextCheck.java,exceptionIdentifiers = Lists.newArrayList();,if (Lists != null ) exceptionIdentifiers = Lists.newArrayList();
CatchUsesExceptionWithContextCheck.java,Collection<IdentifierTree> usages = validUsagesStack.pop();,if (validUsagesStack != null ) Collection<IdentifierTree> usages = validUsagesStack.pop();
AssertionsCompletenessCheck.java,ExpressionTree expressionTree = mit.methodSelect();,if (mit != null ) ExpressionTree expressionTree = mit.methodSelect();
AssertionsInTestsCheck.java,SymbolMetadata symbolMetadata = methodTree.symbol().metadata();,if (methodTree != null ) SymbolMetadata symbolMetadata = methodTree.symbol().metadata();
BadTestMethodNameCheck.java,SymbolMetadata metadata = methodTree.symbol().metadata();,if (methodTree != null ) SymbolMetadata metadata = methodTree.symbol().metadata();
AssertionsInTestsCheck.java,Boolean containsAssertion = methodContainsAssertion.pop();,if (methodContainsAssertion != null ) Boolean containsAssertion = methodContainsAssertion.pop();
AssertionsInTestsCheck.java,Tree declaration = key.declaration();,if (key != null ) Tree declaration = key.declaration();
IndentationCheck_custom.java,s = keys.nextElement();         // Noncompliant {{Make this line start at column 17.}},if (17 != null ) s = keys.nextElement();         // Noncompliant {{Make this line start at column 17.}}
WeakSSLContextCheck.java,Arguments arguments = mit.arguments();,if (mit != null ) Arguments arguments = mit.arguments();
AbstractXPathBasedCheck.java,int numberResults = nodeList.getLength();,if (nodeList != null ) int numberResults = nodeList.getLength();
AbstractXPathBasedCheck.java,NamedNodeMap attributes = node.getAttributes();,if (node != null ) NamedNodeMap attributes = node.getAttributes();
SecurityConstraintsInWebXmlCheck.java,"NodeList nodeList = evaluate(securityConstraintExpression, file.getNamespaceUnawareDocument());","if (file != null ) NodeList nodeList = evaluate(securityConstraintExpression, file.getNamespaceUnawareDocument());"
SecurityConstraintsInWebXmlCheck.java,List<Integer> secondaryLocationLines = Collections.emptyList();,if (Collections != null ) List<Integer> secondaryLocationLines = Collections.emptyList();
CompareObjectWithEqualsCheck.java,ExpressionTree leftExpression = tree.leftOperand();,if (tree != null ) ExpressionTree leftExpression = tree.leftOperand();
CompareObjectWithEqualsCheck.java,ExpressionTree rightExpression = tree.rightOperand();,if (tree != null ) ExpressionTree rightExpression = tree.rightOperand();
CompareObjectWithEqualsCheck.java,Type leftOpType = leftExpression.symbolType();,if (leftExpression != null ) Type leftOpType = leftExpression.symbolType();
CompareObjectWithEqualsCheck.java,Type rightOpType = rightExpression.symbolType();,if (rightExpression != null ) Type rightOpType = rightExpression.symbolType();
CompareObjectWithEqualsCheck.java,Type leftOpType = tree.leftOperand().symbolType();,if (tree != null ) Type leftOpType = tree.leftOperand().symbolType();
CompareObjectWithEqualsCheck.java,Type rightOpType = tree.rightOperand().symbolType();,if (tree != null ) Type rightOpType = tree.rightOperand().symbolType();
CastArithmeticOperandCheck.java,Symbol symbol = mit.symbol();,if (mit != null ) Symbol symbol = mit.symbol();
UCFGJavaVisitor.java,this.javaFileKey = context.getFileKey();,if (context != null ) this.javaFileKey = context.getFileKey();
UCFGJavaVisitor.java,Symbol.MethodSymbol methodSymbol = tree.symbol();,if (tree != null ) Symbol.MethodSymbol methodSymbol = tree.symbol();
UCFGJavaVisitor.java,List<Type> types = new ArrayList<>(methodSymbol.parameterTypes());,if (ArrayList<>(methodSymbol != null ) List<Type> types = new ArrayList<>(methodSymbol.parameterTypes());
UCFGJavaVisitor.java,ControlFlowGraph cfg = tree.cfg();,if (tree != null ) ControlFlowGraph cfg = tree.cfg();
UCFGJavaVisitor.java,String signature = methodTree.symbol().signature();,if (methodTree != null ) String signature = methodTree.symbol().signature();
UCFGJavaVisitor.java,"LocationInFile parametersLocation = location(methodTree.openParenToken(), methodTree.closeParenToken());","if (methodTree != null ) LocationInFile parametersLocation = location(methodTree.openParenToken(), methodTree.closeParenToken());"
UCFGJavaVisitor.java,List<AnnotationTree> methodAnnotations = methodTree.modifiers().annotations();,if (methodTree != null ) List<AnnotationTree> methodAnnotations = methodTree.modifiers().annotations();
UCFGJavaVisitor.java,Expression.Variable var = variableWithId(idGenerator.newId());,if (variableWithId(idGenerator != null ) Expression.Variable var = variableWithId(idGenerator.newId());
UCFGJavaVisitor.java,Expression.Constant fullyQualifiedName = constant(annotation.symbolType().fullyQualifiedName());,if (constant(annotation != null ) Expression.Constant fullyQualifiedName = constant(annotation.symbolType().fullyQualifiedName());
UCFGJavaVisitor.java,Tree terminator = javaBlock.terminator();,if (javaBlock != null ) Tree terminator = javaBlock.terminator();
UCFGJavaVisitor.java,String lhs = idGenerator.lookupIdFor(variableTree.simpleName());,if (idGenerator != null ) String lhs = idGenerator.lookupIdFor(variableTree.simpleName());
UCFGJavaVisitor.java,Expression source = idGenerator.lookupExpressionFor(variableTree.initializer());,if (idGenerator != null ) Expression source = idGenerator.lookupExpressionFor(variableTree.initializer());
UCFGJavaVisitor.java,Expression.Variable getValue = variableWithId(idGenerator.newId());,if (variableWithId(idGenerator != null ) Expression.Variable getValue = variableWithId(idGenerator.newId());
UCFGJavaVisitor.java,Expression array = idGenerator.lookupExpressionFor(arrayAccessExpressionTree.expression());,if (idGenerator != null ) Expression array = idGenerator.lookupExpressionFor(arrayAccessExpressionTree.expression());
UCFGJavaVisitor.java,Symbol constructorSymbol = tree.constructorSymbol();,if (tree != null ) Symbol constructorSymbol = tree.constructorSymbol();
UCFGJavaVisitor.java,Expression leftOperand = idGenerator.lookupExpressionFor(tree.leftOperand());,if (idGenerator != null ) Expression leftOperand = idGenerator.lookupExpressionFor(tree.leftOperand());
UCFGJavaVisitor.java,Expression rightOperand = idGenerator.lookupExpressionFor(tree.rightOperand());,if (idGenerator != null ) Expression rightOperand = idGenerator.lookupExpressionFor(tree.rightOperand());
UCFGJavaVisitor.java,ExpressionTree lhsTree = tree.variable();,if (tree != null ) ExpressionTree lhsTree = tree.variable();
UCFGJavaVisitor.java,ExpressionTree rhsTree = tree.expression();,if (tree != null ) ExpressionTree rhsTree = tree.expression();
UCFGJavaVisitor.java,ExpressionTree lhsTree = tree.variable();,if (tree != null ) ExpressionTree lhsTree = tree.variable();
UCFGJavaVisitor.java,ExpressionTree rhsTree = tree.expression();,if (tree != null ) ExpressionTree rhsTree = tree.expression();
UCFGJavaVisitor.java,Expression.Variable concatAux = variableWithId(idGenerator.newId());,if (variableWithId(idGenerator != null ) Expression.Variable concatAux = variableWithId(idGenerator.newId());
UCFGJavaVisitor.java,Expression.Variable concatAux = variableWithId(idGenerator.newId());,if (variableWithId(idGenerator != null ) Expression.Variable concatAux = variableWithId(idGenerator.newId());
UCFGJavaVisitor.java,Expression.Variable aux = variableWithId(idGenerator.newId());,if (variableWithId(idGenerator != null ) Expression.Variable aux = variableWithId(idGenerator.newId());
UCFGJavaVisitor.java,ExpressionTree lhsTree = memberSelectTree.expression();,if (memberSelectTree != null ) ExpressionTree lhsTree = memberSelectTree.expression();
UCFGJavaVisitor.java,Symbol rhsTreeSymbol = memberSelectTree.identifier().symbol();,if (memberSelectTree != null ) Symbol rhsTreeSymbol = memberSelectTree.identifier().symbol();
UCFGJavaVisitor.java,Expression.Variable rightSide = variableWithId(rhsTreeSymbol.name());,if (variableWithId(rhsTreeSymbol != null ) Expression.Variable rightSide = variableWithId(rhsTreeSymbol.name());
UCFGJavaVisitor.java,Symbol identifierTreeSymbol = identifierTree.symbol();,if (identifierTree != null ) Symbol identifierTreeSymbol = identifierTree.symbol();
UCFGJavaVisitor.java,Expression.Variable rightSide = variableWithId(identifierTree.name());,if (variableWithId(identifierTree != null ) Expression.Variable rightSide = variableWithId(identifierTree.name());
UCFGJavaVisitor.java,Expression.Variable aux = variableWithId(idGenerator.newId());,if (variableWithId(idGenerator != null ) Expression.Variable aux = variableWithId(idGenerator.newId());
UCFGJavaVisitor.java,List<Tree> elements = javaBlock.elements();,if (javaBlock != null ) List<Tree> elements = javaBlock.elements();
UCFGJavaVisitor.java,firstTree = javaBlock.terminator();,if (javaBlock != null ) firstTree = javaBlock.terminator();
UCFGJavaVisitorTest.java,UCFG actualUCFG = actualUCFGs.get(expectedUCFG.methodId());,if (actualUCFGs != null ) UCFG actualUCFG = actualUCFGs.get(expectedUCFG.methodId());
UCFGJavaVisitorTest.java,UCFGJavaVisitor UCFGJavaVisitor = new UCFGJavaVisitor(tmp.getRoot());,if (UCFGJavaVisitor(tmp != null ) UCFGJavaVisitor UCFGJavaVisitor = new UCFGJavaVisitor(tmp.getRoot());
UCFGJavaVisitorTest.java,UCFG ucfg = UCFGtoProtobuf.fromProtobufFile(path.toFile());,if (UCFGtoProtobuf != null ) UCFG ucfg = UCFGtoProtobuf.fromProtobufFile(path.toFile());
UCFGJavaVisitorTest.java,UCFGJavaVisitor UCFGJavaVisitor = new UCFGJavaVisitor(tmp.getRoot());,if (UCFGJavaVisitor(tmp != null ) UCFGJavaVisitor UCFGJavaVisitor = new UCFGJavaVisitor(tmp.getRoot());
UCFGJavaVisitorTest.java,UCFGJavaVisitor = new UCFGJavaVisitor(tmp.getRoot());,if (UCFGJavaVisitor(tmp != null ) UCFGJavaVisitor = new UCFGJavaVisitor(tmp.getRoot());
XmlCheckVerifier.java,XMLInputFactory factory = XMLInputFactory.newInstance();,if (XMLInputFactory != null ) XMLInputFactory factory = XMLInputFactory.newInstance();
XmlCheckVerifier.java,int line = reader.getLocation().getLineNumber();,if (reader != null ) int line = reader.getLocation().getLineNumber();
XmlCheckVerifier.java,String text = reader.getText().trim();,if (reader != null ) String text = reader.getText().trim();
PomCheckVerifierTest.java,MavenProject mavenProject = context.getMavenProject();,if (context != null ) MavenProject mavenProject = context.getMavenProject();
AbstractNamingConvention.java,NamedLocatedAttribute namedAttribute = getTargetedLocatedAttribute(context.getMavenProject());,if (getTargetedLocatedAttribute(context != null ) NamedLocatedAttribute namedAttribute = getTargetedLocatedAttribute(context.getMavenProject());
MavenDependencyCollector.java,Dependencies dependencies = depMgmt.getDependencies();,if (depMgmt != null ) Dependencies dependencies = depMgmt.getDependencies();
XmlAnalyzer.java,this.xmlChecks = xmlChecksBuilder.build();,if (xmlChecksBuilder != null ) this.xmlChecks = xmlChecksBuilder.build();
XmlAnalyzer.java,this.pomChecks = pomChecksBuilder.build();,if (pomChecksBuilder != null ) this.pomChecks = pomChecksBuilder.build();
XmlAnalyzer.java,this.xPath = XPathFactory.newInstance().newXPath();,if (XPathFactory != null ) this.xPath = XPathFactory.newInstance().newXPath();
XmlAnalyzer.java,boolean hasChecks = !xmlChecks.isEmpty() || !pomChecks.isEmpty();,if (!pomChecks != null ) boolean hasChecks = !xmlChecks.isEmpty() || !pomChecks.isEmpty();
XmlCheckContextImpl.java,this.length = nodeList.getLength();,if (nodeList != null ) this.length = nodeList.getLength();
XmlCheckUtils.java,NamedNodeMap attributes = node.getAttributes();,if (node != null ) NamedNodeMap attributes = node.getAttributes();
XmlParser.java,DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();,if (DocumentBuilderFactory != null ) DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
XmlParser.java,Document document = documentBuilderFactory.newDocumentBuilder().newDocument();,if (documentBuilderFactory != null ) Document document = documentBuilderFactory.newDocumentBuilder().newDocument();
XmlParser.java,SAXParserFactory factory = SAXParserFactory.newInstance();,if (SAXParserFactory != null ) SAXParserFactory factory = SAXParserFactory.newInstance();
XmlParser.java,Element endingElement = elementStack.pop();,if (elementStack != null ) Element endingElement = elementStack.pop();
XmlParser.java,Element parentElement = elementStack.peek();,if (elementStack != null ) Element parentElement = elementStack.peek();
XmlParser.java,Element element = elementStack.peek();,if (elementStack != null ) Element element = elementStack.peek();
XmlParser.java,Node textNode = document.createTextNode(textBuffer.toString());,if (document != null ) Node textNode = document.createTextNode(textBuffer.toString());
PomCheckContextImpl.java,XmlLocation startLocation = location.tree.startLocation();,if (location != null ) XmlLocation startLocation = location.tree.startLocation();
PomCheckContextImpl.java,XmlLocation endLocation = location.tree.endLocation();,if (location != null ) XmlLocation endLocation = location.tree.endLocation();
PomCheckContextImpl.java,"ts = textSpanForLine(file, startLocation.line());","if (startLocation != null ) ts = textSpanForLine(file, startLocation.line());"
PomParser.java,XMLInputFactory factory = XMLInputFactory.newInstance();,if (XMLInputFactory != null ) XMLInputFactory factory = XMLInputFactory.newInstance();
PomParser.java,Unmarshaller unmarshaller = context.createUnmarshaller();,if (context != null ) Unmarshaller unmarshaller = context.createUnmarshaller();
PomParser.java,XmlLocation beforeLocation = XmlLocation.getLocation(reader.getLocation());,if (XmlLocation != null ) XmlLocation beforeLocation = XmlLocation.getLocation(reader.getLocation());
PomParser.java,XmlLocation afterLocation = XmlLocation.getLocation(reader.getLocation());,if (XmlLocation != null ) XmlLocation afterLocation = XmlLocation.getLocation(reader.getLocation());
XPathXmlCheckTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
XmlAnalyzerTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
XmlCheckContextImplTest.java,xPath = XPathFactory.newInstance().newXPath();,if (XPathFactory != null ) xPath = XPathFactory.newInstance().newXPath();
XmlCheckContextImplTest.java,Iterator<Node> iterator = items.iterator();,if (items != null ) Iterator<Node> iterator = items.iterator();
XmlCheckContextImplTest.java,Node childNode = node.getFirstChild();,if (node != null ) Node childNode = node.getFirstChild();
XmlCheckContextImplTest.java,Node childNode = node.getFirstChild();,if (node != null ) Node childNode = node.getFirstChild();
XmlCheckUtilsTest.java,Constructor constructor = XmlCheckUtils.class.getDeclaredConstructor();,if (XmlCheckUtils != null ) Constructor constructor = XmlCheckUtils.class.getDeclaredConstructor();
XmlParserTest.java,String actual = namedItem.getNodeValue();,if (namedItem != null ) String actual = namedItem.getNodeValue();
PomCheckContextImplTest.java,XPath xPath = XPathFactory.newInstance().newXPath();,if (XPathFactory != null ) XPath xPath = XPathFactory.newInstance().newXPath();
PomCheckContextImplTest.java,"reportedMessage = ""analyzerMessage:"" + analyzerMessage.getMessage();","if (analyzerMessage != null ) reportedMessage = ""analyzerMessage:"" + analyzerMessage.getMessage();"
PomCheckContextImplTest.java,TextSpan location = secondary.primaryLocation();,if (secondary != null ) TextSpan location = secondary.primaryLocation();
PomParserTest.java,List<Element> values = config.getElements();,if (config != null ) List<Element> values = config.getElements();
PomParserTest.java,Properties properties = project.getProperties();,if (project != null ) Properties properties = project.getProperties();
PomParserTest.java,List<Element> values = properties.getElements();,if (properties != null ) List<Element> values = properties.getElements();
PomParserTest.java,DependencyManagement dependencyManagement = project.getDependencyManagement();,if (project != null ) DependencyManagement dependencyManagement = project.getDependencyManagement();
PomParserTest.java,List<Element> values = configuration.getElements();,if (configuration != null ) List<Element> values = configuration.getElements();
PomParserTest.java,String attributeValue = attribute.getValue();,if (attribute != null ) String attributeValue = attribute.getValue();
XmlLocation.java,int length = text.length();,if (text != null ) int length = text.length();
NewXmlFileSensor.java,FileSystem fs = context.fileSystem();,if (context != null ) FileSystem fs = context.fileSystem();
ActionNumberCheck.java,int cost = secondaries.size();,if (secondaries != null ) int cost = secondaries.size();
StaxParser.java,XMLInputFactory xmlFactory = XMLInputFactory.newInstance();,if (XMLInputFactory != null ) XMLInputFactory xmlFactory = XMLInputFactory.newInstance();
CheckstyleXmlReportReader.java,XMLInputFactory factory = XMLInputFactory.newInstance();,if (XMLInputFactory != null ) XMLInputFactory factory = XMLInputFactory.newInstance();
PmdXmlReportReader.java,XMLInputFactory factory = XMLInputFactory.newInstance();,if (XMLInputFactory != null ) XMLInputFactory factory = XMLInputFactory.newInstance();
SpotBugsXmlReportReader.java,XMLInputFactory factory = XMLInputFactory.newInstance();,if (XMLInputFactory != null ) XMLInputFactory factory = XMLInputFactory.newInstance();
DependencyWithSystemScopeCheck.java,XmlTextRange systemPathLocation = XmlFile.nodeLocation(systemPathOptional.get());,if (XmlFile != null ) XmlTextRange systemPathLocation = XmlFile.nodeLocation(systemPathOptional.get());
PomElementOrderCheck.java,MavenProject project = context.getMavenProject();,if (context != null ) MavenProject project = context.getMavenProject();
XmlFileSensorTest.java,DefaultFileSystem fs = context.fileSystem();,if (context != null ) DefaultFileSystem fs = context.fileSystem();
XmlFileSensorTest.java,DefaultFileSystem fs = context.fileSystem();,if (context != null ) DefaultFileSystem fs = context.fileSystem();
XmlFileSensorTest.java,DefaultFileSystem fs = context.fileSystem();,if (context != null ) DefaultFileSystem fs = context.fileSystem();
RangedVersionMatcher.java,ArtifactVersion dependencyVersion = getVersionSilently(attribute.getValue());,if (getVersionSilently(attribute != null ) ArtifactVersion dependencyVersion = getVersionSilently(attribute.getValue());
StringMatcherTest.java,LocatedAttributeMatcher matcher = LocatedAttributeMatcher.any();,if (LocatedAttributeMatcher != null ) LocatedAttributeMatcher matcher = LocatedAttributeMatcher.any();
DependencyWithSystemScopeCheck.java,LocatedAttribute scope = dependency.getScope();,if (dependency != null ) LocatedAttribute scope = dependency.getScope();
DependencyWithSystemScopeCheck.java,LocatedAttribute systemPath = dependency.getSystemPath();,if (dependency != null ) LocatedAttribute systemPath = dependency.getSystemPath();
DefaultInterceptorsLocationCheck.java,"NodeList nodeList = evaluate(defaultInterceptorClassesExpression, file.getNamespaceUnawareDocument());","if (file != null ) NodeList nodeList = evaluate(defaultInterceptorClassesExpression, file.getNamespaceUnawareDocument());"
DeprecatedPomPropertiesCheck.java,"NodeList textNodes = evaluate(textsExpression, file.getDocument());","if (file != null ) NodeList textNodes = evaluate(textsExpression, file.getDocument());"
DeprecatedPomPropertiesCheck.java,NodeList childNodes = textNode.getChildNodes();,if (textNode != null ) NodeList childNodes = textNode.getChildNodes();
DeprecatedPomPropertiesCheck.java,String text = childNode.getNodeValue();,if (childNode != null ) String text = childNode.getNodeValue();
DefaultMessageListenerContainerCheck.java,"NodeList beanNodes = evaluate(defaultMessageListenerContainerBeanExpression, xmlFile.getNamespaceUnawareDocument());","if (xmlFile != null ) NodeList beanNodes = evaluate(defaultMessageListenerContainerBeanExpression, xmlFile.getNamespaceUnawareDocument());"
DeprecatedPomPropertiesCheck.java,String text = textNode.getFirstChild().getNodeValue();,if (textNode != null ) String text = textNode.getFirstChild().getNodeValue();
AnalyzerMessage.java,SyntaxToken firstSyntaxToken = syntaxNode.firstToken();,if (syntaxNode != null ) SyntaxToken firstSyntaxToken = syntaxNode.firstToken();
AnalyzerMessage.java,SyntaxToken lastSyntaxToken = syntaxNode.lastToken();,if (syntaxNode != null ) SyntaxToken lastSyntaxToken = syntaxNode.lastToken();
AnalyzerMessage.java,SyntaxToken firstSyntaxToken = startTree.firstToken();,if (startTree != null ) SyntaxToken firstSyntaxToken = startTree.firstToken();
AnalyzerMessage.java,SyntaxToken lastSyntaxToken = endTree.lastToken();,if (endTree != null ) SyntaxToken lastSyntaxToken = endTree.lastToken();
ForLoopVariableTypeCheck.java,ParametrizedTypeJavaType paramType = (ParametrizedTypeJavaType) expression.symbolType();,if (expression != null ) ParametrizedTypeJavaType paramType = (ParametrizedTypeJavaType) expression.symbolType();
HardCodedCredentialsCheck.java,passphrase = PASSED.toCharArray(); // Noncompliant,if (Noncompliant != null ) passphrase = PASSED.toCharArray(); // Noncompliant
IdentifierUtilsTest.java,IdentifierTree a = variableFromLastReturnStatement(method.block().body());,if (variableFromLastReturnStatement(method != null ) IdentifierTree a = variableFromLastReturnStatement(method.block().body());
ArrayForVarArgCheck.java,Tree result = lastArg.parent();,if (lastArg != null ) Tree result = lastArg.parent();
ArrayForVarArgCheck.java,result = result.parent();,if (result != null ) result = result.parent();
CipherBlockChainingCheck.java,tree = tree.parent();,if (tree != null ) tree = tree.parent();
CryptographicKeySizeCheck.java,tree = tree.parent();,if (tree != null ) tree = tree.parent();
SMTPSSLServerIdentityCheck.java,tree = tree.parent();,if (tree != null ) tree = tree.parent();
SecureXmlTransformerCheck.java,Tree parent = tree.parent();,if (tree != null ) Tree parent = tree.parent();
SecureXmlTransformerCheck.java,parent = parent.parent();,if (parent != null ) parent = parent.parent();
XmlExternalEntityProcessingCheck.java,Tree parent = tree.parent();,if (tree != null ) Tree parent = tree.parent();
XmlExternalEntityProcessingCheck.java,parent = parent.parent();,if (parent != null ) parent = parent.parent();
PreparedStatementAndResultSetCheck.java,"ExpressionTree lastAssignment = ReassignmentFinder.getClosestReassignmentOrDeclarationExpression(identifier, identifier.symbol());","if (identifier != null ) ExpressionTree lastAssignment = ReassignmentFinder.getClosestReassignmentOrDeclarationExpression(identifier, identifier.symbol());"
CommentedOutCodeLineCheck.java,comments = Lists.newArrayList();,if (Lists != null ) comments = Lists.newArrayList();
UselessImportCheck.java,Iterator<String> it = pendingImports.iterator();,if (pendingImports != null ) Iterator<String> it = pendingImports.iterator();
UselessImportCheck.java,String pendingImport = it.next();,if (it != null ) String pendingImport = it.next();
VisitorsBridge.java,this.executableScanners = scannersBuilder.build();,if (scannersBuilder != null ) this.executableScanners = scannersBuilder.build();
NoTestInTestClassCheck.java,SymbolMetadata metadata = type.symbol().metadata();,if (type != null ) SymbolMetadata metadata = type.symbol().metadata();
NullDereferenceCheck.java,ProgramState programState = context.getState();,if (context != null ) ProgramState programState = context.getState();
NullDereferenceCheck.java,Tree methodSelect = methodInvocation.methodSelect();,if (methodInvocation != null ) Tree methodSelect = methodInvocation.methodSelect();
SafetyNetTest.java,ActionParser parser = JavaParser.createParser();,if (JavaParser != null ) ActionParser parser = JavaParser.createParser();
JavaSymbol.java,interfaces = builder.build();,if (builder != null ) interfaces = builder.build();
ParameterReassignedToCheck.java,Set<Symbol> live = analyze.getIn(cfg.entry());,if (analyze != null ) Set<Symbol> live = analyze.getIn(cfg.entry());
ParameterReassignedToCheck.java,Set<Symbol> live = analyze.getIn(cfg.entry());,if (analyze != null ) Set<Symbol> live = analyze.getIn(cfg.entry());
CFGTest.java,CFG.Block entry = cfg.entry();,if (cfg != null ) CFG.Block entry = cfg.entry();
UCFGJavaVisitor.java,String signature = signatureFor(methodTree.symbol());,if (signatureFor(methodTree != null ) String signature = signatureFor(methodTree.symbol());
JavaSymbol.java,sign += owner.getType().fullyQualifiedName();,if (owner != null ) sign += owner.getType().fullyQualifiedName();
JaCoCoReportMerger.java,boolean reportFormatIsCurrent = jacocoReportReader.useCurrentBinaryFormat();,if (jacocoReportReader != null ) boolean reportFormatIsCurrent = jacocoReportReader.useCurrentBinaryFormat();
HardCodedCredentialsCheck.java,String cleanedLiteral = LiteralUtils.trimQuotes(argument.value());,if (LiteralUtils != null ) String cleanedLiteral = LiteralUtils.trimQuotes(argument.value());
CallSuperMethodFromInnerClassCheck.java,Type methodOwnerType = symbol.owner().type();,if (symbol != null ) Type methodOwnerType = symbol.owner().type();
CallSuperMethodFromInnerClassCheck.java,Type innerType = classSymbol.type();,if (classSymbol != null ) Type innerType = classSymbol.type();
StaticMethodCheck.java,Type scopeType = scope.type();,if (scope != null ) Type scopeType = scope.type();
StaticMethodCheck.java,Type symbolType = symbol.type();,if (symbol != null ) Type symbolType = symbol.type();
ParametrizedTypeJavaType.java,this.rawType = symbol.getType();,if (symbol != null ) this.rawType = symbol.getType();
TypeInferenceSolver.java,"List<JavaType> objectTypes = listOfTypes(symbols.objectType, formalTypeSubstitutedTypes.size());","if (formalTypeSubstitutedTypes != null ) List<JavaType> objectTypes = listOfTypes(symbols.objectType, formalTypeSubstitutedTypes.size());"
ReassignmentFinderTest.java,String lineSeparator = System.lineSeparator();,if (System != null ) String lineSeparator = System.lineSeparator();
PseudoRandomCheck.java,"double j = Math.random(); // Noncompliant [[sc=21;ec=27]] {{Use a cryptographically strong random number generator (RNG) like ""java.security.SecureRandom"" in place of this PRNG}}","if (PRNG}} != null ) double j = Math.random(); // Noncompliant [[sc=21;ec=27]] {{Use a cryptographically strong random number generator (RNG) like ""java.security.SecureRandom"" in place of this PRNG}}"
IncrementDecrementInSubExpressionCheck.java,ExpressionTree expressionTree = tree.expression();,if (tree != null ) ExpressionTree expressionTree = tree.expression();
FileLinesVisitor.java,int baseLine = trivia.startLine();,if (trivia != null ) int baseLine = trivia.startLine();
UCFGJavaVisitor.java,Expression.Variable concatAux = variableWithId(idGenerator.newId());,if (variableWithId(idGenerator != null ) Expression.Variable concatAux = variableWithId(idGenerator.newId());
UCFGJavaVisitor.java,Expression.Variable getValue = variableWithId(idGenerator.newId());,if (variableWithId(idGenerator != null ) Expression.Variable getValue = variableWithId(idGenerator.newId());
UCFGJavaVisitor.java,List<AnnotationTree> annotationList = parameter.modifiers().annotations();,if (parameter != null ) List<AnnotationTree> annotationList = parameter.modifiers().annotations();
UCFGJavaVisitor.java,ExpressionTree initializer = variableTree.initializer();,if (variableTree != null ) ExpressionTree initializer = variableTree.initializer();
UCFGJavaVisitor.java,Expression lhs = idGenerator.lookupExpressionFor(binaryExpressionTree.leftOperand());,if (idGenerator != null ) Expression lhs = idGenerator.lookupExpressionFor(binaryExpressionTree.leftOperand());
UCFGJavaVisitor.java,Expression rhs = idGenerator.lookupExpressionFor(binaryExpressionTree.rightOperand());,if (idGenerator != null ) Expression rhs = idGenerator.lookupExpressionFor(binaryExpressionTree.rightOperand());
UCFGJavaVisitor.java,"List<Expression> arguments = argumentIds(idGenerator, tree.arguments());","if (tree != null ) List<Expression> arguments = argumentIds(idGenerator, tree.arguments());"
UCFGJavaVisitor.java,"List<Expression> arguments = argumentIds(idGenerator, tree.arguments());","if (tree != null ) List<Expression> arguments = argumentIds(idGenerator, tree.arguments());"
UCFGJavaVisitor.java,this.fileKey = context.getFileKey();,if (context != null ) this.fileKey = context.getFileKey();
UCFGJavaVisitor.java,Expression lhs = idGenerator.lookupExpressionFor(binaryExpressionTree.leftOperand());,if (idGenerator != null ) Expression lhs = idGenerator.lookupExpressionFor(binaryExpressionTree.leftOperand());
UCFGJavaVisitor.java,Expression rhs = idGenerator.lookupExpressionFor(binaryExpressionTree.rightOperand());,if (idGenerator != null ) Expression rhs = idGenerator.lookupExpressionFor(binaryExpressionTree.rightOperand());
UCFGJavaVisitor.java,"arguments = argumentIds(idGenerator, tree.arguments());","if (tree != null ) arguments = argumentIds(idGenerator, tree.arguments());"
ObjectDeserialization.java,Foo deserialized = (Foo) ois.readObject();  // Noncompliant [[sc=30;ec=46]] {{Verify there is no risk to deserialize from this source}},if (source}} != null ) Foo deserialized = (Foo) ois.readObject();  // Noncompliant [[sc=30;ec=46]] {{Verify there is no risk to deserialize from this source}}
ObjectDeserialization.java,deserialized = (Foo) ois.readUnshared();  // Noncompliant {{Verify there is no risk to deserialize from this source}},if (source}} != null ) deserialized = (Foo) ois.readUnshared();  // Noncompliant {{Verify there is no risk to deserialize from this source}}
UCFGJavaVisitor.java,this.javaFileKey = context.getFileKey();,if (context != null ) this.javaFileKey = context.getFileKey();
UCFGJavaVisitor.java,List<AnnotationTree> methodAnnotations = methodTree.modifiers().annotations();,if (methodTree != null ) List<AnnotationTree> methodAnnotations = methodTree.modifiers().annotations();
UCFGJavaVisitor.java,Expression.Variable var = variableWithId(idGenerator.newId());,if (variableWithId(idGenerator != null ) Expression.Variable var = variableWithId(idGenerator.newId());
UCFGJavaVisitor.java,Expression.Constant fullyQualifiedName = constant(annotation.symbolType().fullyQualifiedName());,if (constant(annotation != null ) Expression.Constant fullyQualifiedName = constant(annotation.symbolType().fullyQualifiedName());
UCFGJavaVisitor.java,Expression source = idGenerator.lookupExpressionFor(variableTree.initializer());,if (idGenerator != null ) Expression source = idGenerator.lookupExpressionFor(variableTree.initializer());
UCFGJavaVisitor.java,Expression.Variable getValue = variableWithId(idGenerator.newId());,if (variableWithId(idGenerator != null ) Expression.Variable getValue = variableWithId(idGenerator.newId());
UCFGJavaVisitor.java,Expression array = idGenerator.lookupExpressionFor(arrayAccessExpressionTree.expression());,if (idGenerator != null ) Expression array = idGenerator.lookupExpressionFor(arrayAccessExpressionTree.expression());
UCFGJavaVisitor.java,Expression leftOperand = idGenerator.lookupExpressionFor(tree.leftOperand());,if (idGenerator != null ) Expression leftOperand = idGenerator.lookupExpressionFor(tree.leftOperand());
UCFGJavaVisitor.java,Expression rightOperand = idGenerator.lookupExpressionFor(tree.rightOperand());,if (idGenerator != null ) Expression rightOperand = idGenerator.lookupExpressionFor(tree.rightOperand());
UCFGJavaVisitor.java,ExpressionTree lhsTree = tree.variable();,if (tree != null ) ExpressionTree lhsTree = tree.variable();
UCFGJavaVisitor.java,ExpressionTree rhsTree = tree.expression();,if (tree != null ) ExpressionTree rhsTree = tree.expression();
UCFGJavaVisitor.java,ExpressionTree lhsTree = tree.variable();,if (tree != null ) ExpressionTree lhsTree = tree.variable();
UCFGJavaVisitor.java,ExpressionTree rhsTree = tree.expression();,if (tree != null ) ExpressionTree rhsTree = tree.expression();
UCFGJavaVisitor.java,Expression.Variable concatAux = variableWithId(idGenerator.newId());,if (variableWithId(idGenerator != null ) Expression.Variable concatAux = variableWithId(idGenerator.newId());
UCFGJavaVisitor.java,Expression.Variable aux = variableWithId(idGenerator.newId());,if (variableWithId(idGenerator != null ) Expression.Variable aux = variableWithId(idGenerator.newId());
UCFGJavaVisitorTest.java,UCFG actualUCFG = actualUCFGs.get(expectedUCFG.methodId());,if (actualUCFGs != null ) UCFG actualUCFG = actualUCFGs.get(expectedUCFG.methodId());
UCFGJavaVisitorTest.java,UCFG ucfg = UCFGtoProtobuf.fromProtobufFile(path.toFile());,if (UCFGtoProtobuf != null ) UCFG ucfg = UCFGtoProtobuf.fromProtobufFile(path.toFile());
CheckstyleSensor.java,NewExternalIssue newExternalIssue = context.newExternalIssue();,if (context != null ) NewExternalIssue newExternalIssue = context.newExternalIssue();
CheckstyleSensorTest.java,File reportFile = tmp.newFile(fileName).getCanonicalFile();,if (tmp != null ) File reportFile = tmp.newFile(fileName).getCanonicalFile();
UCFGJavaVisitor.java,Expression.Variable getValue = variableWithId(idGenerator.newId());,if (variableWithId(idGenerator != null ) Expression.Variable getValue = variableWithId(idGenerator.newId());
UCFGJavaVisitor.java,List<AnnotationTree> annotationList = parameter.modifiers().annotations();,if (parameter != null ) List<AnnotationTree> annotationList = parameter.modifiers().annotations();
UCFGJavaVisitor.java,ExpressionTree initializer = variableTree.initializer();,if (variableTree != null ) ExpressionTree initializer = variableTree.initializer();
UCFGJavaVisitor.java,Expression lhs = idGenerator.lookupExpressionFor(binaryExpressionTree.leftOperand());,if (idGenerator != null ) Expression lhs = idGenerator.lookupExpressionFor(binaryExpressionTree.leftOperand());
UCFGJavaVisitor.java,Expression rhs = idGenerator.lookupExpressionFor(binaryExpressionTree.rightOperand());,if (idGenerator != null ) Expression rhs = idGenerator.lookupExpressionFor(binaryExpressionTree.rightOperand());
JavaRulesDefinition.java,String metadataKey = rule.key();,if (rule != null ) String metadataKey = rule.key();
JavaRulesDefinition.java,metadataKey = rspecKeyAnnotation.value();,if (rspecKeyAnnotation != null ) metadataKey = rspecKeyAnnotation.value();
JavaRulesDefinitionTest.java,JavaRulesDefinition definition = new JavaRulesDefinition(settings.asConfig());,if (JavaRulesDefinition(settings != null ) JavaRulesDefinition definition = new JavaRulesDefinition(settings.asConfig());
UCFGJavaVisitor.java,"List<Expression> arguments = argumentIds(idGenerator, tree.arguments());","if (tree != null ) List<Expression> arguments = argumentIds(idGenerator, tree.arguments());"
UCFGJavaVisitor.java,"List<Expression> arguments = argumentIds(idGenerator, tree.arguments());","if (tree != null ) List<Expression> arguments = argumentIds(idGenerator, tree.arguments());"
UCFGJavaVisitor.java,this.fileKey = context.getFileKey();,if (context != null ) this.fileKey = context.getFileKey();
UCFGJavaVisitor.java,Expression lhs = idGenerator.lookupExpressionFor(binaryExpressionTree.leftOperand());,if (idGenerator != null ) Expression lhs = idGenerator.lookupExpressionFor(binaryExpressionTree.leftOperand());
UCFGJavaVisitor.java,Expression rhs = idGenerator.lookupExpressionFor(binaryExpressionTree.rightOperand());,if (idGenerator != null ) Expression rhs = idGenerator.lookupExpressionFor(binaryExpressionTree.rightOperand());
UCFGJavaVisitor.java,"arguments = argumentIds(idGenerator, tree.arguments());","if (tree != null ) arguments = argumentIds(idGenerator, tree.arguments());"
VisitorsBridge.java,this.scanners = scannersBuilder.build();,if (scannersBuilder != null ) this.scanners = scannersBuilder.build();
JavaCheckVerifier.java,Collection<File> classpath = Lists.newLinkedList();,if (Lists != null ) Collection<File> classpath = Lists.newLinkedList();
SecureCookieCheck.java,Type type = variableTree.type().symbolType();,if (variableTree != null ) Type type = variableTree.type().symbolType();
SecureCookieCheck.java,Symbol variableSymbol = variableTree.symbol();,if (variableTree != null ) Symbol variableSymbol = variableTree.symbol();
SecureCookieCheck.java,MemberSelectExpressionTree mse = (MemberSelectExpressionTree) mit.methodSelect();,if (mit != null ) MemberSelectExpressionTree mse = (MemberSelectExpressionTree) mit.methodSelect();
SecureCookieCheck.java,ExpressionTree initializer = variableTree.initializer();,if (variableTree != null ) ExpressionTree initializer = variableTree.initializer();
SecureCookieCheck.java,Symbol methodSymbol = mit.symbol();,if (mit != null ) Symbol methodSymbol = mit.symbol();
SecureCookieCheck.java,id = (IdentifierTree) mit.methodSelect();,if (mit != null ) id = (IdentifierTree) mit.methodSelect();
SecureCookieCheck.java,int age = cookie.getMaxAge();,if (cookie != null ) int age = cookie.getMaxAge();
TypeAndReferenceSolver.java,JavaType castType = getType(tree.type());,if (getType(tree != null ) JavaType castType = getType(tree.type());
ConstantUtils.java,Symbol symbol = id.symbol();,if (id != null ) Symbol symbol = id.symbol();
BooleanLiteralCheck.java,LiteralTree result = getBooleanLiteral(tree.leftOperand());,if (getBooleanLiteral(tree != null ) LiteralTree result = getBooleanLiteral(tree.leftOperand());
BooleanLiteralCheck.java,result = getBooleanLiteral(tree.rightOperand());,if (getBooleanLiteral(tree != null ) result = getBooleanLiteral(tree.rightOperand());
ConstantUtils.java,String left = resolveAsStringConstant(binaryExpression.leftOperand());,if (resolveAsStringConstant(binaryExpression != null ) String left = resolveAsStringConstant(binaryExpression.leftOperand());
ConstantUtils.java,String right = resolveAsStringConstant(binaryExpression.rightOperand());,if (resolveAsStringConstant(binaryExpression != null ) String right = resolveAsStringConstant(binaryExpression.rightOperand());
DataStoredInSessionCheck.java,Symbol variable = identifier.symbol();,if (identifier != null ) Symbol variable = identifier.symbol();
DataStoredInSessionCheck.java,SyntaxToken startToken = start.lastToken();,if (start != null ) SyntaxToken startToken = start.lastToken();
DataStoredInSessionCheck.java,SyntaxToken endToken = end.firstToken();,if (end != null ) SyntaxToken endToken = end.firstToken();
DataStoredInSessionCheck.java,SyntaxToken identifierToken = identifier.identifierToken();,if (identifier != null ) SyntaxToken identifierToken = identifier.identifierToken();
DataStoredInSessionCheck.java,int firstTokenLine = firstToken.line();,if (firstToken != null ) int firstTokenLine = firstToken.line();
DataStoredInSessionCheck.java,int tokenLine = token.line();,if (token != null ) int tokenLine = token.line();
DataStoredInSessionCheck.java,int lastTokenLine = lastToken.line();,if (lastToken != null ) int lastTokenLine = lastToken.line();
DataStoredInSessionCheck.java,int tokenLine = token.line();,if (token != null ) int tokenLine = token.line();
DataStoredInSessionCheck.java,identifiersUsedToSetAttribute = Sets.newHashSet();,if (Sets != null ) identifiersUsedToSetAttribute = Sets.newHashSet();
OSCommandInjectionCheck.java,Arguments arguments = mit.arguments();,if (mit != null ) Arguments arguments = mit.arguments();
DataStoredInSessionCheck.java,Cookie[] cookies = request.getCookies();,if (request != null ) Cookie[] cookies = request.getCookies();
DataStoredInSessionCheck.java,Cookie[] theCookies = request.getCookies();,if (request != null ) Cookie[] theCookies = request.getCookies();
OSCommandInjectionCheck.java,Runtime rt = Runtime.getRuntime();,if (Runtime != null ) Runtime rt = Runtime.getRuntime();
SwitchCaseWithoutBreakCheck.java,StatementTree elseStatement = ifStatement.elseStatement();,if (ifStatement != null ) StatementTree elseStatement = ifStatement.elseStatement();
JavaSquidTest.java,File file = temp.newFile().getAbsoluteFile();,if (temp != null ) File file = temp.newFile().getAbsoluteFile();
JavaSquidTest.java,File file = temp.newFile().getAbsoluteFile();,if (temp != null ) File file = temp.newFile().getAbsoluteFile();
JavaSquidTest.java,File file = temp.newFile().getAbsoluteFile();,if (temp != null ) File file = temp.newFile().getAbsoluteFile();
TreeFactory.java,List<AnnotationTree> typeAnnotations = ImmutableList.copyOf(annotations.get());,if (ImmutableList != null ) List<AnnotationTree> typeAnnotations = ImmutableList.copyOf(annotations.get());
RedundantThrowsDeclarationCheck.java,ListTree<TypeTree> thrownList = methodTree.throwsClauses();,if (methodTree != null ) ListTree<TypeTree> thrownList = methodTree.throwsClauses();
UnusedMethodParameterCheck.java,boolean overridableMethod = overridableMethod(methodTree.symbol());,if (overridableMethod(methodTree != null ) boolean overridableMethod = overridableMethod(methodTree.symbol());
SwitchLastCaseIsDefaultCheck.java,CaseLabelTree defaultLabelTree = defaultLabel.get();,if (defaultLabel != null ) CaseLabelTree defaultLabelTree = defaultLabel.get();
SwitchLastCaseIsDefaultCheck.java,List<CaseGroupTree> caseGroups = switchStatementTree.cases();,if (switchStatementTree != null ) List<CaseGroupTree> caseGroups = switchStatementTree.cases();
JavaSquidSensorTest.java,FileSystem fs = context.fileSystem();,if (context != null ) FileSystem fs = context.fileSystem();
ExplodedGraphWalker.java,sv = handleCatchVariable(variableTree.symbol().type());,if (handleCatchVariable(variableTree != null ) sv = handleCatchVariable(variableTree.symbol().type());
AnonymousClassShouldBeLambdaCheck.java,List<Tree> members = classBody.members();,if (classBody != null ) List<Tree> members = classBody.members();
AnonymousClassShouldBeLambdaCheck.java,JavaSymbol.TypeJavaSymbol typeJavaSymbol = methodSymbol.overriddenSymbol().enclosingClass();,if (methodSymbol != null ) JavaSymbol.TypeJavaSymbol typeJavaSymbol = methodSymbol.overriddenSymbol().enclosingClass();
AnonymousClassShouldBeLambdaCheck.java,TypeJavaSymbol tjs = methodSymbol.overriddenSymbol().outermostClass();,if (methodSymbol != null ) TypeJavaSymbol tjs = methodSymbol.overriddenSymbol().outermostClass();
AnonymousClassShouldBeLambdaCheck.java,String s = methodSymbol.completeSignature();,if (methodSymbol != null ) String s = methodSymbol.completeSignature();
AnonymousClassShouldBeLambdaCheck.java,String m = met.completeSignature();,if (met != null ) String m = met.completeSignature();
DeprecatedHashAlgorithmCheck.java,String methodName = MethodsHelper.methodName(mit).name();,if (MethodsHelper != null ) String methodName = MethodsHelper.methodName(mit).name();
InvalidDateValuesCheck.java,ExpressionTree methodSelect = mit.methodSelect();,if (mit != null ) ExpressionTree methodSelect = mit.methodSelect();
WaitInSynchronizeCheck.java,MemberSelectExpressionTree mse = (MemberSelectExpressionTree) mit.methodSelect();,if (mit != null ) MemberSelectExpressionTree mse = (MemberSelectExpressionTree) mit.methodSelect();
WaitInSynchronizeCheck.java,methodName = mse.identifier();,if (mse != null ) methodName = mse.identifier();
WaitInSynchronizeCheck.java,methodName = (IdentifierTree) mit.methodSelect();,if (mit != null ) methodName = (IdentifierTree) mit.methodSelect();
MethodsHelper.java,id = (IdentifierTree) mit.methodSelect();,if (mit != null ) id = (IdentifierTree) mit.methodSelect();
MethodsHelperTest.java,Constructor constructor = MethodsHelper.class.getDeclaredConstructor();,if (MethodsHelper != null ) Constructor constructor = MethodsHelper.class.getDeclaredConstructor();
NonNullSetToNullCheck.java,Scope parameters = symbol.getParameters();,if (symbol != null ) Scope parameters = symbol.getParameters();
NonNullSetToNullCheck.java,List<JavaSymbol> scopeSymbols = parameters.scopeSymbols();,if (parameters != null ) List<JavaSymbol> scopeSymbols = parameters.scopeSymbols();
NonNullSetToNullCheck.java,int parametersToTest = argumentValues.size();,if (argumentValues != null ) int parametersToTest = argumentValues.size();
ParameterNullnessCheck.java,Scope parameters = methodSymbol.getParameters();,if (methodSymbol != null ) Scope parameters = methodSymbol.getParameters();
ParameterNullnessCheck.java,List<JavaSymbol> argumentSymbols = parameters.scopeSymbols();,if (parameters != null ) List<JavaSymbol> argumentSymbols = parameters.scopeSymbols();
SonarComponentsTest.java,CodeVisitor[] visitors = sonarComponents.checkClasses();,if (sonarComponents != null ) CodeVisitor[] visitors = sonarComponents.checkClasses();
SonarComponentsTest.java,CodeVisitor[] visitors = sonarComponents.checkClasses();,if (sonarComponents != null ) CodeVisitor[] visitors = sonarComponents.checkClasses();
SonarComponentsTest.java,CodeVisitor[] visitors = sonarComponents.checkClasses();,if (sonarComponents != null ) CodeVisitor[] visitors = sonarComponents.checkClasses();
SonarComponentsTest.java,CodeVisitor[] visitors = sonarComponents.checkClasses();,if (sonarComponents != null ) CodeVisitor[] visitors = sonarComponents.checkClasses();
CFG.java,Block last = breakTargets.removeLast();,if (breakTargets != null ) Block last = breakTargets.removeLast();
CatchExceptionCheck.java,Symbol symbol = tree.symbol();,if (tree != null ) Symbol symbol = tree.symbol();
ProfileGenerator.java,List<String> ruleKeys = Lists.newArrayList();,if (Lists != null ) List<String> ruleKeys = Lists.newArrayList();
NullableAnnotationUtils.java,JavaSymbol.TypeJavaSymbol enclosingClassSymbol = methodSymbol.enclosingClass();,if (methodSymbol != null ) JavaSymbol.TypeJavaSymbol enclosingClassSymbol = methodSymbol.enclosingClass();
NullableAnnotationUtils.java,JavaSymbol.PackageJavaSymbol packageSymbol = methodSymbol.packge();,if (methodSymbol != null ) JavaSymbol.PackageJavaSymbol packageSymbol = methodSymbol.packge();
NonNullSetToNullCheck.java,SymbolicValue assignedValue = programState.peekValue();,if (programState != null ) SymbolicValue assignedValue = programState.peekValue();
VisitorsBridge.java,key = annotation.key();,if (annotation != null ) key = annotation.key();
AnalysisError.java,this.message = exception.getMessage();,if (exception != null ) this.message = exception.getMessage();
NullableAnnotationUtils.java,JavaSymbol.MethodJavaSymbol methodSymbol = (JavaSymbol.MethodJavaSymbol) methodTree.symbol();,if (methodTree != null ) JavaSymbol.MethodJavaSymbol methodSymbol = (JavaSymbol.MethodJavaSymbol) methodTree.symbol();
JavaSquidSensorTest.java,AnalysisError analysisError = analysisErrors.iterator().next();,if (analysisErrors != null ) AnalysisError analysisError = analysisErrors.iterator().next();
ExplodedGraphWalker.java,JavaSymbol.MethodJavaSymbol methodSymbol = (JavaSymbol.MethodJavaSymbol) methodTree.symbol();,if (methodTree != null ) JavaSymbol.MethodJavaSymbol methodSymbol = (JavaSymbol.MethodJavaSymbol) methodTree.symbol();
NonNullSetToNullCheck.java,String nonNullAnnotation = nonNullAnnotation(mTree.symbol());,if (nonNullAnnotation(mTree != null ) String nonNullAnnotation = nonNullAnnotation(mTree.symbol());
AnnotationUtilsTest.java,Constructor<AnnotationUtils> constructor = AnnotationUtils.class.getDeclaredConstructor();,if (AnnotationUtils != null ) Constructor<AnnotationUtils> constructor = AnnotationUtils.class.getDeclaredConstructor();
ExplodedGraphWalker.java,JavaSymbol.MethodJavaSymbol methodSymbol = (JavaSymbol.MethodJavaSymbol) methodTree.symbol();,if (methodTree != null ) JavaSymbol.MethodJavaSymbol methodSymbol = (JavaSymbol.MethodJavaSymbol) methodTree.symbol();
ExplodedGraphWalker.java,SymbolMetadata metadata = variableSymbol.metadata();,if (variableSymbol != null ) SymbolMetadata metadata = variableSymbol.metadata();
AssertionsInTestsCheck.java,JavaSymbol.MethodJavaSymbol symbol = (JavaSymbol.MethodJavaSymbol) methodTree.symbol();,if (methodTree != null ) JavaSymbol.MethodJavaSymbol symbol = (JavaSymbol.MethodJavaSymbol) methodTree.symbol();
CallToDeprecatedMethodCheck.java,JavaSymbol.MethodJavaSymbol overriddenMethod = symbol.overriddenSymbol();,if (symbol != null ) JavaSymbol.MethodJavaSymbol overriddenMethod = symbol.overriddenSymbol();
ConfusingOverloadCheck.java,MethodSymbol methodSymbol = methodTree.symbol();,if (methodTree != null ) MethodSymbol methodSymbol = methodTree.symbol();
ConfusingOverloadCheck.java,TypeSymbol owner = (TypeSymbol) methodSymbol.owner();,if (methodSymbol != null ) TypeSymbol owner = (TypeSymbol) methodSymbol.owner();
MembersDifferOnlyByCapitalizationCheck.java,MethodTreeImpl methodDeclaration = (MethodTreeImpl) symbol.declaration();,if (symbol != null ) MethodTreeImpl methodDeclaration = (MethodTreeImpl) symbol.declaration();
MethodTreeImpl.java,JavaSymbol.MethodJavaSymbol methodJavaSymbol = symbol.overriddenSymbol();,if (symbol != null ) JavaSymbol.MethodJavaSymbol methodJavaSymbol = symbol.overriddenSymbol();
SurefireJavaParser.java,InputFile resource = getUnitTestResource(entry.getKey());,if (getUnitTestResource(entry != null ) InputFile resource = getUnitTestResource(entry.getKey());
ClassNamedLikeExceptionCheck.java,Symbol symbol = classTree.symbol();,if (classTree != null ) Symbol symbol = classTree.symbol();
BytecodeCFG.java,exit.successors = Collections.emptyList();,if (Collections != null ) exit.successors = Collections.emptyList();
AbstractInjectionChecker.java,parameterName = arg.name();,if (arg != null ) parameterName = arg.name();
JavaSonarWayProfileTest.java,ValidationMessages validation = ValidationMessages.create();,if (ValidationMessages != null ) ValidationMessages validation = ValidationMessages.create();
JavaSonarWayProfileTest.java,Object[] arguments = invocation.getArguments();,if (invocation != null ) Object[] arguments = invocation.getArguments();
BytecodeEGWalker.java,Type exceptionType = semanticModel.getClassType(b.getExceptionType());,if (semanticModel != null ) Type exceptionType = semanticModel.getClassType(b.getExceptionType());
DebugMethodYieldsOnInvocationsCheck.java,Symbol symbol = mit.symbol();,if (mit != null ) Symbol symbol = mit.symbol();
DebugMethodYieldsOnInvocationsCheck.java,MethodBehavior mb = entry.getValue();,if (entry != null ) MethodBehavior mb = entry.getValue();
DebugMethodYieldsOnInvocationsCheck.java,IdentifierTree methodName = entry.getKey();,if (entry != null ) IdentifierTree methodName = entry.getKey();
ArchitectureCheck.java,String shouldCheckId = shouldCheck.peekFirst();,if (shouldCheck != null ) String shouldCheckId = shouldCheck.peekFirst();
ArchitectureCheck.java,Symbol symbol = tree.symbol();,if (tree != null ) Symbol symbol = tree.symbol();
ArchitectureCheck.java,Type type = symbol.type();,if (symbol != null ) Type type = symbol.type();
ArchitectureCheck.java,String fullyQualifiedName = type.fullyQualifiedName();,if (type != null ) String fullyQualifiedName = type.fullyQualifiedName();
ArchitectureCheck.java,Set<String> currentIssues = issues.peekFirst();,if (issues != null ) Set<String> currentIssues = issues.peekFirst();
StaticFieldInitializationCheck.java,IdentifierTree variable = (IdentifierTree) aet.variable();,if (aet != null ) IdentifierTree variable = (IdentifierTree) aet.variable();
HardCodedCredentialsCheck.java,IdentifierTree simpleName = tree.simpleName();,if (tree != null ) IdentifierTree simpleName = tree.simpleName();
ImmediateReverseBoxingCheck.java,ExpressionTree initializer = variableTree.initializer();,if (variableTree != null ) ExpressionTree initializer = variableTree.initializer();
ImmediateReverseBoxingCheck.java,ExpressionTree methodSelect = methodInvocationTree.methodSelect();,if (methodInvocationTree != null ) ExpressionTree methodSelect = methodInvocationTree.methodSelect();
ImmediateReverseBoxingCheck.java,Symbol symbol = methodInvocationTree.symbol();,if (methodInvocationTree != null ) Symbol symbol = methodInvocationTree.symbol();
MethodNamedHashcodeOrEqualCheck.java,String methodName = methodIdentifier.name();,if (methodIdentifier != null ) String methodName = methodIdentifier.name();
JavaRulesDefinition.java,List<Class> checks = CheckList.getChecks();,if (CheckList != null ) List<Class> checks = CheckList.getChecks();
SETestUtils.java,ActionParser<Tree> p = JavaParser.createParser();,if (JavaParser != null ) ActionParser<Tree> p = JavaParser.createParser();
BytecodeSECheckTest.java,SymbolicValue peekValue = ps.peekValue();,if (ps != null ) SymbolicValue peekValue = ps.peekValue();
BytecodeSECheckTest.java,peekValue = ps.peekValue();,if (ps != null ) peekValue = ps.peekValue();
JavaSquidSensorTest.java,fs = context.fileSystem();,if (context != null ) fs = context.fileSystem();
JavaSquidSensorTest.java,fs = context.fileSystem();,if (context != null ) fs = context.fileSystem();
CheckListTest.java,CodeVisitor visitor = (CodeVisitor) check.newInstance();,if (check != null ) CodeVisitor visitor = (CodeVisitor) check.newInstance();
JaCoCoSensor.java,String itReportPathProperty = itReportPathProp.get();,if (itReportPathProp != null ) String itReportPathProperty = itReportPathProp.get();
JaCoCoItSensor.java,boolean foundReport = report.isFile();,if (report != null ) boolean foundReport = report.isFile();
JaCoCoOverallSensor.java,boolean foundOneReport = reportUTs.exists() || reportITs.exists();,if (reportITs != null ) boolean foundOneReport = reportUTs.exists() || reportITs.exists();
JaCoCoSensor.java,reportMerged = reportPaths.iterator().next();,if (reportPaths != null ) reportMerged = reportPaths.iterator().next();
JaCoCoSensor.java,boolean foundReport = report.isFile();,if (report != null ) boolean foundReport = report.isFile();
JaCoCoSensor.java,Settings settings = context.settings();,if (context != null ) Settings settings = context.settings();
JaCoCoOverallSensorTest.java,fileSystem = context.fileSystem();,if (context != null ) fileSystem = context.fileSystem();
JacocoSensorJava9Test.java,JacocoConfiguration configuration = new JacocoConfiguration(context.settings());,if (JacocoConfiguration(context != null ) JacocoConfiguration configuration = new JacocoConfiguration(context.settings());
JavaPlugin.java,Version sonarQubeVersion = context.getSonarQubeVersion();,if (context != null ) Version sonarQubeVersion = context.getSonarQubeVersion();
JavaSquidTest.java,SensorContextTester context = SensorContextTester.create(temp.getRoot());,if (SensorContextTester != null ) SensorContextTester context = SensorContextTester.create(temp.getRoot());
BytecodeCFGBuilder.java,exit.successors = Collections.emptyList();,if (Collections != null ) exit.successors = Collections.emptyList();
BytecodeCFGBuilder.java,this.id = cfg.blocks.size();,if (cfg != null ) this.id = cfg.blocks.size();
BytecodeCFGBuilder.java,currentBlock.falseBlock = currentBlock.createSuccessor();,if (currentBlock != null ) currentBlock.falseBlock = currentBlock.createSuccessor();
BytecodeCFGBuilderTest.java,BytecodeCFGBuilder.BytecodeCFG cfg = ins.cfg();,if (ins != null ) BytecodeCFGBuilder.BytecodeCFG cfg = ins.cfg();
BytecodeEGWalkerExecuteTest.java,BytecodeCFGBuilder.BytecodeCFG cfg = instr.cfg();,if (instr != null ) BytecodeCFGBuilder.BytecodeCFG cfg = instr.cfg();
BytecodeEGWalkerExecuteTest.java,BytecodeCFGBuilder.BytecodeCFG cfg = instr.cfg();,if (instr != null ) BytecodeCFGBuilder.BytecodeCFG cfg = instr.cfg();
BytecodeEGWalkerExecuteTest.java,BytecodeCFGBuilder.BytecodeCFG cfg = mv.cfg();,if (mv != null ) BytecodeCFGBuilder.BytecodeCFG cfg = mv.cfg();
BytecodeEGWalkerExecuteTest.java,BytecodeCFGBuilder.BytecodeCFG cfg = mv.cfg();,if (mv != null ) BytecodeCFGBuilder.BytecodeCFG cfg = mv.cfg();
CheckListTest.java,String key = ruleAnnotation.key();,if (ruleAnnotation != null ) String key = ruleAnnotation.key();
CheckListTest.java,key = rspecKeyAnnotation.value();,if (rspecKeyAnnotation != null ) key = rspecKeyAnnotation.value();
BytecodeEGWalker.java,Type exceptionType = yield.exceptionType();,if (yield != null ) Type exceptionType = yield.exceptionType();
ExceptionalCheckBasedYield.java,Type exceptionType = super.exceptionType();,if (super != null ) Type exceptionType = super.exceptionType();
BehaviorCache.java,MethodTree declaration = symbol.declaration();,if (symbol != null ) MethodTree declaration = symbol.declaration();
BytecodeEGWalkerExecuteTest.java,long start = System.currentTimeMillis();,if (System != null ) long start = System.currentTimeMillis();
MethodBehavior.java,this.arity = methodSymbol.parameterTypes().size();,if (methodSymbol != null ) this.arity = methodSymbol.parameterTypes().size();
MethodYieldTest.java,Symbol.MethodSymbol methodSymbol = entry.getKey();,if (entry != null ) Symbol.MethodSymbol methodSymbol = entry.getKey();
MethodYieldTest.java,MethodBehavior mb = entry.getValue();,if (entry != null ) MethodBehavior mb = entry.getValue();
MethodYieldTest.java,MethodBehavior mb = entry.getValue();,if (entry != null ) MethodBehavior mb = entry.getValue();
MethodYieldTest.java,Symbol.MethodSymbol methodSymbol = entry.getKey();,if (entry != null ) Symbol.MethodSymbol methodSymbol = entry.getKey();
MethodYieldTest.java,MethodBehavior mb = entry.getValue();,if (entry != null ) MethodBehavior mb = entry.getValue();
ConstraintManager.java,ExpressionTree methodSelect = syntaxNode.methodSelect();,if (syntaxNode != null ) ExpressionTree methodSelect = syntaxNode.methodSelect();
ConstraintManager.java,Symbol.MethodSymbol symbol = (Symbol.MethodSymbol) syntaxNode.symbol();,if (syntaxNode != null ) Symbol.MethodSymbol symbol = (Symbol.MethodSymbol) syntaxNode.symbol();
BytecodeEGWalker.java,String signature = instruction.fieldOrMethod.completeSignature();,if (instruction != null ) String signature = instruction.fieldOrMethod.completeSignature();
BytecodeEGWalker.java,Type exceptionType = yield.exceptionType();,if (yield != null ) Type exceptionType = yield.exceptionType();
Resolve.java,JavaType superclass = site.getSuperType();,if (site != null ) JavaType superclass = site.getSuperType();
BytecodeCFGBuilder.java,Block entry = (Block) cfg.entry();,if (cfg != null ) Block entry = (Block) cfg.entry();
BytecodeEGWalker.java,exitBlock = bytecodeCFG.exitBlock();,if (bytecodeCFG != null ) exitBlock = bytecodeCFG.exitBlock();
BytecodeEGWalker.java,SymbolicValue symbolicValue = programState.peekValue();,if (programState != null ) SymbolicValue symbolicValue = programState.peekValue();
BytecodeEGWalker.java,String signature = instruction.fieldOrMethod.completeSignature();,if (instruction != null ) String signature = instruction.fieldOrMethod.completeSignature();
BytecodeEGWalker.java,BytecodeCFGBuilder.Instruction terminator = block.terminator();,if (block != null ) BytecodeCFGBuilder.Instruction terminator = block.terminator();
RedundantTypeCastCheck.java,Tree parent = skipParentheses(typeCastTree.parent());,if (skipParentheses(typeCastTree != null ) Tree parent = skipParentheses(typeCastTree.parent());
AtLeastOneConstructorCheck.java,Symbol symbol = variable.symbol();,if (variable != null ) Symbol symbol = variable.symbol();
UnusedMethodParameterCheck.java,boolean overideableMethod = overrideableMethod(methodTree.symbol());,if (overrideableMethod(methodTree != null ) boolean overideableMethod = overrideableMethod(methodTree.symbol());
IgnoredReturnValueCheck.java,MethodInvocationTree mit = (MethodInvocationTree) est.expression();,if (est != null ) MethodInvocationTree mit = (MethodInvocationTree) est.expression();
StringLiteralDuplicatedCheck.java,int literalOccurence = literalTrees.size();,if (literalTrees != null ) int literalOccurence = literalTrees.size();
MethodNamedEqualsCheck.java,Symbol.MethodSymbol symbol = methodTree.symbol();,if (methodTree != null ) Symbol.MethodSymbol symbol = methodTree.symbol();
MethodNamedEqualsCheck.java,Symbol.TypeSymbol enclosingClass = symbol.enclosingClass();,if (symbol != null ) Symbol.TypeSymbol enclosingClass = symbol.enclosingClass();
CompareToResultTestCheck.java,Symbol method = invocation.symbol();,if (invocation != null ) Symbol method = invocation.symbol();
CollectInsteadOfForeachCheck.java,Symbol method = methodRefIdentifier.symbol();,if (methodRefIdentifier != null ) Symbol method = methodRefIdentifier.symbol();
UnusedMethodParameterCheck.java,List<IdentifierTree> unused = Lists.newArrayList();,if (Lists != null ) List<IdentifierTree> unused = Lists.newArrayList();
UnusedMethodParameterCheck.java,Symbol symbol = var.symbol();,if (var != null ) Symbol symbol = var.symbol();
ProgramState.java,Symbol symbol = variableTree.symbol();,if (variableTree != null ) Symbol symbol = variableTree.symbol();
FlowComputation.java,Flow.Builder flowBuilder = Flow.builder();,if (Flow != null ) Flow.Builder flowBuilder = Flow.builder();
FlowComputation.java,ConstraintsByDomain allConstraints = programState.getConstraints(learnedAssociation.symbolicValue());,if (programState != null ) ConstraintsByDomain allConstraints = programState.getConstraints(learnedAssociation.symbolicValue());
FlowComputation.java,String symbolName = learnedAssociation.symbol().name();,if (learnedAssociation != null ) String symbolName = learnedAssociation.symbol().name();
BytecodeCFGBuilder.java,currentBlock = currentBlock.createFalseSuccessor();,if (currentBlock != null ) currentBlock = currentBlock.createFalseSuccessor();
CFGPrinter.java,String name = kind.name();,if (kind != null ) String name = kind.name();
CFGPrinter.java,Tree terminator = block.terminator();,if (block != null ) Tree terminator = block.terminator();
EGDotEdge.java,JsonObjectBuilder builder = Json.createObjectBuilder();,if (Json != null ) JsonObjectBuilder builder = Json.createObjectBuilder();
EGDotEdge.java,Set<LearnedConstraint> learnedConstraints = edge.learnedConstraints();,if (edge != null ) Set<LearnedConstraint> learnedConstraints = edge.learnedConstraints();
EGDotEdge.java,Set<LearnedAssociation> learnedAssociations = edge.learnedAssociations();,if (edge != null ) Set<LearnedAssociation> learnedAssociations = edge.learnedAssociations();
EGDotGraph.java,ExplodedGraphWalker.ExplodedGraphWalkerFactory egwFactory = new ExplodedGraphWalker.ExplodedGraphWalkerFactory(Collections.emptyList());,if (ExplodedGraphWalker != null ) ExplodedGraphWalker.ExplodedGraphWalkerFactory egwFactory = new ExplodedGraphWalker.ExplodedGraphWalkerFactory(Collections.emptyList());
EGDotGraph.java,this.explodedGraph = walker.getExplodedGraph();,if (walker != null ) this.explodedGraph = walker.getExplodedGraph();
EGDotNode.java,"this.methodBehavior = getMethodBehavior(behaviorCache, pp.syntaxTree());","if (pp != null ) this.methodBehavior = getMethodBehavior(behaviorCache, pp.syntaxTree());"
EGDotNode.java,JsonObjectBuilder builder = Json.createObjectBuilder();,if (Json != null ) JsonObjectBuilder builder = Json.createObjectBuilder();
EGDotNode.java,JsonArrayBuilder builder = Json.createArrayBuilder();,if (Json != null ) JsonArrayBuilder builder = Json.createArrayBuilder();
EGDotNode.java,JsonArrayBuilder builder = Json.createArrayBuilder();,if (Json != null ) JsonArrayBuilder builder = Json.createArrayBuilder();
EGDotNode.java,JsonObjectBuilder objectBuilder = Json.createObjectBuilder();,if (Json != null ) JsonObjectBuilder objectBuilder = Json.createObjectBuilder();
EGDotNode.java,JsonObjectBuilder builder = Json.createObjectBuilder();,if (Json != null ) JsonObjectBuilder builder = Json.createObjectBuilder();
JsonHelper.java,JsonArrayBuilder builder = Json.createArrayBuilder();,if (Json != null ) JsonArrayBuilder builder = Json.createArrayBuilder();
Viewer.java,String stackTrace = sw.toString();,if (sw != null ) String stackTrace = sw.toString();
CFGPrinterTest.java,Constructor<CFGPrinter> constructor = CFGPrinter.class.getDeclaredConstructor();,if (CFGPrinter != null ) Constructor<CFGPrinter> constructor = CFGPrinter.class.getDeclaredConstructor();
EGDotNodeTest.java,JsonObject details = egDotNode.details();,if (egDotNode != null ) JsonObject details = egDotNode.details();
EGDotNodeTest.java,JsonObject details = egDotNode.details();,if (egDotNode != null ) JsonObject details = egDotNode.details();
EGDotNodeTest.java,JsonObject details = egDotNode.details();,if (egDotNode != null ) JsonObject details = egDotNode.details();
EGDotNodeTest.java,JsonObject details = egDotNode.details();,if (egDotNode != null ) JsonObject details = egDotNode.details();
EGDotNodeTest.java,pp = pp.next();,if (pp != null ) pp = pp.next();
ViewerTest.java,Constructor<Viewer> constructor = Viewer.class.getDeclaredConstructor();,if (Viewer != null ) Constructor<Viewer> constructor = Viewer.class.getDeclaredConstructor();
ViewerTest.java,int localPort = serverSocket.getLocalPort();,if (serverSocket != null ) int localPort = serverSocket.getLocalPort();
StreamNotConsumedCheck.java,JavaFileScannerContext.Location location = flow.iterator().next();,if (flow != null ) JavaFileScannerContext.Location location = flow.iterator().next();
FlowComputation.java,SymbolicValue peekValue = edge.child.programState.peekValue();,if (edge != null ) SymbolicValue peekValue = edge.child.programState.peekValue();
ExceptionalCheckBasedYield.java,Tree syntaxTree = node.programPoint.syntaxTree();,if (node != null ) Tree syntaxTree = node.programPoint.syntaxTree();
ExplodedGraphWalker.java,sv = getCaughtException(variableTree.symbol().type());,if (getCaughtException(variableTree != null ) sv = getCaughtException(variableTree.symbol().type());
WrappedNativeMethodCheck.java,BlockTree block = wrapper.block();,if (wrapper != null ) BlockTree block = wrapper.block();
WrappedNativeMethodCheck.java,List<StatementTree> body = block.body();,if (block != null ) List<StatementTree> body = block.body();
EGDotNode.java,Tree syntaxTree = pp.syntaxTree();,if (pp != null ) Tree syntaxTree = pp.syntaxTree();
EGDotNode.java,JsonArrayBuilder builder = Json.createArrayBuilder();,if (Json != null ) JsonArrayBuilder builder = Json.createArrayBuilder();
EGDotNode.java,Tree syntaxTree = pp.syntaxTree();,if (pp != null ) Tree syntaxTree = pp.syntaxTree();
ParameterReassignedToCheck.java,semanticModel = (SemanticModel) context.getSemanticModel();,if (context != null ) semanticModel = (SemanticModel) context.getSemanticModel();
CFG.java,targetBlock = breakTargets.getLast();,if (breakTargets != null ) targetBlock = breakTargets.getLast();
CFG.java,targetBlock = continueTargets.getLast();,if (continueTargets != null ) targetBlock = continueTargets.getLast();
ConstantsShouldBeStaticFinalCheck.java,Tree init = variableTree.initializer();,if (variableTree != null ) Tree init = variableTree.initializer();
SynchronizedFieldAssignmentCheck.java,Symbol field = getField(sst.expression());,if (getField(sst != null ) Symbol field = getField(sst.expression());
SynchronizedFieldAssignmentCheck.java,Symbol parameter = getParam(sst.expression());,if (getParam(sst != null ) Symbol parameter = getParam(sst.expression());
MethodIdenticalImplementationsCheck.java,BlockTree block = method.block();,if (method != null ) BlockTree block = method.block();
MethodIdenticalImplementationsCheck.java,List<StatementTree> statements = block.body();,if (block != null ) List<StatementTree> statements = block.body();
HardCodedCredentialsCheck.java,IdentifierTree simpleName = tree.simpleName();,if (tree != null ) IdentifierTree simpleName = tree.simpleName();
HardCodedCredentialsCheck.java,ExpressionTree variable = tree.variable();,if (tree != null ) ExpressionTree variable = tree.variable();
HardCodedCredentialsCheck.java,List<ExpressionTree> arguments = tree.arguments();,if (tree != null ) List<ExpressionTree> arguments = tree.arguments();
BytecodeEGWalker.java,int arity = symbol.parameterTypes().size();,if (symbol != null ) int arity = symbol.parameterTypes().size();
BehaviorCache.java,Type type = symbol.owner().type();,if (symbol != null ) Type type = symbol.owner().type();
BehaviorCache.java,String name = symbol.name();,if (symbol != null ) String name = symbol.name();
BehaviorCache.java,Type type = symbol.owner().type();,if (symbol != null ) Type type = symbol.owner().type();
BehaviorCache.java,String name = symbol.name();,if (symbol != null ) String name = symbol.name();
BehaviorCache.java,Type ownerType = symbol.owner().type();,if (symbol != null ) Type ownerType = symbol.owner().type();
BehaviorCache.java,Type ownerType = symbol.owner().type();,if (symbol != null ) Type ownerType = symbol.owner().type();
BadConstantNameCheck.java,Type symbolType = variableTree.type().symbolType();,if (variableTree != null ) Type symbolType = variableTree.type().symbolType();
BadConstantNameCheck.java,BlockTree block = methodTree.block();,if (methodTree != null ) BlockTree block = methodTree.block();
BytecodeCFGBuilder.java,currentBlock = currentBlock.createSuccessor();,if (currentBlock != null ) currentBlock = currentBlock.createSuccessor();
BytecodeCFGConstructionTest.java,opcode = expected.instruction.opcode();,if (expected != null ) opcode = expected.instruction.opcode();
BytecodeCFGBuilderTest.java,BytecodeCFGBuilder.BytecodeCFG cfg = bb.cfg();,if (bb != null ) BytecodeCFGBuilder.BytecodeCFG cfg = bb.cfg();
ExplodedGraphWalker.java,programPoint = new ProgramPoint(programPoint.block.falseBlock());,if (ProgramPoint(programPoint != null ) programPoint = new ProgramPoint(programPoint.block.falseBlock());
ExplodedGraphWalker.java,Tree terminator = programPoint.block.terminator();,if (programPoint != null ) Tree terminator = programPoint.block.terminator();
CFGViewer.java,WebEngine webEngine = viewer.webView.getEngine();,if (viewer != null ) WebEngine webEngine = viewer.webView.getEngine();
EGViewer.java,WebEngine webEngine = viewer.webView.getEngine();,if (viewer != null ) WebEngine webEngine = viewer.webView.getEngine();
TreeViewer.java,WebEngine webEngine = viewer.webView.getEngine();,if (viewer != null ) WebEngine webEngine = viewer.webView.getEngine();
Viewer.java,WebEngine webEngine = webView.getEngine();,if (webView != null ) WebEngine webEngine = webView.getEngine();
Viewer.java,String text = codeArea.getText();,if (codeArea != null ) String text = codeArea.getText();
Viewer.java,styleClass = syntax.toLowerCase();,if (syntax != null ) styleClass = syntax.toLowerCase();
Viewer.java,lastKwEnd = matcher.end();,if (matcher != null ) lastKwEnd = matcher.end();
MapComputeIfAbsentOrPresentCheck.java,ProgramState psAfterInvocation = context.getState();,if (context != null ) ProgramState psAfterInvocation = context.getState();
MapComputeIfAbsentOrPresentCheck.java,SymbolicValue valueSV = psAfterInvocation.peekValue();,if (psAfterInvocation != null ) SymbolicValue valueSV = psAfterInvocation.peekValue();
MapComputeIfAbsentOrPresentCheck.java,ProgramState ps = context.getState();,if (context != null ) ProgramState ps = context.getState();
MapComputeIfAbsentOrPresentCheck.java,value = map.get(); // Compliant - not the targeted 'put' and 'get' methods,if (methods != null ) value = map.get(); // Compliant - not the targeted 'put' and 'get' methods
MapComputeIfAbsentOrPresentCheck.java,value = map.get(); // Compliant - not the targeted 'get' method,if (method != null ) value = map.get(); // Compliant - not the targeted 'get' method
ExplodedGraphWalker.java,Type symbolType = initializer.symbolType();,if (initializer != null ) Type symbolType = initializer.symbolType();
HashMapComparableKeyCheck.java,Type newClassType = newClassTree.symbolType();,if (newClassTree != null ) Type newClassType = newClassTree.symbolType();
HashMapComparableKeyCheck.java,TypeTree typeTree = newClassTree.identifier();,if (newClassTree != null ) TypeTree typeTree = newClassTree.identifier();
BadConstantNameCheck.java,Type symbolType = variableTree.type().symbolType();,if (variableTree != null ) Type symbolType = variableTree.type().symbolType();
BadConstantNameCheck.java,Modifier modifier = modifierKeywordTree.modifier();,if (modifierKeywordTree != null ) Modifier modifier = modifierKeywordTree.modifier();
NoTestInTestClassCheck.java,Type type = input.symbol().type();,if (input != null ) Type type = input.symbol().type();
NoTestInTestClassCheck.java,Stream<Symbol> members = symbol.memberSymbols().stream();,if (symbol != null ) Stream<Symbol> members = symbol.memberSymbols().stream();
NoTestInTestClassCheck.java,Type superclass = symbol.superClass();,if (symbol != null ) Type superclass = symbol.superClass();
NoTestInTestClassCheck.java,superclass = superclass.symbol().superClass();,if (superclass != null ) superclass = superclass.symbol().superClass();
NoTestInTestClassCheck.java,JavaSymbol.TypeJavaSymbol symbol = (JavaSymbol.TypeJavaSymbol) classTree.symbol();,if (classTree != null ) JavaSymbol.TypeJavaSymbol symbol = (JavaSymbol.TypeJavaSymbol) classTree.symbol();
NoTestInTestClassCheck.java,Iterable<Symbol> members = symbol.memberSymbols();,if (symbol != null ) Iterable<Symbol> members = symbol.memberSymbols();
NoTestInTestClassCheck.java,JavaType superclass = symbol.getSuperclass();,if (symbol != null ) JavaType superclass = symbol.getSuperclass();
NoTestInTestClassCheck.java,superclass = superclass.getSymbol().getSuperclass();,if (superclass != null ) superclass = superclass.getSymbol().getSuperclass();
JdbcResourcesTestFile.java,"Statement statement = connection.createStatement(); // Noncompliant {{Use try-with-resources to close this ""Statement"".}}","if (""Statement"" != null ) Statement statement = connection.createStatement(); // Noncompliant {{Use try-with-resources to close this ""Statement"".}}"
JdbcResourcesTestFile.java,"Statement statement = connection.createStatement(); // Noncompliant {{Use try-with-resources to close this ""Statement"".}}","if (""Statement"" != null ) Statement statement = connection.createStatement(); // Noncompliant {{Use try-with-resources to close this ""Statement"".}}"
JdbcResourcesTestFile.java,"ResultSet result = statement.getResultSet(); // Noncompliant {{Use try-with-resources to close this ""ResultSet"".}}","if (""ResultSet"" != null ) ResultSet result = statement.getResultSet(); // Noncompliant {{Use try-with-resources to close this ""ResultSet"".}}"
JavaClasspathTest.java,String logs = ORCHESTRATOR.executeBuild(scanner).getLogs();,if (ORCHESTRATOR != null ) String logs = ORCHESTRATOR.executeBuild(scanner).getLogs();
JdbcResourcesTestFile.java,"Statement statement = connection.createStatement(); // Noncompliant {{Close this ""Statement"" in a ""finally"" clause.}}","if (clause != null ) Statement statement = connection.createStatement(); // Noncompliant {{Close this ""Statement"" in a ""finally"" clause.}}"
JdbcResourcesTestFile.java,"Statement statement = connection.createStatement(); // Noncompliant {{Close this ""Statement"" in a ""finally"" clause.}}","if (clause != null ) Statement statement = connection.createStatement(); // Noncompliant {{Close this ""Statement"" in a ""finally"" clause.}}"
JdbcResourcesTestFile.java,"ResultSet result = statement.getResultSet(); // Noncompliant {{Close this ""ResultSet"" in a ""finally"" clause.}}","if (clause != null ) ResultSet result = statement.getResultSet(); // Noncompliant {{Close this ""ResultSet"" in a ""finally"" clause.}}"
UnclosedResourcesCheck.java,Iterator<SymbolicValue> iterator = arguments.iterator();,if (arguments != null ) Iterator<SymbolicValue> iterator = arguments.iterator();
UnclosedResourcesCheck.java,final SymbolicValue value = iterator.next();,if (iterator != null ) final SymbolicValue value = iterator.next();
UnclosedResourcesCheck.java,toClose = target.wrappedValue();,if (target != null ) toClose = target.wrappedValue();
UnclosedResourcesCheck.java,final SymbolicValue instanceValue = programState.peekValue();,if (programState != null ) final SymbolicValue instanceValue = programState.peekValue();
UnclosedResourcesCheck.java,SymbolicValue peekedValue = programState.peekValue();,if (programState != null ) SymbolicValue peekedValue = programState.peekValue();
UnclosedResourcesCheck.java,PrintStream printStream = new PrintStream(response.outputStream());,if (PrintStream(response != null ) PrintStream printStream = new PrintStream(response.outputStream());
UnclosedResourcesCheck.java,final Type type = argument.symbolType();,if (argument != null ) final Type type = argument.symbolType();
ChildClassShadowFieldCheck.java,String fieldName = v.simpleName().name();,if (v != null ) String fieldName = v.simpleName().name();
WrongAssignmentOperatorCheck.java,SyntaxToken firstToken = aeTree.expression().firstToken();,if (aeTree != null ) SyntaxToken firstToken = aeTree.expression().firstToken();
ProgramState.java,constraintsForSV = PCollections.emptyMap();,if (PCollections != null ) constraintsForSV = PCollections.emptyMap();
MethodBehavior.java,constraints = PCollections.emptyMap();,if (PCollections != null ) constraints = PCollections.emptyMap();
ExceptionalYieldChecker.java,"IdentifierTree identifierTree = FlowComputation.getArgumentIdentifier(mit, yield.parameterCausingExceptionIndex());","if (yield != null ) IdentifierTree identifierTree = FlowComputation.getArgumentIdentifier(mit, yield.parameterCausingExceptionIndex());"
TypeAndReferenceSolver.java,ClassTree classBody = tree.classBody();,if (tree != null ) ClassTree classBody = tree.classBody();
TypeAndReferenceSolver.java,anonymousClassType.interfaces = ImmutableList.of();,if (ImmutableList != null ) anonymousClassType.interfaces = ImmutableList.of();
ArrayForVarArgCheck.java,Type identifierType = id.symbolType();,if (id != null ) Type identifierType = id.symbolType();
SyntaxHighlighterVisitor.java,String text = syntaxToken.text();,if (syntaxToken != null ) String text = syntaxToken.text();
EmptyFileCheck.java,CompilationUnitTree tree = context.getTree();,if (context != null ) CompilationUnitTree tree = context.getTree();
SyntaxHighlighterVisitor.java,keywords = keywordsBuilder.build();,if (keywordsBuilder != null ) keywords = keywordsBuilder.build();
StatementVisitor.java,statements -= tree.resources().size();,if (tree != null ) statements -= tree.resources().size();
TreeFactory.java,List<AnnotationTree> annotationList = Collections.emptyList();,if (Collections != null ) List<AnnotationTree> annotationList = Collections.emptyList();
TreeFactory.java,annotationList = Collections.unmodifiableList(annotations.get());,if (Collections != null ) annotationList = Collections.unmodifiableList(annotations.get());
TreeFactory.java,List<AnnotationTree> annotationList = Collections.emptyList();,if (Collections != null ) List<AnnotationTree> annotationList = Collections.emptyList();
TreeFactory.java,annotationList = Collections.unmodifiableList(annotations.get());,if (Collections != null ) annotationList = Collections.unmodifiableList(annotations.get());
TreeFactory.java,typeArgs = typeArguments.get();,if (typeArguments != null ) typeArgs = typeArguments.get();
ModuleDeclarationTreeImplTest.java,ExpressionTree moduleName = moduleDeclaration.moduleName();,if (moduleDeclaration != null ) ExpressionTree moduleName = moduleDeclaration.moduleName();
BytecodeCompleter.java,String className = classReader.getClassName();,if (classReader != null ) String className = classReader.getClassName();
CastArithmeticOperandCheck.java,varType = aet.symbolType();,if (aet != null ) varType = aet.symbolType();
CastArithmeticOperandCheck.java,expr = aet.expression();,if (aet != null ) expr = aet.expression();
CastArithmeticOperandCheck.java,varType = variableTree.type().symbolType();,if (variableTree != null ) varType = variableTree.type().symbolType();
CastArithmeticOperandCheck.java,expr = variableTree.initializer();,if (variableTree != null ) expr = variableTree.initializer();
JdbcResourcesTestFile.java,"Statement statement = connection.createStatement(); // Noncompliant {{Close this ""Statement"".}}","if (""Statement"" != null ) Statement statement = connection.createStatement(); // Noncompliant {{Close this ""Statement"".}}"
JdbcResourcesTestFile.java,"Statement statement = connection.createStatement(); // Noncompliant {{Close this ""Statement"".}}","if (""Statement"" != null ) Statement statement = connection.createStatement(); // Noncompliant {{Close this ""Statement"".}}"
JdbcResourcesTestFile.java,"ResultSet result = statement.getResultSet(); // Noncompliant {{Close this ""ResultSet"".}}","if (""ResultSet"" != null ) ResultSet result = statement.getResultSet(); // Noncompliant {{Close this ""ResultSet"".}}"
FlowComputation.java,String symbolName = learnedAssociation.symbol().name();,if (learnedAssociation != null ) String symbolName = learnedAssociation.symbol().name();
JavaRulingTest.java,String profilekey = matcher.group();,if (matcher != null ) String profilekey = matcher.group();
FlowComputation.java,Symbol symbol = programState.lastAssociatedSymbols.get(la.symbolicValue());,if (programState != null ) Symbol symbol = programState.lastAssociatedSymbols.get(la.symbolicValue());
ProgramState.java,List<SymbolicValue> result = Lists.newArrayList();,if (Lists != null ) List<SymbolicValue> result = Lists.newArrayList();
ExceptionalYieldChecker.java,symbolToTrack = identifierTree.symbol();,if (identifierTree != null ) symbolToTrack = identifierTree.symbol();
EGViewer.java,"SemanticModel semanticModel = SemanticModel.createFor(cut, Lists.newArrayList());","if (Lists != null ) SemanticModel semanticModel = SemanticModel.createFor(cut, Lists.newArrayList());"
ExplodedGraphWalker.java,ps.lastEvaluated = programState.getLastEvaluated();,if (programState != null ) ps.lastEvaluated = programState.getLastEvaluated();
ProgramStateDataProvider.java,Symbol lastEvaluatedSymbol = ps.getLastEvaluated();,if (ps != null ) Symbol lastEvaluatedSymbol = ps.getLastEvaluated();
UselessParenthesesCheck.java,Tree parentTree = tree.parent();,if (tree != null ) Tree parentTree = tree.parent();
UselessParenthesesCheck.java,Tree grandParentTree = parentTree.parent();,if (parentTree != null ) Tree grandParentTree = parentTree.parent();
PrintfCheck.java,Iterator<String> iter = params.iterator();,if (params != null ) Iterator<String> iter = params.iterator();
PrintfCheck.java,String param = iter.next();,if (iter != null ) String param = iter.next();
PrintfCheck.java,Type argType = argExpressionTree.symbolType();,if (argExpressionTree != null ) Type argType = argExpressionTree.symbolType();
PrintfCheck.java,String specifier = param.toString();,if (param != null ) String specifier = param.toString();
ForLoopIncrementAndUpdateCheck.java,List<String> names = Lists.newArrayList();,if (Lists != null ) List<String> names = Lists.newArrayList();
ForLoopIncrementAndUpdateCheck.java,Collection<Symbol> symbols = Lists.newArrayList();,if (Lists != null ) Collection<Symbol> symbols = Lists.newArrayList();
ForLoopIncrementAndUpdateCheck.java,conditionNames = Lists.newArrayList();,if (Lists != null ) conditionNames = Lists.newArrayList();
ForLoopIncrementAndUpdateCheck.java,shouldRaiseIssue = !updateSymbols.isEmpty();,if (!updateSymbols != null ) shouldRaiseIssue = !updateSymbols.isEmpty();
ForLoopIncrementAndUpdateCheck.java,MemberSelectExpressionTree mset = (MemberSelectExpressionTree) tree.methodSelect();,if (tree != null ) MemberSelectExpressionTree mset = (MemberSelectExpressionTree) tree.methodSelect();
ForLoopIncrementAndUpdateCheck.java,ExpressionTree expression = mset.expression();,if (mset != null ) ExpressionTree expression = mset.expression();
ForLoopIncrementAndUpdateCheck.java,Symbol reference = tree.symbol();,if (tree != null ) Symbol reference = tree.symbol();
ForLoopIncrementAndUpdateCheck.java,String name = tree.name();,if (tree != null ) String name = tree.name();
IdenticalCasesInSwitchCheck.java,Set<CaseLabelTree> reportedLabels = Sets.newHashSet();,if (Sets != null ) Set<CaseLabelTree> reportedLabels = Sets.newHashSet();
IdenticalCasesInSwitchCheck.java,StatementTree thenStatement = node.thenStatement();,if (node != null ) StatementTree thenStatement = node.thenStatement();
ConditionAlwaysTrueOrFalseCheck.java,EvaluatedConditions ec = evaluatedConditions.pop();,if (evaluatedConditions != null ) EvaluatedConditions ec = evaluatedConditions.pop();
Resolve.java,String methodName = tree.method().name();,if (tree != null ) String methodName = tree.method().name();
SymbolTableTest.java,MethodJavaType methodJavaType = (MethodJavaType) map.symbolType();,if (map != null ) MethodJavaType methodJavaType = (MethodJavaType) map.symbolType();
SymbolTableTest.java,MethodJavaType mapJavaType = (MethodJavaType) map.symbolType();,if (map != null ) MethodJavaType mapJavaType = (MethodJavaType) map.symbolType();
SymbolTableTest.java,MethodJavaType flatMapJavaType = (MethodJavaType) flatMap.symbolType();,if (flatMap != null ) MethodJavaType flatMapJavaType = (MethodJavaType) flatMap.symbolType();
TypeAndReferenceSolver.java,Tree methodSelect = tree.methodSelect();,if (tree != null ) Tree methodSelect = tree.methodSelect();
ClassJavaType.java,ClassJavaType superClassType = (ClassJavaType) symbol.superClass();,if (symbol != null ) ClassJavaType superClassType = (ClassJavaType) symbol.superClass();
ParametrizedTypeJavaType.java,JavaType superclass = symbol.getSuperclass();,if (symbol != null ) JavaType superclass = symbol.getSuperclass();
Resolve.java,JavaType superclass = site.getSymbol().getSuperclass();,if (site != null ) JavaType superclass = site.getSymbol().getSuperclass();
Resolve.java,JavaType superclass = site.getSymbol().getSuperclass();,if (site != null ) JavaType superclass = site.getSymbol().getSuperclass();
MethodNamedEqualsCheck.java,List<VariableTree> parameters = methodTree.parameters();,if (methodTree != null ) List<VariableTree> parameters = methodTree.parameters();
AssignmentInSubExpressionCheck.java,ExpressionTree expressionTree = tree.expression();,if (tree != null ) ExpressionTree expressionTree = tree.expression();
AssignmentInSubExpressionCheck.java,expressionTree = assignmentExpressionTree.expression();,if (assignmentExpressionTree != null ) expressionTree = assignmentExpressionTree.expression();
CognitiveComplexityMethodCheck.java,ExpressionTree left = ExpressionUtils.skipParentheses(binaryExpr.leftOperand());,if (ExpressionUtils != null ) ExpressionTree left = ExpressionUtils.skipParentheses(binaryExpr.leftOperand());
CognitiveComplexityMethodCheck.java,ExpressionTree right = ExpressionUtils.skipParentheses(binaryExpr.rightOperand());,if (ExpressionUtils != null ) ExpressionTree right = ExpressionUtils.skipParentheses(binaryExpr.rightOperand());
UselessParenthesesCheck.java,Tree parentTree = this.parent.peek();,if (this != null ) Tree parentTree = this.parent.peek();
MembersDifferOnlyByCapitalizationCheck.java,Symbol conflictingSymbol = conflictingMember.get();,if (conflictingMember != null ) Symbol conflictingSymbol = conflictingMember.get();
MissingNewLineAtEndOfFileCheck.java,String content = context.getFileContent();,if (context != null ) String content = context.getFileContent();
CognitiveComplexityMethodCheck.java,ExpressionTree left = ExpressionUtils.skipParentheses(tree.leftOperand());,if (ExpressionUtils != null ) ExpressionTree left = ExpressionUtils.skipParentheses(tree.leftOperand());
CognitiveComplexityMethodCheck.java,ExpressionTree right = ExpressionUtils.skipParentheses(tree.rightOperand());,if (ExpressionUtils != null ) ExpressionTree right = ExpressionUtils.skipParentheses(tree.rightOperand());
UnusedPrivateFieldCheck.java,Tree parent = identifier.parent();,if (identifier != null ) Tree parent = identifier.parent();
UnusedPrivateFieldCheck.java,parent = current.parent();,if (current != null ) parent = current.parent();
ExplodedGraphWalker.java,BlockTree body = tree.block();,if (tree != null ) BlockTree body = tree.block();
UnusedPrivateMethodCheck.java,Symbol symbol = node.symbol();,if (node != null ) Symbol symbol = node.symbol();
JavaSquidTest.java,File file = temp.newFile().getCanonicalFile();,if (temp != null ) File file = temp.newFile().getCanonicalFile();
SonarSymbolTableVisitorTest.java,File file = temp.newFile().getCanonicalFile();,if (temp != null ) File file = temp.newFile().getCanonicalFile();
SyntaxHighlighterVisitorTest.java,File file = temp.newFile().getCanonicalFile();,if (temp != null ) File file = temp.newFile().getCanonicalFile();
SyntaxHighlighterVisitorTest.java,File file = temp.newFile().getCanonicalFile();,if (temp != null ) File file = temp.newFile().getCanonicalFile();
RedundantThrowsDeclarationCheck.java,Type symbolType = typeTree.symbolType();,if (typeTree != null ) Type symbolType = typeTree.symbolType();
RedundantThrowsDeclarationCheck.java,String fullyQualifiedName = symbolType.fullyQualifiedName();,if (symbolType != null ) String fullyQualifiedName = symbolType.fullyQualifiedName();
RelationalSymbolicValue.java,RelationalSymbolicValue relation = workList.pop();,if (workList != null ) RelationalSymbolicValue relation = workList.pop();
ProgramState.java,BinaryRelation relation = symbolicValue.binaryRelation();,if (symbolicValue != null ) BinaryRelation relation = symbolicValue.binaryRelation();
BinaryRelation.java,BinaryRelation relation = workList.pop();,if (workList != null ) BinaryRelation relation = workList.pop();
SymbolTableTest.java,Type symbolType = flatMap.symbolType();,if (flatMap != null ) Type symbolType = flatMap.symbolType();
SymbolTableTest.java,JavaType mapType = (JavaType) map.symbolType();,if (map != null ) JavaType mapType = (JavaType) map.symbolType();
JavaSquidTest.java,File file = temp.newFile();,if (temp != null ) File file = temp.newFile();
SonarSymbolTableVisitorTest.java,File file = temp.newFile();,if (temp != null ) File file = temp.newFile();
SyntaxHighlighterVisitorTest.java,File file = temp.newFile();,if (temp != null ) File file = temp.newFile();
SyntaxHighlighterVisitorTest.java,File file = temp.newFile();,if (temp != null ) File file = temp.newFile();
CastArithmeticOperandCheck.java,varType = aet.symbolType();,if (aet != null ) varType = aet.symbolType();
CastArithmeticOperandCheck.java,expr = aet.expression();,if (aet != null ) expr = aet.expression();
CastArithmeticOperandCheck.java,varType = variableTree.type().symbolType();,if (variableTree != null ) varType = variableTree.type().symbolType();
CastArithmeticOperandCheck.java,expr = variableTree.initializer();,if (variableTree != null ) expr = variableTree.initializer();
PomCheckContextImpl.java,XmlLocation startLocation = location.tree.startLocation();,if (location != null ) XmlLocation startLocation = location.tree.startLocation();
PomCheckContextImpl.java,XmlLocation endLocation = location.tree.endLocation();,if (location != null ) XmlLocation endLocation = location.tree.endLocation();
ConstraintManager.java,SymbolicValue result = new SymbolicValue.NotSymbolicValue();,if (SymbolicValue != null ) SymbolicValue result = new SymbolicValue.NotSymbolicValue();
BinaryRelationsTest.java,BinaryRelation inverseOfInverse = relation.inverse().inverse();,if (relation != null ) BinaryRelation inverseOfInverse = relation.inverse().inverse();
BinaryRelationsTest.java,BinaryRelation symmetricOfSymmetric = relation.symmetric().symmetric();,if (relation != null ) BinaryRelation symmetricOfSymmetric = relation.symmetric().symmetric();
ExplodedGraphWalker.java,ExpressionTree variable = tree.variable();,if (tree != null ) ExpressionTree variable = tree.variable();
OverrideAnnotationCheck.java,int javaIntVersion = javaVersion.asInt();,if (javaVersion != null ) int javaIntVersion = javaVersion.asInt();
JavaSquid.java,ActionParser<Tree> parser = JavaParser.createParser(conf.getCharset());,if (JavaParser != null ) ActionParser<Tree> parser = JavaParser.createParser(conf.getCharset());
JavaSquidSensor.java,Charset charset = fs.encoding();,if (fs != null ) Charset charset = fs.encoding();
SonarComponentsTest.java,"DefaultInputFile inputFile = new DefaultInputFile("""", file.getPath());","if (file != null ) DefaultInputFile inputFile = new DefaultInputFile("""", file.getPath());"
SunPackagesUsedCheck.java,int line = tree.firstToken().line();,if (tree != null ) int line = tree.firstToken().line();
JavaSymbol.java,ClassJavaType superClassType = (ClassJavaType) this.superClass();,if (this != null ) ClassJavaType superClassType = (ClassJavaType) this.superClass();
JavaSymbol.java,TypeJavaSymbol superClassSymbol = superClassType.getSymbol();,if (superClassType != null ) TypeJavaSymbol superClassSymbol = superClassType.getSymbol();
JavaSymbol.java,superClassType = (ClassJavaType) superClassSymbol.superClass();,if (superClassSymbol != null ) superClassType = (ClassJavaType) superClassSymbol.superClass();
ReplaceLambdaByMethodRefCheck.java,MemberSelectExpressionTree mse = (MemberSelectExpressionTree) mit.methodSelect();,if (mit != null ) MemberSelectExpressionTree mse = (MemberSelectExpressionTree) mit.methodSelect();
ReplaceLambdaByMethodRefCheck.java,mse = (MemberSelectExpressionTree) mse.expression();,if (mse != null ) mse = (MemberSelectExpressionTree) mse.expression();
EGViewer.java,ExplodedGraph.Node firstParent = node.parent();,if (node != null ) ExplodedGraph.Node firstParent = node.parent();
EGViewer.java,int nbParents = parents.size();,if (parents != null ) int nbParents = parents.size();
FlowComputation.java,Symbol trackSymbol = currentNode.programState.getLastEvaluated();,if (currentNode != null ) Symbol trackSymbol = currentNode.programState.getLastEvaluated();
EGViewer.java,SymbolicExecutionVisitor sev = new SymbolicExecutionVisitor(Lists.newArrayList());,if (SymbolicExecutionVisitor(Lists != null ) SymbolicExecutionVisitor sev = new SymbolicExecutionVisitor(Lists.newArrayList());
FlowComputation.java,LearnedAssociation la = learnedAssociation.get();,if (learnedAssociation != null ) LearnedAssociation la = learnedAssociation.get();
FlowComputation.java,Set<LearnedConstraint> learnedConstraints = edge.learnedConstraints();,if (edge != null ) Set<LearnedConstraint> learnedConstraints = edge.learnedConstraints();
FlowComputation.java,Symbol trackSymbol = currentNode.programState.getLastEvaluated();,if (currentNode != null ) Symbol trackSymbol = currentNode.programState.getLastEvaluated();
FlowComputation.java,NodeSymbol nodeSymbol = workList.pop();,if (workList != null ) NodeSymbol nodeSymbol = workList.pop();
FlowComputation.java,ExplodedGraph.Node parent = currentNode.parent();,if (currentNode != null ) ExplodedGraph.Node parent = currentNode.parent();
FlowComputation.java,Tree nodeTree = parent.programPoint.syntaxTree();,if (parent != null ) Tree nodeTree = parent.programPoint.syntaxTree();
FlowComputation.java,SymbolicValue returnSV = currentNode.programState.peekValue();,if (currentNode != null ) SymbolicValue returnSV = currentNode.programState.peekValue();
FlowComputation.java,ExplodedGraph.Node parent = currentNode.parent();,if (currentNode != null ) ExplodedGraph.Node parent = currentNode.parent();
FlowComputation.java,LearnedAssociation la = learnedAssociation.get();,if (learnedAssociation != null ) LearnedAssociation la = learnedAssociation.get();
FlowComputation.java,FlowComputation left = fork(binarySV.getLeftOp());,if (fork(binarySV != null ) FlowComputation left = fork(binarySV.getLeftOp());
FlowComputation.java,FlowComputation right = fork(binarySV.getRightOp());,if (fork(binarySV != null ) FlowComputation right = fork(binarySV.getRightOp());
DivisionByZeroCheck.java,ExplodedGraph.Node exitNode = context.getNode();,if (context != null ) ExplodedGraph.Node exitNode = context.getNode();
DivisionByZeroCheck.java,ExpressionTree methodSelect = mit.methodSelect();,if (mit != null ) ExpressionTree methodSelect = mit.methodSelect();
NullDereferenceCheck.java,ExplodedGraph.Node exitNode = context.getNode();,if (context != null ) ExplodedGraph.Node exitNode = context.getNode();
NullDereferenceCheck.java,ExpressionTree methodSelect = mit.methodSelect();,if (mit != null ) ExpressionTree methodSelect = mit.methodSelect();
OptionalGetBeforeIsPresentCheck.java,ExplodedGraph.Node exitNode = context.getNode();,if (context != null ) ExplodedGraph.Node exitNode = context.getNode();
OptionalGetBeforeIsPresentCheck.java,ExpressionTree methodSelect = mit.methodSelect();,if (mit != null ) ExpressionTree methodSelect = mit.methodSelect();
OptionalGetBeforeIsPresentCheck.java,String identifier = getIdentifierPart(tree.methodSelect());,if (getIdentifierPart(tree != null ) String identifier = getIdentifierPart(tree.methodSelect());
ExplodedGraphWalker.java,"programState = programState.addConstraint(val, ObjectConstraint.notNull());","if (ObjectConstraint != null ) programState = programState.addConstraint(val, ObjectConstraint.notNull());"
ExplodedGraphWalker.java,"programState = programState.addConstraint(sv, ObjectConstraint.notNull());","if (ObjectConstraint != null ) programState = programState.addConstraint(sv, ObjectConstraint.notNull());"
ExplodedGraphWalker.java,"programState = svNewArray.setSingleConstraint(programState, ObjectConstraint.notNull());","if (ObjectConstraint != null ) programState = svNewArray.setSingleConstraint(programState, ObjectConstraint.notNull());"
ExplodedGraphWalker.java,"programState = svNewClass.setSingleConstraint(programState, ObjectConstraint.notNull());","if (ObjectConstraint != null ) programState = svNewClass.setSingleConstraint(programState, ObjectConstraint.notNull());"
ExplodedGraphWalker.java,"List<ProgramState> programStates = symbolicValue.setConstraint(programState, ObjectConstraint.notNull());","if (ObjectConstraint != null ) List<ProgramState> programStates = symbolicValue.setConstraint(programState, ObjectConstraint.notNull());"
ExplodedGraphWalker.java,"List<ProgramState> programStates = symbolicValue.setConstraint(programState, ObjectConstraint.notNull());","if (ObjectConstraint != null ) List<ProgramState> programStates = symbolicValue.setConstraint(programState, ObjectConstraint.notNull());"
ExplodedGraphWalker.java,"programState = programState.addConstraint(sv, ObjectConstraint.nullConstraint());","if (ObjectConstraint != null ) programState = programState.addConstraint(sv, ObjectConstraint.nullConstraint());"
ExplodedGraphWalker.java,"programState = programState.addConstraint(sv, ObjectConstraint.notNull());","if (ObjectConstraint != null ) programState = programState.addConstraint(sv, ObjectConstraint.notNull());"
FlowComputation.java,Constraint constraint = parent.programState.getConstraint(la.symbolicValue());,if (parent != null ) Constraint constraint = parent.programState.getConstraint(la.symbolicValue());
ProgramState.java,final Object constraint = getConstraint(value.wrappedValue());,if (getConstraint(value != null ) final Object constraint = getConstraint(value.wrappedValue());
OptionalGetBeforeIsPresentCheck.java,optionalConstraint = ObjectConstraint.notNull();,if (ObjectConstraint != null ) optionalConstraint = ObjectConstraint.notNull();
UnclosedResourcesCheck.java,ResourceWrapperSymbolicValue rValue = (ResourceWrapperSymbolicValue) constrainedValue.getKey();,if (constrainedValue != null ) ResourceWrapperSymbolicValue rValue = (ResourceWrapperSymbolicValue) constrainedValue.getKey();
SymbolicValue.java,"List<ProgramState> ps = operand.setConstraint(programState, ObjectConstraint.notNull());","if (ObjectConstraint != null ) List<ProgramState> ps = operand.setConstraint(programState, ObjectConstraint.notNull());"
ProgramStateTest.java,"child = child.addConstraint(sv, ObjectConstraint.nullConstraint());","if (ObjectConstraint != null ) child = child.addConstraint(sv, ObjectConstraint.nullConstraint());"
ProgramStateTest.java,LearnedConstraint learnedConstraint = learnedConstraints.iterator().next();,if (learnedConstraints != null ) LearnedConstraint learnedConstraint = learnedConstraints.iterator().next();
MethodYieldTest.java,Symbol.MethodSymbol methodSymbol = entry.getKey();,if (entry != null ) Symbol.MethodSymbol methodSymbol = entry.getKey();
MethodYieldTest.java,MethodBehavior mb = entry.getValue();,if (entry != null ) MethodBehavior mb = entry.getValue();
ExplodedGraphWalker.java,ExplodedGraph.Node workListFirstNode = workList.peekFirst();,if (workList != null ) ExplodedGraph.Node workListFirstNode = workList.peekFirst();
MethodYieldTest.java,List<MethodYield> yields = entry.getValue().yields();,if (entry != null ) List<MethodYield> yields = entry.getValue().yields();
MethodYieldTest.java,List<MethodYield> yields = entry.getValue().yields();,if (entry != null ) List<MethodYield> yields = entry.getValue().yields();
MethodYieldTest.java,List<MethodYield> yields = entry.getValue().yields();,if (entry != null ) List<MethodYield> yields = entry.getValue().yields();
ExplodedGraphWalkerTest.java,SymbolicValue peekValue = programState.peekValue();,if (programState != null ) SymbolicValue peekValue = programState.peekValue();
ExplodedGraphWalkerTest.java,Type exceptionType = exceptionSV.exceptionType();,if (exceptionSV != null ) Type exceptionType = exceptionSV.exceptionType();
ExplodedGraphWalkerTest.java,int workListSize = workList.size();,if (workList != null ) int workListSize = workList.size();
ExplodedGraphWalkerTest.java,firstExceptionalNode = workList.peekFirst();,if (workList != null ) firstExceptionalNode = workList.peekFirst();
ExplodedGraphWalkerTest.java,int workListSize = workList.size();,if (workList != null ) int workListSize = workList.size();
SymbolicExecutionVisitorTest.java,List<MethodYield> yields = mb.yields();,if (mb != null ) List<MethodYield> yields = mb.yields();
SymbolicExecutionVisitorTest.java,List<MethodYield> qixYield = qix.yields();,if (qix != null ) List<MethodYield> qixYield = qix.yields();
SymbolicExecutionVisitor.java,MethodTree declaration = symbol.declaration();,if (symbol != null ) MethodTree declaration = symbol.declaration();
SymbolicExecutionVisitor.java,String name = symbol.name();,if (symbol != null ) String name = symbol.name();
SymbolicExecutionVisitor.java,Type ownerType = symbol.owner().type();,if (symbol != null ) Type ownerType = symbol.owner().type();
SymbolicExecutionVisitor.java,int arity = symbol.parameterTypes().size();,if (symbol != null ) int arity = symbol.parameterTypes().size();
SymbolicExecutionVisitor.java,int arity = symbol.parameterTypes().size();,if (symbol != null ) int arity = symbol.parameterTypes().size();
SymbolicExecutionVisitor.java,int arity = symbol.parameterTypes().size();,if (symbol != null ) int arity = symbol.parameterTypes().size();
MethodBehavior.java,int arity = parameters.size();,if (parameters != null ) int arity = parameters.size();
MethodBehavior.java,SymbolicValue resultSV = node.programState.exitValue();,if (node != null ) SymbolicValue resultSV = node.programState.exitValue();
MethodYield.java,sv = svSupplier.get();,if (svSupplier != null ) sv = svSupplier.get();
MethodYieldTest.java,List<MethodYield> yields = entry.getValue().yields();,if (entry != null ) List<MethodYield> yields = entry.getValue().yields();
MethodYieldTest.java,otherYield.resultConstraint = ObjectConstraint.notNull();,if (ObjectConstraint != null ) otherYield.resultConstraint = ObjectConstraint.notNull();
MethodYieldTest.java,yield.resultConstraint = ObjectConstraint.notNull();,if (ObjectConstraint != null ) yield.resultConstraint = ObjectConstraint.notNull();
MethodYieldTest.java,otherYield.resultConstraint = ObjectConstraint.notNull();,if (ObjectConstraint != null ) otherYield.resultConstraint = ObjectConstraint.notNull();
MethodYieldTest.java,MethodYield runtimeExceptionYield = runtimeException.get();,if (runtimeException != null ) MethodYield runtimeExceptionYield = runtimeException.get();
MethodYieldTest.java,MethodYield implicitExceptionYield = implicitException.get();,if (implicitException != null ) MethodYield implicitExceptionYield = implicitException.get();
MethodYieldTest.java,MethodYield explicitExceptionYield = explicitException.get();,if (explicitException != null ) MethodYield explicitExceptionYield = explicitException.get();
ExplodedGraphWalker.java,programState = programState.cleanupConstraints();,if (programState != null ) programState = programState.cleanupConstraints();
NullDereferenceCheck.java,SymbolicValue currentVal = context.getState().peekValue();,if (context != null ) SymbolicValue currentVal = context.getState().peekValue();
NullDereferenceCheck.java,toCheck = methodInvocation.methodSelect();,if (methodInvocation != null ) toCheck = methodInvocation.methodSelect();
NullDereferenceCheck.java,int numberArguments = methodInvocation.arguments().size();,if (methodInvocation != null ) int numberArguments = methodInvocation.arguments().size();
FlowComputation.java,Constraint constraint = parent.programState.getConstraint(lv.getSv());,if (parent != null ) Constraint constraint = parent.programState.getConstraint(lv.getSv());
TypeAndReferenceSolver.java,JavaType methodRefType = (JavaType) methodRefTree.symbolType();,if (methodRefTree != null ) JavaType methodRefType = (JavaType) methodRefTree.symbolType();
TypeAndReferenceSolver.java,JavaSymbol methodSymbol = resolution.symbol();,if (resolution != null ) JavaSymbol methodSymbol = resolution.symbol();
TypeAndReferenceSolver.java,IdentifierTree methodIdentifier = methodRefTree.method();,if (methodRefTree != null ) IdentifierTree methodIdentifier = methodRefTree.method();
NestedTryCatchCheck.java,int size = nestingLevel.size();,if (nestingLevel != null ) int size = nestingLevel.size();
FlowComputation.java,Tree syntaxTree = parent.programPoint.syntaxTree();,if (parent != null ) Tree syntaxTree = parent.programPoint.syntaxTree();
FlowComputation.java,Tree nodeTree = parent.programPoint.syntaxTree();,if (parent != null ) Tree nodeTree = parent.programPoint.syntaxTree();
FlowComputation.java,Type exceptionType = selectedMethodYield.exceptionType();,if (selectedMethodYield != null ) Type exceptionType = selectedMethodYield.exceptionType();
SymbolicExecutionVisitor.java,MethodBehavior methodBehavior = new MethodBehavior(methodTree.symbol());,if (MethodBehavior(methodTree != null ) MethodBehavior methodBehavior = new MethodBehavior(methodTree.symbol());
EGViewer.java,int nbParents = node.getParents().size();,if (node != null ) int nbParents = node.getParents().size();
ExplodedGraphWalker.java,ExpressionTree initializer = variableTree.initializer();,if (variableTree != null ) ExpressionTree initializer = variableTree.initializer();
ExplodedGraphWalker.java,Type variableType = variableTree.symbol().type();,if (variableTree != null ) Type variableType = variableTree.symbol().type();
MethodBehavior.java,SymbolicValue resultSV = programState.exitValue();,if (programState != null ) SymbolicValue resultSV = programState.exitValue();
FlowComputation.java,Tree nodeTree = currentNode.programPoint.syntaxTree();,if (currentNode != null ) Tree nodeTree = currentNode.programPoint.syntaxTree();
NullCheckSymbolicValue.java,ObjectConstraint constraint = ObjectConstraint.nullConstraint();,if (ObjectConstraint != null ) ObjectConstraint constraint = ObjectConstraint.nullConstraint();
NullCheckSymbolicValue.java,constraint = ObjectConstraint.notNull();,if (ObjectConstraint != null ) constraint = ObjectConstraint.notNull();
ExplodedGraphWalker.java,Tree declaration = methodSymbol.declaration();,if (methodSymbol != null ) Tree declaration = methodSymbol.declaration();
SymbolicExecutionVisitor.java,MethodBehavior methodBehavior = behaviorCache.get(methodTree.symbol());,if (behaviorCache != null ) MethodBehavior methodBehavior = behaviorCache.get(methodTree.symbol());
SymbolicExecutionVisitor.java,methodBehavior = new MethodBehavior(methodTree.symbol());,if (MethodBehavior(methodTree != null ) methodBehavior = new MethodBehavior(methodTree.symbol());
MethodBehavior.java,List<SymbolicValue> parameterSymbolicValues = new ArrayList<>(parameters.values());,if (ArrayList<>(parameters != null ) List<SymbolicValue> parameterSymbolicValues = new ArrayList<>(parameters.values());
MethodSignatureScanner.java,String name = methodTree.simpleName().name();,if (methodTree != null ) String name = methodTree.simpleName().name();
MethodSignatureScanner.java,returnTypeParam = getParameter(methodTree.returnType());,if (getParameter(methodTree != null ) returnTypeParam = getParameter(methodTree.returnType());
MethodSignatureScanner.java,List<Parameter> argumentTypes = Lists.newArrayList();,if (Lists != null ) List<Parameter> argumentTypes = Lists.newArrayList();
ParameterTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
JaCoCoControllerTest.java,SonarClient sonarClient = orchestrator.getServer().adminWsClient();,if (orchestrator != null ) SonarClient sonarClient = orchestrator.getServer().adminWsClient();
ObjectConstraint.java,"return status == null ? """" : status.valueAsString();","if (status != null ) return status == null ? """" : status.valueAsString();"
UnclosedResourcesCheck.java,final Tree parent = syntaxNode.parent();,if (syntaxNode != null ) final Tree parent = syntaxNode.parent();
IndentationCheck.java,SyntaxToken firstToken = tree.firstToken();,if (tree != null ) SyntaxToken firstToken = tree.firstToken();
IndentationCheck.java,int previousTokenLine = getPreviousToken(lambdaExpressionTree).line();,if (getPreviousToken(lambdaExpressionTree) != null ) int previousTokenLine = getPreviousToken(lambdaExpressionTree).line();
IndentationCheck.java,int lambdaFirstTokenLine = lambdaExpressionTree.firstToken().line();,if (lambdaExpressionTree != null ) int lambdaFirstTokenLine = lambdaExpressionTree.firstToken().line();
IndentationCheck.java,lastCheckedLine = tree.lastToken().line();,if (tree != null ) lastCheckedLine = tree.lastToken().line();
IndentationCheck.java,lastCheckedLine = previousCaseLabelTree.lastToken().line();,if (previousCaseLabelTree != null ) lastCheckedLine = previousCaseLabelTree.lastToken().line();
IndentationCheck.java,lastCheckedLine = tree.lastToken().line();,if (tree != null ) lastCheckedLine = tree.lastToken().line();
CheckVerifier.java,boolean isLinear = isLinear(issues.iterator().next());,if (isLinear(issues != null ) boolean isLinear = isLinear(issues.iterator().next());
InvalidDateValuesCheck.java,Symbol reference = mse.identifier().symbol();,if (mse != null ) Symbol reference = mse.identifier().symbol();
ExplodedGraphWalker.java,"programState = programState.addConstraint(resultValue, ObjectConstraint.notNull());","if (ObjectConstraint != null ) programState = programState.addConstraint(resultValue, ObjectConstraint.notNull());"
JavaCheckVerifier.java,Object act = actual.next();,if (actual != null ) Object act = actual.next();
JavaCheckVerifier.java,Object exp = expected.next();,if (expected != null ) Object exp = expected.next();
JaCoCoSensor.java,boolean foundReport = report.isFile();,if (report != null ) boolean foundReport = report.isFile();
FileLinesVisitor.java,FileLinesContext fileLinesContext = sonarComponents.fileLinesContextFor(context.getFile());,if (sonarComponents != null ) FileLinesContext fileLinesContext = sonarComponents.fileLinesContextFor(context.getFile());
MethodBehavior.java,SymbolicValue resultSV = programState.returnValue();,if (programState != null ) SymbolicValue resultSV = programState.returnValue();
ExplodedGraphWalker.java,node = workList.removeFirst();,if (workList != null ) node = workList.removeFirst();
SECheck.java,Symbol lastEvaluated = currentNode.programState.getLastEvaluated();,if (currentNode != null ) Symbol lastEvaluated = currentNode.programState.getLastEvaluated();
SECheck.java,node = node.parent();,if (node != null ) node = node.parent();
SECheck.java,lastEvaluated = finalNode.parent().programState.getLastEvaluated();,if (finalNode != null ) lastEvaluated = finalNode.parent().programState.getLastEvaluated();
AnonymousClassesTooBigCheck.java,int startLine = classTree.openBraceToken().line();,if (classTree != null ) int startLine = classTree.openBraceToken().line();
AnonymousClassesTooBigCheck.java,int endline = classTree.closeBraceToken().line();,if (classTree != null ) int endline = classTree.closeBraceToken().line();
AnonymousClassesTooBigCheck.java,Tree body = lambdaExpressionTree.body();,if (lambdaExpressionTree != null ) Tree body = lambdaExpressionTree.body();
AnonymousClassesTooBigCheck.java,SyntaxToken firstSyntaxToken = body.firstToken();,if (body != null ) SyntaxToken firstSyntaxToken = body.firstToken();
AnonymousClassesTooBigCheck.java,SyntaxToken lastSyntaxToken = body.lastToken();,if (body != null ) SyntaxToken lastSyntaxToken = body.lastToken();
SwitchCaseTooBigCheck.java,List<CaseLabelTree> labels = caseGroupTree.labels();,if (caseGroupTree != null ) List<CaseLabelTree> labels = caseGroupTree.labels();
SwitchCaseTooBigCheck.java,List<SyntaxTrivia> trivias = firstStatement.firstToken().trivias();,if (firstStatement != null ) List<SyntaxTrivia> trivias = firstStatement.firstToken().trivias();
SwitchCaseTooBigCheck.java,int switchLastLine = line(switchStatementTree.closeBraceToken());,if (line(switchStatementTree != null ) int switchLastLine = line(switchStatementTree.closeBraceToken());
SwitchCaseTooBigCheck.java,List<CaseGroupTree> cases = switchStatementTree.cases();,if (switchStatementTree != null ) List<CaseGroupTree> cases = switchStatementTree.cases();
InnerClassTooManyLinesCheck.java,int first = node.firstToken().line();,if (node != null ) int first = node.firstToken().line();
InnerClassTooManyLinesCheck.java,int last = node.lastToken().line();,if (node != null ) int last = node.lastToken().line();
TooManyLinesOfCodeInFileCheck.java,int lines = token.line();,if (token != null ) int lines = token.line();
MethodBehavior.java,MethodYield yield = new MethodYield(parameters.size());,if (MethodYield(parameters != null ) MethodYield yield = new MethodYield(parameters.size());
ComplexityVisitor.java,BlockTree block = methodTree.block();,if (methodTree != null ) BlockTree block = methodTree.block();
ComplexityVisitor.java,BlockTree block = tree.block();,if (tree != null ) BlockTree block = tree.block();
ComplexityVisitor.java,StatementTree last = Iterables.getLast(block.body());,if (Iterables != null ) StatementTree last = Iterables.getLast(block.body());
DeadStoreCheck.java,ExpressionTree lhs = ExpressionUtils.skipParentheses(assignmentExpressionTree.variable());,if (ExpressionUtils != null ) ExpressionTree lhs = ExpressionUtils.skipParentheses(assignmentExpressionTree.variable());
DeadStoreCheck.java,Symbol symbol = localVar.symbol();,if (localVar != null ) Symbol symbol = localVar.symbol();
LocksNotUnlockedCheck.java,Tree syntaxNode = constraint.syntaxNode();,if (constraint != null ) Tree syntaxNode = constraint.syntaxNode();
CustomUnclosedResourcesCheck.java,Tree syntaxNode = constraint.syntaxNode();,if (constraint != null ) Tree syntaxNode = constraint.syntaxNode();
SwitchCaseWithoutBreakCheck.java,currentTree = invalidCaseGroups.peek();,if (invalidCaseGroups != null ) currentTree = invalidCaseGroups.peek();
UnclosedResourcesCheck.java,Tree syntaxNode = constraint.syntaxNode();,if (constraint != null ) Tree syntaxNode = constraint.syntaxNode();
SECheck.java,lastEvaluated = finalNode.parent.programState.getLastEvaluated();,if (finalNode != null ) lastEvaluated = finalNode.parent.programState.getLastEvaluated();
SECheck.java,lastEvaluated = finalNode.parent.programState.getLastEvaluated();,if (finalNode != null ) lastEvaluated = finalNode.parent.programState.getLastEvaluated();
JavaCheckVerifier.java,Double cost = issue.getCost();,if (issue != null ) Double cost = issue.getCost();
JavaCheckVerifier.java,AnalyzerMessage.TextSpan textSpan = analyzerMessage.primaryLocation();,if (analyzerMessage != null ) AnalyzerMessage.TextSpan textSpan = analyzerMessage.primaryLocation();
JavaCheckVerifier.java,Multiset<String> actualLines = HashMultiset.create();,if (HashMultiset != null ) Multiset<String> actualLines = HashMultiset.create();
NullDereferenceCheck.java,Symbol lastEvaluated = currentNode.programState.getLastEvaluated();,if (currentNode != null ) Symbol lastEvaluated = currentNode.programState.getLastEvaluated();
NullDereferenceCheck.java,lastEvaluated = finalNode.parent.programState.getLastEvaluated();,if (finalNode != null ) lastEvaluated = finalNode.parent.programState.getLastEvaluated();
SonarComponents.java,AnalyzerMessage.TextSpan secondarySpan = location.primaryLocation();,if (location != null ) AnalyzerMessage.TextSpan secondarySpan = location.primaryLocation();
ExplodedGraphWalker.java,final SymbolMetadata metadata = variableTree.symbol().metadata();,if (variableTree != null ) final SymbolMetadata metadata = variableTree.symbol().metadata();
ExplodedGraphWalker.java,SymbolicValue peek = programState.peekValue();,if (programState != null ) SymbolicValue peek = programState.peekValue();
DoubleCheckedLockingCheck.java,Type fieldType = field.type();,if (field != null ) Type fieldType = field.type();
DoubleCheckedLockingCheck.java,Collection<Symbol> members = fieldType.symbol().memberSymbols();,if (fieldType != null ) Collection<Symbol> members = fieldType.symbol().memberSymbols();
DoubleCheckedLockingCheck.java,IfFieldEqNull parentIf = sameFieldAlreadyOnStack(ifConditionSymbolStack.peek());,if (sameFieldAlreadyOnStack(ifConditionSymbolStack != null ) IfFieldEqNull parentIf = sameFieldAlreadyOnStack(ifConditionSymbolStack.peek());
DoubleCheckedLockingCheck.java,CheckedLocking parentIf = sameFieldAlreadyOnStack(ifConditionSymbolStack.peek());,if (sameFieldAlreadyOnStack(ifConditionSymbolStack != null ) CheckedLocking parentIf = sameFieldAlreadyOnStack(ifConditionSymbolStack.peek());
DoubleCheckedLockingCheck.java,this.field = fieldFromEqCondition(ifTree.condition());,if (fieldFromEqCondition(ifTree != null ) this.field = fieldFromEqCondition(ifTree.condition());
Viewer.java,WebEngine webEngine = webView.getEngine();,if (webView != null ) WebEngine webEngine = webView.getEngine();
StandardFunctionalInterfaceCheck.java,Type actualReturnType = method.returnType().type();,if (method != null ) Type actualReturnType = method.returnType().type();
IndentationCheck.java,lastCheckedLine = tree.lastToken().line();,if (tree != null ) lastCheckedLine = tree.lastToken().line();
IndentationCheck.java,int startLine = methodInvocationFirstToken.pop().line();,if (methodInvocationFirstToken != null ) int startLine = methodInvocationFirstToken.pop().line();
IndentationCheck.java,int lambdaFirstTokenLine = lambda.firstToken().line();,if (lambda != null ) int lambdaFirstTokenLine = lambda.firstToken().line();
IndentationCheck.java,Tree body = lambda.body();,if (lambda != null ) Tree body = lambda.body();
IndentationCheck.java,Tree parent = tree.parent();,if (tree != null ) Tree parent = tree.parent();
IndentationCheck.java,int previousTokenLine = lambdaPreviousToken.pop().line();,if (lambdaPreviousToken != null ) int previousTokenLine = lambdaPreviousToken.pop().line();
IndentationCheck.java,int lambdaFirstTokenLine = lambda.firstToken().line();,if (lambda != null ) int lambdaFirstTokenLine = lambda.firstToken().line();
ReassignmentFinder.java,SyntaxToken reassignmentFirstToken = reassignment.firstToken();,if (reassignment != null ) SyntaxToken reassignmentFirstToken = reassignment.firstToken();
ReassignmentFinder.java,int reassignmentLine = reassignmentFirstToken.line();,if (reassignmentFirstToken != null ) int reassignmentLine = reassignmentFirstToken.line();
ReassignmentFinder.java,int startLine = startToken.line();,if (startToken != null ) int startLine = startToken.line();
ReassignmentFinder.java,Tree parent = syntaxToken.parent();,if (syntaxToken != null ) Tree parent = syntaxToken.parent();
ReassignmentFinder.java,parent = parent.parent();,if (parent != null ) parent = parent.parent();
CustomUnclosedResourcesCheck.java,SymbolicValue sv = programState.peekValue();,if (programState != null ) SymbolicValue sv = programState.peekValue();
CustomUnclosedResourcesCheck.java,"List<SymbolicValue> argumentValues = values.subList(stackOffset, values.size());","if (values != null ) List<SymbolicValue> argumentValues = values.subList(stackOffset, values.size());"
NullDereferenceCheck.java,int numberArguments = methodInvocation.arguments().size();,if (methodInvocation != null ) int numberArguments = methodInvocation.arguments().size();
NonNullSetToNullCheck.java,IdentifierTree variable = (IdentifierTree) tree.variable();,if (tree != null ) IdentifierTree variable = (IdentifierTree) tree.variable();
DeadStoreCheck.java,ExpressionTree lhs = ExpressionsHelper.skipParentheses(assignmentExpressionTree.variable());,if (ExpressionsHelper != null ) ExpressionTree lhs = ExpressionsHelper.skipParentheses(assignmentExpressionTree.variable());
DeadStoreCheck.java,ExpressionTree lhs = ExpressionsHelper.skipParentheses(tree.variable());,if (ExpressionsHelper != null ) ExpressionTree lhs = ExpressionsHelper.skipParentheses(tree.variable());
LoopsOnSameSetCheck.java,ExpressionTree expressionTree = ExpressionsHelper.skipParentheses(item.expression());,if (ExpressionsHelper != null ) ExpressionTree expressionTree = ExpressionsHelper.skipParentheses(item.expression());
PublicStaticMutableMembersCheck.java,ExpressionTree variable = ExpressionsHelper.skipParentheses(node.variable());,if (ExpressionsHelper != null ) ExpressionTree variable = ExpressionsHelper.skipParentheses(node.variable());
RawByteBitwiseOperationsCheck.java,ExpressionTree leftOperand = ExpressionsHelper.skipParentheses(tree.leftOperand());,if (ExpressionsHelper != null ) ExpressionTree leftOperand = ExpressionsHelper.skipParentheses(tree.leftOperand());
RawByteBitwiseOperationsCheck.java,ExpressionTree rightOperand = ExpressionsHelper.skipParentheses(tree.rightOperand());,if (ExpressionsHelper != null ) ExpressionTree rightOperand = ExpressionsHelper.skipParentheses(tree.rightOperand());
ReplaceLambdaByMethodRefCheck.java,ExpressionTree leftOperand = ExpressionsHelper.skipParentheses(bet.leftOperand());,if (ExpressionsHelper != null ) ExpressionTree leftOperand = ExpressionsHelper.skipParentheses(bet.leftOperand());
ReplaceLambdaByMethodRefCheck.java,ExpressionTree rightOperand = ExpressionsHelper.skipParentheses(bet.rightOperand());,if (ExpressionsHelper != null ) ExpressionTree rightOperand = ExpressionsHelper.skipParentheses(bet.rightOperand());
StringConcatenationInLoopCheck.java,ExpressionTree expressionTree = ExpressionsHelper.skipParentheses(tree.expression());,if (ExpressionsHelper != null ) ExpressionTree expressionTree = ExpressionsHelper.skipParentheses(tree.expression());
UselessIncrementCheck.java,ExpressionTree expression = ExpressionsHelper.skipParentheses(unaryExpression.expression());,if (ExpressionsHelper != null ) ExpressionTree expression = ExpressionsHelper.skipParentheses(unaryExpression.expression());
ProfilesTest.java,RulesProfile profile = definition.createProfile(ValidationMessages.create());,if (definition != null ) RulesProfile profile = definition.createProfile(ValidationMessages.create());
NullDereferenceCheck.java,final ProgramState programState = context.getState();,if (context != null ) final ProgramState programState = context.getState();
NullDereferenceCheck.java,SymbolicValue targetValue = programState.peekValue();,if (programState != null ) SymbolicValue targetValue = programState.peekValue();
XmlCheckVerifier.java,XMLInputFactory factory = XMLInputFactory.newInstance();,if (XMLInputFactory != null ) XMLInputFactory factory = XMLInputFactory.newInstance();
MethodBehavior.java,SymbolicValue resultSV = programState.peekValue();,if (programState != null ) SymbolicValue resultSV = programState.peekValue();
SymbolicExecutionVisitorTest.java,MethodBehavior mb = sev.behaviorCache.get(topMethod.get());,if (sev != null ) MethodBehavior mb = sev.behaviorCache.get(topMethod.get());
SymbolicExecutionVisitorTest.java,MethodBehavior mbReadFile = sev.behaviorCache.get(readFile.get());,if (sev != null ) MethodBehavior mbReadFile = sev.behaviorCache.get(readFile.get());
ExplodedGraphWalker.java,Tree declaration = mit.symbol().declaration();,if (mit != null ) Tree declaration = mit.symbol().declaration();
Resolve.java,Tree expression = tree.expression();,if (tree != null ) Tree expression = tree.expression();
Resolve.java,String searchedMethod = getMethodReferenceMethodName(tree.method().name());,if (getMethodReferenceMethodName(tree != null ) String searchedMethod = getMethodReferenceMethodName(tree.method().name());
Resolve.java,String methodName = tree.method().name();,if (tree != null ) String methodName = tree.method().name();
MethodMatcher.java,id = (IdentifierTree) mit.methodSelect();,if (mit != null ) id = (IdentifierTree) mit.methodSelect();
Resolve.java,result = findSamMethodArgsRecursively(type.symbol().superClass());,if (findSamMethodArgsRecursively(type != null ) result = findSamMethodArgsRecursively(type.symbol().superClass());
TypeSubstitution.java,JavaType targetType = substitution.getValue();,if (substitution != null ) JavaType targetType = substitution.getValue();
TypeSubstitutionSolver.java,resultType = symbols.deferedType(resultType.erasure());,if (symbols != null ) resultType = symbols.deferedType(resultType.erasure());
TypeAndReferenceSolver.java,List<JavaType> samMethodArgs = resolve.findSamMethodArgs(methodReferenceTree.symbolType());,if (resolve != null ) List<JavaType> samMethodArgs = resolve.findSamMethodArgs(methodReferenceTree.symbolType());
AssertionsInTestsCheck.java,Boolean containsSoftAssertionDecl = methodContainsAssertjSoftAssertionUsage.pop();,if (methodContainsAssertjSoftAssertionUsage != null ) Boolean containsSoftAssertionDecl = methodContainsAssertjSoftAssertionUsage.pop();
AssertionsInTestsCheck.java,Boolean containsAssertjAssertAll = methodContainsAssertjAssertAll.pop();,if (methodContainsAssertjAssertAll != null ) Boolean containsAssertjAssertAll = methodContainsAssertjAssertAll.pop();
AssertionsInTestsCheck.java,Boolean containsJunitSoftAssertionUsage = methodContainsJunitSoftAssertionUsage.pop();,if (methodContainsJunitSoftAssertionUsage != null ) Boolean containsJunitSoftAssertionUsage = methodContainsJunitSoftAssertionUsage.pop();
AssertionsInTestsCheck.java,ChainedMethods chainedToResult = chainedTo.pop();,if (chainedTo != null ) ChainedMethods chainedToResult = chainedTo.pop();
AssertionsInTestsCheck.java,Symbol symbol = tree.symbol();,if (tree != null ) Symbol symbol = tree.symbol();
AssertionsInTestsCheck.java,Type type = symbol.type();,if (symbol != null ) Type type = symbol.type();
MethodMatcher.java,parameterTypes = Lists.newArrayList();,if (Lists != null ) parameterTypes = Lists.newArrayList();
MethodMatcher.java,Preconditions.checkState(parameterTypes == null || parameterTypes.isEmpty());,if (parameterTypes != null ) Preconditions.checkState(parameterTypes == null || parameterTypes.isEmpty());
MethodMatcher.java,List<Type> parametersTypes = methodSymbol.parameterTypes();,if (methodSymbol != null ) List<Type> parametersTypes = methodSymbol.parameterTypes();
CallToDeprecatedMethodCheck.java,name = symbol.owner().name();,if (symbol != null ) name = symbol.owner().name();
CallToDeprecatedMethodCheck.java,name = symbol.name();,if (symbol != null ) name = symbol.name();
JavaSquidSensor.java,List<File> files = Lists.newArrayList();,if (Lists != null ) List<File> files = Lists.newArrayList();
TypeAndReferenceSolver.java,Tree methodSelect = tree.methodSelect();,if (tree != null ) Tree methodSelect = tree.methodSelect();
TypeAndReferenceSolver.java,List<JavaType> parameterTypes = getParameterTypes(tree.arguments());,if (getParameterTypes(tree != null ) List<JavaType> parameterTypes = getParameterTypes(tree.arguments());
TypeAndReferenceSolver.java,JavaType type = getType(mset.expression());,if (getType(mset != null ) JavaType type = getType(mset.expression());
TypeAndReferenceSolver.java,identifier = mset.identifier();,if (mset != null ) identifier = mset.identifier();
TypeAndReferenceSolver.java,MethodJavaType methodType = (MethodJavaType) resolution.type();,if (resolution != null ) MethodJavaType methodType = (MethodJavaType) resolution.type();
TypeAndReferenceSolver.java,ExpressionTree expression = tree.expression();,if (tree != null ) ExpressionTree expression = tree.expression();
JavaClasspathTest.java,String logs = ORCHESTRATOR.executeBuild(runner).getLogs();,if (ORCHESTRATOR != null ) String logs = ORCHESTRATOR.executeBuild(runner).getLogs();
SymbolTableTest.java,Type mapType = mapMethod.symbolType();,if (mapMethod != null ) Type mapType = mapMethod.symbolType();
AbstractJavaClasspath.java,List<File> result = Lists.newArrayList();,if (Lists != null ) List<File> result = Lists.newArrayList();
AbstractJavaClasspath.java,List<File> files = Lists.newArrayList();,if (Lists != null ) List<File> files = Lists.newArrayList();
AbstractJavaClasspath.java,Iterator<File> iterator = dirs.iterator();,if (dirs != null ) Iterator<File> iterator = dirs.iterator();
AbstractJavaClasspath.java,File matchingDir = iterator.next();,if (iterator != null ) File matchingDir = iterator.next();
AbstractJavaClasspath.java,String path = file.getAbsolutePath();,if (file != null ) String path = file.getAbsolutePath();
TypeAndReferenceSolver.java,List<JavaType> samMethodArgs = resolve.findSamMethodArgs(lambdaExpressionTree.symbolType());,if (resolve != null ) List<JavaType> samMethodArgs = resolve.findSamMethodArgs(lambdaExpressionTree.symbolType());
PrintfCheck.java,Set<Integer> result = Sets.newHashSet();,if (Sets != null ) Set<Integer> result = Sets.newHashSet();
PrintfCheck.java,List<String> params = Lists.newArrayList();,if (Lists != null ) List<String> params = Lists.newArrayList();
UnusedProtectedMethodCheckTest.java,AnalyzerMessage analyzerMessage = unusedProtectedMethod.iterator().next();,if (unusedProtectedMethod != null ) AnalyzerMessage analyzerMessage = unusedProtectedMethod.iterator().next();
DefaultJavaResourceLocator.java,methodStartLines = Maps.newHashMap();,if (Maps != null ) methodStartLines = Maps.newHashMap();
VirtualMethodsLinker.java,"AsmMethod implementation = findImplementation(method.getParent(), method.getKey());","if (method != null ) AsmMethod implementation = findImplementation(method.getParent(), method.getKey());"
AsmClassProviderImpl.java,this.classLoader = Thread.currentThread().getContextClassLoader();,if (Thread != null ) this.classLoader = Thread.currentThread().getContextClassLoader();
AsmMethod.java,accessedField = (AsmField) edge.getTo();,if (edge != null ) accessedField = (AsmField) edge.getTo();
AsmMethod.java,AsmMethod method = (AsmMethod) edge.getTo();,if (edge != null ) AsmMethod method = (AsmMethod) edge.getTo();
AsmMethod.java,accessedField = method.getAccessedField();,if (method != null ) accessedField = method.getAccessedField();
BytecodeVisitor.java,MethodSignature methodSignature = MethodSignatureScanner.scan(asmMethod.getGenericKey());,if (MethodSignatureScanner != null ) MethodSignature methodSignature = MethodSignatureScanner.scan(asmMethod.getGenericKey());
BytecodeVisitor.java,AsmClass asmClass = asmMethod.getParent();,if (asmMethod != null ) AsmClass asmClass = asmMethod.getParent();
BytecodeScannerTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
AsmClassProviderImplTest.java,AsmMethod parseIntMethod = getParseIntMethod(integerClass.getMethods());,if (getParseIntMethod(integerClass != null ) AsmMethod parseIntMethod = getParseIntMethod(integerClass.getMethods());
AsmClassProviderImplTest.java,parseIntMethod = getParseIntMethod(integerClass.getMethods());,if (getParseIntMethod(integerClass != null ) parseIntMethod = getParseIntMethod(integerClass.getMethods());
DITCheck.java,Type superClass = tree.symbol().superClass();,if (tree != null ) Type superClass = tree.symbol().superClass();
DITCheck.java,superClass = superClass.symbol().superClass();,if (superClass != null ) superClass = superClass.symbol().superClass();
DITCheck.java,Tree reportTree = tree.simpleName();,if (tree != null ) Tree reportTree = tree.simpleName();
AVLTree.java,AVLTree node = stack.removeLast();,if (stack != null ) AVLTree node = stack.removeLast();
AVLTree.java,Map.Entry next = iter.next();,if (iter != null ) Map.Entry next = iter.next();
AVLTree.java,Object otherValue = other.get(next.getKey());,if (other != null ) Object otherValue = other.get(next.getKey());
AVLTree.java,return c == Iterators.size(other.entriesIterator());,if (Iterators != null ) return c == Iterators.size(other.entriesIterator());
ProgramState.java,Symbol symbol = next.getKey();,if (next != null ) Symbol symbol = next.getKey();
ProgramState.java,SymbolicValue symbolicValue = next.getValue();,if (next != null ) SymbolicValue symbolicValue = next.getValue();
ProgramState.java,SymbolicValue symbolicValue = next.getKey();,if (next != null ) SymbolicValue symbolicValue = next.getKey();
InvalidDateValuesCheck.java,Arguments arguments = newClassTree.arguments();,if (newClassTree != null ) Arguments arguments = newClassTree.arguments();
SuppressWarningsCheck.java,List<String> issues = Lists.newArrayList();,if (Lists != null ) List<String> issues = Lists.newArrayList();
SyncGetterAndSetterCheck.java,MethodTree pairMethod = (MethodTree) symbol.declaration();,if (symbol != null ) MethodTree pairMethod = (MethodTree) symbol.declaration();
TrailingCommentCheck.java,String comment = trivia.comment();,if (trivia != null ) String comment = trivia.comment();
TrailingCommentCheck.java,comment = comment.trim();,if (comment != null ) comment = comment.trim();
SurefireStaxHandler.java,for (event = testCase.getNext(); event != null; event = testCase.getNext()) {,if ({ != null ) for (event = testCase.getNext(); event != null; event = testCase.getNext()) {
HardCodedCredentialsCheck.java,IdentifierTree simpleName = variable.simpleName();,if (variable != null ) IdentifierTree simpleName = variable.simpleName();
HardCodedCredentialsCheck.java,ExpressionTree variable = assignmentExpression.variable();,if (assignmentExpression != null ) ExpressionTree variable = assignmentExpression.variable();
ObjectFinalizeOverridenCallsSuperFinalizeCheck.java,MemberSelectExpressionTree mset = (MemberSelectExpressionTree) methodInvocationTree.methodSelect();,if (methodInvocationTree != null ) MemberSelectExpressionTree mset = (MemberSelectExpressionTree) methodInvocationTree.methodSelect();
ThreadAsRunnableArgumentCheck.java,Type providedType = argument.symbolType();,if (argument != null ) Type providedType = argument.symbolType();
SyntaxHighlighterVisitor.java,Tree.Kind kind = tree.kind();,if (tree != null ) Tree.Kind kind = tree.kind();
SyntaxHighlighterVisitor.java,String text = syntaxToken.text();,if (syntaxToken != null ) String text = syntaxToken.text();
SyntaxHighlighterVisitor.java,TypeTree annotationType = annotationTree.annotationType();,if (annotationTree != null ) TypeTree annotationType = annotationTree.annotationType();
SyntaxHighlighterVisitor.java,List<Integer> startLines = Lists.newArrayList();,if (Lists != null ) List<Integer> startLines = Lists.newArrayList();
SyntaxHighlighterVisitor.java,int contentLength = content.length();,if (content != null ) int contentLength = content.length();
DeadStoreCheck.java,List<Tree> elements = Lists.reverse(block.elements());,if (Lists != null ) List<Tree> elements = Lists.reverse(block.elements());
DeadStoreCheck.java,ExpressionTree lhs = ExpressionsHelper.skipParentheses(assignmentExpressionTree.variable());,if (ExpressionsHelper != null ) ExpressionTree lhs = ExpressionsHelper.skipParentheses(assignmentExpressionTree.variable());
ChildClassShadowFieldCheck.java,String fieldName = variableTree.simpleName().name();,if (variableTree != null ) String fieldName = variableTree.simpleName().name();
CommentLinesVisitor.java,int line = trivia.startLine();,if (trivia != null ) int line = trivia.startLine();
CatchUsesExceptionWithContextCheck.java,semanticModel = (SemanticModel) context.getSemanticModel();,if (context != null ) semanticModel = (SemanticModel) context.getSemanticModel();
FieldNameMatchingTypeNameCheck.java,this.semanticModel = (SemanticModel) context.getSemanticModel();,if (context != null ) this.semanticModel = (SemanticModel) context.getSemanticModel();
DivisionByZeroCheck.java,SymbolicValue sv = programState.peekValue();,if (programState != null ) SymbolicValue sv = programState.peekValue();
SerializableFieldInSerializableClassCheck.java,List<Type> thrownTypes = methodTree.symbol().thrownTypes();,if (methodTree != null ) List<Type> thrownTypes = methodTree.symbol().thrownTypes();
LocksNotUnlockedCheck.java,final Symbol symbol = expression.symbol();,if (expression != null ) final Symbol symbol = expression.symbol();
JdbcResourcesTestFile.java,ResultSet result = statement.getResultSet();,if (statement != null ) ResultSet result = statement.getResultSet();
PrivateFieldUsedLocallyCheck.java,"String message = String.format(MESSAGE, privateFieldSymbol.name());","if (privateFieldSymbol != null ) String message = String.format(MESSAGE, privateFieldSymbol.name());"
PrivateFieldUsedLocallyCheck.java,MethodTree methodTree = (MethodTree) memberSymbol.declaration();,if (memberSymbol != null ) MethodTree methodTree = (MethodTree) memberSymbol.declaration();
LiveVariables.java,Symbol symbol = memberSelect.identifier().symbol();,if (memberSelect != null ) Symbol symbol = memberSelect.identifier().symbol();
VariableReadExtractorTest.java,LocalVariableReadExtractor extractor = new LocalVariableReadExtractor(methodTree.symbol());,if (LocalVariableReadExtractor(methodTree != null ) LocalVariableReadExtractor extractor = new LocalVariableReadExtractor(methodTree.symbol());
VariableReadExtractorTest.java,LocalVariableReadExtractor extractor = new LocalVariableReadExtractor(methodTree.symbol());,if (LocalVariableReadExtractor(methodTree != null ) LocalVariableReadExtractor extractor = new LocalVariableReadExtractor(methodTree.symbol());
VariableReadExtractorTest.java,extractor = new LocalVariableReadExtractor(methodTree.symbol());,if (LocalVariableReadExtractor(methodTree != null ) extractor = new LocalVariableReadExtractor(methodTree.symbol());
HiddenFieldCheck.java,int line = FirstSyntaxTokenFinder.firstSyntaxToken(hiddenVariable).line();,if (FirstSyntaxTokenFinder != null ) int line = FirstSyntaxTokenFinder.firstSyntaxToken(hiddenVariable).line();
IndentationCheck.java,lastCheckedLine = LastSyntaxTokenFinder.lastSyntaxToken(tree).line();,if (LastSyntaxTokenFinder != null ) lastCheckedLine = LastSyntaxTokenFinder.lastSyntaxToken(tree).line();
IndentationCheck.java,int lambdaFirstTokenLine = FirstSyntaxTokenFinder.firstSyntaxToken(lambda).line();,if (FirstSyntaxTokenFinder != null ) int lambdaFirstTokenLine = FirstSyntaxTokenFinder.firstSyntaxToken(lambda).line();
IndentationCheck.java,int lambdaFirstTokenLine = FirstSyntaxTokenFinder.firstSyntaxToken(lambda).line();,if (FirstSyntaxTokenFinder != null ) int lambdaFirstTokenLine = FirstSyntaxTokenFinder.firstSyntaxToken(lambda).line();
IndentationCheck.java,lastCheckedLine = LastSyntaxTokenFinder.lastSyntaxToken(previousCaseLabelTree).line();,if (LastSyntaxTokenFinder != null ) lastCheckedLine = LastSyntaxTokenFinder.lastSyntaxToken(previousCaseLabelTree).line();
IndentationCheck.java,lastCheckedLine = LastSyntaxTokenFinder.lastSyntaxToken(tree).line();,if (LastSyntaxTokenFinder != null ) lastCheckedLine = LastSyntaxTokenFinder.lastSyntaxToken(tree).line();
InnerClassTooManyLinesCheck.java,int first = FirstSyntaxTokenFinder.firstSyntaxToken(node).line();,if (FirstSyntaxTokenFinder != null ) int first = FirstSyntaxTokenFinder.firstSyntaxToken(node).line();
InnerClassTooManyLinesCheck.java,int last = LastSyntaxTokenFinder.lastSyntaxToken(node).line();,if (LastSyntaxTokenFinder != null ) int last = LastSyntaxTokenFinder.lastSyntaxToken(node).line();
SunPackagesUsedCheck.java,int line = FirstSyntaxTokenFinder.firstSyntaxToken(tree).line();,if (FirstSyntaxTokenFinder != null ) int line = FirstSyntaxTokenFinder.firstSyntaxToken(tree).line();
SwitchCaseTooBigCheck.java,List<SyntaxTrivia> trivias = FirstSyntaxTokenFinder.firstSyntaxToken(firstStatement).trivias();,if (FirstSyntaxTokenFinder != null ) List<SyntaxTrivia> trivias = FirstSyntaxTokenFinder.firstSyntaxToken(firstStatement).trivias();
SuppressWarningFilter.java,int endLine = LastSyntaxTokenFinder.lastSyntaxToken(tree).line();,if (LastSyntaxTokenFinder != null ) int endLine = LastSyntaxTokenFinder.lastSyntaxToken(tree).line();
FirstSyntaxTokenFinderTest.java,Constructor constructor = FirstSyntaxTokenFinder.class.getDeclaredConstructor();,if (FirstSyntaxTokenFinder != null ) Constructor constructor = FirstSyntaxTokenFinder.class.getDeclaredConstructor();
FirstSyntaxTokenFinderTest.java,firstToken = getFirstSyntaxToken(newClassTree.classBody());,if (getFirstSyntaxToken(newClassTree != null ) firstToken = getFirstSyntaxToken(newClassTree.classBody());
FirstSyntaxTokenFinderTest.java,firstToken = getFirstSyntaxToken(getFirstMethod(compilationUnit).block());,if (getFirstSyntaxToken(getFirstMethod(compilationUnit) != null ) firstToken = getFirstSyntaxToken(getFirstMethod(compilationUnit).block());
FirstSyntaxTokenFinderTest.java,SyntaxToken firstToken = getFirstSyntaxToken(c.modifiers());,if (getFirstSyntaxToken(c != null ) SyntaxToken firstToken = getFirstSyntaxToken(c.modifiers());
FirstSyntaxTokenFinderTest.java,firstToken = getFirstSyntaxToken(c.modifiers());,if (getFirstSyntaxToken(c != null ) firstToken = getFirstSyntaxToken(c.modifiers());
FirstSyntaxTokenFinderTest.java,firstToken = getFirstSyntaxToken(c.modifiers());,if (getFirstSyntaxToken(c != null ) firstToken = getFirstSyntaxToken(c.modifiers());
LastSyntaxTokenFinderTest.java,Constructor constructor = LastSyntaxTokenFinder.class.getDeclaredConstructor();,if (LastSyntaxTokenFinder != null ) Constructor constructor = LastSyntaxTokenFinder.class.getDeclaredConstructor();
LastSyntaxTokenFinderTest.java,lastToken = getLastSyntaxToken(getFirstMethod(compilationUnit).returnType());,if (getLastSyntaxToken(getFirstMethod(compilationUnit) != null ) lastToken = getLastSyntaxToken(getFirstMethod(compilationUnit).returnType());
LastSyntaxTokenFinderTest.java,SyntaxToken lastToken = getLastSyntaxToken(c.modifiers());,if (getLastSyntaxToken(c != null ) SyntaxToken lastToken = getLastSyntaxToken(c.modifiers());
LastSyntaxTokenFinderTest.java,lastToken = getLastSyntaxToken(c.modifiers());,if (getLastSyntaxToken(c != null ) lastToken = getLastSyntaxToken(c.modifiers());
LastSyntaxTokenFinderTest.java,lastToken = getLastSyntaxToken(c.modifiers());,if (getLastSyntaxToken(c != null ) lastToken = getLastSyntaxToken(c.modifiers());
LastSyntaxTokenFinderTest.java,lastToken = getLastSyntaxToken(c.modifiers());,if (getLastSyntaxToken(c != null ) lastToken = getLastSyntaxToken(c.modifiers());
LastSyntaxTokenFinderTest.java,SyntaxToken lastToken = getLastSyntaxToken(c.modifiers());,if (getLastSyntaxToken(c != null ) SyntaxToken lastToken = getLastSyntaxToken(c.modifiers());
LastSyntaxTokenFinderTest.java,SyntaxToken lastToken = getLastSyntaxToken(c.typeParameters());,if (getLastSyntaxToken(c != null ) SyntaxToken lastToken = getLastSyntaxToken(c.typeParameters());
LastSyntaxTokenFinderTest.java,SyntaxToken lastToken = getLastSyntaxToken(m.returnType());,if (getLastSyntaxToken(m != null ) SyntaxToken lastToken = getLastSyntaxToken(m.returnType());
PomCheckContextImpl.java,int startLine = startLocation.line();,if (startLocation != null ) int startLine = startLocation.line();
PomCheckContextImpl.java,int startColumn = startLocation.column();,if (startLocation != null ) int startColumn = startLocation.column();
SonarComponents.java,this.checks = Lists.newArrayList();,if (Lists != null ) this.checks = Lists.newArrayList();
SonarComponents.java,this.testChecks = Lists.newArrayList();,if (Lists != null ) this.testChecks = Lists.newArrayList();
SonarComponents.java,List<CodeVisitor> visitors = Lists.newArrayList();,if (Lists != null ) List<CodeVisitor> visitors = Lists.newArrayList();
SonarComponents.java,Collection<JavaCheck> checksCollection = checksElement.all();,if (checksElement != null ) Collection<JavaCheck> checksCollection = checksElement.all();
SyntacticEquivalence.java,Iterator<Tree> iteratorA = leftNode.children().iterator();,if (leftNode != null ) Iterator<Tree> iteratorA = leftNode.children().iterator();
SyntacticEquivalence.java,Iterator<Tree> iteratorB = rightNode.children().iterator();,if (rightNode != null ) Iterator<Tree> iteratorB = rightNode.children().iterator();
TypeAndReferenceSolver.java,int size = inferedArgTypes.size();,if (inferedArgTypes != null ) int size = inferedArgTypes.size();
TypeAndReferenceSolver.java,List<JavaType> typeParamTypes = Lists.newArrayList();,if (Lists != null ) List<JavaType> typeParamTypes = Lists.newArrayList();
TypeAndReferenceSolver.java,typeParamTypes = getParameterTypes(tree.typeArguments());,if (getParameterTypes(tree != null ) typeParamTypes = getParameterTypes(tree.typeArguments());
TypeAndReferenceSolver.java,MethodJavaType methodType = (MethodJavaType) resolution.type();,if (resolution != null ) MethodJavaType methodType = (MethodJavaType) resolution.type();
LocatedAttributeMatcherTest.java,LocatedAttributeMatcher.AlwaysMatchingMatcher matcher = new LocatedAttributeMatcher.AlwaysMatchingMatcher();,if (LocatedAttributeMatcher != null ) LocatedAttributeMatcher.AlwaysMatchingMatcher matcher = new LocatedAttributeMatcher.AlwaysMatchingMatcher();
UndocumentedApiCheck.java,publicApiChecker = PublicApiChecker.newInstanceWithAccessorsHandledAsMethods();,if (PublicApiChecker != null ) publicApiChecker = PublicApiChecker.newInstanceWithAccessorsHandledAsMethods();
Measurer.java,PublicApiChecker publicApiChecker = PublicApiChecker.newInstanceWithAccessorsHandledAsMethods();,if (PublicApiChecker != null ) PublicApiChecker publicApiChecker = PublicApiChecker.newInstanceWithAccessorsHandledAsMethods();
Measurer.java,publicApiChecker = PublicApiChecker.newInstanceWithAccessorsSeparatedFromMethods();,if (PublicApiChecker != null ) publicApiChecker = PublicApiChecker.newInstanceWithAccessorsSeparatedFromMethods();
PublicApiCheckerTest.java,publicApiChecker = PublicApiChecker.newInstanceWithAccessorsHandledAsMethods();,if (PublicApiChecker != null ) publicApiChecker = PublicApiChecker.newInstanceWithAccessorsHandledAsMethods();
PublicApiCheckerTest.java,publicApiChecker = PublicApiChecker.newInstanceWithAccessorsSeparatedFromMethods();,if (PublicApiChecker != null ) publicApiChecker = PublicApiChecker.newInstanceWithAccessorsSeparatedFromMethods();
SonarSymbolTableVisitor.java,this.symbolTableBuilder = symbolizable.newSymbolTableBuilder();,if (symbolizable != null ) this.symbolTableBuilder = symbolizable.newSymbolTableBuilder();
SonarSymbolTableVisitor.java,String constructorName = tree.simpleName().name();,if (tree != null ) String constructorName = tree.simpleName().name();
IndentationCheck.java,int startLine = FirstSyntaxTokenFinder.firstSyntaxToken(tree).line();,if (FirstSyntaxTokenFinder != null ) int startLine = FirstSyntaxTokenFinder.firstSyntaxToken(tree).line();
IndentationCheck.java,int startLine = FirstSyntaxTokenFinder.firstSyntaxToken(tree).line();,if (FirstSyntaxTokenFinder != null ) int startLine = FirstSyntaxTokenFinder.firstSyntaxToken(tree).line();
IndentationCheck.java,lastCheckedLine = LastSyntaxTokenFinder.lastSyntaxToken(tree).line();,if (LastSyntaxTokenFinder != null ) lastCheckedLine = LastSyntaxTokenFinder.lastSyntaxToken(tree).line();
ReplaceLambdaByMethodRefCheck.java,List<VariableTree> parameters = tree.parameters();,if (tree != null ) List<VariableTree> parameters = tree.parameters();
ReplaceLambdaByMethodRefCheck.java,Tree body = tree.body();,if (tree != null ) Tree body = tree.body();
SAMAnnotatedCheck.java,Tree annotationType = annotationTree.annotationType();,if (annotationTree != null ) Tree annotationType = annotationTree.annotationType();
SAMAnnotatedCheck.java,TypeSymbol symbol = classTree.symbol();,if (classTree != null ) TypeSymbol symbol = classTree.symbol();
SAMAnnotatedCheck.java,List<Type> types = symbol.interfaces();,if (symbol != null ) List<Type> types = symbol.interfaces();
SAMAnnotatedCheck.java,ModifiersTree modifiers = methodTree.modifiers();,if (methodTree != null ) ModifiersTree modifiers = methodTree.modifiers();
FieldModifierCheck.java,ModifiersTree modifiers = member.modifiers();,if (member != null ) ModifiersTree modifiers = member.modifiers();
UnusedPrivateMethodCheck.java,List<String> params = Lists.newArrayList();,if (Lists != null ) List<String> params = Lists.newArrayList();
UnusedPrivateMethodCheck.java,String paramName = param.getClassName();,if (param != null ) String paramName = param.getClassName();
UnusedPrivateMethodCheck.java,paramName = MethodSignatureScanner.getReadableType(param.getJvmJavaType());,if (MethodSignatureScanner != null ) paramName = MethodSignatureScanner.getReadableType(param.getJvmJavaType());
UnusedPrivateMethodCheckTest.java,Integer line = message.getLine();,if (message != null ) Integer line = message.getLine();
IgnoredReturnValueCheck.java,Type methodType = mit.symbolType();,if (mit != null ) Type methodType = mit.symbolType();
IgnoredReturnValueCheck.java,Symbol owner = mit.symbol().owner();,if (mit != null ) Symbol owner = mit.symbol().owner();
SonarLintTest.java,baseDir = temp.newFolder();,if (temp != null ) baseDir = temp.newFolder();
TypeAndReferenceSolver.java,JavaSymbol symbol = resolution.symbol();,if (resolution != null ) JavaSymbol symbol = resolution.symbol();
TypeAndReferenceSolver.java,JavaType returnType = resolution.type();,if (resolution != null ) JavaType returnType = resolution.type();
SyntaxHighlighterVisitor.java,highlighting = sonarComponents.highlightableFor(file).newHighlighting();,if (sonarComponents != null ) highlighting = sonarComponents.highlightableFor(file).newHighlighting();
BooleanMethodReturnCheck.java,TypeTree returnType = methodTree.returnType();,if (methodTree != null ) TypeTree returnType = methodTree.returnType();
ProgramState.java,BinaryRelation relation = value.binaryRelation();,if (value != null ) BinaryRelation relation = value.binaryRelation();
JavaSymbol.java,usages = usagesBuilder.build();,if (usagesBuilder != null ) usages = usagesBuilder.build();
TypeSubstitutionSolver.java,List<JavaType> argTypes = Lists.newArrayList();,if (Lists != null ) List<JavaType> argTypes = Lists.newArrayList();
TypeSubstitutionSolver.java,List<JavaType> results = new ArrayList<>(types.size());,if (ArrayList<>(types != null ) List<JavaType> results = new ArrayList<>(types.size());
PostAnalysisIssueFilter.java,String componentKey = resourceMapping.getComponentKeyByFileKey(context.getFileKey());,if (resourceMapping != null ) String componentKey = resourceMapping.getComponentKeyByFileKey(context.getFileKey());
NoTestInTestClassCheck.java,Type type = input.symbol().type();,if (input != null ) Type type = input.symbol().type();
ExtendDeprecatedSymbolCheck.java,Type symbolType = superTypeTree.symbolType();,if (superTypeTree != null ) Type symbolType = superTypeTree.symbolType();
FieldMatchMethodNameCheck.java,Multiset<String> fields = HashMultiset.create();,if (HashMultiset != null ) Multiset<String> fields = HashMultiset.create();
FieldMatchMethodNameCheck.java,Set<String> methodNames = Sets.newHashSet();,if (Sets != null ) Set<String> methodNames = Sets.newHashSet();
FieldMatchMethodNameCheck.java,Collection<Symbol> symbols = classSymbol.memberSymbols();,if (classSymbol != null ) Collection<Symbol> symbols = classSymbol.memberSymbols();
ArrayEqualsCheck.java,MemberSelectExpressionTree mset = (MemberSelectExpressionTree) tree.methodSelect();,if (tree != null ) MemberSelectExpressionTree mset = (MemberSelectExpressionTree) tree.methodSelect();
UselessObjectCreationCheck.java,ExpressionTree expression = expressionStatement.expression();,if (expressionStatement != null ) ExpressionTree expression = expressionStatement.expression();
UselessObjectCreationCheck.java,String className = newClassTree.getConstructorIdentifier().name();,if (newClassTree != null ) String className = newClassTree.getConstructorIdentifier().name();
DependenciesVisitor.java,AsmClass toAsmClass = edge.getTargetAsmClass();,if (edge != null ) AsmClass toAsmClass = edge.getTargetAsmClass();
ResourceMapping.java,directories = ArrayListMultimap.create();,if (ArrayListMultimap != null ) directories = ArrayListMultimap.create();
ResourceMapping.java,subDependencies = ArrayListMultimap.create();,if (ArrayListMultimap != null ) subDependencies = ArrayListMultimap.create();
BytecodeVisitorsTest.java,"DefaultInputFile inputFile = new DefaultInputFile("""", javaFile.getPath());","if (javaFile != null ) DefaultInputFile inputFile = new DefaultInputFile("""", javaFile.getPath());"
BytecodeVisitorsTest.java,graph = squid.getGraph();,if (squid != null ) graph = squid.getGraph();
BytecodeVisitorsTest.java,resourceMapping = javaResourceLocator.getResourceMapping();,if (javaResourceLocator != null ) resourceMapping = javaResourceLocator.getResourceMapping();
BytecodeVisitorsTest.java,Set<Resource> directories = resourceMapping.directories();,if (resourceMapping != null ) Set<Resource> directories = resourceMapping.directories();
AbstractAnalyzer.java,CoverageMeasuresBuilder builder = CoverageMeasuresBuilder.create();,if (CoverageMeasuresBuilder != null ) CoverageMeasuresBuilder builder = CoverageMeasuresBuilder.create();
SurefireJavaParser.java,Resource resource = getUnitTestResource(entry.getKey());,if (getUnitTestResource(entry != null ) Resource resource = getUnitTestResource(entry.getKey());
SurefireJavaParser.java,double testsCount = report.getTests() - report.getSkipped();,if (report != null ) double testsCount = report.getTests() - report.getSkipped();
DesignBridge.java,Collection<Resource> directories = resourceMapping.directories();,if (resourceMapping != null ) Collection<Resource> directories = resourceMapping.directories();
DesignBridge.java,Set<Edge> feedbackEdges = cyclesAndFESSolver.getFeedbackEdgeSet();,if (cyclesAndFESSolver != null ) Set<Edge> feedbackEdges = cyclesAndFESSolver.getFeedbackEdgeSet();
DesignBridge.java,Resource fromFile = subDependency.getFrom();,if (subDependency != null ) Resource fromFile = subDependency.getFrom();
DesignBridge.java,Resource toFile = subDependency.getTo();,if (subDependency != null ) Resource toFile = subDependency.getTo();
DesignBridge.java,int tangles = cyclesAndFESSolver.getWeightOfFeedbackEdgeSet();,if (cyclesAndFESSolver != null ) int tangles = cyclesAndFESSolver.getWeightOfFeedbackEdgeSet();
DesignBridge.java,Set<Cycle> cycles = cycleDetector.getCycles();,if (cycleDetector != null ) Set<Cycle> cycles = cycleDetector.getCycles();
DesignBridge.java,Set<Edge> feedbackEdges = solver.getEdges();,if (solver != null ) Set<Edge> feedbackEdges = solver.getEdges();
DesignBridge.java,int tangles = solver.getWeightOfFeedbackEdgeSet();,if (solver != null ) int tangles = solver.getWeightOfFeedbackEdgeSet();
DesignBridge.java,List<Resource> result = Lists.newArrayList();,if (Lists != null ) List<Resource> result = Lists.newArrayList();
DesignBridge.java,total += edge.getWeight();,if (edge != null ) total += edge.getWeight();
UnclosedResourcesCheck.java,final ExpressionTree methodSelect = syntaxNode.methodSelect();,if (syntaxNode != null ) final ExpressionTree methodSelect = syntaxNode.methodSelect();
JavaClasspathTest.java,int status = ORCHESTRATOR.executeBuildQuietly(build).getStatus();,if (ORCHESTRATOR != null ) int status = ORCHESTRATOR.executeBuildQuietly(build).getStatus();
JavaClasspathTest.java,String logs = ORCHESTRATOR.executeBuild(runner).getLogs();,if (ORCHESTRATOR != null ) String logs = ORCHESTRATOR.executeBuild(runner).getLogs();
JavaClasspath.java,boolean useDeprecatedProperties = binaries.isEmpty() && libraries.isEmpty();,if (libraries != null ) boolean useDeprecatedProperties = binaries.isEmpty() && libraries.isEmpty();
JavaClasspath.java,validateLibraries = project.getModules().isEmpty();,if (project != null ) validateLibraries = project.getModules().isEmpty();
JavaTestClasspath.java,validateLibraries = project.getModules().isEmpty();,if (project != null ) validateLibraries = project.getModules().isEmpty();
JavaCommonRulesEngineTest.java,CommonRulesRepository repo = provider.newRepository();,if (provider != null ) CommonRulesRepository repo = provider.newRepository();
Java.java,List<String> nonEmptyStrings = Lists.newArrayList();,if (Lists != null ) List<String> nonEmptyStrings = Lists.newArrayList();
JavaTest.java,Sonar wsClient = orchestrator.getServer().getWsClient();,if (orchestrator != null ) Sonar wsClient = orchestrator.getServer().getWsClient();
BytecodeVisitorsTest.java,DefaultInputFile inputFile = new DefaultInputFile(javaFile.getPath());,if (DefaultInputFile(javaFile != null ) DefaultInputFile inputFile = new DefaultInputFile(javaFile.getPath());
Types.java,Iterator<Type> iterator = types.iterator();,if (types != null ) Iterator<Type> iterator = types.iterator();
Types.java,Type first = iterator.next();,if (iterator != null ) Type first = iterator.next();
Types.java,Symbol.TypeSymbol typeSymbol = type.symbol();,if (type != null ) Symbol.TypeSymbol typeSymbol = type.symbol();
TypeSubstitutionSolverTest.java,aType.interfaces = ImmutableList.of();,if (ImmutableList != null ) aType.interfaces = ImmutableList.of();
TypeSubstitutionSolverTest.java,JavaType aRawType = aXType.erasure();,if (aXType != null ) JavaType aRawType = aXType.erasure();
TypesTest.java,Type a = classA.symbol().type();,if (classA != null ) Type a = classA.symbol().type();
TypesTest.java,List<Type> results = Lists.newLinkedList();,if (Lists != null ) List<Type> results = Lists.newLinkedList();
CallToDeprecatedMethodCheck.java,name = symbol.owner().name();,if (symbol != null ) name = symbol.owner().name();
SerializableFieldInSerializableClassCheck.java,Type type = typeTree.symbolType();,if (typeTree != null ) Type type = typeTree.symbolType();
TypeSubstitutionSolver.java,boolean isVarArgs = method.isVarArgs();,if (method != null ) boolean isVarArgs = method.isVarArgs();
TypeSubstitutionSolver.java,int numberFormals = formals.size();,if (formals != null ) int numberFormals = formals.size();
TypeSubstitutionSolver.java,int numberArgs = argTypes.size();,if (argTypes != null ) int numberArgs = argTypes.size();
TypeSubstitutionSolver.java,List<JavaType> fakeTypes = new ArrayList<>(formalTypeSubstitutedTypes.size());,if (ArrayList<>(formalTypeSubstitutedTypes != null ) List<JavaType> fakeTypes = new ArrayList<>(formalTypeSubstitutedTypes.size());
TypeSubstitutionSolver.java,return argType == formalType.erasure();,if (formalType != null ) return argType == formalType.erasure();
TypeAndReferenceSolver.java,ExpressionTree enclosingExpression = tree.enclosingExpression();,if (tree != null ) ExpressionTree enclosingExpression = tree.enclosingExpression();
TypeAndReferenceSolver.java,TypeTree identifier = tree.identifier();,if (tree != null ) TypeTree identifier = tree.identifier();
TypeAndReferenceSolver.java,JavaType type = idType.type();,if (idType != null ) JavaType type = idType.type();
TypeAndReferenceSolver.java,JavaSymbol owner = constructorIdentifierSymbol.owner();,if (constructorIdentifierSymbol != null ) JavaSymbol owner = constructorIdentifierSymbol.owner();
TypeAndReferenceSolver.java,JavaType type = (JavaType) identifier.symbolType();,if (identifier != null ) JavaType type = (JavaType) identifier.symbolType();
TypeAndReferenceSolver.java,Tree parent = newClassTreeImpl.parent();,if (newClassTreeImpl != null ) Tree parent = newClassTreeImpl.parent();
TypeSubstitutionSolver.java,resultType = symbols.deferedType();,if (symbols != null ) resultType = symbols.deferedType();
SecondPass.java,List<JavaType> argTypes = Lists.newArrayList();,if (Lists != null ) List<JavaType> argTypes = Lists.newArrayList();
TypeAndReferenceSolver.java,JavaType type = getType(tree.type());,if (getType(tree != null ) JavaType type = getType(tree.type());
TypeAndReferenceSolver.java,returnType = getType(tree.identifier());,if (getType(tree != null ) returnType = getType(tree.identifier());
ResourceMapping.java,fileKeyByResource = HashBiMap.create();,if (HashBiMap != null ) fileKeyByResource = HashBiMap.create();
Resolve.java,resolution.type = returnType.erasure();,if (returnType != null ) resolution.type = returnType.erasure();
TypeAndReferenceSolver.java,int size = methodSymbol.parameterTypes().size();,if (methodSymbol != null ) int size = methodSymbol.parameterTypes().size();
JavaSonarWayProfileTest.java,RulesDefinition.Context context = new RulesDefinition.Context();,if (RulesDefinition != null ) RulesDefinition.Context context = new RulesDefinition.Context();
Resolve.java,resolution.type = symbols.deferedType();,if (symbols != null ) resolution.type = symbols.deferedType();
BaseTreeVisitorIssueFilter.java,ignoredLinesByComponentAndRule = Maps.newHashMap();,if (Maps != null ) ignoredLinesByComponentAndRule = Maps.newHashMap();
BaseTreeVisitorIssueFilter.java,filteredRulesKeys = Sets.newHashSet(rulesKeysByRulesClass.values());,if (Sets != null ) filteredRulesKeys = Sets.newHashSet(rulesKeysByRulesClass.values());
BaseTreeVisitorIssueFilter.java,String ruleKey = issue.ruleKey().rule();,if (issue != null ) String ruleKey = issue.ruleKey().rule();
JavaFilesCache.java,int endLine = tree.closeBraceToken().line();,if (tree != null ) int endLine = tree.closeBraceToken().line();
JavaFilesCache.java,variableEndLine = LastSyntaxTokenFinder.lastSyntaxToken(variable).line();,if (LastSyntaxTokenFinder != null ) variableEndLine = LastSyntaxTokenFinder.lastSyntaxToken(variable).line();
JavaFilesCache.java,List<String> warnings = Lists.newArrayList();,if (Lists != null ) List<String> warnings = Lists.newArrayList();
JavaFilesCache.java,List<String> args = Lists.newArrayList();,if (Lists != null ) List<String> args = Lists.newArrayList();
SuppressWarningsFilter.java,Integer line = issue.line();,if (issue != null ) Integer line = issue.line();
SuppressWarningsFilter.java,String componentKey = issue.componentKey();,if (issue != null ) String componentKey = issue.componentKey();
SuppressWarningsFilter.java,RuleKey ruleKey = issue.ruleKey();,if (issue != null ) RuleKey ruleKey = issue.ruleKey();
EqualsNotOverriddenInSubclassCheck.java,SymbolMetadata metadata = classTree.symbol().metadata();,if (classTree != null ) SymbolMetadata metadata = classTree.symbol().metadata();
EqualsNotOverridenWithCompareToCheck.java,SymbolMetadata metadata = classTree.symbol().metadata();,if (classTree != null ) SymbolMetadata metadata = classTree.symbol().metadata();
EclipseI18NFilterTest.java,VisitorsBridgeForTests.TestJavaFileScannerContext testJavaFileScannerContext = visitorsBridge.lastCreatedTestContext();,if (visitorsBridge != null ) VisitorsBridgeForTests.TestJavaFileScannerContext testJavaFileScannerContext = visitorsBridge.lastCreatedTestContext();
TypeAndReferenceSolver.java,int size = methodSymbol.parameterTypes().size();,if (methodSymbol != null ) int size = methodSymbol.parameterTypes().size();
JavaSymbol.java,JavaType.ClassJavaType superClassType = (JavaType.ClassJavaType) this.superClass();,if (this != null ) JavaType.ClassJavaType superClassType = (JavaType.ClassJavaType) this.superClass();
JavaSymbol.java,superClassType = (JavaType.ClassJavaType) superClassSymbol.superClass();,if (superClassSymbol != null ) superClassType = (JavaType.ClassJavaType) superClassSymbol.superClass();
JavaType.java,erasure.elementType = elementType.erasure();,if (elementType != null ) erasure.elementType = elementType.erasure();
JavaType.java,this.rawType = symbol.getType();,if (symbol != null ) this.rawType = symbol.getType();
JavaType.java,List<JavaType> myTypes = typeSubstitution.substitutedTypes();,if (typeSubstitution != null ) List<JavaType> myTypes = typeSubstitution.substitutedTypes();
JavaType.java,List<JavaType> itsTypes = superType.typeSubstitution.substitutedTypes();,if (superType != null ) List<JavaType> itsTypes = superType.typeSubstitution.substitutedTypes();
JavaType.java,interfaces = ImmutableList.of();,if (ImmutableList != null ) interfaces = ImmutableList.of();
SymbolTableTest.java,JavaType.ParametrizedTypeJavaType superType = (JavaType.ParametrizedTypeJavaType) enumSymbol.getSuperclass();,if (enumSymbol != null ) JavaType.ParametrizedTypeJavaType superType = (JavaType.ParametrizedTypeJavaType) enumSymbol.getSuperclass();
SymbolTableTest.java,JavaType.ParametrizedTypeJavaType superType = (JavaType.ParametrizedTypeJavaType) enumSymbol.getSuperclass();,if (enumSymbol != null ) JavaType.ParametrizedTypeJavaType superType = (JavaType.ParametrizedTypeJavaType) enumSymbol.getSuperclass();
CustomSerializationMethodCheck.java,Symbol.MethodSymbol methodSymbol = methodTree.symbol();,if (methodTree != null ) Symbol.MethodSymbol methodSymbol = methodTree.symbol();
CustomSerializationMethodCheck.java,Symbol.TypeSymbol owner = (Symbol.TypeSymbol) methodSymbol.owner();,if (methodSymbol != null ) Symbol.TypeSymbol owner = (Symbol.TypeSymbol) methodSymbol.owner();
CustomSerializationMethodCheck.java,List<Type> parametersTypes = methodSymbol.parameterTypes();,if (methodSymbol != null ) List<Type> parametersTypes = methodSymbol.parameterTypes();
CustomSerializationMethodCheck.java,Symbol.MethodSymbol methodSymbol = methodTree.symbol();,if (methodTree != null ) Symbol.MethodSymbol methodSymbol = methodTree.symbol();
CustomSerializationMethodCheck.java,Symbol.MethodSymbol methodSymbol = methodTree.symbol();,if (methodTree != null ) Symbol.MethodSymbol methodSymbol = methodTree.symbol();
CustomSerializationMethodCheck.java,Symbol.MethodSymbol methodSymbol = methodTree.symbol();,if (methodTree != null ) Symbol.MethodSymbol methodSymbol = methodTree.symbol();
TagTest.java,Constructor constructor = Tag.class.getDeclaredConstructor();,if (Tag != null ) Constructor constructor = Tag.class.getDeclaredConstructor();
JavaSonarWayProfileTest.java,Object[] arguments = invocation.getArguments();,if (invocation != null ) Object[] arguments = invocation.getArguments();
StaticMethodCheck.java,Type scopeType = scope.type().erasure();,if (scope != null ) Type scopeType = scope.type().erasure();
StaticMethodCheck.java,Type symbolType = symbol.type().erasure();,if (symbol != null ) Type symbolType = symbol.type().erasure();
EqualsNotOverridenWithCompareToCheck.java,SymbolMetadata metadata = classTree.symbol().metadata();,if (classTree != null ) SymbolMetadata metadata = classTree.symbol().metadata();
RedundantInterfaceCheck.java,ListTree<TypeTree> superInterfaces = classTree.superInterfaces();,if (classTree != null ) ListTree<TypeTree> superInterfaces = classTree.superInterfaces();
RedundantInterfaceCheck.java,List<Type> types = new ArrayList<>(superInterfaces.size());,if (ArrayList<>(superInterfaces != null ) List<Type> types = new ArrayList<>(superInterfaces.size());
RedundantInterfaceCheck.java,Type interfaceType = currentInterface.symbolType();,if (currentInterface != null ) Type interfaceType = currentInterface.symbolType();
RedundantInterfaceCheck.java,TypeSymbol superTypeSymbol = superType.symbol();,if (superType != null ) TypeSymbol superTypeSymbol = superType.symbol();
UselessExtendsCheck.java,Type interfaceType = superInterfaceTree.symbolType();,if (superInterfaceTree != null ) Type interfaceType = superInterfaceTree.symbolType();
UselessExtendsCheck.java,String interfaceName = interfaceType.fullyQualifiedName();,if (interfaceType != null ) String interfaceName = interfaceType.fullyQualifiedName();
UselessExtendsCheck.java,Type symbolType = superInterfaceTree.symbolType();,if (superInterfaceTree != null ) Type symbolType = superInterfaceTree.symbolType();
UselessExtendsCheck.java,String interfaceName = symbolType.fullyQualifiedName();,if (symbolType != null ) String interfaceName = symbolType.fullyQualifiedName();
SECheck.java,DefaultJavaFileScannerContext.SEIssue seIssue = issue.getValue();,if (issue != null ) DefaultJavaFileScannerContext.SEIssue seIssue = issue.getValue();
ExplodedGraphWalkerTest.java,DefaultJavaFileScannerContext.SEIssue seIssue = issue.getValue();,if (issue != null ) DefaultJavaFileScannerContext.SEIssue seIssue = issue.getValue();
RedundantTypeCastCheck.java,parent = parent.parent();,if (parent != null ) parent = parent.parent();
RedundantTypeCastCheck.java,ExpressionTree expression = typeCastTree.expression();,if (typeCastTree != null ) ExpressionTree expression = typeCastTree.expression();
RedundantTypeCastCheck.java,JavaType expressionType = (JavaType) expression.symbolType();,if (expression != null ) JavaType expressionType = (JavaType) expression.symbolType();
RedundantTypeCastCheck.java,ExpressionTree expression = typeCastTree.expression();,if (typeCastTree != null ) ExpressionTree expression = typeCastTree.expression();
RedundantTypeCastCheck.java,args = mit.arguments();,if (mit != null ) args = mit.arguments();
RedundantTypeCastCheck.java,args = newClassTree.arguments();,if (newClassTree != null ) args = newClassTree.arguments();
RedundantTypeCastCheck.java,erasedExpressionType = erasedExpressionType.erasure();,if (erasedExpressionType != null ) erasedExpressionType = erasedExpressionType.erasure();
ConstraintManager.java,boolean value = Boolean.parseBoolean(syntaxNode.value());,if (Boolean != null ) boolean value = Boolean.parseBoolean(syntaxNode.value());
ExceptionsShouldBeImmutableCheck.java,IdentifierTree simpleName = classTree.simpleName();,if (classTree != null ) IdentifierTree simpleName = classTree.simpleName();
ImmediateReverseBoxingCheck.java,MethodInvocationMatcherCollection matchers = MethodInvocationMatcherCollection.create();,if (MethodInvocationMatcherCollection != null ) MethodInvocationMatcherCollection matchers = MethodInvocationMatcherCollection.create();
ImmediateReverseBoxingCheck.java,MethodInvocationMatcherCollection matchers = MethodInvocationMatcherCollection.create();,if (MethodInvocationMatcherCollection != null ) MethodInvocationMatcherCollection matchers = MethodInvocationMatcherCollection.create();
PrimitiveTypeBoxingWithToStringCheck.java,MethodInvocationMatcherCollection matchers = MethodInvocationMatcherCollection.create();,if (MethodInvocationMatcherCollection != null ) MethodInvocationMatcherCollection matchers = MethodInvocationMatcherCollection.create();
CustomUnclosedResourcesCheck.java,classConstructor = MethodInvocationMatcherCollection.create();,if (MethodInvocationMatcherCollection != null ) classConstructor = MethodInvocationMatcherCollection.create();
TypeInferenceSolver.java,List<JavaType> results = new ArrayList<>(types.size());,if (ArrayList<>(types != null ) List<JavaType> results = new ArrayList<>(types.size());
Resolve.java,boolean isVarArgs = methodJavaSymbol.isVarArgs();,if (methodJavaSymbol != null ) boolean isVarArgs = methodJavaSymbol.isVarArgs();
Resolve.java,List<JavaType> results = new ArrayList<>(types.size());,if (ArrayList<>(types != null ) List<JavaType> results = new ArrayList<>(types.size());
CustomUnclosedResourcesCheck.java,SymbolicValue instanceValue = programState.peekValue();,if (programState != null ) SymbolicValue instanceValue = programState.peekValue();
CustomUnclosedResourcesCheck.java,SymbolicValue currentVal = programState.peekValue();,if (programState != null ) SymbolicValue currentVal = programState.peekValue();
CustomUnclosedResourcesCheck.java,currentVal = programState.getValue(identifier.symbol());,if (programState != null ) currentVal = programState.getValue(identifier.symbol());
CustomUnclosedResourcesCheck.java,classConstructor = ImmutableList.of();,if (ImmutableList != null ) classConstructor = ImmutableList.of();
CustomUnclosedResourcesCheck.java,final SymbolicValue instanceValue = programState.peekValue();,if (programState != null ) final SymbolicValue instanceValue = programState.peekValue();
CustomUnclosedResourcesCheck.java,final ExpressionTree expression = syntaxNode.expression();,if (syntaxNode != null ) final ExpressionTree expression = syntaxNode.expression();
CustomUnclosedResourcesCheck.java,final SymbolicValue instanceValue = programState.peekValue();,if (programState != null ) final SymbolicValue instanceValue = programState.peekValue();
CustomUnclosedResourcesCheck.java,final SymbolicValue instanceValue = programState.peekValue();,if (programState != null ) final SymbolicValue instanceValue = programState.peekValue();
CustomUnclosedResourcesCheck.java,Iterator<String> iterator = arguments.iterator();,if (arguments != null ) Iterator<String> iterator = arguments.iterator();
CustomUnclosedResourcesCheck.java,Type argumentType = expressionTree.symbolType();,if (expressionTree != null ) Type argumentType = expressionTree.symbolType();
CustomUnclosedResourcesCheck.java,Type type = syntaxNode.identifier().symbolType();,if (syntaxNode != null ) Type type = syntaxNode.identifier().symbolType();
CustomUnclosedResourcesCheck.java,Symbol symbol = syntaxNode.symbol();,if (syntaxNode != null ) Symbol symbol = syntaxNode.symbol();
UnclosedResourcesCheck.java,"programState = closeResource(programState, programState.peekValue());","if (programState != null ) programState = closeResource(programState, programState.peekValue());"
UnclosedResourcesCheck.java,final Object constraint = programState.getConstraint(value.wrappedValue());,if (programState != null ) final Object constraint = programState.getConstraint(value.wrappedValue());
SubscriptionBaseVisitor.java,semanticModel = (SemanticModel) context.getSemanticModel();,if (context != null ) semanticModel = (SemanticModel) context.getSemanticModel();
FieldMatchMethodNameCheck.java,String symName = sym.name().toLowerCase();,if (sym != null ) String symName = sym.name().toLowerCase();
CaseInsensitiveComparisonCheck.java,boolean result = foo.equals(bar.toLowerCase());             // Noncompliant {{Replace these toUpperCase()/toLowerCase() and equals() calls with a single equalsIgnoreCase() call.}},if (call != null ) boolean result = foo.equals(bar.toLowerCase());             // Noncompliant {{Replace these toUpperCase()/toLowerCase() and equals() calls with a single equalsIgnoreCase() call.}}
CaseInsensitiveComparisonCheck.java,boolean result = foo.equals(bar.toUpperCase());             // Noncompliant {{Replace these toUpperCase()/toLowerCase() and equals() calls with a single equalsIgnoreCase() call.}},if (call != null ) boolean result = foo.equals(bar.toUpperCase());             // Noncompliant {{Replace these toUpperCase()/toLowerCase() and equals() calls with a single equalsIgnoreCase() call.}}
AtLeastOneConstructorCheck.java,IdentifierTree simpleName = node.simpleName();,if (node != null ) IdentifierTree simpleName = node.simpleName();
EnumSetCheck.java,Type variableType = variableTree.symbol().type();,if (variableTree != null ) Type variableType = variableTree.symbol().type();
StaticMethodCheck.java,Boolean oneReference = atLeastOneReference.pop();,if (atLeastOneReference != null ) Boolean oneReference = atLeastOneReference.pop();
StaticMethodCheck.java,Type ownerType = owner.type();,if (owner != null ) Type ownerType = owner.type();
ConstructorCallingOverridableCheck.java,isInvocationOnSelf = isThisOrSuper(memberSelect.expression());,if (isThisOrSuper(memberSelect != null ) isInvocationOnSelf = isThisOrSuper(memberSelect.expression());
TypeAndReferenceSolver.java,bound = getType(tree.bound());,if (getType(tree != null ) bound = getType(tree.bound());
Symbols.java,unknownType.interfaces = ImmutableList.of();,if (ImmutableList != null ) unknownType.interfaces = ImmutableList.of();
SyntaxTreeNameFinderTest.java,final BlockTree block = tree.block();,if (tree != null ) final BlockTree block = tree.block();
SyntaxTreeNameFinderTest.java,final BlockTree block = tree.block();,if (tree != null ) final BlockTree block = tree.block();
SyntaxTreeNameFinderTest.java,final BlockTree block = tree.block();,if (tree != null ) final BlockTree block = tree.block();
SyntaxTreeNameFinderTest.java,final BlockTree block = tree.block();,if (tree != null ) final BlockTree block = tree.block();
SyntaxTreeNameFinderTest.java,final BlockTree block = tree.block();,if (tree != null ) final BlockTree block = tree.block();
NullDereferenceCheck.java,final SymbolicValue targetValue = programState.peekValue();,if (programState != null ) final SymbolicValue targetValue = programState.peekValue();
Types.java,Set<JavaType> erasedTypes = Sets.newHashSet();,if (Sets != null ) Set<JavaType> erasedTypes = Sets.newHashSet();
Types.java,result = erasedTypes.contains(s.erasure());,if (erasedTypes != null ) result = erasedTypes.contains(s.erasure());
CallOuterPrivateMethodCheck.java,MethodTree declaration = (MethodTree) methodUsed.declaration();,if (methodUsed != null ) MethodTree declaration = (MethodTree) methodUsed.declaration();
BinaryRelationsTest.java,BinaryRelation symmetricOfSymmetric = relation.symmetric().symmetric();,if (relation != null ) BinaryRelation symmetricOfSymmetric = relation.symmetric().symmetric();
ExplodedGraphWalker.java,Symbol symbol = syntaxNode.symbol();,if (syntaxNode != null ) Symbol symbol = syntaxNode.symbol();
SymbolicValue.java,relationToFulfill = relationToFulfill.inverse();,if (relationToFulfill != null ) relationToFulfill = relationToFulfill.inverse();
ThrowCheckedExceptionCheck.java,Type symbolType = throwStatementTree.expression().symbolType();,if (throwStatementTree != null ) Type symbolType = throwStatementTree.expression().symbolType();
XmlCheckContextImpl.java,NamedNodeMap attributes = node.getAttributes();,if (node != null ) NamedNodeMap attributes = node.getAttributes();
CatchUsesExceptionWithContextCheck.java,expr = mse.expression();,if (mse != null ) expr = mse.expression();
MethodNamedEqualsCheck.java,expr = mse.expression();,if (mse != null ) expr = mse.expression();
NoTestInTestClassCheck.java,expr = mse.expression();,if (mse != null ) expr = mse.expression();
SunPackagesUsedCheck.java,expr = mse.expression();,if (mse != null ) expr = mse.expression();
UselessImportCheck.java,expr = mse.expression();,if (mse != null ) expr = mse.expression();
XmlCheckVerifier.java,Integer line = Integer.valueOf(lineAttribute.getNodeValue());,if (Integer != null ) Integer line = Integer.valueOf(lineAttribute.getNodeValue());
XmlCheckContextImpl.java,Integer line = Integer.valueOf(lineAttribute.getNodeValue());,if (Integer != null ) Integer line = Integer.valueOf(lineAttribute.getNodeValue());
MethodTreeImpl.java,IdentifierTree identifier = (IdentifierTree) annotationTree.annotationType();,if (annotationTree != null ) IdentifierTree identifier = (IdentifierTree) annotationTree.annotationType();
XmlCheckContextImplTest.java,XPath xPath = XPathFactory.newInstance().newXPath();,if (XPathFactory != null ) XPath xPath = XPathFactory.newInstance().newXPath();
XmlCheckContextImpl.java,this.length = nodeList.getLength();,if (nodeList != null ) this.length = nodeList.getLength();
XmlCheckContextImpl.java,XPath xPath = XPathFactory.newInstance().newXPath();,if (XPathFactory != null ) XPath xPath = XPathFactory.newInstance().newXPath();
XmlCheckContextImpl.java,XPath xPath = XPathFactory.newInstance().newXPath();,if (XPathFactory != null ) XPath xPath = XPathFactory.newInstance().newXPath();
XmlParser.java,SAXParser parser = factory.newSAXParser();,if (factory != null ) SAXParser parser = factory.newSAXParser();
XmlParser.java,DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();,if (DocumentBuilderFactory != null ) DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
XmlParser.java,DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();,if (docBuilderFactory != null ) DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
XmlParser.java,Document document = docBuilder.newDocument();,if (docBuilder != null ) Document document = docBuilder.newDocument();
JavaSymbol.java,this.usages = Lists.newArrayList();,if (Lists != null ) this.usages = Lists.newArrayList();
MavenCheckVerifier.java,XMLInputFactory factory = XMLInputFactory.newInstance();,if (XMLInputFactory != null ) XMLInputFactory factory = XMLInputFactory.newInstance();
MavenCheckVerifier.java,int line = reader.getLocation().getLineNumber();,if (reader != null ) int line = reader.getLocation().getLineNumber();
MavenCheckVerifier.java,String text = reader.getText().trim();,if (reader != null ) String text = reader.getText().trim();
XmlAnalyzer.java,this.scanners = scannersBuilder.build();,if (scannersBuilder != null ) this.scanners = scannersBuilder.build();
XmlAnalyzer.java,boolean hasMavenFileScanners = !scanners.isEmpty();,if (!scanners != null ) boolean hasMavenFileScanners = !scanners.isEmpty();
MavenAnalyzerTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
AnnotationArgumentOrderCheck.java,IdentifierTree nameTree = (IdentifierTree) assigmentTree.variable();,if (assigmentTree != null ) IdentifierTree nameTree = (IdentifierTree) assigmentTree.variable();
AtLeastOneConstructorCheck.java,List<Tree> members = node.members();,if (node != null ) List<Tree> members = node.members();
DefaultEncodingUsageCheck.java,"boolean foundIssue = checkForbiddenTypes(tree, variableTree.type());","if (variableTree != null ) boolean foundIssue = checkForbiddenTypes(tree, variableTree.type());"
LambdaOptionalParenthesisCheck.java,String ident = param.simpleName().name();,if (param != null ) String ident = param.simpleName().name();
LoggersDeclarationCheck.java,boolean hasValidLoggerName = isValidLoggerName(tree.simpleName().name());,if (isValidLoggerName(tree != null ) boolean hasValidLoggerName = isValidLoggerName(tree.simpleName().name());
SerialVersionUidCheck.java,Tree tree = serialVersionUidSymbol.declaration();,if (serialVersionUidSymbol != null ) Tree tree = serialVersionUidSymbol.declaration();
ShiftOnIntOrLongCheck.java,long numberBits = literalValue.longValue();,if (literalValue != null ) long numberBits = literalValue.longValue();
SynchronizedFieldAssignmentCheck.java,ExpressionTree synchronizedExpression = sst.expression();,if (sst != null ) ExpressionTree synchronizedExpression = sst.expression();
SynchronizedFieldAssignmentCheck.java,int line = FirstSyntaxTokenFinder.firstSyntaxToken(variable).line();,if (FirstSyntaxTokenFinder != null ) int line = FirstSyntaxTokenFinder.firstSyntaxToken(variable).line();
UselessExtendsCheck.java,String interfaceName = superInterfaceTree.symbolType().fullyQualifiedName();,if (superInterfaceTree != null ) String interfaceName = superInterfaceTree.symbolType().fullyQualifiedName();
WaitInSynchronizeCheck.java,methodName = mse.identifier().name();,if (mse != null ) methodName = mse.identifier().name();
WaitInWhileLoopCheck.java,MemberSelectExpressionTree mse = (MemberSelectExpressionTree) mit.methodSelect();,if (mit != null ) MemberSelectExpressionTree mse = (MemberSelectExpressionTree) mit.methodSelect();
WaitInWhileLoopCheck.java,methodName = mse.identifier().name();,if (mse != null ) methodName = mse.identifier().name();
ArrayHashCodeAndToStringCheck.java,"String argStr = args.toString(); // Noncompliant {{Use ""Arrays.toString(array)"" instead.}}","if (instead != null ) String argStr = args.toString(); // Noncompliant {{Use ""Arrays.toString(array)"" instead.}}"
GetRequestedSessionIdCheck.java,"String sessionId = request.getRequestedSessionId(); // Noncompliant {{Remove use of this unsecured ""getRequestedSessionId()"" method}}","if (method}} != null ) String sessionId = request.getRequestedSessionId(); // Noncompliant {{Remove use of this unsecured ""getRequestedSessionId()"" method}}"
PseudoRandomCheck.java,"double j = Math.random(); // Noncompliant {{Use a cryptographically strong random number generator (RNG) like ""java.security.SecureRandom"" in place of this PRNG}}","if (PRNG}} != null ) double j = Math.random(); // Noncompliant {{Use a cryptographically strong random number generator (RNG) like ""java.security.SecureRandom"" in place of this PRNG}}"
StringToString.java,"String string = ""hello"".toString(); // Noncompliant {{there's no need to call ""toString()"" on a string literal.}}","if (literal != null ) String string = ""hello"".toString(); // Noncompliant {{there's no need to call ""toString()"" on a string literal.}}"
LastSyntaxTokenFinder.java,lastSyntaxToken = tree.closeBraceToken();,if (tree != null ) lastSyntaxToken = tree.closeBraceToken();
LastSyntaxTokenFinder.java,lastSyntaxToken = tree.semicolonToken();,if (tree != null ) lastSyntaxToken = tree.semicolonToken();
LastSyntaxTokenFinder.java,lastSyntaxToken = tree.semicolonToken();,if (tree != null ) lastSyntaxToken = tree.semicolonToken();
LastSyntaxTokenFinder.java,StatementTree elseStatement = tree.elseStatement();,if (tree != null ) StatementTree elseStatement = tree.elseStatement();
LastSyntaxTokenFinder.java,lastSyntaxToken = tree.semicolonToken();,if (tree != null ) lastSyntaxToken = tree.semicolonToken();
LastSyntaxTokenFinder.java,lastSyntaxToken = tree.closeBraceToken();,if (tree != null ) lastSyntaxToken = tree.closeBraceToken();
LastSyntaxTokenFinder.java,lastSyntaxToken = tree.semicolonToken();,if (tree != null ) lastSyntaxToken = tree.semicolonToken();
LastSyntaxTokenFinder.java,lastSyntaxToken = tree.semicolonToken();,if (tree != null ) lastSyntaxToken = tree.semicolonToken();
LastSyntaxTokenFinder.java,lastSyntaxToken = tree.semicolonToken();,if (tree != null ) lastSyntaxToken = tree.semicolonToken();
LastSyntaxTokenFinder.java,lastSyntaxToken = tree.semicolonToken();,if (tree != null ) lastSyntaxToken = tree.semicolonToken();
LastSyntaxTokenFinder.java,lastSyntaxToken = tree.semicolonToken();,if (tree != null ) lastSyntaxToken = tree.semicolonToken();
LastSyntaxTokenFinder.java,BlockTree finallyBlock = tree.finallyBlock();,if (tree != null ) BlockTree finallyBlock = tree.finallyBlock();
LastSyntaxTokenFinder.java,List<CatchTree> catches = tree.catches();,if (tree != null ) List<CatchTree> catches = tree.catches();
LastSyntaxTokenFinder.java,SyntaxToken semicolonToken = tree.semicolonToken();,if (tree != null ) SyntaxToken semicolonToken = tree.semicolonToken();
LastSyntaxTokenFinder.java,lastSyntaxToken = tree.closeBraceToken();,if (tree != null ) lastSyntaxToken = tree.closeBraceToken();
LastSyntaxTokenFinder.java,SyntaxToken endToken = tree.endToken();,if (tree != null ) SyntaxToken endToken = tree.endToken();
LastSyntaxTokenFinder.java,ExpressionTree initializer = tree.initializer();,if (tree != null ) ExpressionTree initializer = tree.initializer();
LastSyntaxTokenFinder.java,lastSyntaxToken = tree.separatorToken();,if (tree != null ) lastSyntaxToken = tree.separatorToken();
LastSyntaxTokenFinder.java,lastSyntaxToken = tree.colonToken();,if (tree != null ) lastSyntaxToken = tree.colonToken();
LastSyntaxTokenFinder.java,lastSyntaxToken = tree.token();,if (tree != null ) lastSyntaxToken = tree.token();
LastSyntaxTokenFinder.java,lastSyntaxToken = tree.identifierToken();,if (tree != null ) lastSyntaxToken = tree.identifierToken();
LastSyntaxTokenFinder.java,lastSyntaxToken = tree.eofToken();,if (tree != null ) lastSyntaxToken = tree.eofToken();
LastSyntaxTokenFinder.java,lastSyntaxToken = tree.semicolonToken();,if (tree != null ) lastSyntaxToken = tree.semicolonToken();
LastSyntaxTokenFinder.java,lastSyntaxToken = tree.operatorToken();,if (tree != null ) lastSyntaxToken = tree.operatorToken();
LastSyntaxTokenFinder.java,lastSyntaxToken = tree.arguments().closeParenToken();,if (tree != null ) lastSyntaxToken = tree.arguments().closeParenToken();
LastSyntaxTokenFinder.java,SyntaxToken closeBraceToken = tree.closeBraceToken();,if (tree != null ) SyntaxToken closeBraceToken = tree.closeBraceToken();
LastSyntaxTokenFinder.java,lastSyntaxToken = tree.arguments().closeParenToken();,if (tree != null ) lastSyntaxToken = tree.arguments().closeParenToken();
LastSyntaxTokenFinder.java,lastSyntaxToken = tree.closeParenToken();,if (tree != null ) lastSyntaxToken = tree.closeParenToken();
LastSyntaxTokenFinder.java,lastSyntaxToken = tree.keyword();,if (tree != null ) lastSyntaxToken = tree.keyword();
LastSyntaxTokenFinder.java,lastSyntaxToken = tree.ellipsisToken();,if (tree != null ) lastSyntaxToken = tree.ellipsisToken();
LastSyntaxTokenFinder.java,lastSyntaxToken = tree.closeBracketToken();,if (tree != null ) lastSyntaxToken = tree.closeBracketToken();
LastSyntaxTokenFinder.java,lastSyntaxToken = tree.typeArguments().closeBracketToken();,if (tree != null ) lastSyntaxToken = tree.typeArguments().closeBracketToken();
LastSyntaxTokenFinder.java,lastSyntaxToken = tree.queryToken();,if (tree != null ) lastSyntaxToken = tree.queryToken();
LastSyntaxTokenFinder.java,lastSyntaxToken = annotationTree.arguments().closeParenToken();,if (annotationTree != null ) lastSyntaxToken = annotationTree.arguments().closeParenToken();
LastSyntaxTokenFinder.java,lastSyntaxToken = trees.closeBracketToken();,if (trees != null ) lastSyntaxToken = trees.closeBracketToken();
LastSyntaxTokenFinder.java,lastSyntaxToken = trees.closeBracketToken();,if (trees != null ) lastSyntaxToken = trees.closeBracketToken();
LastSyntaxTokenFinder.java,lastSyntaxToken = tree.semicolonToken();,if (tree != null ) lastSyntaxToken = tree.semicolonToken();
LastSyntaxTokenFinder.java,lastSyntaxToken = tree.closeBracketToken();,if (tree != null ) lastSyntaxToken = tree.closeBracketToken();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.openBraceToken();,if (tree != null ) firstSyntaxToken = tree.openBraceToken();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.semicolonToken();,if (tree != null ) firstSyntaxToken = tree.semicolonToken();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.ifKeyword();,if (tree != null ) firstSyntaxToken = tree.ifKeyword();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.assertKeyword();,if (tree != null ) firstSyntaxToken = tree.assertKeyword();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.switchKeyword();,if (tree != null ) firstSyntaxToken = tree.switchKeyword();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.caseOrDefaultKeyword();,if (tree != null ) firstSyntaxToken = tree.caseOrDefaultKeyword();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.whileKeyword();,if (tree != null ) firstSyntaxToken = tree.whileKeyword();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.doKeyword();,if (tree != null ) firstSyntaxToken = tree.doKeyword();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.forKeyword();,if (tree != null ) firstSyntaxToken = tree.forKeyword();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.forKeyword();,if (tree != null ) firstSyntaxToken = tree.forKeyword();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.breakKeyword();,if (tree != null ) firstSyntaxToken = tree.breakKeyword();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.continueKeyword();,if (tree != null ) firstSyntaxToken = tree.continueKeyword();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.returnKeyword();,if (tree != null ) firstSyntaxToken = tree.returnKeyword();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.throwKeyword();,if (tree != null ) firstSyntaxToken = tree.throwKeyword();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.synchronizedKeyword();,if (tree != null ) firstSyntaxToken = tree.synchronizedKeyword();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.tryKeyword();,if (tree != null ) firstSyntaxToken = tree.tryKeyword();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.catchKeyword();,if (tree != null ) firstSyntaxToken = tree.catchKeyword();
FirstSyntaxTokenFinder.java,SyntaxToken firstModifierToken = getFirstModifierToken(tree.modifiers());,if (getFirstModifierToken(tree != null ) SyntaxToken firstModifierToken = getFirstModifierToken(tree.modifiers());
FirstSyntaxTokenFinder.java,TypeParameters typeParameters = tree.typeParameters();,if (tree != null ) TypeParameters typeParameters = tree.typeParameters();
FirstSyntaxTokenFinder.java,firstSyntaxToken = typeParameters.openBracketToken();,if (typeParameters != null ) firstSyntaxToken = typeParameters.openBracketToken();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.simpleName().identifierToken();,if (tree != null ) firstSyntaxToken = tree.simpleName().identifierToken();
FirstSyntaxTokenFinder.java,SyntaxToken firstModifierToken = getFirstModifierToken(tree.modifiers());,if (getFirstModifierToken(tree != null ) SyntaxToken firstModifierToken = getFirstModifierToken(tree.modifiers());
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.declarationKeyword();,if (tree != null ) firstSyntaxToken = tree.declarationKeyword();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.openBraceToken();,if (tree != null ) firstSyntaxToken = tree.openBraceToken();
FirstSyntaxTokenFinder.java,SyntaxToken firstModifierToken = getFirstModifierToken(tree.modifiers());,if (getFirstModifierToken(tree != null ) SyntaxToken firstModifierToken = getFirstModifierToken(tree.modifiers());
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.operatorToken();,if (tree != null ) firstSyntaxToken = tree.operatorToken();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.label().identifierToken();,if (tree != null ) firstSyntaxToken = tree.label().identifierToken();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.simpleName().identifierToken();,if (tree != null ) firstSyntaxToken = tree.simpleName().identifierToken();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.identifierToken();,if (tree != null ) firstSyntaxToken = tree.identifierToken();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.token();,if (tree != null ) firstSyntaxToken = tree.token();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.keyword();,if (tree != null ) firstSyntaxToken = tree.keyword();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.newKeyword();,if (tree != null ) firstSyntaxToken = tree.newKeyword();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.openParenToken();,if (tree != null ) firstSyntaxToken = tree.openParenToken();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.eofToken();,if (tree != null ) firstSyntaxToken = tree.eofToken();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.importKeyword();,if (tree != null ) firstSyntaxToken = tree.importKeyword();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.newKeyword();,if (tree != null ) firstSyntaxToken = tree.newKeyword();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.openParenToken();,if (tree != null ) firstSyntaxToken = tree.openParenToken();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.queryToken();,if (tree != null ) firstSyntaxToken = tree.queryToken();
FirstSyntaxTokenFinder.java,firstSyntaxToken = annotationTree.atToken();,if (annotationTree != null ) firstSyntaxToken = annotationTree.atToken();
FirstSyntaxTokenFinder.java,firstSyntaxToken = lambdaExpressionTree.openParenToken();,if (lambdaExpressionTree != null ) firstSyntaxToken = lambdaExpressionTree.openParenToken();
FirstSyntaxTokenFinder.java,firstSyntaxToken = trees.openBracketToken();,if (trees != null ) firstSyntaxToken = trees.openBracketToken();
FirstSyntaxTokenFinder.java,firstSyntaxToken = trees.openBracketToken();,if (trees != null ) firstSyntaxToken = trees.openBracketToken();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.packageKeyword();,if (tree != null ) firstSyntaxToken = tree.packageKeyword();
ConstantsShouldBeStaticFinalCheck.java,Iterator<Tree> treeIterator = tree.childrenIterator();,if (tree != null ) Iterator<Tree> treeIterator = tree.childrenIterator();
ConstantsShouldBeStaticFinalCheck.java,JavaTree javaTree = (JavaTree) treeIterator.next();,if (treeIterator != null ) JavaTree javaTree = (JavaTree) treeIterator.next();
HiddenFieldCheck.java,Tree next = iter.next();,if (iter != null ) Tree next = iter.next();
JavaParser.java,JavaTree next = (JavaTree) iter.next();,if (iter != null ) JavaTree next = (JavaTree) iter.next();
SubscriptionVisitor.java,Tree next = iter.next();,if (iter != null ) Tree next = iter.next();
SyntacticEquivalence.java,Iterator<Tree> iteratorA = leftNode.childrenIterator();,if (leftNode != null ) Iterator<Tree> iteratorA = leftNode.childrenIterator();
SyntacticEquivalence.java,Iterator<Tree> iteratorB = rightNode.childrenIterator();,if (rightNode != null ) Iterator<Tree> iteratorB = rightNode.childrenIterator();
TypeParameterTreeImpl.java,Iterator<Tree> boundsIterator = Iterators.emptyIterator();,if (Iterators != null ) Iterator<Tree> boundsIterator = Iterators.emptyIterator();
ListTreeImplTest.java,Iterator<Tree> childrenIterator = listTree.childrenIterator();,if (listTree != null ) Iterator<Tree> childrenIterator = listTree.childrenIterator();
ListTreeImplTest.java,List result = Lists.newArrayList();,if (Lists != null ) List result = Lists.newArrayList();
ListTreeImplTest.java,Iterator<Tree> childrenIterator = listTree.childrenIterator();,if (listTree != null ) Iterator<Tree> childrenIterator = listTree.childrenIterator();
ListTreeImplTest.java,List result = Lists.newArrayList();,if (Lists != null ) List result = Lists.newArrayList();
JavaCheckVerifier.java,VisitorsBridge.TestJavaFileScannerContext testJavaFileScannerContext = visitorsBridge.lastCreatedTestContext();,if (visitorsBridge != null ) VisitorsBridge.TestJavaFileScannerContext testJavaFileScannerContext = visitorsBridge.lastCreatedTestContext();
InternalVisitorsBridge.java,this.scanners = scannersBuilder.build();,if (scannersBuilder != null ) this.scanners = scannersBuilder.build();
JavaCheckVerifier.java,VisitorsBridge.TestJavaFileScannerContext testJavaFileScannerContext = visitorsBridge.lastCreatedTestContext();,if (visitorsBridge != null ) VisitorsBridge.TestJavaFileScannerContext testJavaFileScannerContext = visitorsBridge.lastCreatedTestContext();
ErrorClassExtendedCheck.java,IdentifierTree idt = (IdentifierTree) tree.superClass();,if (tree != null ) IdentifierTree idt = (IdentifierTree) tree.superClass();
ErrorClassExtendedCheck.java,MemberSelectExpressionTree mse = (MemberSelectExpressionTree) tree.superClass();,if (tree != null ) MemberSelectExpressionTree mse = (MemberSelectExpressionTree) tree.superClass();
SeveralBreakOrContinuePerLoopCheck.java,increment += breakAndContinueCounter.pop();,if (breakAndContinueCounter != null ) increment += breakAndContinueCounter.pop();
SeveralBreakOrContinuePerLoopCheck.java,count = breakAndContinueCounter.pop();,if (breakAndContinueCounter != null ) count = breakAndContinueCounter.pop();
UnusedMethodParameterCheck.java,List<String> unused = Lists.newArrayList();,if (Lists != null ) List<String> unused = Lists.newArrayList();
BooleanLiteralCheck.java,String result = getBooleanLiteral(tree.leftOperand());,if (getBooleanLiteral(tree != null ) String result = getBooleanLiteral(tree.leftOperand());
MismatchPackageDirectoryCheck.java,ExpressionTree packageNameExpression = tree.packageDeclaration().packageName();,if (tree != null ) ExpressionTree packageNameExpression = tree.packageDeclaration().packageName();
IndentationCheck.java,lastCheckedLine = LastSyntaxTokenFinder.lastSyntaxToken(previousCaseLabelTree).line();,if (LastSyntaxTokenFinder != null ) lastCheckedLine = LastSyntaxTokenFinder.lastSyntaxToken(previousCaseLabelTree).line();
IndentationCheck.java,lastCheckedLine = LastSyntaxTokenFinder.lastSyntaxToken(tree).line();,if (LastSyntaxTokenFinder != null ) lastCheckedLine = LastSyntaxTokenFinder.lastSyntaxToken(tree).line();
AbstractClassWithoutAbstractMethodCheck.java,Collection<Symbol> symbols = typeSymbol.memberSymbols();,if (typeSymbol != null ) Collection<Symbol> symbols = typeSymbol.memberSymbols();
CallToDeprecatedMethodCheck.java,name = symbol.owner().name();,if (symbol != null ) name = symbol.owner().name();
CallToDeprecatedMethodCheck.java,name = symbol.name();,if (symbol != null ) name = symbol.name();
TypesTest.java,List<Type> results = Lists.newLinkedList();,if (Lists != null ) List<Type> results = Lists.newLinkedList();
UnclosedResourcesCheck.java,final Type type = syntaxNode.symbolType();,if (syntaxNode != null ) final Type type = syntaxNode.symbolType();
UnclosedResourcesCheck.java,final SymbolicValue instanceValue = programState.peekValue();,if (programState != null ) final SymbolicValue instanceValue = programState.peekValue();
UnclosedResourcesCheck.java,Tree syntaxNode = constraint.syntaxNode();,if (constraint != null ) Tree syntaxNode = constraint.syntaxNode();
UnclosedResourcesCheck.java,final Tree grandParent = parent.parent();,if (parent != null ) final Tree grandParent = parent.parent();
UnclosedResourcesCheck.java,final Tree greatGrandParent = grandParent.parent();,if (grandParent != null ) final Tree greatGrandParent = grandParent.parent();
UnclosedResourcesCheck.java,ExpressionTree methodSelect = syntaxNode.methodSelect();,if (syntaxNode != null ) ExpressionTree methodSelect = syntaxNode.methodSelect();
UnclosedResourcesCheck.java,final SymbolicValue target = programState.getValue(identifier.symbol());,if (programState != null ) final SymbolicValue target = programState.getValue(identifier.symbol());
ArtifactIdNamingConventionCheck.java,LocatedAttribute artifactId = context.getMavenProject().getArtifactId();,if (context != null ) LocatedAttribute artifactId = context.getMavenProject().getArtifactId();
GroupIdNamingConventionCheck.java,LocatedAttribute groupId = context.getMavenProject().getGroupId();,if (context != null ) LocatedAttribute groupId = context.getMavenProject().getGroupId();
JavaSquid.java,squidIndex = (SquidIndex) astScanner.getIndex();,if (astScanner != null ) squidIndex = (SquidIndex) astScanner.getIndex();
CallToDeprecatedMethodCheck.java,String name = symbol.name();,if (symbol != null ) String name = symbol.name();
NoTestInTestClassCheck.java,IdentifierTree name = tree.simpleName();,if (tree != null ) IdentifierTree name = tree.simpleName();
AVLTree.java,int result = key.hashCode();,if (key != null ) int result = key.hashCode();
PomElementOrderCheck.java,int currentLine = projectLocation.line();,if (projectLocation != null ) int currentLine = projectLocation.line();
PomElementOrderCheck.java,int treeLine = locatedTree.startLocation().line();,if (locatedTree != null ) int treeLine = locatedTree.startLocation().line();
JavaCheckVerifier.java,List<Integer> unexpectedLines = Lists.newLinkedList();,if (Lists != null ) List<Integer> unexpectedLines = Lists.newLinkedList();
JavaCheckVerifier.java,int line = issue.getLine();,if (issue != null ) int line = issue.getLine();
JavaCheckVerifier.java,Double cost = issue.getCost();,if (issue != null ) Double cost = issue.getCost();
JavaCheckVerifier.java,Double effortToFix = analyzerMessage.getCost();,if (analyzerMessage != null ) Double effortToFix = analyzerMessage.getCost();
JavaCheckVerifier.java,AnalyzerMessage.TextSpan textSpan = analyzerMessage.primaryLocation();,if (analyzerMessage != null ) AnalyzerMessage.TextSpan textSpan = analyzerMessage.primaryLocation();
JavaCheckVerifier.java,Multiset<String> actualLines = HashMultiset.create();,if (HashMultiset != null ) Multiset<String> actualLines = HashMultiset.create();
LockState.java,List<Tree> trees = Lists.newArrayList(s.reportingTrees());,if (Lists != null ) List<Tree> trees = Lists.newArrayList(s.reportingTrees());
LockedVisitor.java,List<Symbol> symbols = Lists.newArrayList();,if (Lists != null ) List<Symbol> symbols = Lists.newArrayList();
LockedVisitor.java,Symbol owner = symbol.owner();,if (symbol != null ) Symbol owner = symbol.owner();
LockedVisitor.java,owner = owner.owner();,if (owner != null ) owner = owner.owner();
LockedVisitor.java,ExpressionTree methodSelect = methodInvocation.methodSelect();,if (methodInvocation != null ) ExpressionTree methodSelect = methodInvocation.methodSelect();
DataFlowVisitor.java,BlockTree block = method.block();,if (method != null ) BlockTree block = method.block();
DataFlowVisitor.java,Symbol symbol = getSymbol(tree.variable());,if (getSymbol(tree != null ) Symbol symbol = getSymbol(tree.variable());
DataFlowVisitor.java,executionState = blockES.restoreParent();,if (blockES != null ) executionState = blockES.restoreParent();
DataFlowVisitor.java,executionState = thenES.restoreParent();,if (thenES != null ) executionState = thenES.restoreParent();
DataFlowVisitor.java,List<CaseGroupTree> cases = tree.cases();,if (tree != null ) List<CaseGroupTree> cases = tree.cases();
DataFlowVisitor.java,ExpressionTree expression = tree.expression();,if (tree != null ) ExpressionTree expression = tree.expression();
DataFlowVisitor.java,executionState = executionState.restoreParent();,if (executionState != null ) executionState = executionState.restoreParent();
ExecutionState.java,SymbolicValue value = valueStateEntry.getKey();,if (valueStateEntry != null ) SymbolicValue value = valueStateEntry.getKey();
ExecutionState.java,State state = valueStateEntry.getValue();,if (valueStateEntry != null ) State state = valueStateEntry.getValue();
ExecutionState.java,Set<State> results = Sets.newHashSet();,if (Sets != null ) Set<State> results = Sets.newHashSet();
ExecutionState.java,List<State> states = Lists.newArrayList();,if (Lists != null ) List<State> states = Lists.newArrayList();
State.java,changingStateTrees = Lists.newArrayList();,if (Lists != null ) changingStateTrees = Lists.newArrayList();
State.java,changingStateTrees = Lists.newArrayList();,if (Lists != null ) changingStateTrees = Lists.newArrayList();
DataFlowVisitorTest.java,SymbolMetadata methodMetadata = tree.symbol().metadata();,if (tree != null ) SymbolMetadata methodMetadata = tree.symbol().metadata();
DataFlowVisitorTest.java,MemberSelectExpressionTree memberSelectTree = (MemberSelectExpressionTree) methodInvocation.methodSelect();,if (methodInvocation != null ) MemberSelectExpressionTree memberSelectTree = (MemberSelectExpressionTree) methodInvocation.methodSelect();
DataFlowVisitorTest.java,IdentifierTree expressionTree = (IdentifierTree) memberSelectTree.expression();,if (memberSelectTree != null ) IdentifierTree expressionTree = (IdentifierTree) memberSelectTree.expression();
ProgramState.java,final SymbolicValue wrappedValue = key.wrappedValue();,if (key != null ) final SymbolicValue wrappedValue = key.wrappedValue();
UnclosedResourcesCheck.java,final Type type = syntaxNode.symbolType();,if (syntaxNode != null ) final Type type = syntaxNode.symbolType();
UnclosedResourcesCheck.java,final Tree parent = syntaxNode.parent();,if (syntaxNode != null ) final Tree parent = syntaxNode.parent();
UnclosedResourcesCheck.java,final Tree grandParent = parent.parent();,if (parent != null ) final Tree grandParent = parent.parent();
UnclosedResourcesCheck.java,final Tree greatGrandParent = grandParent.parent();,if (grandParent != null ) final Tree greatGrandParent = grandParent.parent();
JaCoCoItSensor.java,boolean foundReport = report.exists() && report.isFile();,if (report != null ) boolean foundReport = report.exists() && report.isFile();
JaCoCoSensor.java,boolean foundReport = report.exists() && report.isFile();,if (report != null ) boolean foundReport = report.exists() && report.isFile();
CloseableState.java,List<Tree> trees = Lists.newArrayList(s.reportingTrees());,if (Lists != null ) List<Tree> trees = Lists.newArrayList(s.reportingTrees());
CloseableVisitor.java,Symbol.TypeSymbol typeSymbol = type.symbol();,if (type != null ) Symbol.TypeSymbol typeSymbol = type.symbol();
CloseableVisitor.java,Type superClass = typeSymbol.superClass();,if (typeSymbol != null ) Type superClass = typeSymbol.superClass();
CloseableVisitor.java,ExpressionTree methodSelect = methodInvocation.methodSelect();,if (methodInvocation != null ) ExpressionTree methodSelect = methodInvocation.methodSelect();
JavaVersionHelperTest.java,Constructor<JavaVersionHelper> constructor = JavaVersionHelper.class.getDeclaredConstructor();,if (JavaVersionHelper != null ) Constructor<JavaVersionHelper> constructor = JavaVersionHelper.class.getDeclaredConstructor();
PrinterVisitor.java,Tree.Kind kind = tree.kind();,if (tree != null ) Tree.Kind kind = tree.kind();
PrinterVisitor.java,nodeName = kind.getAssociatedInterface().getSimpleName();,if (kind != null ) nodeName = kind.getAssociatedInterface().getSimpleName();
PrinterVisitor.java,List<File> bytecodeFiles = Lists.newArrayList();,if (Lists != null ) List<File> bytecodeFiles = Lists.newArrayList();
CFG.java,return terminator == null && elements.isEmpty();,if (elements != null ) return terminator == null && elements.isEmpty();
CFG.java,BlockTree finallyBlock = tryStatementTree.finallyBlock();,if (tryStatementTree != null ) BlockTree finallyBlock = tryStatementTree.finallyBlock();
ExplodedGraphWalker.java,ExpressionTree condition = forStatement.condition();,if (forStatement != null ) ExpressionTree condition = forStatement.condition();
ExplodedGraphWalker.java,ExpressionTree initializer = variableTree.initializer();,if (variableTree != null ) ExpressionTree initializer = variableTree.initializer();
ExplodedGraphWalker.java,Type type = typeCast.type().symbolType();,if (typeCast != null ) Type type = typeCast.type().symbolType();
EmptyFileCheck.java,CompilationUnitTree tree = context.getTree();,if (context != null ) CompilationUnitTree tree = context.getTree();
ExplodedGraphWalker.java,Symbol symbol = entry.getKey();,if (entry != null ) Symbol symbol = entry.getKey();
DiamondOperatorCheck.java,TypeTree type = getTypeFromExpression(tree.parent());,if (getTypeFromExpression(tree != null ) TypeTree type = getTypeFromExpression(tree.parent());
DiamondOperatorCheck.java,type = getTypeFromExpression(tree.parent());,if (getTypeFromExpression(tree != null ) type = getTypeFromExpression(tree.parent());
Resolve.java,JavaType superclass = site.getSymbol().getSuperclass();,if (site != null ) JavaType superclass = site.getSymbol().getSuperclass();
JavaLexer.java,this.internalName = sb.toString();,if (sb != null ) this.internalName = sb.toString();
CFG.java,"currentBlock = createUnconditionalJump(tree, breakTargets.getLast());","if (breakTargets != null ) currentBlock = createUnconditionalJump(tree, breakTargets.getLast());"
CFG.java,"currentBlock = createUnconditionalJump(tree, continueTargets.getLast());","if (continueTargets != null ) currentBlock = createUnconditionalJump(tree, continueTargets.getLast());"
ExecutionState.java,this.relations = HashBasedTable.create();,if (HashBasedTable != null ) this.relations = HashBasedTable.create();
ExecutionState.java,this.relations = HashBasedTable.create();,if (HashBasedTable != null ) this.relations = HashBasedTable.create();
SymbolicEvaluator.java,Symbol symbol = identifierTree.symbol();,if (identifierTree != null ) Symbol symbol = identifierTree.symbol();
SymbolicEvaluator.java,Symbol symbol = identifierTree.symbol();,if (identifierTree != null ) Symbol symbol = identifierTree.symbol();
SymbolicEvaluator.java,IdentifierTree identifierExpression = (IdentifierTree) memberSelectTree.expression();,if (memberSelectTree != null ) IdentifierTree identifierExpression = (IdentifierTree) memberSelectTree.expression();
SymbolicEvaluator.java,"SymbolicBooleanConstraint assignedValue = evaluateExpression(currentState, tree.expression());","if (tree != null ) SymbolicBooleanConstraint assignedValue = evaluateExpression(currentState, tree.expression());"
SymbolicEvaluator.java,Symbol.VariableSymbol symbol = extractVariableSymbol(tree.variable());,if (extractVariableSymbol(tree != null ) Symbol.VariableSymbol symbol = extractVariableSymbol(tree.variable());
SymbolicEvaluator.java,"PackedStates conditionStates = evaluateCondition(currentState, tree.condition());","if (tree != null ) PackedStates conditionStates = evaluateCondition(currentState, tree.condition());"
SymbolicEvaluator.java,"PackedStates trueResult = evaluateCondition(state, tree.trueExpression());","if (tree != null ) PackedStates trueResult = evaluateCondition(state, tree.trueExpression());"
SymbolicEvaluator.java,"PackedStates falseResult = evaluateCondition(state, tree.falseExpression());","if (tree != null ) PackedStates falseResult = evaluateCondition(state, tree.falseExpression());"
SymbolicEvaluator.java,"PackedStates unaryResult = evaluateCondition(currentState, tree.expression());","if (tree != null ) PackedStates unaryResult = evaluateCondition(currentState, tree.expression());"
SymbolicEvaluator.java,"PackedStates leftResult = evaluateCondition(currentState, tree.leftOperand());","if (tree != null ) PackedStates leftResult = evaluateCondition(currentState, tree.leftOperand());"
SymbolicEvaluator.java,"PackedStates rightResult = evaluateCondition(state, tree.rightOperand());","if (tree != null ) PackedStates rightResult = evaluateCondition(state, tree.rightOperand());"
SymbolicEvaluator.java,"PackedStates leftResult = evaluateCondition(currentState, tree.leftOperand());","if (tree != null ) PackedStates leftResult = evaluateCondition(currentState, tree.leftOperand());"
SymbolicEvaluator.java,"PackedStates rightResult = evaluateCondition(state, tree.rightOperand());","if (tree != null ) PackedStates rightResult = evaluateCondition(state, tree.rightOperand());"
SymbolicEvaluator.java,"PackedStates leftResult = evaluateCondition(currentState, tree.leftOperand());","if (tree != null ) PackedStates leftResult = evaluateCondition(currentState, tree.leftOperand());"
SymbolicEvaluator.java,"PackedStates rightResult = evaluateCondition(leftState, tree.rightOperand());","if (tree != null ) PackedStates rightResult = evaluateCondition(leftState, tree.rightOperand());"
SymbolicEvaluator.java,"PackedStates rightResult = evaluateCondition(leftState, tree.rightOperand());","if (tree != null ) PackedStates rightResult = evaluateCondition(leftState, tree.rightOperand());"
SymbolicEvaluator.java,SymbolicValue leftValue = retrieveSymbolicValue(tree.leftOperand());,if (retrieveSymbolicValue(tree != null ) SymbolicValue leftValue = retrieveSymbolicValue(tree.leftOperand());
SymbolicEvaluator.java,SymbolicValue rightValue = retrieveSymbolicValue(tree.rightOperand());,if (retrieveSymbolicValue(tree != null ) SymbolicValue rightValue = retrieveSymbolicValue(tree.rightOperand());
SymbolicEvaluator.java,Symbol.VariableSymbol symbol = extractVariableSymbol(tree.variable());,if (extractVariableSymbol(tree != null ) Symbol.VariableSymbol symbol = extractVariableSymbol(tree.variable());
SymbolicEvaluator.java,"PackedStates conditionStates = evaluateCondition(currentState, tree.condition());","if (tree != null ) PackedStates conditionStates = evaluateCondition(currentState, tree.condition());"
SymbolicEvaluator.java,SymbolicBooleanConstraint conditionResult = conditionStates.getBooleanConstraint();,if (conditionStates != null ) SymbolicBooleanConstraint conditionResult = conditionStates.getBooleanConstraint();
SymbolicEvaluator.java,currentResult = currentResult.negate();,if (currentResult != null ) currentResult = currentResult.negate();
SymbolicEvaluator.java,Symbol.VariableSymbol symbol = extractVariableSymbol(tree.expression());,if (extractVariableSymbol(tree != null ) Symbol.VariableSymbol symbol = extractVariableSymbol(tree.expression());
SymbolicEvaluator.java,"PackedStates leftStates = evaluateCondition(currentState, tree.leftOperand());","if (tree != null ) PackedStates leftStates = evaluateCondition(currentState, tree.leftOperand());"
SymbolicEvaluator.java,currentResult = leftStates.getBooleanConstraint();,if (leftStates != null ) currentResult = leftStates.getBooleanConstraint();
SymbolicEvaluator.java,"PackedStates leftStates = evaluateCondition(currentState, tree.leftOperand());","if (tree != null ) PackedStates leftStates = evaluateCondition(currentState, tree.leftOperand());"
SymbolicEvaluator.java,currentResult = leftStates.getBooleanConstraint();,if (leftStates != null ) currentResult = leftStates.getBooleanConstraint();
SymbolicEvaluator.java,"PackedStates leftStates = evaluateCondition(currentState, tree.leftOperand());","if (tree != null ) PackedStates leftStates = evaluateCondition(currentState, tree.leftOperand());"
SymbolicEvaluator.java,currentResult = leftStates.getBooleanConstraint();,if (leftStates != null ) currentResult = leftStates.getBooleanConstraint();
SymbolicEvaluator.java,"SymbolicBooleanConstraint newResult = evaluateExpression(state, tree.rightOperand());","if (tree != null ) SymbolicBooleanConstraint newResult = evaluateExpression(state, tree.rightOperand());"
SymbolicEvaluator.java,"SymbolicBooleanConstraint newResult = evaluateExpression(state, tree.rightOperand());","if (tree != null ) SymbolicBooleanConstraint newResult = evaluateExpression(state, tree.rightOperand());"
SymbolicEvaluator.java,SymbolicValue leftValue = retrieveSymbolicValue(tree.leftOperand());,if (retrieveSymbolicValue(tree != null ) SymbolicValue leftValue = retrieveSymbolicValue(tree.leftOperand());
SymbolicEvaluator.java,SymbolicValue rightValue = retrieveSymbolicValue(tree.rightOperand());,if (retrieveSymbolicValue(tree != null ) SymbolicValue rightValue = retrieveSymbolicValue(tree.rightOperand());
SymbolicEvaluator.java,currentStates = PackedStatementStates.instantiate();,if (PackedStatementStates != null ) currentStates = PackedStatementStates.instantiate();
SymbolicEvaluator.java,"currentStates = evaluateStatement(currentStates, tree.statement());","if (tree != null ) currentStates = evaluateStatement(currentStates, tree.statement());"
SymbolicEvaluator.java,PackedStatementStates nextStates = PackedStatementStates.instantiate();,if (PackedStatementStates != null ) PackedStatementStates nextStates = PackedStatementStates.instantiate();
SymbolicEvaluator.java,PackedStatementStates nextStates = PackedStatementStates.instantiate();,if (PackedStatementStates != null ) PackedStatementStates nextStates = PackedStatementStates.instantiate();
SymbolicEvaluator.java,"PackedStates conditionStates = evaluateCondition(state, tree.condition());","if (tree != null ) PackedStates conditionStates = evaluateCondition(state, tree.condition());"
SymbolicEvaluator.java,"PackedStatementStates loopStates = evaluateStatement(conditionStates.trueStates, tree.statement());","if (tree != null ) PackedStatementStates loopStates = evaluateStatement(conditionStates.trueStates, tree.statement());"
SymbolicEvaluator.java,currentStates = PackedStatementStates.instantiate();,if (PackedStatementStates != null ) currentStates = PackedStatementStates.instantiate();
SymbolicEvaluator.java,"currentStates = evaluateStatement(currentStates, tree.statement());","if (tree != null ) currentStates = evaluateStatement(currentStates, tree.statement());"
SymbolicEvaluator.java,PackedStatementStates nextStates = PackedStatementStates.instantiate();,if (PackedStatementStates != null ) PackedStatementStates nextStates = PackedStatementStates.instantiate();
SymbolicEvaluator.java,"PackedStates conditionStates = evaluateCondition(state, tree.condition());","if (tree != null ) PackedStates conditionStates = evaluateCondition(state, tree.condition());"
SymbolicEvaluator.java,"PackedStatementStates trueStates = evaluateStatement(conditionStates.trueStates, tree.thenStatement());","if (tree != null ) PackedStatementStates trueStates = evaluateStatement(conditionStates.trueStates, tree.thenStatement());"
SymbolicEvaluator.java,"falseStates = evaluateStatement(conditionStates.falseStates, tree.elseStatement());","if (tree != null ) falseStates = evaluateStatement(conditionStates.falseStates, tree.elseStatement());"
SymbolicEvaluator.java,currentStates = PackedStatementStates.instantiate();,if (PackedStatementStates != null ) currentStates = PackedStatementStates.instantiate();
SymbolicEvaluator.java,PackedStatementStates nextStates = PackedStatementStates.instantiate();,if (PackedStatementStates != null ) PackedStatementStates nextStates = PackedStatementStates.instantiate();
SymbolicEvaluator.java,PackedStatementStates caseStates = PackedStatementStates.instantiate();,if (PackedStatementStates != null ) PackedStatementStates caseStates = PackedStatementStates.instantiate();
SymbolicEvaluator.java,"currentStates = evaluateStatement(currentStates, tree.block());","if (tree != null ) currentStates = evaluateStatement(currentStates, tree.block());"
SymbolicEvaluator.java,currentStates = PackedStatementStates.instantiate();,if (PackedStatementStates != null ) currentStates = PackedStatementStates.instantiate();
SymbolicEvaluator.java,"currentStates = evaluateStatement(currentStates, tree.block());","if (tree != null ) currentStates = evaluateStatement(currentStates, tree.block());"
SymbolicEvaluator.java,"currentStates = evaluateStatement(currentStates, tree.finallyBlock());","if (tree != null ) currentStates = evaluateStatement(currentStates, tree.finallyBlock());"
SymbolicEvaluator.java,PackedStatementStates nextStates = PackedStatementStates.instantiate();,if (PackedStatementStates != null ) PackedStatementStates nextStates = PackedStatementStates.instantiate();
SymbolicEvaluator.java,"PackedStates conditionStates = evaluateCondition(state, tree.condition());","if (tree != null ) PackedStates conditionStates = evaluateCondition(state, tree.condition());"
SymbolicEvaluator.java,"PackedStatementStates loopStates = evaluateStatement(conditionStates.trueStates, tree.statement());","if (tree != null ) PackedStatementStates loopStates = evaluateStatement(conditionStates.trueStates, tree.statement());"
ExplodedGraphWalker.java,ForStatementTree forStatement = (ForStatementTree) block.terminator();,if (block != null ) ForStatementTree forStatement = (ForStatementTree) block.terminator();
TempTestClass.java,final int len = string.length();,if (string != null ) final int len = string.length();
TempTestClass.java,long twiceSignifFloor = absX.shiftRight(shift).longValue();,if (absX != null ) long twiceSignifFloor = absX.shiftRight(shift).longValue();
TempTestClass.java,int keyHash = key.hashCode();,if (key != null ) int keyHash = key.hashCode();
TempTestClass.java,int valueHash = value.hashCode();,if (value != null ) int valueHash = value.hashCode();
TempTestClass.java,ReferenceEntry newFirst = entry.getNext();,if (entry != null ) ReferenceEntry newFirst = entry.getNext();
NullDereferenceCheck.java,ProgramState ps = context.getState();,if (context != null ) ProgramState ps = context.getState();
ExplodedGraphWalker.java,Symbol symbol = entry.getKey();,if (entry != null ) Symbol symbol = entry.getKey();
ConstraintManager.java,"SymbolicValue val = eval(programState, unaryExpressionTree.expression());","if (unaryExpressionTree != null ) SymbolicValue val = eval(programState, unaryExpressionTree.expression());"
ExplodedGraphWalker.java,Symbol symbol = identifierTree.symbol();,if (identifierTree != null ) Symbol symbol = identifierTree.symbol();
ConstraintManager.java,"SymbolicValue exprValue = eval(programState, instanceOfTree.expression());","if (instanceOfTree != null ) SymbolicValue exprValue = eval(programState, instanceOfTree.expression());"
ConstraintManager.java,"SymbolicValue lhs = eval(programState, equalTo.leftOperand());","if (equalTo != null ) SymbolicValue lhs = eval(programState, equalTo.leftOperand());"
ConstraintManager.java,"SymbolicValue rhs = eval(programState, equalTo.rightOperand());","if (equalTo != null ) SymbolicValue rhs = eval(programState, equalTo.rightOperand());"
ConstraintManager.java,"SymbolicValue lhs = eval(programState, notEqualTo.leftOperand());","if (notEqualTo != null ) SymbolicValue lhs = eval(programState, notEqualTo.leftOperand());"
ConstraintManager.java,"SymbolicValue rhs = eval(programState, notEqualTo.rightOperand());","if (notEqualTo != null ) SymbolicValue rhs = eval(programState, notEqualTo.rightOperand());"
ConstraintManager.java,"SymbolicValue equalToLhs = eval(programState, equalTo.leftOperand());","if (equalTo != null ) SymbolicValue equalToLhs = eval(programState, equalTo.leftOperand());"
ConstraintManager.java,"SymbolicValue equalToRhs = eval(programState, equalTo.rightOperand());","if (equalTo != null ) SymbolicValue equalToRhs = eval(programState, equalTo.rightOperand());"
ExplodedGraphWalker.java,SymbolicValue value = getVal(assignmentExpressionTree.expression());,if (getVal(assignmentExpressionTree != null ) SymbolicValue value = getVal(assignmentExpressionTree.expression());
ExplodedGraphWalker.java,Tree terminator = block.terminator();,if (block != null ) Tree terminator = block.terminator();
ExplodedGraphWalker.java,Symbol symbol = entry.getKey();,if (entry != null ) Symbol symbol = entry.getKey();
ConstraintManager.java,"SymbolicValue lhs = eval(programState, equalTo.leftOperand());","if (equalTo != null ) SymbolicValue lhs = eval(programState, equalTo.leftOperand());"
ConstraintManager.java,"SymbolicValue rhs = eval(programState, equalTo.rightOperand());","if (equalTo != null ) SymbolicValue rhs = eval(programState, equalTo.rightOperand());"
ExplodedGraphWalker.java,Symbol symbol = entry.getKey();,if (entry != null ) Symbol symbol = entry.getKey();
CFG.java,ExpressionTree methodSelect = method.methodSelect();,if (method != null ) ExpressionTree methodSelect = method.methodSelect();
CFGTest.java,MemberSelectExpressionTree select = (MemberSelectExpressionTree) method.methodSelect();,if (method != null ) MemberSelectExpressionTree select = (MemberSelectExpressionTree) method.methodSelect();
NullPointerCheck.java,semanticModel = (SemanticModel) context.getSemanticModel();,if (context != null ) semanticModel = (SemanticModel) context.getSemanticModel();
NullPointerCheck.java,ConditionalState conditionalState = visitCondition(tree.condition());,if (visitCondition(tree != null ) ConditionalState conditionalState = visitCondition(tree.condition());
NullPointerCheck.java,ConditionalState conditionalState = visitCondition(tree.condition());,if (visitCondition(tree != null ) ConditionalState conditionalState = visitCondition(tree.condition());
NullPointerCheck.java,ConditionalState conditionalState = visitCondition(tree.condition());,if (visitCondition(tree != null ) ConditionalState conditionalState = visitCondition(tree.condition());
NullPointerCheck.java,Symbol symbol = tree.symbol();,if (tree != null ) Symbol symbol = tree.symbol();
NullPointerCheck.java,List<JavaSymbol> parameters = methodSymbol.getParameters().scopeSymbols();,if (methodSymbol != null ) List<JavaSymbol> parameters = methodSymbol.getParameters().scopeSymbols();
NullPointerCheck.java,ConditionalState conditionalState = visitCondition(tree.condition());,if (visitCondition(tree != null ) ConditionalState conditionalState = visitCondition(tree.condition());
NullPointerCheck.java,Symbol symbol = tree.symbol();,if (tree != null ) Symbol symbol = tree.symbol();
NullPointerCheck.java,ConditionalState leftConditionalState = visitCondition(tree.leftOperand());,if (visitCondition(tree != null ) ConditionalState leftConditionalState = visitCondition(tree.leftOperand());
NullPointerCheck.java,ConditionalState leftConditionalState = visitCondition(tree.leftOperand());,if (visitCondition(tree != null ) ConditionalState leftConditionalState = visitCondition(tree.leftOperand());
NullPointerCheckTest.java,AssignmentVisitor visitor = new NullPointerCheck.AssignmentVisitor();,if (NullPointerCheck != null ) AssignmentVisitor visitor = new NullPointerCheck.AssignmentVisitor();
SonarComponents.java,Issue issue = issueBuilder.build();,if (issueBuilder != null ) Issue issue = issueBuilder.build();
CheckListTest.java,Constructor constructor = CheckList.class.getDeclaredConstructor();,if (CheckList != null ) Constructor constructor = CheckList.class.getDeclaredConstructor();
DeadStoreCheck.java,symbol = localVar.symbol();,if (localVar != null ) symbol = localVar.symbol();
ClassWithOnlyStaticMethodsInstantiationCheck.java,Collection<MethodSymbol> methods = filterMethods(newClassTypeSymbol.memberSymbols());,if (filterMethods(newClassTypeSymbol != null ) Collection<MethodSymbol> methods = filterMethods(newClassTypeSymbol.memberSymbols());
ClassWithOnlyStaticMethodsInstantiationCheck.java,List<MethodSymbol> methods = Lists.newArrayList();,if (Lists != null ) List<MethodSymbol> methods = Lists.newArrayList();
JavaVersionAwareVisitorTest.java,List<String> messages = Lists.newArrayList();,if (Lists != null ) List<String> messages = Lists.newArrayList();
CatchOfThrowableOrErrorCheck.java,TypeTree typeTree = catchTree.parameter().type();,if (catchTree != null ) TypeTree typeTree = catchTree.parameter().type();
DefaultJavaFileScannerContext.java,Issue issue = issueBuilder.build();,if (issueBuilder != null ) Issue issue = issueBuilder.build();
ChecksBridge.java,this.checks = sonarComponents.checks();,if (sonarComponents != null ) this.checks = sonarComponents.checks();
ChecksBridge.java,this.resourcePerspectives = sonarComponents.getResourcePerspectives();,if (sonarComponents != null ) this.resourcePerspectives = sonarComponents.getResourcePerspectives();
ChecksBridge.java,fs = sonarComponents.getFileSystem();,if (sonarComponents != null ) fs = sonarComponents.getFileSystem();
ChecksBridge.java,Set<CheckMessage> messages = squidFile.getCheckMessages();,if (squidFile != null ) Set<CheckMessage> messages = squidFile.getCheckMessages();
ChecksBridge.java,Object check = checkMessage.getCheck();,if (checkMessage != null ) Object check = checkMessage.getCheck();
ChecksBridge.java,AnalyzerMessage.TextSpan textSpan = issue.primaryLocation();,if (issue != null ) AnalyzerMessage.TextSpan textSpan = issue.primaryLocation();
ChecksBridge.java,AnalyzerMessage.TextSpan secondarySpan = secondaryLocation.primaryLocation();,if (secondaryLocation != null ) AnalyzerMessage.TextSpan secondarySpan = secondaryLocation.primaryLocation();
JavaSquid.java,squidIndex = (SquidIndex) astScanner.getIndex();,if (astScanner != null ) squidIndex = (SquidIndex) astScanner.getIndex();
BytecodeVisitor.java,String sourceFileKey = javaResourceLocator.findSourceFileKeyByClassName(asmClass.getInternalName());,if (javaResourceLocator != null ) String sourceFileKey = javaResourceLocator.findSourceFileKeyByClassName(asmClass.getInternalName());
DependenciesVisitor.java,resourceMapping = javaResourceLocator.getResourceMapping();,if (javaResourceLocator != null ) resourceMapping = javaResourceLocator.getResourceMapping();
DefaultJavaFileScannerContext.java,Issue issue = issueBuilder.build();,if (issueBuilder != null ) Issue issue = issueBuilder.build();
JavaCheckVerifier.java,int line = checkMessage.getLine();,if (checkMessage != null ) int line = checkMessage.getLine();
JavaCheckVerifier.java,Double cost = checkMessage.getCost();,if (checkMessage != null ) Double cost = checkMessage.getCost();
JavaCheckVerifier.java,Set<CheckMessage> checkMessages = sourceCode.getCheckMessages();,if (sourceCode != null ) Set<CheckMessage> checkMessages = sourceCode.getCheckMessages();
VisitorsBridge.java,this.scanners = scannersBuilder.build();,if (scannersBuilder != null ) this.scanners = scannersBuilder.build();
IssuableSubscriptionVisitorTest.java,SourceCode sourceCode = sourceCodes.iterator().next();,if (sourceCodes != null ) SourceCode sourceCode = sourceCodes.iterator().next();
VisitorsBridge.java,Issue issue = issueBuilder.build();,if (issueBuilder != null ) Issue issue = issueBuilder.build();
DeprecatedHashAlgorithmCheck.java,ExpressionTree methodSelect = mit.methodSelect();,if (mit != null ) ExpressionTree methodSelect = mit.methodSelect();
IgnoredReturnValueCheck.java,id = (IdentifierTree) mit.methodSelect();,if (mit != null ) id = (IdentifierTree) mit.methodSelect();
IdenticalOperandOnBinaryExpressionCheck.java,Tree.Kind binaryKind = tree.kind();,if (tree != null ) Tree.Kind binaryKind = tree.kind();
ClassComplexityCheck.java,int size = complexity.size();,if (complexity != null ) int size = complexity.size();
SQLInjectionCheck.java,MemberSelectExpressionTree memberSelectExpressionTree = (MemberSelectExpressionTree) methodTree.methodSelect();,if (methodTree != null ) MemberSelectExpressionTree memberSelectExpressionTree = (MemberSelectExpressionTree) methodTree.methodSelect();
SQLInjectionCheck.java,MemberSelectExpressionTree memberSelectExpressionTree = (MemberSelectExpressionTree) methodTree.methodSelect();,if (methodTree != null ) MemberSelectExpressionTree memberSelectExpressionTree = (MemberSelectExpressionTree) methodTree.methodSelect();
SQLInjectionCheck.java,Type selectorType = expressionTree.symbolType();,if (expressionTree != null ) Type selectorType = expressionTree.symbolType();
DeadStoreCheck.java,Object semanticModel = context.getSemanticModel();,if (context != null ) Object semanticModel = context.getSemanticModel();
SemanticModel.java,Tree next = iter.next();,if (iter != null ) Tree next = iter.next();
JavaCheckVerifierTest.java,IssuableSubscriptionVisitor visitor = new FakeVisitor().withDefaultIssues();,if (FakeVisitor() != null ) IssuableSubscriptionVisitor visitor = new FakeVisitor().withDefaultIssues();
JavaCheckVerifierTest.java,IssuableSubscriptionVisitor visitor = new FakeVisitor().withDefaultIssues();,if (FakeVisitor() != null ) IssuableSubscriptionVisitor visitor = new FakeVisitor().withDefaultIssues();
GetRequestedSessionIdCheck.java,String sessionId = request.getRequestedSessionId();,if (request != null ) String sessionId = request.getRequestedSessionId();
NullCipherCheck.java,c = new javax.crypto.NullCipher();,if (javax != null ) c = new javax.crypto.NullCipher();
JavaCheckVerifier.java,int line = checkMessage.getLine();,if (checkMessage != null ) int line = checkMessage.getLine();
JavaCheckVerifierTest.java,List<Integer> lines = Lists.newArrayList(issues.keySet());,if (Lists != null ) List<Integer> lines = Lists.newArrayList(issues.keySet());
LiveVariables.java,LocalVariableReadExtractor extractor = new LocalVariableReadExtractor(cfg.methodSymbol());,if (LocalVariableReadExtractor(cfg != null ) LocalVariableReadExtractor extractor = new LocalVariableReadExtractor(cfg.methodSymbol());
LiveVariables.java,LocalVariableReadExtractor extractorFromClass = new LocalVariableReadExtractor(cfg.methodSymbol());,if (LocalVariableReadExtractor(cfg != null ) LocalVariableReadExtractor extractorFromClass = new LocalVariableReadExtractor(cfg.methodSymbol());
UnusedPrivateMethodCheck.java,Symbol symbol = node.symbol();,if (node != null ) Symbol symbol = node.symbol();
ReassignmentFinder.java,int line = FirstSyntaxTokenFinder.firstSyntaxToken(startingPoint).line();,if (FirstSyntaxTokenFinder != null ) int line = FirstSyntaxTokenFinder.firstSyntaxToken(startingPoint).line();
ReassignmentFinder.java,int reassignmentLine = FirstSyntaxTokenFinder.firstSyntaxToken(reassignment).line();,if (FirstSyntaxTokenFinder != null ) int reassignmentLine = FirstSyntaxTokenFinder.firstSyntaxToken(reassignment).line();
SymbolTableTest.java,JavaType.ParametrizedTypeJavaType superType = (JavaType.ParametrizedTypeJavaType)enumSymbol.getSuperclass();,if ((JavaType != null ) JavaType.ParametrizedTypeJavaType superType = (JavaType.ParametrizedTypeJavaType)enumSymbol.getSuperclass();
ComplexityVisitor.java,StatementTree last = Iterables.getLast(block.body());,if (Iterables != null ) StatementTree last = Iterables.getLast(block.body());
SwitchWithTooManyCasesCheck.java,cases+=caseGroupTree.labels().size();,if (cases+=caseGroupTree != null ) cases+=caseGroupTree.labels().size();
ObjectCreatedOnlyToCallGetClassCheck.java,name = getTypeName(symbol.superClass());,if (getTypeName(symbol != null ) name = getTypeName(symbol.superClass());
PreparedStatementAndResultSetCheck.java,"Tree lastAssignment = ReassignmentFinder.getClosestReassignmentOrDeclaration(identifier, identifier.symbol());","if (identifier != null ) Tree lastAssignment = ReassignmentFinder.getClosestReassignmentOrDeclaration(identifier, identifier.symbol());"
ReassignmentFinder.java,int line = FirstSyntaxTokenFinder.firstSyntaxToken(startingPoint).line();,if (FirstSyntaxTokenFinder != null ) int line = FirstSyntaxTokenFinder.firstSyntaxToken(startingPoint).line();
PreparedStatementAndResultSetCheck.java,Integer left = getNumberQuery(stringConcatenation.leftOperand());,if (getNumberQuery(stringConcatenation != null ) Integer left = getNumberQuery(stringConcatenation.leftOperand());
PreparedStatementAndResultSetCheck.java,Integer right = getNumberQuery(stringConcatenation.rightOperand());,if (getNumberQuery(stringConcatenation != null ) Integer right = getNumberQuery(stringConcatenation.rightOperand());
PreparedStatementAndResultSetCheck.java,Tree result = referenceSymbol.declaration();,if (referenceSymbol != null ) Tree result = referenceSymbol.declaration();
PreparedStatementAndResultSetCheck.java,List<IdentifierTree> usages = referenceSymbol.usages();,if (referenceSymbol != null ) List<IdentifierTree> usages = referenceSymbol.usages();
PreparedStatementAndResultSetCheck.java,int line = FirstSyntaxTokenFinder.firstSyntaxToken(startingPoint).line();,if (FirstSyntaxTokenFinder != null ) int line = FirstSyntaxTokenFinder.firstSyntaxToken(startingPoint).line();
PreparedStatementAndResultSetCheck.java,int reassignmentLine = FirstSyntaxTokenFinder.firstSyntaxToken(reassignment).line();,if (FirstSyntaxTokenFinder != null ) int reassignmentLine = FirstSyntaxTokenFinder.firstSyntaxToken(reassignment).line();
PreparedStatementAndResultSetCheck.java,reassignmentBySymbol = LinkedListMultimap.create();,if (LinkedListMultimap != null ) reassignmentBySymbol = LinkedListMultimap.create();
CFG.java,StatementTree elseStatement = ifStatementTree.elseStatement();,if (ifStatementTree != null ) StatementTree elseStatement = ifStatementTree.elseStatement();
CFG.java,ExpressionTree elseStatement = cond.falseExpression();,if (cond != null ) ExpressionTree elseStatement = cond.falseExpression();
CFG.java,currentBlock = switches.removeLast();,if (switches != null ) currentBlock = switches.removeLast();
CFG.java,"currentBlock = createUnconditionalJump(tree, breakTargets.getLast());","if (breakTargets != null ) currentBlock = createUnconditionalJump(tree, breakTargets.getLast());"
CFG.java,"currentBlock = createUnconditionalJump(tree, continueTargets.getLast());","if (continueTargets != null ) currentBlock = createUnconditionalJump(tree, continueTargets.getLast());"
CFG.java,BlockTree finallyBlock = tryStatementTree.finallyBlock();,if (tryStatementTree != null ) BlockTree finallyBlock = tryStatementTree.finallyBlock();
StringLiteralDuplicatedCheck.java,String literal =tree.value();,if (=tree != null ) String literal =tree.value();
Measurer.java,int fileComplexity = context.getComplexity(context.getTree());,if (context != null ) int fileComplexity = context.getComplexity(context.getTree());
UnusedPrivateMethodCheck.java,List<String> params = Lists.newArrayList();,if (Lists != null ) List<String> params = Lists.newArrayList();
UnusedPrivateMethodCheck.java,String paramName = param.getClassName();,if (param != null ) String paramName = param.getClassName();
UnusedPrivateMethodCheck.java,paramName = MethodSignatureScanner.getReadableType(param.getJvmJavaType());,if (MethodSignatureScanner != null ) paramName = MethodSignatureScanner.getReadableType(param.getJvmJavaType());
JavaCheckVerifier.java,List<Integer> unexpectedLines = Lists.newLinkedList();,if (Lists != null ) List<Integer> unexpectedLines = Lists.newLinkedList();
JavaCheckVerifier.java,int line = checkMessage.getLine();,if (checkMessage != null ) int line = checkMessage.getLine();
Scope.java,this.orderedSymbols = Lists.newArrayList();,if (Lists != null ) this.orderedSymbols = Lists.newArrayList();
ArchitectureCheck.java,String nameAsmClass = asmClass.getInternalName();,if (asmClass != null ) String nameAsmClass = asmClass.getInternalName();
ArchitectureCheck.java,this.internalNames = Maps.newHashMap();,if (Maps != null ) this.internalNames = Maps.newHashMap();
ArchitectureCheck.java,String internalNameTargetClass = edge.getTargetAsmClass().getInternalName();,if (edge != null ) String internalNameTargetClass = edge.getTargetAsmClass().getInternalName();
ArchitectureCheck.java,Integer line = internalNames.get(internalNameTargetClass).getLine();,if (internalNames != null ) Integer line = internalNames.get(internalNameTargetClass).getLine();
ArchitectureCheckTest.java,CheckMessage value = messageCaptor.getValue();,if (messageCaptor != null ) CheckMessage value = messageCaptor.getValue();
MagicNumberCheck.java,ModifiersTree modifiers = tree.modifiers();,if (tree != null ) ModifiersTree modifiers = tree.modifiers();
CallToDeprecatedMethodCheck.java,AsmMethod targetMethod = (AsmMethod) edge.getTo();,if (edge != null ) AsmMethod targetMethod = (AsmMethod) edge.getTo();
RedundantThrowsDeclarationCheck.java,Set<String> reportedExceptions = Sets.newHashSet();,if (Sets != null ) Set<String> reportedExceptions = Sets.newHashSet();
RedundantThrowsDeclarationCheck.java,List<AsmClass> thrownClasses = asmMethod.getThrows();,if (asmMethod != null ) List<AsmClass> thrownClasses = asmMethod.getThrows();
RedundantThrowsDeclarationCheck.java,String thrownClassName = thrownClass.getDisplayName();,if (thrownClass != null ) String thrownClassName = thrownClass.getDisplayName();
RedundantThrowsDeclarationCheck.java,String thrownClassName = thrownClass.getDisplayName();,if (thrownClass != null ) String thrownClassName = thrownClass.getDisplayName();
CallToFileDeleteOnExitMethodCheck.java,AsmMethod targetMethod = (AsmMethod) edge.getTo();,if (edge != null ) AsmMethod targetMethod = (AsmMethod) edge.getTo();
CallToFileDeleteOnExitMethodCheck.java,AsmClass targetClass = targetMethod.getParent();,if (targetMethod != null ) AsmClass targetClass = targetMethod.getParent();
PackageInfoCheckTest.java,Set<File> set = check.getDirectoriesWithoutPackageFile();,if (check != null ) Set<File> set = check.getDirectoriesWithoutPackageFile();
PackageInfoCheckTest.java,Set<File> set = check.getDirectoriesWithoutPackageFile();,if (check != null ) Set<File> set = check.getDirectoriesWithoutPackageFile();
ChecksBridge.java,dirsWithoutPackageInfo = Sets.newHashSet();,if (Sets != null ) dirsWithoutPackageInfo = Sets.newHashSet();
ChecksBridge.java,CodeVisitor check = checkInstanceOf(activeRule.getRule().ruleKey());,if (checkInstanceOf(activeRule != null ) CodeVisitor check = checkInstanceOf(activeRule.getRule().ruleKey());
Bridges.java,FileIssues fileIssues = stringFileIssuesEntry.getValue();,if (stringFileIssuesEntry != null ) FileIssues fileIssues = stringFileIssuesEntry.getValue();
InterfaceStaticMutableMemberCheck.java,Symbol symbol = variableTree.symbol();,if (variableTree != null ) Symbol symbol = variableTree.symbol();
Resolve.java,result = env.packge() == c.packge();,if (c != null ) result = env.packge() == c.packge();
AvoidDESCheck.java,Symbol symbol = firstArg.symbol();,if (firstArg != null ) Symbol symbol = firstArg.symbol();
AvoidDESCheck.java,Symbol symbol = mit.symbol();,if (mit != null ) Symbol symbol = mit.symbol();
DeprecatedHashAlgorithmCheck.java,List<ExpressionTree> arguments = mit.arguments();,if (mit != null ) List<ExpressionTree> arguments = mit.arguments();
DeprecatedHashAlgorithmCheck.java,name = memberSelectExpressionTree.identifier().name();,if (memberSelectExpressionTree != null ) name = memberSelectExpressionTree.identifier().name();
DeprecatedHashAlgorithmCheck.java,name = identifier.name();,if (identifier != null ) name = identifier.name();
ModifiersTreeImpl.java,this.annotations = Lists.newArrayList();,if (Lists != null ) this.annotations = Lists.newArrayList();
ModifiersTreeImpl.java,modifiers = Lists.newArrayList();,if (Lists != null ) modifiers = Lists.newArrayList();
SonarComponents.java,checks = Lists.newArrayList();,if (Lists != null ) checks = Lists.newArrayList();
MembersDifferOnlyByCapitalizationCheck.java,Symbol.TypeSymbol knownMemberOwner = (Symbol.TypeSymbol) knownMemberSymbol.owner();,if (knownMemberSymbol != null ) Symbol.TypeSymbol knownMemberOwner = (Symbol.TypeSymbol) knownMemberSymbol.owner();
FirstPass.java,int flags = computeFlags(tree.modifiers());,if (computeFlags(tree != null ) int flags = computeFlags(tree.modifiers());
JavaFilesCache.java,variableEndLine = variable.endToken().line();,if (variable != null ) variableEndLine = variable.endToken().line();
JavaFilesCache.java,Tree type = annotationTree.annotationType();,if (annotationTree != null ) Tree type = annotationTree.annotationType();
JavaRulingTest.java,List<File> actualFiles = Lists.newArrayList(actual.listFiles());,if (Lists != null ) List<File> actualFiles = Lists.newArrayList(actual.listFiles());
JavaRulingTest.java,List<File> actualFiles = Lists.newArrayList(actual.listFiles());,if (Lists != null ) List<File> actualFiles = Lists.newArrayList(actual.listFiles());
SuppressWarningsCheck.java,forbiddenWarnings = Lists.newArrayList();,if (Lists != null ) forbiddenWarnings = Lists.newArrayList();
IdenticalCasesInSwitchCheck.java,List<CaseGroupTree> cases = switchStatementTree.cases();,if (switchStatementTree != null ) List<CaseGroupTree> cases = switchStatementTree.cases();
IdenticalCasesInSwitchCheck.java,int line = FirstSyntaxTokenFinder.firstSyntaxToken(caseGroupTree).line();,if (FirstSyntaxTokenFinder != null ) int line = FirstSyntaxTokenFinder.firstSyntaxToken(caseGroupTree).line();
ToStringUsingBoxingCheck.java,MemberSelectExpressionTree mset = (MemberSelectExpressionTree) mit.methodSelect();,if (mit != null ) MemberSelectExpressionTree mset = (MemberSelectExpressionTree) mit.methodSelect();
ActionParser.java,ParsingResult result = parseRunner.parse(input.input());,if (parseRunner != null ) ParsingResult result = parseRunner.parse(input.input());
ActionParser.java,ParseError parseError = result.getParseError();,if (result != null ) ParseError parseError = result.getParseError();
ActionParser.java,InputBuffer inputBuffer = parseError.getInputBuffer();,if (parseError != null ) InputBuffer inputBuffer = parseError.getInputBuffer();
ActionParser.java,Class[] parameterTypes = method.getParameterTypes();,if (method != null ) Class[] parameterTypes = method.getParameterTypes();
Input.java,List<Integer> newLineIndexesBuilder = Lists.newArrayList();,if (Lists != null ) List<Integer> newLineIndexesBuilder = Lists.newArrayList();
SyntaxTreeCreator.java,MutableParsingRule rule = (MutableParsingRule) node.getMatcher();,if (node != null ) MutableParsingRule rule = (MutableParsingRule) node.getMatcher();
SyntaxTreeCreator.java,GrammarRuleKey ruleKey = rule.getRuleKey();,if (rule != null ) GrammarRuleKey ruleKey = rule.getRuleKey();
SyntaxTreeCreator.java,List<ParseNode> children = node.getChildren();,if (node != null ) List<ParseNode> children = node.getChildren();
SyntaxTreeCreator.java,List<Object> convertedChildren = Lists.newArrayList();,if (Lists != null ) List<Object> convertedChildren = Lists.newArrayList();
SyntaxTreeCreator.java,TriviaExpression ruleMatcher = (TriviaExpression) node.getMatcher();,if (node != null ) TriviaExpression ruleMatcher = (TriviaExpression) node.getMatcher();
SyntaxTreeCreator.java,TokenExpression ruleMatcher = (TokenExpression) node.getMatcher();,if (node != null ) TokenExpression ruleMatcher = (TokenExpression) node.getMatcher();
SyntaxTreeCreator.java,isEof = GenericTokenType.EOF == ruleMatcher.getTokenType();,if (ruleMatcher != null ) isEof = GenericTokenType.EOF == ruleMatcher.getTokenType();
SyntaxTreeCreator.java,List<SyntaxTrivia> result = Lists.newArrayList();,if (Lists != null ) List<SyntaxTrivia> result = Lists.newArrayList();
SyntaxTreeCreator.java,Token trivialToken = trivia.getToken();,if (trivia != null ) Token trivialToken = trivia.getToken();
SyntaxTreeCreator.java,int[] lineAndColumn = input.lineAndColumnAt(node.getStartIndex());,if (input != null ) int[] lineAndColumn = input.lineAndColumnAt(node.getStartIndex());
SyntaxTreeCreator.java,int[] lineAndColumn = input.lineAndColumnAt(node.getStartIndex());,if (input != null ) int[] lineAndColumn = input.lineAndColumnAt(node.getStartIndex());
DelayedRuleInvocationExpressionTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
DelayedRuleInvocationExpressionTest.java,LexerlessGrammarBuilder b = spy(LexerlessGrammarBuilder.create());,if (spy(LexerlessGrammarBuilder != null ) LexerlessGrammarBuilder b = spy(LexerlessGrammarBuilder.create());
DelayedRuleInvocationExpressionTest.java,LexerlessGrammarBuilder b = spy(LexerlessGrammarBuilder.create());,if (spy(LexerlessGrammarBuilder != null ) LexerlessGrammarBuilder b = spy(LexerlessGrammarBuilder.create());
LiteralUtils.java,String literalValue = literal.value();,if (literal != null ) String literalValue = literal.value();
NullDereferenceInConditionalCheck.java,Tree nonNullOperand = getNonNullOperand(tree.leftOperand());,if (getNonNullOperand(tree != null ) Tree nonNullOperand = getNonNullOperand(tree.leftOperand());
Bridges.java,RuleIssues ruleIssues = entry.getValue();,if (entry != null ) RuleIssues ruleIssues = entry.getValue();
Bridges.java,FileIssues fileIssues = stringFileIssuesEntry.getValue();,if (stringFileIssuesEntry != null ) FileIssues fileIssues = stringFileIssuesEntry.getValue();
JavaClasspathTest.java,String absolutePath = tmp.getRoot().getAbsolutePath();,if (tmp != null ) String absolutePath = tmp.getRoot().getAbsolutePath();
JavaClasspathTest.java,Integer status = ORCHESTRATOR.executeBuild(runner).getStatus();,if (ORCHESTRATOR != null ) Integer status = ORCHESTRATOR.executeBuild(runner).getStatus();
JavaClasspathTest.java,status = ORCHESTRATOR.executeBuild(runner).getStatus();,if (ORCHESTRATOR != null ) status = ORCHESTRATOR.executeBuild(runner).getStatus();
AnnotationOnType.java,String name  =  Foo.class.getName();,if (Foo != null ) String name  =  Foo.class.getName();
TreeFactory.java,JavaKeyword keyword = (JavaKeyword) javaTree.getGrammarRuleKey();,if (javaTree != null ) JavaKeyword keyword = (JavaKeyword) javaTree.getGrammarRuleKey();
TreeFactory.java,InternalSyntaxToken staticKeyword = (InternalSyntaxToken) staticToken.orNull();,if (staticToken != null ) InternalSyntaxToken staticKeyword = (InternalSyntaxToken) staticToken.orNull();
TreeFactory.java,List<JavaTree> children = Lists.newArrayList();,if (Lists != null ) List<JavaTree> children = Lists.newArrayList();
BadPackageName_S00120_Check.java,String name = concatenate(tree.packageDeclaration().packageName());,if (concatenate(tree != null ) String name = concatenate(tree.packageDeclaration().packageName());
BadPackageName_S00120_Check.java,expr = mse.expression();,if (mse != null ) expr = mse.expression();
MismatchPackageDirectoryCheck.java,expr = mse.expression();,if (mse != null ) expr = mse.expression();
UndocumentedApiCheck.java,packageName = concatenate(tree.packageDeclaration().packageName());,if (concatenate(tree != null ) packageName = concatenate(tree.packageDeclaration().packageName());
UndocumentedApiCheck.java,expr = mse.expression();,if (mse != null ) expr = mse.expression();
TreeFactory.java,VariableTreeImpl resource = rest.first();,if (rest != null ) VariableTreeImpl resource = rest.first();
TryStatementTreeImpl.java,this.resources = ImmutableList.of();,if (ImmutableList != null ) this.resources = ImmutableList.of();
TreeFactory.java,InternalSyntaxToken andOperator = tuple.first();,if (tuple != null ) InternalSyntaxToken andOperator = tuple.first();
TypeCastExpressionTreeImpl.java,this.bounds = Collections.emptyList();,if (Collections != null ) this.bounds = Collections.emptyList();
LeftCurlyBraceBaseTreeVisitor.java,SyntaxToken closeParenToken = initializer.closeParenToken();,if (initializer != null ) SyntaxToken closeParenToken = initializer.closeParenToken();
TreeFactory.java,List<ExpressionTree> argumentsList = Collections.emptyList();,if (Collections != null ) List<ExpressionTree> argumentsList = Collections.emptyList();
TreeFactory.java,ArgumentListTreeImpl argumentsListTreeImpl = arguments.get();,if (arguments != null ) ArgumentListTreeImpl argumentsListTreeImpl = arguments.get();
TreeFactory.java,openParenToken = argumentsListTreeImpl.openParenToken();,if (argumentsListTreeImpl != null ) openParenToken = argumentsListTreeImpl.openParenToken();
TreeFactory.java,closeParenToken = argumentsListTreeImpl.closeParenToken();,if (argumentsListTreeImpl != null ) closeParenToken = argumentsListTreeImpl.closeParenToken();
AnnotationTreeImpl.java,this.openParenToken = arguments.openParenToken();,if (arguments != null ) this.openParenToken = arguments.openParenToken();
AnnotationTreeImpl.java,this.closeParenToken = arguments.closeParenToken();,if (arguments != null ) this.closeParenToken = arguments.closeParenToken();
MethodInvocationTreeImpl.java,this.openParenToken = arguments.openParenToken();,if (arguments != null ) this.openParenToken = arguments.openParenToken();
MethodInvocationTreeImpl.java,this.closeParenToken = arguments.closeParenToken();,if (arguments != null ) this.closeParenToken = arguments.closeParenToken();
LastSyntaxTokenFinder.java,lastSyntaxToken = tree.closeParenToken();,if (tree != null ) lastSyntaxToken = tree.closeParenToken();
LastSyntaxTokenFinder.java,lastSyntaxToken = tree.closeParenToken();,if (tree != null ) lastSyntaxToken = tree.closeParenToken();
LastSyntaxTokenFinder.java,SyntaxToken closeParenToken = annotationTree.closeParenToken();,if (annotationTree != null ) SyntaxToken closeParenToken = annotationTree.closeParenToken();
TreeFactory.java,List<TypeTree> throwsClauses = ImmutableList.of();,if (ImmutableList != null ) List<TypeTree> throwsClauses = ImmutableList.of();
MethodTreeImpl.java,this.throwsClauses = ImmutableList.of();,if (ImmutableList != null ) this.throwsClauses = ImmutableList.of();
ClassTreeImpl.java,this.superInterfaces = ImmutableList.of();,if (ImmutableList != null ) this.superInterfaces = ImmutableList.of();
ClassTreeImpl.java,this.superInterfaces = ImmutableList.of();,if (ImmutableList != null ) this.superInterfaces = ImmutableList.of();
TreeFactory.java,List<AnnotationTree> firstIdentifierAnnotations = typeTree.annotations();,if (typeTree != null ) List<AnnotationTree> firstIdentifierAnnotations = typeTree.annotations();
JavaTree.java,this.annotations = Collections.emptyList();,if (Collections != null ) this.annotations = Collections.emptyList();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.identifierToken();,if (tree != null ) firstSyntaxToken = tree.identifierToken();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.keyword();,if (tree != null ) firstSyntaxToken = tree.keyword();
FirstSyntaxTokenFinder.java,firstSyntaxToken = tree.queryToken();,if (tree != null ) firstSyntaxToken = tree.queryToken();
FirstSyntaxTokenFinderTest.java,SyntaxToken firstToken = getFirstSyntaxToken(c.typeParameters());,if (getFirstSyntaxToken(c != null ) SyntaxToken firstToken = getFirstSyntaxToken(c.typeParameters());
InnerStaticClassesCheck.java,Type ownerType = owner.type();,if (owner != null ) Type ownerType = owner.type();
ActionParser.java,this.parseRunner = new ParseRunner(this.grammar.getRootRule());,if (ParseRunner(this != null ) this.parseRunner = new ParseRunner(this.grammar.getRootRule());
TreeFactory.java,InternalSyntaxToken commaToken = commaTokenOptional.orNull();,if (commaTokenOptional != null ) InternalSyntaxToken commaToken = commaTokenOptional.orNull();
TreeFactory.java,StatementExpressionListTreeImpl result = new StatementExpressionListTreeImpl(statements.build());,if (StatementExpressionListTreeImpl(statements != null ) StatementExpressionListTreeImpl result = new StatementExpressionListTreeImpl(statements.build());
LastSyntaxTokenFinder.java,lastSyntaxToken = tree.closeBracketToken();,if (tree != null ) lastSyntaxToken = tree.closeBracketToken();
InternalSyntaxToken.java,List<SyntaxTrivia> result = Lists.newArrayList();,if (Lists != null ) List<SyntaxTrivia> result = Lists.newArrayList();
InternalSyntaxToken.java,Token trivialToken = trivia.getToken();,if (trivia != null ) Token trivialToken = trivia.getToken();
SyntaxTreeCreator.java,Token token = tokenBuilder.setTrivia(trivias).build();,if (tokenBuilder != null ) Token token = tokenBuilder.setTrivia(trivias).build();
TreeFactory.java,JavaKeyword keyword = (JavaKeyword) javaTree.getType();,if (javaTree != null ) JavaKeyword keyword = (JavaKeyword) javaTree.getType();
ListTreeImpl.java,this.list = Lists.newArrayList();,if (Lists != null ) this.list = Lists.newArrayList();
JavaAstScannerTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
JavaSquid.java,squidIndex = (SquidIndex) astScanner.getIndex();,if (astScanner != null ) squidIndex = (SquidIndex) astScanner.getIndex();
JavaAstScanner.java,final Parser parser = JavaParser.createParser(conf.getCharset());,if (JavaParser != null ) final Parser parser = JavaParser.createParser(conf.getCharset());
FileVisitor.java,File file = getContext().getFile();,if (getContext() != null ) File file = getContext().getFile();
FileVisitorTest.java,SourceFile sourceFile = (SourceFile) context.peekSourceCode();,if (context != null ) SourceFile sourceFile = (SourceFile) context.peekSourceCode();
TreeFactory.java,InternalSyntaxToken postfixOperatorToken = postfixOperatorAstNode.get();,if (postfixOperatorAstNode != null ) InternalSyntaxToken postfixOperatorToken = postfixOperatorAstNode.get();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,List<JavaTree> children = Lists.newArrayList();,if (Lists != null ) List<JavaTree> children = Lists.newArrayList();
TreeFactory.java,List<JavaTree> children = Lists.newArrayList();,if (Lists != null ) List<JavaTree> children = Lists.newArrayList();
TreeFactory.java,List<JavaTree> children = Lists.newArrayList();,if (Lists != null ) List<JavaTree> children = Lists.newArrayList();
TreeFactory.java,List<JavaTree> children = Lists.newArrayList();,if (Lists != null ) List<JavaTree> children = Lists.newArrayList();
TreeFactory.java,List argumentsList = Collections.emptyList();,if (Collections != null ) List argumentsList = Collections.emptyList();
TreeFactory.java,List<JavaTree> children = Lists.newArrayList();,if (Lists != null ) List<JavaTree> children = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,InternalSyntaxToken staticKeyword = (InternalSyntaxToken) staticToken.get();,if (staticToken != null ) InternalSyntaxToken staticKeyword = (InternalSyntaxToken) staticToken.get();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,Tree classType = tuple.second();,if (tuple != null ) Tree classType = tuple.second();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,List<AstNode> pendingChildren = Lists.newArrayList();,if (Lists != null ) List<AstNode> pendingChildren = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,VariableTreeImpl resource = (VariableTreeImpl) rest.getFirstChild();,if (rest != null ) VariableTreeImpl resource = (VariableTreeImpl) rest.getFirstChild();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
AstNodeSanitizer.java,List<AstNode> children = astNode.getChildren();,if (astNode != null ) List<AstNode> children = astNode.getChildren();
AstNodeSanitizer.java,token = child.getToken();,if (child != null ) token = child.getToken();
AstNodeSanitizer.java,fromIndex = child.getFromIndex();,if (child != null ) fromIndex = child.getFromIndex();
AstNodeSanitizer.java,toIndex = astNode.getToIndex();,if (astNode != null ) toIndex = astNode.getToIndex();
InternalSyntaxToken.java,this.token = astNode.getToken();,if (astNode != null ) this.token = astNode.getToken();
BinaryExpressionTreeImpl.java,this.operator = InternalSyntaxToken.createLegacy(super.getAstNode());,if (InternalSyntaxToken != null ) this.operator = InternalSyntaxToken.createLegacy(super.getAstNode());
PrinterVisitor.java,line = node.getTokenLine();,if (node != null ) line = node.getTokenLine();
LastSyntaxTokenFinder.java,lastSyntaxToken = tree.endToken();,if (tree != null ) lastSyntaxToken = tree.endToken();
TreeFactory.java,JavaKeyword keyword = (JavaKeyword) astNode.getType();,if (astNode != null ) JavaKeyword keyword = (JavaKeyword) astNode.getType();
TreeFactory.java,staticToken = InternalSyntaxToken.create(staticTokenAstNode.get());,if (InternalSyntaxToken != null ) staticToken = InternalSyntaxToken.create(staticTokenAstNode.get());
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,TypeTree superClass = extendsClause.get().second();,if (extendsClause != null ) TypeTree superClass = extendsClause.get().second();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,InternalSyntaxToken staticKeyword = InternalSyntaxToken.create(staticTokenAstNode.get());,if (InternalSyntaxToken != null ) InternalSyntaxToken staticKeyword = InternalSyntaxToken.create(staticTokenAstNode.get());
TreeFactory.java,InternalSyntaxToken separator = InternalSyntaxToken.create(rest.first());,if (InternalSyntaxToken != null ) InternalSyntaxToken separator = InternalSyntaxToken.create(rest.first());
TreeFactory.java,InternalSyntaxToken postfixOperatorToken = InternalSyntaxToken.create(postfixOperatorAstNode.get());,if (InternalSyntaxToken != null ) InternalSyntaxToken postfixOperatorToken = InternalSyntaxToken.create(postfixOperatorAstNode.get());
TreeFactory.java,InternalSyntaxToken comma = InternalSyntaxToken.create(identifier.first());,if (InternalSyntaxToken != null ) InternalSyntaxToken comma = InternalSyntaxToken.create(identifier.first());
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,InternalSyntaxToken dotToken = InternalSyntaxToken.create(rest.first());,if (InternalSyntaxToken != null ) InternalSyntaxToken dotToken = InternalSyntaxToken.create(rest.first());
TreeFactory.java,InternalSyntaxToken openBracketToken = InternalSyntaxToken.create(dim.first());,if (InternalSyntaxToken != null ) InternalSyntaxToken openBracketToken = InternalSyntaxToken.create(dim.first());
TreeFactory.java,InternalSyntaxToken closeBracketToken = InternalSyntaxToken.create(dim.second());,if (InternalSyntaxToken != null ) InternalSyntaxToken closeBracketToken = InternalSyntaxToken.create(dim.second());
FileLinesVisitorTest.java,List<Integer> commentedlines = Lists.newLinkedList();,if (Lists != null ) List<Integer> commentedlines = Lists.newLinkedList();
BadPackageName_S00120_Check.java,String name = concatenate(tree.packageName());,if (concatenate(tree != null ) String name = concatenate(tree.packageName());
MismatchPackageDirectoryCheck.java,String packageName = concatenate(tree.packageName());,if (concatenate(tree != null ) String packageName = concatenate(tree.packageName());
UndocumentedApiCheck.java,packageName = concatenate(tree.packageName());,if (concatenate(tree != null ) packageName = concatenate(tree.packageName());
UselessImportCheck.java,currentPackage = concatenate(cut.packageName());,if (concatenate(cut != null ) currentPackage = concatenate(cut.packageName());
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
FirstPass.java,ExpressionTree packageName = tree.packageName();,if (tree != null ) ExpressionTree packageName = tree.packageName();
ClassTreeImpl.java,Iterator<TypeParameters> typeParamIterator = Iterators.emptyIterator();,if (Iterators != null ) Iterator<TypeParameters> typeParamIterator = Iterators.emptyIterator();
TypeParameterTreeImpl.java,this.bounds = Collections.emptyList();,if (Collections != null ) this.bounds = Collections.emptyList();
JavaTreeModelTest.java,List<Kind> result = Lists.newArrayList();,if (Lists != null ) List<Kind> result = Lists.newArrayList();
DefaultEncodingUsageCheck.java,IdentifierTree constructorIdentifier = newClassTreeImpl.getConstructorIdentifier();,if (newClassTreeImpl != null ) IdentifierTree constructorIdentifier = newClassTreeImpl.getConstructorIdentifier();
DefaultEncodingUsageCheck.java,Symbol symbol = constructorIdentifier.symbol();,if (constructorIdentifier != null ) Symbol symbol = constructorIdentifier.symbol();
ThreadAsRunnableArgumentCheck.java,methodSymbol = (nct.getConstructorIdentifier()).symbol();,if ((nct != null ) methodSymbol = (nct.getConstructorIdentifier()).symbol();
Resolve.java,result = (env.packge() == c.packge());,if (c != null ) result = (env.packge() == c.packge());
PrimitiveTypeBoxingWithToStringCheck.java,List<MethodMatcher> matchers = Lists.newArrayList();,if (Lists != null ) List<MethodMatcher> matchers = Lists.newArrayList();
PrimitiveTypeBoxingWithToStringCheck.java,String typeName = abstractTypedTree.symbolType().toString();,if (abstractTypedTree != null ) String typeName = abstractTypedTree.symbolType().toString();
PseudoRandomCheck.java,double j = Math.random(); //NonCompliant,if (//NonCompliant != null ) double j = Math.random(); //NonCompliant
TreeFactory.java,ArgumentListTreeImpl argumentListTree = arguments.get();,if (arguments != null ) ArgumentListTreeImpl argumentListTree = arguments.get();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,ArgumentListTreeImpl arguments = (ArgumentListTreeImpl) methodInvocation.arguments();,if (methodInvocation != null ) ArgumentListTreeImpl arguments = (ArgumentListTreeImpl) methodInvocation.arguments();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,List<AstNode> pendingChildren = Lists.newArrayList();,if (Lists != null ) List<AstNode> pendingChildren = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
ObjectFinalizeOverridenCallsSuperFinalizeCheck.java,MemberSelectExpressionTree mset = (MemberSelectExpressionTree) methodInvocationTree.methodSelect();,if (methodInvocationTree != null ) MemberSelectExpressionTree mset = (MemberSelectExpressionTree) methodInvocationTree.methodSelect();
ObjectFinalizeOverridenCallsSuperFinalizeCheck.java,Tree returnType = methodTree.returnType();,if (methodTree != null ) Tree returnType = methodTree.returnType();
LeftCurlyBraceBaseTreeVisitor.java,NewClassTree initializer = (NewClassTree) tree.initializer();,if (tree != null ) NewClassTree initializer = (NewClassTree) tree.initializer();
TypeAndReferenceSolver.java,NewClassTree newClassTree = (NewClassTree) tree.initializer();,if (tree != null ) NewClassTree newClassTree = (NewClassTree) tree.initializer();
JavaTreeModelTest.java,NewClassTree newClassTree = (NewClassTree) tree.initializer();,if (tree != null ) NewClassTree newClassTree = (NewClassTree) tree.initializer();
JavaTreeModelTest.java,newClassTree = (NewClassTree) tree.initializer();,if (tree != null ) newClassTree = (NewClassTree) tree.initializer();
TreeFactory.java,IdentifierTreeImpl identifier = (IdentifierTreeImpl) methodInvocation.methodSelect();,if (methodInvocation != null ) IdentifierTreeImpl identifier = (IdentifierTreeImpl) methodInvocation.methodSelect();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,ArgumentListTreeImpl arguments = (ArgumentListTreeImpl) methodInvocation.arguments();,if (methodInvocation != null ) ArgumentListTreeImpl arguments = (ArgumentListTreeImpl) methodInvocation.arguments();
SyntaxHighlighterVisitor.java,types = typesBuilder.build();,if (typesBuilder != null ) types = typesBuilder.build();
SyntaxHighlighterVisitor.java,lineStart = Lists.newArrayList();,if (Lists != null ) lineStart = Lists.newArrayList();
SyntaxHighlighterVisitor.java,Token triviaToken = trivia.getToken();,if (trivia != null ) Token triviaToken = trivia.getToken();
SyntaxHighlighterVisitor.java,"int offset = getOffset(triviaToken.getLine(), triviaToken.getColumn());","if (triviaToken != null ) int offset = getOffset(triviaToken.getLine(), triviaToken.getColumn());"
SyntaxHighlighterVisitorTest.java,File file = temp.newFile();,if (temp != null ) File file = temp.newFile();
SyntaxHighlighterVisitorTest.java,File file = temp.newFile();,if (temp != null ) File file = temp.newFile();
EnumMapCheck.java,boolean returnTypeHasEnumKey = hasEnumKey(tree.type());,if (hasEnumKey(tree != null ) boolean returnTypeHasEnumKey = hasEnumKey(tree.type());
EnumMapCheck.java,ExpressionTree initializer = tree.initializer();,if (tree != null ) ExpressionTree initializer = tree.initializer();
ArrayHashCodeAndToStringCheck.java,String argStr = args.toString(); // Noncompliant,if (Noncompliant != null ) String argStr = args.toString(); // Noncompliant
ArrayHashCodeAndToStringCheck.java,int argHash = args.hashCode(); // Noncompliant,if (Noncompliant != null ) int argHash = args.hashCode(); // Noncompliant
CaseInsensitiveComparisonCheck.java,boolean result = foo.equals(bar.toLowerCase());             // Non-Compliant,if (Non-Compliant != null ) boolean result = foo.equals(bar.toLowerCase());             // Non-Compliant
CaseInsensitiveComparisonCheck.java,boolean result = foo.equals(bar.toUpperCase());             // Non-Compliant,if (Non-Compliant != null ) boolean result = foo.equals(bar.toUpperCase());             // Non-Compliant
AbstractClassWithoutAbstractMethodCheck.java,Symbol.TypeSymbol typeSymbol = tree.symbol();,if (tree != null ) Symbol.TypeSymbol typeSymbol = tree.symbol();
AbstractClassWithoutAbstractMethodCheck.java,Collection<Symbol> symbols = typeSymbol.memberSymbols();,if (typeSymbol != null ) Collection<Symbol> symbols = typeSymbol.memberSymbols();
FileLinesVisitor.java,FileLinesContext fileLinesContext = sonarComponents.fileLinesContextFor(getContext().getFile());,if (sonarComponents != null ) FileLinesContext fileLinesContext = sonarComponents.fileLinesContextFor(getContext().getFile());
FileLinesVisitor.java,List<Trivia> trivias = token.getTrivia();,if (token != null ) List<Trivia> trivias = token.getTrivia();
FileLinesVisitor.java,int baseLine = trivia.getToken().getLine();,if (trivia != null ) int baseLine = trivia.getToken().getLine();
UnusedMethodParameterCheck.java,Symbol sym = var.symbol();,if (var != null ) Symbol sym = var.symbol();
FileVisitor.java,SourceFile sourceFile = createSourceFile(getContext().getFile());,if (createSourceFile(getContext() != null ) SourceFile sourceFile = createSourceFile(getContext().getFile());
PublicApiChecker.java,ModifiersTree modifiersTree = variableTree.modifiers();,if (variableTree != null ) ModifiersTree modifiersTree = variableTree.modifiers();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TooManyParameters_S00107_Check.java,int count = tree.parameters().size();,if (tree != null ) int count = tree.parameters().size();
PrimitiveTypeBoxingWithToStringCheck.java,List<MethodInvocationMatcher> matchers = Lists.newArrayList();,if (Lists != null ) List<MethodInvocationMatcher> matchers = Lists.newArrayList();
MethodMatcher.java,Symbol.TypeSymbol enclosingClass = symbol.enclosingClass();,if (symbol != null ) Symbol.TypeSymbol enclosingClass = symbol.enclosingClass();
MethodMatcherTest.java,MethodInvocationMatcher matcher = entry.getKey();,if (entry != null ) MethodInvocationMatcher matcher = entry.getKey();
MethodInvocationMatcher.java,Symbol symbol = id.symbol();,if (id != null ) Symbol symbol = id.symbol();
JavaFilesCache.java,className = tree.simpleName().name();,if (tree != null ) className = tree.simpleName().name();
MultilineBlocksCurlyBracesCheck.java,int previousColumn = FirstSyntaxTokenFinder.firstSyntaxToken(block).column();,if (FirstSyntaxTokenFinder != null ) int previousColumn = FirstSyntaxTokenFinder.firstSyntaxToken(block).column();
MultilineBlocksCurlyBracesCheck.java,int currentColumn = FirstSyntaxTokenFinder.firstSyntaxToken(current).column();,if (FirstSyntaxTokenFinder != null ) int currentColumn = FirstSyntaxTokenFinder.firstSyntaxToken(current).column();
UnusedPrivateFieldCheck.java,ModifiersTree modifiers = tree.modifiers();,if (tree != null ) ModifiersTree modifiers = tree.modifiers();
JaCoCoReportMerger.java,boolean reportFormatIsCurrent = jacocoReportReader.useCurrentBinaryFormat();,if (jacocoReportReader != null ) boolean reportFormatIsCurrent = jacocoReportReader.useCurrentBinaryFormat();
JaCoCoReportMerger.java,isCurrentVersionFormat = jacocoReportReader.useCurrentBinaryFormat();,if (jacocoReportReader != null ) isCurrentVersionFormat = jacocoReportReader.useCurrentBinaryFormat();
AbstractAnalyzer.java,byte firstByte = dis.readByte();,if (dis != null ) byte firstByte = dis.readByte();
AbstractAnalyzer.java,char version = dis.readChar();,if (dis != null ) char version = dis.readChar();
TooManyStatementsPerLine_S00122_Check.java,SyntaxToken firstToken = getFirstToken(tree.expression());,if (getFirstToken(tree != null ) SyntaxToken firstToken = getFirstToken(tree.expression());
TooManyStatementsPerLine_S00122_Check.java,firstToken = tree.openParenToken();,if (tree != null ) firstToken = tree.openParenToken();
TooManyStatementsPerLine_S00122_Check.java,firstToken = tree.operatorToken();,if (tree != null ) firstToken = tree.operatorToken();
TooManyStatementsPerLine_S00122_Check.java,firstToken = tree.identifierToken();,if (tree != null ) firstToken = tree.identifierToken();
TooManyStatementsPerLine_S00122_Check.java,firstToken = trees.openBracketToken();,if (trees != null ) firstToken = trees.openBracketToken();
LastSyntaxTokenFinder.java,SyntaxToken identifierToken = tree.simpleName().identifierToken();,if (tree != null ) SyntaxToken identifierToken = tree.simpleName().identifierToken();
FirstSyntaxTokenFinderTest.java,SyntaxToken firstToken = getFirstSyntaxToken(methodTree.block());,if (getFirstSyntaxToken(methodTree != null ) SyntaxToken firstToken = getFirstSyntaxToken(methodTree.block());
IndentationCheck.java,int typeColumn = getTypeColumn(variableTree.type());,if (getTypeColumn(variableTree != null ) int typeColumn = getTypeColumn(variableTree.type());
RightCurlyBraceStartLineCheck.java,SyntaxToken lastToken = SyntaxTokenFinder.visit(lastTree).getLastToken();,if (SyntaxTokenFinder != null ) SyntaxToken lastToken = SyntaxTokenFinder.visit(lastTree).getLastToken();
RightCurlyBraceStartLineCheck.java,lastToken = tree.closeBraceToken();,if (tree != null ) lastToken = tree.closeBraceToken();
RightCurlyBraceStartLineCheck.java,lastToken = tree.semicolonToken();,if (tree != null ) lastToken = tree.semicolonToken();
RightCurlyBraceStartLineCheck.java,lastToken = tree.semicolonToken();,if (tree != null ) lastToken = tree.semicolonToken();
RightCurlyBraceStartLineCheck.java,StatementTree elseStatement = tree.elseStatement();,if (tree != null ) StatementTree elseStatement = tree.elseStatement();
RightCurlyBraceStartLineCheck.java,lastToken = tree.semicolonToken();,if (tree != null ) lastToken = tree.semicolonToken();
RightCurlyBraceStartLineCheck.java,lastToken = tree.closeBraceToken();,if (tree != null ) lastToken = tree.closeBraceToken();
RightCurlyBraceStartLineCheck.java,lastToken = tree.semicolonToken();,if (tree != null ) lastToken = tree.semicolonToken();
RightCurlyBraceStartLineCheck.java,lastToken = tree.semicolonToken();,if (tree != null ) lastToken = tree.semicolonToken();
RightCurlyBraceStartLineCheck.java,lastToken = tree.semicolonToken();,if (tree != null ) lastToken = tree.semicolonToken();
RightCurlyBraceStartLineCheck.java,lastToken = tree.semicolonToken();,if (tree != null ) lastToken = tree.semicolonToken();
RightCurlyBraceStartLineCheck.java,lastToken = tree.semicolonToken();,if (tree != null ) lastToken = tree.semicolonToken();
RightCurlyBraceStartLineCheck.java,BlockTree finallyBlock = tree.finallyBlock();,if (tree != null ) BlockTree finallyBlock = tree.finallyBlock();
RightCurlyBraceStartLineCheck.java,List<CatchTree> catches = tree.catches();,if (tree != null ) List<CatchTree> catches = tree.catches();
RightCurlyBraceStartLineCheck.java,SyntaxToken semicolonToken = tree.semicolonToken();,if (tree != null ) SyntaxToken semicolonToken = tree.semicolonToken();
RightCurlyBraceStartLineCheck.java,lastToken = tree.closeBraceToken();,if (tree != null ) lastToken = tree.closeBraceToken();
RightCurlyBraceStartLineCheck.java,lastToken = tree.endToken();,if (tree != null ) lastToken = tree.endToken();
RightCurlyBraceStartLineCheck.java,lastToken = tree.simpleName().identifierToken();,if (tree != null ) lastToken = tree.simpleName().identifierToken();
ClassVariableVisibilityCheck.java,List<Modifier> modifiers = tree.modifiers().modifiers();,if (tree != null ) List<Modifier> modifiers = tree.modifiers().modifiers();
ClassVariableVisibilityCheck.java,List<AnnotationTree> annotations = tree.modifiers().annotations();,if (tree != null ) List<AnnotationTree> annotations = tree.modifiers().annotations();
MagicNumberCheck.java,List<Modifier> modifiers = tree.modifiers().modifiers();,if (tree != null ) List<Modifier> modifiers = tree.modifiers().modifiers();
SAMAnnotatedCheck.java,List<Modifier> modifiers = methodTree.modifiers().modifiers();,if (methodTree != null ) List<Modifier> modifiers = methodTree.modifiers().modifiers();
ServletInstanceFieldCheck.java,List<Modifier> modifiers = variable.modifiers().modifiers();,if (variable != null ) List<Modifier> modifiers = variable.modifiers().modifiers();
AbstractAnalyzer.java,CoverageBuilder coverageBuilder = analyze(executionDataVisitor.getMerged());,if (analyze(executionDataVisitor != null ) CoverageBuilder coverageBuilder = analyze(executionDataVisitor.getMerged());
CloseResourceCheck.java,BlockTree block = methodTree.block();,if (methodTree != null ) BlockTree block = methodTree.block();
LocksNotUnlockedCheck.java,BlockTree block = methodTree.block();,if (methodTree != null ) BlockTree block = methodTree.block();
ExecutionState.java,issueTrees = Sets.newHashSet();,if (Sets != null ) issueTrees = Sets.newHashSet();
ExecutionState.java,Set<Tree> results = Sets.newHashSet();,if (Sets != null ) Set<Tree> results = Sets.newHashSet();
CloseableVisitor.java,ExpressionTree initializer = tree.initializer();,if (tree != null ) ExpressionTree initializer = tree.initializer();
CloseableVisitor.java,Symbol symbol = tree.symbol();,if (tree != null ) Symbol symbol = tree.symbol();
CloseableVisitor.java,ExpressionTree variable = tree.variable();,if (tree != null ) ExpressionTree variable = tree.variable();
CloseableVisitor.java,ExpressionTree expression = tree.expression();,if (tree != null ) ExpressionTree expression = tree.expression();
CloseableVisitor.java,Symbol symbol = identifier.symbol();,if (identifier != null ) Symbol symbol = identifier.symbol();
CloseableVisitor.java,ExpressionTree methodSelect = tree.methodSelect();,if (tree != null ) ExpressionTree methodSelect = tree.methodSelect();
LockedVisitor.java,ExpressionTree methodSelect = tree.methodSelect();,if (tree != null ) ExpressionTree methodSelect = tree.methodSelect();
ExecutionState.java,Value value = valueStateEntry.getKey();,if (valueStateEntry != null ) Value value = valueStateEntry.getKey();
CloseResourceCheck.java,CloseableVisitor visitor = new CloseableVisitor(methodTree.parameters());,if (CloseableVisitor(methodTree != null ) CloseableVisitor visitor = new CloseableVisitor(methodTree.parameters());
LocksNotUnlockedCheck.java,LockedVisitor visitor = new LockedVisitor(methodTree.symbol());,if (LockedVisitor(methodTree != null ) LockedVisitor visitor = new LockedVisitor(methodTree.symbol());
LockedVisitor.java,Symbol owner =  symbol.owner();,if (symbol != null ) Symbol owner =  symbol.owner();
ProgressReportTest.java,List<String> messages = captor.getAllValues();,if (captor != null ) List<String> messages = captor.getAllValues();
AssertionsInTestsCheck.java,Boolean methodContainsAssertion = this.methodContainsAssertion.pop();,if (this != null ) Boolean methodContainsAssertion = this.methodContainsAssertion.pop();
RightCurlyBraceStartLineCheck.java,AstNode result = node.getPreviousAstNode();,if (node != null ) AstNode result = node.getPreviousAstNode();
RightCurlyBraceStartLineCheck.java,result = result.getPreviousAstNode();,if (result != null ) result = result.getPreviousAstNode();
RightCurlyBraceStartLineCheck.java,result = result.getLastChild();,if (result != null ) result = result.getLastChild();
RightCurlyBraceDifferentLineAsNextBlockCheck.java,StatementTree thenStatement = ifStatementTree.thenStatement();,if (ifStatementTree != null ) StatementTree thenStatement = ifStatementTree.thenStatement();
RightCurlyBraceDifferentLineAsNextBlockCheck.java,BlockTree block = tryStatementTree.block();,if (tryStatementTree != null ) BlockTree block = tryStatementTree.block();
RightCurlyBraceDifferentLineAsNextBlockCheck.java,block = catchTree.block();,if (catchTree != null ) block = catchTree.block();
RightCurlyBraceDifferentLineAsNextBlockCheck.java,SyntaxToken finallyKeyword = tryStatementTree.finallyKeyword();,if (tryStatementTree != null ) SyntaxToken finallyKeyword = tryStatementTree.finallyKeyword();
RightCurlyBraceSameLineAsNextBlockCheck.java,StatementTree thenStatement = ifStatementTree.thenStatement();,if (ifStatementTree != null ) StatementTree thenStatement = ifStatementTree.thenStatement();
RightCurlyBraceSameLineAsNextBlockCheck.java,BlockTree block = tryStatementTree.block();,if (tryStatementTree != null ) BlockTree block = tryStatementTree.block();
RightCurlyBraceSameLineAsNextBlockCheck.java,block = catchTree.block();,if (catchTree != null ) block = catchTree.block();
RightCurlyBraceSameLineAsNextBlockCheck.java,SyntaxToken finallyKeyword = tryStatementTree.finallyKeyword();,if (tryStatementTree != null ) SyntaxToken finallyKeyword = tryStatementTree.finallyKeyword();
RightCurlyBraceDifferentLineAsNextBlockCheck.java,lastTokenLine = token.getLine();,if (token != null ) lastTokenLine = token.getLine();
RightCurlyBraceSameLineAsNextBlockCheck.java,lastTokenLine = token.getLine();,if (token != null ) lastTokenLine = token.getLine();
CollectionImplementationReferencedCheck.java,String collectionImplementation = getTypeIdentifierOrNull(tree.type());,if (getTypeIdentifierOrNull(tree != null ) String collectionImplementation = getTypeIdentifierOrNull(tree.type());
CollectionImplementationReferencedCheck.java,String collectionImplementation = getTypeIdentifierOrNull(tree.returnType());,if (getTypeIdentifierOrNull(tree != null ) String collectionImplementation = getTypeIdentifierOrNull(tree.returnType());
JavaClasspath.java,List<File> files = Lists.newArrayList();,if (Lists != null ) List<File> files = Lists.newArrayList();
BytecodeVisitor.java,bounds = Lists.newArrayList();,if (Lists != null ) bounds = Lists.newArrayList();
BytecodeVisitor.java,bounds = Lists.newArrayList();,if (Lists != null ) bounds = Lists.newArrayList();
TooManyStatementsPerLine_S00122_Check.java,int lineStart = statementNode.getTokenLine();,if (statementNode != null ) int lineStart = statementNode.getTokenLine();
TooManyStatementsPerLine_S00122_Check.java,int lineEnd = statementNode.getLastToken().getLine();,if (statementNode != null ) int lineEnd = statementNode.getLastToken().getLine();
TooManyStatementsPerLine_S00122_Check.java,int columnStart = statementNode.getToken().getColumn();,if (statementNode != null ) int columnStart = statementNode.getToken().getColumn();
TooManyStatementsPerLine_S00122_Check.java,int columnEnd = statementNode.getLastToken().getColumn();,if (statementNode != null ) int columnEnd = statementNode.getLastToken().getColumn();
ClassVariableVisibilityCheckTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
SystemExitCalledCheck.java,String selection = concatenate(tree.methodSelect());,if (concatenate(tree != null ) String selection = concatenate(tree.methodSelect());
SystemExitCalledCheck.java,expr = mse.expression();,if (mse != null ) expr = mse.expression();
SystemExitCalledCheck.java,idName = pieces.getLast();,if (pieces != null ) idName = pieces.getLast();
AnonymousClassShouldBeLambdaCheck.java,List<Tree> members = tree.classBody().members();,if (tree != null ) List<Tree> members = tree.classBody().members();
AstNodeTokensMatcher.java,String tokenValue = node.getTokenOriginalValue();,if (node != null ) String tokenValue = node.getTokenOriginalValue();
AstNodeTokensMatcher.java,int offset = tokenValue.length();,if (tokenValue != null ) int offset = tokenValue.length();
AstNodeTokensMatcher.java,Iterator<Token> it = node.getTokens().iterator();,if (node != null ) Iterator<Token> it = node.getTokens().iterator();
AstNodeTokensMatcher.java,tokenValue = it.next().getOriginalValue();,if (it != null ) tokenValue = it.next().getOriginalValue();
AstNodeTokensMatcher.java,offset = offset + tokenValue.length();,if (tokenValue != null ) offset = offset + tokenValue.length();
AstNodeTokensMatcher.java,return offset == string.length();,if (string != null ) return offset == string.length();
SynchronizedClassUsageCheck.java,boolean hasIssueOnDeclaredType = reportIssueIfDeprecatedType(tree.type());,if (reportIssueIfDeprecatedType(tree != null ) boolean hasIssueOnDeclaredType = reportIssueIfDeprecatedType(tree.type());
SynchronizedClassUsageCheck.java,ExpressionTree init = tree.initializer();,if (tree != null ) ExpressionTree init = tree.initializer();
EmptyMethodsCheck.java,BlockTree block = tree.block();,if (tree != null ) BlockTree block = tree.block();
TooManyLinesOfCodeInFile_S00104_Check.java,int lines = internalSyntaxToken.getLine();,if (internalSyntaxToken != null ) int lines = internalSyntaxToken.getLine();
CloseResourceCheck.java,TypeSymbol typeSymbol = type.symbol();,if (type != null ) TypeSymbol typeSymbol = type.symbol();
CloseResourceCheck.java,Type superClass = typeSymbol.superClass();,if (typeSymbol != null ) Type superClass = typeSymbol.superClass();
CloseResourceCheck.java,ExpressionTree initializer = tree.initializer();,if (tree != null ) ExpressionTree initializer = tree.initializer();
CloseResourceCheck.java,Symbol symbol = tree.symbol();,if (tree != null ) Symbol symbol = tree.symbol();
CloseResourceCheck.java,ExpressionTree variable = tree.variable();,if (tree != null ) ExpressionTree variable = tree.variable();
CloseResourceCheck.java,ExpressionTree expression = tree.expression();,if (tree != null ) ExpressionTree expression = tree.expression();
CloseResourceCheck.java,Symbol symbol = identifier.symbol();,if (identifier != null ) Symbol symbol = identifier.symbol();
CloseResourceCheck.java,ExpressionTree methodSelect = tree.methodSelect();,if (tree != null ) ExpressionTree methodSelect = tree.methodSelect();
CloseResourceCheck.java,List<CaseGroupTree> cases = tree.cases();,if (tree != null ) List<CaseGroupTree> cases = tree.cases();
CloseResourceCheck.java,executionState = executionState.restoreParent();,if (executionState != null ) executionState = executionState.restoreParent();
CloseResourceCheck.java,Set<Symbol> symbols = Sets.newHashSet();,if (Sets != null ) Set<Symbol> symbols = Sets.newHashSet();
CloseResourceCheck.java,Symbol symbol = variableTree.symbol();,if (variableTree != null ) Symbol symbol = variableTree.symbol();
CloseResourceCheck.java,Symbol symbol = entry.getKey();,if (entry != null ) Symbol symbol = entry.getKey();
CloseResourceCheck.java,CloseableOccurence occurenceToMerge = entry.getValue();,if (entry != null ) CloseableOccurence occurenceToMerge = entry.getValue();
CloseResourceCheck.java,Symbol symbol = entry.getKey();,if (entry != null ) Symbol symbol = entry.getKey();
CloseResourceCheck.java,CloseableOccurence occurence = entry.getValue();,if (entry != null ) CloseableOccurence occurence = entry.getValue();
CloseResourceCheck.java,Set<Tree> results = Sets.newHashSet();,if (Sets != null ) Set<Tree> results = Sets.newHashSet();
ForLoopIncrementAndUpdateCheck.java,for(Enumeration serverIds = db.serverTable.keys(); serverIds.hasMoreElements();){},if (serverIds != null ) for(Enumeration serverIds = db.serverTable.keys(); serverIds.hasMoreElements();){}
OperatorPrecedenceCheck.java,AssignmentExpressionTree assignmentTree = (AssignmentExpressionTree) tree.expression();,if (tree != null ) AssignmentExpressionTree assignmentTree = (AssignmentExpressionTree) tree.expression();
OperatorPrecedenceCheck.java,ExpressionTree initializerTree = tree.initializer();,if (tree != null ) ExpressionTree initializerTree = tree.initializer();
CloseResourceCheck.java,Symbol symbol = entry.getKey();,if (entry != null ) Symbol symbol = entry.getKey();
CloseResourceCheck.java,CloseableOccurence occurence = entry.getValue();,if (entry != null ) CloseableOccurence occurence = entry.getValue();
UnusedReturnedData.java,String str = itr.next(); // Compliant,if (Compliant != null ) String str = itr.next(); // Compliant
UnusedReturnedData.java,str = itr.next(); // Compliant,if (Compliant != null ) str = itr.next(); // Compliant
CallSuperInTestCaseCheck.java,superType = superType.symbol().superClass();,if (superType != null ) superType = superType.symbol().superClass();
SymbolicEvaluator.java,Symbol.VariableSymbol leftSymbol = extractVariableSymbol(tree.leftOperand());,if (extractVariableSymbol(tree != null ) Symbol.VariableSymbol leftSymbol = extractVariableSymbol(tree.leftOperand());
SymbolicEvaluator.java,Symbol.VariableSymbol rightSymbol = extractVariableSymbol(tree.rightOperand());,if (extractVariableSymbol(tree != null ) Symbol.VariableSymbol rightSymbol = extractVariableSymbol(tree.rightOperand());
SymbolicEvaluator.java,Symbol.VariableSymbol leftSymbol = extractVariableSymbol(tree.leftOperand());,if (extractVariableSymbol(tree != null ) Symbol.VariableSymbol leftSymbol = extractVariableSymbol(tree.leftOperand());
SymbolicEvaluator.java,Symbol.VariableSymbol rightSymbol = extractVariableSymbol(tree.rightOperand());,if (extractVariableSymbol(tree != null ) Symbol.VariableSymbol rightSymbol = extractVariableSymbol(tree.rightOperand());
JavaClasspath.java,FilePredicates predicates = fs.predicates();,if (fs != null ) FilePredicates predicates = fs.predicates();
JavaSquid.java,List<File> testClasspath = Lists.newArrayList();,if (Lists != null ) List<File> testClasspath = Lists.newArrayList();
JavaSquid.java,Collection<JavaCheck> testCheckClasses = Lists.newArrayList();,if (Lists != null ) Collection<JavaCheck> testCheckClasses = Lists.newArrayList();
JavaSquid.java,testClasspath = sonarComponents.getJavaTestClasspath();,if (sonarComponents != null ) testClasspath = sonarComponents.getJavaTestClasspath();
JavaSquid.java,testCheckClasses = sonarComponents.testCheckClasses();,if (sonarComponents != null ) testCheckClasses = sonarComponents.testCheckClasses();
JavaTestClasspath.java,FilePredicates predicates = fs.predicates();,if (fs != null ) FilePredicates predicates = fs.predicates();
VisitorsBridge.java,projectClasspath = sonarComponents.getJavaClasspath();,if (sonarComponents != null ) projectClasspath = sonarComponents.getJavaClasspath();
VisitorsBridge.java,projectClasspath = Lists.newArrayList();,if (Lists != null ) projectClasspath = Lists.newArrayList();
JavaClasspath.java,File baseDir = fs.baseDir();,if (fs != null ) File baseDir = fs.baseDir();
JavaClasspath.java,List<File> result = Lists.newArrayList();,if (Lists != null ) List<File> result = Lists.newArrayList();
JavaClasspath.java,List<File> files = Lists.newArrayList();,if (Lists != null ) List<File> files = Lists.newArrayList();
JavaClasspath.java,Iterator<File> iterator = dirs.iterator();,if (dirs != null ) Iterator<File> iterator = dirs.iterator();
JavaClasspath.java,File matchingDir = iterator.next();,if (iterator != null ) File matchingDir = iterator.next();
JavaClasspath.java,String path = file.getAbsolutePath();,if (file != null ) String path = file.getAbsolutePath();
SymbolicEvaluator.java,"currentStates = evaluateStatement(currentStates, tree.statement());","if (tree != null ) currentStates = evaluateStatement(currentStates, tree.statement());"
SymbolicEvaluator.java,Symbol.VariableSymbol symbol = extractLocalVariableSymbol(tree.variable());,if (extractLocalVariableSymbol(tree != null ) Symbol.VariableSymbol symbol = extractLocalVariableSymbol(tree.variable());
SymbolicEvaluator.java,Symbol.VariableSymbol leftSymbol = extractLocalVariableSymbol(tree.leftOperand());,if (extractLocalVariableSymbol(tree != null ) Symbol.VariableSymbol leftSymbol = extractLocalVariableSymbol(tree.leftOperand());
SymbolicEvaluator.java,Symbol.VariableSymbol rightSymbol = extractLocalVariableSymbol(tree.rightOperand());,if (extractLocalVariableSymbol(tree != null ) Symbol.VariableSymbol rightSymbol = extractLocalVariableSymbol(tree.rightOperand());
SymbolicEvaluator.java,Symbol.VariableSymbol symbol = extractLocalVariableSymbol(tree.variable());,if (extractLocalVariableSymbol(tree != null ) Symbol.VariableSymbol symbol = extractLocalVariableSymbol(tree.variable());
SymbolicEvaluator.java,Symbol.VariableSymbol symbol = extractLocalVariableSymbol(tree.expression());,if (extractLocalVariableSymbol(tree != null ) Symbol.VariableSymbol symbol = extractLocalVariableSymbol(tree.expression());
SymbolicEvaluator.java,Symbol.VariableSymbol leftSymbol = extractLocalVariableSymbol(tree.leftOperand());,if (extractLocalVariableSymbol(tree != null ) Symbol.VariableSymbol leftSymbol = extractLocalVariableSymbol(tree.leftOperand());
SymbolicEvaluator.java,Symbol.VariableSymbol rightSymbol = extractLocalVariableSymbol(tree.rightOperand());,if (extractLocalVariableSymbol(tree != null ) Symbol.VariableSymbol rightSymbol = extractLocalVariableSymbol(tree.rightOperand());
SymbolicEvaluator.java,"List<ExecutionState> loopStates = evaluateStatement(conditionStates.trueStates, tree.statement());","if (tree != null ) List<ExecutionState> loopStates = evaluateStatement(conditionStates.trueStates, tree.statement());"
SymbolicEvaluator.java,"List<ExecutionState> trueStates = evaluateStatement(conditionStates.trueStates, tree.thenStatement());","if (tree != null ) List<ExecutionState> trueStates = evaluateStatement(conditionStates.trueStates, tree.thenStatement());"
SymbolicEvaluator.java,"List<ExecutionState> loopStates = evaluateStatement(conditionStates.trueStates, tree.statement());","if (tree != null ) List<ExecutionState> loopStates = evaluateStatement(conditionStates.trueStates, tree.statement());"
SymbolicEvaluator.java,"PackedStates result = evaluateCondition(currentState, tree.expression());","if (tree != null ) PackedStates result = evaluateCondition(currentState, tree.expression());"
SymbolicEvaluator.java,"PackedStates conditionStates = evaluateCondition(state, tree.condition());","if (tree != null ) PackedStates conditionStates = evaluateCondition(state, tree.condition());"
SymbolicEvaluator.java,"List<ExecutionState> loopStates = evaluateStatement(conditionStates.trueStates, tree.statement());","if (tree != null ) List<ExecutionState> loopStates = evaluateStatement(conditionStates.trueStates, tree.statement());"
SymbolicEvaluator.java,"currentStates = evaluateStatement(currentStates, tree.statement());","if (tree != null ) currentStates = evaluateStatement(currentStates, tree.statement());"
SymbolicEvaluator.java,"currentStates = evaluateStatement(conditionStates.trueStates, tree.statement());","if (tree != null ) currentStates = evaluateStatement(conditionStates.trueStates, tree.statement());"
SymbolicEvaluator.java,"List<ExecutionState> trueStates = evaluateStatement(conditionStates.trueStates, tree.thenStatement());","if (tree != null ) List<ExecutionState> trueStates = evaluateStatement(conditionStates.trueStates, tree.thenStatement());"
SymbolicEvaluator.java,"falseStates = evaluateStatement(conditionStates.falseStates, tree.elseStatement());","if (tree != null ) falseStates = evaluateStatement(conditionStates.falseStates, tree.elseStatement());"
ExpressionEvaluatorVisitor.java,"ExpressionEvaluatorVisitor currentResults = new ExpressionEvaluatorVisitor(currentState, tree.expression());","if (tree != null ) ExpressionEvaluatorVisitor currentResults = new ExpressionEvaluatorVisitor(currentState, tree.expression());"
ExpressionEvaluatorVisitor.java,"ExpressionEvaluatorVisitor leftResults = new ExpressionEvaluatorVisitor(currentState, tree.leftOperand());","if (tree != null ) ExpressionEvaluatorVisitor leftResults = new ExpressionEvaluatorVisitor(currentState, tree.leftOperand());"
ExpressionEvaluatorVisitor.java,"ExpressionEvaluatorVisitor leftResults = new ExpressionEvaluatorVisitor(currentState, tree.leftOperand());","if (tree != null ) ExpressionEvaluatorVisitor leftResults = new ExpressionEvaluatorVisitor(currentState, tree.leftOperand());"
ExpressionEvaluatorVisitor.java,"ExpressionEvaluatorVisitor rightResults = new ExpressionEvaluatorVisitor(state, tree.rightOperand());","if (tree != null ) ExpressionEvaluatorVisitor rightResults = new ExpressionEvaluatorVisitor(state, tree.rightOperand());"
ExpressionEvaluatorVisitor.java,Symbol.VariableSymbol leftSymbol = extractLocalVariableSymbol(tree.leftOperand());,if (extractLocalVariableSymbol(tree != null ) Symbol.VariableSymbol leftSymbol = extractLocalVariableSymbol(tree.leftOperand());
ExpressionEvaluatorVisitor.java,Symbol.VariableSymbol rightSymbol = extractLocalVariableSymbol(tree.rightOperand());,if (extractLocalVariableSymbol(tree != null ) Symbol.VariableSymbol rightSymbol = extractLocalVariableSymbol(tree.rightOperand());
ExpressionEvaluatorVisitor.java,Symbol symbol = identifierTree.symbol();,if (identifierTree != null ) Symbol symbol = identifierTree.symbol();
ExpressionEvaluatorVisitor.java,result = currentState.getBooleanConstraint(symbol).negate();,if (currentState != null ) result = currentState.getBooleanConstraint(symbol).negate();
ExpressionEvaluatorVisitor.java,SymbolicBooleanConstraint leftResult = evaluate(tree.leftOperand());,if (evaluate(tree != null ) SymbolicBooleanConstraint leftResult = evaluate(tree.leftOperand());
ExpressionEvaluatorVisitor.java,SymbolicBooleanConstraint rightResult = evaluate(tree.rightOperand());,if (evaluate(tree != null ) SymbolicBooleanConstraint rightResult = evaluate(tree.rightOperand());
CheckListTest.java,List<Class> checks = CheckList.getChecks();,if (CheckList != null ) List<Class> checks = CheckList.getChecks();
SonarComponents.java,Iterable<JavaFileScanner> result = ImmutableList.of();,if (ImmutableList != null ) Iterable<JavaFileScanner> result = ImmutableList.of();
SonarComponents.java,"result = Iterables.concat(result, factory.createJavaFileScanners());","if (factory != null ) result = Iterables.concat(result, factory.createJavaFileScanners());"
JavaSquidSensor.java,Collection<JavaCheck> checkList = checks.all();,if (checks != null ) Collection<JavaCheck> checkList = checks.all();
JavaSquidSensor.java,Collection<CodeVisitor> checkList = checks.all();,if (checks != null ) Collection<CodeVisitor> checkList = checks.all();
SecondPass.java,Tree superClassTree = tree.superClass();,if (tree != null ) Tree superClassTree = tree.superClass();
UselessExtendsCheck.java,TypeTree superClass = classTree.superClass();,if (classTree != null ) TypeTree superClass = classTree.superClass();
UselessExtendsCheck.java,Type interfaceType = superInterface.symbolType();,if (superInterface != null ) Type interfaceType = superInterface.symbolType();
UselessExtendsCheck.java,String interfaceName = interfaceType.fullyQualifiedName();,if (interfaceType != null ) String interfaceName = interfaceType.fullyQualifiedName();
UselessExtendsCheck.java,String interfaceName = superInterface.symbolType().fullyQualifiedName();,if (superInterface != null ) String interfaceName = superInterface.symbolType().fullyQualifiedName();
ChecksBridge.java,Object check = checkMessage.getCheck();,if (checkMessage != null ) Object check = checkMessage.getCheck();
CatchOfThrowableOrErrorCheck.java,Type type = tree.symbolType();,if (tree != null ) Type type = tree.symbolType();
CatchOfThrowableOrErrorCheck.java,Tree typeTree = tree.parameter().type();,if (tree != null ) Tree typeTree = tree.parameter().type();
SecureCookieCheck.java,Type type = variableTree.type().symbolType();,if (variableTree != null ) Type type = variableTree.type().symbolType();
SecureCookieCheck.java,Symbol variableSymbol = variableTree.symbol();,if (variableTree != null ) Symbol variableSymbol = variableTree.symbol();
SecureCookieCheck.java,MemberSelectExpressionTree mse = (MemberSelectExpressionTree) mit.methodSelect();,if (mit != null ) MemberSelectExpressionTree mse = (MemberSelectExpressionTree) mit.methodSelect();
ImmediateReverseBoxingCheck.java,List<MethodInvocationMatcher> matchers = Lists.newArrayList();,if (Lists != null ) List<MethodInvocationMatcher> matchers = Lists.newArrayList();
ImmediateReverseBoxingCheck.java,List<MethodInvocationMatcher> matchers = Lists.newArrayList();,if (Lists != null ) List<MethodInvocationMatcher> matchers = Lists.newArrayList();
MethodInvocationMatcher.java,MemberSelectExpressionTree methodSelect = (MemberSelectExpressionTree) mit.methodSelect();,if (mit != null ) MemberSelectExpressionTree methodSelect = (MemberSelectExpressionTree) mit.methodSelect();
FieldNameMatchingTypeNameCheck.java,currentClassName = tree.simpleName().name();,if (tree != null ) currentClassName = tree.simpleName().name();
CatchUsesExceptionWithContextCheck.java,SemanticModel semanticModel = (SemanticModel) context.getSemanticModel();,if (context != null ) SemanticModel semanticModel = (SemanticModel) context.getSemanticModel();
CatchUsesExceptionWithContextCheck.java,Symbol exception = semanticModel.getSymbol(tree.parameter());,if (semanticModel != null ) Symbol exception = semanticModel.getSymbol(tree.parameter());
TypeAndReferenceSolver.java,anonymousClassType.interfaces = ImmutableList.of();,if (ImmutableList != null ) anonymousClassType.interfaces = ImmutableList.of();
TypeAndReferenceSolver.java,name = scopeSymbol.getName();,if (scopeSymbol != null ) name = scopeSymbol.getName();
EqualsNotOverridenWithCompareToCheck.java,Symbol.TypeSymbol typeSymbol = tree.symbol();,if (tree != null ) Symbol.TypeSymbol typeSymbol = tree.symbol();
JavaSymbol.java,JavaType.ClassJavaType superClassType = (JavaType.ClassJavaType) this.getSuperclass();,if (this != null ) JavaType.ClassJavaType superClassType = (JavaType.ClassJavaType) this.getSuperclass();
JavaSymbol.java,superClassType = (JavaType.ClassJavaType) superClassSymbol.getSuperclass();,if (superClassSymbol != null ) superClassType = (JavaType.ClassJavaType) superClassSymbol.getSuperclass();
DITCheck.java,Symbol.TypeSymbol typeSymbol = tree.symbol();,if (tree != null ) Symbol.TypeSymbol typeSymbol = tree.symbol();
DITCheck.java,typeSymbol = typeSymbol.superClass().symbol();,if (typeSymbol != null ) typeSymbol = typeSymbol.superClass().symbol();
SerializableSuperConstructorCheck.java,Type superclass = classSymbol.superClass();,if (classSymbol != null ) Type superclass = classSymbol.superClass();
AbstractClassWithoutAbstractMethodCheck.java,Symbol.TypeSymbolSemantic typeSymbol = tree.symbol();,if (tree != null ) Symbol.TypeSymbolSemantic typeSymbol = tree.symbol();
AbstractSerializableInnerClassRule.java,Symbol.TypeSymbolSemantic symbol = classTree.symbol();,if (classTree != null ) Symbol.TypeSymbolSemantic symbol = classTree.symbol();
AbstractSerializableInnerClassRule.java,Symbol.TypeSymbolSemantic methodOwner = (Symbol.TypeSymbolSemantic) owner.owner();,if (owner != null ) Symbol.TypeSymbolSemantic methodOwner = (Symbol.TypeSymbolSemantic) owner.owner();
CallSuperMethodFromInnerClassCheck.java,Symbol.TypeSymbolSemantic classSymbol = classTree.symbol();,if (classTree != null ) Symbol.TypeSymbolSemantic classSymbol = classTree.symbol();
ClassWithOnlyStaticMethodsInstantiationCheck.java,Symbol.TypeSymbolSemantic newClassTypeSymbol = identifier.symbolType().symbol();,if (identifier != null ) Symbol.TypeSymbolSemantic newClassTypeSymbol = identifier.symbolType().symbol();
ClassWithOnlyStaticMethodsInstantiationCheck.java,Collection<MethodSymbolSemantic> methods = filterMethods(newClassTypeSymbol.memberSymbols());,if (filterMethods(newClassTypeSymbol != null ) Collection<MethodSymbolSemantic> methods = filterMethods(newClassTypeSymbol.memberSymbols());
ClassWithOnlyStaticMethodsInstantiationCheck.java,List<MethodSymbolSemantic> methods = Lists.newArrayList();,if (Lists != null ) List<MethodSymbolSemantic> methods = Lists.newArrayList();
CloneableImplementingCloneCheck.java,Symbol.TypeSymbolSemantic classSymbol = classTree.symbol();,if (classTree != null ) Symbol.TypeSymbolSemantic classSymbol = classTree.symbol();
ConstructorCallingOverridableCheck.java,TypeSymbol methodEnclosingClass = (TypeSymbol) symbol.enclosingClass();,if (symbol != null ) TypeSymbol methodEnclosingClass = (TypeSymbol) symbol.enclosingClass();
CustomCryptographicAlgorithmCheck.java,Symbol.TypeSymbolSemantic classSymbol = tree.symbol();,if (tree != null ) Symbol.TypeSymbolSemantic classSymbol = tree.symbol();
CustomSerializationMethodCheck.java,Symbol.MethodSymbolSemantic methodSymbol = methodTree.symbol();,if (methodTree != null ) Symbol.MethodSymbolSemantic methodSymbol = methodTree.symbol();
CustomSerializationMethodCheck.java,Symbol.TypeSymbolSemantic owner = (Symbol.TypeSymbolSemantic) methodSymbol.owner();,if (methodSymbol != null ) Symbol.TypeSymbolSemantic owner = (Symbol.TypeSymbolSemantic) methodSymbol.owner();
CustomSerializationMethodCheck.java,Symbol.MethodSymbolSemantic methodSymbol = methodTree.symbol();,if (methodTree != null ) Symbol.MethodSymbolSemantic methodSymbol = methodTree.symbol();
CustomSerializationMethodCheck.java,Symbol.MethodSymbolSemantic methodSymbol = methodTree.symbol();,if (methodTree != null ) Symbol.MethodSymbolSemantic methodSymbol = methodTree.symbol();
CustomSerializationMethodCheck.java,Symbol.MethodSymbolSemantic methodSymbol = methodTree.symbol();,if (methodTree != null ) Symbol.MethodSymbolSemantic methodSymbol = methodTree.symbol();
DITCheck.java,Symbol.TypeSymbolSemantic typeSymbol = tree.symbol();,if (tree != null ) Symbol.TypeSymbolSemantic typeSymbol = tree.symbol();
EqualsNotOverriddenInSubclassCheck.java,Symbol.TypeSymbolSemantic superClassSymbol = superClassType.symbol();,if (superClassType != null ) Symbol.TypeSymbolSemantic superClassSymbol = superClassType.symbol();
EqualsNotOverridenWithCompareToCheck.java,Symbol.TypeSymbolSemantic typeSymbol = tree.symbol();,if (tree != null ) Symbol.TypeSymbolSemantic typeSymbol = tree.symbol();
FieldNameMatchingTypeNameCheck.java,Symbol.TypeSymbolSemantic classSymbol = tree.symbol();,if (tree != null ) Symbol.TypeSymbolSemantic classSymbol = tree.symbol();
ImmediateReverseBoxingCheck.java,Symbol.TypeSymbolSemantic classSymbol = newClassTree.symbolType().symbol();,if (newClassTree != null ) Symbol.TypeSymbolSemantic classSymbol = newClassTree.symbolType().symbol();
InterfaceOrSuperclassShadowingCheck.java,Symbol.TypeSymbolSemantic classSymbol = classTree.symbol();,if (classTree != null ) Symbol.TypeSymbolSemantic classSymbol = classTree.symbol();
PrintStackTraceCalledWithoutArgumentCheck.java,Symbol.TypeSymbolSemantic enclosingSymbol = tree.symbol();,if (tree != null ) Symbol.TypeSymbolSemantic enclosingSymbol = tree.symbol();
SAMAnnotatedCheck.java,TypeSymbolSemantic symbol = classTree.symbol();,if (classTree != null ) TypeSymbolSemantic symbol = classTree.symbol();
SerialVersionUidCheck.java,Symbol.TypeSymbolSemantic symbol = classTree.symbol();,if (classTree != null ) Symbol.TypeSymbolSemantic symbol = classTree.symbol();
SerialVersionUidCheck.java,TypeSymbol superTypeSymbol = superType.getSymbol();,if (superType != null ) TypeSymbol superTypeSymbol = superType.getSymbol();
SerializableComparatorCheck.java,Symbol.TypeSymbolSemantic symbol = classTree.symbol();,if (classTree != null ) Symbol.TypeSymbolSemantic symbol = classTree.symbol();
ThreadOverridesRunCheck.java,Symbol.TypeSymbolSemantic classSymbol = classTree.symbol();,if (classTree != null ) Symbol.TypeSymbolSemantic classSymbol = classTree.symbol();
ThrowsSeveralCheckedExceptionCheck.java,Symbol.TypeSymbolSemantic typeSymbol = thrownClass.symbol();,if (thrownClass != null ) Symbol.TypeSymbolSemantic typeSymbol = thrownClass.symbol();
BytecodeVisitor.java,List<Type> typeArguments = Lists.newArrayList();,if (Lists != null ) List<Type> typeArguments = Lists.newArrayList();
BytecodeVisitor.java,List<Symbol> lookup = Lists.newArrayList();,if (Lists != null ) List<Symbol> lookup = Lists.newArrayList();
FirstPass.java,currentSymbol = new Resolve.SymbolNotFound();,if (Resolve != null ) currentSymbol = new Resolve.SymbolNotFound();
FirstPass.java,currentSymbol = new Resolve.SymbolNotFound();,if (Resolve != null ) currentSymbol = new Resolve.SymbolNotFound();
JavaSymbol.java,Type.ClassType superClassType = (Type.ClassType) this.getSuperclass();,if (this != null ) Type.ClassType superClassType = (Type.ClassType) this.getSuperclass();
JavaSymbol.java,Symbol.TypeSymbol superClassSymbol = superClassType.getSymbol();,if (superClassType != null ) Symbol.TypeSymbol superClassSymbol = superClassType.getSymbol();
JavaSymbol.java,superClassType = (Type.ClassType) superClassSymbol.getSuperclass();,if (superClassSymbol != null ) superClassType = (Type.ClassType) superClassSymbol.getSuperclass();
Resolve.java,Symbol.PackageSymbol thisPackage = symbol.packge();,if (symbol != null ) Symbol.PackageSymbol thisPackage = symbol.packge();
Scope.java,List<Symbol> symbolsList = Lists.newArrayList();,if (Lists != null ) List<Symbol> symbolsList = Lists.newArrayList();
Scope.java,List<Symbol> symbolsList = Lists.newArrayList();,if (Lists != null ) List<Symbol> symbolsList = Lists.newArrayList();
SecondPass.java,List<Type> bounds = Lists.newArrayList();,if (Lists != null ) List<Type> bounds = Lists.newArrayList();
SecondPass.java,List<Type> argTypes = Lists.newArrayList();,if (Lists != null ) List<Type> argTypes = Lists.newArrayList();
SecondPass.java,List<Symbol> scopeSymbols = symbol.parameters.scopeSymbols();,if (symbol != null ) List<Symbol> scopeSymbols = symbol.parameters.scopeSymbols();
TypeAndReferenceSolver.java,List<Type> argTypes = getParameterTypes(tree.arguments());,if (getParameterTypes(tree != null ) List<Type> argTypes = getParameterTypes(tree.arguments());
TypeAndReferenceSolver.java,List<Type> typeParamTypes = Lists.newArrayList();,if (Lists != null ) List<Type> typeParamTypes = Lists.newArrayList();
TypeAndReferenceSolver.java,Symbol symbol = resolution.symbol();,if (resolution != null ) Symbol symbol = resolution.symbol();
TypeAndReferenceSolver.java,Type type = getType(mset.expression());,if (getType(mset != null ) Type type = getType(mset.expression());
TypeAndReferenceSolver.java,Type type = getType(tree.type());,if (getType(tree != null ) Type type = getType(tree.type());
TypeAndReferenceSolver.java,Type type = getType(tree.type());,if (getType(tree != null ) Type type = getType(tree.type());
TypeAndReferenceSolver.java,Type type = getType(tree.expression());,if (getType(tree != null ) Type type = getType(tree.expression());
TypeAndReferenceSolver.java,Type left = getType(tree.leftOperand());,if (getType(tree != null ) Type left = getType(tree.leftOperand());
TypeAndReferenceSolver.java,Type right = getType(tree.rightOperand());,if (getType(tree != null ) Type right = getType(tree.rightOperand());
TypeAndReferenceSolver.java,Type type = getType(tree.variable());,if (getType(tree != null ) Type type = getType(tree.variable());
Types.java,Set<Type> erasedTypes = Sets.newHashSet();,if (Sets != null ) Set<Type> erasedTypes = Sets.newHashSet();
BytecodeCompleterTest.java,Symbol.TypeSymbol symbol = bytecodeCompleter.getClassSymbol(InnerClassBeforeOuter.class.getName());,if (bytecodeCompleter != null ) Symbol.TypeSymbol symbol = bytecodeCompleter.getClassSymbol(InnerClassBeforeOuter.class.getName());
BytecodeCompleterTest.java,Symbol.TypeSymbol outerClass = (Symbol.TypeSymbol) innerClass.owner();,if (innerClass != null ) Symbol.TypeSymbol outerClass = (Symbol.TypeSymbol) innerClass.owner();
BytecodeCompleterTest.java,Symbol.TypeSymbol outerClass = bytecodeCompleter.getClassSymbol(HasInnerClass.class.getName());,if (bytecodeCompleter != null ) Symbol.TypeSymbol outerClass = bytecodeCompleter.getClassSymbol(HasInnerClass.class.getName());
BytecodeCompleterTest.java,Symbol.TypeSymbol innerClassRef = foo.getReturnType();,if (foo != null ) Symbol.TypeSymbol innerClassRef = foo.getReturnType();
BytecodeFieldVisitor.java,AnnotationInstance annotationInstance = new AnnotationInstance(annotationType.getSymbol());,if (AnnotationInstance(annotationType != null ) AnnotationInstance annotationInstance = new AnnotationInstance(annotationType.getSymbol());
BytecodeMethodVisitor.java,AnnotationInstance annotationInstance = new AnnotationInstance(annotationType.getSymbol());,if (AnnotationInstance(annotationType != null ) AnnotationInstance annotationInstance = new AnnotationInstance(annotationType.getSymbol());
BytecodeMethodVisitor.java,AnnotationInstance annotationInstance = new AnnotationInstance(annotationType.getSymbol());,if (AnnotationInstance(annotationType != null ) AnnotationInstance annotationInstance = new AnnotationInstance(annotationType.getSymbol());
BytecodeVisitor.java,AnnotationInstance annotationInstance = new AnnotationInstance(annotationType.getSymbol());,if (AnnotationInstance(annotationType != null ) AnnotationInstance annotationInstance = new AnnotationInstance(annotationType.getSymbol());
BytecodeCompleterTest.java,SymbolMetadata metadata = classSymbol.metadata();,if (classSymbol != null ) SymbolMetadata metadata = classSymbol.metadata();
SymbolTableTest.java,SymbolMetadata metadata = classDeclaration.metadata();,if (classDeclaration != null ) SymbolMetadata metadata = classDeclaration.metadata();
ThreadRunCheck.java,result = superclass.equals(edge.getTargetAsmClass());,if (superclass != null ) result = superclass.equals(edge.getTargetAsmClass());
ThreadRunCheck.java,currentClass = currentClass.getSuperClass();,if (currentClass != null ) currentClass = currentClass.getSuperClass();
ThreadAsRunnableArgumentCheck.java,Type providedType = argument.symbolType();,if (argument != null ) Type providedType = argument.symbolType();
AbstractSerializableInnerClassRule.java,TypeSymbol methodOwner = (TypeSymbol) owner.owner();,if (owner != null ) TypeSymbol methodOwner = (TypeSymbol) owner.owner();
CompareToResultTestCheck.java,Set<ClassType> superTypes = methodOwner.superTypes();,if (methodOwner != null ) Set<ClassType> superTypes = methodOwner.superTypes();
NPEThrowCheck.java,Type.ClassType type = (Type.ClassType) tree.getSymbolType();,if (tree != null ) Type.ClassType type = (Type.ClassType) tree.getSymbolType();
PrimitiveTypeBoxingWithToStringCheck.java,String typeName = abstractTypedTree.getSymbolType().toString();,if (abstractTypedTree != null ) String typeName = abstractTypedTree.getSymbolType().toString();
PrimitiveTypeBoxingWithToStringCheck.java,Type type = abstractTypedTree.getSymbolType();,if (abstractTypedTree != null ) Type type = abstractTypedTree.getSymbolType();
SQLInjectionCheck.java,Symbol interfaceSymbol = interfaceType.getSymbol();,if (interfaceType != null ) Symbol interfaceSymbol = interfaceType.getSymbol();
BytecodeMethodVisitor.java,AnnotationInstance annotationInstance = new AnnotationInstance(annotationType.getSymbol());,if (AnnotationInstance(annotationType != null ) AnnotationInstance annotationInstance = new AnnotationInstance(annotationType.getSymbol());
ObjectCreatedOnlyToCallGetClassCheck.java,name = getAnonymousClassTypeName(type.getSymbol());,if (getAnonymousClassTypeName(type != null ) name = getAnonymousClassTypeName(type.getSymbol());
ObjectCreatedOnlyToCallGetClassCheck.java,name = getTypeName(symbol.getSuperclass());,if (getTypeName(symbol != null ) name = getTypeName(symbol.getSuperclass());
ThrowsSeveralCheckedExceptionCheck.java,Type superType = typeSymbol.getSuperclass();,if (typeSymbol != null ) Type superType = typeSymbol.getSuperclass();
ThrowsSeveralCheckedExceptionCheck.java,typeSymbol = superType.getSymbol();,if (superType != null ) typeSymbol = superType.getSymbol();
SecondPass.java,symbol.thrown = thrown.build();,if (thrown != null ) symbol.thrown = thrown.build();
CustomSerializationMethodCheck.java,Symbol.MethodSymbolSemantic methodSymbol = methodTree.getSymbol();,if (methodTree != null ) Symbol.MethodSymbolSemantic methodSymbol = methodTree.getSymbol();
CustomSerializationMethodCheck.java,Symbol.MethodSymbolSemantic methodSymbol = methodTree.getSymbol();,if (methodTree != null ) Symbol.MethodSymbolSemantic methodSymbol = methodTree.getSymbol();
CustomSerializationMethodCheck.java,Symbol.MethodSymbolSemantic methodSymbol = methodTree.getSymbol();,if (methodTree != null ) Symbol.MethodSymbolSemantic methodSymbol = methodTree.getSymbol();
CustomSerializationMethodCheck.java,Symbol.MethodSymbolSemantic methodSymbol = methodTree.getSymbol();,if (methodTree != null ) Symbol.MethodSymbolSemantic methodSymbol = methodTree.getSymbol();
HasNextCallingNextCheck.java,Set<ClassType> superTypes = methodOwner.superTypes();,if (methodOwner != null ) Set<ClassType> superTypes = methodOwner.superTypes();
CustomSerializationMethodCheck.java,MethodSymbol methodSymbol = methodTree.getSymbol();,if (methodTree != null ) MethodSymbol methodSymbol = methodTree.getSymbol();
CustomSerializationMethodCheck.java,TypeSymbol owner = (TypeSymbol) methodSymbol.owner();,if (methodSymbol != null ) TypeSymbol owner = (TypeSymbol) methodSymbol.owner();
CustomSerializationMethodCheck.java,List<Type> parametersTypes = methodSymbol.getParametersTypes();,if (methodSymbol != null ) List<Type> parametersTypes = methodSymbol.getParametersTypes();
CustomSerializationMethodCheck.java,MethodSymbol methodSymbol = methodTree.getSymbol();,if (methodTree != null ) MethodSymbol methodSymbol = methodTree.getSymbol();
CustomSerializationMethodCheck.java,MethodSymbol methodSymbol = methodTree.getSymbol();,if (methodTree != null ) MethodSymbol methodSymbol = methodTree.getSymbol();
CustomSerializationMethodCheck.java,MethodSymbol methodSymbol = methodTree.getSymbol();,if (methodTree != null ) MethodSymbol methodSymbol = methodTree.getSymbol();
DefaultEncodingUsageCheck.java,Type symbolType = typedTree.getSymbolType();,if (typedTree != null ) Type symbolType = typedTree.getSymbolType();
DefaultEncodingUsageCheck.java,List<Type> parametersTypes = constructor.getParametersTypes();,if (constructor != null ) List<Type> parametersTypes = constructor.getParametersTypes();
ImmediateReverseBoxingCheck.java,TypeSymbol classSymbol = newClassTree.getSymbolType().getSymbol();,if (newClassTree != null ) TypeSymbol classSymbol = newClassTree.getSymbolType().getSymbol();
ImmediateReverseBoxingCheck.java,AbstractTypedTree unboxedExpression = (AbstractTypedTree) memberSelectExpressionTree.expression();,if (memberSelectExpressionTree != null ) AbstractTypedTree unboxedExpression = (AbstractTypedTree) memberSelectExpressionTree.expression();
ThreadAsRunnableArgumentCheck.java,List<Type> parametersTypes = methodSymbol.getParametersTypes();,if (methodSymbol != null ) List<Type> parametersTypes = methodSymbol.getParametersTypes();
ThreadAsRunnableArgumentCheck.java,Type providedType = argument.getSymbolType();,if (argument != null ) Type providedType = argument.getSymbolType();
ArrayHashCodeAndToStringCheck.java,String methodName = methodInvocationTreeImpl.getSymbol().getName();,if (methodInvocationTreeImpl != null ) String methodName = methodInvocationTreeImpl.getSymbol().getName();
CallSuperMethodFromInnerClassCheck.java,Symbol symbol = mit.getSymbol();,if (mit != null ) Symbol symbol = mit.getSymbol();
CastArithmeticOperandCheck.java,Symbol symbol = mit.getSymbol();,if (mit != null ) Symbol symbol = mit.getSymbol();
CompareToResultTestCheck.java,Symbol method = invocation.getSymbol();,if (invocation != null ) Symbol method = invocation.getSymbol();
DefaultEncodingUsageCheck.java,String methodName = methodInvocationTreeImpl.getSymbol().getName();,if (methodInvocationTreeImpl != null ) String methodName = methodInvocationTreeImpl.getSymbol().getName();
HasNextCallingNextCheck.java,Symbol method = invocation.getSymbol();,if (invocation != null ) Symbol method = invocation.getSymbol();
ImmediateReverseBoxingCheck.java,Symbol symbol = methodInvocationTree.getSymbol();,if (methodInvocationTree != null ) Symbol symbol = methodInvocationTree.getSymbol();
IteratorNextExceptionCheck.java,Symbol symbol = methodInvocationTreeImpl.getSymbol();,if (methodInvocationTreeImpl != null ) Symbol symbol = methodInvocationTreeImpl.getSymbol();
SecureCookieCheck.java,Symbol methodSymbol = mit.getSymbol();,if (mit != null ) Symbol methodSymbol = mit.getSymbol();
ThreadAsRunnableArgumentCheck.java,methodSymbol = mit.getSymbol();,if (mit != null ) methodSymbol = mit.getSymbol();
EqualsNotOverriddenInSubclassCheck.java,Tree superClass = tree.superClass();,if (tree != null ) Tree superClass = tree.superClass();
EqualsNotOverriddenInSubclassCheck.java,TypeSymbol superClassSymbol = superClassType.getSymbol();,if (superClassType != null ) TypeSymbol superClassSymbol = superClassType.getSymbol();
EqualsNotOverriddenInSubclassCheck.java,superClassType = superClassSymbol.getSuperclass();,if (superClassSymbol != null ) superClassType = superClassSymbol.getSuperclass();
MethodInvocationMatcher.java,List<Type> parametersTypes = methodSymbol.getParametersTypes();,if (methodSymbol != null ) List<Type> parametersTypes = methodSymbol.getParametersTypes();
AbstractSerializableInnerClassRule.java,TypeSymbol symbol = classTree.getSymbol();,if (classTree != null ) TypeSymbol symbol = classTree.getSymbol();
CallSuperMethodFromInnerClassCheck.java,Type innerType = classSymbol.getType();,if (classSymbol != null ) Type innerType = classSymbol.getType();
CloneableImplementingCloneCheck.java,TypeSymbol classSymbol = classTree.getSymbol();,if (classTree != null ) TypeSymbol classSymbol = classTree.getSymbol();
CustomCryptographicAlgorithmCheck.java,TypeSymbol classSymbol = tree.getSymbol();,if (tree != null ) TypeSymbol classSymbol = tree.getSymbol();
DITCheck.java,typeSymbol = typeSymbol.getSuperclass().getSymbol();,if (typeSymbol != null ) typeSymbol = typeSymbol.getSuperclass().getSymbol();
InterfaceOrSuperclassShadowingCheck.java,TypeSymbol classSymbol = classTree.getSymbol();,if (classTree != null ) TypeSymbol classSymbol = classTree.getSymbol();
SerialVersionUidCheck.java,TypeSymbol symbol = classTree.getSymbol();,if (classTree != null ) TypeSymbol symbol = classTree.getSymbol();
SerializableComparatorCheck.java,TypeSymbol symbol = classTree.getSymbol();,if (classTree != null ) TypeSymbol symbol = classTree.getSymbol();
SerializableComparatorCheck.java,Type type = symbol.getType();,if (symbol != null ) Type type = symbol.getType();
SerializableSuperConstructorCheck.java,TypeSymbol classSymbol = classTree.getSymbol();,if (classTree != null ) TypeSymbol classSymbol = classTree.getSymbol();
SerializableSuperConstructorCheck.java,Type superclass = classSymbol.getSuperclass();,if (classSymbol != null ) Type superclass = classSymbol.getSuperclass();
ThreadOverridesRunCheck.java,Symbol.TypeSymbol classSymbol = classTree.getSymbol();,if (classTree != null ) Symbol.TypeSymbol classSymbol = classTree.getSymbol();
UnusedMethodParameterCheck.java,this.semanticModel = (SemanticModel) context.getSemanticModel();,if (context != null ) this.semanticModel = (SemanticModel) context.getSemanticModel();
ClassWithOnlyStaticMethodsInstantiationCheck.java,Collection<MethodSymbol> methods = filterMethods(newClassTypeSymbol.members().scopeSymbols());,if (filterMethods(newClassTypeSymbol != null ) Collection<MethodSymbol> methods = filterMethods(newClassTypeSymbol.members().scopeSymbols());
ClassWithOnlyStaticMethodsInstantiationCheck.java,Type superClass = newClassTypeSymbol.getSuperclass();,if (newClassTypeSymbol != null ) Type superClass = newClassTypeSymbol.getSuperclass();
ClassWithOnlyStaticMethodsInstantiationCheck.java,List<MethodSymbol> methods = Lists.newArrayList();,if (Lists != null ) List<MethodSymbol> methods = Lists.newArrayList();
FieldMatchMethodNameCheck.java,this.semanticModel = (SemanticModel) context.getSemanticModel();,if (context != null ) this.semanticModel = (SemanticModel) context.getSemanticModel();
SAMAnnotatedCheck.java,List<Type> types = symbol.getInterfaces();,if (symbol != null ) List<Type> types = symbol.getInterfaces();
AbstractClassWithoutAbstractMethodCheck.java,Collection<Symbol> symbols = typeSymbol.members().scopeSymbols();,if (typeSymbol != null ) Collection<Symbol> symbols = typeSymbol.members().scopeSymbols();
CallSuperMethodFromInnerClassCheck.java,Symbol.TypeSymbol classSymbol = classTree.getSymbol();,if (classTree != null ) Symbol.TypeSymbol classSymbol = classTree.getSymbol();
CallSuperMethodFromInnerClassCheck.java,Type methodOwnerType = symbol.owner().getType();,if (symbol != null ) Type methodOwnerType = symbol.owner().getType();
ClassNamedLikeExceptionCheck.java,TypeSymbol symbol = classTree.getSymbol();,if (classTree != null ) TypeSymbol symbol = classTree.getSymbol();
ClassNamedLikeExceptionCheck.java,String className = symbol.getName();,if (symbol != null ) String className = symbol.getName();
FieldMatchMethodNameCheck.java,Collection<Symbol> symbols = classSymbol.members().scopeSymbols();,if (classSymbol != null ) Collection<Symbol> symbols = classSymbol.members().scopeSymbols();
FieldMatchMethodNameCheck.java,String symName = sym.getName().toLowerCase();,if (sym != null ) String symName = sym.getName().toLowerCase();
FieldNameMatchingTypeNameCheck.java,Collection<Symbol> members = classSymbol.members().scopeSymbols();,if (classSymbol != null ) Collection<Symbol> members = classSymbol.members().scopeSymbols();
HasNextCallingNextCheck.java,TypeSymbol methodOwner = method.owner().enclosingClass();,if (method != null ) TypeSymbol methodOwner = method.owner().enclosingClass();
SQLInjectionCheck.java,Symbol.TypeSymbol symbol = selectorType.getSymbol();,if (selectorType != null ) Symbol.TypeSymbol symbol = selectorType.getSymbol();
SQLInjectionCheck.java,Symbol.TypeSymbol interfaceSymbol = interfaceType.getSymbol();,if (interfaceType != null ) Symbol.TypeSymbol interfaceSymbol = interfaceType.getSymbol();
AbstractSerializableInnerClassRule.java,String methodName = owner.getName();,if (owner != null ) String methodName = owner.getName();
CollectionCallingItselfCheck.java,Symbol.TypeSymbol owner = (Symbol.TypeSymbol) methodSymbol.owner();,if (methodSymbol != null ) Symbol.TypeSymbol owner = (Symbol.TypeSymbol) methodSymbol.owner();
CompareToResultTestCheck.java,TypeSymbol methodOwner = method.owner().enclosingClass();,if (method != null ) TypeSymbol methodOwner = method.owner().enclosingClass();
ConstructorCallingOverridableCheck.java,TypeSymbol methodEnclosingClass = symbol.enclosingClass();,if (symbol != null ) TypeSymbol methodEnclosingClass = symbol.enclosingClass();
NullPointerCheck.java,List<Symbol> parameters = methodSymbol.getParameters().scopeSymbols();,if (methodSymbol != null ) List<Symbol> parameters = methodSymbol.getParameters().scopeSymbols();
BadConstantName_S00115_Check.java,this.semanticModel = (SemanticModel) context.getSemanticModel();,if (context != null ) this.semanticModel = (SemanticModel) context.getSemanticModel();
ImmediateReverseBoxingCheck.java,List<Type> parametersTypes = methodSymbol.getParametersTypes();,if (methodSymbol != null ) List<Type> parametersTypes = methodSymbol.getParametersTypes();
ImmediateReverseBoxingCheck.java,String fullyQualifiedName = classSymbol.getFullyQualifiedName();,if (classSymbol != null ) String fullyQualifiedName = classSymbol.getFullyQualifiedName();
SelectorMethodArgumentCheck.java,List<VariableSymbol> booleanParameterSymbols = getBooleanParametersAsSymbol(methodTree.parameters());,if (getBooleanParametersAsSymbol(methodTree != null ) List<VariableSymbol> booleanParameterSymbols = getBooleanParametersAsSymbol(methodTree.parameters());
SelectorMethodArgumentCheck.java,List<VariableSymbol> booleanParameters = Lists.newLinkedList();,if (Lists != null ) List<VariableSymbol> booleanParameters = Lists.newLinkedList();
ServletInstanceFieldCheck.java,Symbol owner = vti.getSymbol().owner();,if (vti != null ) Symbol owner = vti.getSymbol().owner();
FirstPass.java,symbol.isParametrized = !tree.typeParameters().isEmpty();,if (!tree != null ) symbol.isParametrized = !tree.typeParameters().isEmpty();
FirstPass.java,symbol.isParametrized = !tree.typeParameters().isEmpty();,if (!tree != null ) symbol.isParametrized = !tree.typeParameters().isEmpty();
ImmediateReverseBoxingCheck.java,Type unboxedExpressionType = unboxedExpression.getSymbolType();,if (unboxedExpression != null ) Type unboxedExpressionType = unboxedExpression.getSymbolType();
CompareObjectWithEqualsCheck.java,String methodName = tree.simpleName().name();,if (tree != null ) String methodName = tree.simpleName().name();
EqualsNotOverridenWithCompareToCheck.java,String name = method.simpleName().name();,if (method != null ) String name = method.simpleName().name();
StringToPrimitiveConversionCheck.java,Type variableType = variableTree.getSymbol().getType();,if (variableTree != null ) Type variableType = variableTree.getSymbol().getType();
CatchIllegalMonitorStateExceptionCheck.java,Tree parameterTypeTree = catchTree.parameter().type();,if (catchTree != null ) Tree parameterTypeTree = catchTree.parameter().type();
NonSerializableWriteCheck.java,AbstractTypedTree testedType = (AbstractTypedTree) instanceOfTree.type();,if (instanceOfTree != null ) AbstractTypedTree testedType = (AbstractTypedTree) instanceOfTree.type();
NonShortCircuitLogicCheck.java,Type symbolType = typedExpression.getSymbolType();,if (typedExpression != null ) Type symbolType = typedExpression.getSymbolType();
PrintStackTraceCalledWithoutArgumentCheck.java,Symbol.TypeSymbol site = type.getSymbol();,if (type != null ) Symbol.TypeSymbol site = type.getSymbol();
SynchronizationOnStringOrBoxedCheck.java,AbstractTypedTree expression = (AbstractTypedTree) syncStatement.expression();,if (syncStatement != null ) AbstractTypedTree expression = (AbstractTypedTree) syncStatement.expression();
SynchronizationOnStringOrBoxedCheck.java,Type expressionType = expression.getSymbolType();,if (expression != null ) Type expressionType = expression.getSymbolType();
TreeFactory.java,"result = new ParameterizedTypeTreeImpl(result, typeArguments.get());","if (typeArguments != null ) result = new ParameterizedTypeTreeImpl(result, typeArguments.get());"
ArrayEqualsCheck.java,AbstractTypedTree typedTree = (AbstractTypedTree) mset.expression();,if (mset != null ) AbstractTypedTree typedTree = (AbstractTypedTree) mset.expression();
SecondPass.java,Collection<Symbol> scopeSymbols = symbol.parameters.scopeSymbols();,if (symbol != null ) Collection<Symbol> scopeSymbols = symbol.parameters.scopeSymbols();
SerializableFieldInSerializableClassCheck.java,Symbol.TypeSymbol symbol = type.getSymbol();,if (type != null ) Symbol.TypeSymbol symbol = type.getSymbol();
SquidUserGuideTest.java,DefaultInputFile inputFile = new DefaultInputFile(file.getPath());,if (DefaultInputFile(file != null ) DefaultInputFile inputFile = new DefaultInputFile(file.getPath());
StrutsTest.java,DefaultInputFile inputFile = new DefaultInputFile(file.getPath());,if (DefaultInputFile(file != null ) DefaultInputFile inputFile = new DefaultInputFile(file.getPath());
ClassWithOnlyStaticMethodsInstantiationCheck.java,Collection<Symbol> members = typeSymbol.members().scopeSymbols();,if (typeSymbol != null ) Collection<Symbol> members = typeSymbol.members().scopeSymbols();
ClassWithOnlyStaticMethodsInstantiationCheck.java,String name = symbol.getName();,if (symbol != null ) String name = symbol.getName();
InvalidDateValuesCheck.java,thresholdByName = Maps.newHashMap();,if (Maps != null ) thresholdByName = Maps.newHashMap();
JavaClasspath.java,validateLibraries = project.getModules().isEmpty();,if (project != null ) validateLibraries = project.getModules().isEmpty();
JavaClasspath.java,FilePredicates predicates = fileSystem.predicates();,if (fileSystem != null ) FilePredicates predicates = fileSystem.predicates();
JavaClasspath.java,boolean useDeprecatedProperties = binaries.isEmpty() && libraries.isEmpty();,if (libraries != null ) boolean useDeprecatedProperties = binaries.isEmpty() && libraries.isEmpty();
DefaultJavaResourceLocator.java,ignoredLinesForRules = Maps.newHashMap();,if (Maps != null ) ignoredLinesForRules = Maps.newHashMap();
JavaFilesCache.java,Set<Integer> ignoredLines = Sets.newHashSet();,if (Sets != null ) Set<Integer> ignoredLines = Sets.newHashSet();
JavaFilesCache.java,List<String> ignoredKey = Lists.newArrayList();,if (Lists != null ) List<String> ignoredKey = Lists.newArrayList();
TypeAndReferenceSolver.java,Type resolvedType = resolution.type();,if (resolution != null ) Type resolvedType = resolution.type();
SuppressWarningsCheck.java,warnings = Lists.newArrayList();,if (Lists != null ) warnings = Lists.newArrayList();
MethodTreeImpl.java,this.typeParameters = ImmutableList.of();,if (ImmutableList != null ) this.typeParameters = ImmutableList.of();
MethodTreeImpl.java,this.typeParameters = ImmutableList.of();,if (ImmutableList != null ) this.typeParameters = ImmutableList.of();
SecondPass.java,List<Type> bounds = Lists.newArrayList();,if (Lists != null ) List<Type> bounds = Lists.newArrayList();
Symbol.java,this.typeParameterTypes = Lists.newArrayList();,if (Lists != null ) this.typeParameterTypes = Lists.newArrayList();
SecondPass.java,List<Type> bounds = Lists.newArrayList();,if (Lists != null ) List<Type> bounds = Lists.newArrayList();
Symbol.java,this.typeParameters = Lists.newArrayList();,if (Lists != null ) this.typeParameters = Lists.newArrayList();
SerializableComparatorCheck.java,TypeSymbol symbol = classTree.getSymbol();,if (classTree != null ) TypeSymbol symbol = classTree.getSymbol();
SerializableComparatorCheck.java,Type type = symbol.getType();,if (symbol != null ) Type type = symbol.getType();
InnerClassOfNonSerializableCheck.java,TypeSymbol symbol = classTree.getSymbol();,if (classTree != null ) TypeSymbol symbol = classTree.getSymbol();
InnerClassOfNonSerializableCheck.java,Symbol owner = symbol.owner();,if (symbol != null ) Symbol owner = symbol.owner();
InnerClassOfNonSerializableCheck.java,TypeSymbol methodOwner = (TypeSymbol) owner.owner();,if (owner != null ) TypeSymbol methodOwner = (TypeSymbol) owner.owner();
InnerClassOfNonSerializableCheck.java,String methodName = owner.getName();,if (owner != null ) String methodName = owner.getName();
SerializableSuperConstructorCheck.java,Type type = classSymbol.getType();,if (classSymbol != null ) Type type = classSymbol.getType();
SerializableSuperConstructorCheck.java,String superclassName = superclass.toString();,if (superclass != null ) String superclassName = superclass.toString();
SerializableSuperConstructorCheck.java,List<Type> parametersTypes = method.getParametersTypes();,if (method != null ) List<Type> parametersTypes = method.getParametersTypes();
SQLInjectionCheck.java,parameterName =  arg.name();,if (arg != null ) parameterName =  arg.name();
LDAPInjectionCheck.java,parameterName = arg.name();,if (arg != null ) parameterName = arg.name();
OSCommandInjectionCheck.java,parameterName = arg.name();,if (arg != null ) parameterName = arg.name();
Type.java,"return symbol == null ? """" : symbol.toString();","if (symbol != null ) return symbol == null ? """" : symbol.toString();"
NewClassTreeImpl.java,identifier = mset.identifier();,if (mset != null ) identifier = mset.identifier();
AbstractForLoopRule.java,Integer subExpressionIntValue = intLiteralValue(unaryExp.expression());,if (intLiteralValue(unaryExp != null ) Integer subExpressionIntValue = intLiteralValue(unaryExp.expression());
AbstractForLoopRule.java,String literalValue = literal.value();,if (literal != null ) String literalValue = literal.value();
TypeAndReferenceSolver.java,identifier = mset.identifier();,if (mset != null ) identifier = mset.identifier();
UnusedLocalVariableCheck.java,SemanticModel semanticModel = (SemanticModel) context.getSemanticModel();,if (context != null ) SemanticModel semanticModel = (SemanticModel) context.getSemanticModel();
TypeAndReferenceSolver.java,name = symbol.getName();,if (symbol != null ) name = symbol.getName();
AstScanner.java,File file = inputFile.file();,if (inputFile != null ) File file = inputFile.file();
SquidUserGuideTest.java,List<InputFile> sourceFiles = Lists.newArrayList();,if (Lists != null ) List<InputFile> sourceFiles = Lists.newArrayList();
StrutsTest.java,List<InputFile> sourceFiles = Lists.newArrayList();,if (Lists != null ) List<InputFile> sourceFiles = Lists.newArrayList();
BytecodeVisitorsTest.java,List<InputFile> sourceFiles = Lists.newArrayList();,if (Lists != null ) List<InputFile> sourceFiles = Lists.newArrayList();
JavaSquidSensor.java,Collection<CodeVisitor> checks = annotationCheckFactory.getChecks();,if (annotationCheckFactory != null ) Collection<CodeVisitor> checks = annotationCheckFactory.getChecks();
ChecksBridge.java,ActiveRule rule = checkFactory.getActiveRule(checkMessage.getCheck());,if (checkFactory != null ) ActiveRule rule = checkFactory.getActiveRule(checkMessage.getCheck());
ChecksBridge.java,ruleKey = rule.getRule().ruleKey();,if (rule != null ) ruleKey = rule.getRule().ruleKey();
JavaSquid.java,List<InputFile> sourceFiles = Lists.newArrayList();,if (Lists != null ) List<InputFile> sourceFiles = Lists.newArrayList();
AstScanner.java,File file = inputFile.getFile();,if (inputFile != null ) File file = inputFile.getFile();
JavaSquidSensor.java,Charset charset = moduleFileSystem.sourceCharset();,if (moduleFileSystem != null ) Charset charset = moduleFileSystem.sourceCharset();
SynchronizedClassUsageCheck.java,String declaredType = getTypeName(tree.type());,if (getTypeName(tree != null ) String declaredType = getTypeName(tree.type());
NullCipherCheck.java,identifier = (IdentifierTree) newClass.identifier();,if (newClass != null ) identifier = (IdentifierTree) newClass.identifier();
NullCipherCheck.java,Type type = reference.getType();,if (reference != null ) Type type = reference.getType();
UnusedPrivateFieldCheck.java,SemanticModel semanticModel = (SemanticModel) context.getSemanticModel();,if (context != null ) SemanticModel semanticModel = (SemanticModel) context.getSemanticModel();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
AbstractForLoopRule.java,Integer increment = intLiteralValue(binaryExp.rightOperand());,if (intLiteralValue(binaryExp != null ) Integer increment = intLiteralValue(binaryExp.rightOperand());
ForLoopFalseConditionCheck.java,List<ForLoopInitializer> list = Lists.newArrayList();,if (Lists != null ) List<ForLoopInitializer> list = Lists.newArrayList();
ForLoopFalseConditionCheck.java,ExpressionTree initializer = variable.initializer();,if (variable != null ) ExpressionTree initializer = variable.initializer();
ForLoopFalseConditionCheck.java,ExpressionTree variable = assignment.variable();,if (assignment != null ) ExpressionTree variable = assignment.variable();
ForLoopFalseConditionCheck.java,Integer subExpressionIntValue = intLiteralValue(unaryExp.expression());,if (intLiteralValue(unaryExp != null ) Integer subExpressionIntValue = intLiteralValue(unaryExp.expression());
ForLoopFalseConditionCheck.java,String literalValue = literal.value();,if (literal != null ) String literalValue = literal.value();
ForLoopIncrementSignCheck.java,List<StatementTree> updates = forStatement.update();,if (forStatement != null ) List<StatementTree> updates = forStatement.update();
ForLoopIncrementSignCheck.java,ExpressionTree expression = statement.expression();,if (statement != null ) ExpressionTree expression = statement.expression();
ForLoopIncrementSignCheck.java,Integer subExpressionIntValue = intLiteralValue(unaryExp.expression());,if (intLiteralValue(unaryExp != null ) Integer subExpressionIntValue = intLiteralValue(unaryExp.expression());
ForLoopIncrementSignCheck.java,ExpressionTree expression = assignmentExpression.expression();,if (assignmentExpression != null ) ExpressionTree expression = assignmentExpression.expression();
ForLoopIncrementSignCheck.java,ExpressionTree variable = assignmentExpression.variable();,if (assignmentExpression != null ) ExpressionTree variable = assignmentExpression.variable();
ForLoopIncrementSignCheck.java,Integer increment = intLiteralValue(binaryExp.rightOperand());,if (intLiteralValue(binaryExp != null ) Integer increment = intLiteralValue(binaryExp.rightOperand());
ForLoopTerminationConditionCheck.java,List<StatementTree> updates = forStatement.update();,if (forStatement != null ) List<StatementTree> updates = forStatement.update();
ForLoopTerminationConditionCheck.java,StatementTree body = forStatement.statement();,if (forStatement != null ) StatementTree body = forStatement.statement();
ForLoopTerminationConditionCheck.java,ExpressionTree expression = assignmentExpression.expression();,if (assignmentExpression != null ) ExpressionTree expression = assignmentExpression.expression();
ForLoopTerminationConditionCheck.java,ExpressionTree assignedValue = assignmentExpression.expression();,if (assignmentExpression != null ) ExpressionTree assignedValue = assignmentExpression.expression();
ForLoopTerminationConditionCheck.java,ExpressionTree initializer = variable.initializer();,if (variable != null ) ExpressionTree initializer = variable.initializer();
ForLoopTerminationConditionCheck.java,value = intLiteralValue(assignment.expression());,if (intLiteralValue(assignment != null ) value = intLiteralValue(assignment.expression());
ForLoopTerminationConditionCheck.java,ExpressionTree subExpression = unaryExp.expression();,if (unaryExp != null ) ExpressionTree subExpression = unaryExp.expression();
AbstractMethodDetection.java,parameterTypes = Lists.newArrayList();,if (Lists != null ) parameterTypes = Lists.newArrayList();
AbstractMethodDetection.java,id = (IdentifierTree) mit.methodSelect();,if (mit != null ) id = (IdentifierTree) mit.methodSelect();
AbstractMethodDetection.java,List<Type> parametersTypes = methodSymbol.getParametersTypes();,if (methodSymbol != null ) List<Type> parametersTypes = methodSymbol.getParametersTypes();
AbstractMethodDetection.java,id = (IdentifierTree) mit.methodSelect();,if (mit != null ) id = (IdentifierTree) mit.methodSelect();
AbstractMethodDetection.java,List<Type> parametersTypes = methodSymbol.getParametersTypes();,if (methodSymbol != null ) List<Type> parametersTypes = methodSymbol.getParametersTypes();
AbstractMethodDetection.java,List<String> arguments = methodDefinition.getParameterTypes();,if (methodDefinition != null ) List<String> arguments = methodDefinition.getParameterTypes();
AbstractMethodDetection.java,parameterTypes = Lists.newArrayList();,if (Lists != null ) parameterTypes = Lists.newArrayList();
CastArithmeticOperandCheck.java,Symbol symbol = mit.getSymbol();,if (mit != null ) Symbol symbol = mit.getSymbol();
ForLoopTerminationConditionCheck.java,ExpressionTree expression = expressionStatementTree.expression();,if (expressionStatementTree != null ) ExpressionTree expression = expressionStatementTree.expression();
ForLoopTerminationConditionCheck.java,IdentifierTree loopIdentifier = loopVariable.simpleName();,if (loopVariable != null ) IdentifierTree loopIdentifier = loopVariable.simpleName();
ForLoopTerminationConditionCheck.java,List<StatementTree> initializers = forStatement.initializer();,if (forStatement != null ) List<StatementTree> initializers = forStatement.initializer();
ForLoopTerminationConditionCheck.java,ExpressionTree initializer = loopVariable.initializer();,if (loopVariable != null ) ExpressionTree initializer = loopVariable.initializer();
CastArithmeticOperandCheck.java,expr = aet.expression();,if (aet != null ) expr = aet.expression();
CastArithmeticOperandCheck.java,expr = variableTree.initializer();,if (variableTree != null ) expr = variableTree.initializer();
IgnoredReturnValueCheck.java,"return id == null ? """" : id.name();","if (id != null ) return id == null ? """" : id.name();"
TypeAndReferenceSolver.java,type = getType(mset.expression());,if (getType(mset != null ) type = getType(mset.expression());
TypeAndReferenceSolver.java,identifier = mset.identifier();,if (mset != null ) identifier = mset.identifier();
TypeAndReferenceSolver.java,name = identifier.name();,if (identifier != null ) name = identifier.name();
ErrorClassExtendedCheck.java,IdentifierTree idt = (IdentifierTree) tree.superClass();,if (tree != null ) IdentifierTree idt = (IdentifierTree) tree.superClass();
ErrorClassExtendedCheck.java,MemberSelectExpressionTree mse = (MemberSelectExpressionTree) tree.superClass();,if (tree != null ) MemberSelectExpressionTree mse = (MemberSelectExpressionTree) tree.superClass();
ErrorClassExtendedCheck.java,IdentifierTree idt = (IdentifierTree) clz.superClass();,if (clz != null ) IdentifierTree idt = (IdentifierTree) clz.superClass();
ErrorClassExtendedCheck.java,MemberSelectExpressionTree mse = (MemberSelectExpressionTree) clz.superClass();,if (clz != null ) MemberSelectExpressionTree mse = (MemberSelectExpressionTree) clz.superClass();
Symbol.java,Type.ClassType superClassType = (Type.ClassType) enclosingClass.getSuperclass();,if (enclosingClass != null ) Type.ClassType superClassType = (Type.ClassType) enclosingClass.getSuperclass();
Symbol.java,Symbol.TypeSymbol superClassSymbol = superClassType.getSymbol();,if (superClassType != null ) Symbol.TypeSymbol superClassSymbol = superClassType.getSymbol();
Symbol.java,superClassType = (Type.ClassType) superClassSymbol.getSuperclass();,if (superClassSymbol != null ) superClassType = (Type.ClassType) superClassSymbol.getSuperclass();
SecondPass.java,TypeResolverVisitor typeResolverVisitor = new TypeResolverVisitor(env.dup());,if (TypeResolverVisitor(env != null ) TypeResolverVisitor typeResolverVisitor = new TypeResolverVisitor(env.dup());
SecondPass.java,String name = tree.identifier().name();,if (tree != null ) String name = tree.identifier().name();
SecondPass.java,"symbol.type = resolveType(env, variableTree.type());","if (variableTree != null ) symbol.type = resolveType(env, variableTree.type());"
TypeAndReferenceSolver.java,String name = tree.identifier().name();,if (tree != null ) String name = tree.identifier().name();
TypeAndReferenceSolver.java,Type arrayType = getType(tree.expression());,if (getType(tree != null ) Type arrayType = getType(tree.expression());
SQLInjectionCheck.java,parameterName =  arg.name();,if (arg != null ) parameterName =  arg.name();
SQLInjectionCheck.java,parameterName =  arg.name();,if (arg != null ) parameterName =  arg.name();
ThrowsSeveralCheckedExceptionCheck.java,Tree returnType = methodTree.returnType();,if (methodTree != null ) Tree returnType = methodTree.returnType();
UnusedMethodParameterCheck.java,ArrayTypeTree arrayTypeTree = (ArrayTypeTree) variableTree.type();,if (variableTree != null ) ArrayTypeTree arrayTypeTree = (ArrayTypeTree) variableTree.type();
PublicApiChecker.java,tokenTree = methodTree.returnType();,if (methodTree != null ) tokenTree = methodTree.returnType();
MissingCurlyBraces_S00121_Check.java,StatementTree elseStmt = ifStmt.elseStatement();,if (ifStmt != null ) StatementTree elseStmt = ifStmt.elseStatement();
JavaClasspath.java,List<File> result = Lists.newArrayList();,if (Lists != null ) List<File> result = Lists.newArrayList();
UselessParenthesesCheck.java,Tree parent = this.parent.peek();,if (this != null ) Tree parent = this.parent.peek();
UnusedMethodParameterCheck.java,Tree annotationType = annotationTree.annotationType();,if (annotationTree != null ) Tree annotationType = annotationTree.annotationType();
JavaTreeMaker.java,List<Kind> result = Lists.newArrayList();,if (Lists != null ) List<Kind> result = Lists.newArrayList();
JavaTreeMakerTest.java,annotations = maker.compilationUnit(astNode).packageAnnotations();,if (maker != null ) annotations = maker.compilationUnit(astNode).packageAnnotations();
JavaTreeMaker.java,AstNode nextNextSibling = astNodeQualifiedIdentifier.getNextSibling().getNextSibling();,if (astNodeQualifiedIdentifier != null ) AstNode nextNextSibling = astNodeQualifiedIdentifier.getNextSibling().getNextSibling();
TreeFactory.java,AstNode declaration = annotationTypeElementDeclaration.getLastChild();,if (annotationTypeElementDeclaration != null ) AstNode declaration = annotationTypeElementDeclaration.getLastChild();
TreeFactory.java,AstNode identifierNode = constantDeclaratorRestNode.getPreviousAstNode();,if (constantDeclaratorRestNode != null ) AstNode identifierNode = constantDeclaratorRestNode.getPreviousAstNode();
TreeFactory.java,List<AstNode> blockStatements = blockStatementsAstNode.getChildren();,if (blockStatementsAstNode != null ) List<AstNode> blockStatements = blockStatementsAstNode.getChildren();
JavaTreeMaker.java,statementNode = astNode.getFirstChild();,if (astNode != null ) statementNode = astNode.getFirstChild();
PackageInfoCheckTest.java,Set<File> set = check.getDirectoriesWithPackageFile();,if (check != null ) Set<File> set = check.getDirectoriesWithPackageFile();
ChecksBridge.java,dirsWithPackageInfo = Sets.newHashSet();,if (Sets != null ) dirsWithPackageInfo = Sets.newHashSet();
JavaGrammar.java,LexerlessGrammarBuilder b = LexerlessGrammarBuilder.create();,if (LexerlessGrammarBuilder != null ) LexerlessGrammarBuilder b = LexerlessGrammarBuilder.create();
JavaGrammar.java,String[] keywords = JavaKeyword.keywordValues();,if (JavaKeyword != null ) String[] keywords = JavaKeyword.keywordValues();
JavaGrammar.java,this.internalName = sb.toString();,if (sb != null ) this.internalName = sb.toString();
ClassDeclarationTest.java,LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();,if (JavaGrammar != null ) LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();
EnumConstantTest.java,LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();,if (JavaGrammar != null ) LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();
EnumDeclarationTest.java,LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();,if (JavaGrammar != null ) LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();
InterfaceDeclarationTest.java,LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();,if (JavaGrammar != null ) LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();
FormalParameterDeclsRestTest.java,LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();,if (JavaGrammar != null ) LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();
FormalParameterDeclsTest.java,LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();,if (JavaGrammar != null ) LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();
FormalParameterTest.java,LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();,if (JavaGrammar != null ) LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();
FormalParametersTest.java,LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();,if (JavaGrammar != null ) LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();
BlockStatementTest.java,LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();,if (JavaGrammar != null ) LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();
BlockStatementsTest.java,LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();,if (JavaGrammar != null ) LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();
BlockTest.java,LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();,if (JavaGrammar != null ) LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();
CatchClauseTest.java,LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();,if (JavaGrammar != null ) LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();
LocalVariableDeclarationStatementTest.java,LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();,if (JavaGrammar != null ) LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();
ResourceTest.java,LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();,if (JavaGrammar != null ) LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();
TryStatementTest.java,LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();,if (JavaGrammar != null ) LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();
VariableDeclaratorTest.java,LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();,if (JavaGrammar != null ) LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();
VariableDeclaratorsTest.java,LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();,if (JavaGrammar != null ) LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();
ModifiersTest.java,LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();,if (JavaGrammar != null ) LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();
TypeParameterTest.java,LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();,if (JavaGrammar != null ) LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();
TypeParametersTest.java,LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();,if (JavaGrammar != null ) LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();
TypeDeclarationTest.java,LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();,if (JavaGrammar != null ) LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();
AstNodeHacks.java,List<AstNode> result = Lists.newArrayList();,if (Lists != null ) List<AstNode> result = Lists.newArrayList();
ActionParser.java,List<Field> fields = Lists.newArrayList();,if (Lists != null ) List<Field> fields = Lists.newArrayList();
ActionParser.java,Set<String> foundFields = Sets.newHashSet();,if (Sets != null ) Set<String> foundFields = Sets.newHashSet();
ActionParser.java,List<AstNode> children = astNode.getChildren();,if (astNode != null ) List<AstNode> children = astNode.getChildren();
ActionParser.java,token = child.getToken();,if (child != null ) token = child.getToken();
ActionParser.java,fromIndex = child.getFromIndex();,if (child != null ) fromIndex = child.getFromIndex();
ActionParser.java,toIndex = child.getToIndex();,if (child != null ) toIndex = child.getToIndex();
ActionParser.java,AstNode node = tree.getAstNode();,if (tree != null ) AstNode node = tree.getAstNode();
ActionParser.java,for (node = node.getParent(); node != null; node = node.getParent()) {,if ({ != null ) for (node = node.getParent(); node != null; node = node.getParent()) {
ActionParser.java,Deque<JavaTree> toVisit = Lists.newLinkedList();,if (Lists != null ) Deque<JavaTree> toVisit = Lists.newLinkedList();
ActionParser.java,Set<JavaTree> visited = Sets.newHashSet();,if (Sets != null ) Set<JavaTree> visited = Sets.newHashSet();
ActionParser.java,JavaTree tree = toVisit.pop();,if (toVisit != null ) JavaTree tree = toVisit.pop();
ActionParser.java,Set<JavaTree> result = Sets.newHashSet();,if (Sets != null ) Set<JavaTree> result = Sets.newHashSet();
ActionParser.java,Iterator<Tree> it = tree.childrenIterator();,if (tree != null ) Iterator<Tree> it = tree.childrenIterator();
ActionParser.java,JavaTree child = (JavaTree) it.next();,if (it != null ) JavaTree child = (JavaTree) it.next();
ActionParser.java,Method method = grammarBuilderInterceptor.actionForRuleKey(astNode.getType());,if (grammarBuilderInterceptor != null ) Method method = grammarBuilderInterceptor.actionForRuleKey(astNode.getType());
ActionParser.java,List<AstNode> children = parent.getChildren();,if (parent != null ) List<AstNode> children = parent.getChildren();
ActionParser.java,List result = Lists.newArrayList();,if (Lists != null ) List result = Lists.newArrayList();
ActionParser.java,ImmutableList.Builder listBuilder = ImmutableList.builder();,if (ImmutableList != null ) ImmutableList.Builder listBuilder = ImmutableList.builder();
ActionParser.java,listBuilder = ImmutableList.builder();,if (ImmutableList != null ) listBuilder = ImmutableList.builder();
ActionParser.java,listBuilderRepeatedRuleKey = child.getType();,if (child != null ) listBuilderRepeatedRuleKey = child.getType();
ActionParser.java,listBuilder = ImmutableList.builder();,if (ImmutableList != null ) listBuilder = ImmutableList.builder();
ActionParser.java,listBuilder = ImmutableList.builder();,if (ImmutableList != null ) listBuilder = ImmutableList.builder();
ActionParser.java,option = Optional.absent();,if (Optional != null ) option = Optional.absent();
ActionParser.java,Class[] parameterTypes = method.getParameterTypes();,if (method != null ) Class[] parameterTypes = method.getParameterTypes();
ActionParser2Test.java,LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();,if (JavaGrammar != null ) LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();
PerfTest.java,LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();,if (JavaGrammar != null ) LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();
SyntaxHighlighterVisitor.java,target = astNode.getLastChild();,if (astNode != null ) target = astNode.getLastChild();
TreeFactory.java,result = operatorAndOperand.operand();,if (operatorAndOperand != null ) result = operatorAndOperand.operand();
TreeFactory.java,lastOperator = operatorAndOperand.operator();,if (operatorAndOperand != null ) lastOperator = operatorAndOperand.operator();
JavaTreeMakerTest.java,tree = (BinaryExpressionTree) tree.rightOperand();,if (tree != null ) tree = (BinaryExpressionTree) tree.rightOperand();
JavaTreeMakerTest.java,tree = (BinaryExpressionTree) tree.rightOperand();,if (tree != null ) tree = (BinaryExpressionTree) tree.rightOperand();
JavaTreeMakerTest.java,tree = (BinaryExpressionTree) tree.rightOperand();,if (tree != null ) tree = (BinaryExpressionTree) tree.rightOperand();
JavaTreeMakerTest.java,tree = (BinaryExpressionTree) tree.rightOperand();,if (tree != null ) tree = (BinaryExpressionTree) tree.rightOperand();
JavaTreeMakerTest.java,tree = (BinaryExpressionTree) tree.rightOperand();,if (tree != null ) tree = (BinaryExpressionTree) tree.rightOperand();
JavaTreeMakerTest.java,tree = (BinaryExpressionTree) tree.rightOperand();,if (tree != null ) tree = (BinaryExpressionTree) tree.rightOperand();
JavaTreeMakerTest.java,tree = (BinaryExpressionTree) tree.rightOperand();,if (tree != null ) tree = (BinaryExpressionTree) tree.rightOperand();
JavaTreeMakerTest.java,tree = (BinaryExpressionTree) tree.rightOperand();,if (tree != null ) tree = (BinaryExpressionTree) tree.rightOperand();
JavaTreeMakerTest.java,tree = (BinaryExpressionTree) tree.rightOperand();,if (tree != null ) tree = (BinaryExpressionTree) tree.rightOperand();
JavaTreeMakerTest.java,tree = (BinaryExpressionTree) tree.rightOperand();,if (tree != null ) tree = (BinaryExpressionTree) tree.rightOperand();
JavaTreeMakerTest.java,tree = (BinaryExpressionTree) tree.rightOperand();,if (tree != null ) tree = (BinaryExpressionTree) tree.rightOperand();
JavaTreeMakerTest.java,tree = (BinaryExpressionTree) tree.rightOperand();,if (tree != null ) tree = (BinaryExpressionTree) tree.rightOperand();
IndentationCheck.java,lastCheckedLine = node.getLastToken().getLine();,if (node != null ) lastCheckedLine = node.getLastToken().getLine();
TreeFactory.java,List<Tree> body = treeMaker.classBody(classBodyAstNode.get());,if (treeMaker != null ) List<Tree> body = treeMaker.classBody(classBodyAstNode.get());
JavaTreeMaker.java,AstNode classInitDeclarationNode = classBodyDeclaration.getFirstChild();,if (classBodyDeclaration != null ) AstNode classInitDeclarationNode = classBodyDeclaration.getFirstChild();
JavaTreeMaker.java,Tree type = (Tree) astNode.getFirstChild();,if (astNode != null ) Tree type = (Tree) astNode.getFirstChild();
JavaTreeMaker.java,AstNode identifierNode = constantDeclaratorRestNode.getPreviousAstNode();,if (constantDeclaratorRestNode != null ) AstNode identifierNode = constantDeclaratorRestNode.getPreviousAstNode();
EnumBodyDeclarationsTest.java,LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();,if (JavaGrammar != null ) LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();
EnumBodyTest.java,LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();,if (JavaGrammar != null ) LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();
EnumConstantsTest.java,LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();,if (JavaGrammar != null ) LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();
DefaultJavaResourceLocator.java,Set<Integer> ignoredLines = Sets.newHashSet(context.getNoSonarLines());,if (Sets != null ) Set<Integer> ignoredLines = Sets.newHashSet(context.getNoSonarLines());
TreeFactory.java,ExpressionTree selector = (ExpressionTree) selectorNode.getLastChild();,if (selectorNode != null ) ExpressionTree selector = (ExpressionTree) selectorNode.getLastChild();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
JaCoCoOverallSensor.java,boolean foundBothReports = reportUTs.exists() && reportITs.exists();,if (reportITs != null ) boolean foundBothReports = reportUTs.exists() && reportITs.exists();
TreeFactory.java,"result = new ParameterizedTypeTreeImpl(result, typeArguments.get());","if (typeArguments != null ) result = new ParameterizedTypeTreeImpl(result, typeArguments.get());"
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
ClassTypeListTest.java,LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();,if (JavaGrammar != null ) LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();
ClassTypeTest.java,LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();,if (JavaGrammar != null ) LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();
ModifiersTreeImpl.java,this.annotations = annotations.build();,if (annotations != null ) this.annotations = annotations.build();
ModifiersTreeImpl.java,this.modifiers = modifiers.build();,if (modifiers != null ) this.modifiers = modifiers.build();
ModifiersTreeImpl.java,modifierTrees = Lists.newArrayList();,if (Lists != null ) modifierTrees = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,JavaKeyword keyword = (JavaKeyword) astNode.getType();,if (astNode != null ) JavaKeyword keyword = (JavaKeyword) astNode.getType();
ChecksBridge.java,rule = checkFactory.getActiveRule(checkMessage.getCheck());,if (checkFactory != null ) rule = checkFactory.getActiveRule(checkMessage.getCheck());
JavaAstVisitor.java,SourceCode sourceCode = getContext().peekSourceCode();,if (getContext() != null ) SourceCode sourceCode = getContext().peekSourceCode();
JavaAstVisitor.java,SourceCode sourceCode = getContext().peekSourceCode();,if (getContext() != null ) SourceCode sourceCode = getContext().peekSourceCode();
DependenciesVisitor.java,dsmMapping = javaResourceLocator.getDsmMapping();,if (javaResourceLocator != null ) dsmMapping = javaResourceLocator.getDsmMapping();
BytecodeVisitorsTest.java,dsmMapping = javaResourceLocator.getDsmMapping();,if (javaResourceLocator != null ) dsmMapping = javaResourceLocator.getDsmMapping();
BytecodeVisitorsTest.java,Set<Resource> directories = dsmMapping.directories();,if (dsmMapping != null ) Set<Resource> directories = dsmMapping.directories();
DesignBridge.java,Collection<Resource> directories = dsmMapping.directories();,if (dsmMapping != null ) Collection<Resource> directories = dsmMapping.directories();
ResourceIndex.java,String filePath = squidFile.getName();,if (squidFile != null ) String filePath = squidFile.getName();
ResourceIndex.java,Resource sonarDirectory = context.getResource(sonarFile.getParent());,if (context != null ) Resource sonarDirectory = context.getResource(sonarFile.getParent());
DesignBridge.java,Collection<Resource> directories = DSMMapping.directories();,if (DSMMapping != null ) Collection<Resource> directories = DSMMapping.directories();
TreeFactory.java,AstNode identifierSuffixNode = identifierSuffix.get();,if (identifierSuffix != null ) AstNode identifierSuffixNode = identifierSuffix.get();
DependenciesVisitor.java,dsmMapping = javaResourceLocator.getDSMMapping();,if (javaResourceLocator != null ) dsmMapping = javaResourceLocator.getDSMMapping();
BytecodeVisitorsTest.java,dsmMapping = javaResourceLocator.getDSMMapping();,if (javaResourceLocator != null ) dsmMapping = javaResourceLocator.getDSMMapping();
AbstractDeprecatedChecker.java,Token token = node.getToken();,if (node != null ) Token token = node.getToken();
AbstractDeprecatedChecker.java,String comment = trivia.getToken().getOriginalValue();,if (trivia != null ) String comment = trivia.getToken().getOriginalValue();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
SuppressWarningsAnnotationUtils.java,AstNode modifiersCandidate = astNode.getPreviousAstNode();,if (astNode != null ) AstNode modifiersCandidate = astNode.getPreviousAstNode();
SuppressWarningsAnnotationUtilsTest.java,Constructor constructor = SuppressWarningsAnnotationUtils.class.getDeclaredConstructor();,if (SuppressWarningsAnnotationUtils != null ) Constructor constructor = SuppressWarningsAnnotationUtils.class.getDeclaredConstructor();
DefaultJavaResourceLocator.java,resourcesCache = Maps.newHashMap();,if (Maps != null ) resourcesCache = Maps.newHashMap();
DefaultJavaResourceLocator.java,sourceFileCache = Maps.newHashMap();,if (Maps != null ) sourceFileCache = Maps.newHashMap();
BytecodeVisitorsTest.java,index = squid.getIndex();,if (squid != null ) index = squid.getIndex();
DesignBridge.java,graph = squid.getGraph();,if (squid != null ) graph = squid.getGraph();
DesignBridge.java,Set<SourceCode> squidPackages = squidProject.getChildren();,if (squidProject != null ) Set<SourceCode> squidPackages = squidProject.getChildren();
DesignBridge.java,Set<Edge> feedbackEdges = cyclesAndFESSolver.getFeedbackEdgeSet();,if (cyclesAndFESSolver != null ) Set<Edge> feedbackEdges = cyclesAndFESSolver.getFeedbackEdgeSet();
DesignBridge.java,int tangles = cyclesAndFESSolver.getWeightOfFeedbackEdgeSet();,if (cyclesAndFESSolver != null ) int tangles = cyclesAndFESSolver.getWeightOfFeedbackEdgeSet();
DesignBridge.java,Set<SourceCode> squidFiles = squidPackage.getChildren();,if (squidPackage != null ) Set<SourceCode> squidFiles = squidPackage.getChildren();
DesignBridge.java,SourceCode fromPackage = (SourcePackage) feedbackEdge.getFrom();,if (feedbackEdge != null ) SourceCode fromPackage = (SourcePackage) feedbackEdge.getFrom();
DesignBridge.java,SourceCode toPackage = (SourcePackage) feedbackEdge.getTo();,if (feedbackEdge != null ) SourceCode toPackage = (SourcePackage) feedbackEdge.getTo();
DesignBridge.java,Resource fromFile = resourceIndex.get(subEdge.getFrom());,if (resourceIndex != null ) Resource fromFile = resourceIndex.get(subEdge.getFrom());
DesignBridge.java,Resource toFile = resourceIndex.get(subEdge.getTo());,if (resourceIndex != null ) Resource toFile = resourceIndex.get(subEdge.getTo());
DesignBridge.java,Resource from = resourceIndex.get(edge.getFrom());,if (resourceIndex != null ) Resource from = resourceIndex.get(edge.getFrom());
DesignBridge.java,Resource to = resourceIndex.get(edge.getTo());,if (resourceIndex != null ) Resource to = resourceIndex.get(edge.getTo());
MethodSignatureScanner.java,Tree returnType = methodTree.returnType();,if (methodTree != null ) Tree returnType = methodTree.returnType();
TreeFactory.java,int dims = variable.dims();,if (variable != null ) int dims = variable.dims();
JavaTreeMaker.java,"type = applyDim(type, variable.dims());","if (variable != null ) type = applyDim(type, variable.dims());"
JavaAstVisitor.java,SourceCode sourceCode = getContext().peekSourceCode();,if (getContext() != null ) SourceCode sourceCode = getContext().peekSourceCode();
MethodHelper.java,methodNameNode = astNode.getPreviousAstNode();,if (astNode != null ) methodNameNode = astNode.getPreviousAstNode();
MethodHelper.java,methodNameNode = astNode.getPreviousSibling();,if (astNode != null ) methodNameNode = astNode.getPreviousSibling();
MethodVisitor.java,int startLine = getDeclaration(astNode).getTokenLine();,if (getDeclaration(astNode) != null ) int startLine = getDeclaration(astNode).getTokenLine();
MethodVisitor.java,declaration = astNode.getParent().getParent();,if (astNode != null ) declaration = astNode.getParent().getParent();
MethodVisitor.java,declaration = astNode.getParent().getParent();,if (astNode != null ) declaration = astNode.getParent().getParent();
MethodVisitor.java,declaration = astNode.getParent();,if (astNode != null ) declaration = astNode.getParent();
MethodVisitor.java,declaration = astNode.getParent();,if (astNode != null ) declaration = astNode.getParent();
MethodHelperTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
MethodVisitorTest.java,List<SourceMethod> result = Lists.newArrayList();,if (Lists != null ) List<SourceMethod> result = Lists.newArrayList();
NoSonarFilterLoader.java,Set<Integer> ignoredLines = new HashSet<Integer>(squidFile.getNoSonarTagLines());,if (HashSet<Integer>(squidFile != null ) Set<Integer> ignoredLines = new HashSet<Integer>(squidFile.getNoSonarTagLines());
MethodHelper.java,final AstNode typeNode = getName().getPreviousAstNode();,if (getName() != null ) final AstNode typeNode = getName().getPreviousAstNode();
MethodVisitor.java,AstNode returnType = methodHelper.getReturnType();,if (methodHelper != null ) AstNode returnType = methodHelper.getReturnType();
MethodVisitor.java,List<Parameter> argumentTypes = Lists.newArrayList();,if (Lists != null ) List<Parameter> argumentTypes = Lists.newArrayList();
MethodVisitor.java,Tree type = variable.type();,if (variable != null ) Tree type = variable.type();
JavaTreeMaker.java,JavaKeyword keyword = (JavaKeyword) modifierAstNode.getType();,if (modifierAstNode != null ) JavaKeyword keyword = (JavaKeyword) modifierAstNode.getType();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,openParenToken = formalParameters.openParenToken();,if (formalParameters != null ) openParenToken = formalParameters.openParenToken();
TreeFactory.java,closeParenToken = formalParameters.closeParenToken();,if (formalParameters != null ) closeParenToken = formalParameters.closeParenToken();
TreeFactory.java,openParenToken = formalParameters.openParenToken();,if (formalParameters != null ) openParenToken = formalParameters.openParenToken();
TreeFactory.java,closeParenToken = formalParameters.closeParenToken();,if (formalParameters != null ) closeParenToken = formalParameters.closeParenToken();
TreeFactory.java,bodyTree = (ExpressionTree) body.getFirstChild();,if (body != null ) bodyTree = (ExpressionTree) body.getFirstChild();
TreeFactory.java,bodyTree = treeMaker.expression(body.getFirstChild());,if (treeMaker != null ) bodyTree = treeMaker.expression(body.getFirstChild());
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
JavaTreeMaker.java,astNode = astNode.getFirstChild();,if (astNode != null ) astNode = astNode.getFirstChild();
MismatchPackageDirectoryCheck.java,File javaFile = new File(context.getFileName());,if (File(context != null ) File javaFile = new File(context.getFileName());
SquidUserGuideTest.java,SourceCodeSearchEngine index = squid.getIndex();,if (squid != null ) SourceCodeSearchEngine index = squid.getIndex();
StrutsTest.java,SourceCodeSearchEngine index = squid.getIndex();,if (squid != null ) SourceCodeSearchEngine index = squid.getIndex();
DefaultJavaResourceLocator.java,JavaTree.CompilationUnitTreeImpl tree = (JavaTree.CompilationUnitTreeImpl) context.getTree();,if (context != null ) JavaTree.CompilationUnitTreeImpl tree = (JavaTree.CompilationUnitTreeImpl) context.getTree();
DefaultJavaResourceLocator.java,className = tree.simpleName().name();,if (tree != null ) className = tree.simpleName().name();
LeftCurlyBraceEndLineCheck.java,AstNode parent = node.getParent();,if (node != null ) AstNode parent = node.getParent();
TooManyStatementsPerLine_S00122_Check.java,AstNode statementNode = astNode.getFirstChild();,if (astNode != null ) AstNode statementNode = astNode.getFirstChild();
JavaTreeMaker.java,final AstNode statementNode = astNode.getFirstChild();,if (astNode != null ) final AstNode statementNode = astNode.getFirstChild();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,StatementExpressionListTreeImpl result = new StatementExpressionListTreeImpl(statements.build());,if (StatementExpressionListTreeImpl(statements != null ) StatementExpressionListTreeImpl result = new StatementExpressionListTreeImpl(statements.build());
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = Lists.newArrayList();,if (Lists != null ) List<AstNode> children = Lists.newArrayList();
TreeFactory.java,VariableTreeImpl resource = (VariableTreeImpl) rest.getFirstChild();,if (rest != null ) VariableTreeImpl resource = (VariableTreeImpl) rest.getFirstChild();
StatementExpressionListTreeImpl.java,LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();,if (JavaGrammar != null ) LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();
JavaTreeMaker.java,forInit = ImmutableList.of();,if (ImmutableList != null ) forInit = ImmutableList.of();
ForInitTest.java,LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();,if (JavaGrammar != null ) LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();
DefaultJavaResourceLocator.java,this.resourcesCache = Maps.newHashMap();,if (Maps != null ) this.resourcesCache = Maps.newHashMap();
JavaTreeMaker.java,AstNode typeNode = variableDeclaratorIdNode.getPreviousAstNode();,if (variableDeclaratorIdNode != null ) AstNode typeNode = variableDeclaratorIdNode.getPreviousAstNode();
JavaTreeMaker.java,AstNode referenceTypeNode = typeNode.getPreviousAstNode();,if (typeNode != null ) AstNode referenceTypeNode = typeNode.getPreviousAstNode();
JavaTreeMaker.java,referenceTypeNode = referenceTypeNode.getPreviousAstNode();,if (referenceTypeNode != null ) referenceTypeNode = referenceTypeNode.getPreviousAstNode();
MethodTreeImpl.java,Symbol.TypeSymbol enclosingClass = symbol.enclosingClass();,if (symbol != null ) Symbol.TypeSymbol enclosingClass = symbol.enclosingClass();
MethodTreeImpl.java,Type.ClassType superClassType = (Type.ClassType) enclosingClass.getSuperclass();,if (enclosingClass != null ) Type.ClassType superClassType = (Type.ClassType) enclosingClass.getSuperclass();
MethodTreeImpl.java,Symbol.TypeSymbol superClassSymbol = superClassType.getSymbol();,if (superClassType != null ) Symbol.TypeSymbol superClassSymbol = superClassType.getSymbol();
MethodTreeImpl.java,superClassType = (Type.ClassType) superClassSymbol.getSuperclass();,if (superClassSymbol != null ) superClassType = (Type.ClassType) superClassSymbol.getSuperclass();
BadMethodName_S00100_Check.java,Symbol.TypeSymbol enclosingClass = methodSymbol.enclosingClass();,if (methodSymbol != null ) Symbol.TypeSymbol enclosingClass = methodSymbol.enclosingClass();
BadMethodName_S00100_Check.java,IdentifierTree identifier = (IdentifierTree) annotationTree.annotationType();,if (annotationTree != null ) IdentifierTree identifier = (IdentifierTree) annotationTree.annotationType();
BadMethodName_S00100_Check.java,Type.ClassType superClassType = (Type.ClassType) enclosingClass.getSuperclass();,if (enclosingClass != null ) Type.ClassType superClassType = (Type.ClassType) enclosingClass.getSuperclass();
BadMethodName_S00100_Check.java,Symbol.TypeSymbol superClassSymbol = superClassType.getSymbol();,if (superClassType != null ) Symbol.TypeSymbol superClassSymbol = superClassType.getSymbol();
BadMethodName_S00100_Check.java,superClassType = (Type.ClassType) superClassSymbol.getSuperclass();,if (superClassSymbol != null ) superClassType = (Type.ClassType) superClassSymbol.getSuperclass();
RawException_S00112_Check.java,IdentifierTree identifier = (IdentifierTree) annotationTree.annotationType();,if (annotationTree != null ) IdentifierTree identifier = (IdentifierTree) annotationTree.annotationType();
ThrowsSeveralCheckedExceptionCheck.java,Symbol.TypeSymbol enclosingClass = methodSymbol.enclosingClass();,if (methodSymbol != null ) Symbol.TypeSymbol enclosingClass = methodSymbol.enclosingClass();
ThrowsSeveralCheckedExceptionCheck.java,Type.ClassType superClassType = (Type.ClassType) enclosingClass.getSuperclass();,if (enclosingClass != null ) Type.ClassType superClassType = (Type.ClassType) enclosingClass.getSuperclass();
ThrowsSeveralCheckedExceptionCheck.java,Symbol.TypeSymbol superClassSymbol = superClassType.getSymbol();,if (superClassType != null ) Symbol.TypeSymbol superClassSymbol = superClassType.getSymbol();
ThrowsSeveralCheckedExceptionCheck.java,superClassType = (Type.ClassType) superClassSymbol.getSuperclass();,if (superClassSymbol != null ) superClassType = (Type.ClassType) superClassSymbol.getSuperclass();
ThrowsSeveralCheckedExceptionCheck.java,IdentifierTree identifier = (IdentifierTree) annotationTree.annotationType();,if (annotationTree != null ) IdentifierTree identifier = (IdentifierTree) annotationTree.annotationType();
BadMethodName_S00100_Check.java,IdentifierTree identifier = (IdentifierTree)annotationTree.annotationType();,if ((IdentifierTree)annotationTree != null ) IdentifierTree identifier = (IdentifierTree)annotationTree.annotationType();
SecondPass.java,"Type returnType = resolveType(env, methodTree.returnType());","if (methodTree != null ) Type returnType = resolveType(env, methodTree.returnType());"
ThrowsSeveralCheckedExceptionCheck.java,List<AsmClass> thrownClasses = asmMethod.getThrows();,if (asmMethod != null ) List<AsmClass> thrownClasses = asmMethod.getThrows();
ThrowsSeveralCheckedExceptionCheck.java,AsmClass superClass = method.getParent().getSuperClass();,if (method != null ) AsmClass superClass = method.getParent().getSuperClass();
SecondPass.java,"Type type = resolveType(env, methodTree.returnType());","if (methodTree != null ) Type type = resolveType(env, methodTree.returnType());"
VisitorsBridge.java,List<File> projectClasspath = Lists.newArrayList();,if (Lists != null ) List<File> projectClasspath = Lists.newArrayList();
VisitorsBridge.java,projectClasspath = sonarComponents.getJavaClasspath();,if (sonarComponents != null ) projectClasspath = sonarComponents.getJavaClasspath();
ClassCouplingCheck.java,types = nesting.pop();,if (nesting != null ) types = nesting.pop();
SunPackagesUsedCheck.java,lastReportedLine = node.getTokenLine();,if (node != null ) lastReportedLine = node.getTokenLine();
UselessImportCheck.java,Iterator<String> it = pendingImports.iterator();,if (pendingImports != null ) Iterator<String> it = pendingImports.iterator();
UselessImportCheck.java,String pendingImport = it.next();,if (it != null ) String pendingImport = it.next();
TreeFactory.java,List<VariableTree> params = Lists.newArrayList();,if (Lists != null ) List<VariableTree> params = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = astNode.getChildren();,if (astNode != null ) List<AstNode> children = astNode.getChildren();
LinesOfCodeVisitor.java,SourceCode sourceCode = getContext().peekSourceCode();,if (getContext() != null ) SourceCode sourceCode = getContext().peekSourceCode();
CopyBasicMeasuresBridgeTest.java,List<Measure> measures = measureCaptor.getAllValues();,if (measureCaptor != null ) List<Measure> measures = measureCaptor.getAllValues();
CommentLinesVisitor.java,int line = trivia.getToken().getLine();,if (trivia != null ) int line = trivia.getToken().getLine();
CommentLinesVisitor.java,SourceCode sourceCode = getContext().peekSourceCode();,if (getContext() != null ) SourceCode sourceCode = getContext().peekSourceCode();
TooManyLinesOfCodeInFile_S00104_Check.java,int lines = token.getLine();,if (token != null ) int lines = token.getLine();
MethodVisitor.java,int startLine = PublicApiVisitor.getDeclaration(astNode).getTokenLine();,if (PublicApiVisitor != null ) int startLine = PublicApiVisitor.getDeclaration(astNode).getTokenLine();
PublicApiVisitor.java,SourceCode currentResource = getContext().peekSourceCode();,if (getContext() != null ) SourceCode currentResource = getContext().peekSourceCode();
PublicApiVisitor.java,String result = getApiJavadoc(declaration.getToken().getTrivia());,if (getApiJavadoc(declaration != null ) String result = getApiJavadoc(declaration.getToken().getTrivia());
PublicApiVisitor.java,String value = trivia.getToken().getOriginalValue();,if (trivia != null ) String value = trivia.getToken().getOriginalValue();
PublicApiVisitor.java,declaration = astNode.getParent().getParent();,if (astNode != null ) declaration = astNode.getParent().getParent();
PublicApiVisitor.java,declaration = astNode.getParent().getParent();,if (astNode != null ) declaration = astNode.getParent().getParent();
PublicApiVisitor.java,declaration = astNode.getParent();,if (astNode != null ) declaration = astNode.getParent();
PublicApiVisitor.java,declaration = astNode.getParent();,if (astNode != null ) declaration = astNode.getParent();
Measurer.java,int fileComplexity = complexityVisitorST.scan(context.getTree());,if (complexityVisitorST != null ) int fileComplexity = complexityVisitorST.scan(context.getTree());
AccessorVisitor.java,String methodName = method.getName().getTokenValue();,if (method != null ) String methodName = method.getName().getTokenValue();
AccessorVisitor.java,List<AstNode> statements = method.getStatements();,if (method != null ) List<AstNode> statements = method.getStatements();
AccessorVisitor.java,String methodName = method.getName().getTokenValue();,if (method != null ) String methodName = method.getName().getTokenValue();
AccessorVisitor.java,List<AstNode> statements = method.getStatements();,if (method != null ) List<AstNode> statements = method.getStatements();
AccessorVisitor.java,AstNode assignmentExpression = expression.getFirstChild();,if (expression != null ) AstNode assignmentExpression = expression.getFirstChild();
AccessorVisitor.java,String methodName = method.getName().getTokenValue();,if (method != null ) String methodName = method.getName().getTokenValue();
AccessorVisitor.java,List<AstNode> statements = method.getStatements();,if (method != null ) List<AstNode> statements = method.getStatements();
AccessorVisitor.java,AstNode typeNode = method.getReturnType();,if (method != null ) AstNode typeNode = method.getReturnType();
SquidUserGuideTest.java,Multiset<String> metrics = HashMultiset.create();,if (HashMultiset != null ) Multiset<String> metrics = HashMultiset.create();
StrutsTest.java,Multiset<String> metrics = HashMultiset.create();,if (HashMultiset != null ) Multiset<String> metrics = HashMultiset.create();
MethodHelper.java,methodNameNode = astNode.getPreviousAstNode();,if (astNode != null ) methodNameNode = astNode.getPreviousAstNode();
MethodHelper.java,methodNameNode = astNode.getPreviousSibling();,if (astNode != null ) methodNameNode = astNode.getPreviousSibling();
PublicApiVisitor.java,declaration = astNode.getParent().getParent();,if (astNode != null ) declaration = astNode.getParent().getParent();
UndocumentedApiCheck.java,String methodName = methodHelper.getName().getTokenOriginalValue();,if (methodHelper != null ) String methodName = methodHelper.getName().getTokenOriginalValue();
UndocumentedApiCheck.java,SourceCode sourceCode = getContext().peekSourceCode();,if (getContext() != null ) SourceCode sourceCode = getContext().peekSourceCode();
PublicApiCheckerTest.java,IdentifierTree className = classTrees.peek().simpleName();,if (classTrees != null ) IdentifierTree className = classTrees.peek().simpleName();
PublicApiCheckerTest.java,variableTrees = Lists.newArrayList();,if (Lists != null ) variableTrees = Lists.newArrayList();
PublicApiCheckerTest.java,methodTrees = Lists.newArrayList();,if (Lists != null ) methodTrees = Lists.newArrayList();
PublicApiCheckerTest.java,classTrees = Lists.newArrayList();,if (Lists != null ) classTrees = Lists.newArrayList();
JavaTreeMaker.java,AstNode elementValue = astNode.getFirstChild();,if (astNode != null ) AstNode elementValue = astNode.getFirstChild();
JavaTreeMaker.java,List<ExpressionTree> elementValues = Lists.newArrayList();,if (Lists != null ) List<ExpressionTree> elementValues = Lists.newArrayList();
LinesVisitor.java,SourceCode sourceCode = getContext().peekSourceCode();,if (getContext() != null ) SourceCode sourceCode = getContext().peekSourceCode();
StrutsTest.java,List<Measure> measures = captor.getAllValues();,if (captor != null ) List<Measure> measures = captor.getAllValues();
StrutsTest.java,functions += measure.getIntValue();,if (measure != null ) functions += measure.getIntValue();
HiddenFieldCheck.java,String identifier = variableTree.simpleName().name();,if (variableTree != null ) String identifier = variableTree.simpleName().name();
ForLoopCounterChangedCheck.java,IdentifierTree identifierTree = (IdentifierTree) tree.expression();,if (tree != null ) IdentifierTree identifierTree = (IdentifierTree) tree.expression();
ForLoopCounterChangedCheck.java,pendingLoopCounters = Collections.emptySet();,if (Collections != null ) pendingLoopCounters = Collections.emptySet();
ForLoopCounterChangedCheck.java,result = builder.build();,if (builder != null ) result = builder.build();
ForLoopCounterChangedCheck.java,result = Collections.emptySet();,if (Collections != null ) result = Collections.emptySet();
FunctionsBridgeTest.java,List<Measure> measures = measureCaptor.getAllValues();,if (measureCaptor != null ) List<Measure> measures = measureCaptor.getAllValues();
MethodVisitor.java,PrimitiveTypeTree primitve = (PrimitiveTypeTree) astNode.getFirstChild();,if (astNode != null ) PrimitiveTypeTree primitve = (PrimitiveTypeTree) astNode.getFirstChild();
TreeFactory.java,astNode = astNode.getFirstChild();,if (astNode != null ) astNode = astNode.getFirstChild();
JavaTreeMaker.java,ExpressionTree expression = expression(astNode.getLastChild());,if (expression(astNode != null ) ExpressionTree expression = expression(astNode.getLastChild());
JavaTreeMaker.java,ExpressionTree expression = expression(astNode.getLastChild());,if (expression(astNode != null ) ExpressionTree expression = expression(astNode.getLastChild());
JavaTreeMaker.java,ExpressionTree expression = expression(astNode.getLastChild());,if (expression(astNode != null ) ExpressionTree expression = expression(astNode.getLastChild());
TrailingCommentCheck.java,String comment = trivia.getToken().getValue();,if (trivia != null ) String comment = trivia.getToken().getValue();
TrailingCommentCheck.java,previousTokenLine = token.getLine();,if (token != null ) previousTokenLine = token.getLine();
CommentedOutCodeLineCheck.java,Token comment = trivia.getToken();,if (trivia != null ) Token comment = trivia.getToken();
NoSonarCheck.java,int line = trivia.getToken().getLine();,if (trivia != null ) int line = trivia.getToken().getLine();
CommentContainsPatternChecker.java,String comment = trivia.getToken().getOriginalValue();,if (trivia != null ) String comment = trivia.getToken().getOriginalValue();
JavaTreeMaker.java,ExpressionTree result = expression(astNode.getFirstChild());,if (expression(astNode != null ) ExpressionTree result = expression(astNode.getFirstChild());
AccessorVisitor.java,AstNode qualifiedIdentifierExpression = expression.getFirstChild().getFirstChild();,if (expression != null ) AstNode qualifiedIdentifierExpression = expression.getFirstChild().getFirstChild();
JavaTreeMaker.java,AstNode firstChildNode = astNode.getFirstChild();,if (astNode != null ) AstNode firstChildNode = astNode.getFirstChild();
ComplexityVisitorST.java,BlockTree block = methodTree.block();,if (methodTree != null ) BlockTree block = methodTree.block();
SubscriptionBaseVisitor.java,Tree next = iter.next();,if (iter != null ) Tree next = iter.next();
ActionParser.java,List<AstNode> result = Lists.newArrayList();,if (Lists != null ) List<AstNode> result = Lists.newArrayList();
TreeFactory.java,List<AstNode> children = astNode.getChildren();,if (astNode != null ) List<AstNode> children = astNode.getChildren();
TreeFactory.java,List<AstNode> pendingChildren = Lists.newArrayList();,if (Lists != null ) List<AstNode> pendingChildren = Lists.newArrayList();
JavaTreeMaker.java,ExpressionTree identifier = qualifiedIdentifier(firstChildNode.getFirstChild());,if (qualifiedIdentifier(firstChildNode != null ) ExpressionTree identifier = qualifiedIdentifier(firstChildNode.getFirstChild());
AccessorVisitor.java,AstNode qualifiedIdentifier = qualifiedIdentifierExpression.getFirstChild();,if (qualifiedIdentifierExpression != null ) AstNode qualifiedIdentifier = qualifiedIdentifierExpression.getFirstChild();
AccessorVisitor.java,AstNode varReturned = qualifiedIdentifier.getFirstChild();,if (qualifiedIdentifier != null ) AstNode varReturned = qualifiedIdentifier.getFirstChild();
InstanceofUsedOnExceptionCheck.java,AstNode leftOperand = node.getPreviousSibling();,if (node != null ) AstNode leftOperand = node.getPreviousSibling();
MethodOnlyCallsSuperCheck.java,String actual = sb.toString();,if (sb != null ) String actual = sb.toString();
SemanticModel.java,astNode = astNode.getParent();,if (astNode != null ) astNode = astNode.getParent();
HiddenFieldCheck.java,String identifier = node.getTokenOriginalValue();,if (node != null ) String identifier = node.getTokenOriginalValue();
JavaTreeMaker.java,AstNode typeNode = arrayCreatorRestNode.getPreviousSibling();,if (arrayCreatorRestNode != null ) AstNode typeNode = arrayCreatorRestNode.getPreviousSibling();
ActionParser.java,List<JavaTree> result = Lists.newArrayList();,if (Lists != null ) List<JavaTree> result = Lists.newArrayList();
InternalSyntaxToken.java,this.token = astNode.getToken();,if (astNode != null ) this.token = astNode.getToken();
ActionParser.java,Set<AstNode> stNodes = Sets.newHashSet();,if (Sets != null ) Set<AstNode> stNodes = Sets.newHashSet();
ActionParser.java,Set<AstNode> newSets = Sets.newHashSet();,if (Sets != null ) Set<AstNode> newSets = Sets.newHashSet();
JavaAstScanner.java,final Parser parser = JavaParser.createParser(conf.getCharset());,if (JavaParser != null ) final Parser parser = JavaParser.createParser(conf.getCharset());
CompilationUnitTest.java,LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();,if (JavaGrammar != null ) LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();
ActionGrammar.java,astNode = astNode.getFirstChild();,if (astNode != null ) astNode = astNode.getFirstChild();
ActionGrammar.java,JavaKeyword keyword = (JavaKeyword) astNode.getType();,if (astNode != null ) JavaKeyword keyword = (JavaKeyword) astNode.getType();
ActionGrammar.java,bodyTree = treeMaker.expression(body.getFirstChild());,if (treeMaker != null ) bodyTree = treeMaker.expression(body.getFirstChild());
ActionGrammar.java,List<VariableTree> params = Lists.newArrayList();,if (Lists != null ) List<VariableTree> params = Lists.newArrayList();
JavaTreeMaker.java,AstNode childNode = astNode.getFirstChild();,if (astNode != null ) AstNode childNode = astNode.getFirstChild();
JavaClasspath.java,elements = projectClasspath.getElements();,if (projectClasspath != null ) elements = projectClasspath.getElements();
BooleanLiteralCheck.java,String literal = getBooleanLiteral(tree.expression());,if (getBooleanLiteral(tree != null ) String literal = getBooleanLiteral(tree.expression());
BooleanLiteralCheck.java,String result = getBooleanLiteral(tree.leftOperand());,if (getBooleanLiteral(tree != null ) String result = getBooleanLiteral(tree.leftOperand());
BooleanLiteralCheck.java,result = getBooleanLiteral(tree.rightOperand());,if (getBooleanLiteral(tree != null ) result = getBooleanLiteral(tree.rightOperand());
VisitorsBridge.java,projectClasspath = sonarComponents.getProjectClasspath();,if (sonarComponents != null ) projectClasspath = sonarComponents.getProjectClasspath();
JavaTreeMaker.java,IdentifierTree identifier = identifier(firstChildNode.getFirstChild());,if (identifier(firstChildNode != null ) IdentifierTree identifier = identifier(firstChildNode.getFirstChild());
MissingCurlyBraces_S00121_Check.java,statement = elseClause.getNextSibling();,if (elseClause != null ) statement = elseClause.getNextSibling();
MethodNamedEqualsCheck.java,List<AstNode> parameters = methodHelper.getParameters();,if (methodHelper != null ) List<AstNode> parameters = methodHelper.getParameters();
IndentationCheck.java,lastCheckedLine = lastToken.getLine();,if (lastToken != null ) lastCheckedLine = lastToken.getLine();
IndentationCheck.java,lastNodeWithTokens = lastNodeWithTokens.getPreviousAstNode();,if (lastNodeWithTokens != null ) lastNodeWithTokens = lastNodeWithTokens.getPreviousAstNode();
NPEThrowCheck.java,Type.ClassType type = (Type.ClassType) tree.getType();,if (tree != null ) Type.ClassType type = (Type.ClassType) tree.getType();
AccessorVisitor.java,AstNode primary = expression.getFirstChild();,if (expression != null ) AstNode primary = expression.getFirstChild();
AccessorVisitor.java,AstNode qualifiedIdentifier = primary.getFirstChild();,if (primary != null ) AstNode qualifiedIdentifier = primary.getFirstChild();
SuppressWarningsAnnotationUtils.java,AstNode modifierNode = astNode.getPreviousAstNode();,if (astNode != null ) AstNode modifierNode = astNode.getPreviousAstNode();
SuppressWarningsAnnotationUtils.java,modifierNode = modifierNode.getPreviousAstNode();,if (modifierNode != null ) modifierNode = modifierNode.getPreviousAstNode();
SuppressWarningsAnnotationUtils.java,AstNode annotationNode = modifierNode.getFirstChild();,if (modifierNode != null ) AstNode annotationNode = modifierNode.getFirstChild();
JavaTreeMaker.java,astNode = astNode.getFirstChild();,if (astNode != null ) astNode = astNode.getFirstChild();
JavaTreeMaker.java,JavaKeyword keyword = (JavaKeyword) astNode.getType();,if (astNode != null ) JavaKeyword keyword = (JavaKeyword) astNode.getType();
JavaTreeMaker.java,AstNode referenceTypeNode  = typeNode.getPreviousAstNode();,if (typeNode != null ) AstNode referenceTypeNode  = typeNode.getPreviousAstNode();
JavaTreeMaker.java,List<CaseLabelTreeImpl> labels = Lists.newArrayList();,if (Lists != null ) List<CaseLabelTreeImpl> labels = Lists.newArrayList();
JavaTreeMaker.java,bodyTree = expression(body.getFirstChild());,if (expression(body != null ) bodyTree = expression(body.getFirstChild());
JavaTreeMaker.java,List<VariableTree> params = Lists.newArrayList();,if (Lists != null ) List<VariableTree> params = Lists.newArrayList();
ActionGrammarTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
CornerCasesTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
AnnotationTypeDeclarationTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
ClassDeclarationTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
MemberDeclTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
EnumBodyDeclarationsTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
EnumBodyTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
EnumConstantTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
EnumConstantsTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
EnumDeclarationTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
ExpressionTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
RelationalExpressionTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
SuperSuffixTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
InterfaceDeclarationTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
CharacterLiteralTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
FloatLiteralTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
IntegerLiteralTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
LiteralTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
StringLiteralTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
FormalParameterDeclsRestTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
FormalParameterDeclsTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
FormalParameterTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
FormalParametersTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
VariableDeclaratorIdTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
AssertStatementTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
BlockStatementTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
BlockStatementsTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
BlockTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
BreakStatementTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
CatchClauseTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
ContinueStatementTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
DoStatementTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
EmptyStatementTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
ExpressionStatementTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
FinallyTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
ForInitTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
ForStatementTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
ForUpdateTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
IfStatementTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
LabeledStatementTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
LocalVariableDeclarationStatementTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
ResourceTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
ReturnStatementTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
SwitchBlockStatementGroupTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
SwitchStatementTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
SynchronizedStatementTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
ThrowStatementTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
TryStatementTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
VariableDeclaratorTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
VariableDeclaratorsTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
WhileStatementTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
BoundTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
ClassTypeListTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
ClassTypeTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
ModifierTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
TypeArgumentTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
TypeArgumentsTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
TypeParameterTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
TypeParametersTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
TypeTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
CompilationUnitTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
ImportDeclarationTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
PackageDeclarationTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
TypeDeclarationTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
JavaTreeMakerTest.java,List<StatementTree> declarations = maker.block(astNode).body();,if (maker != null ) List<StatementTree> declarations = maker.block(astNode).body();
ExpressionVisitorTest.java,private LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();,if (JavaGrammar != null ) private LexerlessGrammarBuilder b = JavaGrammar.createGrammarBuilder();
AbstractAnalyzer.java,String vmClassName = data.getName();,if (data != null ) String vmClassName = data.getName();
AbstractAnalyzer.java,"String name = coverage.getPackageName() + ""/"" + coverage.getName();","if (coverage != null ) String name = coverage.getPackageName() + ""/"" + coverage.getName();"
ChecksBridge.java,Set<CheckMessage> messages = squidFile.getCheckMessages();,if (squidFile != null ) Set<CheckMessage> messages = squidFile.getCheckMessages();
CatchUsesExceptionWithContextCheck.java,String fullyQualifiedName = memberSelectExpressionTree.identifier().name();,if (memberSelectExpressionTree != null ) String fullyQualifiedName = memberSelectExpressionTree.identifier().name();
CatchUsesExceptionWithContextCheck.java,Tree mset = memberSelectExpressionTree.expression();,if (memberSelectExpressionTree != null ) Tree mset = memberSelectExpressionTree.expression();
UnitTestClassReport.java,durationMilliseconds += result.getDurationMilliseconds();,if (result != null ) durationMilliseconds += result.getDurationMilliseconds();
MismatchPackageDirectoryCheck.java,String packageName = concatenate(tree.packageName());,if (concatenate(tree != null ) String packageName = concatenate(tree.packageName());
MismatchPackageDirectoryCheck.java,File javaFile = new File(context.getFileName());,if (File(context != null ) File javaFile = new File(context.getFileName());
MismatchPackageDirectoryCheck.java,String dir = javaFile.getParent();,if (javaFile != null ) String dir = javaFile.getParent();
AbstractSurefireParser.java,UnitTestClassReport report = entry.getValue();,if (entry != null ) UnitTestClassReport report = entry.getValue();
AbstractSurefireParser.java,Resource resource = getUnitTestResource(entry.getKey());,if (getUnitTestResource(entry != null ) Resource resource = getUnitTestResource(entry.getKey());
AbstractSurefireParser.java,double testsCount = report.getTests() - report.getSkipped();,if (report != null ) double testsCount = report.getTests() - report.getSkipped();
UnitTestClassReportTest.java,String xml = report.toXml();,if (report != null ) String xml = report.toXml();
EqualsNotOverridenWithCompareToCheck.java,String name = method.simpleName().name();,if (method != null ) String name = method.simpleName().name();
EqualsNotOverridenWithCompareToCheck.java,String name = method.simpleName().name();,if (method != null ) String name = method.simpleName().name();
BadPackageName_S00120_Check.java,tree = mse.expression();,if (mse != null ) tree = mse.expression();
BadPackageName_S00120_Check.java,Iterator<String> itr = pieces.iterator();,if (pieces != null ) Iterator<String> itr = pieces.iterator();
CollapsibleIfCandidateCheck.java,AstNode grandParent = node.getParent().getParent();,if (node != null ) AstNode grandParent = node.getParent().getParent();
CollapsibleIfCandidateCheck.java,AstNode enclosingStatement = statement.getParent();,if (statement != null ) AstNode enclosingStatement = statement.getParent();
CompareObjectWithEqualsCheck.java,Tree returnType = tree.returnType();,if (tree != null ) Tree returnType = tree.returnType();
UnusedMethodParameterCheck.java,Tree returnType = tree.returnType();,if (tree != null ) Tree returnType = tree.returnType();
ProfilesTest.java,RulesProfile profile = definition.createProfile(ValidationMessages.create());,if (definition != null ) RulesProfile profile = definition.createProfile(ValidationMessages.create());
JavaSonarWayProfileTest.java,ValidationMessages validation = ValidationMessages.create();,if (ValidationMessages != null ) ValidationMessages validation = ValidationMessages.create();
ExpressionVisitor.java,AstNode opNode = astNode.getFirstChild().getNextSibling();,if (astNode != null ) AstNode opNode = astNode.getFirstChild().getNextSibling();
SemanticModelTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
FindbugsConfiguration.java,Collection<File> classFilesToAnalyze = javaResourceLocator.classFilesToAnalyze();,if (javaResourceLocator != null ) Collection<File> classFilesToAnalyze = javaResourceLocator.classFilesToAnalyze();
FindbugsConfiguration.java,List<File> result = Lists.newArrayList();,if (Lists != null ) List<File> result = Lists.newArrayList();
FindbugsExecutor.java,SecurityManager currentSecurityManager = System.getSecurityManager();,if (System != null ) SecurityManager currentSecurityManager = System.getSecurityManager();
FindbugsExecutor.java,ClassLoader initialClassLoader = Thread.currentThread().getContextClassLoader();,if (Thread != null ) ClassLoader initialClassLoader = Thread.currentThread().getContextClassLoader();
FindbugsExecutor.java,Locale initialLocale = Locale.getDefault();,if (Locale != null ) Locale initialLocale = Locale.getDefault();
FindbugsExecutor.java,ExecutorService executorService = Executors.newSingleThreadExecutor();,if (Executors != null ) ExecutorService executorService = Executors.newSingleThreadExecutor();
FindbugsExecutor.java,Project project = configuration.getFindbugsProject();,if (configuration != null ) Project project = configuration.getFindbugsProject();
FindbugsExecutor.java,File xmlReport = configuration.getTargetXMLReport();,if (configuration != null ) File xmlReport = configuration.getTargetXMLReport();
FindbugsExecutor.java,UserPreferences userPreferences = UserPreferences.createDefaultUserPreferences();,if (UserPreferences != null ) UserPreferences userPreferences = UserPreferences.createDefaultUserPreferences();
FindbugsExecutor.java,Integer integer = priorityNameToValueMap.get(configuration.getConfidenceLevel());,if (priorityNameToValueMap != null ) Integer integer = priorityNameToValueMap.get(configuration.getConfidenceLevel());
FindbugsExecutor.java,ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();,if (Thread != null ) ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
FindbugsExecutor.java,List<String> pluginJarPathList = Lists.newArrayList();,if (Lists != null ) List<String> pluginJarPathList = Lists.newArrayList();
FindbugsExecutor.java,URL url = urls.nextElement();,if (urls != null ) URL url = urls.nextElement();
FindbugsExecutor.java,List<Plugin> customPluginList = Lists.newArrayList();,if (Lists != null ) List<Plugin> customPluginList = Lists.newArrayList();
FindbugsProfileExporter.java,XStream xstream = FindBugsFilter.createXStream();,if (FindBugsFilter != null ) XStream xstream = FindBugsFilter.createXStream();
FindbugsProfileImporter.java,RulesProfile profile = RulesProfile.create();,if (RulesProfile != null ) RulesProfile profile = RulesProfile.create();
FindbugsProfileImporter.java,XStream xStream = FindBugsFilter.createXStream();,if (FindBugsFilter != null ) XStream xStream = FindBugsFilter.createXStream();
FindbugsProfileImporter.java,String sonarCateg = FindbugsCategory.findbugsToSonar(categoryLevel.getKey());,if (FindbugsCategory != null ) String sonarCateg = FindbugsCategory.findbugsToSonar(categoryLevel.getKey());
FindbugsRuleRepository.java,List<Rule> rules = Lists.newArrayList();,if (Lists != null ) List<Rule> rules = Lists.newArrayList();
FindbugsSensor.java,Collection<ReportedBug> collection = executor.execute();,if (executor != null ) Collection<ReportedBug> collection = executor.execute();
FindbugsSensor.java,String longMessage = bugInstance.getMessage();,if (bugInstance != null ) String longMessage = bugInstance.getMessage();
FindbugsSensor.java,String className = bugInstance.getClassName();,if (bugInstance != null ) String className = bugInstance.getClassName();
FindbugsSensor.java,int start = bugInstance.getStartLine();,if (bugInstance != null ) int start = bugInstance.getStartLine();
FindbugsXmlReportParser.java,findbugsXmlReportPath = findbugsXmlReport.getAbsolutePath();,if (findbugsXmlReport != null ) findbugsXmlReportPath = findbugsXmlReport.getAbsolutePath();
FindbugsXmlReportParser.java,List<XmlBugInstance> result = Lists.newArrayList();,if (Lists != null ) List<XmlBugInstance> result = Lists.newArrayList();
FindbugsXmlReportParser.java,SMInputFactory inf = new SMInputFactory(XMLInputFactory.newInstance());,if (SMInputFactory(XMLInputFactory != null ) SMInputFactory inf = new SMInputFactory(XMLInputFactory.newInstance());
FindbugsXmlReportParser.java,SMInputCursor cursor = inf.rootElementCursor(findbugsXmlReport).advance();,if (inf != null ) SMInputCursor cursor = inf.rootElementCursor(findbugsXmlReport).advance();
FindbugsXmlReportParser.java,SMInputCursor bugInstanceChildCursor = bugInstanceCursor.childElementCursor().advance();,if (bugInstanceCursor != null ) SMInputCursor bugInstanceChildCursor = bugInstanceCursor.childElementCursor().advance();
FindbugsXmlReportParser.java,String nodeName = bugInstanceChildCursor.getLocalName();,if (bugInstanceChildCursor != null ) String nodeName = bugInstanceChildCursor.getLocalName();
FindbugsXmlReportParser.java,xmlBugInstance.longMessage = bugInstanceChildCursor.collectDescendantText();,if (bugInstanceChildCursor != null ) xmlBugInstance.longMessage = bugInstanceChildCursor.collectDescendantText();
FindbugsXmlReportParser.java,xmlBugInstance.sourceLines = lines.build();,if (lines != null ) xmlBugInstance.sourceLines = lines.build();
ReportedBug.java,this.type = bugInstance.getType();,if (bugInstance != null ) this.type = bugInstance.getType();
ReportedBug.java,this.message = bugInstance.getMessageWithoutPrefix();,if (bugInstance != null ) this.message = bugInstance.getMessageWithoutPrefix();
ReportedBug.java,this.className = bugInstance.getPrimarySourceLineAnnotation().getClassName();,if (bugInstance != null ) this.className = bugInstance.getPrimarySourceLineAnnotation().getClassName();
ReportedBug.java,this.startLine = bugInstance.getPrimarySourceLineAnnotation().getStartLine();,if (bugInstance != null ) this.startLine = bugInstance.getPrimarySourceLineAnnotation().getStartLine();
FindBugsFilter.java,"String[] splitted = StringUtils.split(varToSplit, splitter.getSeparator());","if (splitter != null ) String[] splitted = StringUtils.split(varToSplit, splitter.getSeparator());"
FindbugsConfigurationTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
FindbugsConfigurationTest.java,Project findbugsProject = conf.getFindbugsProject();,if (conf != null ) Project findbugsProject = conf.getFindbugsProject();
FindbugsProfileExporterTest.java,RulesProfile profile = RulesProfile.create();,if (RulesProfile != null ) RulesProfile profile = RulesProfile.create();
FindbugsProfileExporterTest.java,RulesProfile profile = RulesProfile.create();,if (RulesProfile != null ) RulesProfile profile = RulesProfile.create();
FindbugsProfileExporterTest.java,List<Match> matches = filter.getMatchs();,if (filter != null ) List<Match> matches = filter.getMatchs();
FindbugsProfileExporterTest.java,String xml = findBugsFilter.toXml();,if (findBugsFilter != null ) String xml = findBugsFilter.toXml();
FindbugsProfileExporterTest.java,Rule rule = Rule.create();,if (Rule != null ) Rule rule = Rule.create();
FindbugsProfileExporterTest.java,Rule rule = Rule.create();,if (Rule != null ) Rule rule = Rule.create();
FindbugsProfileImporterTest.java,List<ActiveRule> results = profile.getActiveRules();,if (profile != null ) List<ActiveRule> results = profile.getActiveRules();
FindbugsProfileImporterTest.java,List<ActiveRule> results = profile.getActiveRules();,if (profile != null ) List<ActiveRule> results = profile.getActiveRules();
FindbugsProfileImporterTest.java,List<ActiveRule> results = profile.getActiveRules();,if (profile != null ) List<ActiveRule> results = profile.getActiveRules();
FindbugsProfileImporterTest.java,XStream xStream = FindBugsFilter.createXStream();,if (FindBugsFilter != null ) XStream xStream = FindBugsFilter.createXStream();
FindbugsProfileImporterTest.java,List<Match> matches = filter.getMatchs();,if (filter != null ) List<Match> matches = filter.getMatchs();
FindbugsProfileImporterTest.java,ValidationMessages messages = ValidationMessages.create();,if (ValidationMessages != null ) ValidationMessages messages = ValidationMessages.create();
FindbugsProfileImporterTest.java,List<ActiveRule> results = profile.getActiveRules();,if (profile != null ) List<ActiveRule> results = profile.getActiveRules();
FindbugsProfileImporterTest.java,ValidationMessages messages = ValidationMessages.create();,if (ValidationMessages != null ) ValidationMessages messages = ValidationMessages.create();
FindbugsProfileImporterTest.java,List<ActiveRule> results = profile.getActiveRules();,if (profile != null ) List<ActiveRule> results = profile.getActiveRules();
FindbugsProfileImporterTest.java,ValidationMessages messages = ValidationMessages.create();,if (ValidationMessages != null ) ValidationMessages messages = ValidationMessages.create();
FindbugsProfileImporterTest.java,List<ActiveRule> results = profile.getActiveRules();,if (profile != null ) List<ActiveRule> results = profile.getActiveRules();
FindbugsProfileImporterTest.java,ValidationMessages messages = ValidationMessages.create();,if (ValidationMessages != null ) ValidationMessages messages = ValidationMessages.create();
FindbugsProfileImporterTest.java,List<ActiveRule> results = profile.getActiveRules();,if (profile != null ) List<ActiveRule> results = profile.getActiveRules();
FindbugsRuleRepositoryTest.java,List<Rule> rules = repository.createRules();,if (repository != null ) List<Rule> rules = repository.createRules();
FindbugsTests.java,RulesProfile profile = RulesProfile.create();,if (RulesProfile != null ) RulesProfile profile = RulesProfile.create();
FindbugsXmlReportParserTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
FindbugsXmlReportParserTest.java,violations = xmlParser.getBugInstances();,if (xmlParser != null ) violations = xmlParser.getBugInstances();
FindbugsXmlReportParserTest.java,FindbugsXmlReportParser.XmlSourceLineAnnotation sourceLine = fbViolation.getPrimarySourceLine();,if (fbViolation != null ) FindbugsXmlReportParser.XmlSourceLineAnnotation sourceLine = fbViolation.getPrimarySourceLine();
FindbugsXmlReportParserTest.java,FindbugsXmlReportParser.XmlSourceLineAnnotation sourceLine = new FindbugsXmlReportParser.XmlSourceLineAnnotation();,if (FindbugsXmlReportParser != null ) FindbugsXmlReportParser.XmlSourceLineAnnotation sourceLine = new FindbugsXmlReportParser.XmlSourceLineAnnotation();
SonarWayWithFindbugsProfileTest.java,FindbugsProfileImporter importer = new FindbugsProfileImporter(FakeRuleFinder.create());,if (FindbugsProfileImporter(FakeRuleFinder != null ) FindbugsProfileImporter importer = new FindbugsProfileImporter(FakeRuleFinder.create());
SonarWayWithFindbugsProfileTest.java,ValidationMessages validation = ValidationMessages.create();,if (ValidationMessages != null ) ValidationMessages validation = ValidationMessages.create();
LabelsVisitor.java,LabeledStatementTree labelTree = labelTrees.get(label.name());,if (labelTrees != null ) LabeledStatementTree labelTree = labelTrees.get(label.name());
Type.java,"return symbol==null ? """" : symbol.toString();","if (symbol != null ) return symbol==null ? """" : symbol.toString();"
UndocumentedApiCheck.java,SourceCode currentResource = getContext().peekSourceCode();,if (getContext() != null ) SourceCode currentResource = getContext().peekSourceCode();
FirstPass.java,AstNode modifierNode = astNode.getFirstChild();,if (astNode != null ) AstNode modifierNode = astNode.getFirstChild();
FirstPass.java,AstNode modifierNode = astNode.getPreviousAstNode();,if (astNode != null ) AstNode modifierNode = astNode.getPreviousAstNode();
FirstPass.java,modifierNode = modifierNode.getPreviousAstNode();,if (modifierNode != null ) modifierNode = modifierNode.getPreviousAstNode();
FindbugsMavenInitializer.java,Configuration conf = project.getConfiguration();,if (project != null ) Configuration conf = project.getConfiguration();
DITVisitor.java,AsmClass superClass = asmClass.getSuperClass();,if (asmClass != null ) AsmClass superClass = asmClass.getSuperClass();
DITVisitor.java,superClass = superClass.getSuperClass();,if (superClass != null ) superClass = superClass.getSuperClass();
FirstPass.java,resolved = Collections.emptyList();,if (Collections != null ) resolved = Collections.emptyList();
FirstPass.java,resolved = Collections.emptyList();,if (Collections != null ) resolved = Collections.emptyList();
FirstPass.java,Tree typeToResolve = tree.qualifiedIdentifier();,if (tree != null ) Tree typeToResolve = tree.qualifiedIdentifier();
Resolve.java,owner = owner.owner();,if (owner != null ) owner = owner.owner();
FirstPass.java,"ImportVisitor importVisitor = new ImportVisitor(defaultPackage, tree.isStatic());","if (tree != null ) ImportVisitor importVisitor = new ImportVisitor(defaultPackage, tree.isStatic());"
JaCoCoSensor.java,boolean shouldExecute = report.exists() && report.isFile();,if (report != null ) boolean shouldExecute = report.exists() && report.isFile();
JaCoCoItSensor.java,boolean shouldExecute = report.exists() && report.isFile();,if (report != null ) boolean shouldExecute = report.exists() && report.isFile();
CatchUsesExceptionWithContextCheck.java,memberSelectExpressionTree = (MemberSelectExpressionTree) memberSelectExpressionTree.expression();,if (memberSelectExpressionTree != null ) memberSelectExpressionTree = (MemberSelectExpressionTree) memberSelectExpressionTree.expression();
CatchUsesExceptionWithContextCheck.java,IdentifierTree identifierTree = (IdentifierTree) memberSelectExpressionTree.expression();,if (memberSelectExpressionTree != null ) IdentifierTree identifierTree = (IdentifierTree) memberSelectExpressionTree.expression();
CatchUsesExceptionWithContextCheck.java,Iterator<CatchTree> it = invalidCatchesCheck.iterator();,if (invalidCatchesCheck != null ) Iterator<CatchTree> it = invalidCatchesCheck.iterator();
CatchUsesExceptionWithContextCheck.java,CatchTree tree = it.next();,if (it != null ) CatchTree tree = it.next();
RedundantThrowsDeclarationCheck.java,Set<String> reportedExceptions = Sets.newHashSet();,if (Sets != null ) Set<String> reportedExceptions = Sets.newHashSet();
RedundantThrowsDeclarationCheck.java,List<AsmClass> thrownClasses = asmMethod.getThrows();,if (asmMethod != null ) List<AsmClass> thrownClasses = asmMethod.getThrows();
RedundantThrowsDeclarationCheck.java,String thrownClassName = thrownClass.getDisplayName();,if (thrownClass != null ) String thrownClassName = thrownClass.getDisplayName();
StringLiteralDuplicatedCheck.java,Integer occurences = literalOccurences.getValue();,if (literalOccurences != null ) Integer occurences = literalOccurences.getValue();
StringLiteralDuplicatedCheck.java,String literal = literalOccurences.getKey();,if (literalOccurences != null ) String literal = literalOccurences.getKey();
FirstPass.java,AstNode identifierNode = methodHelper.getName();,if (methodHelper != null ) AstNode identifierNode = methodHelper.getName();
FirstPass.java,identifierNode = astNode.getPreviousAstNode();,if (astNode != null ) identifierNode = astNode.getPreviousAstNode();
FirstPass.java,String name = identifierNode.getTokenValue();,if (identifierNode != null ) String name = identifierNode.getTokenValue();
SecondPass.java,String name = tree.identifier().name();,if (tree != null ) String name = tree.identifier().name();
SecondPass.java,FQV fqv = new FQV(env.dup());,if (FQV(env != null ) FQV fqv = new FQV(env.dup());
SonarSymbolTableVisitor.java,SemanticModel semanticModel = semanticModelProvider.semanticModel();,if (semanticModelProvider != null ) SemanticModel semanticModel = semanticModelProvider.semanticModel();
SonarSymbolTableVisitor.java,Symbolizable symbolizable = sonarComponents.symbolizableFor(getContext().getFile());,if (sonarComponents != null ) Symbolizable symbolizable = sonarComponents.symbolizableFor(getContext().getFile());
SonarSymbolTableVisitor.java,Symbolizable.SymbolTableBuilder symbolTableBuilder = symbolizable.newSymbolTableBuilder();,if (symbolizable != null ) Symbolizable.SymbolTableBuilder symbolTableBuilder = symbolizable.newSymbolTableBuilder();
SonarSymbolTableVisitor.java,Tree declaration = entry.getKey();,if (entry != null ) Tree declaration = entry.getKey();
LoggersDeclarationCheck.java,boolean hasValidLoggerName = isValidLoggerName(tree.simpleName());,if (isValidLoggerName(tree != null ) boolean hasValidLoggerName = isValidLoggerName(tree.simpleName());
FirstPass.java,String name = tree.simpleName();,if (tree != null ) String name = tree.simpleName();
SonarSymbolTableVisitor.java,AstNode declaration = entry.getKey();,if (entry != null ) AstNode declaration = entry.getKey();
LabelsVisitor.java,String label = tree.label();,if (tree != null ) String label = tree.label();
LabelsVisitor.java,String label = tree.label();,if (tree != null ) String label = tree.label();
Result.java,Token token = usage.getToken();,if (usage != null ) Token token = usage.getToken();
SecondPass.java,AstNode astNode = semanticModel.getAstNode(symbol).getParent();,if (semanticModel != null ) AstNode astNode = semanticModel.getAstNode(symbol).getParent();
SecondPass.java,AstNode typeNode = identifierNode.getPreviousAstNode();,if (identifierNode != null ) AstNode typeNode = identifierNode.getPreviousAstNode();
SecondPass.java,typeNode = identifierNode.getParent().getPreviousAstNode();,if (identifierNode != null ) typeNode = identifierNode.getParent().getPreviousAstNode();
SecondPass.java,typeNode = typeNode.getPreviousAstNode();,if (typeNode != null ) typeNode = typeNode.getPreviousAstNode();
SecondPass.java,typeNode = typeNode.getPreviousAstNode();,if (typeNode != null ) typeNode = typeNode.getPreviousAstNode();
SecondPass.java,typeNode = identifierNode.getPreviousAstNode();,if (identifierNode != null ) typeNode = identifierNode.getPreviousAstNode();
SecondPass.java,env = env.dup();,if (env != null ) env = env.dup();
SecondPass.java,String name = identifierNode.getTokenValue();,if (identifierNode != null ) String name = identifierNode.getTokenValue();
FirstPass.java,String name = identifierNode.getTokenValue();,if (identifierNode != null ) String name = identifierNode.getTokenValue();
FirstPass.java,Resolve.Env classEnv = env.dup();,if (env != null ) Resolve.Env classEnv = env.dup();
FirstPass.java,Resolve.Env blockEnv = env.dup();,if (env != null ) Resolve.Env blockEnv = env.dup();
FirstPass.java,Resolve.Env forEnv = env.dup();,if (env != null ) Resolve.Env forEnv = env.dup();
ExpressionVisitor.java,Type type = getType(tree.expression());,if (getType(tree != null ) Type type = getType(tree.expression());
ExpressionVisitor.java,AstNode grandChild = astNode.getFirstChild();,if (astNode != null ) AstNode grandChild = astNode.getFirstChild();
ExpressionVisitor.java,astNode = astNode.getFirstChild();,if (astNode != null ) astNode = astNode.getFirstChild();
ExpressionVisitor.java,Type result = typesOfLiterals.get(astNode.getType());,if (typesOfLiterals != null ) Type result = typesOfLiterals.get(astNode.getType());
ExpressionVisitor.java,AstNode firstChildNode = astNode.getFirstChild();,if (astNode != null ) AstNode firstChildNode = astNode.getFirstChild();
ExpressionVisitor.java,AstNode firstChildNode = astNode.getFirstChild();,if (astNode != null ) AstNode firstChildNode = astNode.getFirstChild();
ExpressionVisitor.java,AstNode firstChildNode = astNode.getFirstChild();,if (astNode != null ) AstNode firstChildNode = astNode.getFirstChild();
ExpressionVisitor.java,result = getType(firstChildNode.getNextSibling());,if (getType(firstChildNode != null ) result = getType(firstChildNode.getNextSibling());
ExpressionVisitor.java,Type left = getType(astNode.getFirstChild());,if (getType(astNode != null ) Type left = getType(astNode.getFirstChild());
ExpressionVisitor.java,final AstNode identifierNode = qualifiedIdentifierNode.getLastChild();,if (qualifiedIdentifierNode != null ) final AstNode identifierNode = qualifiedIdentifierNode.getLastChild();
ExpressionVisitor.java,String name = identifierNode.getTokenValue();,if (identifierNode != null ) String name = identifierNode.getTokenValue();
ExpressionVisitor.java,env = env.dup();,if (env != null ) env = env.dup();
ExpressionVisitor.java,String name = identifierNode.getTokenValue();,if (identifierNode != null ) String name = identifierNode.getTokenValue();
LabelsVisitor.java,String label = identifier.getTokenValue();,if (identifier != null ) String label = identifier.getTokenValue();
JaCoCoMavenPluginHandler.java,String destfilePath = configuration.getReportPath();,if (configuration != null ) String destfilePath = configuration.getReportPath();
JaCoCoMavenPluginHandler.java,String argument = configuration.getJvmArgument();,if (configuration != null ) String argument = configuration.getJvmArgument();
ResourceIndex.java,Resource sonarDirectory = sonarFile.getParent();,if (sonarFile != null ) Resource sonarDirectory = sonarFile.getParent();
ExpressionVisitor.java,result = getType(astNode.getFirstChild().getNextSibling());,if (getType(astNode != null ) result = getType(astNode.getFirstChild().getNextSibling());
ReturnEmptyArrayyNotNullCheck.java,AstNode result = node.getParent();,if (node != null ) AstNode result = node.getParent();
ReturnEmptyArrayyNotNullCheck.java,result = result.getParent();,if (result != null ) result = result.getParent();
ThrowsFromFinallyCheck.java,AstNode result = node.getParent();,if (node != null ) AstNode result = node.getParent();
ThrowsFromFinallyCheck.java,result = result.getParent();,if (result != null ) result = result.getParent();
JavaTreeMaker.java,AstNode child = astNode.getFirstChild();,if (astNode != null ) AstNode child = astNode.getFirstChild();
ReferenceTypeTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
ChecksBridge.java,ActiveRule rule = checkFactory.getActiveRule(checkMessage.getCheck());,if (checkFactory != null ) ActiveRule rule = checkFactory.getActiveRule(checkMessage.getCheck());
OldSquidUserGuideTest.java,project = squid.aggregate();,if (squid != null ) project = squid.aggregate();
StrutsOldTest.java,project = squid.aggregate();,if (squid != null ) project = squid.aggregate();
JavaTreeMaker.java,astNode = astNode.getFirstChild();,if (astNode != null ) astNode = astNode.getFirstChild();
RawException_S00112_Check.java,AstNode qualifiedIdentifierList = node.getNextSibling();,if (node != null ) AstNode qualifiedIdentifierList = node.getNextSibling();
ResourceIndex.java,JavaPackage sonarPackage = SquidUtils.convertJavaPackageKeyFromSquidFormat(squidPackage.getKey());,if (SquidUtils != null ) JavaPackage sonarPackage = SquidUtils.convertJavaPackageKeyFromSquidFormat(squidPackage.getKey());
FileLinesVisitor.java,JavaFile javaFile = SquidUtils.convertJavaFileKeyFromSquidFormat(file.getKey());,if (SquidUtils != null ) JavaFile javaFile = SquidUtils.convertJavaFileKeyFromSquidFormat(file.getKey());
SonarSymbolTableVisitor.java,JavaFile sonarFile = SquidUtils.convertJavaFileKeyFromSquidFormat(peekSourceFile().getKey());,if (SquidUtils != null ) JavaFile sonarFile = SquidUtils.convertJavaFileKeyFromSquidFormat(peekSourceFile().getKey());
SyntaxHighlighterVisitor.java,JavaFile sonarFile = SquidUtils.convertJavaFileKeyFromSquidFormat(peekSourceFile().getKey());,if (SquidUtils != null ) JavaFile sonarFile = SquidUtils.convertJavaFileKeyFromSquidFormat(peekSourceFile().getKey());
VisitorsBridge.java,JavaFile sonarFile = SquidUtils.convertJavaFileKeyFromSquidFormat(sourceFile.getKey());,if (SquidUtils != null ) JavaFile sonarFile = SquidUtils.convertJavaFileKeyFromSquidFormat(sourceFile.getKey());
ResourceIndex.java,JavaFile sonarFile = SquidUtils.convertJavaFileKeyFromSquidFormat(squidFile.getKey());,if (SquidUtils != null ) JavaFile sonarFile = SquidUtils.convertJavaFileKeyFromSquidFormat(squidFile.getKey());
JavaSourceImporterTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
UselessImportCheck.java,Iterator<String> it = pendingImports.iterator();,if (pendingImports != null ) Iterator<String> it = pendingImports.iterator();
UselessImportCheck.java,String pendingImport = it.next();,if (it != null ) String pendingImport = it.next();
UselessImportCheck.java,Iterator<String> it = pendingImports.iterator();,if (pendingImports != null ) Iterator<String> it = pendingImports.iterator();
UselessImportCheck.java,String pendingImport = it.next();,if (it != null ) String pendingImport = it.next();
FunctionComplexityDistributionBuilder.java,JavaMethod javaMethod = (JavaMethod) childContext.getResource();,if (childContext != null ) JavaMethod javaMethod = (JavaMethod) childContext.getResource();
DITVisitor.java,AsmClass superClass = asmClass.getSuperClass();,if (asmClass != null ) AsmClass superClass = asmClass.getSuperClass();
DITVisitor.java,superClass = superClass.getSuperClass();,if (superClass != null ) superClass = superClass.getSuperClass();
RFCVisitor.java,rfc += distinctCallToExternalMethods.size();,if (distinctCallToExternalMethods != null ) rfc += distinctCallToExternalMethods.size();
LCOM4Visitor.java,AsmResource toResource = getAccessedFieldOrMethod(edge.getTo());,if (getAccessedFieldOrMethod(edge != null ) AsmResource toResource = getAccessedFieldOrMethod(edge.getTo());
LCOM4Visitor.java,Set<AsmResource> block = iterator.next();,if (iterator != null ) Set<AsmResource> block = iterator.next();
Lcom4BlocksBridge.java,List<AsmResource> result = Lists.newArrayList();,if (Lists != null ) List<AsmResource> result = Lists.newArrayList();
JavaSourceImporterTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
JavaSquidSensor.java,Charset charset = project.getFileSystem().getSourceCharset();,if (project != null ) Charset charset = project.getFileSystem().getSourceCharset();
IndentationCheck.java,List<Token> tokens = Lists.newArrayList();,if (Lists != null ) List<Token> tokens = Lists.newArrayList();
PmdExecutor.java,this.projectClassloader = classpath.getClassloader();,if (classpath != null ) this.projectClassloader = classpath.getClassloader();
PmdExecutor.java,ClassLoader initialClassLoader = Thread.currentThread().getContextClassLoader();,if (Thread != null ) ClassLoader initialClassLoader = Thread.currentThread().getContextClassLoader();
PmdExecutor.java,Charset encoding = projectFileSystem.getSourceCharset();,if (projectFileSystem != null ) Charset encoding = projectFileSystem.getSourceCharset();
PmdExecutor.java,rulesInput = new ByteArrayInputStream(rulesXml.getBytes());,if (ByteArrayInputStream(rulesXml != null ) rulesInput = new ByteArrayInputStream(rulesXml.getBytes());
PmdProfileExporter.java,String configKey = activeRule.getRule().getConfigKey();,if (activeRule != null ) String configKey = activeRule.getRule().getConfigKey();
PmdProfileExporter.java,XMLOutputter serializer = new XMLOutputter(Format.getPrettyFormat());,if (XMLOutputter(Format != null ) XMLOutputter serializer = new XMLOutputter(Format.getPrettyFormat());
PmdProfileImporter.java,RulesProfile profile = RulesProfile.create();,if (RulesProfile != null ) RulesProfile profile = RulesProfile.create();
PmdProfileImporter.java,Element eltResultset = dom.getRootElement();,if (dom != null ) Element eltResultset = dom.getRootElement();
PmdProfileImporter.java,Namespace namespace = eltResultset.getNamespace();,if (eltResultset != null ) Namespace namespace = eltResultset.getNamespace();
PmdRuleRepository.java,List<Rule> rules = Lists.newArrayList();,if (Lists != null ) List<Rule> rules = Lists.newArrayList();
PmdSensor.java,Report report = executor.execute();,if (executor != null ) Report report = executor.execute();
PmdSensor.java,IRuleViolation pmdViolation = violations.next();,if (violations != null ) IRuleViolation pmdViolation = violations.next();
PmdTemplate.java,File file = inputFile.getFile();,if (inputFile != null ) File file = inputFile.getFile();
PmdTemplate.java,inputStream = inputFile.getInputStream();,if (inputFile != null ) inputStream = inputFile.getInputStream();
PmdViolationToRuleViolation.java,int lineId = pmdViolation.getBeginLine();,if (pmdViolation != null ) int lineId = pmdViolation.getBeginLine();
PmdViolationToRuleViolation.java,String message = pmdViolation.getDescription();,if (pmdViolation != null ) String message = pmdViolation.getDescription();
PmdViolationToRuleViolation.java,String ruleKey = violation.getRule().getName();,if (violation != null ) String ruleKey = violation.getRule().getName();
PmdConfigurationTest.java,public ExpectedException expectedException = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException expectedException = ExpectedException.none();
PmdConfigurationTest.java,File targetXMLReport = configuration.getTargetXMLReport();,if (configuration != null ) File targetXMLReport = configuration.getTargetXMLReport();
PmdConfigurationTest.java,File targetXMLReport = configuration.getTargetXMLReport();,if (configuration != null ) File targetXMLReport = configuration.getTargetXMLReport();
PmdExecutorTest.java,Report report = pmdExecutor.execute();,if (pmdExecutor != null ) Report report = pmdExecutor.execute();
PmdExecutorTest.java,Report report = pmdExecutor.execute();,if (pmdExecutor != null ) Report report = pmdExecutor.execute();
PmdProfileExporterTest.java,RulesProfile profile = RulesProfile.create();,if (RulesProfile != null ) RulesProfile profile = RulesProfile.create();
PmdProfileExporterTest.java,RuleFinder ruleFinder = createRuleFinder(pmdRuleRepository.createRules());,if (createRuleFinder(pmdRuleRepository != null ) RuleFinder ruleFinder = createRuleFinder(pmdRuleRepository.createRules());
PmdProfileImporterTest.java,messages = ValidationMessages.create();,if (ValidationMessages != null ) messages = ValidationMessages.create();
PmdProfilesTest.java,ValidationMessages validation = ValidationMessages.create();,if (ValidationMessages != null ) ValidationMessages validation = ValidationMessages.create();
PmdRuleRepositoryTest.java,List<Rule> rules = repository.createRules();,if (repository != null ) List<Rule> rules = repository.createRules();
PmdRuleRepositoryTest.java,List<Rule> rules = repository.createRules();,if (repository != null ) List<Rule> rules = repository.createRules();
PmdRuleRepositoryTest.java,List<Rule> rules = repository.createRules();,if (repository != null ) List<Rule> rules = repository.createRules();
PmdSensorTest.java,public ExpectedException exception = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException exception = ExpectedException.none();
PmdSensorTest.java,String toString = pmdSensor.toString();,if (pmdSensor != null ) String toString = pmdSensor.toString();
PmdUnitTestsRuleRepositoryTest.java,List<Rule> rules = repository.createRules();,if (repository != null ) List<Rule> rules = repository.createRules();
CheckstyleAuditListener.java,String absoluteFilename = event.getFileName();,if (event != null ) String absoluteFilename = event.getFileName();
CheckstyleAuditListener.java,key = event.getModuleId();,if (event != null ) key = event.getModuleId();
CheckstyleAuditListener.java,key = event.getSourceName();,if (event != null ) key = event.getSourceName();
CheckstyleAuditListener.java,int line = event.getLine();,if (event != null ) int line = event.getLine();
CheckstyleConfiguration.java,Charset charset = fileSystem.getSourceCharset();,if (fileSystem != null ) Charset charset = fileSystem.getSourceCharset();
CheckstyleExecutor.java,this.projectClassloader = classpath.getClassloader();,if (classpath != null ) this.projectClassloader = classpath.getClassloader();
CheckstyleExecutor.java,ClassLoader initialClassLoader = Thread.currentThread().getContextClassLoader();,if (Thread != null ) ClassLoader initialClassLoader = Thread.currentThread().getContextClassLoader();
CheckstyleExecutor.java,Locale initialLocale = Locale.getDefault();,if (Locale != null ) Locale initialLocale = Locale.getDefault();
CheckstyleExecutor.java,File xmlReport = configuration.getTargetXMLReport();,if (configuration != null ) File xmlReport = configuration.getTargetXMLReport();
CheckstyleProfileExporter.java,String value = activeRule.getParameter(ruleParam.getKey());,if (activeRule != null ) String value = activeRule.getParameter(ruleParam.getKey());
CheckstyleProfileImporter.java,List<Module> modules = Lists.newArrayList();,if (Lists != null ) List<Module> modules = Lists.newArrayList();
CheckstyleProfileImporter.java,SMInputCursor cursor = parentCursor.childElementCursor();,if (parentCursor != null ) SMInputCursor cursor = parentCursor.childElementCursor();
CheckstyleProfileImporter.java,String nodeName = cursor.getLocalName();,if (cursor != null ) String nodeName = cursor.getLocalName();
CheckstyleProfileImporter.java,RulesProfile profile = RulesProfile.create();,if (RulesProfile != null ) RulesProfile profile = RulesProfile.create();
CheckstyleProfileImporter.java,XMLInputFactory xmlFactory = XMLInputFactory.newInstance();,if (XMLInputFactory != null ) XMLInputFactory xmlFactory = XMLInputFactory.newInstance();
CheckstyleRuleRepository.java,List<Rule> rules = Lists.newArrayList();,if (Lists != null ) List<Rule> rules = Lists.newArrayList();
CheckstyleConfigurationTest.java,File xmlFile = configuration.getXMLDefinitionFile();,if (configuration != null ) File xmlFile = configuration.getXMLDefinitionFile();
CheckstyleExecutorTest.java,AuditEvent event = captor.getValue();,if (captor != null ) AuditEvent event = captor.getValue();
CheckstyleExecutorTest.java,Locale initialLocale = Locale.getDefault();,if (Locale != null ) Locale initialLocale = Locale.getDefault();
CheckstyleProfileImporterTest.java,messages = ValidationMessages.create();,if (ValidationMessages != null ) messages = ValidationMessages.create();
CheckstyleRuleRepositoryTest.java,List<Rule> rules = repository.createRules();,if (repository != null ) List<Rule> rules = repository.createRules();
CheckstyleExecutor.java,Locale locale = configuration.getLocale();,if (configuration != null ) Locale locale = configuration.getLocale();
SynchronizedClassUsageCheck.java,lastReportedLine = node.getTokenLine();,if (node != null ) lastReportedLine = node.getTokenLine();
SynchronizedClassUsageCheck.java,className = node.getTokenOriginalValue();,if (node != null ) className = node.getTokenOriginalValue();
SynchronizedClassUsageCheck.java,AstNode result = node.getParent();,if (node != null ) AstNode result = node.getParent();
SynchronizedClassUsageCheck.java,result = result.getParent();,if (result != null ) result = result.getParent();
EmptyMethodsCheck.java,modifier = modifier.getPreviousAstNode();,if (modifier != null ) modifier = modifier.getPreviousAstNode();
JavaTreeMaker.java,JavaKeyword keyword = (JavaKeyword) modifierAstNode.getType();,if (modifierAstNode != null ) JavaKeyword keyword = (JavaKeyword) modifierAstNode.getType();
EmptyMethodsCheck.java,AstNode result = node.getParent();,if (node != null ) AstNode result = node.getParent();
EmptyMethodsCheck.java,result = result.getParent();,if (result != null ) result = result.getParent();
CatchUsesExceptionWithContextCheck.java,Tree exceptionType = tree.parameter().type();,if (tree != null ) Tree exceptionType = tree.parameter().type();
CatchUsesExceptionWithContextCheck.java,ExpressionTree expr = tree.expression();,if (tree != null ) ExpressionTree expr = tree.expression();
CatchUsesExceptionWithContextCheck.java,boolean foundCorrectUsage = foundCorrectUsages.pop();,if (foundCorrectUsages != null ) boolean foundCorrectUsage = foundCorrectUsages.pop();
CatchUsesExceptionWithContextCheck.java,AstNode nextSibling = node.getNextSibling();,if (node != null ) AstNode nextSibling = node.getNextSibling();
CatchOfThrowableOrErrorCheck.java,String caughtException = qualifiedIdentifier.getTokenOriginalValue();,if (qualifiedIdentifier != null ) String caughtException = qualifiedIdentifier.getTokenOriginalValue();
UnusedPrivateFieldCheck.java,SemanticModel semanticModel = (SemanticModel) context.getSemanticModel();,if (context != null ) SemanticModel semanticModel = (SemanticModel) context.getSemanticModel();
FindbugsConfiguration.java,Set<String> binaryDirPaths = Sets.newHashSet();,if (Sets != null ) Set<String> binaryDirPaths = Sets.newHashSet();
JavaTreeMakerTest.java,memberSelectExpression = (MemberSelectExpressionTree) tree.methodSelect();,if (tree != null ) memberSelectExpression = (MemberSelectExpressionTree) tree.methodSelect();
JavaTreeMaker.java,astNode = astNode.getFirstChild();,if (astNode != null ) astNode = astNode.getFirstChild();
JavaTreeMaker.java,astNode = astNode.getFirstChild();,if (astNode != null ) astNode = astNode.getFirstChild();
BadAbstractClassName_S00118_Check.java,AstNode modifier = astNode.getPreviousAstNode();,if (astNode != null ) AstNode modifier = astNode.getPreviousAstNode();
BadAbstractClassName_S00118_Check.java,modifier = modifier.getPreviousAstNode();,if (modifier != null ) modifier = modifier.getPreviousAstNode();
BadConstantName_S00115_Check.java,String name = identifier.getTokenValue();,if (identifier != null ) String name = identifier.getTokenValue();
BadFieldName_S00116_Check.java,String name = identifier.getTokenValue();,if (identifier != null ) String name = identifier.getTokenValue();
BadLocalVariableName_S00117_Check.java,String name = identifier.getTokenValue();,if (identifier != null ) String name = identifier.getTokenValue();
ParameterReassignedToCheck.java,IdentifierTree identifier = (IdentifierTree) tree.variable();,if (tree != null ) IdentifierTree identifier = (IdentifierTree) tree.variable();
BadMethodName_S00100_Check.java,String name = method.getName().getTokenValue();,if (method != null ) String name = method.getName().getTokenValue();
EqualsOverridenWithHashCodeCheck.java,hashCodeLine = method.getName().getTokenLine();,if (method != null ) hashCodeLine = method.getName().getTokenLine();
EqualsOverridenWithHashCodeCheck.java,equalsLine = method.getName().getTokenLine();,if (method != null ) equalsLine = method.getName().getTokenLine();
CheckListTest.java,Object visitor = check.newInstance();,if (check != null ) Object visitor = check.newInstance();
CaseInsensitiveComparisonCheck.java,MemberSelectExpressionTree memberSelect = (MemberSelectExpressionTree) tree.methodSelect();,if (tree != null ) MemberSelectExpressionTree memberSelect = (MemberSelectExpressionTree) tree.methodSelect();
CaseInsensitiveComparisonCheck.java,MemberSelectExpressionTree memberSelect = (MemberSelectExpressionTree) methodInvocation.methodSelect();,if (methodInvocation != null ) MemberSelectExpressionTree memberSelect = (MemberSelectExpressionTree) methodInvocation.methodSelect();
CaseInsensitiveComparisonCheck.java,String name = memberSelect.identifier().name();,if (memberSelect != null ) String name = memberSelect.identifier().name();
NestedIfStatementsCheck.java,StatementTree elseStatementTree = tree.elseStatement();,if (tree != null ) StatementTree elseStatementTree = tree.elseStatement();
ParameterReassignedToCheck.java,IdentifierTree identifier = (IdentifierTree) tree.variable();,if (tree != null ) IdentifierTree identifier = (IdentifierTree) tree.variable();
CheckListTest.java,CodeVisitor visitor = (CodeVisitor) check.newInstance();,if (check != null ) CodeVisitor visitor = (CodeVisitor) check.newInstance();
VisitorsBridge.java,this.visitors = visitorsBuilder.build();,if (visitorsBuilder != null ) this.visitors = visitorsBuilder.build();
KindMaps.java,this.literals = literals.build();,if (literals != null ) this.literals = literals.build();
TreeVisitorsDispatcher.java,this.visitorClasses = visitorClassesBuilder.build();,if (visitorClassesBuilder != null ) this.visitorClasses = visitorClassesBuilder.build();
TreeVisitorsDispatcher.java,Method method = methods.get(visitor.getClass());,if (methods != null ) Method method = methods.get(visitor.getClass());
VisitorsBridge.java,this.reflection = new TreeVisitorsDispatcher(reflectionVisitors.build());,if (TreeVisitorsDispatcher(reflectionVisitors != null ) this.reflection = new TreeVisitorsDispatcher(reflectionVisitors.build());
VisitorsBridge.java,this.visitors = standardVisitors.build();,if (standardVisitors != null ) this.visitors = standardVisitors.build();
TreeVisitorsDispatcherTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
TreeVisitorsDispatcherTest.java,Set<Class> interfaces = Sets.newHashSet();,if (Sets != null ) Set<Class> interfaces = Sets.newHashSet();
CaseInsensitiveComparisonCheck.java,String s = sb.toString();,if (sb != null ) String s = sb.toString();
NestedIfStatementsCheck.java,StatementTree elseStatement = tree.elseStatement();,if (tree != null ) StatementTree elseStatement = tree.elseStatement();
VisitorsBridge.java,this.visitors = new TreeVisitorsDispatcher(treeVisitors.build());,if (TreeVisitorsDispatcher(treeVisitors != null ) this.visitors = new TreeVisitorsDispatcher(treeVisitors.build());
ProgressReportTest.java,List<ILoggingEvent> events = captor.getAllValues();,if (captor != null ) List<ILoggingEvent> events = captor.getAllValues();
ProgressReportTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
ProgressReportTest.java,List<String> messages = messagesBuilder.build();,if (messagesBuilder != null ) List<String> messages = messagesBuilder.build();
ProgressReportTest.java,ProgressReport report = new ProgressReport(ProgressReport.class.getName());,if (ProgressReport(ProgressReport != null ) ProgressReport report = new ProgressReport(ProgressReport.class.getName());
ThrowsSeveralCheckedExceptionCheck.java,List<AsmClass> thrownClasses = asmMethod.getThrows();,if (asmMethod != null ) List<AsmClass> thrownClasses = asmMethod.getThrows();
ThrowsSeveralCheckedExceptionCheck.java,List<String> thrownCheckedExceptions = Lists.newArrayList();,if (Lists != null ) List<String> thrownCheckedExceptions = Lists.newArrayList();
ThrowsSeveralCheckedExceptionCheck.java,AsmClass superClass = method.getParent().getSuperClass();,if (method != null ) AsmClass superClass = method.getParent().getSuperClass();
ThrowsSeveralCheckedExceptionCheck.java,AsmClass superClass = method.getParent().getSuperClass();,if (method != null ) AsmClass superClass = method.getParent().getSuperClass();
UndocumentedApiCheck.java,SourceCode currentResource = getContext().peekSourceCode();,if (getContext() != null ) SourceCode currentResource = getContext().peekSourceCode();
CatchUsesExceptionWithContextCheck.java,AstNode nextSibling = node.getNextSibling();,if (node != null ) AstNode nextSibling = node.getNextSibling();
SonarWayProfileTest.java,ValidationMessages validation = ValidationMessages.create();,if (ValidationMessages != null ) ValidationMessages validation = ValidationMessages.create();
SonarWayWithFindbugsProfileTest.java,RulesProfile withoutFindbugs = sonarWay.createProfile(ValidationMessages.create());,if (sonarWay != null ) RulesProfile withoutFindbugs = sonarWay.createProfile(ValidationMessages.create());
CatchWhichOnlyRethrowsCheck.java,AstNode nextSibling = node.getNextSibling();,if (node != null ) AstNode nextSibling = node.getNextSibling();
CatchUsesExceptionWithContextCheck.java,boolean foundCorrectUsage = foundCorrectUsages.pop();,if (foundCorrectUsages != null ) boolean foundCorrectUsage = foundCorrectUsages.pop();
SynchronizedClassUsageCheck.java,String className = token.getOriginalValue();,if (token != null ) String className = token.getOriginalValue();
SynchronizedClassUsageCheck.java,lastReportedLine = token.getLine();,if (token != null ) lastReportedLine = token.getLine();
EmptyStringConcatenationCheck.java,"String g = ""foo"" + bar.baz();          // Compliant","if (Compliant != null ) String g = ""foo"" + bar.baz();          // Compliant"
IndentationCheck.java,lastCheckedLine = node.getLastToken().getLine();,if (node != null ) lastCheckedLine = node.getLastToken().getLine();
IndentationCheck.java,lastCheckedLine = node.getTokenLine();,if (node != null ) lastCheckedLine = node.getTokenLine();
StatementTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
SwitchLabelTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
KeywordTest.java,private LexerlessGrammar g = JavaGrammar.createGrammar();,if (JavaGrammar != null ) private LexerlessGrammar g = JavaGrammar.createGrammar();
ModifiersOrderCheck.java,AstNode previousSibling = node.getPreviousSibling();,if (node != null ) AstNode previousSibling = node.getPreviousSibling();
DeprecatedTagPresenceCheck.java,Token token = node.getToken();,if (node != null ) Token token = node.getToken();
DeprecatedTagPresenceCheck.java,String comment = trivia.getToken().getOriginalValue();,if (trivia != null ) String comment = trivia.getToken().getOriginalValue();
MissingDeprecatedCheck.java,Token token = node.getToken();,if (node != null ) Token token = node.getToken();
MissingDeprecatedCheck.java,String comment = trivia.getToken().getOriginalValue();,if (trivia != null ) String comment = trivia.getToken().getOriginalValue();
FixmeTagPresenceCheck.java,String comment = trivia.getToken().getOriginalValue();,if (trivia != null ) String comment = trivia.getToken().getOriginalValue();
TodoTagPresenceCheck.java,String comment = trivia.getToken().getOriginalValue();,if (trivia != null ) String comment = trivia.getToken().getOriginalValue();
StringBufferUsageCheck.java,lastReportedLine = token.getLine();,if (token != null ) lastReportedLine = token.getLine();
NestedIfStatementsCheck.java,AstNode grandParent = node.getParent().getParent();,if (node != null ) AstNode grandParent = node.getParent().getParent();
ThrowsSeveralCheckedExceptionCheck.java,List<AsmClass> thrownClasses = asmMethod.getThrows();,if (asmMethod != null ) List<AsmClass> thrownClasses = asmMethod.getThrows();
ThrowsSeveralCheckedExceptionCheck.java,List<String> thrownCheckedExceptions = Lists.newArrayList();,if (Lists != null ) List<String> thrownCheckedExceptions = Lists.newArrayList();
CaseInsensitiveComparisonCheck.java,String value = token.getOriginalValue();,if (token != null ) String value = token.getOriginalValue();
ThrowsCheckedExceptionCheck.java,List<AsmClass> thrownClasses = asmMethod.getThrows();,if (asmMethod != null ) List<AsmClass> thrownClasses = asmMethod.getThrows();
CaseInsensitiveComparisonCheck.java,String lastIdentifierValue = qualifiedIdentifier.getLastChild().getTokenOriginalValue();,if (qualifiedIdentifier != null ) String lastIdentifierValue = qualifiedIdentifier.getLastChild().getTokenOriginalValue();
CaseInsensitiveComparisonCheck.java,String lastIdentifierValue = qualifiedIdentifier.getLastChild().getTokenOriginalValue();,if (qualifiedIdentifier != null ) String lastIdentifierValue = qualifiedIdentifier.getLastChild().getTokenOriginalValue();
CaseInsensitiveComparisonCheck.java,String foo = foo.toUpperCase();                              // Compliant,if (Compliant != null ) String foo = foo.toUpperCase();                              // Compliant
TrailingCommentCheck.java,String comment = trivia.getToken().getValue();,if (trivia != null ) String comment = trivia.getToken().getValue();
TrailingCommentCheck.java,comment = comment.trim();,if (comment != null ) comment = comment.trim();
HiddenFieldCheck.java,Integer hiddenFieldLine = classFields.get(node.getTokenOriginalValue());,if (classFields != null ) Integer hiddenFieldLine = classFields.get(node.getTokenOriginalValue());
HiddenFieldCheck.java,String internalName = asmClass.getInternalName();,if (asmClass != null ) String internalName = asmClass.getInternalName();
FindbugsSensor.java,BugCollection collection = executor.execute();,if (executor != null ) BugCollection collection = executor.execute();
FindbugsSensor.java,SourceLineAnnotation sourceLine = bugInstance.getPrimarySourceLineAnnotation();,if (bugInstance != null ) SourceLineAnnotation sourceLine = bugInstance.getPrimarySourceLineAnnotation();
FindbugsSensor.java,String longMessage = bugInstance.getMessageWithoutPrefix();,if (bugInstance != null ) String longMessage = bugInstance.getMessageWithoutPrefix();
FindbugsSensor.java,String className = bugInstance.getPrimarySourceLineAnnotation().getClassName();,if (bugInstance != null ) String className = bugInstance.getPrimarySourceLineAnnotation().getClassName();
FindbugsSensor.java,int start = bugInstance.getPrimarySourceLineAnnotation().getStartLine();,if (bugInstance != null ) int start = bugInstance.getPrimarySourceLineAnnotation().getStartLine();
RightCurlyBraceOnDedicatedLineCheck.java,AstNode result = node.getNextAstNode();,if (node != null ) AstNode result = node.getNextAstNode();
RightCurlyBraceOnDedicatedLineCheck.java,result = result.getNextAstNode();,if (result != null ) result = result.getNextAstNode();
RightCurlyBraceOnDedicatedLineCheck.java,result = result.getFirstChild();,if (result != null ) result = result.getFirstChild();
RightCurlyBraceOnDedicatedLineCheck.java,result = result.getPreviousAstNode();,if (result != null ) result = result.getPreviousAstNode();
RightCurlyBraceOnDedicatedLineCheck.java,result = result.getNextAstNode();,if (result != null ) result = result.getNextAstNode();
RightCurlyBraceOnDedicatedLineCheck.java,lastTokenLine = token.getLine();,if (token != null ) lastTokenLine = token.getLine();
LeftCurlyBraceEndLineCheck.java,lastTokenLine = token.getLine();,if (token != null ) lastTokenLine = token.getLine();
LeftCurlyBraceStartLineCheck.java,lastTokenLine = token.getLine();,if (token != null ) lastTokenLine = token.getLine();
RedundantThrowsDeclarationCheck.java,String thrownClassName = thrownClass.getInternalName();,if (thrownClass != null ) String thrownClassName = thrownClass.getInternalName();
ObjectFinalizeOverridenCallsSuperFinalizeCheck.java,List<Token> tokens = node.getTokens();,if (node != null ) List<Token> tokens = node.getTokens();
JacocoAntInitializer.java,String jvmArg = configuration.getJvmArgument();,if (configuration != null ) String jvmArg = configuration.getJvmArgument();
JacocoAntInitializer.java,String[] names = configuration.getAntTargets();,if (configuration != null ) String[] names = configuration.getAntTargets();
JacocoAntInitializer.java,final RuntimeConfigurable configurableWrapper = task.getRuntimeConfigurableWrapper();,if (task != null ) final RuntimeConfigurable configurableWrapper = task.getRuntimeConfigurableWrapper();
JacocoAntInitializer.java,final RuntimeConfigurable runtimeConfigurableWrapper = el.getRuntimeConfigurableWrapper();,if (el != null ) final RuntimeConfigurable runtimeConfigurableWrapper = el.getRuntimeConfigurableWrapper();
CoberturaMavenInitializer.java,Configuration conf = project.getConfiguration();,if (project != null ) Configuration conf = project.getConfiguration();
AbstractCoberturaParser.java,String filename = sanitizeFilename(entry.getKey());,if (sanitizeFilename(entry != null ) String filename = sanitizeFilename(entry.getKey());
AbstractCoberturaParser.java,builder = CoverageMeasuresBuilder.create();,if (CoverageMeasuresBuilder != null ) builder = CoverageMeasuresBuilder.create();
ThirdPass.java,Resolve.Env env = semanticModel.getEnv(astNode).dup();,if (semanticModel != null ) Resolve.Env env = semanticModel.getEnv(astNode).dup();
ThirdPass.java,AstNode identifierNode = astNode.getFirstChild();,if (astNode != null ) AstNode identifierNode = astNode.getFirstChild();
ThirdPass.java,Resolve.Env env = semanticModel.getEnv(astNode).dup();,if (semanticModel != null ) Resolve.Env env = semanticModel.getEnv(astNode).dup();
ThirdPass.java,String name = identifierNode.getTokenValue();,if (identifierNode != null ) String name = identifierNode.getTokenValue();
ThirdPass.java,String label = identifier.getTokenValue();,if (identifier != null ) String label = identifier.getTokenValue();
SecondPass.java,symbol.interfaces = ImmutableList.of();,if (ImmutableList != null ) symbol.interfaces = ImmutableList.of();
SecondPass.java,symbol.interfaces = interfaces.build();,if (interfaces != null ) symbol.interfaces = interfaces.build();
ResolveTest.java,c.interfaces = ImmutableList.of();,if (ImmutableList != null ) c.interfaces = ImmutableList.of();
ResolveTest.java,i.interfaces = ImmutableList.of();,if (ImmutableList != null ) i.interfaces = ImmutableList.of();
ResolveTest.java,c.interfaces = ImmutableList.of();,if (ImmutableList != null ) c.interfaces = ImmutableList.of();
ResolveTest.java,c.superclass.interfaces = ImmutableList.of();,if (ImmutableList != null ) c.superclass.interfaces = ImmutableList.of();
AbstractAnalyzer.java,final File buildOutputDir = project.getFileSystem().getBuildOutputDir();,if (project != null ) final File buildOutputDir = project.getFileSystem().getBuildOutputDir();
AbstractAnalyzer.java,String vmClassName = data.getName();,if (data != null ) String vmClassName = data.getName();
JaCoCoOverallSensor.java,ProjectFileSystem fs = project.getFileSystem();,if (project != null ) ProjectFileSystem fs = project.getFileSystem();
JaCoCoOverallSensor.java,File reportUTs = fs.resolvePath(configuration.getReportPath());,if (fs != null ) File reportUTs = fs.resolvePath(configuration.getReportPath());
JaCoCoOverallSensor.java,File reportITs = fs.resolvePath(configuration.getItReportPath());,if (fs != null ) File reportITs = fs.resolvePath(configuration.getItReportPath());
FirstPass.java,enclosingSymbol = enclosingSymbol.owner();,if (enclosingSymbol != null ) enclosingSymbol = enclosingSymbol.owner();
FirstPass.java,enclosingSymbol = enclosingSymbol.owner();,if (enclosingSymbol != null ) enclosingSymbol = enclosingSymbol.owner();
Result.java,Token token = entry.getKey().getToken();,if (entry != null ) Token token = entry.getKey().getToken();
FirstPass.java,enclosingSymbol = enclosingSymbol.owner();,if (enclosingSymbol != null ) enclosingSymbol = enclosingSymbol.owner();
FakeRuleFinder.java,findbugsRules = repo.createRules();,if (repo != null ) findbugsRules = repo.createRules();
SymbolTableVisitor.java,AstNode declaration = semanticModel.getAstNode(entry.getKey());,if (semanticModel != null ) AstNode declaration = semanticModel.getAstNode(entry.getKey());
SyntaxHighlighterVisitor.java,JavaFile sonarFile = SquidUtils.convertJavaFileKeyFromSquidFormat(squidFile.getKey());,if (SquidUtils != null ) JavaFile sonarFile = SquidUtils.convertJavaFileKeyFromSquidFormat(squidFile.getKey());
SyntaxHighlighterVisitor.java,"int offset = getOffset(triviaToken.getLine(), triviaToken.getLine());","if (triviaToken != null ) int offset = getOffset(triviaToken.getLine(), triviaToken.getLine());"
SunConventionsProfileTest.java,ValidationMessages validation = ValidationMessages.create();,if (ValidationMessages != null ) ValidationMessages validation = ValidationMessages.create();
PmdProfilesTest.java,ValidationMessages validation = ValidationMessages.create();,if (ValidationMessages != null ) ValidationMessages validation = ValidationMessages.create();
AccessorVisitor.java,AstNode node = method.getReturnType();,if (method != null ) AstNode node = method.getReturnType();
FindbugsConfiguration.java,File classesDir = project.getFileSystem().getBuildOutputDir();,if (project != null ) File classesDir = project.getFileSystem().getBuildOutputDir();
FindbugsAntConverter.java,char[] array = exclusion.toCharArray();,if (exclusion != null ) char[] array = exclusion.toCharArray();
Match.java,this.confidence = new Priority(priority.getValue());,if (Priority(priority != null ) this.confidence = new Priority(priority.getValue());
FindbugsLevelUtilsTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
CharacterLiteralChannel.java,int line = code.getCursor().getLine();,if (code != null ) int line = code.getCursor().getLine();
CharacterLiteralChannel.java,int column = code.getCursor().getColumn();,if (code != null ) int column = code.getCursor().getColumn();
CharacterLiteralChannel.java,prev = (char) code.pop();,if (code != null ) prev = (char) code.pop();
CharacterLiteralChannel.java,prev = (char) code.pop();,if (code != null ) prev = (char) code.pop();
CharacterLiteralChannel.java,String value = sb.toString();,if (sb != null ) String value = sb.toString();
InlineCommentChannel.java,int column = code.getCursor().getColumn();,if (code != null ) int column = code.getCursor().getColumn();
InlineCommentChannel.java,int line = code.getCursor().getLine();,if (code != null ) int line = code.getCursor().getLine();
InlineCommentChannel.java,String value = sb.toString();,if (sb != null ) String value = sb.toString();
JavaIdentifierAndKeywordChannel.java,this.keywordsMap = keywordsMapBuilder.build();,if (keywordsMapBuilder != null ) this.keywordsMap = keywordsMapBuilder.build();
JavaIdentifierAndKeywordChannel.java,int line = code.getCursor().getLine();,if (code != null ) int line = code.getCursor().getLine();
JavaIdentifierAndKeywordChannel.java,int column = code.getCursor().getColumn();,if (code != null ) int column = code.getCursor().getColumn();
JavaIdentifierAndKeywordChannel.java,String word = tmpBuilder.toString();,if (tmpBuilder != null ) String word = tmpBuilder.toString();
MultilineCommentChannel.java,int column = code.getCursor().getColumn();,if (code != null ) int column = code.getCursor().getColumn();
MultilineCommentChannel.java,int line = code.getCursor().getLine();,if (code != null ) int line = code.getCursor().getLine();
MultilineCommentChannel.java,prev = code.pop();,if (code != null ) prev = code.pop();
MultilineCommentChannel.java,String value = sb.toString();,if (sb != null ) String value = sb.toString();
JavaLexerTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
SnippetCheckDisabled.java,List<Group> groups = lcs.getGroups();,if (lcs != null ) List<Group> groups = lcs.getGroups();
SnippetCheckDisabled.java,lastMatchedTokenIndex += currentPatternMatcherResult.getMatchingToIndex();,if (currentPatternMatcherResult != null ) lastMatchedTokenIndex += currentPatternMatcherResult.getMatchingToIndex();
CharacterElementSequence.java,this.characters = new ArrayList<Character>(string.length());,if (ArrayList<Character>(string != null ) this.characters = new ArrayList<Character>(string.length());
Classifier.java,Set<Rule> matchingRules = Sets.newHashSet();,if (Sets != null ) Set<Rule> matchingRules = Sets.newHashSet();
Extractor.java,List<T> results = Lists.newArrayList();,if (Lists != null ) List<T> results = Lists.newArrayList();
Lcs.java,int i = inputI.length();,if (inputI != null ) int i = inputI.length();
Lcs.java,int j = inputJ.length();,if (inputJ != null ) int j = inputJ.length();
Lcs.java,List<Integer> indexesI = commonGroup.getIndexesI();,if (commonGroup != null ) List<Integer> indexesI = commonGroup.getIndexesI();
Lcs.java,List<Integer> indexesJ = commonGroup.getIndexesJ();,if (commonGroup != null ) List<Integer> indexesJ = commonGroup.getIndexesJ();
PatternMatcherBuilder.java,List<Token> tokensToMatch = extractorI.getExtraction(commonGroup.getIndexesI());,if (extractorI != null ) List<Token> tokensToMatch = extractorI.getExtraction(commonGroup.getIndexesI());
PrefixParser.java,Rule previousRootRule = parser.getRootRule();,if (parser != null ) Rule previousRootRule = parser.getRootRule();
PrefixParser.java,int lastAttemptedTokenIndex = parser.getParsingState().getOutpostMatcherTokenIndex();,if (parser != null ) int lastAttemptedTokenIndex = parser.getParsingState().getOutpostMatcherTokenIndex();
ClassifierTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
CommonPatternMatcherTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
ExtractorTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
PatternMatcherBuilderTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
VaryingPatternMatcherTest.java,public ExpectedException thrown = ExpectedException.none();,if (ExpectedException != null ) public ExpectedException thrown = ExpectedException.none();
ComplexityVisitor.java,JavaGrammar grammar = getContext().getGrammar();,if (getContext() != null ) JavaGrammar grammar = getContext().getGrammar();
MethodHelper.java,JavaGrammar grammar = visitor.getContext().getGrammar();,if (visitor != null ) JavaGrammar grammar = visitor.getContext().getGrammar();
PublicApiVisitor.java,JavaGrammar grammar = visitor.getContext().getGrammar();,if (visitor != null ) JavaGrammar grammar = visitor.getContext().getGrammar();
PublicApiVisitor.java,JavaGrammar grammar = getContext().getGrammar();,if (getContext() != null ) JavaGrammar grammar = getContext().getGrammar();
MethodHelper.java,final AstNode typeNode = getName().previousAstNode();,if (getName() != null ) final AstNode typeNode = getName().previousAstNode();
MethodHelper.java,methodNameNode = astNode.previousAstNode();,if (astNode != null ) methodNameNode = astNode.previousAstNode();
MethodHelper.java,methodNameNode = astNode.previousSibling();,if (astNode != null ) methodNameNode = astNode.previousSibling();
AbstractAnalyzer.java,String sessionId = entry.getKey();,if (entry != null ) String sessionId = entry.getKey();
AbstractAnalyzer.java,ExecutionDataStore data = entry.getValue();,if (entry != null ) ExecutionDataStore data = entry.getValue();
AbstractAnalyzer.java,String id = sessionInfo.getId();,if (sessionInfo != null ) String id = sessionInfo.getId();
SurefireJavaParser.java,Test test = new Test(unitTestResult.getName());,if (Test(unitTestResult != null ) Test test = new Test(unitTestResult.getName());
AbstractSurefireParser.java,double testsCount = report.getTests() - report.getSkipped();,if (report != null ) double testsCount = report.getTests() - report.getSkipped();
AbstractSurefireParser.java,double testsCount = report.getTests() - report.getSkipped();,if (report != null ) double testsCount = report.getTests() - report.getSkipped();
AbstractSurefireParser.java,Test test = new Test(unitTestResult.getName());,if (Test(unitTestResult != null ) Test test = new Test(unitTestResult.getName());
AbstractAnalyzer.java,SessionInfo sessionInfo = entry.getKey();,if (entry != null ) SessionInfo sessionInfo = entry.getKey();
AbstractAnalyzer.java,String id = sessionInfo.getId();,if (sessionInfo != null ) String id = sessionInfo.getId();
AbstractAnalyzer.java,ExecutionDataStore executionDataStore = entry.getValue();,if (entry != null ) ExecutionDataStore executionDataStore = entry.getValue();
AbstractAnalyzer.java,"String name = coverage.getPackageName() + ""/"" + coverage.getName();","if (coverage != null ) String name = coverage.getPackageName() + ""/"" + coverage.getName();"
JavaSquid.java,squidIndex = (SquidIndex) astScanner.getIndex(); // TODO unchecked cast,if (cast != null ) squidIndex = (SquidIndex) astScanner.getIndex(); // TODO unchecked cast
CornerCasesTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
ClassDeclarationTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
MemberDeclTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
EnumBodyDeclarationsTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
EnumBodyTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
EnumConstantTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
EnumConstantsTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
EnumDeclarationTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
RelationalExpressionTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
InterfaceDeclarationTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
LiteralTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
FormalParameterDeclsRestTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
FormalParameterDeclsTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
FormalParameterTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
FormalParametersTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
VariableDeclaratorIdTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
AssertStatementTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
BlockStatementTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
BlockStatementsTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
BlockTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
BreakStatementTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
CatchClauseTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
ContinueStatementTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
DoStatementTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
EmptyStatementTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
ExpressionStatementTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
FinallyTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
ForInitTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
ForStatementTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
ForUpdateTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
IfStatementTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
LabeledStatementTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
LocalVariableDeclarationStatementTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
ReturnStatementTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
StatementTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
SwitchBlockStatementGroupTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
SwitchBlockStatementGroupsTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
SwitchLabelTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
SwitchStatementTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
SynchronizedStatementTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
ThrowStatementTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
TryStatementTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
VariableDeclaratorTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
VariableDeclaratorsTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
WhileStatementTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
BoundTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
ClassTypeListTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
ClassTypeTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
ModifierTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
ReferenceTypeTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
TypeArgumentTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
TypeArgumentsTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
TypeParameterTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
TypeParametersTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
TypeTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
CompilationUnitTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
ImportDeclarationTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
PackageDeclarationTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
TypeDeclarationTest.java,Parser<JavaGrammar> p = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> p = JavaParser.create();
GlobalTest.java,List<Group> groups = lcs.getGroups();,if (lcs != null ) List<Group> groups = lcs.getGroups();
SnippetCheck.java,tokensToBeMatched = Lists.newArrayList();,if (Lists != null ) tokensToBeMatched = Lists.newArrayList();
SnippetCheck.java,String expectedValue = tokensToBeMatched.get(tokenIndexToBeMatched).getOriginalValue();,if (tokensToBeMatched != null ) String expectedValue = tokensToBeMatched.get(tokenIndexToBeMatched).getOriginalValue();
SnippetCheck.java,String actualValue = token.getOriginalValue();,if (token != null ) String actualValue = token.getOriginalValue();
SnippetCheck.java,String expectedValue = tokensToBeMatched.get(tokenIndexToBeMatched).getOriginalValue();,if (tokensToBeMatched != null ) String expectedValue = tokensToBeMatched.get(tokenIndexToBeMatched).getOriginalValue();
SnippetCheck.java,String actualValue = token.getOriginalValue();,if (token != null ) String actualValue = token.getOriginalValue();
PrefixParser.java,int lastAttemptedTokenIndex = parser.getParsingState().getOutpostMatcherTokenIndex();,if (parser != null ) int lastAttemptedTokenIndex = parser.getParsingState().getOutpostMatcherTokenIndex();
SnippetCheckTest.java,"check.doExample = ""assertThat(value).isTrue();"";","if (""assertThat(value) != null ) check.doExample = ""assertThat(value).isTrue();"";"
SnippetCheckTest.java,"check.doExample = ""assertThat(value).isTrue();"";","if (""assertThat(value) != null ) check.doExample = ""assertThat(value).isTrue();"";"
SnippetCheckTest.java,"check.doExample = ""assertThat(value).isTrue();"";","if (""assertThat(value) != null ) check.doExample = ""assertThat(value).isTrue();"";"
SnippetCheckTest.java,"check.doExample = ""assertThat(value).isTrue();"";","if (""assertThat(value) != null ) check.doExample = ""assertThat(value).isTrue();"";"
Classifier.java,Set<Rule> matchingRules = Sets.newHashSet();,if (Sets != null ) Set<Rule> matchingRules = Sets.newHashSet();
LCSTest.java,List<Group> groups = lcs.getGroups();,if (lcs != null ) List<Group> groups = lcs.getGroups();
SnippetCheck.java,String expectedValue = tokensToBeMatched.get(tokenIndexToBeMatched).getOriginalValue();,if (tokensToBeMatched != null ) String expectedValue = tokensToBeMatched.get(tokenIndexToBeMatched).getOriginalValue();
SnippetCheck.java,String actualValue = token.getOriginalValue();,if (token != null ) String actualValue = token.getOriginalValue();
JavaToolKit.java,Parser<JavaGrammar> parser = JavaParser.create();,if (JavaParser != null ) Parser<JavaGrammar> parser = JavaParser.create();
JavaSquidSensor.java,JavaFile sonarFile = SquidUtils.convertJavaFileKeyFromSquidFormat(squidFile.getKey());,if (SquidUtils != null ) JavaFile sonarFile = SquidUtils.convertJavaFileKeyFromSquidFormat(squidFile.getKey());
PublicApiVisitor.java,JavaGrammar grammar = getContext().getGrammar();,if (getContext() != null ) JavaGrammar grammar = getContext().getGrammar();
JavaSquid.java,Collection<InputFile> inputFiles = Lists.newArrayList();,if (Lists != null ) Collection<InputFile> inputFiles = Lists.newArrayList();
MethodVisitor.java,Parameter returnType = extractArgumentAndReturnType(methodHelper.getReturnType());,if (extractArgumentAndReturnType(methodHelper != null ) Parameter returnType = extractArgumentAndReturnType(methodHelper.getReturnType());
JavaSquid.java,List<File> sourceFiles = Lists.newArrayList();,if (Lists != null ) List<File> sourceFiles = Lists.newArrayList();
MethodHelper.java,final AstNode typeNode = getName().previousSibling();,if (getName() != null ) final AstNode typeNode = getName().previousSibling();
MethodHelper.java,methodNameNode = astNode.getParent().previousSibling();,if (astNode != null ) methodNameNode = astNode.getParent().previousSibling();
