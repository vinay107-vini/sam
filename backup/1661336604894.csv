Filename,Buggy/Deleted,Fixed/Added
README.md,-- Run the app: `python main.py`,
apps/api.py,-from fastapi import FastAPI,+- Run the app: `python run.py`
apps/api.py,-,
apps/api.py,-api_app = FastAPI(),
apps/api.py,-,
apps/api.py,-,
apps/api.py,-@api_app.get('/'),
apps/api.py,-def test():,
apps/api.py,-    return {'message': 'api_app'},
apps/auth.py,-import os,
apps/auth.py,-,
apps/auth.py,-from authlib.integrations.starlette_client import OAuth,
apps/auth.py,-from authlib.integrations.starlette_client import OAuthError,
apps/auth.py,-from fastapi import FastAPI,
apps/auth.py,-from fastapi import HTTPException,
apps/auth.py,-from fastapi import Request,
apps/auth.py,-from fastapi import status,
apps/auth.py,-from starlette.config import Config,
apps/auth.py,-from starlette.middleware.sessions import SessionMiddleware,
apps/auth.py,-from starlette.responses import JSONResponse,
apps/auth.py,-,
apps/auth.py,-# Create the auth app,
apps/auth.py,-auth_app = FastAPI(),
apps/auth.py,-,
apps/auth.py,-# OAuth settings,
apps/auth.py,-GOOGLE_CLIENT_ID = os.environ.get('GOOGLE_CLIENT_ID') or None,
apps/auth.py,-GOOGLE_CLIENT_SECRET = os.environ.get('GOOGLE_CLIENT_SECRET') or None,
apps/auth.py,-if GOOGLE_CLIENT_ID is None or GOOGLE_CLIENT_SECRET is None:,
apps/auth.py,-    raise BaseException('Missing env variables'),
apps/auth.py,-,
apps/auth.py,-# Set up OAuth,
apps/auth.py,"-config_data = {'GOOGLE_CLIENT_ID': GOOGLE_CLIENT_ID, 'GOOGLE_CLIENT_SECRET': GOOGLE_CLIENT_SECRET}",
apps/auth.py,-starlette_config = Config(environ=config_data),
apps/auth.py,-oauth = OAuth(starlette_config),
apps/auth.py,-oauth.register(,
apps/auth.py,"-    name='google',",
apps/auth.py,"-    server_metadata_url='https://accounts.google.com/.well-known/openid-configuration',",
apps/auth.py,"-    client_kwargs={'scope': 'openid email profile'},",
apps/auth.py,-),
apps/auth.py,-,
apps/auth.py,-# Set up the middleware to read the request session,
apps/auth.py,-SECRET_KEY = os.environ.get('SECRET_KEY') or None,
apps/auth.py,-if SECRET_KEY is None:,
apps/auth.py,-    raise 'Missing SECRET_KEY',
apps/auth.py,"-auth_app.add_middleware(SessionMiddleware, secret_key=SECRET_KEY)",
apps/auth.py,-,
apps/auth.py,-,
apps/auth.py,-@auth_app.route('/login'),
apps/auth.py,-async def login(request: Request):,
apps/auth.py,-    redirect_uri = request.url_for('auth')  # This creates the url for our /auth endpoint,
apps/auth.py,"-    return await oauth.google.authorize_redirect(request, redirect_uri)",
apps/auth.py,-,
apps/auth.py,-,
apps/auth.py,-@auth_app.route('/token'),
apps/auth.py,-async def auth(request: Request):,
apps/auth.py,-    try:,
apps/auth.py,-        access_token = await oauth.google.authorize_access_token(request),
apps/auth.py,-    except OAuthError:,
apps/auth.py,-        raise HTTPException(,
apps/auth.py,"-            status_code=status.HTTP_401_UNAUTHORIZED,",
apps/auth.py,"-            detail='Could not validate credentials',",
apps/auth.py,"-            headers={'WWW-Authenticate': 'Bearer'},",
apps/auth.py,-        ),
apps/auth.py,"-    user_data = await oauth.google.parse_id_token(request, access_token)",
apps/auth.py,-    # TODO: validate email in our database and generate JWT token,
apps/auth.py,-    # TODO: return the JWT token to the user so it can make requests to our /api endpoint,
apps/auth.py,-    return JSONResponse(dict(user_data)),
main.py,-import uvicorn,
main.py,-from fastapi import FastAPI,
main.py,-,
main.py,-from apps.api import api_app,
main.py,-from apps.auth import auth_app,
main.py,-,
main.py,-app = FastAPI(),
main.py,"-app.mount('/auth', auth_app)",
main.py,"-app.mount('/api', api_app)",
main.py,-,
main.py,-,
main.py,-@app.get('/'),
main.py,-async def root():,
main.py,-    return {'message': 'main_app'},
main.py,-,
main.py,-,
main.py,-if __name__ == '__main__':,
main.py,"-    uvicorn.run(app, port=7000)",
